//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable annotations

namespace LinqToXsd.Schemas.Test.NilTest {
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.ComponentModel;
    using System.IO;
    using System.Linq;
    using System.Diagnostics;
    using System.Xml;
    using System.Xml.Schema;
    using System.Xml.Linq;
    using Xml.Schema.Linq;
    
    
    /// <summary>
    /// <para>
    /// Regular expression: (RequiredRef<nil>, RequiredVal<nil>, RequiredEl<nil>, OptionalRef<nil>?, OptionalVal<nil>?, OptionalEl<nil>?, ListRef<nil>*, ListVal<nil>*, ListEl<nil>*)
    /// </para>
    /// </summary>
    public partial class Root : XTypedElement, IXMetaData {
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static Root Load(string xmlFile) {
            return XTypedServices.Load<Root>(xmlFile);
        }
        
        public static Root Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<Root>(xmlFile);
        }
        
        public static Root Parse(string xml) {
            return XTypedServices.Parse<Root>(xml);
        }
        
		public static explicit operator Root(XElement xe) { return XTypedServices.ToXTypedElement<Root>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<Root>(this);
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (RequiredRef<nil>, RequiredVal<nil>, RequiredEl<nil>, OptionalRef<nil>?, OptionalVal<nil>?, OptionalEl<nil>?, ListRef<nil>*, ListVal<nil>*, ListEl<nil>*)
        /// </para>
        /// </summary>
        public Root() {
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName RequiredRefXName = System.Xml.Linq.XName.Get("RequiredRef", "http://linqtoxsd.schemas.org/test/nil-test.xsd");
        
        /// <summary>
        /// <para>
        /// Occurrence: required, nillable
        /// </para>
        /// <para>
        /// Regular expression: (RequiredRef<nil>, RequiredVal<nil>, RequiredEl<nil>, OptionalRef<nil>?, OptionalVal<nil>?, OptionalEl<nil>?, ListRef<nil>*, ListVal<nil>*, ListEl<nil>*)
        /// </para>
        /// </summary>
        public virtual System.String? RequiredRef {
            get {
                XElement x = this.GetElement(RequiredRefXName);
                if (x.IsXsiNil()) {
                    return null;
                }
                return XTypedServices.ParseValue<System.String?>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElement(RequiredRefXName, value ?? XNil.Value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName RequiredValXName = System.Xml.Linq.XName.Get("RequiredVal", "http://linqtoxsd.schemas.org/test/nil-test.xsd");
        
        /// <summary>
        /// <para>
        /// Occurrence: required, nillable
        /// </para>
        /// <para>
        /// Regular expression: (RequiredRef<nil>, RequiredVal<nil>, RequiredEl<nil>, OptionalRef<nil>?, OptionalVal<nil>?, OptionalEl<nil>?, ListRef<nil>*, ListVal<nil>*, ListEl<nil>*)
        /// </para>
        /// </summary>
        public virtual System.Int32? RequiredVal {
            get {
                XElement x = this.GetElement(RequiredValXName);
                if (x.IsXsiNil()) {
                    return null;
                }
                return XTypedServices.ParseValue<int>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
            set {
                this.SetElement(RequiredValXName, value ?? XNil.Value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName RequiredElXName = System.Xml.Linq.XName.Get("RequiredEl", "http://linqtoxsd.schemas.org/test/nil-test.xsd");
        
        /// <summary>
        /// <para>
        /// Occurrence: required, nillable
        /// </para>
        /// <para>
        /// Regular expression: (RequiredRef<nil>, RequiredVal<nil>, RequiredEl<nil>, OptionalRef<nil>?, OptionalVal<nil>?, OptionalEl<nil>?, ListRef<nil>*, ListVal<nil>*, ListEl<nil>*)
        /// </para>
        /// </summary>
        public virtual ValueHolder? RequiredEl {
            get {
                XElement x = this.GetElement(RequiredElXName);
                if (x.IsXsiNil()) {
                    return null;
                }
                return ((ValueHolder?)(x));
            }
            set {
                this.SetElement(RequiredElXName, value ?? XNil.Value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName OptionalRefXName = System.Xml.Linq.XName.Get("OptionalRef", "http://linqtoxsd.schemas.org/test/nil-test.xsd");
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, nillable
        /// </para>
        /// <para>
        /// Regular expression: (RequiredRef<nil>, RequiredVal<nil>, RequiredEl<nil>, OptionalRef<nil>?, OptionalVal<nil>?, OptionalEl<nil>?, ListRef<nil>*, ListVal<nil>*, ListEl<nil>*)
        /// </para>
        /// </summary>
        public virtual System.String? OptionalRef {
            get {
                XElement x = this.GetElement(OptionalRefXName);
                if ((x == null)) {
                    return null;
                }
                if (x.IsXsiNil()) {
                    return null;
                }
                return XTypedServices.ParseValue<System.String?>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElement(OptionalRefXName, value ?? XNil.Value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName OptionalValXName = System.Xml.Linq.XName.Get("OptionalVal", "http://linqtoxsd.schemas.org/test/nil-test.xsd");
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, nillable
        /// </para>
        /// <para>
        /// Regular expression: (RequiredRef<nil>, RequiredVal<nil>, RequiredEl<nil>, OptionalRef<nil>?, OptionalVal<nil>?, OptionalEl<nil>?, ListRef<nil>*, ListVal<nil>*, ListEl<nil>*)
        /// </para>
        /// </summary>
        public virtual System.Int32? OptionalVal {
            get {
                XElement x = this.GetElement(OptionalValXName);
                if ((x == null)) {
                    return null;
                }
                if (x.IsXsiNil()) {
                    return null;
                }
                return XTypedServices.ParseValue<int>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
            set {
                this.SetElement(OptionalValXName, value ?? XNil.Value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName OptionalElXName = System.Xml.Linq.XName.Get("OptionalEl", "http://linqtoxsd.schemas.org/test/nil-test.xsd");
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, nillable
        /// </para>
        /// <para>
        /// Regular expression: (RequiredRef<nil>, RequiredVal<nil>, RequiredEl<nil>, OptionalRef<nil>?, OptionalVal<nil>?, OptionalEl<nil>?, ListRef<nil>*, ListVal<nil>*, ListEl<nil>*)
        /// </para>
        /// </summary>
        public virtual ValueHolder? OptionalEl {
            get {
                XElement x = this.GetElement(OptionalElXName);
                if ((x == null)) {
                    return null;
                }
                if (x.IsXsiNil()) {
                    return null;
                }
                return ((ValueHolder?)(x));
            }
            set {
                this.SetElement(OptionalElXName, value ?? XNil.Value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ListRefXName = System.Xml.Linq.XName.Get("ListRef", "http://linqtoxsd.schemas.org/test/nil-test.xsd");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XSimpleList<System.String?> ListRefField;
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, nillable, repeating
        /// </para>
        /// <para>
        /// Regular expression: (RequiredRef<nil>, RequiredVal<nil>, RequiredEl<nil>, OptionalRef<nil>?, OptionalVal<nil>?, OptionalEl<nil>?, ListRef<nil>*, ListVal<nil>*, ListEl<nil>*)
        /// </para>
        /// </summary>
        [System.Diagnostics.CodeAnalysis.AllowNull()]
        public virtual IList<System.String?> ListRef {
            get {
                if ((this.ListRefField == null)) {
                    this.ListRefField = new XSimpleList<System.String?>(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, ListRefXName) { SupportsXsiNil = true };
                }
                return this.ListRefField;
            }
            set {
                if ((value == null)) {
                    this.ListRefField = null;
                }
                else {
                    if ((this.ListRefField == null)) {
                        this.ListRefField = XSimpleList<System.String?>.InitializeNillable(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, value, ListRefXName);
                    }
                    else {
                        XTypedServices.SetList<System.String?>(this.ListRefField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ListValXName = System.Xml.Linq.XName.Get("ListVal", "http://linqtoxsd.schemas.org/test/nil-test.xsd");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XSimpleList<System.Int32?> ListValField;
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, nillable, repeating
        /// </para>
        /// <para>
        /// Regular expression: (RequiredRef<nil>, RequiredVal<nil>, RequiredEl<nil>, OptionalRef<nil>?, OptionalVal<nil>?, OptionalEl<nil>?, ListRef<nil>*, ListVal<nil>*, ListEl<nil>*)
        /// </para>
        /// </summary>
        [System.Diagnostics.CodeAnalysis.AllowNull()]
        public virtual IList<System.Int32?> ListVal {
            get {
                if ((this.ListValField == null)) {
                    this.ListValField = new XSimpleList<System.Int32?>(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype, ListValXName) { SupportsXsiNil = true };
                }
                return this.ListValField;
            }
            set {
                if ((value == null)) {
                    this.ListValField = null;
                }
                else {
                    if ((this.ListValField == null)) {
                        this.ListValField = XSimpleList<System.Int32?>.InitializeNillable(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype, value, ListValXName);
                    }
                    else {
                        XTypedServices.SetList<System.Int32?>(this.ListValField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ListElXName = System.Xml.Linq.XName.Get("ListEl", "http://linqtoxsd.schemas.org/test/nil-test.xsd");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ValueHolder?> ListElField;
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, nillable, repeating
        /// </para>
        /// <para>
        /// Regular expression: (RequiredRef<nil>, RequiredVal<nil>, RequiredEl<nil>, OptionalRef<nil>?, OptionalVal<nil>?, OptionalEl<nil>?, ListRef<nil>*, ListVal<nil>*, ListEl<nil>*)
        /// </para>
        /// </summary>
        [System.Diagnostics.CodeAnalysis.AllowNull()]
        public virtual IList<ValueHolder?> ListEl {
            get {
                if ((this.ListElField == null)) {
                    this.ListElField = new XTypedList<ValueHolder?>(this, LinqToXsdTypeManager.Instance, ListElXName) { SupportsXsiNil = true };
                }
                return this.ListElField;
            }
            set {
                if ((value == null)) {
                    this.ListElField = null;
                }
                else {
                    if ((this.ListElField == null)) {
                        this.ListElField = XTypedList<ValueHolder?>.InitializeNillable(this, LinqToXsdTypeManager.Instance, value, ListElXName);
                    }
                    else {
                        XTypedServices.SetList<ValueHolder?>(this.ListElField, value);
                    }
                }
            }
        }
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("Root", "http://linqtoxsd.schemas.org/test/nil-test.xsd");
        
        static Root() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(RequiredRefXName), new NamedContentModelEntity(RequiredValXName), new NamedContentModelEntity(RequiredElXName), new NamedContentModelEntity(OptionalRefXName), new NamedContentModelEntity(OptionalValXName), new NamedContentModelEntity(OptionalElXName), new NamedContentModelEntity(ListRefXName), new NamedContentModelEntity(ListValXName), new NamedContentModelEntity(ListElXName));
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(RequiredRefXName, typeof(string));
            localElementDictionary.Add(RequiredValXName, typeof(int));
            localElementDictionary.Add(RequiredElXName, typeof(ValueHolder));
            localElementDictionary.Add(OptionalRefXName, typeof(string));
            localElementDictionary.Add(OptionalValXName, typeof(int));
            localElementDictionary.Add(OptionalElXName, typeof(ValueHolder));
            localElementDictionary.Add(ListRefXName, typeof(string));
            localElementDictionary.Add(ListValXName, typeof(int));
            localElementDictionary.Add(ListElXName, typeof(ValueHolder));
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Value)
    /// </para>
    /// </summary>
    public partial class ValueHolder : XTypedElement, IXMetaData {
        
		public static explicit operator ValueHolder(XElement xe) { return XTypedServices.ToXTypedElement<ValueHolder>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ValueHolder>(this);
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Value)
        /// </para>
        /// </summary>
        public ValueHolder() {
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ValueXName = System.Xml.Linq.XName.Get("Value", "http://linqtoxsd.schemas.org/test/nil-test.xsd");
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (Value)
        /// </para>
        /// </summary>
        public virtual string Value {
            get {
                XElement x = this.GetElement(ValueXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElement(ValueXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("ValueHolder", "http://linqtoxsd.schemas.org/test/nil-test.xsd");
        
        static ValueHolder() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(ValueXName));
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(ValueXName, typeof(string));
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
    }
    
    public class LinqToXsdTypeManager : ILinqToXsdTypeManager {
        
        private LinqToXsdTypeManager() {
        }
        
        private static Dictionary<System.Xml.Linq.XName, System.Type> typeDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        private static void BuildTypeDictionary() {
            typeDictionary.Add(System.Xml.Linq.XName.Get("ValueHolder", "http://linqtoxsd.schemas.org/test/nil-test.xsd"), typeof(global::LinqToXsd.Schemas.Test.NilTest.ValueHolder));
        }
        
        private static Dictionary<System.Xml.Linq.XName, System.Type> elementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        private static void BuildElementDictionary() {
            elementDictionary.Add(System.Xml.Linq.XName.Get("Root", "http://linqtoxsd.schemas.org/test/nil-test.xsd"), typeof(global::LinqToXsd.Schemas.Test.NilTest.Root));
        }
        
        private static XmlSchemaSet schemaSet;
        
        XmlSchemaSet ILinqToXsdTypeManager.Schemas {
            get {
                if ((schemaSet == null)) {
                    XmlSchemaSet tempSet = new XmlSchemaSet();
                    System.Threading.Interlocked.CompareExchange(ref schemaSet, tempSet, null);
                }
                return schemaSet;
            }
            set {
                schemaSet = value;
            }
        }
        
        protected internal static void AddSchemas(XmlSchemaSet schemas) {
            schemas.Add(schemaSet);
        }
        
        Dictionary<System.Xml.Linq.XName, System.Type> ILinqToXsdTypeManager.GlobalTypeDictionary {
            get {
                return typeDictionary;
            }
        }
        
        Dictionary<System.Xml.Linq.XName, System.Type> ILinqToXsdTypeManager.GlobalElementDictionary {
            get {
                return elementDictionary;
            }
        }
        
        Dictionary<System.Type, System.Type> ILinqToXsdTypeManager.RootContentTypeMapping {
            get {
                return XTypedServices.EmptyTypeMappingDictionary;
            }
        }
        
        static LinqToXsdTypeManager() {
            BuildTypeDictionary();
            BuildElementDictionary();
        }
        
        public static System.Type GetRootType() {
            return elementDictionary[System.Xml.Linq.XName.Get("Root", "http://linqtoxsd.schemas.org/test/nil-test.xsd")];
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static LinqToXsdTypeManager typeManagerSingleton = new LinqToXsdTypeManager();
        
        public static LinqToXsdTypeManager Instance {
            get {
                return typeManagerSingleton;
            }
        }
    }
    
    public partial class XRootNamespace {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XDocument doc;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedElement rootObject;
        
        private XRootNamespace() {
        }
        
        public static XRootNamespace Load(string xmlFile) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(xmlFile);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRootNamespace Load(string xmlFile, LoadOptions options) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(xmlFile, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRootNamespace Load(TextReader textReader) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(textReader);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRootNamespace Load(TextReader textReader, LoadOptions options) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(textReader, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRootNamespace Load(XmlReader xmlReader) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(xmlReader);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRootNamespace Parse(string text) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Parse(text);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRootNamespace Parse(string text, LoadOptions options) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Parse(text, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public virtual void Save(string fileName) {
            doc.Save(fileName);
        }
        
        public virtual void Save(TextWriter textWriter) {
            doc.Save(textWriter);
        }
        
        public virtual void Save(XmlWriter writer) {
            doc.Save(writer);
        }
        
        public virtual void Save(TextWriter textWriter, SaveOptions options) {
            doc.Save(textWriter, options);
        }
        
        public virtual void Save(string fileName, SaveOptions options) {
            doc.Save(fileName, options);
        }
        
        public virtual XDocument XDocument {
            get {
                return doc;
            }
        }
        
        public virtual XTypedElement Root {
            get {
                return rootObject;
            }
        }
        
        public XRootNamespace(Root root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        

		public Root Root1 {  get {return rootObject as Root; } }
    }
    
    public partial class XRoot {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XDocument doc;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedElement rootObject;
        
        private XRoot() {
        }
        
        public static XRoot Load(string xmlFile) {
            XRoot root = new XRoot();
            root.doc = XDocument.Load(xmlFile);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRoot Load(string xmlFile, LoadOptions options) {
            XRoot root = new XRoot();
            root.doc = XDocument.Load(xmlFile, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRoot Load(TextReader textReader) {
            XRoot root = new XRoot();
            root.doc = XDocument.Load(textReader);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRoot Load(TextReader textReader, LoadOptions options) {
            XRoot root = new XRoot();
            root.doc = XDocument.Load(textReader, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRoot Load(XmlReader xmlReader) {
            XRoot root = new XRoot();
            root.doc = XDocument.Load(xmlReader);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRoot Parse(string text) {
            XRoot root = new XRoot();
            root.doc = XDocument.Parse(text);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRoot Parse(string text, LoadOptions options) {
            XRoot root = new XRoot();
            root.doc = XDocument.Parse(text, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public virtual void Save(string fileName) {
            doc.Save(fileName);
        }
        
        public virtual void Save(TextWriter textWriter) {
            doc.Save(textWriter);
        }
        
        public virtual void Save(XmlWriter writer) {
            doc.Save(writer);
        }
        
        public virtual void Save(TextWriter textWriter, SaveOptions options) {
            doc.Save(textWriter, options);
        }
        
        public virtual void Save(string fileName, SaveOptions options) {
            doc.Save(fileName, options);
        }
        
        public virtual XDocument XDocument {
            get {
                return doc;
            }
        }
        
        public virtual XTypedElement Root {
            get {
                return rootObject;
            }
        }
        
        public XRoot(global::LinqToXsd.Schemas.Test.NilTest.Root root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        

		public global::LinqToXsd.Schemas.Test.NilTest.Root Root1 {  get {return rootObject as global::LinqToXsd.Schemas.Test.NilTest.Root; } }
    }
}
