//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace www.bfr.abwasser.de {
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.ComponentModel;
    using System.IO;
    using System.Linq;
    using System.Diagnostics;
    using System.Xml;
    using System.Xml.Schema;
    using System.Xml.Linq;
    using Xml.Schema.Linq;
    
    
    /// <summary>
    /// <para>
    /// Regular expression: (Version, Admindaten, Datenkollektive)
    /// </para>
    /// </summary>
    public partial class Identifikation : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName VersionXName = System.Xml.Linq.XName.Get("Version", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName AdmindatenXName = System.Xml.Linq.XName.Get("Admindaten", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName DatenkollektiveXName = System.Xml.Linq.XName.Get("Datenkollektive", "http://www.bfr-abwasser.de");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("Identifikation", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator Identifikation(XElement xe) { return XTypedServices.ToXTypedElement<Identifikation>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static Identifikation() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(VersionXName), new NamedContentModelEntity(AdmindatenXName), new NamedContentModelEntity(DatenkollektiveXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Version, Admindaten, Datenkollektive)
        /// </para>
        /// </summary>
        public Identifikation() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (Version, Admindaten, Datenkollektive)
        /// </para>
        /// </summary>
        public virtual System.DateTime Version {
            get {
                XElement x = this.GetElement(VersionXName);
                return XTypedServices.ParseValue<System.DateTime>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.GYearMonth).Datatype);
            }
            set {
                this.SetElement(VersionXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.GYearMonth).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (Version, Admindaten, Datenkollektive)
        /// </para>
        /// </summary>
        public virtual AdmindatenType Admindaten {
            get {
                XElement x = this.GetElement(AdmindatenXName);
                return ((AdmindatenType)(x));
            }
            set {
                this.SetElement(AdmindatenXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (Version, Admindaten, Datenkollektive)
        /// </para>
        /// </summary>
        public virtual DatenkollektiveType Datenkollektive {
            get {
                XElement x = this.GetElement(DatenkollektiveXName);
                return ((DatenkollektiveType)(x));
            }
            set {
                this.SetElement(DatenkollektiveXName, value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static Identifikation Load(string xmlFile) {
            return XTypedServices.Load<Identifikation>(xmlFile);
        }
        
        public static Identifikation Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<Identifikation>(xmlFile);
        }
        
        public static Identifikation Parse(string xml) {
            return XTypedServices.Parse<Identifikation>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<Identifikation>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(VersionXName, typeof(System.DateTime));
            localElementDictionary.Add(AdmindatenXName, typeof(AdmindatenType));
            localElementDictionary.Add(DatenkollektiveXName, typeof(DatenkollektiveType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// M100 Datenstatus
    /// </para>
    /// </summary>
    public sealed class DatenstatusType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(1360)), new object[] {
                        1m,
                        2m,
                        3m,
                        4m,
                        5m,
                        6m,
                        7m,
                        8m}, 0, 0, null, 8m, 0, null, 1m, 0, null, 2, XmlSchemaWhiteSpace.Collapse));
        
        private DatenstatusType() {
        }
    }
    
    /// <summary>
    /// <para>
    /// M101 Kollektivart
    /// </para>
    /// </summary>
    public sealed class KollektivartType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(1360)), new object[] {
                        1m,
                        2m,
                        3m,
                        4m,
                        5m,
                        6m}, 0, 0, null, 6m, 0, null, 1m, 0, null, 1, XmlSchemaWhiteSpace.Collapse));
        
        private KollektivartType() {
        }
    }
    
    /// <summary>
    /// <para>
    /// M102 Stammdatentyp
    /// </para>
    /// </summary>
    public sealed class StammdatentypType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(1360)), new object[] {
                        1m,
                        2m}, 0, 0, null, 2m, 0, null, 1m, 0, null, 1, XmlSchemaWhiteSpace.Collapse));
        
        private StammdatentypType() {
        }
    }
    
    /// <summary>
    /// <para>
    /// M103 Zust√§ndigkeit
    /// </para>
    /// </summary>
    public sealed class ZustaendigkeitType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(1360)), new object[] {
                        1m,
                        2m,
                        3m,
                        4m,
                        5m}, 0, 0, null, 5m, 0, null, 1m, 0, null, 1, XmlSchemaWhiteSpace.Collapse));
        
        private ZustaendigkeitType() {
        }
    }
    
    /// <summary>
    /// <para>
    /// M104 Regelwerk/Datenumfang
    /// </para>
    /// </summary>
    public sealed class RegelwerkType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(1360)), new object[] {
                        1m,
                        2m,
                        3m,
                        4m,
                        5m,
                        6m}, 0, 0, null, 6m, 0, null, 1m, 0, null, 1, XmlSchemaWhiteSpace.Collapse));
        
        private RegelwerkType() {
        }
    }
    
    /// <summary>
    /// <para>
    /// M105 Abwasserbeseitigungspflicht 
    /// </para>
    /// </summary>
    public sealed class AbwasserbeseitigungspflichtType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(1360)), new object[] {
                        1m,
                        2m}, 0, 0, null, 2m, 0, null, 1m, 0, null, 1, XmlSchemaWhiteSpace.Collapse));
        
        private AbwasserbeseitigungspflichtType() {
        }
    }
    
    /// <summary>
    /// <para>
    /// M106 Typ Ordnungseinheit
    /// </para>
    /// </summary>
    public sealed class TypOrdnungseinheitType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(1360)), new object[] {
                        1m,
                        2m,
                        3m,
                        4m}, 0, 0, null, 4m, 0, null, 1m, 0, null, 1, XmlSchemaWhiteSpace.Collapse));
        
        private TypOrdnungseinheitType() {
        }
    }
    
    /// <summary>
    /// <para>
    /// M107 WENummerDetail
    /// </para>
    /// </summary>
    public sealed class WENummerDetailType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(1360)), new object[] {
                        1m,
                        2m,
                        3m}, 0, 0, null, 3m, 0, null, 1m, 0, null, 1, XmlSchemaWhiteSpace.Collapse));
        
        private WENummerDetailType() {
        }
    }
    
    /// <summary>
    /// <para>
    /// M108 Praesentationsdatentyp
    /// </para>
    /// </summary>
    public sealed class PraesentationsdatentypType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(1360)), new object[] {
                        1m,
                        2m,
                        3m,
                        4m,
                        5m,
                        6m,
                        7m,
                        8m,
                        9m,
                        10m,
                        11m,
                        12m,
                        13m}, 0, 0, null, 13m, 0, null, 1m, 0, null, 2, XmlSchemaWhiteSpace.Collapse));
        
        private PraesentationsdatentypType() {
        }
    }
    
    /// <summary>
    /// <para>
    /// G100 Objektdifferenzierung
    /// </para>
    /// </summary>
    public sealed class ObjektartType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(1360)), new object[] {
                        1m,
                        2m}, 0, 0, null, 2m, 0, null, 1m, 0, null, 1, XmlSchemaWhiteSpace.Collapse));
        
        private ObjektartType() {
        }
    }
    
    /// <summary>
    /// <para>
    /// G101 Entw√§sserungssystem / Kanalart
    /// </para>
    /// </summary>
    public sealed class EntwaesserungsartType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(20)), new object[] {
                        "KR",
                        "KS",
                        "KM",
                        "KW",
                        "DR",
                        "DS",
                        "DM",
                        "GR",
                        "GS",
                        "GM",
                        "GW"}, 0, 0, null, null, 2, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private EntwaesserungsartType() {
        }
    }
    
    /// <summary>
    /// <para>
    /// G102 Material
    /// </para>
    /// </summary>
    public sealed class MaterialType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(20)), new object[] {
                        "AZ",
                        "B",
                        "BS",
                        "CNS",
                        "EIS",
                        "FZ",
                        "GFK",
                        "GG",
                        "GGG",
                        "KST",
                        "MA",
                        "OB",
                        "P",
                        "PC",
                        "PCC",
                        "PE",
                        "PEHD",
                        "PH",
                        "PHB",
                        "PP",
                        "PVC",
                        "PVCU",
                        "SFB",
                        "SPB",
                        "SB",
                        "ST",
                        "STZ",
                        "SZB",
                        "W",
                        "ZG",
                        "MIX",
                        "BOD",
                        "RAS",
                        "PFL"}, 0, 0, null, null, 4, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private MaterialType() {
        }
    }
    
    /// <summary>
    /// <para>
    /// G103 Innenschutz
    /// </para>
    /// </summary>
    public sealed class InnenschutzType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(20)), new object[] {
                        "AIR",
                        "AIS",
                        "AIW",
                        "AIBITR",
                        "AIBITS",
                        "AIBITW",
                        "AIKHR",
                        "AIKHS",
                        "AIKHW",
                        "KKIR",
                        "KKIS",
                        "NV",
                        "KKIW",
                        "ZMR",
                        "ZMS",
                        "ZMW"}, 0, 0, null, null, 7, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private InnenschutzType() {
        }
    }
    
    /// <summary>
    /// <para>
    /// G104 Auskleidung
    /// </para>
    /// </summary>
    public sealed class AuskleidungType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(1360)), new object[] {
                        1m,
                        2m,
                        3m,
                        4m,
                        5m,
                        6m,
                        7m,
                        8m,
                        9m}, 0, 0, null, 9m, 0, null, 1m, 0, null, 1, XmlSchemaWhiteSpace.Collapse));
        
        private AuskleidungType() {
        }
    }
    
    /// <summary>
    /// <para>
    /// G105 Status
    /// </para>
    /// </summary>
    public sealed class StatusType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(1360)), new object[] {
                        0m,
                        1m,
                        2m,
                        3m,
                        4m,
                        5m,
                        6m}, 0, 0, null, 6m, 0, null, 0m, 0, null, 1, XmlSchemaWhiteSpace.Collapse));
        
        private StatusType() {
        }
    }
    
    /// <summary>
    /// <para>
    /// G106 Lage
    /// </para>
    /// </summary>
    public sealed class LageType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(1360)), new object[] {
                        0m,
                        1m,
                        2m,
                        3m,
                        4m,
                        5m,
                        6m,
                        7m,
                        8m,
                        9m,
                        10m,
                        11m}, 0, 0, null, 11m, 0, null, 0m, 0, null, 2, XmlSchemaWhiteSpace.Collapse));
        
        private LageType() {
        }
    }
    
    /// <summary>
    /// <para>
    /// G107 Abwasserart/Transportiertes Medium
    /// </para>
    /// </summary>
    public sealed class AbwasserartType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(1360)), new object[] {
                        0m,
                        1m,
                        2m,
                        3m,
                        4m,
                        5m,
                        6m,
                        8m,
                        9m}, 0, 0, null, 9m, 0, null, 0m, 0, null, 2, XmlSchemaWhiteSpace.Collapse));
        
        private AbwasserartType() {
        }
    }
    
    /// <summary>
    /// <para>
    /// G108 Abwasserart/Wassergef√§hrdende Stoffe
    /// </para>
    /// </summary>
    public sealed class AbwasserartWgSType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(1360)), new object[] {
                        1m,
                        2m,
                        3m,
                        4m}, 0, 0, null, 4m, 0, null, 1m, 0, null, 1, XmlSchemaWhiteSpace.Collapse));
        
        private AbwasserartWgSType() {
        }
    }
    
    /// <summary>
    /// <para>
    /// G109 Grundwasserabstand
    /// </para>
    /// </summary>
    public sealed class GWabstandType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(1360)), new object[] {
                        0m,
                        1m,
                        2m,
                        3m}, 0, 0, null, 3m, 0, null, 0m, 0, null, 1, XmlSchemaWhiteSpace.Collapse));
        
        private GWabstandType() {
        }
    }
    
    /// <summary>
    /// <para>
    /// G110 Wasserschutzzone
    /// </para>
    /// </summary>
    public sealed class WasserschutzzoneType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(1360)), new object[] {
                        0m,
                        1m,
                        2m,
                        3m,
                        4m,
                        5m,
                        6m,
                        7m}, 0, 0, null, 7m, 0, null, 0m, 0, null, 1, XmlSchemaWhiteSpace.Collapse));
        
        private WasserschutzzoneType() {
        }
    }
    
    /// <summary>
    /// <para>
    /// G111 anstehende Bodenart
    /// </para>
    /// </summary>
    public sealed class BodenartType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(1360)), new object[] {
                        0m,
                        1m,
                        2m,
                        3m,
                        4m}, 0, 0, null, 4m, 0, null, 0m, 0, null, 1, XmlSchemaWhiteSpace.Collapse));
        
        private BodenartType() {
        }
    }
    
    /// <summary>
    /// <para>
    /// G112 Untersuchung Boden
    /// </para>
    /// </summary>
    public sealed class UntersuchungBodenType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(1040)), new object[] {
                        1m,
                        2m,
                        3m,
                        4m,
                        5m,
                        6m,
                        7m,
                        8m,
                        99m}, 0, 0, null, null, 0, null, null, 0, null, 2, XmlSchemaWhiteSpace.Collapse));
        
        private UntersuchungBodenType() {
        }
    }
    
    /// <summary>
    /// <para>
    /// G113 Bestimmungkf
    /// </para>
    /// </summary>
    public sealed class BestimmungkfType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(1040)), new object[] {
                        1m,
                        2m,
                        3m,
                        4m,
                        9m}, 0, 0, null, null, 0, null, null, 0, null, 1, XmlSchemaWhiteSpace.Collapse));
        
        private BestimmungkfType() {
        }
    }
    
    /// <summary>
    /// <para>
    /// G114 BeobachtungszyklusGW
    /// </para>
    /// </summary>
    public sealed class BeobachtungszyklusGWType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(1040)), new object[] {
                        0m,
                        1m,
                        4m,
                        13m,
                        52m,
                        99m}, 0, 0, null, null, 0, null, null, 0, null, 2, XmlSchemaWhiteSpace.Collapse));
        
        private BeobachtungszyklusGWType() {
        }
    }
    
    /// <summary>
    /// <para>
    /// G115 Gebietsnutzung
    /// </para>
    /// </summary>
    public sealed class GebietsnutzungType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(1360)), new object[] {
                        1m,
                        2m,
                        3m,
                        4m,
                        5m}, 0, 0, null, 5m, 0, null, 1m, 0, null, 1, XmlSchemaWhiteSpace.Collapse));
        
        private GebietsnutzungType() {
        }
    }
    
    /// <summary>
    /// <para>
    /// G116 Eigentum
    /// </para>
    /// </summary>
    public sealed class EigentumType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(1360)), new object[] {
                        1m,
                        2m,
                        3m,
                        4m,
                        5m}, 0, 0, null, 5m, 0, null, 1m, 0, null, 1, XmlSchemaWhiteSpace.Collapse));
        
        private EigentumType() {
        }
    }
    
    /// <summary>
    /// <para>
    /// G200 Haltung, Leitung, Rinne, Wasserlauf
    /// </para>
    /// </summary>
    public sealed class KantentypType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(1360)), new object[] {
                        0m,
                        1m,
                        2m,
                        3m}, 0, 0, null, 3m, 0, null, 0m, 0, null, 1, XmlSchemaWhiteSpace.Collapse));
        
        private KantentypType() {
        }
    }
    
    /// <summary>
    /// <para>
    /// G201 Haltungsfunktion
    /// </para>
    /// </summary>
    public sealed class HaltungsFunktionType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(1360)), new object[] {
                        1m,
                        2m,
                        3m,
                        4m,
                        5m,
                        6m,
                        7m}, 0, 0, null, 7m, 0, null, 1m, 0, null, 1, XmlSchemaWhiteSpace.Collapse));
        
        private HaltungsFunktionType() {
        }
    }
    
    /// <summary>
    /// <para>
    /// G202 Leitungsfunktion
    /// </para>
    /// </summary>
    public sealed class LeitungsFunktionType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(1360)), new object[] {
                        1m,
                        2m}, 0, 0, null, 2m, 0, null, 1m, 0, null, 1, XmlSchemaWhiteSpace.Collapse));
        
        private LeitungsFunktionType() {
        }
    }
    
    /// <summary>
    /// <para>
    /// G203 Rinnenfunktion
    /// </para>
    /// </summary>
    public sealed class RinnenFunktionType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(1360)), new object[] {
                        1m,
                        2m}, 0, 0, null, 2m, 0, null, 1m, 0, null, 1, XmlSchemaWhiteSpace.Collapse));
        
        private RinnenFunktionType() {
        }
    }
    
    /// <summary>
    /// <para>
    /// G204 Gerinnefunktion
    /// </para>
    /// </summary>
    public sealed class GerinneFunktionType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(1360)), new object[] {
                        1m,
                        2m,
                        3m,
                        4m}, 0, 0, null, 4m, 0, null, 1m, 0, null, 1, XmlSchemaWhiteSpace.Collapse));
        
        private GerinneFunktionType() {
        }
    }
    
    /// <summary>
    /// <para>
    /// G205 Profilart
    /// </para>
    /// </summary>
    public sealed class ProfilartType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(1360)), new object[] {
                        0m,
                        1m,
                        2m,
                        3m,
                        4m,
                        5m,
                        6m,
                        7m,
                        8m,
                        9m,
                        10m,
                        11m,
                        12m,
                        13m}, 0, 0, null, 13m, 0, null, 0m, 0, null, 2, XmlSchemaWhiteSpace.Collapse));
        
        private ProfilartType() {
        }
    }
    
    /// <summary>
    /// <para>
    /// G206 Anschlussart
    /// </para>
    /// </summary>
    public sealed class AnschlussartType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(20)), new object[] {
                        "A",
                        "S",
                        "AG",
                        "SG"}, 0, 0, null, null, 2, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private AnschlussartType() {
        }
    }
    
    /// <summary>
    /// <para>
    /// G207 Druckverfahren
    /// </para>
    /// </summary>
    public sealed class DruckverfahrenType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(1360)), new object[] {
                        1m,
                        2m}, 0, 0, null, 2m, 0, null, 1m, 0, null, 1, XmlSchemaWhiteSpace.Collapse));
        
        private DruckverfahrenType() {
        }
    }
    
    /// <summary>
    /// <para>
    /// G208 SDR (Standard Dimension Ratio)
    /// </para>
    /// </summary>
    public sealed class SDRType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(1360)), new object[] {
                        1m,
                        2m,
                        3m,
                        4m,
                        5m,
                        6m,
                        7m,
                        8m}, 0, 0, null, 8m, 0, null, 1m, 0, null, 2, XmlSchemaWhiteSpace.Collapse));
        
        private SDRType() {
        }
    }
    
    /// <summary>
    /// <para>
    /// G300 Knotentyp
    /// </para>
    /// </summary>
    public sealed class KnotentypType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(1360)), new object[] {
                        0m,
                        1m,
                        2m}, 0, 0, null, 2m, 0, null, 0m, 0, null, 1, XmlSchemaWhiteSpace.Collapse));
        
        private KnotentypType() {
        }
    }
    
    /// <summary>
    /// <para>
    /// G301 Schachtfunktion
    /// </para>
    /// </summary>
    public sealed class SchachtFunktionType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(1360)), new object[] {
                        1m,
                        2m,
                        3m,
                        4m,
                        5m,
                        6m,
                        7m,
                        8m,
                        9m,
                        10m,
                        11m,
                        12m}, 0, 0, null, 12m, 0, null, 1m, 0, null, 2, XmlSchemaWhiteSpace.Collapse));
        
        private SchachtFunktionType() {
        }
    }
    
    /// <summary>
    /// <para>
    /// G302 Deckelform
    /// </para>
    /// </summary>
    public sealed class DeckelformType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(20)), new object[] {
                        "R",
                        "RV",
                        "E",
                        "EV",
                        "Z"}, 0, 0, null, null, 2, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private DeckelformType() {
        }
    }
    
    /// <summary>
    /// <para>
    /// G303 Deckeltyp
    /// </para>
    /// </summary>
    public sealed class DeckeltypType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(1360)), new object[] {
                        1m,
                        2m}, 0, 0, null, 2m, 0, null, 1m, 0, null, 1, XmlSchemaWhiteSpace.Collapse));
        
        private DeckeltypType() {
        }
    }
    
    /// <summary>
    /// <para>
    /// G304 Abdeckungsklasse
    /// </para>
    /// </summary>
    public sealed class AbdeckungsklasseType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(20)), new object[] {
                        "A",
                        "B",
                        "C",
                        "D",
                        "E",
                        "F",
                        "Z"}, 0, 0, null, null, 1, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private AbdeckungsklasseType() {
        }
    }
    
    /// <summary>
    /// <para>
    /// G305 Aufbauform
    /// </para>
    /// </summary>
    public sealed class AufbauformType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(20)), new object[] {
                        "R",
                        "E",
                        "Z"}, 0, 0, null, null, 1, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private AufbauformType() {
        }
    }
    
    /// <summary>
    /// <para>
    /// G306 ArtSteighilfen
    /// </para>
    /// </summary>
    public sealed class ArtSteighilfenType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(1360)), new object[] {
                        1m,
                        2m,
                        3m,
                        4m,
                        5m}, 0, 0, null, 5m, 0, null, 1m, 0, null, 1, XmlSchemaWhiteSpace.Collapse));
        
        private ArtSteighilfenType() {
        }
    }
    
    /// <summary>
    /// <para>
    /// G307 MaterialSteighilfen
    /// </para>
    /// </summary>
    public sealed class MaterialSteighilfenType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(1360)), new object[] {
                        1m,
                        2m,
                        3m,
                        4m,
                        5m,
                        6m}, 0, 0, null, 6m, 0, null, 1m, 0, null, 1, XmlSchemaWhiteSpace.Collapse));
        
        private MaterialSteighilfenType() {
        }
    }
    
    /// <summary>
    /// <para>
    /// G308 Unterteilform
    /// </para>
    /// </summary>
    public sealed class UnterteilformType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(20)), new object[] {
                        "R",
                        "E",
                        "O",
                        "Z"}, 0, 0, null, null, 1, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private UnterteilformType() {
        }
    }
    
    /// <summary>
    /// <para>
    /// G309 Gerinneform
    /// </para>
    /// </summary>
    public sealed class GerinneformType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(1360)), new object[] {
                        0m,
                        1m,
                        2m,
                        3m,
                        4m,
                        5m,
                        6m,
                        9m}, 0, 0, null, 9m, 0, null, 0m, 0, null, 1, XmlSchemaWhiteSpace.Collapse));
        
        private GerinneformType() {
        }
    }
    
    /// <summary>
    /// <para>
    /// G310 Punktkennung
    /// </para>
    /// </summary>
    public sealed class PunktkennungType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(20)), new object[] {
                        "AP",
                        "ER",
                        "GA",
                        "RR",
                        "SE",
                        "NN",
                        "AV",
                        "RV",
                        "EG",
                        "BA",
                        "ZG",
                        "DR",
                        "GP",
                        "AS"}, 0, 0, null, null, 2, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private PunktkennungType() {
        }
    }
    
    /// <summary>
    /// <para>
    /// G400 Bauwerkstyp
    /// </para>
    /// </summary>
    public sealed class BauwerkstypType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(1360)), new object[] {
                        1m,
                        2m,
                        3m,
                        4m,
                        5m,
                        6m,
                        7m,
                        8m,
                        9m,
                        10m,
                        11m,
                        12m,
                        13m,
                        14m}, 0, 0, null, 14m, 0, null, 1m, 0, null, 2, XmlSchemaWhiteSpace.Collapse));
        
        private BauwerkstypType() {
        }
    }
    
    /// <summary>
    /// <para>
    /// G401 Beckenfunktion
    /// </para>
    /// </summary>
    public sealed class BeckenFunktionType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(20)), new object[] {
                        "RUEB",
                        "RKBOD",
                        "RKBMD",
                        "RRB",
                        "RRSB",
                        "RRG",
                        "MFVR",
                        "MRF",
                        "BFVR",
                        "RBF"}, 0, 0, null, null, 5, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private BeckenFunktionType() {
        }
    }
    
    /// <summary>
    /// <para>
    /// G402 Beckenart
    /// </para>
    /// </summary>
    public sealed class BeckenartType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(1360)), new object[] {
                        1m,
                        2m,
                        3m}, 0, 0, null, 3m, 0, null, 1m, 0, null, 1, XmlSchemaWhiteSpace.Collapse));
        
        private BeckenartType() {
        }
    }
    
    /// <summary>
    /// <para>
    /// G403 Anordnung
    /// </para>
    /// </summary>
    public sealed class AnordnungType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(1360)), new object[] {
                        1m,
                        2m}, 0, 0, null, 2m, 0, null, 1m, 0, null, 1, XmlSchemaWhiteSpace.Collapse));
        
        private AnordnungType() {
        }
    }
    
    /// <summary>
    /// <para>
    /// G404a Beckenbauart
    /// </para>
    /// </summary>
    public sealed class BeckenBauartType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(1360)), new object[] {
                        1m,
                        2m}, 0, 0, null, 2m, 0, null, 1m, 0, null, 1, XmlSchemaWhiteSpace.Collapse));
        
        private BeckenBauartType() {
        }
    }
    
    /// <summary>
    /// <para>
    /// G404b Beckenform
    /// </para>
    /// </summary>
    public sealed class BeckenFormType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(1360)), new object[] {
                        1m,
                        2m,
                        3m}, 0, 0, null, 3m, 0, null, 1m, 0, null, 1, XmlSchemaWhiteSpace.Collapse));
        
        private BeckenFormType() {
        }
    }
    
    /// <summary>
    /// <para>
    /// G404c Beckenausf√ºhrung
    /// </para>
    /// </summary>
    public sealed class BeckenAusfuehrungType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(1360)), new object[] {
                        1m,
                        2m}, 0, 0, null, 2m, 0, null, 1m, 0, null, 1, XmlSchemaWhiteSpace.Collapse));
        
        private BeckenAusfuehrungType() {
        }
    }
    
    /// <summary>
    /// <para>
    /// G405 Ablaufart
    /// </para>
    /// </summary>
    public sealed class AblaufartType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(1360)), new object[] {
                        1m,
                        2m,
                        3m,
                        4m,
                        5m,
                        6m,
                        7m,
                        8m,
                        9m,
                        10m,
                        11m,
                        12m}, 0, 0, null, 12m, 0, null, 1m, 0, null, 2, XmlSchemaWhiteSpace.Collapse));
        
        private AblaufartType() {
        }
    }
    
    /// <summary>
    /// <para>
    /// G406 Behandlungsart
    /// </para>
    /// </summary>
    public sealed class BehandlungsartType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(1360)), new object[] {
                        1m,
                        2m,
                        3m,
                        4m,
                        5m,
                        6m,
                        7m,
                        9m,
                        10m,
                        11m}, 0, 0, null, 11m, 0, null, 1m, 0, null, 2, XmlSchemaWhiteSpace.Collapse));
        
        private BehandlungsartType() {
        }
    }
    
    /// <summary>
    /// <para>
    /// G407 Kombinationsart
    /// </para>
    /// </summary>
    public sealed class KombinationsartType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(20)), new object[] {
                        "SB",
                        "SAK",
                        "SK",
                        "VS",
                        "VAK",
                        "VK",
                        "SF",
                        "SSB",
                        "SSE",
                        "SON"}, 0, 0, null, null, 3, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private KombinationsartType() {
        }
    }
    
    /// <summary>
    /// <para>
    /// G408 Aufstellungsart
    /// </para>
    /// </summary>
    public sealed class AufstellungsartType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(1360)), new object[] {
                        1m,
                        2m,
                        3m}, 0, 0, null, 3m, 0, null, 1m, 0, null, 1, XmlSchemaWhiteSpace.Collapse));
        
        private AufstellungsartType() {
        }
    }
    
    /// <summary>
    /// <para>
    /// G409 Abscheiderklasse
    /// </para>
    /// </summary>
    public sealed class AbscheiderklasseType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(1360)), new object[] {
                        1m,
                        2m}, 0, 0, null, 2m, 0, null, 1m, 0, null, 1, XmlSchemaWhiteSpace.Collapse));
        
        private AbscheiderklasseType() {
        }
    }
    
    /// <summary>
    /// <para>
    /// G410 Warnanlage
    /// </para>
    /// </summary>
    public sealed class WarnanlageType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(1360)), new object[] {
                        1m,
                        2m,
                        3m}, 0, 0, null, 3m, 0, null, 1m, 0, null, 1, XmlSchemaWhiteSpace.Collapse));
        
        private WarnanlageType() {
        }
    }
    
    /// <summary>
    /// <para>
    /// G411 Frischwasserversorgung
    /// </para>
    /// </summary>
    public sealed class FrischwasserversorgungType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(1360)), new object[] {
                        1m,
                        2m}, 0, 0, null, 2m, 0, null, 1m, 0, null, 1, XmlSchemaWhiteSpace.Collapse));
        
        private FrischwasserversorgungType() {
        }
    }
    
    /// <summary>
    /// <para>
    /// G412 Neutralisationsart
    /// </para>
    /// </summary>
    public sealed class NeutralisationsartType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(1360)), new object[] {
                        1m,
                        2m}, 0, 0, null, 2m, 0, null, 1m, 0, null, 1, XmlSchemaWhiteSpace.Collapse));
        
        private NeutralisationsartType() {
        }
    }
    
    /// <summary>
    /// <para>
    /// G413 Neutralisationsmittel
    /// </para>
    /// </summary>
    public sealed class NeutralisationsmittelType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(1360)), new object[] {
                        1m,
                        2m,
                        3m,
                        4m,
                        5m,
                        6m,
                        7m,
                        8m,
                        9m,
                        10m,
                        11m,
                        12m}, 0, 0, null, 12m, 0, null, 1m, 0, null, 2, XmlSchemaWhiteSpace.Collapse));
        
        private NeutralisationsmittelType() {
        }
    }
    
    /// <summary>
    /// <para>
    /// G414 Kl√§ranlagefunktion
    /// </para>
    /// </summary>
    public sealed class KlaeranlageFunktionType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(1360)), new object[] {
                        1m,
                        2m,
                        3m,
                        4m,
                        5m,
                        6m,
                        7m}, 0, 0, null, 7m, 0, null, 1m, 0, null, 1, XmlSchemaWhiteSpace.Collapse));
        
        private KlaeranlageFunktionType() {
        }
    }
    
    /// <summary>
    /// <para>
    /// G415 ArtAuslaufbauwerk
    /// </para>
    /// </summary>
    public sealed class ArtAuslaufbauwerkType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(1360)), new object[] {
                        1m,
                        2m,
                        3m,
                        4m}, 0, 0, null, 4m, 0, null, 1m, 0, null, 1, XmlSchemaWhiteSpace.Collapse));
        
        private ArtAuslaufbauwerkType() {
        }
    }
    
    /// <summary>
    /// <para>
    /// G416 Einleitungsart
    /// </para>
    /// </summary>
    public sealed class EinleitungsartType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(1360)), new object[] {
                        1m,
                        2m,
                        3m}, 0, 0, null, 3m, 0, null, 1m, 0, null, 1, XmlSchemaWhiteSpace.Collapse));
        
        private EinleitungsartType() {
        }
    }
    
    /// <summary>
    /// <para>
    /// G417 Schutzgitter
    /// </para>
    /// </summary>
    public sealed class SchutzgitterType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(1360)), new object[] {
                        0m,
                        1m,
                        2m}, 0, 0, null, 2m, 0, null, 0m, 0, null, 1, XmlSchemaWhiteSpace.Collapse));
        
        private SchutzgitterType() {
        }
    }
    
    /// <summary>
    /// <para>
    /// G418 Sicherung
    /// </para>
    /// </summary>
    public sealed class SicherungType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(1360)), new object[] {
                        0m,
                        1m,
                        2m,
                        3m,
                        4m,
                        5m,
                        6m}, 0, 0, null, 6m, 0, null, 0m, 0, null, 1, XmlSchemaWhiteSpace.Collapse));
        
        private SicherungType() {
        }
    }
    
    /// <summary>
    /// <para>
    /// G419 Pumpenart
    /// </para>
    /// </summary>
    public sealed class PumpenartType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(1360)), new object[] {
                        1m,
                        2m,
                        3m}, 0, 0, null, 3m, 0, null, 1m, 0, null, 1, XmlSchemaWhiteSpace.Collapse));
        
        private PumpenartType() {
        }
    }
    
    /// <summary>
    /// <para>
    /// G420 Wehrfunktion
    /// </para>
    /// </summary>
    public sealed class WehrFunktionType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(1360)), new object[] {
                        1m,
                        2m,
                        3m,
                        4m,
                        5m,
                        6m,
                        7m,
                        8m}, 0, 0, null, 8m, 0, null, 1m, 0, null, 1, XmlSchemaWhiteSpace.Collapse));
        
        private WehrFunktionType() {
        }
    }
    
    /// <summary>
    /// <para>
    /// G421 Wehrtyp
    /// </para>
    /// </summary>
    public sealed class WehrtypType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(1360)), new object[] {
                        1m,
                        2m,
                        3m,
                        4m,
                        5m,
                        6m,
                        7m,
                        8m}, 0, 0, null, 8m, 0, null, 1m, 0, null, 1, XmlSchemaWhiteSpace.Collapse));
        
        private WehrtypType() {
        }
    }
    
    /// <summary>
    /// <para>
    /// G422 Wehrkrone
    /// </para>
    /// </summary>
    public sealed class WehrkroneType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(1360)), new object[] {
                        1m,
                        2m,
                        3m}, 0, 0, null, 3m, 0, null, 1m, 0, null, 1, XmlSchemaWhiteSpace.Collapse));
        
        private WehrkroneType() {
        }
    }
    
    /// <summary>
    /// <para>
    /// G423 Schieberfunktion
    /// </para>
    /// </summary>
    public sealed class SchieberFunktionType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(1360)), new object[] {
                        1m,
                        2m,
                        3m}, 0, 0, null, 3m, 0, null, 1m, 0, null, 1, XmlSchemaWhiteSpace.Collapse));
        
        private SchieberFunktionType() {
        }
    }
    
    /// <summary>
    /// <para>
    /// G424 Schieberart
    /// </para>
    /// </summary>
    public sealed class SchieberartType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(1360)), new object[] {
                        1m,
                        2m,
                        3m,
                        4m,
                        5m}, 0, 0, null, 5m, 0, null, 1m, 0, null, 1, XmlSchemaWhiteSpace.Collapse));
        
        private SchieberartType() {
        }
    }
    
    /// <summary>
    /// <para>
    /// G425 Rechentyp
    /// </para>
    /// </summary>
    public sealed class RechentypType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(1360)), new object[] {
                        1m,
                        2m,
                        3m,
                        4m}, 0, 0, null, 4m, 0, null, 1m, 0, null, 1, XmlSchemaWhiteSpace.Collapse));
        
        private RechentypType() {
        }
    }
    
    /// <summary>
    /// <para>
    /// G426 Rechenrost
    /// </para>
    /// </summary>
    public sealed class RechenrostType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(1360)), new object[] {
                        1m,
                        2m,
                        3m,
                        4m,
                        5m}, 0, 0, null, 5m, 0, null, 1m, 0, null, 1, XmlSchemaWhiteSpace.Collapse));
        
        private RechenrostType() {
        }
    }
    
    /// <summary>
    /// <para>
    /// G427 Reinigereingriff
    /// </para>
    /// </summary>
    public sealed class ReinigereingriffType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(1360)), new object[] {
                        1m,
                        2m,
                        3m,
                        4m}, 0, 0, null, 4m, 0, null, 1m, 0, null, 1, XmlSchemaWhiteSpace.Collapse));
        
        private ReinigereingriffType() {
        }
    }
    
    /// <summary>
    /// <para>
    /// G428 Siebtyp
    /// </para>
    /// </summary>
    public sealed class SiebtypType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(1360)), new object[] {
                        1m,
                        2m,
                        3m}, 0, 0, null, 3m, 0, null, 1m, 0, null, 1, XmlSchemaWhiteSpace.Collapse));
        
        private SiebtypType() {
        }
    }
    
    /// <summary>
    /// <para>
    /// G429 Siebk√∂rper
    /// </para>
    /// </summary>
    public sealed class SiebkoerperType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(1360)), new object[] {
                        1m,
                        2m,
                        3m,
                        4m}, 0, 0, null, 4m, 0, null, 1m, 0, null, 1, XmlSchemaWhiteSpace.Collapse));
        
        private SiebkoerperType() {
        }
    }
    
    /// <summary>
    /// <para>
    /// G430 Einbauart
    /// </para>
    /// </summary>
    public sealed class EinbauartType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(1360)), new object[] {
                        1m,
                        2m}, 0, 0, null, 2m, 0, null, 1m, 0, null, 1, XmlSchemaWhiteSpace.Collapse));
        
        private EinbauartType() {
        }
    }
    
    /// <summary>
    /// <para>
    /// G431 Siebfl√§che
    /// </para>
    /// </summary>
    public sealed class SiebflaecheType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(1360)), new object[] {
                        1m,
                        2m,
                        3m}, 0, 0, null, 3m, 0, null, 1m, 0, null, 1, XmlSchemaWhiteSpace.Collapse));
        
        private SiebflaecheType() {
        }
    }
    
    /// <summary>
    /// <para>
    /// G432 Versickerungsanlagetyp
    /// </para>
    /// </summary>
    public sealed class VersickerungsanlagetypType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(1360)), new object[] {
                        1m,
                        2m,
                        3m,
                        4m,
                        5m,
                        7m,
                        8m,
                        10m}, 0, 0, null, 10m, 0, null, 1m, 0, null, 2, XmlSchemaWhiteSpace.Collapse));
        
        private VersickerungsanlagetypType() {
        }
    }
    
    /// <summary>
    /// <para>
    /// G433 ArtFl√§chenanschluss
    /// </para>
    /// </summary>
    public sealed class ArtFlaechenanschlussType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(1360)), new object[] {
                        1m,
                        2m}, 0, 0, null, 2m, 0, null, 1m, 0, null, 1, XmlSchemaWhiteSpace.Collapse));
        
        private ArtFlaechenanschlussType() {
        }
    }
    
    /// <summary>
    /// <para>
    /// G434 F√ºllmaterial
    /// </para>
    /// </summary>
    public sealed class FuellmaterialType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(1360)), new object[] {
                        1m,
                        2m,
                        3m,
                        4m,
                        5m,
                        6m}, 0, 0, null, 6m, 0, null, 1m, 0, null, 1, XmlSchemaWhiteSpace.Collapse));
        
        private FuellmaterialType() {
        }
    }
    
    /// <summary>
    /// <para>
    /// G435 ExistenzDrosselschacht
    /// </para>
    /// </summary>
    public sealed class ExistenzDrosselschachtType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(1360)), new object[] {
                        0m,
                        1m,
                        2m,
                        3m}, 0, 0, null, 3m, 0, null, 0m, 0, null, 1, XmlSchemaWhiteSpace.Collapse));
        
        private ExistenzDrosselschachtType() {
        }
    }
    
    /// <summary>
    /// <para>
    /// G436 VSchachtTyp
    /// </para>
    /// </summary>
    public sealed class VSchachtTypType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(20)), new object[] {
                        "A",
                        "B"}, 0, 0, null, null, 1, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private VSchachtTypType() {
        }
    }
    
    /// <summary>
    /// <para>
    /// G437 Regenwassernutzungsfunktion
    /// </para>
    /// </summary>
    public sealed class RegenwassernutzungFunktionType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(1360)), new object[] {
                        1m,
                        2m,
                        3m}, 0, 0, null, 3m, 0, null, 1m, 0, null, 1, XmlSchemaWhiteSpace.Collapse));
        
        private RegenwassernutzungFunktionType() {
        }
    }
    
    /// <summary>
    /// <para>
    /// G438 MaterialRn
    /// </para>
    /// </summary>
    public sealed class MaterialRnType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(1360)), new object[] {
                        1m,
                        2m,
                        3m}, 0, 0, null, 3m, 0, null, 1m, 0, null, 1, XmlSchemaWhiteSpace.Collapse));
        
        private MaterialRnType() {
        }
    }
    
    /// <summary>
    /// <para>
    /// G439 Filterart
    /// </para>
    /// </summary>
    public sealed class FilterartType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(1360)), new object[] {
                        1m,
                        2m,
                        3m,
                        4m,
                        5m,
                        6m,
                        7m,
                        8m}, 0, 0, null, 8m, 0, null, 1m, 0, null, 1, XmlSchemaWhiteSpace.Collapse));
        
        private FilterartType() {
        }
    }
    
    /// <summary>
    /// <para>
    /// G440 Filtermaterial
    /// </para>
    /// </summary>
    public sealed class FiltermaterialType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(1360)), new object[] {
                        1m,
                        2m,
                        3m,
                        4m,
                        5m}, 0, 0, null, 5m, 0, null, 1m, 0, null, 1, XmlSchemaWhiteSpace.Collapse));
        
        private FiltermaterialType() {
        }
    }
    
    /// <summary>
    /// <para>
    /// G441 Bepflanzung
    /// </para>
    /// </summary>
    public sealed class BepflanzungType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(1360)), new object[] {
                        1m,
                        2m,
                        3m,
                        4m,
                        5m,
                        6m,
                        7m,
                        8m}, 0, 0, null, 8m, 0, null, 1m, 0, null, 1, XmlSchemaWhiteSpace.Collapse));
        
        private BepflanzungType() {
        }
    }
    
    /// <summary>
    /// <para>
    /// G442 ArtEinlaufbauwerk
    /// </para>
    /// </summary>
    public sealed class ArtEinlaufbauwerkType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(1360)), new object[] {
                        1m,
                        2m,
                        3m,
                        4m,
                        5m}, 0, 0, null, 5m, 0, null, 1m, 0, null, 1, XmlSchemaWhiteSpace.Collapse));
        
        private ArtEinlaufbauwerkType() {
        }
    }
    
    /// <summary>
    /// <para>
    /// V101 Objektart gem. BFR Vermessung 
    /// </para>
    /// </summary>
    public sealed class GeoObjektartType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(1360)), new object[] {
                        1m,
                        2m,
                        3m,
                        4m,
                        5m,
                        6m,
                        7m,
                        8m,
                        9m,
                        10m,
                        11m,
                        12m,
                        13m,
                        14m,
                        15m,
                        16m,
                        17m,
                        18m,
                        19m,
                        20m,
                        21m,
                        22m,
                        23m,
                        24m,
                        25m,
                        26m,
                        27m,
                        28m,
                        29m,
                        30m,
                        31m,
                        32m,
                        33m,
                        34m,
                        35m,
                        36m,
                        37m,
                        38m,
                        39m,
                        40m,
                        41m,
                        42m}, 0, 0, null, 42m, 0, null, 1m, 0, null, 2, XmlSchemaWhiteSpace.Collapse));
        
        private GeoObjektartType() {
        }
    }
    
    /// <summary>
    /// <para>
    /// V102 Punkt-, Linien-, Fl√§chenobjekt
    /// </para>
    /// </summary>
    public sealed class GeoObjektTypType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(20)), new object[] {
                        "P",
                        "L",
                        "F"}, 0, 0, null, null, 1, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private GeoObjektTypType() {
        }
    }
    
    /// <summary>
    /// <para>
    /// V103 Lagegenauigkeitsklasse von Punktkoordinaten
    /// </para>
    /// </summary>
    public sealed class LagegenauigkeitsklasseType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(20)), new object[] {
                        "OGL1",
                        "OGL2",
                        "OGL3"}, 0, 0, null, null, 4, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private LagegenauigkeitsklasseType() {
        }
    }
    
    /// <summary>
    /// <para>
    /// V104 Hoehengenauigkeitsklasse der H√∂henangabe
    /// </para>
    /// </summary>
    public sealed class HoehengenauigkeitsklasseType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(20)), new object[] {
                        "OGH1",
                        "OGH2",
                        "OGH3"}, 0, 0, null, null, 4, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private HoehengenauigkeitsklasseType() {
        }
    }
    
    /// <summary>
    /// <para>
    /// V105 Polygonart
    /// </para>
    /// </summary>
    public sealed class PolygonartType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(1360)), new object[] {
                        1m,
                        2m,
                        3m}, 0, 0, null, 3m, 0, null, 1m, 0, null, 1, XmlSchemaWhiteSpace.Collapse));
        
        private PolygonartType() {
        }
    }
    
    /// <summary>
    /// <para>
    /// V106 PunktattributAbwasser
    /// </para>
    /// </summary>
    public sealed class PunktattributAbwasserType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(20)), new object[] {
                        "DMP",
                        "SMP",
                        "RAP",
                        "LHP",
                        "AP",
                        "NN",
                        "ER",
                        "GA",
                        "RR",
                        "SE",
                        "SBD",
                        "SBW",
                        "KOP",
                        "FLP",
                        "ZLK",
                        "KP",
                        "HP",
                        "GOK",
                        "KMP",
                        "PAU",
                        "AV",
                        "RV",
                        "EG",
                        "BA",
                        "ZG",
                        "DR",
                        "GP",
                        "AS"}, 0, 0, null, null, 3, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private PunktattributAbwasserType() {
        }
    }
    
    /// <summary>
    /// <para>
    /// V107 Lagegenauigkeitsstufe von Punktkoordinaten
    /// </para>
    /// </summary>
    public sealed class LagestufeType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(1360)), new object[] {
                        0m,
                        1m,
                        2m,
                        3m,
                        4m,
                        5m,
                        6m,
                        7m,
                        8m,
                        9m}, 0, 0, null, 9m, 0, null, 0m, 0, null, 1, XmlSchemaWhiteSpace.Collapse));
        
        private LagestufeType() {
        }
    }
    
    /// <summary>
    /// <para>
    /// V108 H√∂hengenauigkeitsstufe der H√∂henangabe
    /// </para>
    /// </summary>
    public sealed class HoehenstufeType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(1360)), new object[] {
                        0m,
                        1m,
                        2m,
                        3m,
                        4m,
                        5m,
                        6m,
                        7m,
                        9m}, 0, 0, null, 9m, 0, null, 0m, 0, null, 1, XmlSchemaWhiteSpace.Collapse));
        
        private HoehenstufeType() {
        }
    }
    
    /// <summary>
    /// <para>
    /// S200 ArtMassnahme
    /// </para>
    /// </summary>
    public sealed class ArtMassnahmeType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(1360)), new object[] {
                        1m,
                        2m,
                        3m,
                        4m,
                        5m,
                        6m,
                        7m,
                        8m}, 0, 0, null, 8m, 0, null, 1m, 0, null, 1, XmlSchemaWhiteSpace.Collapse));
        
        private ArtMassnahmeType() {
        }
    }
    
    /// <summary>
    /// <para>
    /// S100 Auftragsart
    /// </para>
    /// </summary>
    public sealed class AuftragsartSanierungType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(1360)), new object[] {
                        1m,
                        2m,
                        3m}, 0, 0, null, 3m, 0, null, 1m, 0, null, 1, XmlSchemaWhiteSpace.Collapse));
        
        private AuftragsartSanierungType() {
        }
    }
    
    /// <summary>
    /// <para>
    /// S101 Verfahrensbezeichnung
    /// </para>
    /// </summary>
    public sealed class VerfahrensbezeichnungType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(20)), new object[] {
                        "ANS",
                        "AUF",
                        "AVR",
                        "APR",
                        "ATB",
                        "AUM",
                        "BER",
                        "EVA",
                        "FLU",
                        "INU",
                        "INL",
                        "INM",
                        "KUR",
                        "LRS",
                        "LAR",
                        "MON",
                        "NOP",
                        "OBB",
                        "OLA",
                        "RED",
                        "ROB",
                        "RAU",
                        "RST",
                        "RZV",
                        "RUV",
                        "SCH",
                        "SSL",
                        "TEI",
                        "VDR",
                        "VFU",
                        "VMO",
                        "NEU",
                        "WIK",
                        "UEB",
                        "ZNN",
                        "HUT",
                        "KUS"}, 0, 0, null, null, 3, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private VerfahrensbezeichnungType() {
        }
    }
    
    /// <summary>
    /// <para>
    /// S102 Sanierungsumfang
    /// </para>
    /// </summary>
    public sealed class SanierungsumfangType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(1360)), new object[] {
                        1m,
                        2m,
                        3m,
                        4m,
                        5m}, 0, 0, null, 5m, 0, null, 1m, 0, null, 1, XmlSchemaWhiteSpace.Collapse));
        
        private SanierungsumfangType() {
        }
    }
    
    /// <summary>
    /// <para>
    /// S103 Bauwerksteil
    /// </para>
    /// </summary>
    public sealed class BauwerksteilType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(20)), new object[] {
                        "A",
                        "B",
                        "C",
                        "D",
                        "E",
                        "F",
                        "G",
                        "H",
                        "I",
                        "K",
                        "L",
                        "M",
                        "N",
                        "P",
                        "Q",
                        "S",
                        "T",
                        "V",
                        "W",
                        "Z",
                        "-"}, 0, 0, null, null, 1, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private BauwerksteilType() {
        }
    }
    
    /// <summary>
    /// <para>
    /// S104 Profiltyp
    /// </para>
    /// </summary>
    public sealed class ProfiltypType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(20)), new object[] {
                        "0",
                        "1",
                        "2",
                        "3",
                        "4",
                        "5",
                        "6",
                        "7",
                        "8",
                        "9",
                        "10",
                        "11",
                        "12",
                        "13",
                        "R",
                        "E",
                        "Z"}, 0, 0, null, null, 2, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private ProfiltypType() {
        }
    }
    
    /// <summary>
    /// <para>
    /// S105 Dokumentationsrichtung
    /// </para>
    /// </summary>
    public sealed class DokumentationsrichtungType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(20)), new object[] {
                        "O",
                        "U"}, 0, 0, null, null, 1, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private DokumentationsrichtungType() {
        }
    }
    
    /// <summary>
    /// <para>
    /// S106 Materialverbund (1 und 2)
    /// </para>
    /// </summary>
    public sealed class MaterialVerbundType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(20)), new object[] {
                        "AH",
                        "AS",
                        "BIT",
                        "EP",
                        "GF",
                        "GFE",
                        "GFCR",
                        "KH",
                        "KKL",
                        "MAC",
                        "MD",
                        "PA",
                        "PB",
                        "PHA",
                        "PUR",
                        "QS",
                        "SF",
                        "SG",
                        "TS",
                        "TSG",
                        "TZS",
                        "UP",
                        "VE",
                        "ZM",
                        "ZS",
                        "ZU"}, 0, 0, null, null, 4, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private MaterialVerbundType() {
        }
    }
    
    /// <summary>
    /// <para>
    /// S107 Belastung
    /// </para>
    /// </summary>
    public sealed class BelastungType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(20)), new object[] {
                        "SLW60",
                        "SLW30",
                        "LKW12",
                        "UIC71m",
                        "UIC71e",
                        "BFZ90",
                        "BFZ180",
                        "BFZ350",
                        "BFZ550",
                        "BFZ750",
                        "NN",
                        "SONST",
                        "A15",
                        "B125",
                        "C250",
                        "D400",
                        "E600",
                        "F900"}, 0, 0, null, null, 6, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private BelastungType() {
        }
    }
    
    /// <summary>
    /// <para>
    /// S108 Wasserdurchl√§ssigkeit
    /// </para>
    /// </summary>
    public sealed class WasserdurchlaessigkeitType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(1360)), new object[] {
                        1m,
                        2m,
                        3m}, 0, 0, null, 3m, 0, null, 1m, 0, null, 1, XmlSchemaWhiteSpace.Collapse));
        
        private WasserdurchlaessigkeitType() {
        }
    }
    
    /// <summary>
    /// <para>
    /// P101 Textausrichtung horizontal
    /// </para>
    /// </summary>
    public enum TextausrichtungHorizontalType {
        
        linksb√ºndig,
        
        rechtsb√ºndig,
        
        zentrisch,
    }
    
    /// <summary>
    /// <para>
    /// P101 Textausrichtung horizontal
    /// </para>
    /// </summary>
    public sealed class TextausrichtungHorizontalTypeValidator {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "linksb√ºndig",
                        "rechtsb√ºndig",
                        "zentrisch"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private TextausrichtungHorizontalTypeValidator() {
        }
    }
    
    /// <summary>
    /// <para>
    /// P102 Textausrichtung vertikal
    /// </para>
    /// </summary>
    public enum TextausrichtungVertikalType {
        
        Basis,
        
        Mitte,
        
        oben,
    }
    
    /// <summary>
    /// <para>
    /// P102 Textausrichtung vertikal
    /// </para>
    /// </summary>
    public sealed class TextausrichtungVertikalTypeValidator {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "Basis",
                        "Mitte",
                        "oben"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private TextausrichtungVertikalTypeValidator() {
        }
    }
    
    /// <summary>
    /// <para>
    /// U100 Rohrleitungstyp
    /// </para>
    /// </summary>
    public sealed class RohrleitungstypType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(1360)), new object[] {
                        0m,
                        1m}, 0, 0, null, 1m, 0, null, 0m, 0, null, 1, XmlSchemaWhiteSpace.Collapse));
        
        private RohrleitungstypType() {
        }
    }
    
    /// <summary>
    /// <para>
    /// U101 Inspektionszweck
    /// </para>
    /// </summary>
    public sealed class InspektionszweckType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(1360)), new object[] {
                        1m,
                        2m,
                        3m,
                        4m,
                        5m,
                        6m,
                        7m,
                        8m}, 0, 0, null, 8m, 0, null, 1m, 0, null, 1, XmlSchemaWhiteSpace.Collapse));
        
        private InspektionszweckType() {
        }
    }
    
    /// <summary>
    /// <para>
    /// U102 Kodiersystem
    /// </para>
    /// </summary>
    public sealed class KodiersystemType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(1360)), new object[] {
                        1m,
                        2m,
                        3m,
                        4m,
                        5m,
                        6m,
                        7m,
                        8m,
                        9m,
                        10m}, 0, 0, null, 10m, 0, null, 1m, 0, null, 2, XmlSchemaWhiteSpace.Collapse));
        
        private KodiersystemType() {
        }
    }
    
    /// <summary>
    /// <para>
    /// U103 Anlagentyp
    /// </para>
    /// </summary>
    public sealed class AnlagentypType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(1360)), new object[] {
                        1m,
                        2m,
                        3m,
                        4m}, 0, 0, null, 4m, 0, null, 1m, 0, null, 1, XmlSchemaWhiteSpace.Collapse));
        
        private AnlagentypType() {
        }
    }
    
    /// <summary>
    /// <para>
    /// U104 Inspektionsrichtung
    /// </para>
    /// </summary>
    public sealed class InspektionsrichtungType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(20)), new object[] {
                        "O",
                        "U"}, 0, 0, null, null, 1, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private InspektionsrichtungType() {
        }
    }
    
    /// <summary>
    /// <para>
    /// U105 BezugspunktLage
    /// </para>
    /// </summary>
    public sealed class BezugspunktLageType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(1360)), new object[] {
                        1m,
                        2m,
                        3m,
                        4m}, 0, 0, null, 4m, 0, null, 1m, 0, null, 1, XmlSchemaWhiteSpace.Collapse));
        
        private BezugspunktLageType() {
        }
    }
    
    /// <summary>
    /// <para>
    /// U106 Wetter
    /// </para>
    /// </summary>
    public sealed class WetterType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(1360)), new object[] {
                        1m,
                        2m,
                        3m}, 0, 0, null, 3m, 0, null, 1m, 0, null, 1, XmlSchemaWhiteSpace.Collapse));
        
        private WetterType() {
        }
    }
    
    /// <summary>
    /// <para>
    /// U107 Wasserhaltung
    /// </para>
    /// </summary>
    public sealed class WasserhaltungType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(1360)), new object[] {
                        1m,
                        2m,
                        3m,
                        4m,
                        5m,
                        6m}, 0, 0, null, 6m, 0, null, 1m, 0, null, 1, XmlSchemaWhiteSpace.Collapse));
        
        private WasserhaltungType() {
        }
    }
    
    /// <summary>
    /// <para>
    /// U108 Inspektionsverfahren
    /// </para>
    /// </summary>
    public sealed class InspektionsverfahrenType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(1360)), new object[] {
                        0m,
                        1m,
                        2m,
                        3m}, 0, 0, null, 3m, 0, null, 0m, 0, null, 1, XmlSchemaWhiteSpace.Collapse));
        
        private InspektionsverfahrenType() {
        }
    }
    
    /// <summary>
    /// <para>
    /// U109 Inspektionsart
    /// </para>
    /// </summary>
    public sealed class InspektionsartType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(1360)), new object[] {
                        0m,
                        1m,
                        2m,
                        3m}, 0, 0, null, 3m, 0, null, 0m, 0, null, 1, XmlSchemaWhiteSpace.Collapse));
        
        private InspektionsartType() {
        }
    }
    
    /// <summary>
    /// <para>
    /// U110 VideoSpeichermedium
    /// </para>
    /// </summary>
    public sealed class VideoSpeichermediumType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(1360)), new object[] {
                        1m,
                        2m,
                        3m,
                        4m,
                        5m,
                        6m}, 0, 0, null, 6m, 0, null, 1m, 0, null, 1, XmlSchemaWhiteSpace.Collapse));
        
        private VideoSpeichermediumType() {
        }
    }
    
    /// <summary>
    /// <para>
    /// U111 FotoSpeichermedium
    /// </para>
    /// </summary>
    public sealed class FotoSpeichermediumType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(20)), new object[] {
                        "DIS",
                        "DAT",
                        "MOD",
                        "CDR",
                        "DVD",
                        "WDT"}, 0, 0, null, null, 5, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private FotoSpeichermediumType() {
        }
    }
    
    /// <summary>
    /// <para>
    /// U112 Bewertungsverfahren
    /// </para>
    /// </summary>
    public sealed class BewertungsverfahrenType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(1360)), new object[] {
                        1m,
                        2m,
                        3m,
                        4m}, 0, 0, null, 4m, 0, null, 1m, 0, null, 1, XmlSchemaWhiteSpace.Collapse));
        
        private BewertungsverfahrenType() {
        }
    }
    
    /// <summary>
    /// <para>
    /// U114 ArtAuskleidung
    /// </para>
    /// </summary>
    public sealed class ArtAuskleidungType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(1360)), new object[] {
                        0m,
                        1m,
                        2m,
                        3m,
                        4m,
                        5m,
                        6m,
                        7m,
                        8m,
                        9m}, 0, 0, null, 9m, 0, null, 0m, 0, null, 1, XmlSchemaWhiteSpace.Collapse));
        
        private ArtAuskleidungType() {
        }
    }
    
    /// <summary>
    /// <para>
    /// U115 Vertikaler Bezugspunkt
    /// </para>
    /// </summary>
    public sealed class VertikalerBezugspunktType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(1360)), new object[] {
                        1m,
                        2m,
                        3m,
                        4m}, 0, 0, null, 4m, 0, null, 1m, 0, null, 1, XmlSchemaWhiteSpace.Collapse));
        
        private VertikalerBezugspunktType() {
        }
    }
    
    /// <summary>
    /// <para>
    /// U116 HorizontalerBezugspunkt
    /// </para>
    /// </summary>
    public sealed class HorizontalerBezugspunktType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(1360)), new object[] {
                        1m,
                        2m}, 0, 0, null, 2m, 0, null, 1m, 0, null, 1, XmlSchemaWhiteSpace.Collapse));
        
        private HorizontalerBezugspunktType() {
        }
    }
    
    /// <summary>
    /// <para>
    /// U117 Schachtbereich
    /// </para>
    /// </summary>
    public sealed class SchachtbereichType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(20)), new object[] {
                        "A",
                        "B",
                        "C",
                        "D",
                        "E",
                        "F",
                        "G",
                        "H",
                        "I",
                        "J"}, 0, 0, null, null, 1, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private SchachtbereichType() {
        }
    }
    
    /// <summary>
    /// <para>
    /// U119 Auftragsart
    /// </para>
    /// </summary>
    public sealed class AuftragsartType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(1360)), new object[] {
                        1m,
                        2m,
                        3m}, 0, 0, null, 3m, 0, null, 1m, 0, null, 1, XmlSchemaWhiteSpace.Collapse));
        
        private AuftragsartType() {
        }
    }
    
    /// <summary>
    /// <para>
    /// U120 Pr√ºfgrund
    /// </para>
    /// </summary>
    public sealed class PruefgrundType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(1360)), new object[] {
                        1m,
                        2m}, 0, 0, null, 2m, 0, null, 1m, 0, null, 1, XmlSchemaWhiteSpace.Collapse));
        
        private PruefgrundType() {
        }
    }
    
    /// <summary>
    /// <para>
    /// U121 Pr√ºfvorschrift
    /// </para>
    /// </summary>
    public sealed class PruefvorschriftType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(1360)), new object[] {
                        1m,
                        2m,
                        3m,
                        4m,
                        5m,
                        6m,
                        7m}, 0, 0, null, 7m, 0, null, 1m, 0, null, 1, XmlSchemaWhiteSpace.Collapse));
        
        private PruefvorschriftType() {
        }
    }
    
    /// <summary>
    /// <para>
    /// U122 Pr√ºfverfahren
    /// </para>
    /// </summary>
    public sealed class PruefverfahrenType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(1360)), new object[] {
                        1m,
                        2m,
                        3m}, 0, 0, null, 3m, 0, null, 1m, 0, null, 1, XmlSchemaWhiteSpace.Collapse));
        
        private PruefverfahrenType() {
        }
    }
    
    /// <summary>
    /// <para>
    /// U123 Pr√ºfumfang
    /// </para>
    /// </summary>
    public sealed class PruefumfangType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(1360)), new object[] {
                        1m,
                        2m,
                        3m,
                        4m}, 0, 0, null, 4m, 0, null, 1m, 0, null, 1, XmlSchemaWhiteSpace.Collapse));
        
        private PruefumfangType() {
        }
    }
    
    /// <summary>
    /// <para>
    /// U124 HerkunftProfil
    /// </para>
    /// </summary>
    public sealed class HerkunftProfilType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(1360)), new object[] {
                        1m,
                        2m,
                        3m,
                        4m}, 0, 0, null, 4m, 0, null, 1m, 0, null, 1, XmlSchemaWhiteSpace.Collapse));
        
        private HerkunftProfilType() {
        }
    }
    
    /// <summary>
    /// <para>
    /// U125 Herkunft
    /// </para>
    /// </summary>
    public sealed class HerkunftType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(1360)), new object[] {
                        1m,
                        2m,
                        3m}, 0, 0, null, 3m, 0, null, 1m, 0, null, 1, XmlSchemaWhiteSpace.Collapse));
        
        private HerkunftType() {
        }
    }
    
    /// <summary>
    /// <para>
    /// U126 Streckenschaden
    /// </para>
    /// </summary>
    public sealed class StreckenschadenType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(17)), new object[] {
                        "A",
                        "B",
                        "C",
                        "E",
                        "G",
                        "R"}, 0, 1, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private StreckenschadenType() {
        }
    }
    
    /// <summary>
    /// <para>
    /// U127 Art Videoreferenz
    /// </para>
    /// </summary>
    public sealed class ArtVideoreferenzType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(1360)), new object[] {
                        1m,
                        2m,
                        3m,
                        4m,
                        5m}, 0, 0, null, 5m, 0, null, 1m, 0, null, 1, XmlSchemaWhiteSpace.Collapse));
        
        private ArtVideoreferenzType() {
        }
    }
    
    /// <summary>
    /// <para>
    /// U128 Zustand in sanierten Bereichen von Rohrleitungen f√ºr Kode BAKZ gem. DWA-M 149-2
    /// </para>
    /// </summary>
    public sealed class BAKZustandSanierungType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(17)), new object[] {
                        "A",
                        "B",
                        "C",
                        "D",
                        "E",
                        "F",
                        "G",
                        "H",
                        "I",
                        "J",
                        "K",
                        "L",
                        "M",
                        "N",
                        "O",
                        "P",
                        "Q",
                        "R",
                        "Z"}, 0, 1, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private BAKZustandSanierungType() {
        }
    }
    
    /// <summary>
    /// <para>
    /// U129 Zustand in sanierten Bereichen von Rohrleitungen f√ºr Kode BALZ gem. DWA-M 149-2
    /// </para>
    /// </summary>
    public sealed class BALZustandSanierungType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(17)), new object[] {
                        "A",
                        "B",
                        "C",
                        "D",
                        "E",
                        "F",
                        "G",
                        "H",
                        "I",
                        "J",
                        "K",
                        "L",
                        "M",
                        "N",
                        "O",
                        "P",
                        "Q",
                        "Z"}, 0, 1, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private BALZustandSanierungType() {
        }
    }
    
    /// <summary>
    /// <para>
    /// U130 Sanierungsverfahren bei punkteller Reparatur einer Rohrleitung gem. DWA-M 149-2
    /// </para>
    /// </summary>
    public sealed class RVerfahrenSanierungType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(17)), new object[] {
                        "A",
                        "B",
                        "C",
                        "D",
                        "E",
                        "F",
                        "G",
                        "H",
                        "I",
                        "Z"}, 0, 1, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private RVerfahrenSanierungType() {
        }
    }
    
    /// <summary>
    /// <para>
    /// U131 Zustand in sanierten Bereichen von Sch√§chten f√ºr Kode DAKZ gem. DWA-M 149-2
    /// </para>
    /// </summary>
    public sealed class DAKZustandSanierungType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(17)), new object[] {
                        "A",
                        "B",
                        "C",
                        "D",
                        "E",
                        "F",
                        "G",
                        "H",
                        "I",
                        "J",
                        "K",
                        "L",
                        "M",
                        "N",
                        "O",
                        "P",
                        "Z"}, 0, 1, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private DAKZustandSanierungType() {
        }
    }
    
    /// <summary>
    /// <para>
    /// U132 Zustand in sanierten Bereichen von Sch√§chten f√ºr Kode DALZ gem. DWA-M 149-2
    /// </para>
    /// </summary>
    public sealed class DALZustandSanierungType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(17)), new object[] {
                        "A",
                        "B",
                        "C",
                        "D",
                        "E",
                        "F",
                        "G",
                        "H",
                        "Z"}, 0, 1, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private DALZustandSanierungType() {
        }
    }
    
    /// <summary>
    /// <para>
    /// U133 Sanierungsverfahren bei punktueller Reparatur eines Schachtes gem. DWA-M 149-2
    /// </para>
    /// </summary>
    public sealed class KVerfahrenSanierungType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(17)), new object[] {
                        "A",
                        "B",
                        "C",
                        "D",
                        "E",
                        "F",
                        "G",
                        "Z"}, 0, 1, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private KVerfahrenSanierungType() {
        }
    }
    
    /// <summary>
    /// <para>
    /// U134 Grund f√ºr einen Inspektionsabbruch bei Kan√§len und Leitungen
    /// </para>
    /// </summary>
    public sealed class GrundAbbruchType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(17)), new object[] {
                        "GE",
                        "GN",
                        "IN",
                        "AV",
                        "ZE"}, 0, 2, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private GrundAbbruchType() {
        }
    }
    
    /// <summary>
    /// <para>
    /// U135 Beschreibung von besonderen Schadensbildern von Rohrleitungen in Verbindung mit Kode BDB 
    /// </para>
    /// </summary>
    public sealed class BDBZustandLeitungType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(17)), new object[] {
                        "AA",
                        "AB",
                        "AC",
                        "AD",
                        "AE",
                        "BA",
                        "BB",
                        "BC"}, 0, 2, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private BDBZustandLeitungType() {
        }
    }
    
    /// <summary>
    /// <para>
    /// H100 Fl√§chenart
    /// </para>
    /// </summary>
    public sealed class FlaechenartType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(1360)), new object[] {
                        1m,
                        2m,
                        3m}, 0, 0, null, 3m, 0, null, 1m, 0, null, 1, XmlSchemaWhiteSpace.Collapse));
        
        private FlaechenartType() {
        }
    }
    
    /// <summary>
    /// <para>
    /// H101 Fl√§cheneigenschaft
    /// </para>
    /// </summary>
    public sealed class FlaecheneigenschaftType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(1360)), new object[] {
                        1m,
                        2m,
                        3m,
                        4m,
                        5m}, 0, 0, null, 5m, 0, null, 1m, 0, null, 1, XmlSchemaWhiteSpace.Collapse));
        
        private FlaecheneigenschaftType() {
        }
    }
    
    /// <summary>
    /// <para>
    /// H102 Fl√§chenfunktion
    /// </para>
    /// </summary>
    public sealed class FlaechenfunktionType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(1360)), new object[] {
                        1m,
                        2m,
                        3m,
                        4m,
                        5m}, 0, 0, null, 5m, 0, null, 1m, 0, null, 1, XmlSchemaWhiteSpace.Collapse));
        
        private FlaechenfunktionType() {
        }
    }
    
    /// <summary>
    /// <para>
    /// H103 Fl√§chennutzung
    /// </para>
    /// </summary>
    public sealed class FlaechennutzungType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(1360)), new object[] {
                        1m,
                        2m,
                        3m,
                        4m,
                        5m,
                        6m,
                        7m,
                        8m,
                        9m,
                        10m}, 0, 0, null, 10m, 0, null, 1m, 0, null, 2, XmlSchemaWhiteSpace.Collapse));
        
        private FlaechennutzungType() {
        }
    }
    
    /// <summary>
    /// <para>
    /// H104 Materialzusatz
    /// </para>
    /// </summary>
    public sealed class MaterialzusatzType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(1360)), new object[] {
                        1m,
                        2m}, 0, 0, null, 2m, 0, null, 1m, 0, null, 1, XmlSchemaWhiteSpace.Collapse));
        
        private MaterialzusatzType() {
        }
    }
    
    /// <summary>
    /// <para>
    /// H105 Verschmutzungsklasse
    /// </para>
    /// </summary>
    public sealed class VerschmutzungsklasseType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(1360)), new object[] {
                        1m,
                        2m,
                        3m,
                        4m,
                        5m,
                        6m,
                        7m}, 0, 0, null, 7m, 0, null, 1m, 0, null, 1, XmlSchemaWhiteSpace.Collapse));
        
        private VerschmutzungsklasseType() {
        }
    }
    
    /// <summary>
    /// <para>
    /// H106 Neigungsklasse
    /// </para>
    /// </summary>
    public sealed class NeigungsklasseType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(1360)), new object[] {
                        1m,
                        2m,
                        3m,
                        4m,
                        5m}, 0, 0, null, 5m, 0, null, 1m, 0, null, 1, XmlSchemaWhiteSpace.Collapse));
        
        private NeigungsklasseType() {
        }
    }
    
    /// <summary>
    /// <para>
    /// H200 HydraulikObjektTyp 
    /// </para>
    /// </summary>
    public sealed class HydraulikObjektTypType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(1360)), new object[] {
                        1m,
                        2m,
                        3m,
                        4m,
                        5m,
                        6m,
                        7m,
                        8m,
                        9m,
                        10m,
                        11m,
                        12m}, 0, 0, null, 12m, 0, null, 1m, 0, null, 2, XmlSchemaWhiteSpace.Collapse));
        
        private HydraulikObjektTypType() {
        }
    }
    
    /// <summary>
    /// <para>
    /// H201 Rauigkeitsansatz
    /// </para>
    /// </summary>
    public sealed class RauigkeitsansatzType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(1360)), new object[] {
                        1m,
                        2m}, 0, 0, null, 2m, 0, null, 1m, 0, null, 1, XmlSchemaWhiteSpace.Collapse));
        
        private RauigkeitsansatzType() {
        }
    }
    
    /// <summary>
    /// <para>
    /// H202 Verlustmethode
    /// </para>
    /// </summary>
    public sealed class VerlustmethodeA110Type {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(1360)), new object[] {
                        1m,
                        2m}, 0, 0, null, 2m, 0, null, 1m, 0, null, 1, XmlSchemaWhiteSpace.Collapse));
        
        private VerlustmethodeA110Type() {
        }
    }
    
    /// <summary>
    /// <para>
    /// H203 Pumpentyp
    /// </para>
    /// </summary>
    public sealed class PumpentypType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(1360)), new object[] {
                        1m,
                        2m,
                        3m,
                        4m,
                        5m}, 0, 0, null, 5m, 0, null, 1m, 0, null, 1, XmlSchemaWhiteSpace.Collapse));
        
        private PumpentypType() {
        }
    }
    
    /// <summary>
    /// <para>
    /// H204 HydWehrtyp
    /// </para>
    /// </summary>
    public sealed class HydWehrtypType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(1360)), new object[] {
                        1m,
                        2m,
                        3m,
                        4m,
                        5m,
                        6m}, 0, 0, null, 6m, 0, null, 1m, 0, null, 1, XmlSchemaWhiteSpace.Collapse));
        
        private HydWehrtypType() {
        }
    }
    
    /// <summary>
    /// <para>
    /// H205 Randbedingung
    /// </para>
    /// </summary>
    public sealed class RandbedingungType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(1360)), new object[] {
                        0m,
                        1m,
                        2m}, 0, 0, null, 2m, 0, null, 0m, 0, null, 3, XmlSchemaWhiteSpace.Collapse));
        
        private RandbedingungType() {
        }
    }
    
    /// <summary>
    /// <para>
    /// H206 Schiebertyp
    /// </para>
    /// </summary>
    public sealed class SchiebertypType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(1360)), new object[] {
                        1m,
                        2m,
                        3m,
                        4m,
                        5m,
                        6m}, 0, 0, null, 6m, 0, null, 1m, 0, null, 1, XmlSchemaWhiteSpace.Collapse));
        
        private SchiebertypType() {
        }
    }
    
    /// <summary>
    /// <para>
    /// H207 GSAuslasstyp
    /// </para>
    /// </summary>
    public sealed class GSAuslasstypType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(1360)), new object[] {
                        1m,
                        2m}, 0, 0, null, 2m, 0, null, 1m, 0, null, 1, XmlSchemaWhiteSpace.Collapse));
        
        private GSAuslasstypType() {
        }
    }
    
    /// <summary>
    /// <para>
    /// H208 FreiAuslasstyp
    /// </para>
    /// </summary>
    public sealed class FreiAuslasstypType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(1360)), new object[] {
                        1m,
                        2m}, 0, 0, null, 2m, 0, null, 1m, 0, null, 1, XmlSchemaWhiteSpace.Collapse));
        
        private FreiAuslasstypType() {
        }
    }
    
    /// <summary>
    /// <para>
    /// H209 Speicherbauwerktyp
    /// </para>
    /// </summary>
    public sealed class SpeicherbauwerkTypType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(1360)), new object[] {
                        1m,
                        2m,
                        3m,
                        4m,
                        5m}, 0, 0, null, 5m, 0, null, 1m, 0, null, 1, XmlSchemaWhiteSpace.Collapse));
        
        private SpeicherbauwerkTypType() {
        }
    }
    
    /// <summary>
    /// <para>
    /// H210 Art der Modellierung
    /// </para>
    /// </summary>
    public sealed class ArtModellierungType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(1360)), new object[] {
                        1m,
                        2m}, 0, 0, null, 2m, 0, null, 1m, 0, null, 1, XmlSchemaWhiteSpace.Collapse));
        
        private ArtModellierungType() {
        }
    }
    
    /// <summary>
    /// <para>
    /// H211 Drosseltyp
    /// </para>
    /// </summary>
    public sealed class DrosseltypType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(1360)), new object[] {
                        1m,
                        2m}, 0, 0, null, 2m, 0, null, 1m, 0, null, 1, XmlSchemaWhiteSpace.Collapse));
        
        private DrosseltypType() {
        }
    }
    
    /// <summary>
    /// <para>
    /// H212 Art Einstauh√∂he
    /// </para>
    /// </summary>
    public sealed class ArtEinstauhoeheType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(1360)), new object[] {
                        1m,
                        2m}, 0, 0, null, 2m, 0, null, 1m, 0, null, 1, XmlSchemaWhiteSpace.Collapse));
        
        private ArtEinstauhoeheType() {
        }
    }
    
    /// <summary>
    /// <para>
    /// H213 Reglertyp
    /// </para>
    /// </summary>
    public sealed class ReglertypType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(1360)), new object[] {
                        1m,
                        2m}, 0, 0, null, 2m, 0, null, 1m, 0, null, 1, XmlSchemaWhiteSpace.Collapse));
        
        private ReglertypType() {
        }
    }
    
    /// <summary>
    /// <para>
    /// H400 ArtBelastung
    /// </para>
    /// </summary>
    public sealed class ArtBelastungType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(1360)), new object[] {
                        1m,
                        2m,
                        3m,
                        4m,
                        5m}, 0, 0, null, 5m, 0, null, 1m, 0, null, 1, XmlSchemaWhiteSpace.Collapse));
        
        private ArtBelastungType() {
        }
    }
    
    /// <summary>
    /// <para>
    /// H401 Modellregentyp
    /// </para>
    /// </summary>
    public sealed class ModellregentypType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(1360)), new object[] {
                        1m,
                        2m,
                        3m,
                        4m,
                        5m}, 0, 0, null, 5m, 0, null, 1m, 0, null, 1, XmlSchemaWhiteSpace.Collapse));
        
        private ModellregentypType() {
        }
    }
    
    /// <summary>
    /// <para>
    /// H402 ArtKontinuum
    /// </para>
    /// </summary>
    public sealed class ArtKontinuumType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(1360)), new object[] {
                        1m,
                        2m,
                        3m,
                        4m}, 0, 0, null, 4m, 0, null, 1m, 0, null, 1, XmlSchemaWhiteSpace.Collapse));
        
        private ArtKontinuumType() {
        }
    }
    
    /// <summary>
    /// <para>
    /// H500 Berechnungsverfahren allgemein
    /// </para>
    /// </summary>
    public sealed class BerechnungsverfahrenallgemeinType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(1360)), new object[] {
                        1m,
                        2m}, 0, 0, null, 2m, 0, null, 1m, 0, null, 1, XmlSchemaWhiteSpace.Collapse));
        
        private BerechnungsverfahrenallgemeinType() {
        }
    }
    
    /// <summary>
    /// <para>
    /// H501 Berechnungsverfahren
    /// </para>
    /// </summary>
    public sealed class BerechnungsverfahrenType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(1360)), new object[] {
                        1m,
                        2m,
                        3m,
                        4m,
                        5m,
                        6m,
                        7m}, 0, 0, null, 7m, 0, null, 1m, 0, null, 1, XmlSchemaWhiteSpace.Collapse));
        
        private BerechnungsverfahrenType() {
        }
    }
    
    /// <summary>
    /// <para>
    /// H502 Regen-/√úberstauh√§ufigkeit
    /// </para>
    /// </summary>
    public sealed class RegenUeberstauhaeufigkeitType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(1360)), new object[] {
                        1m,
                        2m}, 0, 0, null, 2m, 0, null, 1m, 0, null, 1, XmlSchemaWhiteSpace.Collapse));
        
        private RegenUeberstauhaeufigkeitType() {
        }
    }
    
    /// <summary>
    /// <para>
    /// H503 Auslastungskennziffer
    /// </para>
    /// </summary>
    public sealed class AuslastungskennzifferType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(1360)), new object[] {
                        1m,
                        2m,
                        3m,
                        4m}, 0, 0, null, 4m, 0, null, 1m, 0, null, 1, XmlSchemaWhiteSpace.Collapse));
        
        private AuslastungskennzifferType() {
        }
    }
    
    /// <summary>
    /// <para>
    /// H504 Art der Berechnungsergebnisse
    /// </para>
    /// </summary>
    public sealed class ArtErgebnisseType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(1360)), new object[] {
                        1m,
                        2m}, 0, 0, null, 2m, 0, null, 1m, 0, null, 1, XmlSchemaWhiteSpace.Collapse));
        
        private ArtErgebnisseType() {
        }
    }
    
    /// <summary>
    /// <para>
    /// H505 Bezug √úberstauniveau
    /// </para>
    /// </summary>
    public sealed class BezugUeberstauniveauType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(1360)), new object[] {
                        1m,
                        2m}, 0, 0, null, 2m, 0, null, 1m, 0, null, 1, XmlSchemaWhiteSpace.Collapse));
        
        private BezugUeberstauniveauType() {
        }
    }
    
    /// <summary>
    /// <para>
    /// H600 Verfahrensart
    /// </para>
    /// </summary>
    public sealed class VerfahrensartType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(1360)), new object[] {
                        1m,
                        2m,
                        3m,
                        4m,
                        5m,
                        6m,
                        7m}, 0, 0, null, 7m, 0, null, 1m, 0, null, 1, XmlSchemaWhiteSpace.Collapse));
        
        private VerfahrensartType() {
        }
    }
    
    /// <summary>
    /// <para>
    /// H601 ArtZielgr√∂√üe
    /// </para>
    /// </summary>
    public sealed class ArtZielgroesseType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(1360)), new object[] {
                        1m,
                        2m,
                        3m,
                        4m,
                        5m,
                        6m}, 0, 0, null, 6m, 0, null, 1m, 0, null, 1, XmlSchemaWhiteSpace.Collapse));
        
        private ArtZielgroesseType() {
        }
    }
    
    /// <summary>
    /// <para>
    /// H602 EinheitZielgr√∂√üe
    /// </para>
    /// </summary>
    public sealed class EinheitZielgroesseType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(1360)), new object[] {
                        1m,
                        2m,
                        3m,
                        4m,
                        5m}, 0, 0, null, 5m, 0, null, 1m, 0, null, 1, XmlSchemaWhiteSpace.Collapse));
        
        private EinheitZielgroesseType() {
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Kennung, Beschreibung?, Auftraege?, AbwassertechnischeAnlage+, Umfelder?)
    /// </para>
    /// </summary>
    public partial class StammdatenType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName KennungXName = System.Xml.Linq.XName.Get("Kennung", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName BeschreibungXName = System.Xml.Linq.XName.Get("Beschreibung", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName AuftraegeXName = System.Xml.Linq.XName.Get("Auftraege", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName AbwassertechnischeAnlageXName = System.Xml.Linq.XName.Get("AbwassertechnischeAnlage", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<AbwassertechnischeAnlageType> AbwassertechnischeAnlageField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName UmfelderXName = System.Xml.Linq.XName.Get("Umfelder", "http://www.bfr-abwasser.de");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("StammdatenType", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator StammdatenType(XElement xe) { return XTypedServices.ToXTypedElement<StammdatenType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static StammdatenType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(KennungXName), new NamedContentModelEntity(BeschreibungXName), new NamedContentModelEntity(AuftraegeXName), new NamedContentModelEntity(AbwassertechnischeAnlageXName), new NamedContentModelEntity(UmfelderXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Kennung, Beschreibung?, Auftraege?, AbwassertechnischeAnlage+, Umfelder?)
        /// </para>
        /// </summary>
        public StammdatenType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (Kennung, Beschreibung?, Auftraege?, AbwassertechnischeAnlage+, Umfelder?)
        /// </para>
        /// </summary>
        public virtual string Kennung {
            get {
                XElement x = this.GetElement(KennungXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(KennungXName, value, "Kennung", KennungLocalType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Kennung, Beschreibung?, Auftraege?, AbwassertechnischeAnlage+, Umfelder?)
        /// </para>
        /// </summary>
        public virtual string Beschreibung {
            get {
                XElement x = this.GetElement(BeschreibungXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(BeschreibungXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                else {
                    this.SetElementWithValidation(BeschreibungXName, value, "Beschreibung", BeschreibungLocalType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Kennung, Beschreibung?, Auftraege?, AbwassertechnischeAnlage+, Umfelder?)
        /// </para>
        /// </summary>
        public virtual AuftraegeLocalType Auftraege {
            get {
                XElement x = this.GetElement(AuftraegeXName);
                return ((AuftraegeLocalType)(x));
            }
            set {
                this.SetElement(AuftraegeXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Kennung, Beschreibung?, Auftraege?, AbwassertechnischeAnlage+, Umfelder?)
        /// </para>
        /// </summary>
        public virtual IList<AbwassertechnischeAnlageType> AbwassertechnischeAnlage {
            get {
                if ((this.AbwassertechnischeAnlageField == null)) {
                    this.AbwassertechnischeAnlageField = new XTypedList<AbwassertechnischeAnlageType>(this, LinqToXsdTypeManager.Instance, AbwassertechnischeAnlageXName);
                }
                return this.AbwassertechnischeAnlageField;
            }
            set {
                if ((value == null)) {
                    this.AbwassertechnischeAnlageField = null;
                }
                else {
                    if ((this.AbwassertechnischeAnlageField == null)) {
                        this.AbwassertechnischeAnlageField = XTypedList<AbwassertechnischeAnlageType>.Initialize(this, LinqToXsdTypeManager.Instance, value, AbwassertechnischeAnlageXName);
                    }
                    else {
                        XTypedServices.SetList<AbwassertechnischeAnlageType>(this.AbwassertechnischeAnlageField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Kennung, Beschreibung?, Auftraege?, AbwassertechnischeAnlage+, Umfelder?)
        /// </para>
        /// </summary>
        public virtual UmfelderLocalType Umfelder {
            get {
                XElement x = this.GetElement(UmfelderXName);
                return ((UmfelderLocalType)(x));
            }
            set {
                this.SetElement(UmfelderXName, value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<StammdatenType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(KennungXName, typeof(string));
            localElementDictionary.Add(BeschreibungXName, typeof(string));
            localElementDictionary.Add(AuftraegeXName, typeof(AuftraegeLocalType));
            localElementDictionary.Add(AbwassertechnischeAnlageXName, typeof(AbwassertechnischeAnlageType));
            localElementDictionary.Add(UmfelderXName, typeof(UmfelderLocalType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        private class KennungLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(6)), null, 0, 0, null, null, 5, null, null, 5, null, 0, XmlSchemaWhiteSpace.Preserve));
            
            private KennungLocalType() {
            }
        }
        
        private class BeschreibungLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(4)), null, 0, 0, null, null, 100, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
            
            private BeschreibungLocalType() {
            }
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Auftrag+)
        /// </para>
        /// </summary>
        public partial class AuftraegeLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName AuftragXName = System.Xml.Linq.XName.Get("Auftrag", "http://www.bfr-abwasser.de");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XTypedList<StammAuftragType> AuftragField;
            
            private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("Auftraege", "http://www.bfr-abwasser.de");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;
            
		public static explicit operator AuftraegeLocalType(XElement xe) { return XTypedServices.ToXTypedElement<AuftraegeLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static AuftraegeLocalType() {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(AuftragXName));
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (Auftrag+)
            /// </para>
            /// </summary>
            public AuftraegeLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required, repeating
            /// </para>
            /// <para>
            /// Regular expression: (Auftrag+)
            /// </para>
            /// </summary>
            public virtual IList<StammAuftragType> Auftrag {
                get {
                    if ((this.AuftragField == null)) {
                        this.AuftragField = new XTypedList<StammAuftragType>(this, LinqToXsdTypeManager.Instance, AuftragXName);
                    }
                    return this.AuftragField;
                }
                set {
                    if ((value == null)) {
                        this.AuftragField = null;
                    }
                    else {
                        if ((this.AuftragField == null)) {
                            this.AuftragField = XTypedList<StammAuftragType>.Initialize(this, LinqToXsdTypeManager.Instance, value, AuftragXName);
                        }
                        else {
                            XTypedServices.SetList<StammAuftragType>(this.AuftragField, value);
                        }
                    }
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            System.Xml.Linq.XName IXMetaData.SchemaName {
                get {
                    return xName;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<AuftraegeLocalType>(this);
            }
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(AuftragXName, typeof(StammAuftragType));
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return contentModel;
            }
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Umfeld+)
        /// </para>
        /// </summary>
        public partial class UmfelderLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName UmfeldXName = System.Xml.Linq.XName.Get("Umfeld", "http://www.bfr-abwasser.de");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XTypedList<UmfeldType> UmfeldField;
            
            private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("Umfelder", "http://www.bfr-abwasser.de");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;
            
		public static explicit operator UmfelderLocalType(XElement xe) { return XTypedServices.ToXTypedElement<UmfelderLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static UmfelderLocalType() {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(UmfeldXName));
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (Umfeld+)
            /// </para>
            /// </summary>
            public UmfelderLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required, repeating
            /// </para>
            /// <para>
            /// Regular expression: (Umfeld+)
            /// </para>
            /// </summary>
            public virtual IList<UmfeldType> Umfeld {
                get {
                    if ((this.UmfeldField == null)) {
                        this.UmfeldField = new XTypedList<UmfeldType>(this, LinqToXsdTypeManager.Instance, UmfeldXName);
                    }
                    return this.UmfeldField;
                }
                set {
                    if ((value == null)) {
                        this.UmfeldField = null;
                    }
                    else {
                        if ((this.UmfeldField == null)) {
                            this.UmfeldField = XTypedList<UmfeldType>.Initialize(this, LinqToXsdTypeManager.Instance, value, UmfeldXName);
                        }
                        else {
                            XTypedServices.SetList<UmfeldType>(this.UmfeldField, value);
                        }
                    }
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            System.Xml.Linq.XName IXMetaData.SchemaName {
                get {
                    return xName;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<UmfelderLocalType>(this);
            }
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(UmfeldXName, typeof(UmfeldType));
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return contentModel;
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Auftragsbezeichnung, Auftragsnummer?, Auftragskennung, Auftragsdatum?, Auftragsart, Auftragnehmer?, Bauueberwachung?, Qualitaetsueberwachung?, Objektbetreuung?)
    /// </para>
    /// </summary>
    public partial class StammAuftragType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName AuftragsbezeichnungXName = System.Xml.Linq.XName.Get("Auftragsbezeichnung", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName AuftragsnummerXName = System.Xml.Linq.XName.Get("Auftragsnummer", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName AuftragskennungXName = System.Xml.Linq.XName.Get("Auftragskennung", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName AuftragsdatumXName = System.Xml.Linq.XName.Get("Auftragsdatum", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName AuftragsartXName = System.Xml.Linq.XName.Get("Auftragsart", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName AuftragnehmerXName = System.Xml.Linq.XName.Get("Auftragnehmer", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName BauueberwachungXName = System.Xml.Linq.XName.Get("Bauueberwachung", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName QualitaetsueberwachungXName = System.Xml.Linq.XName.Get("Qualitaetsueberwachung", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ObjektbetreuungXName = System.Xml.Linq.XName.Get("Objektbetreuung", "http://www.bfr-abwasser.de");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("StammAuftragType", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator StammAuftragType(XElement xe) { return XTypedServices.ToXTypedElement<StammAuftragType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static StammAuftragType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(AuftragsbezeichnungXName), new NamedContentModelEntity(AuftragsnummerXName), new NamedContentModelEntity(AuftragskennungXName), new NamedContentModelEntity(AuftragsdatumXName), new NamedContentModelEntity(AuftragsartXName), new NamedContentModelEntity(AuftragnehmerXName), new NamedContentModelEntity(BauueberwachungXName), new NamedContentModelEntity(QualitaetsueberwachungXName), new NamedContentModelEntity(ObjektbetreuungXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Auftragsbezeichnung, Auftragsnummer?, Auftragskennung, Auftragsdatum?, Auftragsart, Auftragnehmer?, Bauueberwachung?, Qualitaetsueberwachung?, Objektbetreuung?)
        /// </para>
        /// </summary>
        public StammAuftragType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (Auftragsbezeichnung, Auftragsnummer?, Auftragskennung, Auftragsdatum?, Auftragsart, Auftragnehmer?, Bauueberwachung?, Qualitaetsueberwachung?, Objektbetreuung?)
        /// </para>
        /// </summary>
        public virtual string Auftragsbezeichnung {
            get {
                XElement x = this.GetElement(AuftragsbezeichnungXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(AuftragsbezeichnungXName, value, "Auftragsbezeichnung", AuftragsbezeichnungLocalType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Auftragsbezeichnung, Auftragsnummer?, Auftragskennung, Auftragsdatum?, Auftragsart, Auftragnehmer?, Bauueberwachung?, Qualitaetsueberwachung?, Objektbetreuung?)
        /// </para>
        /// </summary>
        public virtual string Auftragsnummer {
            get {
                XElement x = this.GetElement(AuftragsnummerXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(AuftragsnummerXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                else {
                    this.SetElementWithValidation(AuftragsnummerXName, value, "Auftragsnummer", AuftragsnummerLocalType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (Auftragsbezeichnung, Auftragsnummer?, Auftragskennung, Auftragsdatum?, Auftragsart, Auftragnehmer?, Bauueberwachung?, Qualitaetsueberwachung?, Objektbetreuung?)
        /// </para>
        /// </summary>
        public virtual decimal Auftragskennung {
            get {
                XElement x = this.GetElement(AuftragskennungXName);
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                this.SetElementWithValidation(AuftragskennungXName, value, "Auftragskennung", AuftragskennungLocalType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Auftragsbezeichnung, Auftragsnummer?, Auftragskennung, Auftragsdatum?, Auftragsart, Auftragnehmer?, Bauueberwachung?, Qualitaetsueberwachung?, Objektbetreuung?)
        /// </para>
        /// </summary>
        public virtual System.DateTime? Auftragsdatum {
            get {
                XElement x = this.GetElement(AuftragsdatumXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<System.DateTime>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date).Datatype);
            }
            set {
                this.SetElement(AuftragsdatumXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (Auftragsbezeichnung, Auftragsnummer?, Auftragskennung, Auftragsdatum?, Auftragsart, Auftragnehmer?, Bauueberwachung?, Qualitaetsueberwachung?, Objektbetreuung?)
        /// </para>
        /// </summary>
        public virtual decimal Auftragsart {
            get {
                XElement x = this.GetElement(AuftragsartXName);
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                this.SetElementWithValidation(AuftragsartXName, value, "Auftragsart", global::www.bfr.abwasser.de.AuftragsartSanierungType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Auftragsbezeichnung, Auftragsnummer?, Auftragskennung, Auftragsdatum?, Auftragsart, Auftragnehmer?, Bauueberwachung?, Qualitaetsueberwachung?, Objektbetreuung?)
        /// </para>
        /// </summary>
        public virtual string Auftragnehmer {
            get {
                XElement x = this.GetElement(AuftragnehmerXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(AuftragnehmerXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                else {
                    this.SetElementWithValidation(AuftragnehmerXName, value, "Auftragnehmer", AuftragnehmerLocalType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Auftragsbezeichnung, Auftragsnummer?, Auftragskennung, Auftragsdatum?, Auftragsart, Auftragnehmer?, Bauueberwachung?, Qualitaetsueberwachung?, Objektbetreuung?)
        /// </para>
        /// </summary>
        public virtual string Bauueberwachung {
            get {
                XElement x = this.GetElement(BauueberwachungXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(BauueberwachungXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                else {
                    this.SetElementWithValidation(BauueberwachungXName, value, "Bauueberwachung", BauueberwachungLocalType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Auftragsbezeichnung, Auftragsnummer?, Auftragskennung, Auftragsdatum?, Auftragsart, Auftragnehmer?, Bauueberwachung?, Qualitaetsueberwachung?, Objektbetreuung?)
        /// </para>
        /// </summary>
        public virtual string Qualitaetsueberwachung {
            get {
                XElement x = this.GetElement(QualitaetsueberwachungXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(QualitaetsueberwachungXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                else {
                    this.SetElementWithValidation(QualitaetsueberwachungXName, value, "Qualitaetsueberwachung", QualitaetsueberwachungLocalType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Auftragsbezeichnung, Auftragsnummer?, Auftragskennung, Auftragsdatum?, Auftragsart, Auftragnehmer?, Bauueberwachung?, Qualitaetsueberwachung?, Objektbetreuung?)
        /// </para>
        /// </summary>
        public virtual string Objektbetreuung {
            get {
                XElement x = this.GetElement(ObjektbetreuungXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(ObjektbetreuungXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                else {
                    this.SetElementWithValidation(ObjektbetreuungXName, value, "Objektbetreuung", ObjektbetreuungLocalType.TypeDefinition);
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<StammAuftragType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(AuftragsbezeichnungXName, typeof(string));
            localElementDictionary.Add(AuftragsnummerXName, typeof(string));
            localElementDictionary.Add(AuftragskennungXName, typeof(decimal));
            localElementDictionary.Add(AuftragsdatumXName, typeof(System.DateTime));
            localElementDictionary.Add(AuftragsartXName, typeof(decimal));
            localElementDictionary.Add(AuftragnehmerXName, typeof(string));
            localElementDictionary.Add(BauueberwachungXName, typeof(string));
            localElementDictionary.Add(QualitaetsueberwachungXName, typeof(string));
            localElementDictionary.Add(ObjektbetreuungXName, typeof(string));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        private class AuftragsbezeichnungLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(4)), null, 0, 0, null, null, 60, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
            
            private AuftragsbezeichnungLocalType() {
            }
        }
        
        private class AuftragsnummerLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(4)), null, 0, 0, null, null, 40, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
            
            private AuftragsnummerLocalType() {
            }
        }
        
        private class AuftragskennungLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(1024)), null, 0, 0, null, null, 0, null, null, 0, null, 6, XmlSchemaWhiteSpace.Collapse));
            
            private AuftragskennungLocalType() {
            }
        }
        
        private class AuftragnehmerLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(4)), null, 0, 0, null, null, 60, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
            
            private AuftragnehmerLocalType() {
            }
        }
        
        private class BauueberwachungLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(4)), null, 0, 0, null, null, 60, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
            
            private BauueberwachungLocalType() {
            }
        }
        
        private class QualitaetsueberwachungLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(4)), null, 0, 0, null, null, 60, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
            
            private QualitaetsueberwachungLocalType() {
            }
        }
        
        private class ObjektbetreuungLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(4)), null, 0, 0, null, null, 60, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
            
            private ObjektbetreuungLocalType() {
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Dokumentname, Dateiname, Dokumentquelle, Kommentar?)
    /// </para>
    /// </summary>
    public partial class DokumentType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName DokumentnameXName = System.Xml.Linq.XName.Get("Dokumentname", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName DateinameXName = System.Xml.Linq.XName.Get("Dateiname", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName DokumentquelleXName = System.Xml.Linq.XName.Get("Dokumentquelle", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName KommentarXName = System.Xml.Linq.XName.Get("Kommentar", "http://www.bfr-abwasser.de");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("DokumentType", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator DokumentType(XElement xe) { return XTypedServices.ToXTypedElement<DokumentType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static DokumentType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(DokumentnameXName), new NamedContentModelEntity(DateinameXName), new NamedContentModelEntity(DokumentquelleXName), new NamedContentModelEntity(KommentarXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Dokumentname, Dateiname, Dokumentquelle, Kommentar?)
        /// </para>
        /// </summary>
        public DokumentType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (Dokumentname, Dateiname, Dokumentquelle, Kommentar?)
        /// </para>
        /// </summary>
        public virtual string Dokumentname {
            get {
                XElement x = this.GetElement(DokumentnameXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(DokumentnameXName, value, "Dokumentname", DokumentnameLocalType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (Dokumentname, Dateiname, Dokumentquelle, Kommentar?)
        /// </para>
        /// </summary>
        public virtual string Dateiname {
            get {
                XElement x = this.GetElement(DateinameXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(DateinameXName, value, "Dateiname", DateinameLocalType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (Dokumentname, Dateiname, Dokumentquelle, Kommentar?)
        /// </para>
        /// </summary>
        public virtual string Dokumentquelle {
            get {
                XElement x = this.GetElement(DokumentquelleXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(DokumentquelleXName, value, "Dokumentquelle", DokumentquelleLocalType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Dokumentname, Dateiname, Dokumentquelle, Kommentar?)
        /// </para>
        /// </summary>
        public virtual string Kommentar {
            get {
                XElement x = this.GetElement(KommentarXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
            set {
                this.SetElement(KommentarXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<DokumentType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(DokumentnameXName, typeof(string));
            localElementDictionary.Add(DateinameXName, typeof(string));
            localElementDictionary.Add(DokumentquelleXName, typeof(string));
            localElementDictionary.Add(KommentarXName, typeof(string));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        private class DokumentnameLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(4)), null, 0, 0, null, null, 40, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
            
            private DokumentnameLocalType() {
            }
        }
        
        private class DateinameLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(4)), null, 0, 0, null, null, 255, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
            
            private DateinameLocalType() {
            }
        }
        
        private class DokumentquelleLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(4)), null, 0, 0, null, null, 40, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
            
            private DokumentquelleLocalType() {
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Bezeichnung, Erlaeuterung?, Koordinate?, Nutzung?, Neigungsklasse?, GWSchutzgebiet?, maxGWStand?, DatumHHGW?, massgBodenart?, massgKfWert?, Kommentar?)
    /// </para>
    /// </summary>
    public partial class UmfeldType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName BezeichnungXName = System.Xml.Linq.XName.Get("Bezeichnung", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ErlaeuterungXName = System.Xml.Linq.XName.Get("Erlaeuterung", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName KoordinateXName = System.Xml.Linq.XName.Get("Koordinate", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName NutzungXName = System.Xml.Linq.XName.Get("Nutzung", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName NeigungsklasseXName = System.Xml.Linq.XName.Get("Neigungsklasse", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName GWSchutzgebietXName = System.Xml.Linq.XName.Get("GWSchutzgebiet", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName maxGWStandXName = System.Xml.Linq.XName.Get("maxGWStand", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName DatumHHGWXName = System.Xml.Linq.XName.Get("DatumHHGW", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName massgBodenartXName = System.Xml.Linq.XName.Get("massgBodenart", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName massgKfWertXName = System.Xml.Linq.XName.Get("massgKfWert", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName KommentarXName = System.Xml.Linq.XName.Get("Kommentar", "http://www.bfr-abwasser.de");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("UmfeldType", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator UmfeldType(XElement xe) { return XTypedServices.ToXTypedElement<UmfeldType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static UmfeldType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(BezeichnungXName), new NamedContentModelEntity(ErlaeuterungXName), new NamedContentModelEntity(KoordinateXName), new NamedContentModelEntity(NutzungXName), new NamedContentModelEntity(NeigungsklasseXName), new NamedContentModelEntity(GWSchutzgebietXName), new NamedContentModelEntity(maxGWStandXName), new NamedContentModelEntity(DatumHHGWXName), new NamedContentModelEntity(massgBodenartXName), new NamedContentModelEntity(massgKfWertXName), new NamedContentModelEntity(KommentarXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Bezeichnung, Erlaeuterung?, Koordinate?, Nutzung?, Neigungsklasse?, GWSchutzgebiet?, maxGWStand?, DatumHHGW?, massgBodenart?, massgKfWert?, Kommentar?)
        /// </para>
        /// </summary>
        public UmfeldType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (Bezeichnung, Erlaeuterung?, Koordinate?, Nutzung?, Neigungsklasse?, GWSchutzgebiet?, maxGWStand?, DatumHHGW?, massgBodenart?, massgKfWert?, Kommentar?)
        /// </para>
        /// </summary>
        public virtual string Bezeichnung {
            get {
                XElement x = this.GetElement(BezeichnungXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(BezeichnungXName, value, "Bezeichnung", BezeichnungLocalType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Bezeichnung, Erlaeuterung?, Koordinate?, Nutzung?, Neigungsklasse?, GWSchutzgebiet?, maxGWStand?, DatumHHGW?, massgBodenart?, massgKfWert?, Kommentar?)
        /// </para>
        /// </summary>
        public virtual string Erlaeuterung {
            get {
                XElement x = this.GetElement(ErlaeuterungXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
            set {
                this.SetElement(ErlaeuterungXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Bezeichnung, Erlaeuterung?, Koordinate?, Nutzung?, Neigungsklasse?, GWSchutzgebiet?, maxGWStand?, DatumHHGW?, massgBodenart?, massgKfWert?, Kommentar?)
        /// </para>
        /// </summary>
        public virtual KoordinateType Koordinate {
            get {
                XElement x = this.GetElement(KoordinateXName);
                return ((KoordinateType)(x));
            }
            set {
                this.SetElement(KoordinateXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Bezeichnung, Erlaeuterung?, Koordinate?, Nutzung?, Neigungsklasse?, GWSchutzgebiet?, maxGWStand?, DatumHHGW?, massgBodenart?, massgKfWert?, Kommentar?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? Nutzung {
            get {
                XElement x = this.GetElement(NutzungXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(NutzungXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                }
                else {
                    this.SetElementWithValidation(NutzungXName, value, "Nutzung", global::www.bfr.abwasser.de.GebietsnutzungType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Bezeichnung, Erlaeuterung?, Koordinate?, Nutzung?, Neigungsklasse?, GWSchutzgebiet?, maxGWStand?, DatumHHGW?, massgBodenart?, massgKfWert?, Kommentar?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? Neigungsklasse {
            get {
                XElement x = this.GetElement(NeigungsklasseXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(NeigungsklasseXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                }
                else {
                    this.SetElementWithValidation(NeigungsklasseXName, value, "Neigungsklasse", global::www.bfr.abwasser.de.NeigungsklasseType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Bezeichnung, Erlaeuterung?, Koordinate?, Nutzung?, Neigungsklasse?, GWSchutzgebiet?, maxGWStand?, DatumHHGW?, massgBodenart?, massgKfWert?, Kommentar?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? GWSchutzgebiet {
            get {
                XElement x = this.GetElement(GWSchutzgebietXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(GWSchutzgebietXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                }
                else {
                    this.SetElementWithValidation(GWSchutzgebietXName, value, "GWSchutzgebiet", global::www.bfr.abwasser.de.WasserschutzzoneType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Bezeichnung, Erlaeuterung?, Koordinate?, Nutzung?, Neigungsklasse?, GWSchutzgebiet?, maxGWStand?, DatumHHGW?, massgBodenart?, massgKfWert?, Kommentar?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? maxGWStand {
            get {
                XElement x = this.GetElement(maxGWStandXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(maxGWStandXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                }
                else {
                    this.SetElementWithValidation(maxGWStandXName, value, "maxGWStand", maxGWStandLocalType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Bezeichnung, Erlaeuterung?, Koordinate?, Nutzung?, Neigungsklasse?, GWSchutzgebiet?, maxGWStand?, DatumHHGW?, massgBodenart?, massgKfWert?, Kommentar?)
        /// </para>
        /// </summary>
        public virtual System.DateTime? DatumHHGW {
            get {
                XElement x = this.GetElement(DatumHHGWXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<System.DateTime>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date).Datatype);
            }
            set {
                this.SetElement(DatumHHGWXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Bezeichnung, Erlaeuterung?, Koordinate?, Nutzung?, Neigungsklasse?, GWSchutzgebiet?, maxGWStand?, DatumHHGW?, massgBodenart?, massgKfWert?, Kommentar?)
        /// </para>
        /// </summary>
        public virtual string massgBodenart {
            get {
                XElement x = this.GetElement(massgBodenartXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(massgBodenartXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                else {
                    this.SetElementWithValidation(massgBodenartXName, value, "massgBodenart", massgBodenartLocalType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Bezeichnung, Erlaeuterung?, Koordinate?, Nutzung?, Neigungsklasse?, GWSchutzgebiet?, maxGWStand?, DatumHHGW?, massgBodenart?, massgKfWert?, Kommentar?)
        /// </para>
        /// </summary>
        public virtual System.Double? massgKfWert {
            get {
                XElement x = this.GetElement(massgKfWertXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetElement(massgKfWertXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Bezeichnung, Erlaeuterung?, Koordinate?, Nutzung?, Neigungsklasse?, GWSchutzgebiet?, maxGWStand?, DatumHHGW?, massgBodenart?, massgKfWert?, Kommentar?)
        /// </para>
        /// </summary>
        public virtual string Kommentar {
            get {
                XElement x = this.GetElement(KommentarXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
            set {
                this.SetElement(KommentarXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<UmfeldType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(BezeichnungXName, typeof(string));
            localElementDictionary.Add(ErlaeuterungXName, typeof(string));
            localElementDictionary.Add(KoordinateXName, typeof(KoordinateType));
            localElementDictionary.Add(NutzungXName, typeof(decimal));
            localElementDictionary.Add(NeigungsklasseXName, typeof(decimal));
            localElementDictionary.Add(GWSchutzgebietXName, typeof(decimal));
            localElementDictionary.Add(maxGWStandXName, typeof(decimal));
            localElementDictionary.Add(DatumHHGWXName, typeof(System.DateTime));
            localElementDictionary.Add(massgBodenartXName, typeof(string));
            localElementDictionary.Add(massgKfWertXName, typeof(double));
            localElementDictionary.Add(KommentarXName, typeof(string));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        private class BezeichnungLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(4)), null, 0, 0, null, null, 30, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
            
            private BezeichnungLocalType() {
            }
        }
        
        private class maxGWStandLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(3200)), null, 2, 0, 10000m, null, 0, null, null, 0, null, 6, XmlSchemaWhiteSpace.Collapse));
            
            private maxGWStandLocalType() {
            }
        }
        
        private class massgBodenartLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(4)), null, 0, 0, null, null, 4, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
            
            private massgBodenartLocalType() {
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Rechtswert, Hochwert, Punktattribut)
    /// </para>
    /// </summary>
    public partial class KoordinateType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName RechtswertXName = System.Xml.Linq.XName.Get("Rechtswert", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName HochwertXName = System.Xml.Linq.XName.Get("Hochwert", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName PunktattributXName = System.Xml.Linq.XName.Get("Punktattribut", "http://www.bfr-abwasser.de");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("KoordinateType", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator KoordinateType(XElement xe) { return XTypedServices.ToXTypedElement<KoordinateType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static KoordinateType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(RechtswertXName), new NamedContentModelEntity(HochwertXName), new NamedContentModelEntity(PunktattributXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Rechtswert, Hochwert, Punktattribut)
        /// </para>
        /// </summary>
        public KoordinateType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (Rechtswert, Hochwert, Punktattribut)
        /// </para>
        /// </summary>
        public virtual decimal Rechtswert {
            get {
                XElement x = this.GetElement(RechtswertXName);
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
            set {
                this.SetElementWithValidation(RechtswertXName, value, "Rechtswert", RechtswertLocalType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (Rechtswert, Hochwert, Punktattribut)
        /// </para>
        /// </summary>
        public virtual decimal Hochwert {
            get {
                XElement x = this.GetElement(HochwertXName);
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
            set {
                this.SetElementWithValidation(HochwertXName, value, "Hochwert", HochwertLocalType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (Rechtswert, Hochwert, Punktattribut)
        /// </para>
        /// </summary>
        public virtual string Punktattribut {
            get {
                XElement x = this.GetElement(PunktattributXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(PunktattributXName, value, "Punktattribut", global::www.bfr.abwasser.de.PunktattributAbwasserType.TypeDefinition);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<KoordinateType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(RechtswertXName, typeof(decimal));
            localElementDictionary.Add(HochwertXName, typeof(decimal));
            localElementDictionary.Add(PunktattributXName, typeof(string));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        private class RechtswertLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(3200)), null, 3, 0, 100000000m, null, 0, null, null, 0, null, 11, XmlSchemaWhiteSpace.Collapse));
            
            private RechtswertLocalType() {
            }
        }
        
        private class HochwertLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(3200)), null, 3, 0, 10000000m, null, 0, null, null, 0, null, 10, XmlSchemaWhiteSpace.Collapse));
            
            private HochwertLocalType() {
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Objektbezeichnung, Objektart, AlteObjektbezeichnung?, LISAGUID?, ReihenfolgeID?, Status?, Baujahr?, Entwaesserungsart?, Kommentar?, (Kante? | Knoten?), Lage?, Umweltparameter?, Geometrie?, Sanierung?, Dokumente?, UebergeordneteAbwassertechnischeAnlage?, Ordnungseinheiten?, Eigentum?)
    /// </para>
    /// </summary>
    public partial class AbwassertechnischeAnlageType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ObjektbezeichnungXName = System.Xml.Linq.XName.Get("Objektbezeichnung", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ObjektartXName = System.Xml.Linq.XName.Get("Objektart", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName AlteObjektbezeichnungXName = System.Xml.Linq.XName.Get("AlteObjektbezeichnung", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName LISAGUIDXName = System.Xml.Linq.XName.Get("LISA-GUID", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ReihenfolgeIDXName = System.Xml.Linq.XName.Get("ReihenfolgeID", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName StatusXName = System.Xml.Linq.XName.Get("Status", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName BaujahrXName = System.Xml.Linq.XName.Get("Baujahr", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName EntwaesserungsartXName = System.Xml.Linq.XName.Get("Entwaesserungsart", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName KommentarXName = System.Xml.Linq.XName.Get("Kommentar", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName KanteXName = System.Xml.Linq.XName.Get("Kante", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName KnotenXName = System.Xml.Linq.XName.Get("Knoten", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName LageXName = System.Xml.Linq.XName.Get("Lage", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName UmweltparameterXName = System.Xml.Linq.XName.Get("Umweltparameter", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName GeometrieXName = System.Xml.Linq.XName.Get("Geometrie", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName SanierungXName = System.Xml.Linq.XName.Get("Sanierung", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName DokumenteXName = System.Xml.Linq.XName.Get("Dokumente", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName UebergeordneteAbwassertechnischeAnlageXName = System.Xml.Linq.XName.Get("UebergeordneteAbwassertechnischeAnlage", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName OrdnungseinheitenXName = System.Xml.Linq.XName.Get("Ordnungseinheiten", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName EigentumXName = System.Xml.Linq.XName.Get("Eigentum", "http://www.bfr-abwasser.de");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("AbwassertechnischeAnlageType", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator AbwassertechnischeAnlageType(XElement xe) { return XTypedServices.ToXTypedElement<AbwassertechnischeAnlageType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static AbwassertechnischeAnlageType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(ObjektbezeichnungXName), new NamedContentModelEntity(ObjektartXName), new NamedContentModelEntity(AlteObjektbezeichnungXName), new NamedContentModelEntity(LISAGUIDXName), new NamedContentModelEntity(ReihenfolgeIDXName), new NamedContentModelEntity(StatusXName), new NamedContentModelEntity(BaujahrXName), new NamedContentModelEntity(EntwaesserungsartXName), new NamedContentModelEntity(KommentarXName), new ChoiceContentModelEntity(new NamedContentModelEntity(KanteXName), new NamedContentModelEntity(KnotenXName)), new NamedContentModelEntity(LageXName), new NamedContentModelEntity(UmweltparameterXName), new NamedContentModelEntity(GeometrieXName), new NamedContentModelEntity(SanierungXName), new NamedContentModelEntity(DokumenteXName), new NamedContentModelEntity(UebergeordneteAbwassertechnischeAnlageXName), new NamedContentModelEntity(OrdnungseinheitenXName), new NamedContentModelEntity(EigentumXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Objektbezeichnung, Objektart, AlteObjektbezeichnung?, LISAGUID?, ReihenfolgeID?, Status?, Baujahr?, Entwaesserungsart?, Kommentar?, (Kante? | Knoten?), Lage?, Umweltparameter?, Geometrie?, Sanierung?, Dokumente?, UebergeordneteAbwassertechnischeAnlage?, Ordnungseinheiten?, Eigentum?)
        /// </para>
        /// </summary>
        public AbwassertechnischeAnlageType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (Objektbezeichnung, Objektart, AlteObjektbezeichnung?, LISAGUID?, ReihenfolgeID?, Status?, Baujahr?, Entwaesserungsart?, Kommentar?, (Kante? | Knoten?), Lage?, Umweltparameter?, Geometrie?, Sanierung?, Dokumente?, UebergeordneteAbwassertechnischeAnlage?, Ordnungseinheiten?, Eigentum?)
        /// </para>
        /// </summary>
        public virtual string Objektbezeichnung {
            get {
                XElement x = this.GetElement(ObjektbezeichnungXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(ObjektbezeichnungXName, value, "Objektbezeichnung", ObjektbezeichnungLocalType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (Objektbezeichnung, Objektart, AlteObjektbezeichnung?, LISAGUID?, ReihenfolgeID?, Status?, Baujahr?, Entwaesserungsart?, Kommentar?, (Kante? | Knoten?), Lage?, Umweltparameter?, Geometrie?, Sanierung?, Dokumente?, UebergeordneteAbwassertechnischeAnlage?, Ordnungseinheiten?, Eigentum?)
        /// </para>
        /// </summary>
        public virtual decimal Objektart {
            get {
                XElement x = this.GetElement(ObjektartXName);
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                this.SetElementWithValidation(ObjektartXName, value, "Objektart", global::www.bfr.abwasser.de.ObjektartType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Objektbezeichnung, Objektart, AlteObjektbezeichnung?, LISAGUID?, ReihenfolgeID?, Status?, Baujahr?, Entwaesserungsart?, Kommentar?, (Kante? | Knoten?), Lage?, Umweltparameter?, Geometrie?, Sanierung?, Dokumente?, UebergeordneteAbwassertechnischeAnlage?, Ordnungseinheiten?, Eigentum?)
        /// </para>
        /// </summary>
        public virtual string AlteObjektbezeichnung {
            get {
                XElement x = this.GetElement(AlteObjektbezeichnungXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(AlteObjektbezeichnungXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                else {
                    this.SetElementWithValidation(AlteObjektbezeichnungXName, value, "AlteObjektbezeichnung", AlteObjektbezeichnungLocalType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Objektbezeichnung, Objektart, AlteObjektbezeichnung?, LISAGUID?, ReihenfolgeID?, Status?, Baujahr?, Entwaesserungsart?, Kommentar?, (Kante? | Knoten?), Lage?, Umweltparameter?, Geometrie?, Sanierung?, Dokumente?, UebergeordneteAbwassertechnischeAnlage?, Ordnungseinheiten?, Eigentum?)
        /// </para>
        /// </summary>
        public virtual string LISAGUID {
            get {
                XElement x = this.GetElement(LISAGUIDXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(LISAGUIDXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                else {
                    this.SetElementWithValidation(LISAGUIDXName, value, "LISAGUID", LISAGUIDLocalType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Objektbezeichnung, Objektart, AlteObjektbezeichnung?, LISAGUID?, ReihenfolgeID?, Status?, Baujahr?, Entwaesserungsart?, Kommentar?, (Kante? | Knoten?), Lage?, Umweltparameter?, Geometrie?, Sanierung?, Dokumente?, UebergeordneteAbwassertechnischeAnlage?, Ordnungseinheiten?, Eigentum?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? ReihenfolgeID {
            get {
                XElement x = this.GetElement(ReihenfolgeIDXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(ReihenfolgeIDXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                }
                else {
                    this.SetElementWithValidation(ReihenfolgeIDXName, value, "ReihenfolgeID", ReihenfolgeIDLocalType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Objektbezeichnung, Objektart, AlteObjektbezeichnung?, LISAGUID?, ReihenfolgeID?, Status?, Baujahr?, Entwaesserungsart?, Kommentar?, (Kante? | Knoten?), Lage?, Umweltparameter?, Geometrie?, Sanierung?, Dokumente?, UebergeordneteAbwassertechnischeAnlage?, Ordnungseinheiten?, Eigentum?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? Status {
            get {
                XElement x = this.GetElement(StatusXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(StatusXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                }
                else {
                    this.SetElementWithValidation(StatusXName, value, "Status", global::www.bfr.abwasser.de.StatusType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Objektbezeichnung, Objektart, AlteObjektbezeichnung?, LISAGUID?, ReihenfolgeID?, Status?, Baujahr?, Entwaesserungsart?, Kommentar?, (Kante? | Knoten?), Lage?, Umweltparameter?, Geometrie?, Sanierung?, Dokumente?, UebergeordneteAbwassertechnischeAnlage?, Ordnungseinheiten?, Eigentum?)
        /// </para>
        /// </summary>
        public virtual System.DateTime? Baujahr {
            get {
                XElement x = this.GetElement(BaujahrXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<System.DateTime>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.GYear).Datatype);
            }
            set {
                this.SetElement(BaujahrXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.GYear).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Objektbezeichnung, Objektart, AlteObjektbezeichnung?, LISAGUID?, ReihenfolgeID?, Status?, Baujahr?, Entwaesserungsart?, Kommentar?, (Kante? | Knoten?), Lage?, Umweltparameter?, Geometrie?, Sanierung?, Dokumente?, UebergeordneteAbwassertechnischeAnlage?, Ordnungseinheiten?, Eigentum?)
        /// </para>
        /// </summary>
        public virtual string Entwaesserungsart {
            get {
                XElement x = this.GetElement(EntwaesserungsartXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(EntwaesserungsartXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                else {
                    this.SetElementWithValidation(EntwaesserungsartXName, value, "Entwaesserungsart", global::www.bfr.abwasser.de.EntwaesserungsartType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Objektbezeichnung, Objektart, AlteObjektbezeichnung?, LISAGUID?, ReihenfolgeID?, Status?, Baujahr?, Entwaesserungsart?, Kommentar?, (Kante? | Knoten?), Lage?, Umweltparameter?, Geometrie?, Sanierung?, Dokumente?, UebergeordneteAbwassertechnischeAnlage?, Ordnungseinheiten?, Eigentum?)
        /// </para>
        /// </summary>
        public virtual string Kommentar {
            get {
                XElement x = this.GetElement(KommentarXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
            set {
                this.SetElement(KommentarXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (Objektbezeichnung, Objektart, AlteObjektbezeichnung?, LISAGUID?, ReihenfolgeID?, Status?, Baujahr?, Entwaesserungsart?, Kommentar?, (Kante? | Knoten?), Lage?, Umweltparameter?, Geometrie?, Sanierung?, Dokumente?, UebergeordneteAbwassertechnischeAnlage?, Ordnungseinheiten?, Eigentum?)
        /// </para>
        /// </summary>
        public virtual StammKanteType Kante {
            get {
                XElement x = this.GetElement(KanteXName);
                return ((StammKanteType)(x));
            }
            set {
                this.SetElement(KanteXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (Objektbezeichnung, Objektart, AlteObjektbezeichnung?, LISAGUID?, ReihenfolgeID?, Status?, Baujahr?, Entwaesserungsart?, Kommentar?, (Kante? | Knoten?), Lage?, Umweltparameter?, Geometrie?, Sanierung?, Dokumente?, UebergeordneteAbwassertechnischeAnlage?, Ordnungseinheiten?, Eigentum?)
        /// </para>
        /// </summary>
        public virtual StammKnotenType Knoten {
            get {
                XElement x = this.GetElement(KnotenXName);
                return ((StammKnotenType)(x));
            }
            set {
                this.SetElement(KnotenXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Objektbezeichnung, Objektart, AlteObjektbezeichnung?, LISAGUID?, ReihenfolgeID?, Status?, Baujahr?, Entwaesserungsart?, Kommentar?, (Kante? | Knoten?), Lage?, Umweltparameter?, Geometrie?, Sanierung?, Dokumente?, UebergeordneteAbwassertechnischeAnlage?, Ordnungseinheiten?, Eigentum?)
        /// </para>
        /// </summary>
        public virtual StammLageType Lage {
            get {
                XElement x = this.GetElement(LageXName);
                return ((StammLageType)(x));
            }
            set {
                this.SetElement(LageXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Objektbezeichnung, Objektart, AlteObjektbezeichnung?, LISAGUID?, ReihenfolgeID?, Status?, Baujahr?, Entwaesserungsart?, Kommentar?, (Kante? | Knoten?), Lage?, Umweltparameter?, Geometrie?, Sanierung?, Dokumente?, UebergeordneteAbwassertechnischeAnlage?, Ordnungseinheiten?, Eigentum?)
        /// </para>
        /// </summary>
        public virtual UmweltparameterType Umweltparameter {
            get {
                XElement x = this.GetElement(UmweltparameterXName);
                return ((UmweltparameterType)(x));
            }
            set {
                this.SetElement(UmweltparameterXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Objektbezeichnung, Objektart, AlteObjektbezeichnung?, LISAGUID?, ReihenfolgeID?, Status?, Baujahr?, Entwaesserungsart?, Kommentar?, (Kante? | Knoten?), Lage?, Umweltparameter?, Geometrie?, Sanierung?, Dokumente?, UebergeordneteAbwassertechnischeAnlage?, Ordnungseinheiten?, Eigentum?)
        /// </para>
        /// </summary>
        public virtual GeometrieType Geometrie {
            get {
                XElement x = this.GetElement(GeometrieXName);
                return ((GeometrieType)(x));
            }
            set {
                this.SetElement(GeometrieXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Objektbezeichnung, Objektart, AlteObjektbezeichnung?, LISAGUID?, ReihenfolgeID?, Status?, Baujahr?, Entwaesserungsart?, Kommentar?, (Kante? | Knoten?), Lage?, Umweltparameter?, Geometrie?, Sanierung?, Dokumente?, UebergeordneteAbwassertechnischeAnlage?, Ordnungseinheiten?, Eigentum?)
        /// </para>
        /// </summary>
        public virtual SanierungLocalType Sanierung {
            get {
                XElement x = this.GetElement(SanierungXName);
                return ((SanierungLocalType)(x));
            }
            set {
                this.SetElement(SanierungXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Objektbezeichnung, Objektart, AlteObjektbezeichnung?, LISAGUID?, ReihenfolgeID?, Status?, Baujahr?, Entwaesserungsart?, Kommentar?, (Kante? | Knoten?), Lage?, Umweltparameter?, Geometrie?, Sanierung?, Dokumente?, UebergeordneteAbwassertechnischeAnlage?, Ordnungseinheiten?, Eigentum?)
        /// </para>
        /// </summary>
        public virtual DokumenteLocalType Dokumente {
            get {
                XElement x = this.GetElement(DokumenteXName);
                return ((DokumenteLocalType)(x));
            }
            set {
                this.SetElement(DokumenteXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Objektbezeichnung, Objektart, AlteObjektbezeichnung?, LISAGUID?, ReihenfolgeID?, Status?, Baujahr?, Entwaesserungsart?, Kommentar?, (Kante? | Knoten?), Lage?, Umweltparameter?, Geometrie?, Sanierung?, Dokumente?, UebergeordneteAbwassertechnischeAnlage?, Ordnungseinheiten?, Eigentum?)
        /// </para>
        /// </summary>
        public virtual UebergeordneteAbwassertechnischeAnlageType UebergeordneteAbwassertechnischeAnlage {
            get {
                XElement x = this.GetElement(UebergeordneteAbwassertechnischeAnlageXName);
                return ((UebergeordneteAbwassertechnischeAnlageType)(x));
            }
            set {
                this.SetElement(UebergeordneteAbwassertechnischeAnlageXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Objektbezeichnung, Objektart, AlteObjektbezeichnung?, LISAGUID?, ReihenfolgeID?, Status?, Baujahr?, Entwaesserungsart?, Kommentar?, (Kante? | Knoten?), Lage?, Umweltparameter?, Geometrie?, Sanierung?, Dokumente?, UebergeordneteAbwassertechnischeAnlage?, Ordnungseinheiten?, Eigentum?)
        /// </para>
        /// </summary>
        public virtual OrdnungseinheitenLocalType Ordnungseinheiten {
            get {
                XElement x = this.GetElement(OrdnungseinheitenXName);
                return ((OrdnungseinheitenLocalType)(x));
            }
            set {
                this.SetElement(OrdnungseinheitenXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Objektbezeichnung, Objektart, AlteObjektbezeichnung?, LISAGUID?, ReihenfolgeID?, Status?, Baujahr?, Entwaesserungsart?, Kommentar?, (Kante? | Knoten?), Lage?, Umweltparameter?, Geometrie?, Sanierung?, Dokumente?, UebergeordneteAbwassertechnischeAnlage?, Ordnungseinheiten?, Eigentum?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? Eigentum {
            get {
                XElement x = this.GetElement(EigentumXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(EigentumXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                }
                else {
                    this.SetElementWithValidation(EigentumXName, value, "Eigentum", global::www.bfr.abwasser.de.EigentumType.TypeDefinition);
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<AbwassertechnischeAnlageType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(ObjektbezeichnungXName, typeof(string));
            localElementDictionary.Add(ObjektartXName, typeof(decimal));
            localElementDictionary.Add(AlteObjektbezeichnungXName, typeof(string));
            localElementDictionary.Add(LISAGUIDXName, typeof(string));
            localElementDictionary.Add(ReihenfolgeIDXName, typeof(decimal));
            localElementDictionary.Add(StatusXName, typeof(decimal));
            localElementDictionary.Add(BaujahrXName, typeof(System.DateTime));
            localElementDictionary.Add(EntwaesserungsartXName, typeof(string));
            localElementDictionary.Add(KommentarXName, typeof(string));
            localElementDictionary.Add(KanteXName, typeof(StammKanteType));
            localElementDictionary.Add(KnotenXName, typeof(StammKnotenType));
            localElementDictionary.Add(LageXName, typeof(StammLageType));
            localElementDictionary.Add(UmweltparameterXName, typeof(UmweltparameterType));
            localElementDictionary.Add(GeometrieXName, typeof(GeometrieType));
            localElementDictionary.Add(SanierungXName, typeof(SanierungLocalType));
            localElementDictionary.Add(DokumenteXName, typeof(DokumenteLocalType));
            localElementDictionary.Add(UebergeordneteAbwassertechnischeAnlageXName, typeof(UebergeordneteAbwassertechnischeAnlageType));
            localElementDictionary.Add(OrdnungseinheitenXName, typeof(OrdnungseinheitenLocalType));
            localElementDictionary.Add(EigentumXName, typeof(decimal));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        private class ObjektbezeichnungLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(4)), null, 0, 0, null, null, 30, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
            
            private ObjektbezeichnungLocalType() {
            }
        }
        
        private class AlteObjektbezeichnungLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(4)), null, 0, 0, null, null, 30, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
            
            private AlteObjektbezeichnungLocalType() {
            }
        }
        
        private class LISAGUIDLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(4)), null, 0, 0, null, null, 32, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
            
            private LISAGUIDLocalType() {
            }
        }
        
        private class ReihenfolgeIDLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(1024)), null, 0, 0, null, null, 0, null, null, 0, null, 6, XmlSchemaWhiteSpace.Collapse));
            
            private ReihenfolgeIDLocalType() {
            }
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (ArtMassnahme?, Massnahme*)
        /// </para>
        /// </summary>
        public partial class SanierungLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName ArtMassnahmeXName = System.Xml.Linq.XName.Get("ArtMassnahme", "http://www.bfr-abwasser.de");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName MassnahmeXName = System.Xml.Linq.XName.Get("Massnahme", "http://www.bfr-abwasser.de");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XTypedList<SanierungType> MassnahmeField;
            
            private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("Sanierung", "http://www.bfr-abwasser.de");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;
            
		public static explicit operator SanierungLocalType(XElement xe) { return XTypedServices.ToXTypedElement<SanierungLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static SanierungLocalType() {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(ArtMassnahmeXName), new NamedContentModelEntity(MassnahmeXName));
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (ArtMassnahme?, Massnahme*)
            /// </para>
            /// </summary>
            public SanierungLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (ArtMassnahme?, Massnahme*)
            /// </para>
            /// </summary>
            public virtual System.Decimal? ArtMassnahme {
                get {
                    XElement x = this.GetElement(ArtMassnahmeXName);
                    if ((x == null)) {
                        return null;
                    }
                    return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                }
                set {
                    if (value == null) {
                        this.SetElement(ArtMassnahmeXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                    }
                    else {
                        this.SetElementWithValidation(ArtMassnahmeXName, value, "ArtMassnahme", global::www.bfr.abwasser.de.ArtMassnahmeType.TypeDefinition);
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional, repeating
            /// </para>
            /// <para>
            /// Regular expression: (ArtMassnahme?, Massnahme*)
            /// </para>
            /// </summary>
            public virtual IList<SanierungType> Massnahme {
                get {
                    if ((this.MassnahmeField == null)) {
                        this.MassnahmeField = new XTypedList<SanierungType>(this, LinqToXsdTypeManager.Instance, MassnahmeXName);
                    }
                    return this.MassnahmeField;
                }
                set {
                    if ((value == null)) {
                        this.MassnahmeField = null;
                    }
                    else {
                        if ((this.MassnahmeField == null)) {
                            this.MassnahmeField = XTypedList<SanierungType>.Initialize(this, LinqToXsdTypeManager.Instance, value, MassnahmeXName);
                        }
                        else {
                            XTypedServices.SetList<SanierungType>(this.MassnahmeField, value);
                        }
                    }
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            System.Xml.Linq.XName IXMetaData.SchemaName {
                get {
                    return xName;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<SanierungLocalType>(this);
            }
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(ArtMassnahmeXName, typeof(decimal));
                localElementDictionary.Add(MassnahmeXName, typeof(SanierungType));
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return contentModel;
            }
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Dokument+)
        /// </para>
        /// </summary>
        public partial class DokumenteLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName DokumentXName = System.Xml.Linq.XName.Get("Dokument", "http://www.bfr-abwasser.de");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XTypedList<DokumentType> DokumentField;
            
            private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("Dokumente", "http://www.bfr-abwasser.de");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;
            
		public static explicit operator DokumenteLocalType(XElement xe) { return XTypedServices.ToXTypedElement<DokumenteLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static DokumenteLocalType() {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(DokumentXName));
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (Dokument+)
            /// </para>
            /// </summary>
            public DokumenteLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required, repeating
            /// </para>
            /// <para>
            /// Regular expression: (Dokument+)
            /// </para>
            /// </summary>
            public virtual IList<DokumentType> Dokument {
                get {
                    if ((this.DokumentField == null)) {
                        this.DokumentField = new XTypedList<DokumentType>(this, LinqToXsdTypeManager.Instance, DokumentXName);
                    }
                    return this.DokumentField;
                }
                set {
                    if ((value == null)) {
                        this.DokumentField = null;
                    }
                    else {
                        if ((this.DokumentField == null)) {
                            this.DokumentField = XTypedList<DokumentType>.Initialize(this, LinqToXsdTypeManager.Instance, value, DokumentXName);
                        }
                        else {
                            XTypedServices.SetList<DokumentType>(this.DokumentField, value);
                        }
                    }
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            System.Xml.Linq.XName IXMetaData.SchemaName {
                get {
                    return xName;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<DokumenteLocalType>(this);
            }
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(DokumentXName, typeof(DokumentType));
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return contentModel;
            }
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (KennungOrdnungseinheit+)
        /// </para>
        /// </summary>
        public partial class OrdnungseinheitenLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName KennungOrdnungseinheitXName = System.Xml.Linq.XName.Get("KennungOrdnungseinheit", "http://www.bfr-abwasser.de");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XSimpleList<string> KennungOrdnungseinheitField;
            
            private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("Ordnungseinheiten", "http://www.bfr-abwasser.de");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;
            
		public static explicit operator OrdnungseinheitenLocalType(XElement xe) { return XTypedServices.ToXTypedElement<OrdnungseinheitenLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static OrdnungseinheitenLocalType() {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(KennungOrdnungseinheitXName));
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (KennungOrdnungseinheit+)
            /// </para>
            /// </summary>
            public OrdnungseinheitenLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required, repeating
            /// </para>
            /// <para>
            /// Regular expression: (KennungOrdnungseinheit+)
            /// </para>
            /// </summary>
            public virtual IList<string> KennungOrdnungseinheit {
                get {
                    if ((this.KennungOrdnungseinheitField == null)) {
                        this.KennungOrdnungseinheitField = new XSimpleList<string>(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, KennungOrdnungseinheitXName);
                    }
                    return this.KennungOrdnungseinheitField;
                }
                set {
                    if ((value == null)) {
                        this.KennungOrdnungseinheitField = null;
                    }
                    else {
                        if ((this.KennungOrdnungseinheitField == null)) {
                            this.KennungOrdnungseinheitField = XSimpleList<string>.Initialize(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, value, KennungOrdnungseinheitXName);
                        }
                        else {
                            XTypedServices.SetList<System.String>(this.KennungOrdnungseinheitField, value);
                        }
                    }
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            System.Xml.Linq.XName IXMetaData.SchemaName {
                get {
                    return xName;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<OrdnungseinheitenLocalType>(this);
            }
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(KennungOrdnungseinheitXName, typeof(string));
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return contentModel;
            }
            
            private class KennungOrdnungseinheitLocalType {
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(1)), null, 0, 4, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
                
                private KennungOrdnungseinheitLocalType() {
                }
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (KantenTyp, KnotenZulauf, KnotenZulaufTyp, KnotenAblauf, KnotenAblaufTyp, SohlhoeheZulauf?, SohlhoeheAblauf?, Strang?, Laenge?, Material?, Profil?, (Haltung | Leitung | Rinne | Gerinne), Segmente?)
    /// </para>
    /// </summary>
    public partial class StammKanteType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName KantenTypXName = System.Xml.Linq.XName.Get("KantenTyp", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName KnotenZulaufXName = System.Xml.Linq.XName.Get("KnotenZulauf", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName KnotenZulaufTypXName = System.Xml.Linq.XName.Get("KnotenZulaufTyp", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName KnotenAblaufXName = System.Xml.Linq.XName.Get("KnotenAblauf", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName KnotenAblaufTypXName = System.Xml.Linq.XName.Get("KnotenAblaufTyp", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName SohlhoeheZulaufXName = System.Xml.Linq.XName.Get("SohlhoeheZulauf", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName SohlhoeheAblaufXName = System.Xml.Linq.XName.Get("SohlhoeheAblauf", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName StrangXName = System.Xml.Linq.XName.Get("Strang", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName LaengeXName = System.Xml.Linq.XName.Get("Laenge", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName MaterialXName = System.Xml.Linq.XName.Get("Material", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ProfilXName = System.Xml.Linq.XName.Get("Profil", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName HaltungXName = System.Xml.Linq.XName.Get("Haltung", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName LeitungXName = System.Xml.Linq.XName.Get("Leitung", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName RinneXName = System.Xml.Linq.XName.Get("Rinne", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName GerinneXName = System.Xml.Linq.XName.Get("Gerinne", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName SegmenteXName = System.Xml.Linq.XName.Get("Segmente", "http://www.bfr-abwasser.de");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("StammKanteType", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator StammKanteType(XElement xe) { return XTypedServices.ToXTypedElement<StammKanteType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static StammKanteType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(KantenTypXName), new NamedContentModelEntity(KnotenZulaufXName), new NamedContentModelEntity(KnotenZulaufTypXName), new NamedContentModelEntity(KnotenAblaufXName), new NamedContentModelEntity(KnotenAblaufTypXName), new NamedContentModelEntity(SohlhoeheZulaufXName), new NamedContentModelEntity(SohlhoeheAblaufXName), new NamedContentModelEntity(StrangXName), new NamedContentModelEntity(LaengeXName), new NamedContentModelEntity(MaterialXName), new NamedContentModelEntity(ProfilXName), new ChoiceContentModelEntity(new NamedContentModelEntity(HaltungXName), new NamedContentModelEntity(LeitungXName), new NamedContentModelEntity(RinneXName), new NamedContentModelEntity(GerinneXName)), new NamedContentModelEntity(SegmenteXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (KantenTyp, KnotenZulauf, KnotenZulaufTyp, KnotenAblauf, KnotenAblaufTyp, SohlhoeheZulauf?, SohlhoeheAblauf?, Strang?, Laenge?, Material?, Profil?, (Haltung | Leitung | Rinne | Gerinne), Segmente?)
        /// </para>
        /// </summary>
        public StammKanteType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (KantenTyp, KnotenZulauf, KnotenZulaufTyp, KnotenAblauf, KnotenAblaufTyp, SohlhoeheZulauf?, SohlhoeheAblauf?, Strang?, Laenge?, Material?, Profil?, (Haltung | Leitung | Rinne | Gerinne), Segmente?)
        /// </para>
        /// </summary>
        public virtual decimal KantenTyp {
            get {
                XElement x = this.GetElement(KantenTypXName);
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                this.SetElementWithValidation(KantenTypXName, value, "KantenTyp", global::www.bfr.abwasser.de.KantentypType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (KantenTyp, KnotenZulauf, KnotenZulaufTyp, KnotenAblauf, KnotenAblaufTyp, SohlhoeheZulauf?, SohlhoeheAblauf?, Strang?, Laenge?, Material?, Profil?, (Haltung | Leitung | Rinne | Gerinne), Segmente?)
        /// </para>
        /// </summary>
        public virtual string KnotenZulauf {
            get {
                XElement x = this.GetElement(KnotenZulaufXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(KnotenZulaufXName, value, "KnotenZulauf", KnotenZulaufLocalType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (KantenTyp, KnotenZulauf, KnotenZulaufTyp, KnotenAblauf, KnotenAblaufTyp, SohlhoeheZulauf?, SohlhoeheAblauf?, Strang?, Laenge?, Material?, Profil?, (Haltung | Leitung | Rinne | Gerinne), Segmente?)
        /// </para>
        /// </summary>
        public virtual decimal KnotenZulaufTyp {
            get {
                XElement x = this.GetElement(KnotenZulaufTypXName);
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                this.SetElementWithValidation(KnotenZulaufTypXName, value, "KnotenZulaufTyp", global::www.bfr.abwasser.de.KnotentypType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (KantenTyp, KnotenZulauf, KnotenZulaufTyp, KnotenAblauf, KnotenAblaufTyp, SohlhoeheZulauf?, SohlhoeheAblauf?, Strang?, Laenge?, Material?, Profil?, (Haltung | Leitung | Rinne | Gerinne), Segmente?)
        /// </para>
        /// </summary>
        public virtual string KnotenAblauf {
            get {
                XElement x = this.GetElement(KnotenAblaufXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(KnotenAblaufXName, value, "KnotenAblauf", KnotenAblaufLocalType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (KantenTyp, KnotenZulauf, KnotenZulaufTyp, KnotenAblauf, KnotenAblaufTyp, SohlhoeheZulauf?, SohlhoeheAblauf?, Strang?, Laenge?, Material?, Profil?, (Haltung | Leitung | Rinne | Gerinne), Segmente?)
        /// </para>
        /// </summary>
        public virtual decimal KnotenAblaufTyp {
            get {
                XElement x = this.GetElement(KnotenAblaufTypXName);
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                this.SetElementWithValidation(KnotenAblaufTypXName, value, "KnotenAblaufTyp", global::www.bfr.abwasser.de.KnotentypType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (KantenTyp, KnotenZulauf, KnotenZulaufTyp, KnotenAblauf, KnotenAblaufTyp, SohlhoeheZulauf?, SohlhoeheAblauf?, Strang?, Laenge?, Material?, Profil?, (Haltung | Leitung | Rinne | Gerinne), Segmente?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? SohlhoeheZulauf {
            get {
                XElement x = this.GetElement(SohlhoeheZulaufXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(SohlhoeheZulaufXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                }
                else {
                    this.SetElementWithValidation(SohlhoeheZulaufXName, value, "SohlhoeheZulauf", SohlhoeheZulaufLocalType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (KantenTyp, KnotenZulauf, KnotenZulaufTyp, KnotenAblauf, KnotenAblaufTyp, SohlhoeheZulauf?, SohlhoeheAblauf?, Strang?, Laenge?, Material?, Profil?, (Haltung | Leitung | Rinne | Gerinne), Segmente?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? SohlhoeheAblauf {
            get {
                XElement x = this.GetElement(SohlhoeheAblaufXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(SohlhoeheAblaufXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                }
                else {
                    this.SetElementWithValidation(SohlhoeheAblaufXName, value, "SohlhoeheAblauf", SohlhoeheAblaufLocalType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (KantenTyp, KnotenZulauf, KnotenZulaufTyp, KnotenAblauf, KnotenAblaufTyp, SohlhoeheZulauf?, SohlhoeheAblauf?, Strang?, Laenge?, Material?, Profil?, (Haltung | Leitung | Rinne | Gerinne), Segmente?)
        /// </para>
        /// </summary>
        public virtual string Strang {
            get {
                XElement x = this.GetElement(StrangXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(StrangXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                else {
                    this.SetElementWithValidation(StrangXName, value, "Strang", StrangLocalType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (KantenTyp, KnotenZulauf, KnotenZulaufTyp, KnotenAblauf, KnotenAblaufTyp, SohlhoeheZulauf?, SohlhoeheAblauf?, Strang?, Laenge?, Material?, Profil?, (Haltung | Leitung | Rinne | Gerinne), Segmente?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? Laenge {
            get {
                XElement x = this.GetElement(LaengeXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(LaengeXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                }
                else {
                    this.SetElementWithValidation(LaengeXName, value, "Laenge", LaengeLocalType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (KantenTyp, KnotenZulauf, KnotenZulaufTyp, KnotenAblauf, KnotenAblaufTyp, SohlhoeheZulauf?, SohlhoeheAblauf?, Strang?, Laenge?, Material?, Profil?, (Haltung | Leitung | Rinne | Gerinne), Segmente?)
        /// </para>
        /// </summary>
        public virtual string Material {
            get {
                XElement x = this.GetElement(MaterialXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(MaterialXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                else {
                    this.SetElementWithValidation(MaterialXName, value, "Material", global::www.bfr.abwasser.de.MaterialType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (KantenTyp, KnotenZulauf, KnotenZulaufTyp, KnotenAblauf, KnotenAblaufTyp, SohlhoeheZulauf?, SohlhoeheAblauf?, Strang?, Laenge?, Material?, Profil?, (Haltung | Leitung | Rinne | Gerinne), Segmente?)
        /// </para>
        /// </summary>
        public virtual ProfilType Profil {
            get {
                XElement x = this.GetElement(ProfilXName);
                return ((ProfilType)(x));
            }
            set {
                this.SetElement(ProfilXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (KantenTyp, KnotenZulauf, KnotenZulaufTyp, KnotenAblauf, KnotenAblaufTyp, SohlhoeheZulauf?, SohlhoeheAblauf?, Strang?, Laenge?, Material?, Profil?, (Haltung | Leitung | Rinne | Gerinne), Segmente?)
        /// </para>
        /// </summary>
        public virtual HaltungType Haltung {
            get {
                XElement x = this.GetElement(HaltungXName);
                return ((HaltungType)(x));
            }
            set {
                this.SetElement(HaltungXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (KantenTyp, KnotenZulauf, KnotenZulaufTyp, KnotenAblauf, KnotenAblaufTyp, SohlhoeheZulauf?, SohlhoeheAblauf?, Strang?, Laenge?, Material?, Profil?, (Haltung | Leitung | Rinne | Gerinne), Segmente?)
        /// </para>
        /// </summary>
        public virtual LeitungType Leitung {
            get {
                XElement x = this.GetElement(LeitungXName);
                return ((LeitungType)(x));
            }
            set {
                this.SetElement(LeitungXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (KantenTyp, KnotenZulauf, KnotenZulaufTyp, KnotenAblauf, KnotenAblaufTyp, SohlhoeheZulauf?, SohlhoeheAblauf?, Strang?, Laenge?, Material?, Profil?, (Haltung | Leitung | Rinne | Gerinne), Segmente?)
        /// </para>
        /// </summary>
        public virtual RinneType Rinne {
            get {
                XElement x = this.GetElement(RinneXName);
                return ((RinneType)(x));
            }
            set {
                this.SetElement(RinneXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (KantenTyp, KnotenZulauf, KnotenZulaufTyp, KnotenAblauf, KnotenAblaufTyp, SohlhoeheZulauf?, SohlhoeheAblauf?, Strang?, Laenge?, Material?, Profil?, (Haltung | Leitung | Rinne | Gerinne), Segmente?)
        /// </para>
        /// </summary>
        public virtual GerinneType Gerinne {
            get {
                XElement x = this.GetElement(GerinneXName);
                return ((GerinneType)(x));
            }
            set {
                this.SetElement(GerinneXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (KantenTyp, KnotenZulauf, KnotenZulaufTyp, KnotenAblauf, KnotenAblaufTyp, SohlhoeheZulauf?, SohlhoeheAblauf?, Strang?, Laenge?, Material?, Profil?, (Haltung | Leitung | Rinne | Gerinne), Segmente?)
        /// </para>
        /// </summary>
        public virtual SegmenteLocalType Segmente {
            get {
                XElement x = this.GetElement(SegmenteXName);
                return ((SegmenteLocalType)(x));
            }
            set {
                this.SetElement(SegmenteXName, value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<StammKanteType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(KantenTypXName, typeof(decimal));
            localElementDictionary.Add(KnotenZulaufXName, typeof(string));
            localElementDictionary.Add(KnotenZulaufTypXName, typeof(decimal));
            localElementDictionary.Add(KnotenAblaufXName, typeof(string));
            localElementDictionary.Add(KnotenAblaufTypXName, typeof(decimal));
            localElementDictionary.Add(SohlhoeheZulaufXName, typeof(decimal));
            localElementDictionary.Add(SohlhoeheAblaufXName, typeof(decimal));
            localElementDictionary.Add(StrangXName, typeof(string));
            localElementDictionary.Add(LaengeXName, typeof(decimal));
            localElementDictionary.Add(MaterialXName, typeof(string));
            localElementDictionary.Add(ProfilXName, typeof(ProfilType));
            localElementDictionary.Add(HaltungXName, typeof(HaltungType));
            localElementDictionary.Add(LeitungXName, typeof(LeitungType));
            localElementDictionary.Add(RinneXName, typeof(RinneType));
            localElementDictionary.Add(GerinneXName, typeof(GerinneType));
            localElementDictionary.Add(SegmenteXName, typeof(SegmenteLocalType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        private class KnotenZulaufLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(4)), null, 0, 0, null, null, 30, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
            
            private KnotenZulaufLocalType() {
            }
        }
        
        private class KnotenAblaufLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(4)), null, 0, 0, null, null, 30, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
            
            private KnotenAblaufLocalType() {
            }
        }
        
        private class SohlhoeheZulaufLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(3200)), null, 3, 0, 10000m, null, 0, null, null, 0, null, 7, XmlSchemaWhiteSpace.Collapse));
            
            private SohlhoeheZulaufLocalType() {
            }
        }
        
        private class SohlhoeheAblaufLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(3200)), null, 3, 0, 10000m, null, 0, null, null, 0, null, 7, XmlSchemaWhiteSpace.Collapse));
            
            private SohlhoeheAblaufLocalType() {
            }
        }
        
        private class StrangLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(4)), null, 0, 0, null, null, 30, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
            
            private StrangLocalType() {
            }
        }
        
        private class LaengeLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(3200)), null, 2, 0, 10000m, null, 0, null, null, 0, null, 6, XmlSchemaWhiteSpace.Collapse));
            
            private LaengeLocalType() {
            }
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Segment+)
        /// </para>
        /// </summary>
        public partial class SegmenteLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName SegmentXName = System.Xml.Linq.XName.Get("Segment", "http://www.bfr-abwasser.de");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XTypedList<SegmentType> SegmentField;
            
            private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("Segmente", "http://www.bfr-abwasser.de");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;
            
		public static explicit operator SegmenteLocalType(XElement xe) { return XTypedServices.ToXTypedElement<SegmenteLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static SegmenteLocalType() {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(SegmentXName));
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (Segment+)
            /// </para>
            /// </summary>
            public SegmenteLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required, repeating
            /// </para>
            /// <para>
            /// Regular expression: (Segment+)
            /// </para>
            /// </summary>
            public virtual IList<SegmentType> Segment {
                get {
                    if ((this.SegmentField == null)) {
                        this.SegmentField = new XTypedList<SegmentType>(this, LinqToXsdTypeManager.Instance, SegmentXName);
                    }
                    return this.SegmentField;
                }
                set {
                    if ((value == null)) {
                        this.SegmentField = null;
                    }
                    else {
                        if ((this.SegmentField == null)) {
                            this.SegmentField = XTypedList<SegmentType>.Initialize(this, LinqToXsdTypeManager.Instance, value, SegmentXName);
                        }
                        else {
                            XTypedServices.SetList<SegmentType>(this.SegmentField, value);
                        }
                    }
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            System.Xml.Linq.XName IXMetaData.SchemaName {
                get {
                    return xName;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<SegmenteLocalType>(this);
            }
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(SegmentXName, typeof(SegmentType));
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return contentModel;
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (SonderprofilVorhanden, Profilart?, ProfilID?, Profilbreite?, Profilhoehe?, Sonderprofil?, Aussendurchmesser?, SDR?)
    /// </para>
    /// </summary>
    public partial class ProfilType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName SonderprofilVorhandenXName = System.Xml.Linq.XName.Get("SonderprofilVorhanden", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ProfilartXName = System.Xml.Linq.XName.Get("Profilart", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ProfilIDXName = System.Xml.Linq.XName.Get("ProfilID", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ProfilbreiteXName = System.Xml.Linq.XName.Get("Profilbreite", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ProfilhoeheXName = System.Xml.Linq.XName.Get("Profilhoehe", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName SonderprofilXName = System.Xml.Linq.XName.Get("Sonderprofil", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName AussendurchmesserXName = System.Xml.Linq.XName.Get("Aussendurchmesser", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName SDRXName = System.Xml.Linq.XName.Get("SDR", "http://www.bfr-abwasser.de");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("ProfilType", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator ProfilType(XElement xe) { return XTypedServices.ToXTypedElement<ProfilType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static ProfilType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(SonderprofilVorhandenXName), new NamedContentModelEntity(ProfilartXName), new NamedContentModelEntity(ProfilIDXName), new NamedContentModelEntity(ProfilbreiteXName), new NamedContentModelEntity(ProfilhoeheXName), new NamedContentModelEntity(SonderprofilXName), new NamedContentModelEntity(AussendurchmesserXName), new NamedContentModelEntity(SDRXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (SonderprofilVorhanden, Profilart?, ProfilID?, Profilbreite?, Profilhoehe?, Sonderprofil?, Aussendurchmesser?, SDR?)
        /// </para>
        /// </summary>
        public ProfilType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (SonderprofilVorhanden, Profilart?, ProfilID?, Profilbreite?, Profilhoehe?, Sonderprofil?, Aussendurchmesser?, SDR?)
        /// </para>
        /// </summary>
        public virtual bool SonderprofilVorhanden {
            get {
                XElement x = this.GetElement(SonderprofilVorhandenXName);
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
            set {
                this.SetElement(SonderprofilVorhandenXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (SonderprofilVorhanden, Profilart?, ProfilID?, Profilbreite?, Profilhoehe?, Sonderprofil?, Aussendurchmesser?, SDR?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? Profilart {
            get {
                XElement x = this.GetElement(ProfilartXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(ProfilartXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                }
                else {
                    this.SetElementWithValidation(ProfilartXName, value, "Profilart", global::www.bfr.abwasser.de.ProfilartType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (SonderprofilVorhanden, Profilart?, ProfilID?, Profilbreite?, Profilhoehe?, Sonderprofil?, Aussendurchmesser?, SDR?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? ProfilID {
            get {
                XElement x = this.GetElement(ProfilIDXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(ProfilIDXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                }
                else {
                    this.SetElementWithValidation(ProfilIDXName, value, "ProfilID", ProfilIDLocalType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (SonderprofilVorhanden, Profilart?, ProfilID?, Profilbreite?, Profilhoehe?, Sonderprofil?, Aussendurchmesser?, SDR?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? Profilbreite {
            get {
                XElement x = this.GetElement(ProfilbreiteXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(ProfilbreiteXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                }
                else {
                    this.SetElementWithValidation(ProfilbreiteXName, value, "Profilbreite", ProfilbreiteLocalType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (SonderprofilVorhanden, Profilart?, ProfilID?, Profilbreite?, Profilhoehe?, Sonderprofil?, Aussendurchmesser?, SDR?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? Profilhoehe {
            get {
                XElement x = this.GetElement(ProfilhoeheXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(ProfilhoeheXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                }
                else {
                    this.SetElementWithValidation(ProfilhoeheXName, value, "Profilhoehe", ProfilhoeheLocalType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (SonderprofilVorhanden, Profilart?, ProfilID?, Profilbreite?, Profilhoehe?, Sonderprofil?, Aussendurchmesser?, SDR?)
        /// </para>
        /// </summary>
        public virtual SonderprofilLocalType Sonderprofil {
            get {
                XElement x = this.GetElement(SonderprofilXName);
                return ((SonderprofilLocalType)(x));
            }
            set {
                this.SetElement(SonderprofilXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (SonderprofilVorhanden, Profilart?, ProfilID?, Profilbreite?, Profilhoehe?, Sonderprofil?, Aussendurchmesser?, SDR?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? Aussendurchmesser {
            get {
                XElement x = this.GetElement(AussendurchmesserXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(AussendurchmesserXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                }
                else {
                    this.SetElementWithValidation(AussendurchmesserXName, value, "Aussendurchmesser", AussendurchmesserLocalType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (SonderprofilVorhanden, Profilart?, ProfilID?, Profilbreite?, Profilhoehe?, Sonderprofil?, Aussendurchmesser?, SDR?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? SDR {
            get {
                XElement x = this.GetElement(SDRXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(SDRXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                }
                else {
                    this.SetElementWithValidation(SDRXName, value, "SDR", global::www.bfr.abwasser.de.SDRType.TypeDefinition);
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ProfilType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(SonderprofilVorhandenXName, typeof(bool));
            localElementDictionary.Add(ProfilartXName, typeof(decimal));
            localElementDictionary.Add(ProfilIDXName, typeof(decimal));
            localElementDictionary.Add(ProfilbreiteXName, typeof(decimal));
            localElementDictionary.Add(ProfilhoeheXName, typeof(decimal));
            localElementDictionary.Add(SonderprofilXName, typeof(SonderprofilLocalType));
            localElementDictionary.Add(AussendurchmesserXName, typeof(decimal));
            localElementDictionary.Add(SDRXName, typeof(decimal));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        private class ProfilIDLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(1024)), null, 0, 0, null, null, 0, null, null, 0, null, 10, XmlSchemaWhiteSpace.Collapse));
            
            private ProfilIDLocalType() {
            }
        }
        
        private class ProfilbreiteLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(1024)), null, 0, 0, null, null, 0, null, null, 0, null, 4, XmlSchemaWhiteSpace.Collapse));
            
            private ProfilbreiteLocalType() {
            }
        }
        
        private class ProfilhoeheLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(1024)), null, 0, 0, null, null, 0, null, null, 0, null, 4, XmlSchemaWhiteSpace.Collapse));
            
            private ProfilhoeheLocalType() {
            }
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Koordinaten+)
        /// </para>
        /// </summary>
        public partial class SonderprofilLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName KoordinatenXName = System.Xml.Linq.XName.Get("Koordinaten", "http://www.bfr-abwasser.de");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XTypedList<KoordinatenType> KoordinatenField;
            
            private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("Sonderprofil", "http://www.bfr-abwasser.de");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;
            
		public static explicit operator SonderprofilLocalType(XElement xe) { return XTypedServices.ToXTypedElement<SonderprofilLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static SonderprofilLocalType() {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(KoordinatenXName));
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (Koordinaten+)
            /// </para>
            /// </summary>
            public SonderprofilLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required, repeating
            /// </para>
            /// <para>
            /// Regular expression: (Koordinaten+)
            /// </para>
            /// </summary>
            public virtual IList<KoordinatenType> Koordinaten {
                get {
                    if ((this.KoordinatenField == null)) {
                        this.KoordinatenField = new XTypedList<KoordinatenType>(this, LinqToXsdTypeManager.Instance, KoordinatenXName);
                    }
                    return this.KoordinatenField;
                }
                set {
                    if ((value == null)) {
                        this.KoordinatenField = null;
                    }
                    else {
                        if ((this.KoordinatenField == null)) {
                            this.KoordinatenField = XTypedList<KoordinatenType>.Initialize(this, LinqToXsdTypeManager.Instance, value, KoordinatenXName);
                        }
                        else {
                            XTypedServices.SetList<KoordinatenType>(this.KoordinatenField, value);
                        }
                    }
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            System.Xml.Linq.XName IXMetaData.SchemaName {
                get {
                    return xName;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<SonderprofilLocalType>(this);
            }
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(KoordinatenXName, typeof(KoordinatenType));
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return contentModel;
            }
        }
        
        private class AussendurchmesserLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(1024)), null, 0, 0, null, null, 0, null, null, 0, null, 4, XmlSchemaWhiteSpace.Collapse));
            
            private AussendurchmesserLocalType() {
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (XWert, YWert)
    /// </para>
    /// </summary>
    public partial class KoordinatenType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName XWertXName = System.Xml.Linq.XName.Get("X-Wert", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName YWertXName = System.Xml.Linq.XName.Get("Y-Wert", "http://www.bfr-abwasser.de");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("KoordinatenType", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator KoordinatenType(XElement xe) { return XTypedServices.ToXTypedElement<KoordinatenType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static KoordinatenType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(XWertXName), new NamedContentModelEntity(YWertXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (XWert, YWert)
        /// </para>
        /// </summary>
        public KoordinatenType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (XWert, YWert)
        /// </para>
        /// </summary>
        public virtual decimal XWert {
            get {
                XElement x = this.GetElement(XWertXName);
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
            set {
                this.SetElementWithValidation(XWertXName, value, "XWert", XWertLocalType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (XWert, YWert)
        /// </para>
        /// </summary>
        public virtual decimal YWert {
            get {
                XElement x = this.GetElement(YWertXName);
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
            set {
                this.SetElementWithValidation(YWertXName, value, "YWert", YWertLocalType.TypeDefinition);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<KoordinatenType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(XWertXName, typeof(decimal));
            localElementDictionary.Add(YWertXName, typeof(decimal));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        private class XWertLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(3200)), null, 3, 0, 1000m, null, 0, null, null, 0, null, 6, XmlSchemaWhiteSpace.Collapse));
            
            private XWertLocalType() {
            }
        }
        
        private class YWertLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(3200)), null, 3, 0, 1000m, null, 0, null, null, 0, null, 6, XmlSchemaWhiteSpace.Collapse));
            
            private YWertLocalType() {
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (HaltungsFunktion?, DMPLaenge?, Rohrlaenge?, Innenschutz?, Auskleidung?, MaterialAuskleidung?, Nenndruck?, Druckverfahren?, Anschlussdaten?)
    /// </para>
    /// </summary>
    public partial class HaltungType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName HaltungsFunktionXName = System.Xml.Linq.XName.Get("HaltungsFunktion", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName DMPLaengeXName = System.Xml.Linq.XName.Get("DMPLaenge", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName RohrlaengeXName = System.Xml.Linq.XName.Get("Rohrlaenge", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName InnenschutzXName = System.Xml.Linq.XName.Get("Innenschutz", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName AuskleidungXName = System.Xml.Linq.XName.Get("Auskleidung", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName MaterialAuskleidungXName = System.Xml.Linq.XName.Get("MaterialAuskleidung", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName NenndruckXName = System.Xml.Linq.XName.Get("Nenndruck", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName DruckverfahrenXName = System.Xml.Linq.XName.Get("Druckverfahren", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName AnschlussdatenXName = System.Xml.Linq.XName.Get("Anschlussdaten", "http://www.bfr-abwasser.de");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("HaltungType", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator HaltungType(XElement xe) { return XTypedServices.ToXTypedElement<HaltungType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static HaltungType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(HaltungsFunktionXName), new NamedContentModelEntity(DMPLaengeXName), new NamedContentModelEntity(RohrlaengeXName), new NamedContentModelEntity(InnenschutzXName), new NamedContentModelEntity(AuskleidungXName), new NamedContentModelEntity(MaterialAuskleidungXName), new NamedContentModelEntity(NenndruckXName), new NamedContentModelEntity(DruckverfahrenXName), new NamedContentModelEntity(AnschlussdatenXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (HaltungsFunktion?, DMPLaenge?, Rohrlaenge?, Innenschutz?, Auskleidung?, MaterialAuskleidung?, Nenndruck?, Druckverfahren?, Anschlussdaten?)
        /// </para>
        /// </summary>
        public HaltungType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (HaltungsFunktion?, DMPLaenge?, Rohrlaenge?, Innenschutz?, Auskleidung?, MaterialAuskleidung?, Nenndruck?, Druckverfahren?, Anschlussdaten?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? HaltungsFunktion {
            get {
                XElement x = this.GetElement(HaltungsFunktionXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(HaltungsFunktionXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                }
                else {
                    this.SetElementWithValidation(HaltungsFunktionXName, value, "HaltungsFunktion", global::www.bfr.abwasser.de.HaltungsFunktionType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (HaltungsFunktion?, DMPLaenge?, Rohrlaenge?, Innenschutz?, Auskleidung?, MaterialAuskleidung?, Nenndruck?, Druckverfahren?, Anschlussdaten?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? DMPLaenge {
            get {
                XElement x = this.GetElement(DMPLaengeXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(DMPLaengeXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                }
                else {
                    this.SetElementWithValidation(DMPLaengeXName, value, "DMPLaenge", DMPLaengeLocalType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (HaltungsFunktion?, DMPLaenge?, Rohrlaenge?, Innenschutz?, Auskleidung?, MaterialAuskleidung?, Nenndruck?, Druckverfahren?, Anschlussdaten?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? Rohrlaenge {
            get {
                XElement x = this.GetElement(RohrlaengeXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(RohrlaengeXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                }
                else {
                    this.SetElementWithValidation(RohrlaengeXName, value, "Rohrlaenge", RohrlaengeLocalType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (HaltungsFunktion?, DMPLaenge?, Rohrlaenge?, Innenschutz?, Auskleidung?, MaterialAuskleidung?, Nenndruck?, Druckverfahren?, Anschlussdaten?)
        /// </para>
        /// </summary>
        public virtual string Innenschutz {
            get {
                XElement x = this.GetElement(InnenschutzXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(InnenschutzXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                else {
                    this.SetElementWithValidation(InnenschutzXName, value, "Innenschutz", global::www.bfr.abwasser.de.InnenschutzType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (HaltungsFunktion?, DMPLaenge?, Rohrlaenge?, Innenschutz?, Auskleidung?, MaterialAuskleidung?, Nenndruck?, Druckverfahren?, Anschlussdaten?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? Auskleidung {
            get {
                XElement x = this.GetElement(AuskleidungXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(AuskleidungXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                }
                else {
                    this.SetElementWithValidation(AuskleidungXName, value, "Auskleidung", global::www.bfr.abwasser.de.AuskleidungType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (HaltungsFunktion?, DMPLaenge?, Rohrlaenge?, Innenschutz?, Auskleidung?, MaterialAuskleidung?, Nenndruck?, Druckverfahren?, Anschlussdaten?)
        /// </para>
        /// </summary>
        public virtual string MaterialAuskleidung {
            get {
                XElement x = this.GetElement(MaterialAuskleidungXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(MaterialAuskleidungXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                else {
                    this.SetElementWithValidation(MaterialAuskleidungXName, value, "MaterialAuskleidung", global::www.bfr.abwasser.de.MaterialType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (HaltungsFunktion?, DMPLaenge?, Rohrlaenge?, Innenschutz?, Auskleidung?, MaterialAuskleidung?, Nenndruck?, Druckverfahren?, Anschlussdaten?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? Nenndruck {
            get {
                XElement x = this.GetElement(NenndruckXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(NenndruckXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                }
                else {
                    this.SetElementWithValidation(NenndruckXName, value, "Nenndruck", NenndruckLocalType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (HaltungsFunktion?, DMPLaenge?, Rohrlaenge?, Innenschutz?, Auskleidung?, MaterialAuskleidung?, Nenndruck?, Druckverfahren?, Anschlussdaten?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? Druckverfahren {
            get {
                XElement x = this.GetElement(DruckverfahrenXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(DruckverfahrenXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                }
                else {
                    this.SetElementWithValidation(DruckverfahrenXName, value, "Druckverfahren", global::www.bfr.abwasser.de.DruckverfahrenType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (HaltungsFunktion?, DMPLaenge?, Rohrlaenge?, Innenschutz?, Auskleidung?, MaterialAuskleidung?, Nenndruck?, Druckverfahren?, Anschlussdaten?)
        /// </para>
        /// </summary>
        public virtual StammAnschlussType Anschlussdaten {
            get {
                XElement x = this.GetElement(AnschlussdatenXName);
                return ((StammAnschlussType)(x));
            }
            set {
                this.SetElement(AnschlussdatenXName, value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<HaltungType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(HaltungsFunktionXName, typeof(decimal));
            localElementDictionary.Add(DMPLaengeXName, typeof(decimal));
            localElementDictionary.Add(RohrlaengeXName, typeof(decimal));
            localElementDictionary.Add(InnenschutzXName, typeof(string));
            localElementDictionary.Add(AuskleidungXName, typeof(decimal));
            localElementDictionary.Add(MaterialAuskleidungXName, typeof(string));
            localElementDictionary.Add(NenndruckXName, typeof(decimal));
            localElementDictionary.Add(DruckverfahrenXName, typeof(decimal));
            localElementDictionary.Add(AnschlussdatenXName, typeof(StammAnschlussType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        private class DMPLaengeLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(3200)), null, 2, 0, 10000m, null, 0, null, null, 0, null, 6, XmlSchemaWhiteSpace.Collapse));
            
            private DMPLaengeLocalType() {
            }
        }
        
        private class RohrlaengeLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(3200)), null, 2, 0, 10000m, null, 0, null, null, 0, null, 6, XmlSchemaWhiteSpace.Collapse));
            
            private RohrlaengeLocalType() {
            }
        }
        
        private class NenndruckLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(1024)), null, 0, 0, null, null, 0, null, null, 0, null, 3, XmlSchemaWhiteSpace.Collapse));
            
            private NenndruckLocalType() {
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (LeitungsFunktion?, Innenschutz?, Auskleidung?, MaterialAuskleidung?, Nenndruck?, Druckverfahren?, Anschlussdaten?)
    /// </para>
    /// </summary>
    public partial class LeitungType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName LeitungsFunktionXName = System.Xml.Linq.XName.Get("LeitungsFunktion", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName InnenschutzXName = System.Xml.Linq.XName.Get("Innenschutz", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName AuskleidungXName = System.Xml.Linq.XName.Get("Auskleidung", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName MaterialAuskleidungXName = System.Xml.Linq.XName.Get("MaterialAuskleidung", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName NenndruckXName = System.Xml.Linq.XName.Get("Nenndruck", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName DruckverfahrenXName = System.Xml.Linq.XName.Get("Druckverfahren", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName AnschlussdatenXName = System.Xml.Linq.XName.Get("Anschlussdaten", "http://www.bfr-abwasser.de");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("LeitungType", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator LeitungType(XElement xe) { return XTypedServices.ToXTypedElement<LeitungType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static LeitungType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(LeitungsFunktionXName), new NamedContentModelEntity(InnenschutzXName), new NamedContentModelEntity(AuskleidungXName), new NamedContentModelEntity(MaterialAuskleidungXName), new NamedContentModelEntity(NenndruckXName), new NamedContentModelEntity(DruckverfahrenXName), new NamedContentModelEntity(AnschlussdatenXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (LeitungsFunktion?, Innenschutz?, Auskleidung?, MaterialAuskleidung?, Nenndruck?, Druckverfahren?, Anschlussdaten?)
        /// </para>
        /// </summary>
        public LeitungType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (LeitungsFunktion?, Innenschutz?, Auskleidung?, MaterialAuskleidung?, Nenndruck?, Druckverfahren?, Anschlussdaten?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? LeitungsFunktion {
            get {
                XElement x = this.GetElement(LeitungsFunktionXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(LeitungsFunktionXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                }
                else {
                    this.SetElementWithValidation(LeitungsFunktionXName, value, "LeitungsFunktion", global::www.bfr.abwasser.de.LeitungsFunktionType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (LeitungsFunktion?, Innenschutz?, Auskleidung?, MaterialAuskleidung?, Nenndruck?, Druckverfahren?, Anschlussdaten?)
        /// </para>
        /// </summary>
        public virtual string Innenschutz {
            get {
                XElement x = this.GetElement(InnenschutzXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(InnenschutzXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                else {
                    this.SetElementWithValidation(InnenschutzXName, value, "Innenschutz", global::www.bfr.abwasser.de.InnenschutzType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (LeitungsFunktion?, Innenschutz?, Auskleidung?, MaterialAuskleidung?, Nenndruck?, Druckverfahren?, Anschlussdaten?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? Auskleidung {
            get {
                XElement x = this.GetElement(AuskleidungXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(AuskleidungXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                }
                else {
                    this.SetElementWithValidation(AuskleidungXName, value, "Auskleidung", global::www.bfr.abwasser.de.AuskleidungType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (LeitungsFunktion?, Innenschutz?, Auskleidung?, MaterialAuskleidung?, Nenndruck?, Druckverfahren?, Anschlussdaten?)
        /// </para>
        /// </summary>
        public virtual string MaterialAuskleidung {
            get {
                XElement x = this.GetElement(MaterialAuskleidungXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(MaterialAuskleidungXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                else {
                    this.SetElementWithValidation(MaterialAuskleidungXName, value, "MaterialAuskleidung", global::www.bfr.abwasser.de.MaterialType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (LeitungsFunktion?, Innenschutz?, Auskleidung?, MaterialAuskleidung?, Nenndruck?, Druckverfahren?, Anschlussdaten?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? Nenndruck {
            get {
                XElement x = this.GetElement(NenndruckXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(NenndruckXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                }
                else {
                    this.SetElementWithValidation(NenndruckXName, value, "Nenndruck", NenndruckLocalType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (LeitungsFunktion?, Innenschutz?, Auskleidung?, MaterialAuskleidung?, Nenndruck?, Druckverfahren?, Anschlussdaten?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? Druckverfahren {
            get {
                XElement x = this.GetElement(DruckverfahrenXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(DruckverfahrenXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                }
                else {
                    this.SetElementWithValidation(DruckverfahrenXName, value, "Druckverfahren", global::www.bfr.abwasser.de.DruckverfahrenType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (LeitungsFunktion?, Innenschutz?, Auskleidung?, MaterialAuskleidung?, Nenndruck?, Druckverfahren?, Anschlussdaten?)
        /// </para>
        /// </summary>
        public virtual StammAnschlussType Anschlussdaten {
            get {
                XElement x = this.GetElement(AnschlussdatenXName);
                return ((StammAnschlussType)(x));
            }
            set {
                this.SetElement(AnschlussdatenXName, value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<LeitungType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(LeitungsFunktionXName, typeof(decimal));
            localElementDictionary.Add(InnenschutzXName, typeof(string));
            localElementDictionary.Add(AuskleidungXName, typeof(decimal));
            localElementDictionary.Add(MaterialAuskleidungXName, typeof(string));
            localElementDictionary.Add(NenndruckXName, typeof(decimal));
            localElementDictionary.Add(DruckverfahrenXName, typeof(decimal));
            localElementDictionary.Add(AnschlussdatenXName, typeof(StammAnschlussType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        private class NenndruckLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(1024)), null, 0, 0, null, null, 0, null, null, 0, null, 3, XmlSchemaWhiteSpace.Collapse));
            
            private NenndruckLocalType() {
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (RinnenFunktion?)
    /// </para>
    /// </summary>
    public partial class RinneType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName RinnenFunktionXName = System.Xml.Linq.XName.Get("RinnenFunktion", "http://www.bfr-abwasser.de");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("RinneType", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator RinneType(XElement xe) { return XTypedServices.ToXTypedElement<RinneType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static RinneType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(RinnenFunktionXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (RinnenFunktion?)
        /// </para>
        /// </summary>
        public RinneType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (RinnenFunktion?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? RinnenFunktion {
            get {
                XElement x = this.GetElement(RinnenFunktionXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(RinnenFunktionXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                }
                else {
                    this.SetElementWithValidation(RinnenFunktionXName, value, "RinnenFunktion", global::www.bfr.abwasser.de.RinnenFunktionType.TypeDefinition);
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<RinneType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(RinnenFunktionXName, typeof(decimal));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (GerinneFunktion?)
    /// </para>
    /// </summary>
    public partial class GerinneType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName GerinneFunktionXName = System.Xml.Linq.XName.Get("GerinneFunktion", "http://www.bfr-abwasser.de");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("GerinneType", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator GerinneType(XElement xe) { return XTypedServices.ToXTypedElement<GerinneType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static GerinneType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(GerinneFunktionXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (GerinneFunktion?)
        /// </para>
        /// </summary>
        public GerinneType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (GerinneFunktion?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? GerinneFunktion {
            get {
                XElement x = this.GetElement(GerinneFunktionXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(GerinneFunktionXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                }
                else {
                    this.SetElementWithValidation(GerinneFunktionXName, value, "GerinneFunktion", global::www.bfr.abwasser.de.GerinneFunktionType.TypeDefinition);
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<GerinneType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(GerinneFunktionXName, typeof(decimal));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (KnotenTyp, (Schacht | Anschlusspunkt | Bauwerk), Strang?, Abdeckungen?)
    /// </para>
    /// </summary>
    public partial class StammKnotenType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName KnotenTypXName = System.Xml.Linq.XName.Get("KnotenTyp", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName SchachtXName = System.Xml.Linq.XName.Get("Schacht", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName AnschlusspunktXName = System.Xml.Linq.XName.Get("Anschlusspunkt", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName BauwerkXName = System.Xml.Linq.XName.Get("Bauwerk", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName StrangXName = System.Xml.Linq.XName.Get("Strang", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName AbdeckungenXName = System.Xml.Linq.XName.Get("Abdeckungen", "http://www.bfr-abwasser.de");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("StammKnotenType", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator StammKnotenType(XElement xe) { return XTypedServices.ToXTypedElement<StammKnotenType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static StammKnotenType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(KnotenTypXName), new ChoiceContentModelEntity(new NamedContentModelEntity(SchachtXName), new NamedContentModelEntity(AnschlusspunktXName), new NamedContentModelEntity(BauwerkXName)), new NamedContentModelEntity(StrangXName), new NamedContentModelEntity(AbdeckungenXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (KnotenTyp, (Schacht | Anschlusspunkt | Bauwerk), Strang?, Abdeckungen?)
        /// </para>
        /// </summary>
        public StammKnotenType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (KnotenTyp, (Schacht | Anschlusspunkt | Bauwerk), Strang?, Abdeckungen?)
        /// </para>
        /// </summary>
        public virtual decimal KnotenTyp {
            get {
                XElement x = this.GetElement(KnotenTypXName);
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                this.SetElementWithValidation(KnotenTypXName, value, "KnotenTyp", global::www.bfr.abwasser.de.KnotentypType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (KnotenTyp, (Schacht | Anschlusspunkt | Bauwerk), Strang?, Abdeckungen?)
        /// </para>
        /// </summary>
        public virtual SchachtType Schacht {
            get {
                XElement x = this.GetElement(SchachtXName);
                return ((SchachtType)(x));
            }
            set {
                this.SetElement(SchachtXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (KnotenTyp, (Schacht | Anschlusspunkt | Bauwerk), Strang?, Abdeckungen?)
        /// </para>
        /// </summary>
        public virtual AnschlusspunktType Anschlusspunkt {
            get {
                XElement x = this.GetElement(AnschlusspunktXName);
                return ((AnschlusspunktType)(x));
            }
            set {
                this.SetElement(AnschlusspunktXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (KnotenTyp, (Schacht | Anschlusspunkt | Bauwerk), Strang?, Abdeckungen?)
        /// </para>
        /// </summary>
        public virtual BauwerkType Bauwerk {
            get {
                XElement x = this.GetElement(BauwerkXName);
                return ((BauwerkType)(x));
            }
            set {
                this.SetElement(BauwerkXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (KnotenTyp, (Schacht | Anschlusspunkt | Bauwerk), Strang?, Abdeckungen?)
        /// </para>
        /// </summary>
        public virtual string Strang {
            get {
                XElement x = this.GetElement(StrangXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(StrangXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                else {
                    this.SetElementWithValidation(StrangXName, value, "Strang", StrangLocalType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (KnotenTyp, (Schacht | Anschlusspunkt | Bauwerk), Strang?, Abdeckungen?)
        /// </para>
        /// </summary>
        public virtual AbdeckungenLocalType Abdeckungen {
            get {
                XElement x = this.GetElement(AbdeckungenXName);
                return ((AbdeckungenLocalType)(x));
            }
            set {
                this.SetElement(AbdeckungenXName, value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<StammKnotenType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(KnotenTypXName, typeof(decimal));
            localElementDictionary.Add(SchachtXName, typeof(SchachtType));
            localElementDictionary.Add(AnschlusspunktXName, typeof(AnschlusspunktType));
            localElementDictionary.Add(BauwerkXName, typeof(BauwerkType));
            localElementDictionary.Add(StrangXName, typeof(string));
            localElementDictionary.Add(AbdeckungenXName, typeof(AbdeckungenLocalType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        private class StrangLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(4)), null, 0, 0, null, null, 30, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
            
            private StrangLocalType() {
            }
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Deckel+)
        /// </para>
        /// </summary>
        public partial class AbdeckungenLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName DeckelXName = System.Xml.Linq.XName.Get("Deckel", "http://www.bfr-abwasser.de");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XTypedList<DeckelType> DeckelField;
            
            private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("Abdeckungen", "http://www.bfr-abwasser.de");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;
            
		public static explicit operator AbdeckungenLocalType(XElement xe) { return XTypedServices.ToXTypedElement<AbdeckungenLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static AbdeckungenLocalType() {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(DeckelXName));
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (Deckel+)
            /// </para>
            /// </summary>
            public AbdeckungenLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required, repeating
            /// </para>
            /// <para>
            /// Regular expression: (Deckel+)
            /// </para>
            /// </summary>
            public virtual IList<DeckelType> Deckel {
                get {
                    if ((this.DeckelField == null)) {
                        this.DeckelField = new XTypedList<DeckelType>(this, LinqToXsdTypeManager.Instance, DeckelXName);
                    }
                    return this.DeckelField;
                }
                set {
                    if ((value == null)) {
                        this.DeckelField = null;
                    }
                    else {
                        if ((this.DeckelField == null)) {
                            this.DeckelField = XTypedList<DeckelType>.Initialize(this, LinqToXsdTypeManager.Instance, value, DeckelXName);
                        }
                        else {
                            XTypedServices.SetList<DeckelType>(this.DeckelField, value);
                        }
                    }
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            System.Xml.Linq.XName IXMetaData.SchemaName {
                get {
                    return xName;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<AbdeckungenLocalType>(this);
            }
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(DeckelXName, typeof(DeckelType));
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return contentModel;
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (SchachtFunktion?, Schachttiefe?, Einstieghilfe?, ArtEinstieghilfe?, MaterialSteighilfen?, Innenschutz?, AnzahlAnschluesse?, Uebergabeschacht?, Auflagering?, Aufbau?, UntereSchachtzone?, Unterteil?)
    /// </para>
    /// </summary>
    public partial class SchachtType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName SchachtFunktionXName = System.Xml.Linq.XName.Get("SchachtFunktion", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName SchachttiefeXName = System.Xml.Linq.XName.Get("Schachttiefe", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName EinstieghilfeXName = System.Xml.Linq.XName.Get("Einstieghilfe", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ArtEinstieghilfeXName = System.Xml.Linq.XName.Get("ArtEinstieghilfe", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName MaterialSteighilfenXName = System.Xml.Linq.XName.Get("MaterialSteighilfen", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName InnenschutzXName = System.Xml.Linq.XName.Get("Innenschutz", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName AnzahlAnschluesseXName = System.Xml.Linq.XName.Get("AnzahlAnschluesse", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName UebergabeschachtXName = System.Xml.Linq.XName.Get("Uebergabeschacht", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName AuflageringXName = System.Xml.Linq.XName.Get("Auflagering", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName AufbauXName = System.Xml.Linq.XName.Get("Aufbau", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName UntereSchachtzoneXName = System.Xml.Linq.XName.Get("UntereSchachtzone", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName UnterteilXName = System.Xml.Linq.XName.Get("Unterteil", "http://www.bfr-abwasser.de");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("SchachtType", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator SchachtType(XElement xe) { return XTypedServices.ToXTypedElement<SchachtType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static SchachtType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(SchachtFunktionXName), new NamedContentModelEntity(SchachttiefeXName), new NamedContentModelEntity(EinstieghilfeXName), new NamedContentModelEntity(ArtEinstieghilfeXName), new NamedContentModelEntity(MaterialSteighilfenXName), new NamedContentModelEntity(InnenschutzXName), new NamedContentModelEntity(AnzahlAnschluesseXName), new NamedContentModelEntity(UebergabeschachtXName), new NamedContentModelEntity(AuflageringXName), new NamedContentModelEntity(AufbauXName), new NamedContentModelEntity(UntereSchachtzoneXName), new NamedContentModelEntity(UnterteilXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (SchachtFunktion?, Schachttiefe?, Einstieghilfe?, ArtEinstieghilfe?, MaterialSteighilfen?, Innenschutz?, AnzahlAnschluesse?, Uebergabeschacht?, Auflagering?, Aufbau?, UntereSchachtzone?, Unterteil?)
        /// </para>
        /// </summary>
        public SchachtType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (SchachtFunktion?, Schachttiefe?, Einstieghilfe?, ArtEinstieghilfe?, MaterialSteighilfen?, Innenschutz?, AnzahlAnschluesse?, Uebergabeschacht?, Auflagering?, Aufbau?, UntereSchachtzone?, Unterteil?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? SchachtFunktion {
            get {
                XElement x = this.GetElement(SchachtFunktionXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(SchachtFunktionXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                }
                else {
                    this.SetElementWithValidation(SchachtFunktionXName, value, "SchachtFunktion", global::www.bfr.abwasser.de.SchachtFunktionType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (SchachtFunktion?, Schachttiefe?, Einstieghilfe?, ArtEinstieghilfe?, MaterialSteighilfen?, Innenschutz?, AnzahlAnschluesse?, Uebergabeschacht?, Auflagering?, Aufbau?, UntereSchachtzone?, Unterteil?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? Schachttiefe {
            get {
                XElement x = this.GetElement(SchachttiefeXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(SchachttiefeXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                }
                else {
                    this.SetElementWithValidation(SchachttiefeXName, value, "Schachttiefe", SchachttiefeLocalType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (SchachtFunktion?, Schachttiefe?, Einstieghilfe?, ArtEinstieghilfe?, MaterialSteighilfen?, Innenschutz?, AnzahlAnschluesse?, Uebergabeschacht?, Auflagering?, Aufbau?, UntereSchachtzone?, Unterteil?)
        /// </para>
        /// </summary>
        public virtual System.Boolean? Einstieghilfe {
            get {
                XElement x = this.GetElement(EinstieghilfeXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
            set {
                this.SetElement(EinstieghilfeXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (SchachtFunktion?, Schachttiefe?, Einstieghilfe?, ArtEinstieghilfe?, MaterialSteighilfen?, Innenschutz?, AnzahlAnschluesse?, Uebergabeschacht?, Auflagering?, Aufbau?, UntereSchachtzone?, Unterteil?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? ArtEinstieghilfe {
            get {
                XElement x = this.GetElement(ArtEinstieghilfeXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(ArtEinstieghilfeXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                }
                else {
                    this.SetElementWithValidation(ArtEinstieghilfeXName, value, "ArtEinstieghilfe", global::www.bfr.abwasser.de.ArtSteighilfenType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (SchachtFunktion?, Schachttiefe?, Einstieghilfe?, ArtEinstieghilfe?, MaterialSteighilfen?, Innenschutz?, AnzahlAnschluesse?, Uebergabeschacht?, Auflagering?, Aufbau?, UntereSchachtzone?, Unterteil?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? MaterialSteighilfen {
            get {
                XElement x = this.GetElement(MaterialSteighilfenXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(MaterialSteighilfenXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                }
                else {
                    this.SetElementWithValidation(MaterialSteighilfenXName, value, "MaterialSteighilfen", global::www.bfr.abwasser.de.MaterialSteighilfenType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (SchachtFunktion?, Schachttiefe?, Einstieghilfe?, ArtEinstieghilfe?, MaterialSteighilfen?, Innenschutz?, AnzahlAnschluesse?, Uebergabeschacht?, Auflagering?, Aufbau?, UntereSchachtzone?, Unterteil?)
        /// </para>
        /// </summary>
        public virtual string Innenschutz {
            get {
                XElement x = this.GetElement(InnenschutzXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(InnenschutzXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                else {
                    this.SetElementWithValidation(InnenschutzXName, value, "Innenschutz", global::www.bfr.abwasser.de.InnenschutzType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (SchachtFunktion?, Schachttiefe?, Einstieghilfe?, ArtEinstieghilfe?, MaterialSteighilfen?, Innenschutz?, AnzahlAnschluesse?, Uebergabeschacht?, Auflagering?, Aufbau?, UntereSchachtzone?, Unterteil?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? AnzahlAnschluesse {
            get {
                XElement x = this.GetElement(AnzahlAnschluesseXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(AnzahlAnschluesseXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                }
                else {
                    this.SetElementWithValidation(AnzahlAnschluesseXName, value, "AnzahlAnschluesse", AnzahlAnschluesseLocalType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (SchachtFunktion?, Schachttiefe?, Einstieghilfe?, ArtEinstieghilfe?, MaterialSteighilfen?, Innenschutz?, AnzahlAnschluesse?, Uebergabeschacht?, Auflagering?, Aufbau?, UntereSchachtzone?, Unterteil?)
        /// </para>
        /// </summary>
        public virtual System.Boolean? Uebergabeschacht {
            get {
                XElement x = this.GetElement(UebergabeschachtXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
            set {
                this.SetElement(UebergabeschachtXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (SchachtFunktion?, Schachttiefe?, Einstieghilfe?, ArtEinstieghilfe?, MaterialSteighilfen?, Innenschutz?, AnzahlAnschluesse?, Uebergabeschacht?, Auflagering?, Aufbau?, UntereSchachtzone?, Unterteil?)
        /// </para>
        /// </summary>
        public virtual AuflageringType Auflagering {
            get {
                XElement x = this.GetElement(AuflageringXName);
                return ((AuflageringType)(x));
            }
            set {
                this.SetElement(AuflageringXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (SchachtFunktion?, Schachttiefe?, Einstieghilfe?, ArtEinstieghilfe?, MaterialSteighilfen?, Innenschutz?, AnzahlAnschluesse?, Uebergabeschacht?, Auflagering?, Aufbau?, UntereSchachtzone?, Unterteil?)
        /// </para>
        /// </summary>
        public virtual AufbauType Aufbau {
            get {
                XElement x = this.GetElement(AufbauXName);
                return ((AufbauType)(x));
            }
            set {
                this.SetElement(AufbauXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (SchachtFunktion?, Schachttiefe?, Einstieghilfe?, ArtEinstieghilfe?, MaterialSteighilfen?, Innenschutz?, AnzahlAnschluesse?, Uebergabeschacht?, Auflagering?, Aufbau?, UntereSchachtzone?, Unterteil?)
        /// </para>
        /// </summary>
        public virtual UntereSchachtzoneType UntereSchachtzone {
            get {
                XElement x = this.GetElement(UntereSchachtzoneXName);
                return ((UntereSchachtzoneType)(x));
            }
            set {
                this.SetElement(UntereSchachtzoneXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (SchachtFunktion?, Schachttiefe?, Einstieghilfe?, ArtEinstieghilfe?, MaterialSteighilfen?, Innenschutz?, AnzahlAnschluesse?, Uebergabeschacht?, Auflagering?, Aufbau?, UntereSchachtzone?, Unterteil?)
        /// </para>
        /// </summary>
        public virtual UnterteilType Unterteil {
            get {
                XElement x = this.GetElement(UnterteilXName);
                return ((UnterteilType)(x));
            }
            set {
                this.SetElement(UnterteilXName, value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<SchachtType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(SchachtFunktionXName, typeof(decimal));
            localElementDictionary.Add(SchachttiefeXName, typeof(decimal));
            localElementDictionary.Add(EinstieghilfeXName, typeof(bool));
            localElementDictionary.Add(ArtEinstieghilfeXName, typeof(decimal));
            localElementDictionary.Add(MaterialSteighilfenXName, typeof(decimal));
            localElementDictionary.Add(InnenschutzXName, typeof(string));
            localElementDictionary.Add(AnzahlAnschluesseXName, typeof(decimal));
            localElementDictionary.Add(UebergabeschachtXName, typeof(bool));
            localElementDictionary.Add(AuflageringXName, typeof(AuflageringType));
            localElementDictionary.Add(AufbauXName, typeof(AufbauType));
            localElementDictionary.Add(UntereSchachtzoneXName, typeof(UntereSchachtzoneType));
            localElementDictionary.Add(UnterteilXName, typeof(UnterteilType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        private class SchachttiefeLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(3200)), null, 2, 0, 1000m, null, 0, null, null, 0, null, 5, XmlSchemaWhiteSpace.Collapse));
            
            private SchachttiefeLocalType() {
            }
        }
        
        private class AnzahlAnschluesseLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(1024)), null, 0, 0, null, null, 0, null, null, 0, null, 2, XmlSchemaWhiteSpace.Collapse));
            
            private AnzahlAnschluesseLocalType() {
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Aufbauform?, Abdeckplatte?, Konus?, LaengeAufbau?, BreiteAufbau?, HoeheAufbau?, MaterialAufbau?)
    /// </para>
    /// </summary>
    public partial class AufbauType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName AufbauformXName = System.Xml.Linq.XName.Get("Aufbauform", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName AbdeckplatteXName = System.Xml.Linq.XName.Get("Abdeckplatte", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName KonusXName = System.Xml.Linq.XName.Get("Konus", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName LaengeAufbauXName = System.Xml.Linq.XName.Get("LaengeAufbau", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName BreiteAufbauXName = System.Xml.Linq.XName.Get("BreiteAufbau", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName HoeheAufbauXName = System.Xml.Linq.XName.Get("HoeheAufbau", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName MaterialAufbauXName = System.Xml.Linq.XName.Get("MaterialAufbau", "http://www.bfr-abwasser.de");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("AufbauType", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator AufbauType(XElement xe) { return XTypedServices.ToXTypedElement<AufbauType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static AufbauType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(AufbauformXName), new NamedContentModelEntity(AbdeckplatteXName), new NamedContentModelEntity(KonusXName), new NamedContentModelEntity(LaengeAufbauXName), new NamedContentModelEntity(BreiteAufbauXName), new NamedContentModelEntity(HoeheAufbauXName), new NamedContentModelEntity(MaterialAufbauXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Aufbauform?, Abdeckplatte?, Konus?, LaengeAufbau?, BreiteAufbau?, HoeheAufbau?, MaterialAufbau?)
        /// </para>
        /// </summary>
        public AufbauType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Aufbauform?, Abdeckplatte?, Konus?, LaengeAufbau?, BreiteAufbau?, HoeheAufbau?, MaterialAufbau?)
        /// </para>
        /// </summary>
        public virtual string Aufbauform {
            get {
                XElement x = this.GetElement(AufbauformXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(AufbauformXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                else {
                    this.SetElementWithValidation(AufbauformXName, value, "Aufbauform", global::www.bfr.abwasser.de.AufbauformType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Aufbauform?, Abdeckplatte?, Konus?, LaengeAufbau?, BreiteAufbau?, HoeheAufbau?, MaterialAufbau?)
        /// </para>
        /// </summary>
        public virtual System.Boolean? Abdeckplatte {
            get {
                XElement x = this.GetElement(AbdeckplatteXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
            set {
                this.SetElement(AbdeckplatteXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Aufbauform?, Abdeckplatte?, Konus?, LaengeAufbau?, BreiteAufbau?, HoeheAufbau?, MaterialAufbau?)
        /// </para>
        /// </summary>
        public virtual System.Boolean? Konus {
            get {
                XElement x = this.GetElement(KonusXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
            set {
                this.SetElement(KonusXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Aufbauform?, Abdeckplatte?, Konus?, LaengeAufbau?, BreiteAufbau?, HoeheAufbau?, MaterialAufbau?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? LaengeAufbau {
            get {
                XElement x = this.GetElement(LaengeAufbauXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(LaengeAufbauXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                }
                else {
                    this.SetElementWithValidation(LaengeAufbauXName, value, "LaengeAufbau", LaengeAufbauLocalType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Aufbauform?, Abdeckplatte?, Konus?, LaengeAufbau?, BreiteAufbau?, HoeheAufbau?, MaterialAufbau?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? BreiteAufbau {
            get {
                XElement x = this.GetElement(BreiteAufbauXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(BreiteAufbauXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                }
                else {
                    this.SetElementWithValidation(BreiteAufbauXName, value, "BreiteAufbau", BreiteAufbauLocalType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Aufbauform?, Abdeckplatte?, Konus?, LaengeAufbau?, BreiteAufbau?, HoeheAufbau?, MaterialAufbau?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? HoeheAufbau {
            get {
                XElement x = this.GetElement(HoeheAufbauXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(HoeheAufbauXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                }
                else {
                    this.SetElementWithValidation(HoeheAufbauXName, value, "HoeheAufbau", HoeheAufbauLocalType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Aufbauform?, Abdeckplatte?, Konus?, LaengeAufbau?, BreiteAufbau?, HoeheAufbau?, MaterialAufbau?)
        /// </para>
        /// </summary>
        public virtual string MaterialAufbau {
            get {
                XElement x = this.GetElement(MaterialAufbauXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(MaterialAufbauXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                else {
                    this.SetElementWithValidation(MaterialAufbauXName, value, "MaterialAufbau", global::www.bfr.abwasser.de.MaterialType.TypeDefinition);
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<AufbauType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(AufbauformXName, typeof(string));
            localElementDictionary.Add(AbdeckplatteXName, typeof(bool));
            localElementDictionary.Add(KonusXName, typeof(bool));
            localElementDictionary.Add(LaengeAufbauXName, typeof(decimal));
            localElementDictionary.Add(BreiteAufbauXName, typeof(decimal));
            localElementDictionary.Add(HoeheAufbauXName, typeof(decimal));
            localElementDictionary.Add(MaterialAufbauXName, typeof(string));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        private class LaengeAufbauLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(3200)), null, 2, 0, 100m, null, 0, null, null, 0, null, 4, XmlSchemaWhiteSpace.Collapse));
            
            private LaengeAufbauLocalType() {
            }
        }
        
        private class BreiteAufbauLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(3200)), null, 2, 0, 100m, null, 0, null, null, 0, null, 4, XmlSchemaWhiteSpace.Collapse));
            
            private BreiteAufbauLocalType() {
            }
        }
        
        private class HoeheAufbauLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(3200)), null, 2, 0, 100m, null, 0, null, null, 0, null, 4, XmlSchemaWhiteSpace.Collapse));
            
            private HoeheAufbauLocalType() {
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (UntereSchachtzoneForm?, Uebergangsplatte?, Konus?, LaengeUnten?, BreiteUnten?, HoeheUnten?, MaterialUnten?, Podest?)
    /// </para>
    /// </summary>
    public partial class UntereSchachtzoneType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName UntereSchachtzoneFormXName = System.Xml.Linq.XName.Get("UntereSchachtzoneForm", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName UebergangsplatteXName = System.Xml.Linq.XName.Get("Uebergangsplatte", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName KonusXName = System.Xml.Linq.XName.Get("Konus", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName LaengeUntenXName = System.Xml.Linq.XName.Get("LaengeUnten", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName BreiteUntenXName = System.Xml.Linq.XName.Get("BreiteUnten", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName HoeheUntenXName = System.Xml.Linq.XName.Get("HoeheUnten", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName MaterialUntenXName = System.Xml.Linq.XName.Get("MaterialUnten", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName PodestXName = System.Xml.Linq.XName.Get("Podest", "http://www.bfr-abwasser.de");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("UntereSchachtzoneType", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator UntereSchachtzoneType(XElement xe) { return XTypedServices.ToXTypedElement<UntereSchachtzoneType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static UntereSchachtzoneType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(UntereSchachtzoneFormXName), new NamedContentModelEntity(UebergangsplatteXName), new NamedContentModelEntity(KonusXName), new NamedContentModelEntity(LaengeUntenXName), new NamedContentModelEntity(BreiteUntenXName), new NamedContentModelEntity(HoeheUntenXName), new NamedContentModelEntity(MaterialUntenXName), new NamedContentModelEntity(PodestXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (UntereSchachtzoneForm?, Uebergangsplatte?, Konus?, LaengeUnten?, BreiteUnten?, HoeheUnten?, MaterialUnten?, Podest?)
        /// </para>
        /// </summary>
        public UntereSchachtzoneType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (UntereSchachtzoneForm?, Uebergangsplatte?, Konus?, LaengeUnten?, BreiteUnten?, HoeheUnten?, MaterialUnten?, Podest?)
        /// </para>
        /// </summary>
        public virtual string UntereSchachtzoneForm {
            get {
                XElement x = this.GetElement(UntereSchachtzoneFormXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(UntereSchachtzoneFormXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                else {
                    this.SetElementWithValidation(UntereSchachtzoneFormXName, value, "UntereSchachtzoneForm", global::www.bfr.abwasser.de.UnterteilformType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (UntereSchachtzoneForm?, Uebergangsplatte?, Konus?, LaengeUnten?, BreiteUnten?, HoeheUnten?, MaterialUnten?, Podest?)
        /// </para>
        /// </summary>
        public virtual System.Boolean? Uebergangsplatte {
            get {
                XElement x = this.GetElement(UebergangsplatteXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
            set {
                this.SetElement(UebergangsplatteXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (UntereSchachtzoneForm?, Uebergangsplatte?, Konus?, LaengeUnten?, BreiteUnten?, HoeheUnten?, MaterialUnten?, Podest?)
        /// </para>
        /// </summary>
        public virtual System.Boolean? Konus {
            get {
                XElement x = this.GetElement(KonusXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
            set {
                this.SetElement(KonusXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (UntereSchachtzoneForm?, Uebergangsplatte?, Konus?, LaengeUnten?, BreiteUnten?, HoeheUnten?, MaterialUnten?, Podest?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? LaengeUnten {
            get {
                XElement x = this.GetElement(LaengeUntenXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(LaengeUntenXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                }
                else {
                    this.SetElementWithValidation(LaengeUntenXName, value, "LaengeUnten", LaengeUntenLocalType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (UntereSchachtzoneForm?, Uebergangsplatte?, Konus?, LaengeUnten?, BreiteUnten?, HoeheUnten?, MaterialUnten?, Podest?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? BreiteUnten {
            get {
                XElement x = this.GetElement(BreiteUntenXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(BreiteUntenXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                }
                else {
                    this.SetElementWithValidation(BreiteUntenXName, value, "BreiteUnten", BreiteUntenLocalType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (UntereSchachtzoneForm?, Uebergangsplatte?, Konus?, LaengeUnten?, BreiteUnten?, HoeheUnten?, MaterialUnten?, Podest?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? HoeheUnten {
            get {
                XElement x = this.GetElement(HoeheUntenXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(HoeheUntenXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                }
                else {
                    this.SetElementWithValidation(HoeheUntenXName, value, "HoeheUnten", HoeheUntenLocalType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (UntereSchachtzoneForm?, Uebergangsplatte?, Konus?, LaengeUnten?, BreiteUnten?, HoeheUnten?, MaterialUnten?, Podest?)
        /// </para>
        /// </summary>
        public virtual string MaterialUnten {
            get {
                XElement x = this.GetElement(MaterialUntenXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(MaterialUntenXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                else {
                    this.SetElementWithValidation(MaterialUntenXName, value, "MaterialUnten", global::www.bfr.abwasser.de.MaterialType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (UntereSchachtzoneForm?, Uebergangsplatte?, Konus?, LaengeUnten?, BreiteUnten?, HoeheUnten?, MaterialUnten?, Podest?)
        /// </para>
        /// </summary>
        public virtual System.Boolean? Podest {
            get {
                XElement x = this.GetElement(PodestXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
            set {
                this.SetElement(PodestXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<UntereSchachtzoneType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(UntereSchachtzoneFormXName, typeof(string));
            localElementDictionary.Add(UebergangsplatteXName, typeof(bool));
            localElementDictionary.Add(KonusXName, typeof(bool));
            localElementDictionary.Add(LaengeUntenXName, typeof(decimal));
            localElementDictionary.Add(BreiteUntenXName, typeof(decimal));
            localElementDictionary.Add(HoeheUntenXName, typeof(decimal));
            localElementDictionary.Add(MaterialUntenXName, typeof(string));
            localElementDictionary.Add(PodestXName, typeof(bool));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        private class LaengeUntenLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(3200)), null, 2, 0, 100m, null, 0, null, null, 0, null, 4, XmlSchemaWhiteSpace.Collapse));
            
            private LaengeUntenLocalType() {
            }
        }
        
        private class BreiteUntenLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(3200)), null, 2, 0, 100m, null, 0, null, null, 0, null, 4, XmlSchemaWhiteSpace.Collapse));
            
            private BreiteUntenLocalType() {
            }
        }
        
        private class HoeheUntenLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(3200)), null, 2, 0, 100m, null, 0, null, null, 0, null, 4, XmlSchemaWhiteSpace.Collapse));
            
            private HoeheUntenLocalType() {
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Unterteilform?, LaengeUnterteil?, BreiteUnterteil?, HoeheUnterteil?, MaterialUnterteil?, Gerinneform?, MaterialGerinne?)
    /// </para>
    /// </summary>
    public partial class UnterteilType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName UnterteilformXName = System.Xml.Linq.XName.Get("Unterteilform", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName LaengeUnterteilXName = System.Xml.Linq.XName.Get("LaengeUnterteil", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName BreiteUnterteilXName = System.Xml.Linq.XName.Get("BreiteUnterteil", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName HoeheUnterteilXName = System.Xml.Linq.XName.Get("HoeheUnterteil", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName MaterialUnterteilXName = System.Xml.Linq.XName.Get("MaterialUnterteil", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName GerinneformXName = System.Xml.Linq.XName.Get("Gerinneform", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName MaterialGerinneXName = System.Xml.Linq.XName.Get("MaterialGerinne", "http://www.bfr-abwasser.de");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("UnterteilType", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator UnterteilType(XElement xe) { return XTypedServices.ToXTypedElement<UnterteilType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static UnterteilType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(UnterteilformXName), new NamedContentModelEntity(LaengeUnterteilXName), new NamedContentModelEntity(BreiteUnterteilXName), new NamedContentModelEntity(HoeheUnterteilXName), new NamedContentModelEntity(MaterialUnterteilXName), new NamedContentModelEntity(GerinneformXName), new NamedContentModelEntity(MaterialGerinneXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Unterteilform?, LaengeUnterteil?, BreiteUnterteil?, HoeheUnterteil?, MaterialUnterteil?, Gerinneform?, MaterialGerinne?)
        /// </para>
        /// </summary>
        public UnterteilType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Unterteilform?, LaengeUnterteil?, BreiteUnterteil?, HoeheUnterteil?, MaterialUnterteil?, Gerinneform?, MaterialGerinne?)
        /// </para>
        /// </summary>
        public virtual string Unterteilform {
            get {
                XElement x = this.GetElement(UnterteilformXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(UnterteilformXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                else {
                    this.SetElementWithValidation(UnterteilformXName, value, "Unterteilform", global::www.bfr.abwasser.de.UnterteilformType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Unterteilform?, LaengeUnterteil?, BreiteUnterteil?, HoeheUnterteil?, MaterialUnterteil?, Gerinneform?, MaterialGerinne?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? LaengeUnterteil {
            get {
                XElement x = this.GetElement(LaengeUnterteilXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(LaengeUnterteilXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                }
                else {
                    this.SetElementWithValidation(LaengeUnterteilXName, value, "LaengeUnterteil", LaengeUnterteilLocalType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Unterteilform?, LaengeUnterteil?, BreiteUnterteil?, HoeheUnterteil?, MaterialUnterteil?, Gerinneform?, MaterialGerinne?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? BreiteUnterteil {
            get {
                XElement x = this.GetElement(BreiteUnterteilXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(BreiteUnterteilXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                }
                else {
                    this.SetElementWithValidation(BreiteUnterteilXName, value, "BreiteUnterteil", BreiteUnterteilLocalType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Unterteilform?, LaengeUnterteil?, BreiteUnterteil?, HoeheUnterteil?, MaterialUnterteil?, Gerinneform?, MaterialGerinne?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? HoeheUnterteil {
            get {
                XElement x = this.GetElement(HoeheUnterteilXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(HoeheUnterteilXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                }
                else {
                    this.SetElementWithValidation(HoeheUnterteilXName, value, "HoeheUnterteil", HoeheUnterteilLocalType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Unterteilform?, LaengeUnterteil?, BreiteUnterteil?, HoeheUnterteil?, MaterialUnterteil?, Gerinneform?, MaterialGerinne?)
        /// </para>
        /// </summary>
        public virtual string MaterialUnterteil {
            get {
                XElement x = this.GetElement(MaterialUnterteilXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(MaterialUnterteilXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                else {
                    this.SetElementWithValidation(MaterialUnterteilXName, value, "MaterialUnterteil", global::www.bfr.abwasser.de.MaterialType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Unterteilform?, LaengeUnterteil?, BreiteUnterteil?, HoeheUnterteil?, MaterialUnterteil?, Gerinneform?, MaterialGerinne?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? Gerinneform {
            get {
                XElement x = this.GetElement(GerinneformXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(GerinneformXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                }
                else {
                    this.SetElementWithValidation(GerinneformXName, value, "Gerinneform", global::www.bfr.abwasser.de.GerinneformType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Unterteilform?, LaengeUnterteil?, BreiteUnterteil?, HoeheUnterteil?, MaterialUnterteil?, Gerinneform?, MaterialGerinne?)
        /// </para>
        /// </summary>
        public virtual string MaterialGerinne {
            get {
                XElement x = this.GetElement(MaterialGerinneXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(MaterialGerinneXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                else {
                    this.SetElementWithValidation(MaterialGerinneXName, value, "MaterialGerinne", global::www.bfr.abwasser.de.MaterialType.TypeDefinition);
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<UnterteilType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(UnterteilformXName, typeof(string));
            localElementDictionary.Add(LaengeUnterteilXName, typeof(decimal));
            localElementDictionary.Add(BreiteUnterteilXName, typeof(decimal));
            localElementDictionary.Add(HoeheUnterteilXName, typeof(decimal));
            localElementDictionary.Add(MaterialUnterteilXName, typeof(string));
            localElementDictionary.Add(GerinneformXName, typeof(decimal));
            localElementDictionary.Add(MaterialGerinneXName, typeof(string));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        private class LaengeUnterteilLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(3200)), null, 2, 0, 100m, null, 0, null, null, 0, null, 4, XmlSchemaWhiteSpace.Collapse));
            
            private LaengeUnterteilLocalType() {
            }
        }
        
        private class BreiteUnterteilLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(3200)), null, 2, 0, 100m, null, 0, null, null, 0, null, 4, XmlSchemaWhiteSpace.Collapse));
            
            private BreiteUnterteilLocalType() {
            }
        }
        
        private class HoeheUnterteilLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(3200)), null, 2, 0, 100m, null, 0, null, null, 0, null, 4, XmlSchemaWhiteSpace.Collapse));
            
            private HoeheUnterteilLocalType() {
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Punktkennung, Uebergabepunkt?, Anschlussdaten?)
    /// </para>
    /// </summary>
    public partial class AnschlusspunktType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName PunktkennungXName = System.Xml.Linq.XName.Get("Punktkennung", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName UebergabepunktXName = System.Xml.Linq.XName.Get("Uebergabepunkt", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName AnschlussdatenXName = System.Xml.Linq.XName.Get("Anschlussdaten", "http://www.bfr-abwasser.de");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("AnschlusspunktType", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator AnschlusspunktType(XElement xe) { return XTypedServices.ToXTypedElement<AnschlusspunktType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static AnschlusspunktType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(PunktkennungXName), new NamedContentModelEntity(UebergabepunktXName), new NamedContentModelEntity(AnschlussdatenXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Punktkennung, Uebergabepunkt?, Anschlussdaten?)
        /// </para>
        /// </summary>
        public AnschlusspunktType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (Punktkennung, Uebergabepunkt?, Anschlussdaten?)
        /// </para>
        /// </summary>
        public virtual string Punktkennung {
            get {
                XElement x = this.GetElement(PunktkennungXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(PunktkennungXName, value, "Punktkennung", global::www.bfr.abwasser.de.PunktkennungType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Punktkennung, Uebergabepunkt?, Anschlussdaten?)
        /// </para>
        /// </summary>
        public virtual System.Boolean? Uebergabepunkt {
            get {
                XElement x = this.GetElement(UebergabepunktXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
            set {
                this.SetElement(UebergabepunktXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Punktkennung, Uebergabepunkt?, Anschlussdaten?)
        /// </para>
        /// </summary>
        public virtual StammAnschlussType Anschlussdaten {
            get {
                XElement x = this.GetElement(AnschlussdatenXName);
                return ((StammAnschlussType)(x));
            }
            set {
                this.SetElement(AnschlussdatenXName, value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<AnschlusspunktType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(PunktkennungXName, typeof(string));
            localElementDictionary.Add(UebergabepunktXName, typeof(bool));
            localElementDictionary.Add(AnschlussdatenXName, typeof(StammAnschlussType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Bauwerkstyp, Hersteller_Typ?, AdresseHersteller?, UFIS_Baunummer?, Uebergabebauwerk?, Kommentar?, (Pumpwerk | Becken | Behandlungsanlage | Klaeranlage | Auslaufbauwerk | Pumpe | Wehr_Ueberlauf | Drossel | Schieber | Rechen | Sieb | Versickerungsanlage | Zisterne | Einlaufbauwerk))
    /// </para>
    /// </summary>
    public partial class BauwerkType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName BauwerkstypXName = System.Xml.Linq.XName.Get("Bauwerkstyp", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName Hersteller_TypXName = System.Xml.Linq.XName.Get("Hersteller_Typ", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName AdresseHerstellerXName = System.Xml.Linq.XName.Get("AdresseHersteller", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName UFIS_BaunummerXName = System.Xml.Linq.XName.Get("UFIS_Baunummer", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName UebergabebauwerkXName = System.Xml.Linq.XName.Get("Uebergabebauwerk", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName KommentarXName = System.Xml.Linq.XName.Get("Kommentar", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName PumpwerkXName = System.Xml.Linq.XName.Get("Pumpwerk", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName BeckenXName = System.Xml.Linq.XName.Get("Becken", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName BehandlungsanlageXName = System.Xml.Linq.XName.Get("Behandlungsanlage", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName KlaeranlageXName = System.Xml.Linq.XName.Get("Klaeranlage", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName AuslaufbauwerkXName = System.Xml.Linq.XName.Get("Auslaufbauwerk", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName PumpeXName = System.Xml.Linq.XName.Get("Pumpe", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName Wehr_UeberlaufXName = System.Xml.Linq.XName.Get("Wehr_Ueberlauf", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName DrosselXName = System.Xml.Linq.XName.Get("Drossel", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName SchieberXName = System.Xml.Linq.XName.Get("Schieber", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName RechenXName = System.Xml.Linq.XName.Get("Rechen", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName SiebXName = System.Xml.Linq.XName.Get("Sieb", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName VersickerungsanlageXName = System.Xml.Linq.XName.Get("Versickerungsanlage", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ZisterneXName = System.Xml.Linq.XName.Get("Zisterne", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName EinlaufbauwerkXName = System.Xml.Linq.XName.Get("Einlaufbauwerk", "http://www.bfr-abwasser.de");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("BauwerkType", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator BauwerkType(XElement xe) { return XTypedServices.ToXTypedElement<BauwerkType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static BauwerkType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(BauwerkstypXName), new NamedContentModelEntity(Hersteller_TypXName), new NamedContentModelEntity(AdresseHerstellerXName), new NamedContentModelEntity(UFIS_BaunummerXName), new NamedContentModelEntity(UebergabebauwerkXName), new NamedContentModelEntity(KommentarXName), new ChoiceContentModelEntity(new NamedContentModelEntity(PumpwerkXName), new NamedContentModelEntity(BeckenXName), new NamedContentModelEntity(BehandlungsanlageXName), new NamedContentModelEntity(KlaeranlageXName), new NamedContentModelEntity(AuslaufbauwerkXName), new NamedContentModelEntity(PumpeXName), new NamedContentModelEntity(Wehr_UeberlaufXName), new NamedContentModelEntity(DrosselXName), new NamedContentModelEntity(SchieberXName), new NamedContentModelEntity(RechenXName), new NamedContentModelEntity(SiebXName), new NamedContentModelEntity(VersickerungsanlageXName), new NamedContentModelEntity(ZisterneXName), new NamedContentModelEntity(EinlaufbauwerkXName)));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Bauwerkstyp, Hersteller_Typ?, AdresseHersteller?, UFIS_Baunummer?, Uebergabebauwerk?, Kommentar?, (Pumpwerk | Becken | Behandlungsanlage | Klaeranlage | Auslaufbauwerk | Pumpe | Wehr_Ueberlauf | Drossel | Schieber | Rechen | Sieb | Versickerungsanlage | Zisterne | Einlaufbauwerk))
        /// </para>
        /// </summary>
        public BauwerkType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (Bauwerkstyp, Hersteller_Typ?, AdresseHersteller?, UFIS_Baunummer?, Uebergabebauwerk?, Kommentar?, (Pumpwerk | Becken | Behandlungsanlage | Klaeranlage | Auslaufbauwerk | Pumpe | Wehr_Ueberlauf | Drossel | Schieber | Rechen | Sieb | Versickerungsanlage | Zisterne | Einlaufbauwerk))
        /// </para>
        /// </summary>
        public virtual decimal Bauwerkstyp {
            get {
                XElement x = this.GetElement(BauwerkstypXName);
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                this.SetElementWithValidation(BauwerkstypXName, value, "Bauwerkstyp", global::www.bfr.abwasser.de.BauwerkstypType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Bauwerkstyp, Hersteller_Typ?, AdresseHersteller?, UFIS_Baunummer?, Uebergabebauwerk?, Kommentar?, (Pumpwerk | Becken | Behandlungsanlage | Klaeranlage | Auslaufbauwerk | Pumpe | Wehr_Ueberlauf | Drossel | Schieber | Rechen | Sieb | Versickerungsanlage | Zisterne | Einlaufbauwerk))
        /// </para>
        /// </summary>
        public virtual string Hersteller_Typ {
            get {
                XElement x = this.GetElement(Hersteller_TypXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(Hersteller_TypXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                else {
                    this.SetElementWithValidation(Hersteller_TypXName, value, "Hersteller_Typ", Hersteller_TypLocalType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Bauwerkstyp, Hersteller_Typ?, AdresseHersteller?, UFIS_Baunummer?, Uebergabebauwerk?, Kommentar?, (Pumpwerk | Becken | Behandlungsanlage | Klaeranlage | Auslaufbauwerk | Pumpe | Wehr_Ueberlauf | Drossel | Schieber | Rechen | Sieb | Versickerungsanlage | Zisterne | Einlaufbauwerk))
        /// </para>
        /// </summary>
        public virtual string AdresseHersteller {
            get {
                XElement x = this.GetElement(AdresseHerstellerXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(AdresseHerstellerXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                else {
                    this.SetElementWithValidation(AdresseHerstellerXName, value, "AdresseHersteller", AdresseHerstellerLocalType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Bauwerkstyp, Hersteller_Typ?, AdresseHersteller?, UFIS_Baunummer?, Uebergabebauwerk?, Kommentar?, (Pumpwerk | Becken | Behandlungsanlage | Klaeranlage | Auslaufbauwerk | Pumpe | Wehr_Ueberlauf | Drossel | Schieber | Rechen | Sieb | Versickerungsanlage | Zisterne | Einlaufbauwerk))
        /// </para>
        /// </summary>
        public virtual System.Decimal? UFIS_Baunummer {
            get {
                XElement x = this.GetElement(UFIS_BaunummerXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(UFIS_BaunummerXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                }
                else {
                    this.SetElementWithValidation(UFIS_BaunummerXName, value, "UFIS_Baunummer", UFIS_BaunummerLocalType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Bauwerkstyp, Hersteller_Typ?, AdresseHersteller?, UFIS_Baunummer?, Uebergabebauwerk?, Kommentar?, (Pumpwerk | Becken | Behandlungsanlage | Klaeranlage | Auslaufbauwerk | Pumpe | Wehr_Ueberlauf | Drossel | Schieber | Rechen | Sieb | Versickerungsanlage | Zisterne | Einlaufbauwerk))
        /// </para>
        /// </summary>
        public virtual System.Boolean? Uebergabebauwerk {
            get {
                XElement x = this.GetElement(UebergabebauwerkXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
            set {
                this.SetElement(UebergabebauwerkXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Bauwerkstyp, Hersteller_Typ?, AdresseHersteller?, UFIS_Baunummer?, Uebergabebauwerk?, Kommentar?, (Pumpwerk | Becken | Behandlungsanlage | Klaeranlage | Auslaufbauwerk | Pumpe | Wehr_Ueberlauf | Drossel | Schieber | Rechen | Sieb | Versickerungsanlage | Zisterne | Einlaufbauwerk))
        /// </para>
        /// </summary>
        public virtual string Kommentar {
            get {
                XElement x = this.GetElement(KommentarXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
            set {
                this.SetElement(KommentarXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (Bauwerkstyp, Hersteller_Typ?, AdresseHersteller?, UFIS_Baunummer?, Uebergabebauwerk?, Kommentar?, (Pumpwerk | Becken | Behandlungsanlage | Klaeranlage | Auslaufbauwerk | Pumpe | Wehr_Ueberlauf | Drossel | Schieber | Rechen | Sieb | Versickerungsanlage | Zisterne | Einlaufbauwerk))
        /// </para>
        /// </summary>
        public virtual PumpwerkType Pumpwerk {
            get {
                XElement x = this.GetElement(PumpwerkXName);
                return ((PumpwerkType)(x));
            }
            set {
                this.SetElement(PumpwerkXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (Bauwerkstyp, Hersteller_Typ?, AdresseHersteller?, UFIS_Baunummer?, Uebergabebauwerk?, Kommentar?, (Pumpwerk | Becken | Behandlungsanlage | Klaeranlage | Auslaufbauwerk | Pumpe | Wehr_Ueberlauf | Drossel | Schieber | Rechen | Sieb | Versickerungsanlage | Zisterne | Einlaufbauwerk))
        /// </para>
        /// </summary>
        public virtual BeckenType Becken {
            get {
                XElement x = this.GetElement(BeckenXName);
                return ((BeckenType)(x));
            }
            set {
                this.SetElement(BeckenXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (Bauwerkstyp, Hersteller_Typ?, AdresseHersteller?, UFIS_Baunummer?, Uebergabebauwerk?, Kommentar?, (Pumpwerk | Becken | Behandlungsanlage | Klaeranlage | Auslaufbauwerk | Pumpe | Wehr_Ueberlauf | Drossel | Schieber | Rechen | Sieb | Versickerungsanlage | Zisterne | Einlaufbauwerk))
        /// </para>
        /// </summary>
        public virtual BehandlungsanlageType Behandlungsanlage {
            get {
                XElement x = this.GetElement(BehandlungsanlageXName);
                return ((BehandlungsanlageType)(x));
            }
            set {
                this.SetElement(BehandlungsanlageXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (Bauwerkstyp, Hersteller_Typ?, AdresseHersteller?, UFIS_Baunummer?, Uebergabebauwerk?, Kommentar?, (Pumpwerk | Becken | Behandlungsanlage | Klaeranlage | Auslaufbauwerk | Pumpe | Wehr_Ueberlauf | Drossel | Schieber | Rechen | Sieb | Versickerungsanlage | Zisterne | Einlaufbauwerk))
        /// </para>
        /// </summary>
        public virtual KlaeranlageType Klaeranlage {
            get {
                XElement x = this.GetElement(KlaeranlageXName);
                return ((KlaeranlageType)(x));
            }
            set {
                this.SetElement(KlaeranlageXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (Bauwerkstyp, Hersteller_Typ?, AdresseHersteller?, UFIS_Baunummer?, Uebergabebauwerk?, Kommentar?, (Pumpwerk | Becken | Behandlungsanlage | Klaeranlage | Auslaufbauwerk | Pumpe | Wehr_Ueberlauf | Drossel | Schieber | Rechen | Sieb | Versickerungsanlage | Zisterne | Einlaufbauwerk))
        /// </para>
        /// </summary>
        public virtual AuslaufbauwerkType Auslaufbauwerk {
            get {
                XElement x = this.GetElement(AuslaufbauwerkXName);
                return ((AuslaufbauwerkType)(x));
            }
            set {
                this.SetElement(AuslaufbauwerkXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (Bauwerkstyp, Hersteller_Typ?, AdresseHersteller?, UFIS_Baunummer?, Uebergabebauwerk?, Kommentar?, (Pumpwerk | Becken | Behandlungsanlage | Klaeranlage | Auslaufbauwerk | Pumpe | Wehr_Ueberlauf | Drossel | Schieber | Rechen | Sieb | Versickerungsanlage | Zisterne | Einlaufbauwerk))
        /// </para>
        /// </summary>
        public virtual PumpeType Pumpe {
            get {
                XElement x = this.GetElement(PumpeXName);
                return ((PumpeType)(x));
            }
            set {
                this.SetElement(PumpeXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (Bauwerkstyp, Hersteller_Typ?, AdresseHersteller?, UFIS_Baunummer?, Uebergabebauwerk?, Kommentar?, (Pumpwerk | Becken | Behandlungsanlage | Klaeranlage | Auslaufbauwerk | Pumpe | Wehr_Ueberlauf | Drossel | Schieber | Rechen | Sieb | Versickerungsanlage | Zisterne | Einlaufbauwerk))
        /// </para>
        /// </summary>
        public virtual WehrUeberlaufType Wehr_Ueberlauf {
            get {
                XElement x = this.GetElement(Wehr_UeberlaufXName);
                return ((WehrUeberlaufType)(x));
            }
            set {
                this.SetElement(Wehr_UeberlaufXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (Bauwerkstyp, Hersteller_Typ?, AdresseHersteller?, UFIS_Baunummer?, Uebergabebauwerk?, Kommentar?, (Pumpwerk | Becken | Behandlungsanlage | Klaeranlage | Auslaufbauwerk | Pumpe | Wehr_Ueberlauf | Drossel | Schieber | Rechen | Sieb | Versickerungsanlage | Zisterne | Einlaufbauwerk))
        /// </para>
        /// </summary>
        public virtual DrosselType Drossel {
            get {
                XElement x = this.GetElement(DrosselXName);
                return ((DrosselType)(x));
            }
            set {
                this.SetElement(DrosselXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (Bauwerkstyp, Hersteller_Typ?, AdresseHersteller?, UFIS_Baunummer?, Uebergabebauwerk?, Kommentar?, (Pumpwerk | Becken | Behandlungsanlage | Klaeranlage | Auslaufbauwerk | Pumpe | Wehr_Ueberlauf | Drossel | Schieber | Rechen | Sieb | Versickerungsanlage | Zisterne | Einlaufbauwerk))
        /// </para>
        /// </summary>
        public virtual SchieberType Schieber {
            get {
                XElement x = this.GetElement(SchieberXName);
                return ((SchieberType)(x));
            }
            set {
                this.SetElement(SchieberXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (Bauwerkstyp, Hersteller_Typ?, AdresseHersteller?, UFIS_Baunummer?, Uebergabebauwerk?, Kommentar?, (Pumpwerk | Becken | Behandlungsanlage | Klaeranlage | Auslaufbauwerk | Pumpe | Wehr_Ueberlauf | Drossel | Schieber | Rechen | Sieb | Versickerungsanlage | Zisterne | Einlaufbauwerk))
        /// </para>
        /// </summary>
        public virtual RechenType Rechen {
            get {
                XElement x = this.GetElement(RechenXName);
                return ((RechenType)(x));
            }
            set {
                this.SetElement(RechenXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (Bauwerkstyp, Hersteller_Typ?, AdresseHersteller?, UFIS_Baunummer?, Uebergabebauwerk?, Kommentar?, (Pumpwerk | Becken | Behandlungsanlage | Klaeranlage | Auslaufbauwerk | Pumpe | Wehr_Ueberlauf | Drossel | Schieber | Rechen | Sieb | Versickerungsanlage | Zisterne | Einlaufbauwerk))
        /// </para>
        /// </summary>
        public virtual SiebType Sieb {
            get {
                XElement x = this.GetElement(SiebXName);
                return ((SiebType)(x));
            }
            set {
                this.SetElement(SiebXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (Bauwerkstyp, Hersteller_Typ?, AdresseHersteller?, UFIS_Baunummer?, Uebergabebauwerk?, Kommentar?, (Pumpwerk | Becken | Behandlungsanlage | Klaeranlage | Auslaufbauwerk | Pumpe | Wehr_Ueberlauf | Drossel | Schieber | Rechen | Sieb | Versickerungsanlage | Zisterne | Einlaufbauwerk))
        /// </para>
        /// </summary>
        public virtual VersickerungsanlageType Versickerungsanlage {
            get {
                XElement x = this.GetElement(VersickerungsanlageXName);
                return ((VersickerungsanlageType)(x));
            }
            set {
                this.SetElement(VersickerungsanlageXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (Bauwerkstyp, Hersteller_Typ?, AdresseHersteller?, UFIS_Baunummer?, Uebergabebauwerk?, Kommentar?, (Pumpwerk | Becken | Behandlungsanlage | Klaeranlage | Auslaufbauwerk | Pumpe | Wehr_Ueberlauf | Drossel | Schieber | Rechen | Sieb | Versickerungsanlage | Zisterne | Einlaufbauwerk))
        /// </para>
        /// </summary>
        public virtual ZisterneType Zisterne {
            get {
                XElement x = this.GetElement(ZisterneXName);
                return ((ZisterneType)(x));
            }
            set {
                this.SetElement(ZisterneXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (Bauwerkstyp, Hersteller_Typ?, AdresseHersteller?, UFIS_Baunummer?, Uebergabebauwerk?, Kommentar?, (Pumpwerk | Becken | Behandlungsanlage | Klaeranlage | Auslaufbauwerk | Pumpe | Wehr_Ueberlauf | Drossel | Schieber | Rechen | Sieb | Versickerungsanlage | Zisterne | Einlaufbauwerk))
        /// </para>
        /// </summary>
        public virtual EinlaufbauwerkType Einlaufbauwerk {
            get {
                XElement x = this.GetElement(EinlaufbauwerkXName);
                return ((EinlaufbauwerkType)(x));
            }
            set {
                this.SetElement(EinlaufbauwerkXName, value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<BauwerkType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(BauwerkstypXName, typeof(decimal));
            localElementDictionary.Add(Hersteller_TypXName, typeof(string));
            localElementDictionary.Add(AdresseHerstellerXName, typeof(string));
            localElementDictionary.Add(UFIS_BaunummerXName, typeof(decimal));
            localElementDictionary.Add(UebergabebauwerkXName, typeof(bool));
            localElementDictionary.Add(KommentarXName, typeof(string));
            localElementDictionary.Add(PumpwerkXName, typeof(PumpwerkType));
            localElementDictionary.Add(BeckenXName, typeof(BeckenType));
            localElementDictionary.Add(BehandlungsanlageXName, typeof(BehandlungsanlageType));
            localElementDictionary.Add(KlaeranlageXName, typeof(KlaeranlageType));
            localElementDictionary.Add(AuslaufbauwerkXName, typeof(AuslaufbauwerkType));
            localElementDictionary.Add(PumpeXName, typeof(PumpeType));
            localElementDictionary.Add(Wehr_UeberlaufXName, typeof(WehrUeberlaufType));
            localElementDictionary.Add(DrosselXName, typeof(DrosselType));
            localElementDictionary.Add(SchieberXName, typeof(SchieberType));
            localElementDictionary.Add(RechenXName, typeof(RechenType));
            localElementDictionary.Add(SiebXName, typeof(SiebType));
            localElementDictionary.Add(VersickerungsanlageXName, typeof(VersickerungsanlageType));
            localElementDictionary.Add(ZisterneXName, typeof(ZisterneType));
            localElementDictionary.Add(EinlaufbauwerkXName, typeof(EinlaufbauwerkType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        private class Hersteller_TypLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(4)), null, 0, 0, null, null, 60, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
            
            private Hersteller_TypLocalType() {
            }
        }
        
        private class AdresseHerstellerLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(4)), null, 0, 0, null, null, 60, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
            
            private AdresseHerstellerLocalType() {
            }
        }
        
        private class UFIS_BaunummerLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(1024)), null, 0, 0, null, null, 0, null, null, 0, null, 10, XmlSchemaWhiteSpace.Collapse));
            
            private UFIS_BaunummerLocalType() {
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Grundflaeche?, MaxLaenge?, MaxBreite?, MaxHoehe?, RaumHochbau?, RaumTiefbau?)
    /// </para>
    /// </summary>
    public partial class PumpwerkType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName GrundflaecheXName = System.Xml.Linq.XName.Get("Grundflaeche", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName MaxLaengeXName = System.Xml.Linq.XName.Get("MaxLaenge", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName MaxBreiteXName = System.Xml.Linq.XName.Get("MaxBreite", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName MaxHoeheXName = System.Xml.Linq.XName.Get("MaxHoehe", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName RaumHochbauXName = System.Xml.Linq.XName.Get("RaumHochbau", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName RaumTiefbauXName = System.Xml.Linq.XName.Get("RaumTiefbau", "http://www.bfr-abwasser.de");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("PumpwerkType", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator PumpwerkType(XElement xe) { return XTypedServices.ToXTypedElement<PumpwerkType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static PumpwerkType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(GrundflaecheXName), new NamedContentModelEntity(MaxLaengeXName), new NamedContentModelEntity(MaxBreiteXName), new NamedContentModelEntity(MaxHoeheXName), new NamedContentModelEntity(RaumHochbauXName), new NamedContentModelEntity(RaumTiefbauXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Grundflaeche?, MaxLaenge?, MaxBreite?, MaxHoehe?, RaumHochbau?, RaumTiefbau?)
        /// </para>
        /// </summary>
        public PumpwerkType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Grundflaeche?, MaxLaenge?, MaxBreite?, MaxHoehe?, RaumHochbau?, RaumTiefbau?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? Grundflaeche {
            get {
                XElement x = this.GetElement(GrundflaecheXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(GrundflaecheXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                }
                else {
                    this.SetElementWithValidation(GrundflaecheXName, value, "Grundflaeche", GrundflaecheLocalType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Grundflaeche?, MaxLaenge?, MaxBreite?, MaxHoehe?, RaumHochbau?, RaumTiefbau?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? MaxLaenge {
            get {
                XElement x = this.GetElement(MaxLaengeXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(MaxLaengeXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                }
                else {
                    this.SetElementWithValidation(MaxLaengeXName, value, "MaxLaenge", MaxLaengeLocalType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Grundflaeche?, MaxLaenge?, MaxBreite?, MaxHoehe?, RaumHochbau?, RaumTiefbau?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? MaxBreite {
            get {
                XElement x = this.GetElement(MaxBreiteXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(MaxBreiteXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                }
                else {
                    this.SetElementWithValidation(MaxBreiteXName, value, "MaxBreite", MaxBreiteLocalType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Grundflaeche?, MaxLaenge?, MaxBreite?, MaxHoehe?, RaumHochbau?, RaumTiefbau?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? MaxHoehe {
            get {
                XElement x = this.GetElement(MaxHoeheXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(MaxHoeheXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                }
                else {
                    this.SetElementWithValidation(MaxHoeheXName, value, "MaxHoehe", MaxHoeheLocalType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Grundflaeche?, MaxLaenge?, MaxBreite?, MaxHoehe?, RaumHochbau?, RaumTiefbau?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? RaumHochbau {
            get {
                XElement x = this.GetElement(RaumHochbauXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(RaumHochbauXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                }
                else {
                    this.SetElementWithValidation(RaumHochbauXName, value, "RaumHochbau", RaumHochbauLocalType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Grundflaeche?, MaxLaenge?, MaxBreite?, MaxHoehe?, RaumHochbau?, RaumTiefbau?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? RaumTiefbau {
            get {
                XElement x = this.GetElement(RaumTiefbauXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(RaumTiefbauXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                }
                else {
                    this.SetElementWithValidation(RaumTiefbauXName, value, "RaumTiefbau", RaumTiefbauLocalType.TypeDefinition);
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<PumpwerkType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(GrundflaecheXName, typeof(decimal));
            localElementDictionary.Add(MaxLaengeXName, typeof(decimal));
            localElementDictionary.Add(MaxBreiteXName, typeof(decimal));
            localElementDictionary.Add(MaxHoeheXName, typeof(decimal));
            localElementDictionary.Add(RaumHochbauXName, typeof(decimal));
            localElementDictionary.Add(RaumTiefbauXName, typeof(decimal));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        private class GrundflaecheLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(3200)), null, 3, 0, 1000000m, null, 0, null, null, 0, null, 9, XmlSchemaWhiteSpace.Collapse));
            
            private GrundflaecheLocalType() {
            }
        }
        
        private class MaxLaengeLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(3200)), null, 3, 0, 1000m, null, 0, null, null, 0, null, 6, XmlSchemaWhiteSpace.Collapse));
            
            private MaxLaengeLocalType() {
            }
        }
        
        private class MaxBreiteLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(3200)), null, 3, 0, 1000m, null, 0, null, null, 0, null, 6, XmlSchemaWhiteSpace.Collapse));
            
            private MaxBreiteLocalType() {
            }
        }
        
        private class MaxHoeheLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(3200)), null, 3, 0, 1000m, null, 0, null, null, 0, null, 6, XmlSchemaWhiteSpace.Collapse));
            
            private MaxHoeheLocalType() {
            }
        }
        
        private class RaumHochbauLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(3200)), null, 3, 0, 1000000m, null, 0, null, null, 0, null, 9, XmlSchemaWhiteSpace.Collapse));
            
            private RaumHochbauLocalType() {
            }
        }
        
        private class RaumTiefbauLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(3200)), null, 3, 0, 1000000m, null, 0, null, null, 0, null, 9, XmlSchemaWhiteSpace.Collapse));
            
            private RaumTiefbauLocalType() {
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (ArtAuslaufbauwerk?, Einleitungsart?, Schutzgitter?, Sohlsicherung?, Boeschungssicherung?, Material?, Neigung?, Laenge?, Breite?, Hoehe?)
    /// </para>
    /// </summary>
    public partial class AuslaufbauwerkType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ArtAuslaufbauwerkXName = System.Xml.Linq.XName.Get("ArtAuslaufbauwerk", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName EinleitungsartXName = System.Xml.Linq.XName.Get("Einleitungsart", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName SchutzgitterXName = System.Xml.Linq.XName.Get("Schutzgitter", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName SohlsicherungXName = System.Xml.Linq.XName.Get("Sohlsicherung", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName BoeschungssicherungXName = System.Xml.Linq.XName.Get("Boeschungssicherung", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName MaterialXName = System.Xml.Linq.XName.Get("Material", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName NeigungXName = System.Xml.Linq.XName.Get("Neigung", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName LaengeXName = System.Xml.Linq.XName.Get("Laenge", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName BreiteXName = System.Xml.Linq.XName.Get("Breite", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName HoeheXName = System.Xml.Linq.XName.Get("Hoehe", "http://www.bfr-abwasser.de");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("AuslaufbauwerkType", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator AuslaufbauwerkType(XElement xe) { return XTypedServices.ToXTypedElement<AuslaufbauwerkType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static AuslaufbauwerkType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(ArtAuslaufbauwerkXName), new NamedContentModelEntity(EinleitungsartXName), new NamedContentModelEntity(SchutzgitterXName), new NamedContentModelEntity(SohlsicherungXName), new NamedContentModelEntity(BoeschungssicherungXName), new NamedContentModelEntity(MaterialXName), new NamedContentModelEntity(NeigungXName), new NamedContentModelEntity(LaengeXName), new NamedContentModelEntity(BreiteXName), new NamedContentModelEntity(HoeheXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (ArtAuslaufbauwerk?, Einleitungsart?, Schutzgitter?, Sohlsicherung?, Boeschungssicherung?, Material?, Neigung?, Laenge?, Breite?, Hoehe?)
        /// </para>
        /// </summary>
        public AuslaufbauwerkType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (ArtAuslaufbauwerk?, Einleitungsart?, Schutzgitter?, Sohlsicherung?, Boeschungssicherung?, Material?, Neigung?, Laenge?, Breite?, Hoehe?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? ArtAuslaufbauwerk {
            get {
                XElement x = this.GetElement(ArtAuslaufbauwerkXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(ArtAuslaufbauwerkXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                }
                else {
                    this.SetElementWithValidation(ArtAuslaufbauwerkXName, value, "ArtAuslaufbauwerk", global::www.bfr.abwasser.de.ArtAuslaufbauwerkType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (ArtAuslaufbauwerk?, Einleitungsart?, Schutzgitter?, Sohlsicherung?, Boeschungssicherung?, Material?, Neigung?, Laenge?, Breite?, Hoehe?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? Einleitungsart {
            get {
                XElement x = this.GetElement(EinleitungsartXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(EinleitungsartXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                }
                else {
                    this.SetElementWithValidation(EinleitungsartXName, value, "Einleitungsart", global::www.bfr.abwasser.de.EinleitungsartType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (ArtAuslaufbauwerk?, Einleitungsart?, Schutzgitter?, Sohlsicherung?, Boeschungssicherung?, Material?, Neigung?, Laenge?, Breite?, Hoehe?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? Schutzgitter {
            get {
                XElement x = this.GetElement(SchutzgitterXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(SchutzgitterXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                }
                else {
                    this.SetElementWithValidation(SchutzgitterXName, value, "Schutzgitter", global::www.bfr.abwasser.de.SchutzgitterType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (ArtAuslaufbauwerk?, Einleitungsart?, Schutzgitter?, Sohlsicherung?, Boeschungssicherung?, Material?, Neigung?, Laenge?, Breite?, Hoehe?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? Sohlsicherung {
            get {
                XElement x = this.GetElement(SohlsicherungXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(SohlsicherungXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                }
                else {
                    this.SetElementWithValidation(SohlsicherungXName, value, "Sohlsicherung", global::www.bfr.abwasser.de.SicherungType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (ArtAuslaufbauwerk?, Einleitungsart?, Schutzgitter?, Sohlsicherung?, Boeschungssicherung?, Material?, Neigung?, Laenge?, Breite?, Hoehe?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? Boeschungssicherung {
            get {
                XElement x = this.GetElement(BoeschungssicherungXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(BoeschungssicherungXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                }
                else {
                    this.SetElementWithValidation(BoeschungssicherungXName, value, "Boeschungssicherung", global::www.bfr.abwasser.de.SicherungType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (ArtAuslaufbauwerk?, Einleitungsart?, Schutzgitter?, Sohlsicherung?, Boeschungssicherung?, Material?, Neigung?, Laenge?, Breite?, Hoehe?)
        /// </para>
        /// </summary>
        public virtual string Material {
            get {
                XElement x = this.GetElement(MaterialXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(MaterialXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                else {
                    this.SetElementWithValidation(MaterialXName, value, "Material", global::www.bfr.abwasser.de.MaterialType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (ArtAuslaufbauwerk?, Einleitungsart?, Schutzgitter?, Sohlsicherung?, Boeschungssicherung?, Material?, Neigung?, Laenge?, Breite?, Hoehe?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? Neigung {
            get {
                XElement x = this.GetElement(NeigungXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(NeigungXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                }
                else {
                    this.SetElementWithValidation(NeigungXName, value, "Neigung", NeigungLocalType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (ArtAuslaufbauwerk?, Einleitungsart?, Schutzgitter?, Sohlsicherung?, Boeschungssicherung?, Material?, Neigung?, Laenge?, Breite?, Hoehe?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? Laenge {
            get {
                XElement x = this.GetElement(LaengeXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(LaengeXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                }
                else {
                    this.SetElementWithValidation(LaengeXName, value, "Laenge", LaengeLocalType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (ArtAuslaufbauwerk?, Einleitungsart?, Schutzgitter?, Sohlsicherung?, Boeschungssicherung?, Material?, Neigung?, Laenge?, Breite?, Hoehe?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? Breite {
            get {
                XElement x = this.GetElement(BreiteXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(BreiteXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                }
                else {
                    this.SetElementWithValidation(BreiteXName, value, "Breite", BreiteLocalType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (ArtAuslaufbauwerk?, Einleitungsart?, Schutzgitter?, Sohlsicherung?, Boeschungssicherung?, Material?, Neigung?, Laenge?, Breite?, Hoehe?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? Hoehe {
            get {
                XElement x = this.GetElement(HoeheXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(HoeheXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                }
                else {
                    this.SetElementWithValidation(HoeheXName, value, "Hoehe", HoeheLocalType.TypeDefinition);
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<AuslaufbauwerkType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(ArtAuslaufbauwerkXName, typeof(decimal));
            localElementDictionary.Add(EinleitungsartXName, typeof(decimal));
            localElementDictionary.Add(SchutzgitterXName, typeof(decimal));
            localElementDictionary.Add(SohlsicherungXName, typeof(decimal));
            localElementDictionary.Add(BoeschungssicherungXName, typeof(decimal));
            localElementDictionary.Add(MaterialXName, typeof(string));
            localElementDictionary.Add(NeigungXName, typeof(decimal));
            localElementDictionary.Add(LaengeXName, typeof(decimal));
            localElementDictionary.Add(BreiteXName, typeof(decimal));
            localElementDictionary.Add(HoeheXName, typeof(decimal));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        private class NeigungLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(3200)), null, 2, 0, 1000m, null, 0, null, null, 0, null, 5, XmlSchemaWhiteSpace.Collapse));
            
            private NeigungLocalType() {
            }
        }
        
        private class LaengeLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(3200)), null, 2, 0, 1000m, null, 0, null, null, 0, null, 5, XmlSchemaWhiteSpace.Collapse));
            
            private LaengeLocalType() {
            }
        }
        
        private class BreiteLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(3200)), null, 2, 0, 1000m, null, 0, null, null, 0, null, 5, XmlSchemaWhiteSpace.Collapse));
            
            private BreiteLocalType() {
            }
        }
        
        private class HoeheLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(3200)), null, 2, 0, 1000m, null, 0, null, null, 0, null, 5, XmlSchemaWhiteSpace.Collapse));
            
            private HoeheLocalType() {
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (BeckenFunktion?, Beckenart?, Anordnung?, BeckenBauart?, BeckenForm?, BeckenAusfuehrung?, Grundflaeche?, MaxLaenge?, MaxBreite?, MaxHoehe?, Boeschungsneigung?, NutzVolumen?, RaumHochbau?, RaumTiefbau?, AnzahlZulaeufe?, AnzahlAblaeufe?, AnzahlKammern?, Filterschicht?, Filtermaterial?, Bepflanzung?)
    /// </para>
    /// </summary>
    public partial class BeckenType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName BeckenFunktionXName = System.Xml.Linq.XName.Get("BeckenFunktion", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName BeckenartXName = System.Xml.Linq.XName.Get("Beckenart", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName AnordnungXName = System.Xml.Linq.XName.Get("Anordnung", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName BeckenBauartXName = System.Xml.Linq.XName.Get("BeckenBauart", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName BeckenFormXName = System.Xml.Linq.XName.Get("BeckenForm", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName BeckenAusfuehrungXName = System.Xml.Linq.XName.Get("BeckenAusfuehrung", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName GrundflaecheXName = System.Xml.Linq.XName.Get("Grundflaeche", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName MaxLaengeXName = System.Xml.Linq.XName.Get("MaxLaenge", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName MaxBreiteXName = System.Xml.Linq.XName.Get("MaxBreite", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName MaxHoeheXName = System.Xml.Linq.XName.Get("MaxHoehe", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName BoeschungsneigungXName = System.Xml.Linq.XName.Get("Boeschungsneigung", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName NutzVolumenXName = System.Xml.Linq.XName.Get("NutzVolumen", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName RaumHochbauXName = System.Xml.Linq.XName.Get("RaumHochbau", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName RaumTiefbauXName = System.Xml.Linq.XName.Get("RaumTiefbau", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName AnzahlZulaeufeXName = System.Xml.Linq.XName.Get("AnzahlZulaeufe", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName AnzahlAblaeufeXName = System.Xml.Linq.XName.Get("AnzahlAblaeufe", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName AnzahlKammernXName = System.Xml.Linq.XName.Get("AnzahlKammern", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName FilterschichtXName = System.Xml.Linq.XName.Get("Filterschicht", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName FiltermaterialXName = System.Xml.Linq.XName.Get("Filtermaterial", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName BepflanzungXName = System.Xml.Linq.XName.Get("Bepflanzung", "http://www.bfr-abwasser.de");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("BeckenType", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator BeckenType(XElement xe) { return XTypedServices.ToXTypedElement<BeckenType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static BeckenType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(BeckenFunktionXName), new NamedContentModelEntity(BeckenartXName), new NamedContentModelEntity(AnordnungXName), new NamedContentModelEntity(BeckenBauartXName), new NamedContentModelEntity(BeckenFormXName), new NamedContentModelEntity(BeckenAusfuehrungXName), new NamedContentModelEntity(GrundflaecheXName), new NamedContentModelEntity(MaxLaengeXName), new NamedContentModelEntity(MaxBreiteXName), new NamedContentModelEntity(MaxHoeheXName), new NamedContentModelEntity(BoeschungsneigungXName), new NamedContentModelEntity(NutzVolumenXName), new NamedContentModelEntity(RaumHochbauXName), new NamedContentModelEntity(RaumTiefbauXName), new NamedContentModelEntity(AnzahlZulaeufeXName), new NamedContentModelEntity(AnzahlAblaeufeXName), new NamedContentModelEntity(AnzahlKammernXName), new NamedContentModelEntity(FilterschichtXName), new NamedContentModelEntity(FiltermaterialXName), new NamedContentModelEntity(BepflanzungXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (BeckenFunktion?, Beckenart?, Anordnung?, BeckenBauart?, BeckenForm?, BeckenAusfuehrung?, Grundflaeche?, MaxLaenge?, MaxBreite?, MaxHoehe?, Boeschungsneigung?, NutzVolumen?, RaumHochbau?, RaumTiefbau?, AnzahlZulaeufe?, AnzahlAblaeufe?, AnzahlKammern?, Filterschicht?, Filtermaterial?, Bepflanzung?)
        /// </para>
        /// </summary>
        public BeckenType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (BeckenFunktion?, Beckenart?, Anordnung?, BeckenBauart?, BeckenForm?, BeckenAusfuehrung?, Grundflaeche?, MaxLaenge?, MaxBreite?, MaxHoehe?, Boeschungsneigung?, NutzVolumen?, RaumHochbau?, RaumTiefbau?, AnzahlZulaeufe?, AnzahlAblaeufe?, AnzahlKammern?, Filterschicht?, Filtermaterial?, Bepflanzung?)
        /// </para>
        /// </summary>
        public virtual string BeckenFunktion {
            get {
                XElement x = this.GetElement(BeckenFunktionXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(BeckenFunktionXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                else {
                    this.SetElementWithValidation(BeckenFunktionXName, value, "BeckenFunktion", global::www.bfr.abwasser.de.BeckenFunktionType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (BeckenFunktion?, Beckenart?, Anordnung?, BeckenBauart?, BeckenForm?, BeckenAusfuehrung?, Grundflaeche?, MaxLaenge?, MaxBreite?, MaxHoehe?, Boeschungsneigung?, NutzVolumen?, RaumHochbau?, RaumTiefbau?, AnzahlZulaeufe?, AnzahlAblaeufe?, AnzahlKammern?, Filterschicht?, Filtermaterial?, Bepflanzung?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? Beckenart {
            get {
                XElement x = this.GetElement(BeckenartXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(BeckenartXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                }
                else {
                    this.SetElementWithValidation(BeckenartXName, value, "Beckenart", global::www.bfr.abwasser.de.BeckenartType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (BeckenFunktion?, Beckenart?, Anordnung?, BeckenBauart?, BeckenForm?, BeckenAusfuehrung?, Grundflaeche?, MaxLaenge?, MaxBreite?, MaxHoehe?, Boeschungsneigung?, NutzVolumen?, RaumHochbau?, RaumTiefbau?, AnzahlZulaeufe?, AnzahlAblaeufe?, AnzahlKammern?, Filterschicht?, Filtermaterial?, Bepflanzung?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? Anordnung {
            get {
                XElement x = this.GetElement(AnordnungXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(AnordnungXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                }
                else {
                    this.SetElementWithValidation(AnordnungXName, value, "Anordnung", global::www.bfr.abwasser.de.AnordnungType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (BeckenFunktion?, Beckenart?, Anordnung?, BeckenBauart?, BeckenForm?, BeckenAusfuehrung?, Grundflaeche?, MaxLaenge?, MaxBreite?, MaxHoehe?, Boeschungsneigung?, NutzVolumen?, RaumHochbau?, RaumTiefbau?, AnzahlZulaeufe?, AnzahlAblaeufe?, AnzahlKammern?, Filterschicht?, Filtermaterial?, Bepflanzung?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? BeckenBauart {
            get {
                XElement x = this.GetElement(BeckenBauartXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(BeckenBauartXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                }
                else {
                    this.SetElementWithValidation(BeckenBauartXName, value, "BeckenBauart", global::www.bfr.abwasser.de.BeckenBauartType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (BeckenFunktion?, Beckenart?, Anordnung?, BeckenBauart?, BeckenForm?, BeckenAusfuehrung?, Grundflaeche?, MaxLaenge?, MaxBreite?, MaxHoehe?, Boeschungsneigung?, NutzVolumen?, RaumHochbau?, RaumTiefbau?, AnzahlZulaeufe?, AnzahlAblaeufe?, AnzahlKammern?, Filterschicht?, Filtermaterial?, Bepflanzung?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? BeckenForm {
            get {
                XElement x = this.GetElement(BeckenFormXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(BeckenFormXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                }
                else {
                    this.SetElementWithValidation(BeckenFormXName, value, "BeckenForm", global::www.bfr.abwasser.de.BeckenFormType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (BeckenFunktion?, Beckenart?, Anordnung?, BeckenBauart?, BeckenForm?, BeckenAusfuehrung?, Grundflaeche?, MaxLaenge?, MaxBreite?, MaxHoehe?, Boeschungsneigung?, NutzVolumen?, RaumHochbau?, RaumTiefbau?, AnzahlZulaeufe?, AnzahlAblaeufe?, AnzahlKammern?, Filterschicht?, Filtermaterial?, Bepflanzung?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? BeckenAusfuehrung {
            get {
                XElement x = this.GetElement(BeckenAusfuehrungXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(BeckenAusfuehrungXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                }
                else {
                    this.SetElementWithValidation(BeckenAusfuehrungXName, value, "BeckenAusfuehrung", global::www.bfr.abwasser.de.BeckenAusfuehrungType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (BeckenFunktion?, Beckenart?, Anordnung?, BeckenBauart?, BeckenForm?, BeckenAusfuehrung?, Grundflaeche?, MaxLaenge?, MaxBreite?, MaxHoehe?, Boeschungsneigung?, NutzVolumen?, RaumHochbau?, RaumTiefbau?, AnzahlZulaeufe?, AnzahlAblaeufe?, AnzahlKammern?, Filterschicht?, Filtermaterial?, Bepflanzung?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? Grundflaeche {
            get {
                XElement x = this.GetElement(GrundflaecheXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(GrundflaecheXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                }
                else {
                    this.SetElementWithValidation(GrundflaecheXName, value, "Grundflaeche", GrundflaecheLocalType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (BeckenFunktion?, Beckenart?, Anordnung?, BeckenBauart?, BeckenForm?, BeckenAusfuehrung?, Grundflaeche?, MaxLaenge?, MaxBreite?, MaxHoehe?, Boeschungsneigung?, NutzVolumen?, RaumHochbau?, RaumTiefbau?, AnzahlZulaeufe?, AnzahlAblaeufe?, AnzahlKammern?, Filterschicht?, Filtermaterial?, Bepflanzung?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? MaxLaenge {
            get {
                XElement x = this.GetElement(MaxLaengeXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(MaxLaengeXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                }
                else {
                    this.SetElementWithValidation(MaxLaengeXName, value, "MaxLaenge", MaxLaengeLocalType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (BeckenFunktion?, Beckenart?, Anordnung?, BeckenBauart?, BeckenForm?, BeckenAusfuehrung?, Grundflaeche?, MaxLaenge?, MaxBreite?, MaxHoehe?, Boeschungsneigung?, NutzVolumen?, RaumHochbau?, RaumTiefbau?, AnzahlZulaeufe?, AnzahlAblaeufe?, AnzahlKammern?, Filterschicht?, Filtermaterial?, Bepflanzung?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? MaxBreite {
            get {
                XElement x = this.GetElement(MaxBreiteXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(MaxBreiteXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                }
                else {
                    this.SetElementWithValidation(MaxBreiteXName, value, "MaxBreite", MaxBreiteLocalType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (BeckenFunktion?, Beckenart?, Anordnung?, BeckenBauart?, BeckenForm?, BeckenAusfuehrung?, Grundflaeche?, MaxLaenge?, MaxBreite?, MaxHoehe?, Boeschungsneigung?, NutzVolumen?, RaumHochbau?, RaumTiefbau?, AnzahlZulaeufe?, AnzahlAblaeufe?, AnzahlKammern?, Filterschicht?, Filtermaterial?, Bepflanzung?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? MaxHoehe {
            get {
                XElement x = this.GetElement(MaxHoeheXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(MaxHoeheXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                }
                else {
                    this.SetElementWithValidation(MaxHoeheXName, value, "MaxHoehe", MaxHoeheLocalType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (BeckenFunktion?, Beckenart?, Anordnung?, BeckenBauart?, BeckenForm?, BeckenAusfuehrung?, Grundflaeche?, MaxLaenge?, MaxBreite?, MaxHoehe?, Boeschungsneigung?, NutzVolumen?, RaumHochbau?, RaumTiefbau?, AnzahlZulaeufe?, AnzahlAblaeufe?, AnzahlKammern?, Filterschicht?, Filtermaterial?, Bepflanzung?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? Boeschungsneigung {
            get {
                XElement x = this.GetElement(BoeschungsneigungXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(BoeschungsneigungXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                }
                else {
                    this.SetElementWithValidation(BoeschungsneigungXName, value, "Boeschungsneigung", BoeschungsneigungLocalType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (BeckenFunktion?, Beckenart?, Anordnung?, BeckenBauart?, BeckenForm?, BeckenAusfuehrung?, Grundflaeche?, MaxLaenge?, MaxBreite?, MaxHoehe?, Boeschungsneigung?, NutzVolumen?, RaumHochbau?, RaumTiefbau?, AnzahlZulaeufe?, AnzahlAblaeufe?, AnzahlKammern?, Filterschicht?, Filtermaterial?, Bepflanzung?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? NutzVolumen {
            get {
                XElement x = this.GetElement(NutzVolumenXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(NutzVolumenXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                }
                else {
                    this.SetElementWithValidation(NutzVolumenXName, value, "NutzVolumen", NutzVolumenLocalType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (BeckenFunktion?, Beckenart?, Anordnung?, BeckenBauart?, BeckenForm?, BeckenAusfuehrung?, Grundflaeche?, MaxLaenge?, MaxBreite?, MaxHoehe?, Boeschungsneigung?, NutzVolumen?, RaumHochbau?, RaumTiefbau?, AnzahlZulaeufe?, AnzahlAblaeufe?, AnzahlKammern?, Filterschicht?, Filtermaterial?, Bepflanzung?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? RaumHochbau {
            get {
                XElement x = this.GetElement(RaumHochbauXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(RaumHochbauXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                }
                else {
                    this.SetElementWithValidation(RaumHochbauXName, value, "RaumHochbau", RaumHochbauLocalType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (BeckenFunktion?, Beckenart?, Anordnung?, BeckenBauart?, BeckenForm?, BeckenAusfuehrung?, Grundflaeche?, MaxLaenge?, MaxBreite?, MaxHoehe?, Boeschungsneigung?, NutzVolumen?, RaumHochbau?, RaumTiefbau?, AnzahlZulaeufe?, AnzahlAblaeufe?, AnzahlKammern?, Filterschicht?, Filtermaterial?, Bepflanzung?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? RaumTiefbau {
            get {
                XElement x = this.GetElement(RaumTiefbauXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(RaumTiefbauXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                }
                else {
                    this.SetElementWithValidation(RaumTiefbauXName, value, "RaumTiefbau", RaumTiefbauLocalType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (BeckenFunktion?, Beckenart?, Anordnung?, BeckenBauart?, BeckenForm?, BeckenAusfuehrung?, Grundflaeche?, MaxLaenge?, MaxBreite?, MaxHoehe?, Boeschungsneigung?, NutzVolumen?, RaumHochbau?, RaumTiefbau?, AnzahlZulaeufe?, AnzahlAblaeufe?, AnzahlKammern?, Filterschicht?, Filtermaterial?, Bepflanzung?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? AnzahlZulaeufe {
            get {
                XElement x = this.GetElement(AnzahlZulaeufeXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(AnzahlZulaeufeXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                }
                else {
                    this.SetElementWithValidation(AnzahlZulaeufeXName, value, "AnzahlZulaeufe", AnzahlZulaeufeLocalType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (BeckenFunktion?, Beckenart?, Anordnung?, BeckenBauart?, BeckenForm?, BeckenAusfuehrung?, Grundflaeche?, MaxLaenge?, MaxBreite?, MaxHoehe?, Boeschungsneigung?, NutzVolumen?, RaumHochbau?, RaumTiefbau?, AnzahlZulaeufe?, AnzahlAblaeufe?, AnzahlKammern?, Filterschicht?, Filtermaterial?, Bepflanzung?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? AnzahlAblaeufe {
            get {
                XElement x = this.GetElement(AnzahlAblaeufeXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(AnzahlAblaeufeXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                }
                else {
                    this.SetElementWithValidation(AnzahlAblaeufeXName, value, "AnzahlAblaeufe", AnzahlAblaeufeLocalType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (BeckenFunktion?, Beckenart?, Anordnung?, BeckenBauart?, BeckenForm?, BeckenAusfuehrung?, Grundflaeche?, MaxLaenge?, MaxBreite?, MaxHoehe?, Boeschungsneigung?, NutzVolumen?, RaumHochbau?, RaumTiefbau?, AnzahlZulaeufe?, AnzahlAblaeufe?, AnzahlKammern?, Filterschicht?, Filtermaterial?, Bepflanzung?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? AnzahlKammern {
            get {
                XElement x = this.GetElement(AnzahlKammernXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(AnzahlKammernXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                }
                else {
                    this.SetElementWithValidation(AnzahlKammernXName, value, "AnzahlKammern", AnzahlKammernLocalType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (BeckenFunktion?, Beckenart?, Anordnung?, BeckenBauart?, BeckenForm?, BeckenAusfuehrung?, Grundflaeche?, MaxLaenge?, MaxBreite?, MaxHoehe?, Boeschungsneigung?, NutzVolumen?, RaumHochbau?, RaumTiefbau?, AnzahlZulaeufe?, AnzahlAblaeufe?, AnzahlKammern?, Filterschicht?, Filtermaterial?, Bepflanzung?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? Filterschicht {
            get {
                XElement x = this.GetElement(FilterschichtXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(FilterschichtXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                }
                else {
                    this.SetElementWithValidation(FilterschichtXName, value, "Filterschicht", FilterschichtLocalType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (BeckenFunktion?, Beckenart?, Anordnung?, BeckenBauart?, BeckenForm?, BeckenAusfuehrung?, Grundflaeche?, MaxLaenge?, MaxBreite?, MaxHoehe?, Boeschungsneigung?, NutzVolumen?, RaumHochbau?, RaumTiefbau?, AnzahlZulaeufe?, AnzahlAblaeufe?, AnzahlKammern?, Filterschicht?, Filtermaterial?, Bepflanzung?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? Filtermaterial {
            get {
                XElement x = this.GetElement(FiltermaterialXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(FiltermaterialXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                }
                else {
                    this.SetElementWithValidation(FiltermaterialXName, value, "Filtermaterial", global::www.bfr.abwasser.de.FiltermaterialType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (BeckenFunktion?, Beckenart?, Anordnung?, BeckenBauart?, BeckenForm?, BeckenAusfuehrung?, Grundflaeche?, MaxLaenge?, MaxBreite?, MaxHoehe?, Boeschungsneigung?, NutzVolumen?, RaumHochbau?, RaumTiefbau?, AnzahlZulaeufe?, AnzahlAblaeufe?, AnzahlKammern?, Filterschicht?, Filtermaterial?, Bepflanzung?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? Bepflanzung {
            get {
                XElement x = this.GetElement(BepflanzungXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(BepflanzungXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                }
                else {
                    this.SetElementWithValidation(BepflanzungXName, value, "Bepflanzung", global::www.bfr.abwasser.de.BepflanzungType.TypeDefinition);
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<BeckenType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(BeckenFunktionXName, typeof(string));
            localElementDictionary.Add(BeckenartXName, typeof(decimal));
            localElementDictionary.Add(AnordnungXName, typeof(decimal));
            localElementDictionary.Add(BeckenBauartXName, typeof(decimal));
            localElementDictionary.Add(BeckenFormXName, typeof(decimal));
            localElementDictionary.Add(BeckenAusfuehrungXName, typeof(decimal));
            localElementDictionary.Add(GrundflaecheXName, typeof(decimal));
            localElementDictionary.Add(MaxLaengeXName, typeof(decimal));
            localElementDictionary.Add(MaxBreiteXName, typeof(decimal));
            localElementDictionary.Add(MaxHoeheXName, typeof(decimal));
            localElementDictionary.Add(BoeschungsneigungXName, typeof(decimal));
            localElementDictionary.Add(NutzVolumenXName, typeof(decimal));
            localElementDictionary.Add(RaumHochbauXName, typeof(decimal));
            localElementDictionary.Add(RaumTiefbauXName, typeof(decimal));
            localElementDictionary.Add(AnzahlZulaeufeXName, typeof(decimal));
            localElementDictionary.Add(AnzahlAblaeufeXName, typeof(decimal));
            localElementDictionary.Add(AnzahlKammernXName, typeof(decimal));
            localElementDictionary.Add(FilterschichtXName, typeof(decimal));
            localElementDictionary.Add(FiltermaterialXName, typeof(decimal));
            localElementDictionary.Add(BepflanzungXName, typeof(decimal));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        private class GrundflaecheLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(3200)), null, 3, 0, 1000000m, null, 0, null, null, 0, null, 9, XmlSchemaWhiteSpace.Collapse));
            
            private GrundflaecheLocalType() {
            }
        }
        
        private class MaxLaengeLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(3200)), null, 3, 0, 1000m, null, 0, null, null, 0, null, 6, XmlSchemaWhiteSpace.Collapse));
            
            private MaxLaengeLocalType() {
            }
        }
        
        private class MaxBreiteLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(3200)), null, 3, 0, 1000m, null, 0, null, null, 0, null, 6, XmlSchemaWhiteSpace.Collapse));
            
            private MaxBreiteLocalType() {
            }
        }
        
        private class MaxHoeheLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(3200)), null, 3, 0, 1000m, null, 0, null, null, 0, null, 6, XmlSchemaWhiteSpace.Collapse));
            
            private MaxHoeheLocalType() {
            }
        }
        
        private class BoeschungsneigungLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(3200)), null, 2, 0, 100m, null, 0, null, null, 0, null, 4, XmlSchemaWhiteSpace.Collapse));
            
            private BoeschungsneigungLocalType() {
            }
        }
        
        private class NutzVolumenLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(3200)), null, 3, 0, 1000000m, null, 0, null, null, 0, null, 9, XmlSchemaWhiteSpace.Collapse));
            
            private NutzVolumenLocalType() {
            }
        }
        
        private class RaumHochbauLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(3200)), null, 3, 0, 1000000m, null, 0, null, null, 0, null, 9, XmlSchemaWhiteSpace.Collapse));
            
            private RaumHochbauLocalType() {
            }
        }
        
        private class RaumTiefbauLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(3200)), null, 3, 0, 1000000m, null, 0, null, null, 0, null, 9, XmlSchemaWhiteSpace.Collapse));
            
            private RaumTiefbauLocalType() {
            }
        }
        
        private class AnzahlZulaeufeLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(1024)), null, 0, 0, null, null, 0, null, null, 0, null, 1, XmlSchemaWhiteSpace.Collapse));
            
            private AnzahlZulaeufeLocalType() {
            }
        }
        
        private class AnzahlAblaeufeLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(1024)), null, 0, 0, null, null, 0, null, null, 0, null, 1, XmlSchemaWhiteSpace.Collapse));
            
            private AnzahlAblaeufeLocalType() {
            }
        }
        
        private class AnzahlKammernLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(1024)), null, 0, 0, null, null, 0, null, null, 0, null, 1, XmlSchemaWhiteSpace.Collapse));
            
            private AnzahlKammernLocalType() {
            }
        }
        
        private class FilterschichtLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(3200)), null, 3, 0, 10000m, null, 0, null, null, 0, null, 7, XmlSchemaWhiteSpace.Collapse));
            
            private FilterschichtLocalType() {
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Behandlungsart, Bypass?, Aufstellungsart?, Breite?, Laenge?, Hoehe?, HoeheZulauf?, HoeheAblauf?, MaterialAnlage?, Anlage?)
    /// </para>
    /// </summary>
    public partial class BehandlungsanlageType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName BehandlungsartXName = System.Xml.Linq.XName.Get("Behandlungsart", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName BypassXName = System.Xml.Linq.XName.Get("Bypass", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName AufstellungsartXName = System.Xml.Linq.XName.Get("Aufstellungsart", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName BreiteXName = System.Xml.Linq.XName.Get("Breite", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName LaengeXName = System.Xml.Linq.XName.Get("Laenge", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName HoeheXName = System.Xml.Linq.XName.Get("Hoehe", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName HoeheZulaufXName = System.Xml.Linq.XName.Get("HoeheZulauf", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName HoeheAblaufXName = System.Xml.Linq.XName.Get("HoeheAblauf", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName MaterialAnlageXName = System.Xml.Linq.XName.Get("MaterialAnlage", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName AnlageXName = System.Xml.Linq.XName.Get("Anlage", "http://www.bfr-abwasser.de");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("BehandlungsanlageType", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator BehandlungsanlageType(XElement xe) { return XTypedServices.ToXTypedElement<BehandlungsanlageType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static BehandlungsanlageType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(BehandlungsartXName), new NamedContentModelEntity(BypassXName), new NamedContentModelEntity(AufstellungsartXName), new NamedContentModelEntity(BreiteXName), new NamedContentModelEntity(LaengeXName), new NamedContentModelEntity(HoeheXName), new NamedContentModelEntity(HoeheZulaufXName), new NamedContentModelEntity(HoeheAblaufXName), new NamedContentModelEntity(MaterialAnlageXName), new NamedContentModelEntity(AnlageXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Behandlungsart, Bypass?, Aufstellungsart?, Breite?, Laenge?, Hoehe?, HoeheZulauf?, HoeheAblauf?, MaterialAnlage?, Anlage?)
        /// </para>
        /// </summary>
        public BehandlungsanlageType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (Behandlungsart, Bypass?, Aufstellungsart?, Breite?, Laenge?, Hoehe?, HoeheZulauf?, HoeheAblauf?, MaterialAnlage?, Anlage?)
        /// </para>
        /// </summary>
        public virtual decimal Behandlungsart {
            get {
                XElement x = this.GetElement(BehandlungsartXName);
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                this.SetElementWithValidation(BehandlungsartXName, value, "Behandlungsart", BehandlungsartLocalType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Behandlungsart, Bypass?, Aufstellungsart?, Breite?, Laenge?, Hoehe?, HoeheZulauf?, HoeheAblauf?, MaterialAnlage?, Anlage?)
        /// </para>
        /// </summary>
        public virtual System.Boolean? Bypass {
            get {
                XElement x = this.GetElement(BypassXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
            set {
                this.SetElement(BypassXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Behandlungsart, Bypass?, Aufstellungsart?, Breite?, Laenge?, Hoehe?, HoeheZulauf?, HoeheAblauf?, MaterialAnlage?, Anlage?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? Aufstellungsart {
            get {
                XElement x = this.GetElement(AufstellungsartXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(AufstellungsartXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                }
                else {
                    this.SetElementWithValidation(AufstellungsartXName, value, "Aufstellungsart", global::www.bfr.abwasser.de.AufstellungsartType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Behandlungsart, Bypass?, Aufstellungsart?, Breite?, Laenge?, Hoehe?, HoeheZulauf?, HoeheAblauf?, MaterialAnlage?, Anlage?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? Breite {
            get {
                XElement x = this.GetElement(BreiteXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(BreiteXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                }
                else {
                    this.SetElementWithValidation(BreiteXName, value, "Breite", BreiteLocalType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Behandlungsart, Bypass?, Aufstellungsart?, Breite?, Laenge?, Hoehe?, HoeheZulauf?, HoeheAblauf?, MaterialAnlage?, Anlage?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? Laenge {
            get {
                XElement x = this.GetElement(LaengeXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(LaengeXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                }
                else {
                    this.SetElementWithValidation(LaengeXName, value, "Laenge", LaengeLocalType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Behandlungsart, Bypass?, Aufstellungsart?, Breite?, Laenge?, Hoehe?, HoeheZulauf?, HoeheAblauf?, MaterialAnlage?, Anlage?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? Hoehe {
            get {
                XElement x = this.GetElement(HoeheXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(HoeheXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                }
                else {
                    this.SetElementWithValidation(HoeheXName, value, "Hoehe", HoeheLocalType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Behandlungsart, Bypass?, Aufstellungsart?, Breite?, Laenge?, Hoehe?, HoeheZulauf?, HoeheAblauf?, MaterialAnlage?, Anlage?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? HoeheZulauf {
            get {
                XElement x = this.GetElement(HoeheZulaufXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(HoeheZulaufXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                }
                else {
                    this.SetElementWithValidation(HoeheZulaufXName, value, "HoeheZulauf", HoeheZulaufLocalType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Behandlungsart, Bypass?, Aufstellungsart?, Breite?, Laenge?, Hoehe?, HoeheZulauf?, HoeheAblauf?, MaterialAnlage?, Anlage?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? HoeheAblauf {
            get {
                XElement x = this.GetElement(HoeheAblaufXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(HoeheAblaufXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                }
                else {
                    this.SetElementWithValidation(HoeheAblaufXName, value, "HoeheAblauf", HoeheAblaufLocalType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Behandlungsart, Bypass?, Aufstellungsart?, Breite?, Laenge?, Hoehe?, HoeheZulauf?, HoeheAblauf?, MaterialAnlage?, Anlage?)
        /// </para>
        /// </summary>
        public virtual string MaterialAnlage {
            get {
                XElement x = this.GetElement(MaterialAnlageXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(MaterialAnlageXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                else {
                    this.SetElementWithValidation(MaterialAnlageXName, value, "MaterialAnlage", global::www.bfr.abwasser.de.MaterialType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Behandlungsart, Bypass?, Aufstellungsart?, Breite?, Laenge?, Hoehe?, HoeheZulauf?, HoeheAblauf?, MaterialAnlage?, Anlage?)
        /// </para>
        /// </summary>
        public virtual AnlageType Anlage {
            get {
                XElement x = this.GetElement(AnlageXName);
                return ((AnlageType)(x));
            }
            set {
                this.SetElement(AnlageXName, value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<BehandlungsanlageType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(BehandlungsartXName, typeof(decimal));
            localElementDictionary.Add(BypassXName, typeof(bool));
            localElementDictionary.Add(AufstellungsartXName, typeof(decimal));
            localElementDictionary.Add(BreiteXName, typeof(decimal));
            localElementDictionary.Add(LaengeXName, typeof(decimal));
            localElementDictionary.Add(HoeheXName, typeof(decimal));
            localElementDictionary.Add(HoeheZulaufXName, typeof(decimal));
            localElementDictionary.Add(HoeheAblaufXName, typeof(decimal));
            localElementDictionary.Add(MaterialAnlageXName, typeof(string));
            localElementDictionary.Add(AnlageXName, typeof(AnlageType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        private class BehandlungsartLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(1360)), new object[] {
                            1m,
                            2m,
                            3m,
                            4m,
                            5m,
                            6m,
                            7m,
                            9m,
                            10m,
                            11m}, 0, 0, null, 11m, 0, null, 1m, 0, null, 2, XmlSchemaWhiteSpace.Collapse));
            
            private BehandlungsartLocalType() {
            }
        }
        
        private class BreiteLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(3200)), null, 2, 0, 1000m, null, 0, null, null, 0, null, 5, XmlSchemaWhiteSpace.Collapse));
            
            private BreiteLocalType() {
            }
        }
        
        private class LaengeLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(3200)), null, 2, 0, 1000m, null, 0, null, null, 0, null, 5, XmlSchemaWhiteSpace.Collapse));
            
            private LaengeLocalType() {
            }
        }
        
        private class HoeheLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(3200)), null, 2, 0, 1000m, null, 0, null, null, 0, null, 5, XmlSchemaWhiteSpace.Collapse));
            
            private HoeheLocalType() {
            }
        }
        
        private class HoeheZulaufLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(3200)), null, 2, 0, 1000m, null, 0, null, null, 0, null, 5, XmlSchemaWhiteSpace.Collapse));
            
            private HoeheZulaufLocalType() {
            }
        }
        
        private class HoeheAblaufLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(3200)), null, 2, 0, 1000m, null, 0, null, null, 0, null, 5, XmlSchemaWhiteSpace.Collapse));
            
            private HoeheAblaufLocalType() {
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Schlammfang | LfAbscheider | Staerkeabscheider | Fettabscheider | Emulsionspaltanlage | Stapelbecken | Neutralisationsanlage)?
    /// </para>
    /// </summary>
    public partial class AnlageType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName SchlammfangXName = System.Xml.Linq.XName.Get("Schlammfang", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName LfAbscheiderXName = System.Xml.Linq.XName.Get("LfAbscheider", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName StaerkeabscheiderXName = System.Xml.Linq.XName.Get("Staerkeabscheider", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName FettabscheiderXName = System.Xml.Linq.XName.Get("Fettabscheider", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName EmulsionspaltanlageXName = System.Xml.Linq.XName.Get("Emulsionspaltanlage", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName StapelbeckenXName = System.Xml.Linq.XName.Get("Stapelbecken", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName NeutralisationsanlageXName = System.Xml.Linq.XName.Get("Neutralisationsanlage", "http://www.bfr-abwasser.de");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("AnlageType", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator AnlageType(XElement xe) { return XTypedServices.ToXTypedElement<AnlageType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static AnlageType() {
            BuildElementDictionary();
            contentModel = new ChoiceContentModelEntity(new NamedContentModelEntity(SchlammfangXName), new NamedContentModelEntity(LfAbscheiderXName), new NamedContentModelEntity(StaerkeabscheiderXName), new NamedContentModelEntity(FettabscheiderXName), new NamedContentModelEntity(EmulsionspaltanlageXName), new NamedContentModelEntity(StapelbeckenXName), new NamedContentModelEntity(NeutralisationsanlageXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Schlammfang | LfAbscheider | Staerkeabscheider | Fettabscheider | Emulsionspaltanlage | Stapelbecken | Neutralisationsanlage)?
        /// </para>
        /// </summary>
        public AnlageType() {
        }
        
        public AnlageType(SchlammfangType Schlammfang) {
            this.Schlammfang = Schlammfang;
        }
        
        public AnlageType(LfAbscheiderType LfAbscheider) {
            this.LfAbscheider = LfAbscheider;
        }
        
        public AnlageType(StaerkeabscheiderType Staerkeabscheider) {
            this.Staerkeabscheider = Staerkeabscheider;
        }
        
        public AnlageType(FettabscheiderType Fettabscheider) {
            this.Fettabscheider = Fettabscheider;
        }
        
        public AnlageType(EmulsionsspaltanlageType Emulsionspaltanlage) {
            this.Emulsionspaltanlage = Emulsionspaltanlage;
        }
        
        public AnlageType(StapelbeckenType Stapelbecken) {
            this.Stapelbecken = Stapelbecken;
        }
        
        public AnlageType(NeutralisationsanlageType Neutralisationsanlage) {
            this.Neutralisationsanlage = Neutralisationsanlage;
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (Schlammfang | LfAbscheider | Staerkeabscheider | Fettabscheider | Emulsionspaltanlage | Stapelbecken | Neutralisationsanlage)?
        /// </para>
        /// </summary>
        public virtual SchlammfangType Schlammfang {
            get {
                XElement x = this.GetElement(SchlammfangXName);
                return ((SchlammfangType)(x));
            }
            set {
                this.SetElement(SchlammfangXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (Schlammfang | LfAbscheider | Staerkeabscheider | Fettabscheider | Emulsionspaltanlage | Stapelbecken | Neutralisationsanlage)?
        /// </para>
        /// </summary>
        public virtual LfAbscheiderType LfAbscheider {
            get {
                XElement x = this.GetElement(LfAbscheiderXName);
                return ((LfAbscheiderType)(x));
            }
            set {
                this.SetElement(LfAbscheiderXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (Schlammfang | LfAbscheider | Staerkeabscheider | Fettabscheider | Emulsionspaltanlage | Stapelbecken | Neutralisationsanlage)?
        /// </para>
        /// </summary>
        public virtual StaerkeabscheiderType Staerkeabscheider {
            get {
                XElement x = this.GetElement(StaerkeabscheiderXName);
                return ((StaerkeabscheiderType)(x));
            }
            set {
                this.SetElement(StaerkeabscheiderXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (Schlammfang | LfAbscheider | Staerkeabscheider | Fettabscheider | Emulsionspaltanlage | Stapelbecken | Neutralisationsanlage)?
        /// </para>
        /// </summary>
        public virtual FettabscheiderType Fettabscheider {
            get {
                XElement x = this.GetElement(FettabscheiderXName);
                return ((FettabscheiderType)(x));
            }
            set {
                this.SetElement(FettabscheiderXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (Schlammfang | LfAbscheider | Staerkeabscheider | Fettabscheider | Emulsionspaltanlage | Stapelbecken | Neutralisationsanlage)?
        /// </para>
        /// </summary>
        public virtual EmulsionsspaltanlageType Emulsionspaltanlage {
            get {
                XElement x = this.GetElement(EmulsionspaltanlageXName);
                return ((EmulsionsspaltanlageType)(x));
            }
            set {
                this.SetElement(EmulsionspaltanlageXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (Schlammfang | LfAbscheider | Staerkeabscheider | Fettabscheider | Emulsionspaltanlage | Stapelbecken | Neutralisationsanlage)?
        /// </para>
        /// </summary>
        public virtual StapelbeckenType Stapelbecken {
            get {
                XElement x = this.GetElement(StapelbeckenXName);
                return ((StapelbeckenType)(x));
            }
            set {
                this.SetElement(StapelbeckenXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (Schlammfang | LfAbscheider | Staerkeabscheider | Fettabscheider | Emulsionspaltanlage | Stapelbecken | Neutralisationsanlage)?
        /// </para>
        /// </summary>
        public virtual NeutralisationsanlageType Neutralisationsanlage {
            get {
                XElement x = this.GetElement(NeutralisationsanlageXName);
                return ((NeutralisationsanlageType)(x));
            }
            set {
                this.SetElement(NeutralisationsanlageXName, value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<AnlageType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(SchlammfangXName, typeof(SchlammfangType));
            localElementDictionary.Add(LfAbscheiderXName, typeof(LfAbscheiderType));
            localElementDictionary.Add(StaerkeabscheiderXName, typeof(StaerkeabscheiderType));
            localElementDictionary.Add(FettabscheiderXName, typeof(FettabscheiderType));
            localElementDictionary.Add(EmulsionspaltanlageXName, typeof(EmulsionsspaltanlageType));
            localElementDictionary.Add(StapelbeckenXName, typeof(StapelbeckenType));
            localElementDictionary.Add(NeutralisationsanlageXName, typeof(NeutralisationsanlageType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (GesamtSpeicher?)
    /// </para>
    /// </summary>
    public partial class SchlammfangType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName GesamtSpeicherXName = System.Xml.Linq.XName.Get("GesamtSpeicher", "http://www.bfr-abwasser.de");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("SchlammfangType", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator SchlammfangType(XElement xe) { return XTypedServices.ToXTypedElement<SchlammfangType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static SchlammfangType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(GesamtSpeicherXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (GesamtSpeicher?)
        /// </para>
        /// </summary>
        public SchlammfangType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (GesamtSpeicher?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? GesamtSpeicher {
            get {
                XElement x = this.GetElement(GesamtSpeicherXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(GesamtSpeicherXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                }
                else {
                    this.SetElementWithValidation(GesamtSpeicherXName, value, "GesamtSpeicher", GesamtSpeicherLocalType.TypeDefinition);
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<SchlammfangType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(GesamtSpeicherXName, typeof(decimal));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        private class GesamtSpeicherLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(1152)), null, 0, 0, 10000000m, null, 0, null, null, 0, null, 7, XmlSchemaWhiteSpace.Collapse));
            
            private GesamtSpeicherLocalType() {
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (AbscheiderKlasse?, Nenngroesse?, Schichtdicke?, GesamtSpeicher?, LfSpeicher?, Schwimmerabschluss?, Warnanlage?, KommentarWarnanlage?)
    /// </para>
    /// </summary>
    public partial class LfAbscheiderType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName AbscheiderKlasseXName = System.Xml.Linq.XName.Get("AbscheiderKlasse", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName NenngroesseXName = System.Xml.Linq.XName.Get("Nenngroesse", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName SchichtdickeXName = System.Xml.Linq.XName.Get("Schichtdicke", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName GesamtSpeicherXName = System.Xml.Linq.XName.Get("GesamtSpeicher", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName LfSpeicherXName = System.Xml.Linq.XName.Get("LfSpeicher", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName SchwimmerabschlussXName = System.Xml.Linq.XName.Get("Schwimmerabschluss", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName WarnanlageXName = System.Xml.Linq.XName.Get("Warnanlage", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName KommentarWarnanlageXName = System.Xml.Linq.XName.Get("KommentarWarnanlage", "http://www.bfr-abwasser.de");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("LfAbscheiderType", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator LfAbscheiderType(XElement xe) { return XTypedServices.ToXTypedElement<LfAbscheiderType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static LfAbscheiderType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(AbscheiderKlasseXName), new NamedContentModelEntity(NenngroesseXName), new NamedContentModelEntity(SchichtdickeXName), new NamedContentModelEntity(GesamtSpeicherXName), new NamedContentModelEntity(LfSpeicherXName), new NamedContentModelEntity(SchwimmerabschlussXName), new NamedContentModelEntity(WarnanlageXName), new NamedContentModelEntity(KommentarWarnanlageXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (AbscheiderKlasse?, Nenngroesse?, Schichtdicke?, GesamtSpeicher?, LfSpeicher?, Schwimmerabschluss?, Warnanlage?, KommentarWarnanlage?)
        /// </para>
        /// </summary>
        public LfAbscheiderType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (AbscheiderKlasse?, Nenngroesse?, Schichtdicke?, GesamtSpeicher?, LfSpeicher?, Schwimmerabschluss?, Warnanlage?, KommentarWarnanlage?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? AbscheiderKlasse {
            get {
                XElement x = this.GetElement(AbscheiderKlasseXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(AbscheiderKlasseXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                }
                else {
                    this.SetElementWithValidation(AbscheiderKlasseXName, value, "AbscheiderKlasse", global::www.bfr.abwasser.de.AbscheiderklasseType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (AbscheiderKlasse?, Nenngroesse?, Schichtdicke?, GesamtSpeicher?, LfSpeicher?, Schwimmerabschluss?, Warnanlage?, KommentarWarnanlage?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? Nenngroesse {
            get {
                XElement x = this.GetElement(NenngroesseXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(NenngroesseXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                }
                else {
                    this.SetElementWithValidation(NenngroesseXName, value, "Nenngroesse", NenngroesseLocalType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (AbscheiderKlasse?, Nenngroesse?, Schichtdicke?, GesamtSpeicher?, LfSpeicher?, Schwimmerabschluss?, Warnanlage?, KommentarWarnanlage?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? Schichtdicke {
            get {
                XElement x = this.GetElement(SchichtdickeXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(SchichtdickeXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                }
                else {
                    this.SetElementWithValidation(SchichtdickeXName, value, "Schichtdicke", SchichtdickeLocalType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (AbscheiderKlasse?, Nenngroesse?, Schichtdicke?, GesamtSpeicher?, LfSpeicher?, Schwimmerabschluss?, Warnanlage?, KommentarWarnanlage?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? GesamtSpeicher {
            get {
                XElement x = this.GetElement(GesamtSpeicherXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(GesamtSpeicherXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                }
                else {
                    this.SetElementWithValidation(GesamtSpeicherXName, value, "GesamtSpeicher", GesamtSpeicherLocalType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (AbscheiderKlasse?, Nenngroesse?, Schichtdicke?, GesamtSpeicher?, LfSpeicher?, Schwimmerabschluss?, Warnanlage?, KommentarWarnanlage?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? LfSpeicher {
            get {
                XElement x = this.GetElement(LfSpeicherXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(LfSpeicherXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                }
                else {
                    this.SetElementWithValidation(LfSpeicherXName, value, "LfSpeicher", LfSpeicherLocalType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (AbscheiderKlasse?, Nenngroesse?, Schichtdicke?, GesamtSpeicher?, LfSpeicher?, Schwimmerabschluss?, Warnanlage?, KommentarWarnanlage?)
        /// </para>
        /// </summary>
        public virtual System.Boolean? Schwimmerabschluss {
            get {
                XElement x = this.GetElement(SchwimmerabschlussXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
            set {
                this.SetElement(SchwimmerabschlussXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (AbscheiderKlasse?, Nenngroesse?, Schichtdicke?, GesamtSpeicher?, LfSpeicher?, Schwimmerabschluss?, Warnanlage?, KommentarWarnanlage?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? Warnanlage {
            get {
                XElement x = this.GetElement(WarnanlageXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(WarnanlageXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                }
                else {
                    this.SetElementWithValidation(WarnanlageXName, value, "Warnanlage", global::www.bfr.abwasser.de.WarnanlageType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (AbscheiderKlasse?, Nenngroesse?, Schichtdicke?, GesamtSpeicher?, LfSpeicher?, Schwimmerabschluss?, Warnanlage?, KommentarWarnanlage?)
        /// </para>
        /// </summary>
        public virtual string KommentarWarnanlage {
            get {
                XElement x = this.GetElement(KommentarWarnanlageXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
            set {
                this.SetElement(KommentarWarnanlageXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<LfAbscheiderType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(AbscheiderKlasseXName, typeof(decimal));
            localElementDictionary.Add(NenngroesseXName, typeof(decimal));
            localElementDictionary.Add(SchichtdickeXName, typeof(decimal));
            localElementDictionary.Add(GesamtSpeicherXName, typeof(decimal));
            localElementDictionary.Add(LfSpeicherXName, typeof(decimal));
            localElementDictionary.Add(SchwimmerabschlussXName, typeof(bool));
            localElementDictionary.Add(WarnanlageXName, typeof(decimal));
            localElementDictionary.Add(KommentarWarnanlageXName, typeof(string));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        private class NenngroesseLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(3200)), null, 1, 0, 1000m, null, 0, null, null, 0, null, 4, XmlSchemaWhiteSpace.Collapse));
            
            private NenngroesseLocalType() {
            }
        }
        
        private class SchichtdickeLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(1152)), null, 0, 0, 10000000m, null, 0, null, null, 0, null, 7, XmlSchemaWhiteSpace.Collapse));
            
            private SchichtdickeLocalType() {
            }
        }
        
        private class GesamtSpeicherLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(1152)), null, 0, 0, 10000000m, null, 0, null, null, 0, null, 7, XmlSchemaWhiteSpace.Collapse));
            
            private GesamtSpeicherLocalType() {
            }
        }
        
        private class LfSpeicherLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(1152)), null, 0, 0, 10000000m, null, 0, null, null, 0, null, 7, XmlSchemaWhiteSpace.Collapse));
            
            private LfSpeicherLocalType() {
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Nenngroesse?, GesamtSpeicher?, Frischwasser?)
    /// </para>
    /// </summary>
    public partial class StaerkeabscheiderType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName NenngroesseXName = System.Xml.Linq.XName.Get("Nenngroesse", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName GesamtSpeicherXName = System.Xml.Linq.XName.Get("GesamtSpeicher", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName FrischwasserXName = System.Xml.Linq.XName.Get("Frischwasser", "http://www.bfr-abwasser.de");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("StaerkeabscheiderType", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator StaerkeabscheiderType(XElement xe) { return XTypedServices.ToXTypedElement<StaerkeabscheiderType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static StaerkeabscheiderType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(NenngroesseXName), new NamedContentModelEntity(GesamtSpeicherXName), new NamedContentModelEntity(FrischwasserXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Nenngroesse?, GesamtSpeicher?, Frischwasser?)
        /// </para>
        /// </summary>
        public StaerkeabscheiderType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Nenngroesse?, GesamtSpeicher?, Frischwasser?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? Nenngroesse {
            get {
                XElement x = this.GetElement(NenngroesseXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(NenngroesseXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                }
                else {
                    this.SetElementWithValidation(NenngroesseXName, value, "Nenngroesse", NenngroesseLocalType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Nenngroesse?, GesamtSpeicher?, Frischwasser?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? GesamtSpeicher {
            get {
                XElement x = this.GetElement(GesamtSpeicherXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(GesamtSpeicherXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                }
                else {
                    this.SetElementWithValidation(GesamtSpeicherXName, value, "GesamtSpeicher", GesamtSpeicherLocalType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Nenngroesse?, GesamtSpeicher?, Frischwasser?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? Frischwasser {
            get {
                XElement x = this.GetElement(FrischwasserXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(FrischwasserXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                }
                else {
                    this.SetElementWithValidation(FrischwasserXName, value, "Frischwasser", global::www.bfr.abwasser.de.FrischwasserversorgungType.TypeDefinition);
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<StaerkeabscheiderType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(NenngroesseXName, typeof(decimal));
            localElementDictionary.Add(GesamtSpeicherXName, typeof(decimal));
            localElementDictionary.Add(FrischwasserXName, typeof(decimal));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        private class NenngroesseLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(3200)), null, 1, 0, 1000m, null, 0, null, null, 0, null, 4, XmlSchemaWhiteSpace.Collapse));
            
            private NenngroesseLocalType() {
            }
        }
        
        private class GesamtSpeicherLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(1152)), null, 0, 0, 10000000m, null, 0, null, null, 0, null, 7, XmlSchemaWhiteSpace.Collapse));
            
            private GesamtSpeicherLocalType() {
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Nenngroesse?, GesamtSpeicher?)
    /// </para>
    /// </summary>
    public partial class FettabscheiderType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName NenngroesseXName = System.Xml.Linq.XName.Get("Nenngroesse", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName GesamtSpeicherXName = System.Xml.Linq.XName.Get("GesamtSpeicher", "http://www.bfr-abwasser.de");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("FettabscheiderType", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator FettabscheiderType(XElement xe) { return XTypedServices.ToXTypedElement<FettabscheiderType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static FettabscheiderType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(NenngroesseXName), new NamedContentModelEntity(GesamtSpeicherXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Nenngroesse?, GesamtSpeicher?)
        /// </para>
        /// </summary>
        public FettabscheiderType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Nenngroesse?, GesamtSpeicher?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? Nenngroesse {
            get {
                XElement x = this.GetElement(NenngroesseXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(NenngroesseXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                }
                else {
                    this.SetElementWithValidation(NenngroesseXName, value, "Nenngroesse", NenngroesseLocalType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Nenngroesse?, GesamtSpeicher?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? GesamtSpeicher {
            get {
                XElement x = this.GetElement(GesamtSpeicherXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(GesamtSpeicherXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                }
                else {
                    this.SetElementWithValidation(GesamtSpeicherXName, value, "GesamtSpeicher", GesamtSpeicherLocalType.TypeDefinition);
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<FettabscheiderType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(NenngroesseXName, typeof(decimal));
            localElementDictionary.Add(GesamtSpeicherXName, typeof(decimal));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        private class NenngroesseLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(3200)), null, 1, 0, 1000m, null, 0, null, null, 0, null, 4, XmlSchemaWhiteSpace.Collapse));
            
            private NenngroesseLocalType() {
            }
        }
        
        private class GesamtSpeicherLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(1152)), null, 0, 0, 10000000m, null, 0, null, null, 0, null, 7, XmlSchemaWhiteSpace.Collapse));
            
            private GesamtSpeicherLocalType() {
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Leistung?, Einwohnerwerte?, Flockungsmittel?)
    /// </para>
    /// </summary>
    public partial class EmulsionsspaltanlageType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName LeistungXName = System.Xml.Linq.XName.Get("Leistung", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName EinwohnerwerteXName = System.Xml.Linq.XName.Get("Einwohnerwerte", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName FlockungsmittelXName = System.Xml.Linq.XName.Get("Flockungsmittel", "http://www.bfr-abwasser.de");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("EmulsionsspaltanlageType", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator EmulsionsspaltanlageType(XElement xe) { return XTypedServices.ToXTypedElement<EmulsionsspaltanlageType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static EmulsionsspaltanlageType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(LeistungXName), new NamedContentModelEntity(EinwohnerwerteXName), new NamedContentModelEntity(FlockungsmittelXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Leistung?, Einwohnerwerte?, Flockungsmittel?)
        /// </para>
        /// </summary>
        public EmulsionsspaltanlageType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Leistung?, Einwohnerwerte?, Flockungsmittel?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? Leistung {
            get {
                XElement x = this.GetElement(LeistungXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(LeistungXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                }
                else {
                    this.SetElementWithValidation(LeistungXName, value, "Leistung", LeistungLocalType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Leistung?, Einwohnerwerte?, Flockungsmittel?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? Einwohnerwerte {
            get {
                XElement x = this.GetElement(EinwohnerwerteXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(EinwohnerwerteXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                }
                else {
                    this.SetElementWithValidation(EinwohnerwerteXName, value, "Einwohnerwerte", EinwohnerwerteLocalType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Leistung?, Einwohnerwerte?, Flockungsmittel?)
        /// </para>
        /// </summary>
        public virtual string Flockungsmittel {
            get {
                XElement x = this.GetElement(FlockungsmittelXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(FlockungsmittelXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                else {
                    this.SetElementWithValidation(FlockungsmittelXName, value, "Flockungsmittel", FlockungsmittelLocalType.TypeDefinition);
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<EmulsionsspaltanlageType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(LeistungXName, typeof(decimal));
            localElementDictionary.Add(EinwohnerwerteXName, typeof(decimal));
            localElementDictionary.Add(FlockungsmittelXName, typeof(string));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        private class LeistungLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(3200)), null, 1, 0, 10000m, null, 0, null, null, 0, null, 5, XmlSchemaWhiteSpace.Collapse));
            
            private LeistungLocalType() {
            }
        }
        
        private class EinwohnerwerteLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(1024)), null, 0, 0, null, null, 0, null, null, 0, null, 7, XmlSchemaWhiteSpace.Collapse));
            
            private EinwohnerwerteLocalType() {
            }
        }
        
        private class FlockungsmittelLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(4)), null, 0, 0, null, null, 60, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
            
            private FlockungsmittelLocalType() {
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Neutralisationsart?, GesamtVolumen?, Neutralisationsmittel?, pHWert?, Ablaufleistung?)
    /// </para>
    /// </summary>
    public partial class NeutralisationsanlageType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName NeutralisationsartXName = System.Xml.Linq.XName.Get("Neutralisationsart", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName GesamtVolumenXName = System.Xml.Linq.XName.Get("GesamtVolumen", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName NeutralisationsmittelXName = System.Xml.Linq.XName.Get("Neutralisationsmittel", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName pHWertXName = System.Xml.Linq.XName.Get("pHWert", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName AblaufleistungXName = System.Xml.Linq.XName.Get("Ablaufleistung", "http://www.bfr-abwasser.de");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("NeutralisationsanlageType", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator NeutralisationsanlageType(XElement xe) { return XTypedServices.ToXTypedElement<NeutralisationsanlageType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static NeutralisationsanlageType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(NeutralisationsartXName), new NamedContentModelEntity(GesamtVolumenXName), new NamedContentModelEntity(NeutralisationsmittelXName), new NamedContentModelEntity(pHWertXName), new NamedContentModelEntity(AblaufleistungXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Neutralisationsart?, GesamtVolumen?, Neutralisationsmittel?, pHWert?, Ablaufleistung?)
        /// </para>
        /// </summary>
        public NeutralisationsanlageType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Neutralisationsart?, GesamtVolumen?, Neutralisationsmittel?, pHWert?, Ablaufleistung?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? Neutralisationsart {
            get {
                XElement x = this.GetElement(NeutralisationsartXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(NeutralisationsartXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                }
                else {
                    this.SetElementWithValidation(NeutralisationsartXName, value, "Neutralisationsart", global::www.bfr.abwasser.de.NeutralisationsartType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Neutralisationsart?, GesamtVolumen?, Neutralisationsmittel?, pHWert?, Ablaufleistung?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? GesamtVolumen {
            get {
                XElement x = this.GetElement(GesamtVolumenXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(GesamtVolumenXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                }
                else {
                    this.SetElementWithValidation(GesamtVolumenXName, value, "GesamtVolumen", GesamtVolumenLocalType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Neutralisationsart?, GesamtVolumen?, Neutralisationsmittel?, pHWert?, Ablaufleistung?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? Neutralisationsmittel {
            get {
                XElement x = this.GetElement(NeutralisationsmittelXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(NeutralisationsmittelXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                }
                else {
                    this.SetElementWithValidation(NeutralisationsmittelXName, value, "Neutralisationsmittel", global::www.bfr.abwasser.de.NeutralisationsmittelType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Neutralisationsart?, GesamtVolumen?, Neutralisationsmittel?, pHWert?, Ablaufleistung?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? pHWert {
            get {
                XElement x = this.GetElement(pHWertXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(pHWertXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                }
                else {
                    this.SetElementWithValidation(pHWertXName, value, "pHWert", pHWertLocalType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Neutralisationsart?, GesamtVolumen?, Neutralisationsmittel?, pHWert?, Ablaufleistung?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? Ablaufleistung {
            get {
                XElement x = this.GetElement(AblaufleistungXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(AblaufleistungXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                }
                else {
                    this.SetElementWithValidation(AblaufleistungXName, value, "Ablaufleistung", AblaufleistungLocalType.TypeDefinition);
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<NeutralisationsanlageType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(NeutralisationsartXName, typeof(decimal));
            localElementDictionary.Add(GesamtVolumenXName, typeof(decimal));
            localElementDictionary.Add(NeutralisationsmittelXName, typeof(decimal));
            localElementDictionary.Add(pHWertXName, typeof(decimal));
            localElementDictionary.Add(AblaufleistungXName, typeof(decimal));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        private class GesamtVolumenLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(1152)), null, 0, 0, 10000000m, null, 0, null, null, 0, null, 7, XmlSchemaWhiteSpace.Collapse));
            
            private GesamtVolumenLocalType() {
            }
        }
        
        private class pHWertLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(3200)), null, 1, 0, 10000m, null, 0, null, null, 0, null, 5, XmlSchemaWhiteSpace.Collapse));
            
            private pHWertLocalType() {
            }
        }
        
        private class AblaufleistungLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(3200)), null, 1, 0, 10000m, null, 0, null, null, 0, null, 5, XmlSchemaWhiteSpace.Collapse));
            
            private AblaufleistungLocalType() {
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (GesamtSpeicher?, LfSpeicher?, DurchflussLeistung?, ExistenzPumpe?)
    /// </para>
    /// </summary>
    public partial class StapelbeckenType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName GesamtSpeicherXName = System.Xml.Linq.XName.Get("GesamtSpeicher", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName LfSpeicherXName = System.Xml.Linq.XName.Get("LfSpeicher", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName DurchflussLeistungXName = System.Xml.Linq.XName.Get("DurchflussLeistung", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ExistenzPumpeXName = System.Xml.Linq.XName.Get("ExistenzPumpe", "http://www.bfr-abwasser.de");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("StapelbeckenType", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator StapelbeckenType(XElement xe) { return XTypedServices.ToXTypedElement<StapelbeckenType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static StapelbeckenType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(GesamtSpeicherXName), new NamedContentModelEntity(LfSpeicherXName), new NamedContentModelEntity(DurchflussLeistungXName), new NamedContentModelEntity(ExistenzPumpeXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (GesamtSpeicher?, LfSpeicher?, DurchflussLeistung?, ExistenzPumpe?)
        /// </para>
        /// </summary>
        public StapelbeckenType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (GesamtSpeicher?, LfSpeicher?, DurchflussLeistung?, ExistenzPumpe?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? GesamtSpeicher {
            get {
                XElement x = this.GetElement(GesamtSpeicherXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(GesamtSpeicherXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                }
                else {
                    this.SetElementWithValidation(GesamtSpeicherXName, value, "GesamtSpeicher", GesamtSpeicherLocalType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (GesamtSpeicher?, LfSpeicher?, DurchflussLeistung?, ExistenzPumpe?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? LfSpeicher {
            get {
                XElement x = this.GetElement(LfSpeicherXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(LfSpeicherXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                }
                else {
                    this.SetElementWithValidation(LfSpeicherXName, value, "LfSpeicher", LfSpeicherLocalType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (GesamtSpeicher?, LfSpeicher?, DurchflussLeistung?, ExistenzPumpe?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? DurchflussLeistung {
            get {
                XElement x = this.GetElement(DurchflussLeistungXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(DurchflussLeistungXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                }
                else {
                    this.SetElementWithValidation(DurchflussLeistungXName, value, "DurchflussLeistung", DurchflussLeistungLocalType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (GesamtSpeicher?, LfSpeicher?, DurchflussLeistung?, ExistenzPumpe?)
        /// </para>
        /// </summary>
        public virtual System.Boolean? ExistenzPumpe {
            get {
                XElement x = this.GetElement(ExistenzPumpeXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
            set {
                this.SetElement(ExistenzPumpeXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<StapelbeckenType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(GesamtSpeicherXName, typeof(decimal));
            localElementDictionary.Add(LfSpeicherXName, typeof(decimal));
            localElementDictionary.Add(DurchflussLeistungXName, typeof(decimal));
            localElementDictionary.Add(ExistenzPumpeXName, typeof(bool));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        private class GesamtSpeicherLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(1152)), null, 0, 0, 10000000m, null, 0, null, null, 0, null, 7, XmlSchemaWhiteSpace.Collapse));
            
            private GesamtSpeicherLocalType() {
            }
        }
        
        private class LfSpeicherLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(1152)), null, 0, 0, 10000000m, null, 0, null, null, 0, null, 7, XmlSchemaWhiteSpace.Collapse));
            
            private LfSpeicherLocalType() {
            }
        }
        
        private class DurchflussLeistungLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(3200)), null, 1, 0, 10000m, null, 0, null, null, 0, null, 5, XmlSchemaWhiteSpace.Collapse));
            
            private DurchflussLeistungLocalType() {
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Rechentyp?, Rechenrost?, Aufstellungsart?, Breite?, Laenge?, Hoehe?, Reinigereingriff?, Material?)
    /// </para>
    /// </summary>
    public partial class RechenType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName RechentypXName = System.Xml.Linq.XName.Get("Rechentyp", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName RechenrostXName = System.Xml.Linq.XName.Get("Rechenrost", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName AufstellungsartXName = System.Xml.Linq.XName.Get("Aufstellungsart", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName BreiteXName = System.Xml.Linq.XName.Get("Breite", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName LaengeXName = System.Xml.Linq.XName.Get("Laenge", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName HoeheXName = System.Xml.Linq.XName.Get("Hoehe", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ReinigereingriffXName = System.Xml.Linq.XName.Get("Reinigereingriff", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName MaterialXName = System.Xml.Linq.XName.Get("Material", "http://www.bfr-abwasser.de");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("RechenType", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator RechenType(XElement xe) { return XTypedServices.ToXTypedElement<RechenType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static RechenType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(RechentypXName), new NamedContentModelEntity(RechenrostXName), new NamedContentModelEntity(AufstellungsartXName), new NamedContentModelEntity(BreiteXName), new NamedContentModelEntity(LaengeXName), new NamedContentModelEntity(HoeheXName), new NamedContentModelEntity(ReinigereingriffXName), new NamedContentModelEntity(MaterialXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Rechentyp?, Rechenrost?, Aufstellungsart?, Breite?, Laenge?, Hoehe?, Reinigereingriff?, Material?)
        /// </para>
        /// </summary>
        public RechenType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Rechentyp?, Rechenrost?, Aufstellungsart?, Breite?, Laenge?, Hoehe?, Reinigereingriff?, Material?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? Rechentyp {
            get {
                XElement x = this.GetElement(RechentypXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(RechentypXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                }
                else {
                    this.SetElementWithValidation(RechentypXName, value, "Rechentyp", global::www.bfr.abwasser.de.RechentypType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Rechentyp?, Rechenrost?, Aufstellungsart?, Breite?, Laenge?, Hoehe?, Reinigereingriff?, Material?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? Rechenrost {
            get {
                XElement x = this.GetElement(RechenrostXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(RechenrostXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                }
                else {
                    this.SetElementWithValidation(RechenrostXName, value, "Rechenrost", global::www.bfr.abwasser.de.RechenrostType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Rechentyp?, Rechenrost?, Aufstellungsart?, Breite?, Laenge?, Hoehe?, Reinigereingriff?, Material?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? Aufstellungsart {
            get {
                XElement x = this.GetElement(AufstellungsartXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(AufstellungsartXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                }
                else {
                    this.SetElementWithValidation(AufstellungsartXName, value, "Aufstellungsart", global::www.bfr.abwasser.de.AufstellungsartType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Rechentyp?, Rechenrost?, Aufstellungsart?, Breite?, Laenge?, Hoehe?, Reinigereingriff?, Material?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? Breite {
            get {
                XElement x = this.GetElement(BreiteXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(BreiteXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                }
                else {
                    this.SetElementWithValidation(BreiteXName, value, "Breite", BreiteLocalType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Rechentyp?, Rechenrost?, Aufstellungsart?, Breite?, Laenge?, Hoehe?, Reinigereingriff?, Material?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? Laenge {
            get {
                XElement x = this.GetElement(LaengeXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(LaengeXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                }
                else {
                    this.SetElementWithValidation(LaengeXName, value, "Laenge", LaengeLocalType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Rechentyp?, Rechenrost?, Aufstellungsart?, Breite?, Laenge?, Hoehe?, Reinigereingriff?, Material?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? Hoehe {
            get {
                XElement x = this.GetElement(HoeheXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(HoeheXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                }
                else {
                    this.SetElementWithValidation(HoeheXName, value, "Hoehe", HoeheLocalType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Rechentyp?, Rechenrost?, Aufstellungsart?, Breite?, Laenge?, Hoehe?, Reinigereingriff?, Material?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? Reinigereingriff {
            get {
                XElement x = this.GetElement(ReinigereingriffXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(ReinigereingriffXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                }
                else {
                    this.SetElementWithValidation(ReinigereingriffXName, value, "Reinigereingriff", global::www.bfr.abwasser.de.ReinigereingriffType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Rechentyp?, Rechenrost?, Aufstellungsart?, Breite?, Laenge?, Hoehe?, Reinigereingriff?, Material?)
        /// </para>
        /// </summary>
        public virtual string Material {
            get {
                XElement x = this.GetElement(MaterialXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(MaterialXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                else {
                    this.SetElementWithValidation(MaterialXName, value, "Material", global::www.bfr.abwasser.de.MaterialType.TypeDefinition);
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<RechenType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(RechentypXName, typeof(decimal));
            localElementDictionary.Add(RechenrostXName, typeof(decimal));
            localElementDictionary.Add(AufstellungsartXName, typeof(decimal));
            localElementDictionary.Add(BreiteXName, typeof(decimal));
            localElementDictionary.Add(LaengeXName, typeof(decimal));
            localElementDictionary.Add(HoeheXName, typeof(decimal));
            localElementDictionary.Add(ReinigereingriffXName, typeof(decimal));
            localElementDictionary.Add(MaterialXName, typeof(string));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        private class BreiteLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(3200)), null, 2, 0, 1000m, null, 0, null, null, 0, null, 5, XmlSchemaWhiteSpace.Collapse));
            
            private BreiteLocalType() {
            }
        }
        
        private class LaengeLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(3200)), null, 2, 0, 1000m, null, 0, null, null, 0, null, 5, XmlSchemaWhiteSpace.Collapse));
            
            private LaengeLocalType() {
            }
        }
        
        private class HoeheLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(3200)), null, 2, 0, 1000m, null, 0, null, null, 0, null, 5, XmlSchemaWhiteSpace.Collapse));
            
            private HoeheLocalType() {
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Siebtyp?, Siebkoerper?, Aufstellungsart?, Einbauart?, Siebflaeche?, Material?)
    /// </para>
    /// </summary>
    public partial class SiebType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName SiebtypXName = System.Xml.Linq.XName.Get("Siebtyp", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName SiebkoerperXName = System.Xml.Linq.XName.Get("Siebkoerper", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName AufstellungsartXName = System.Xml.Linq.XName.Get("Aufstellungsart", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName EinbauartXName = System.Xml.Linq.XName.Get("Einbauart", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName SiebflaecheXName = System.Xml.Linq.XName.Get("Siebflaeche", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName MaterialXName = System.Xml.Linq.XName.Get("Material", "http://www.bfr-abwasser.de");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("SiebType", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator SiebType(XElement xe) { return XTypedServices.ToXTypedElement<SiebType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static SiebType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(SiebtypXName), new NamedContentModelEntity(SiebkoerperXName), new NamedContentModelEntity(AufstellungsartXName), new NamedContentModelEntity(EinbauartXName), new NamedContentModelEntity(SiebflaecheXName), new NamedContentModelEntity(MaterialXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Siebtyp?, Siebkoerper?, Aufstellungsart?, Einbauart?, Siebflaeche?, Material?)
        /// </para>
        /// </summary>
        public SiebType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Siebtyp?, Siebkoerper?, Aufstellungsart?, Einbauart?, Siebflaeche?, Material?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? Siebtyp {
            get {
                XElement x = this.GetElement(SiebtypXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(SiebtypXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                }
                else {
                    this.SetElementWithValidation(SiebtypXName, value, "Siebtyp", global::www.bfr.abwasser.de.SiebtypType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Siebtyp?, Siebkoerper?, Aufstellungsart?, Einbauart?, Siebflaeche?, Material?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? Siebkoerper {
            get {
                XElement x = this.GetElement(SiebkoerperXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(SiebkoerperXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                }
                else {
                    this.SetElementWithValidation(SiebkoerperXName, value, "Siebkoerper", global::www.bfr.abwasser.de.SiebkoerperType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Siebtyp?, Siebkoerper?, Aufstellungsart?, Einbauart?, Siebflaeche?, Material?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? Aufstellungsart {
            get {
                XElement x = this.GetElement(AufstellungsartXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(AufstellungsartXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                }
                else {
                    this.SetElementWithValidation(AufstellungsartXName, value, "Aufstellungsart", global::www.bfr.abwasser.de.AufstellungsartType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Siebtyp?, Siebkoerper?, Aufstellungsart?, Einbauart?, Siebflaeche?, Material?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? Einbauart {
            get {
                XElement x = this.GetElement(EinbauartXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(EinbauartXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                }
                else {
                    this.SetElementWithValidation(EinbauartXName, value, "Einbauart", global::www.bfr.abwasser.de.EinbauartType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Siebtyp?, Siebkoerper?, Aufstellungsart?, Einbauart?, Siebflaeche?, Material?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? Siebflaeche {
            get {
                XElement x = this.GetElement(SiebflaecheXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(SiebflaecheXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                }
                else {
                    this.SetElementWithValidation(SiebflaecheXName, value, "Siebflaeche", global::www.bfr.abwasser.de.SiebflaecheType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Siebtyp?, Siebkoerper?, Aufstellungsart?, Einbauart?, Siebflaeche?, Material?)
        /// </para>
        /// </summary>
        public virtual string Material {
            get {
                XElement x = this.GetElement(MaterialXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(MaterialXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                else {
                    this.SetElementWithValidation(MaterialXName, value, "Material", global::www.bfr.abwasser.de.MaterialType.TypeDefinition);
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<SiebType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(SiebtypXName, typeof(decimal));
            localElementDictionary.Add(SiebkoerperXName, typeof(decimal));
            localElementDictionary.Add(AufstellungsartXName, typeof(decimal));
            localElementDictionary.Add(EinbauartXName, typeof(decimal));
            localElementDictionary.Add(SiebflaecheXName, typeof(decimal));
            localElementDictionary.Add(MaterialXName, typeof(string));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (KlaeranlageFunktion?, Einwohnerwerte?)
    /// </para>
    /// </summary>
    public partial class KlaeranlageType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName KlaeranlageFunktionXName = System.Xml.Linq.XName.Get("KlaeranlageFunktion", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName EinwohnerwerteXName = System.Xml.Linq.XName.Get("Einwohnerwerte", "http://www.bfr-abwasser.de");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("KlaeranlageType", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator KlaeranlageType(XElement xe) { return XTypedServices.ToXTypedElement<KlaeranlageType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static KlaeranlageType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(KlaeranlageFunktionXName), new NamedContentModelEntity(EinwohnerwerteXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (KlaeranlageFunktion?, Einwohnerwerte?)
        /// </para>
        /// </summary>
        public KlaeranlageType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (KlaeranlageFunktion?, Einwohnerwerte?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? KlaeranlageFunktion {
            get {
                XElement x = this.GetElement(KlaeranlageFunktionXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(KlaeranlageFunktionXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                }
                else {
                    this.SetElementWithValidation(KlaeranlageFunktionXName, value, "KlaeranlageFunktion", global::www.bfr.abwasser.de.KlaeranlageFunktionType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (KlaeranlageFunktion?, Einwohnerwerte?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? Einwohnerwerte {
            get {
                XElement x = this.GetElement(EinwohnerwerteXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(EinwohnerwerteXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                }
                else {
                    this.SetElementWithValidation(EinwohnerwerteXName, value, "Einwohnerwerte", EinwohnerwerteLocalType.TypeDefinition);
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<KlaeranlageType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(KlaeranlageFunktionXName, typeof(decimal));
            localElementDictionary.Add(EinwohnerwerteXName, typeof(decimal));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        private class EinwohnerwerteLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(1024)), null, 0, 0, null, null, 0, null, null, 0, null, 7, XmlSchemaWhiteSpace.Collapse));
            
            private EinwohnerwerteLocalType() {
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Pumpenart?, FoerderhoeheGesamt?, FoerderhoeheManometrisch?, Leistungsaufnahme?, Leistung?)
    /// </para>
    /// </summary>
    public partial class PumpeType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName PumpenartXName = System.Xml.Linq.XName.Get("Pumpenart", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName FoerderhoeheGesamtXName = System.Xml.Linq.XName.Get("FoerderhoeheGesamt", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName FoerderhoeheManometrischXName = System.Xml.Linq.XName.Get("FoerderhoeheManometrisch", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName LeistungsaufnahmeXName = System.Xml.Linq.XName.Get("Leistungsaufnahme", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName LeistungXName = System.Xml.Linq.XName.Get("Leistung", "http://www.bfr-abwasser.de");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("PumpeType", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator PumpeType(XElement xe) { return XTypedServices.ToXTypedElement<PumpeType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static PumpeType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(PumpenartXName), new NamedContentModelEntity(FoerderhoeheGesamtXName), new NamedContentModelEntity(FoerderhoeheManometrischXName), new NamedContentModelEntity(LeistungsaufnahmeXName), new NamedContentModelEntity(LeistungXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Pumpenart?, FoerderhoeheGesamt?, FoerderhoeheManometrisch?, Leistungsaufnahme?, Leistung?)
        /// </para>
        /// </summary>
        public PumpeType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Pumpenart?, FoerderhoeheGesamt?, FoerderhoeheManometrisch?, Leistungsaufnahme?, Leistung?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? Pumpenart {
            get {
                XElement x = this.GetElement(PumpenartXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(PumpenartXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                }
                else {
                    this.SetElementWithValidation(PumpenartXName, value, "Pumpenart", global::www.bfr.abwasser.de.PumpenartType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Pumpenart?, FoerderhoeheGesamt?, FoerderhoeheManometrisch?, Leistungsaufnahme?, Leistung?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? FoerderhoeheGesamt {
            get {
                XElement x = this.GetElement(FoerderhoeheGesamtXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(FoerderhoeheGesamtXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                }
                else {
                    this.SetElementWithValidation(FoerderhoeheGesamtXName, value, "FoerderhoeheGesamt", FoerderhoeheGesamtLocalType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Pumpenart?, FoerderhoeheGesamt?, FoerderhoeheManometrisch?, Leistungsaufnahme?, Leistung?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? FoerderhoeheManometrisch {
            get {
                XElement x = this.GetElement(FoerderhoeheManometrischXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(FoerderhoeheManometrischXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                }
                else {
                    this.SetElementWithValidation(FoerderhoeheManometrischXName, value, "FoerderhoeheManometrisch", FoerderhoeheManometrischLocalType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Pumpenart?, FoerderhoeheGesamt?, FoerderhoeheManometrisch?, Leistungsaufnahme?, Leistung?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? Leistungsaufnahme {
            get {
                XElement x = this.GetElement(LeistungsaufnahmeXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(LeistungsaufnahmeXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                }
                else {
                    this.SetElementWithValidation(LeistungsaufnahmeXName, value, "Leistungsaufnahme", LeistungsaufnahmeLocalType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Pumpenart?, FoerderhoeheGesamt?, FoerderhoeheManometrisch?, Leistungsaufnahme?, Leistung?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? Leistung {
            get {
                XElement x = this.GetElement(LeistungXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(LeistungXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                }
                else {
                    this.SetElementWithValidation(LeistungXName, value, "Leistung", LeistungLocalType.TypeDefinition);
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<PumpeType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(PumpenartXName, typeof(decimal));
            localElementDictionary.Add(FoerderhoeheGesamtXName, typeof(decimal));
            localElementDictionary.Add(FoerderhoeheManometrischXName, typeof(decimal));
            localElementDictionary.Add(LeistungsaufnahmeXName, typeof(decimal));
            localElementDictionary.Add(LeistungXName, typeof(decimal));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        private class FoerderhoeheGesamtLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(3200)), null, 2, 0, 10000m, null, 0, null, null, 0, null, 6, XmlSchemaWhiteSpace.Collapse));
            
            private FoerderhoeheGesamtLocalType() {
            }
        }
        
        private class FoerderhoeheManometrischLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(3200)), null, 2, 0, 10000m, null, 0, null, null, 0, null, 6, XmlSchemaWhiteSpace.Collapse));
            
            private FoerderhoeheManometrischLocalType() {
            }
        }
        
        private class LeistungsaufnahmeLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(3200)), null, 2, 0, 100000m, null, 0, null, null, 0, null, 7, XmlSchemaWhiteSpace.Collapse));
            
            private LeistungsaufnahmeLocalType() {
            }
        }
        
        private class LeistungLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(3200)), null, 3, 0, 10000m, null, 0, null, null, 0, null, 7, XmlSchemaWhiteSpace.Collapse));
            
            private LeistungLocalType() {
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (WehrFunktion?, Wehrtyp?, Oeffnungsweite?, SchwellenhoeheMin?, SchwellenhoeheMax?, LaengeWehrschwelle?, ArtWehrkrone?, Verfahrgeschwindigkeit?)
    /// </para>
    /// </summary>
    public partial class WehrUeberlaufType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName WehrFunktionXName = System.Xml.Linq.XName.Get("WehrFunktion", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName WehrtypXName = System.Xml.Linq.XName.Get("Wehrtyp", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName OeffnungsweiteXName = System.Xml.Linq.XName.Get("Oeffnungsweite", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName SchwellenhoeheMinXName = System.Xml.Linq.XName.Get("SchwellenhoeheMin", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName SchwellenhoeheMaxXName = System.Xml.Linq.XName.Get("SchwellenhoeheMax", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName LaengeWehrschwelleXName = System.Xml.Linq.XName.Get("LaengeWehrschwelle", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ArtWehrkroneXName = System.Xml.Linq.XName.Get("ArtWehrkrone", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName VerfahrgeschwindigkeitXName = System.Xml.Linq.XName.Get("Verfahrgeschwindigkeit", "http://www.bfr-abwasser.de");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("WehrUeberlaufType", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator WehrUeberlaufType(XElement xe) { return XTypedServices.ToXTypedElement<WehrUeberlaufType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static WehrUeberlaufType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(WehrFunktionXName), new NamedContentModelEntity(WehrtypXName), new NamedContentModelEntity(OeffnungsweiteXName), new NamedContentModelEntity(SchwellenhoeheMinXName), new NamedContentModelEntity(SchwellenhoeheMaxXName), new NamedContentModelEntity(LaengeWehrschwelleXName), new NamedContentModelEntity(ArtWehrkroneXName), new NamedContentModelEntity(VerfahrgeschwindigkeitXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (WehrFunktion?, Wehrtyp?, Oeffnungsweite?, SchwellenhoeheMin?, SchwellenhoeheMax?, LaengeWehrschwelle?, ArtWehrkrone?, Verfahrgeschwindigkeit?)
        /// </para>
        /// </summary>
        public WehrUeberlaufType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (WehrFunktion?, Wehrtyp?, Oeffnungsweite?, SchwellenhoeheMin?, SchwellenhoeheMax?, LaengeWehrschwelle?, ArtWehrkrone?, Verfahrgeschwindigkeit?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? WehrFunktion {
            get {
                XElement x = this.GetElement(WehrFunktionXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(WehrFunktionXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                }
                else {
                    this.SetElementWithValidation(WehrFunktionXName, value, "WehrFunktion", global::www.bfr.abwasser.de.WehrFunktionType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (WehrFunktion?, Wehrtyp?, Oeffnungsweite?, SchwellenhoeheMin?, SchwellenhoeheMax?, LaengeWehrschwelle?, ArtWehrkrone?, Verfahrgeschwindigkeit?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? Wehrtyp {
            get {
                XElement x = this.GetElement(WehrtypXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(WehrtypXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                }
                else {
                    this.SetElementWithValidation(WehrtypXName, value, "Wehrtyp", global::www.bfr.abwasser.de.WehrtypType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (WehrFunktion?, Wehrtyp?, Oeffnungsweite?, SchwellenhoeheMin?, SchwellenhoeheMax?, LaengeWehrschwelle?, ArtWehrkrone?, Verfahrgeschwindigkeit?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? Oeffnungsweite {
            get {
                XElement x = this.GetElement(OeffnungsweiteXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(OeffnungsweiteXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                }
                else {
                    this.SetElementWithValidation(OeffnungsweiteXName, value, "Oeffnungsweite", OeffnungsweiteLocalType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (WehrFunktion?, Wehrtyp?, Oeffnungsweite?, SchwellenhoeheMin?, SchwellenhoeheMax?, LaengeWehrschwelle?, ArtWehrkrone?, Verfahrgeschwindigkeit?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? SchwellenhoeheMin {
            get {
                XElement x = this.GetElement(SchwellenhoeheMinXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(SchwellenhoeheMinXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                }
                else {
                    this.SetElementWithValidation(SchwellenhoeheMinXName, value, "SchwellenhoeheMin", SchwellenhoeheMinLocalType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (WehrFunktion?, Wehrtyp?, Oeffnungsweite?, SchwellenhoeheMin?, SchwellenhoeheMax?, LaengeWehrschwelle?, ArtWehrkrone?, Verfahrgeschwindigkeit?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? SchwellenhoeheMax {
            get {
                XElement x = this.GetElement(SchwellenhoeheMaxXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(SchwellenhoeheMaxXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                }
                else {
                    this.SetElementWithValidation(SchwellenhoeheMaxXName, value, "SchwellenhoeheMax", SchwellenhoeheMaxLocalType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (WehrFunktion?, Wehrtyp?, Oeffnungsweite?, SchwellenhoeheMin?, SchwellenhoeheMax?, LaengeWehrschwelle?, ArtWehrkrone?, Verfahrgeschwindigkeit?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? LaengeWehrschwelle {
            get {
                XElement x = this.GetElement(LaengeWehrschwelleXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(LaengeWehrschwelleXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                }
                else {
                    this.SetElementWithValidation(LaengeWehrschwelleXName, value, "LaengeWehrschwelle", LaengeWehrschwelleLocalType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (WehrFunktion?, Wehrtyp?, Oeffnungsweite?, SchwellenhoeheMin?, SchwellenhoeheMax?, LaengeWehrschwelle?, ArtWehrkrone?, Verfahrgeschwindigkeit?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? ArtWehrkrone {
            get {
                XElement x = this.GetElement(ArtWehrkroneXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(ArtWehrkroneXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                }
                else {
                    this.SetElementWithValidation(ArtWehrkroneXName, value, "ArtWehrkrone", global::www.bfr.abwasser.de.WehrkroneType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (WehrFunktion?, Wehrtyp?, Oeffnungsweite?, SchwellenhoeheMin?, SchwellenhoeheMax?, LaengeWehrschwelle?, ArtWehrkrone?, Verfahrgeschwindigkeit?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? Verfahrgeschwindigkeit {
            get {
                XElement x = this.GetElement(VerfahrgeschwindigkeitXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(VerfahrgeschwindigkeitXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                }
                else {
                    this.SetElementWithValidation(VerfahrgeschwindigkeitXName, value, "Verfahrgeschwindigkeit", VerfahrgeschwindigkeitLocalType.TypeDefinition);
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<WehrUeberlaufType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(WehrFunktionXName, typeof(decimal));
            localElementDictionary.Add(WehrtypXName, typeof(decimal));
            localElementDictionary.Add(OeffnungsweiteXName, typeof(decimal));
            localElementDictionary.Add(SchwellenhoeheMinXName, typeof(decimal));
            localElementDictionary.Add(SchwellenhoeheMaxXName, typeof(decimal));
            localElementDictionary.Add(LaengeWehrschwelleXName, typeof(decimal));
            localElementDictionary.Add(ArtWehrkroneXName, typeof(decimal));
            localElementDictionary.Add(VerfahrgeschwindigkeitXName, typeof(decimal));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        private class OeffnungsweiteLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(3200)), null, 2, 0, 100m, null, 0, null, null, 0, null, 4, XmlSchemaWhiteSpace.Collapse));
            
            private OeffnungsweiteLocalType() {
            }
        }
        
        private class SchwellenhoeheMinLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(3200)), null, 2, 0, 10000m, null, 0, null, null, 0, null, 6, XmlSchemaWhiteSpace.Collapse));
            
            private SchwellenhoeheMinLocalType() {
            }
        }
        
        private class SchwellenhoeheMaxLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(3200)), null, 2, 0, 10000m, null, 0, null, null, 0, null, 6, XmlSchemaWhiteSpace.Collapse));
            
            private SchwellenhoeheMaxLocalType() {
            }
        }
        
        private class LaengeWehrschwelleLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(3200)), null, 2, 0, 10000m, null, 0, null, null, 0, null, 6, XmlSchemaWhiteSpace.Collapse));
            
            private LaengeWehrschwelleLocalType() {
            }
        }
        
        private class VerfahrgeschwindigkeitLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(3200)), null, 2, 0, 100m, null, 0, null, null, 0, null, 4, XmlSchemaWhiteSpace.Collapse));
            
            private VerfahrgeschwindigkeitLocalType() {
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Ablaufart?, Nennleistung?)
    /// </para>
    /// </summary>
    public partial class DrosselType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName AblaufartXName = System.Xml.Linq.XName.Get("Ablaufart", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName NennleistungXName = System.Xml.Linq.XName.Get("Nennleistung", "http://www.bfr-abwasser.de");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("DrosselType", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator DrosselType(XElement xe) { return XTypedServices.ToXTypedElement<DrosselType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static DrosselType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(AblaufartXName), new NamedContentModelEntity(NennleistungXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Ablaufart?, Nennleistung?)
        /// </para>
        /// </summary>
        public DrosselType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Ablaufart?, Nennleistung?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? Ablaufart {
            get {
                XElement x = this.GetElement(AblaufartXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(AblaufartXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                }
                else {
                    this.SetElementWithValidation(AblaufartXName, value, "Ablaufart", global::www.bfr.abwasser.de.AblaufartType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Ablaufart?, Nennleistung?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? Nennleistung {
            get {
                XElement x = this.GetElement(NennleistungXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(NennleistungXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                }
                else {
                    this.SetElementWithValidation(NennleistungXName, value, "Nennleistung", NennleistungLocalType.TypeDefinition);
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<DrosselType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(AblaufartXName, typeof(decimal));
            localElementDictionary.Add(NennleistungXName, typeof(decimal));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        private class NennleistungLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(3200)), null, 2, 0, 10000m, null, 0, null, null, 0, null, 6, XmlSchemaWhiteSpace.Collapse));
            
            private NennleistungLocalType() {
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (SchieberFunktion?, Schieberart?, Schieberbreite?, SchieberNulllage?, HubhoeheMax?, Verfahrgeschwindigkeit?)
    /// </para>
    /// </summary>
    public partial class SchieberType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName SchieberFunktionXName = System.Xml.Linq.XName.Get("SchieberFunktion", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName SchieberartXName = System.Xml.Linq.XName.Get("Schieberart", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName SchieberbreiteXName = System.Xml.Linq.XName.Get("Schieberbreite", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName SchieberNulllageXName = System.Xml.Linq.XName.Get("SchieberNulllage", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName HubhoeheMaxXName = System.Xml.Linq.XName.Get("HubhoeheMax", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName VerfahrgeschwindigkeitXName = System.Xml.Linq.XName.Get("Verfahrgeschwindigkeit", "http://www.bfr-abwasser.de");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("SchieberType", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator SchieberType(XElement xe) { return XTypedServices.ToXTypedElement<SchieberType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static SchieberType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(SchieberFunktionXName), new NamedContentModelEntity(SchieberartXName), new NamedContentModelEntity(SchieberbreiteXName), new NamedContentModelEntity(SchieberNulllageXName), new NamedContentModelEntity(HubhoeheMaxXName), new NamedContentModelEntity(VerfahrgeschwindigkeitXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (SchieberFunktion?, Schieberart?, Schieberbreite?, SchieberNulllage?, HubhoeheMax?, Verfahrgeschwindigkeit?)
        /// </para>
        /// </summary>
        public SchieberType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (SchieberFunktion?, Schieberart?, Schieberbreite?, SchieberNulllage?, HubhoeheMax?, Verfahrgeschwindigkeit?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? SchieberFunktion {
            get {
                XElement x = this.GetElement(SchieberFunktionXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(SchieberFunktionXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                }
                else {
                    this.SetElementWithValidation(SchieberFunktionXName, value, "SchieberFunktion", global::www.bfr.abwasser.de.SchieberFunktionType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (SchieberFunktion?, Schieberart?, Schieberbreite?, SchieberNulllage?, HubhoeheMax?, Verfahrgeschwindigkeit?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? Schieberart {
            get {
                XElement x = this.GetElement(SchieberartXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(SchieberartXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                }
                else {
                    this.SetElementWithValidation(SchieberartXName, value, "Schieberart", global::www.bfr.abwasser.de.SchieberartType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (SchieberFunktion?, Schieberart?, Schieberbreite?, SchieberNulllage?, HubhoeheMax?, Verfahrgeschwindigkeit?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? Schieberbreite {
            get {
                XElement x = this.GetElement(SchieberbreiteXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(SchieberbreiteXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                }
                else {
                    this.SetElementWithValidation(SchieberbreiteXName, value, "Schieberbreite", SchieberbreiteLocalType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (SchieberFunktion?, Schieberart?, Schieberbreite?, SchieberNulllage?, HubhoeheMax?, Verfahrgeschwindigkeit?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? SchieberNulllage {
            get {
                XElement x = this.GetElement(SchieberNulllageXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(SchieberNulllageXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                }
                else {
                    this.SetElementWithValidation(SchieberNulllageXName, value, "SchieberNulllage", SchieberNulllageLocalType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (SchieberFunktion?, Schieberart?, Schieberbreite?, SchieberNulllage?, HubhoeheMax?, Verfahrgeschwindigkeit?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? HubhoeheMax {
            get {
                XElement x = this.GetElement(HubhoeheMaxXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(HubhoeheMaxXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                }
                else {
                    this.SetElementWithValidation(HubhoeheMaxXName, value, "HubhoeheMax", HubhoeheMaxLocalType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (SchieberFunktion?, Schieberart?, Schieberbreite?, SchieberNulllage?, HubhoeheMax?, Verfahrgeschwindigkeit?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? Verfahrgeschwindigkeit {
            get {
                XElement x = this.GetElement(VerfahrgeschwindigkeitXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(VerfahrgeschwindigkeitXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                }
                else {
                    this.SetElementWithValidation(VerfahrgeschwindigkeitXName, value, "Verfahrgeschwindigkeit", VerfahrgeschwindigkeitLocalType.TypeDefinition);
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<SchieberType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(SchieberFunktionXName, typeof(decimal));
            localElementDictionary.Add(SchieberartXName, typeof(decimal));
            localElementDictionary.Add(SchieberbreiteXName, typeof(decimal));
            localElementDictionary.Add(SchieberNulllageXName, typeof(decimal));
            localElementDictionary.Add(HubhoeheMaxXName, typeof(decimal));
            localElementDictionary.Add(VerfahrgeschwindigkeitXName, typeof(decimal));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        private class SchieberbreiteLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(3200)), null, 2, 0, 1000m, null, 0, null, null, 0, null, 5, XmlSchemaWhiteSpace.Collapse));
            
            private SchieberbreiteLocalType() {
            }
        }
        
        private class SchieberNulllageLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(3200)), null, 2, 0, 10000m, null, 0, null, null, 0, null, 6, XmlSchemaWhiteSpace.Collapse));
            
            private SchieberNulllageLocalType() {
            }
        }
        
        private class HubhoeheMaxLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(3200)), null, 2, 0, 10000m, null, 0, null, null, 0, null, 6, XmlSchemaWhiteSpace.Collapse));
            
            private HubhoeheMaxLocalType() {
            }
        }
        
        private class VerfahrgeschwindigkeitLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(3200)), null, 2, 0, 100m, null, 0, null, null, 0, null, 4, XmlSchemaWhiteSpace.Collapse));
            
            private VerfahrgeschwindigkeitLocalType() {
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Versickerungsanlagetyp, DatumInbetriebnahme?, ArtFlaechenanschluss?, MaxVersickerungsleistung?, Bemessungshaeufigkeit?, Umfeld?, (Mulde_Teich | Rohr_Rigole | Versickerungsschacht | Versickerungsflaeche))
    /// </para>
    /// </summary>
    public partial class VersickerungsanlageType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName VersickerungsanlagetypXName = System.Xml.Linq.XName.Get("Versickerungsanlagetyp", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName DatumInbetriebnahmeXName = System.Xml.Linq.XName.Get("DatumInbetriebnahme", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ArtFlaechenanschlussXName = System.Xml.Linq.XName.Get("ArtFlaechenanschluss", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName MaxVersickerungsleistungXName = System.Xml.Linq.XName.Get("MaxVersickerungsleistung", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName BemessungshaeufigkeitXName = System.Xml.Linq.XName.Get("Bemessungshaeufigkeit", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName UmfeldXName = System.Xml.Linq.XName.Get("Umfeld", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName Mulde_TeichXName = System.Xml.Linq.XName.Get("Mulde_Teich", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName Rohr_RigoleXName = System.Xml.Linq.XName.Get("Rohr_Rigole", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName VersickerungsschachtXName = System.Xml.Linq.XName.Get("Versickerungsschacht", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName VersickerungsflaecheXName = System.Xml.Linq.XName.Get("Versickerungsflaeche", "http://www.bfr-abwasser.de");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("VersickerungsanlageType", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator VersickerungsanlageType(XElement xe) { return XTypedServices.ToXTypedElement<VersickerungsanlageType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static VersickerungsanlageType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(VersickerungsanlagetypXName), new NamedContentModelEntity(DatumInbetriebnahmeXName), new NamedContentModelEntity(ArtFlaechenanschlussXName), new NamedContentModelEntity(MaxVersickerungsleistungXName), new NamedContentModelEntity(BemessungshaeufigkeitXName), new NamedContentModelEntity(UmfeldXName), new ChoiceContentModelEntity(new NamedContentModelEntity(Mulde_TeichXName), new NamedContentModelEntity(Rohr_RigoleXName), new NamedContentModelEntity(VersickerungsschachtXName), new NamedContentModelEntity(VersickerungsflaecheXName)));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Versickerungsanlagetyp, DatumInbetriebnahme?, ArtFlaechenanschluss?, MaxVersickerungsleistung?, Bemessungshaeufigkeit?, Umfeld?, (Mulde_Teich | Rohr_Rigole | Versickerungsschacht | Versickerungsflaeche))
        /// </para>
        /// </summary>
        public VersickerungsanlageType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (Versickerungsanlagetyp, DatumInbetriebnahme?, ArtFlaechenanschluss?, MaxVersickerungsleistung?, Bemessungshaeufigkeit?, Umfeld?, (Mulde_Teich | Rohr_Rigole | Versickerungsschacht | Versickerungsflaeche))
        /// </para>
        /// </summary>
        public virtual decimal Versickerungsanlagetyp {
            get {
                XElement x = this.GetElement(VersickerungsanlagetypXName);
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                this.SetElementWithValidation(VersickerungsanlagetypXName, value, "Versickerungsanlagetyp", global::www.bfr.abwasser.de.VersickerungsanlagetypType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Versickerungsanlagetyp, DatumInbetriebnahme?, ArtFlaechenanschluss?, MaxVersickerungsleistung?, Bemessungshaeufigkeit?, Umfeld?, (Mulde_Teich | Rohr_Rigole | Versickerungsschacht | Versickerungsflaeche))
        /// </para>
        /// </summary>
        public virtual System.DateTime? DatumInbetriebnahme {
            get {
                XElement x = this.GetElement(DatumInbetriebnahmeXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<System.DateTime>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date).Datatype);
            }
            set {
                this.SetElement(DatumInbetriebnahmeXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Versickerungsanlagetyp, DatumInbetriebnahme?, ArtFlaechenanschluss?, MaxVersickerungsleistung?, Bemessungshaeufigkeit?, Umfeld?, (Mulde_Teich | Rohr_Rigole | Versickerungsschacht | Versickerungsflaeche))
        /// </para>
        /// </summary>
        public virtual System.Decimal? ArtFlaechenanschluss {
            get {
                XElement x = this.GetElement(ArtFlaechenanschlussXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(ArtFlaechenanschlussXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                }
                else {
                    this.SetElementWithValidation(ArtFlaechenanschlussXName, value, "ArtFlaechenanschluss", global::www.bfr.abwasser.de.ArtFlaechenanschlussType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Versickerungsanlagetyp, DatumInbetriebnahme?, ArtFlaechenanschluss?, MaxVersickerungsleistung?, Bemessungshaeufigkeit?, Umfeld?, (Mulde_Teich | Rohr_Rigole | Versickerungsschacht | Versickerungsflaeche))
        /// </para>
        /// </summary>
        public virtual System.Decimal? MaxVersickerungsleistung {
            get {
                XElement x = this.GetElement(MaxVersickerungsleistungXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(MaxVersickerungsleistungXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                }
                else {
                    this.SetElementWithValidation(MaxVersickerungsleistungXName, value, "MaxVersickerungsleistung", MaxVersickerungsleistungLocalType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Versickerungsanlagetyp, DatumInbetriebnahme?, ArtFlaechenanschluss?, MaxVersickerungsleistung?, Bemessungshaeufigkeit?, Umfeld?, (Mulde_Teich | Rohr_Rigole | Versickerungsschacht | Versickerungsflaeche))
        /// </para>
        /// </summary>
        public virtual System.Decimal? Bemessungshaeufigkeit {
            get {
                XElement x = this.GetElement(BemessungshaeufigkeitXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(BemessungshaeufigkeitXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                }
                else {
                    this.SetElementWithValidation(BemessungshaeufigkeitXName, value, "Bemessungshaeufigkeit", BemessungshaeufigkeitLocalType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Versickerungsanlagetyp, DatumInbetriebnahme?, ArtFlaechenanschluss?, MaxVersickerungsleistung?, Bemessungshaeufigkeit?, Umfeld?, (Mulde_Teich | Rohr_Rigole | Versickerungsschacht | Versickerungsflaeche))
        /// </para>
        /// </summary>
        public virtual string Umfeld {
            get {
                XElement x = this.GetElement(UmfeldXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(UmfeldXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                else {
                    this.SetElementWithValidation(UmfeldXName, value, "Umfeld", UmfeldLocalType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (Versickerungsanlagetyp, DatumInbetriebnahme?, ArtFlaechenanschluss?, MaxVersickerungsleistung?, Bemessungshaeufigkeit?, Umfeld?, (Mulde_Teich | Rohr_Rigole | Versickerungsschacht | Versickerungsflaeche))
        /// </para>
        /// </summary>
        public virtual MuldeTeichType Mulde_Teich {
            get {
                XElement x = this.GetElement(Mulde_TeichXName);
                return ((MuldeTeichType)(x));
            }
            set {
                this.SetElement(Mulde_TeichXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (Versickerungsanlagetyp, DatumInbetriebnahme?, ArtFlaechenanschluss?, MaxVersickerungsleistung?, Bemessungshaeufigkeit?, Umfeld?, (Mulde_Teich | Rohr_Rigole | Versickerungsschacht | Versickerungsflaeche))
        /// </para>
        /// </summary>
        public virtual RohrRigoleType Rohr_Rigole {
            get {
                XElement x = this.GetElement(Rohr_RigoleXName);
                return ((RohrRigoleType)(x));
            }
            set {
                this.SetElement(Rohr_RigoleXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (Versickerungsanlagetyp, DatumInbetriebnahme?, ArtFlaechenanschluss?, MaxVersickerungsleistung?, Bemessungshaeufigkeit?, Umfeld?, (Mulde_Teich | Rohr_Rigole | Versickerungsschacht | Versickerungsflaeche))
        /// </para>
        /// </summary>
        public virtual VersickerungsschachtType Versickerungsschacht {
            get {
                XElement x = this.GetElement(VersickerungsschachtXName);
                return ((VersickerungsschachtType)(x));
            }
            set {
                this.SetElement(VersickerungsschachtXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (Versickerungsanlagetyp, DatumInbetriebnahme?, ArtFlaechenanschluss?, MaxVersickerungsleistung?, Bemessungshaeufigkeit?, Umfeld?, (Mulde_Teich | Rohr_Rigole | Versickerungsschacht | Versickerungsflaeche))
        /// </para>
        /// </summary>
        public virtual VersickerungsflaecheType Versickerungsflaeche {
            get {
                XElement x = this.GetElement(VersickerungsflaecheXName);
                return ((VersickerungsflaecheType)(x));
            }
            set {
                this.SetElement(VersickerungsflaecheXName, value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<VersickerungsanlageType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(VersickerungsanlagetypXName, typeof(decimal));
            localElementDictionary.Add(DatumInbetriebnahmeXName, typeof(System.DateTime));
            localElementDictionary.Add(ArtFlaechenanschlussXName, typeof(decimal));
            localElementDictionary.Add(MaxVersickerungsleistungXName, typeof(decimal));
            localElementDictionary.Add(BemessungshaeufigkeitXName, typeof(decimal));
            localElementDictionary.Add(UmfeldXName, typeof(string));
            localElementDictionary.Add(Mulde_TeichXName, typeof(MuldeTeichType));
            localElementDictionary.Add(Rohr_RigoleXName, typeof(RohrRigoleType));
            localElementDictionary.Add(VersickerungsschachtXName, typeof(VersickerungsschachtType));
            localElementDictionary.Add(VersickerungsflaecheXName, typeof(VersickerungsflaecheType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        private class MaxVersickerungsleistungLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(3200)), null, 2, 0, 10000000m, null, 0, null, null, 0, null, 9, XmlSchemaWhiteSpace.Collapse));
            
            private MaxVersickerungsleistungLocalType() {
            }
        }
        
        private class BemessungshaeufigkeitLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(3200)), null, 2, 0, 100m, null, 0, null, null, 0, null, 4, XmlSchemaWhiteSpace.Collapse));
            
            private BemessungshaeufigkeitLocalType() {
            }
        }
        
        private class UmfeldLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(4)), null, 0, 0, null, null, 30, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
            
            private UmfeldLocalType() {
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Laenge?, Breite?, Tiefe?, GrundflaecheVa?, FlaecheDauerstau?, HoeheDauerstau?, BoeschungVa?, StaerkeBodenschicht?, MaxEinstauhoehe?, Speichervolumen?, ExistenzUeberlauf?, Ueberlauf?)
    /// </para>
    /// </summary>
    public partial class MuldeTeichType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName LaengeXName = System.Xml.Linq.XName.Get("Laenge", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName BreiteXName = System.Xml.Linq.XName.Get("Breite", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TiefeXName = System.Xml.Linq.XName.Get("Tiefe", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName GrundflaecheVaXName = System.Xml.Linq.XName.Get("GrundflaecheVa", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName FlaecheDauerstauXName = System.Xml.Linq.XName.Get("FlaecheDauerstau", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName HoeheDauerstauXName = System.Xml.Linq.XName.Get("HoeheDauerstau", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName BoeschungVaXName = System.Xml.Linq.XName.Get("BoeschungVa", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName StaerkeBodenschichtXName = System.Xml.Linq.XName.Get("StaerkeBodenschicht", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName MaxEinstauhoeheXName = System.Xml.Linq.XName.Get("MaxEinstauhoehe", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName SpeichervolumenXName = System.Xml.Linq.XName.Get("Speichervolumen", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ExistenzUeberlaufXName = System.Xml.Linq.XName.Get("ExistenzUeberlauf", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName UeberlaufXName = System.Xml.Linq.XName.Get("Ueberlauf", "http://www.bfr-abwasser.de");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("MuldeTeichType", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator MuldeTeichType(XElement xe) { return XTypedServices.ToXTypedElement<MuldeTeichType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static MuldeTeichType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(LaengeXName), new NamedContentModelEntity(BreiteXName), new NamedContentModelEntity(TiefeXName), new NamedContentModelEntity(GrundflaecheVaXName), new NamedContentModelEntity(FlaecheDauerstauXName), new NamedContentModelEntity(HoeheDauerstauXName), new NamedContentModelEntity(BoeschungVaXName), new NamedContentModelEntity(StaerkeBodenschichtXName), new NamedContentModelEntity(MaxEinstauhoeheXName), new NamedContentModelEntity(SpeichervolumenXName), new NamedContentModelEntity(ExistenzUeberlaufXName), new NamedContentModelEntity(UeberlaufXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Laenge?, Breite?, Tiefe?, GrundflaecheVa?, FlaecheDauerstau?, HoeheDauerstau?, BoeschungVa?, StaerkeBodenschicht?, MaxEinstauhoehe?, Speichervolumen?, ExistenzUeberlauf?, Ueberlauf?)
        /// </para>
        /// </summary>
        public MuldeTeichType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Laenge?, Breite?, Tiefe?, GrundflaecheVa?, FlaecheDauerstau?, HoeheDauerstau?, BoeschungVa?, StaerkeBodenschicht?, MaxEinstauhoehe?, Speichervolumen?, ExistenzUeberlauf?, Ueberlauf?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? Laenge {
            get {
                XElement x = this.GetElement(LaengeXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(LaengeXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                }
                else {
                    this.SetElementWithValidation(LaengeXName, value, "Laenge", LaengeLocalType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Laenge?, Breite?, Tiefe?, GrundflaecheVa?, FlaecheDauerstau?, HoeheDauerstau?, BoeschungVa?, StaerkeBodenschicht?, MaxEinstauhoehe?, Speichervolumen?, ExistenzUeberlauf?, Ueberlauf?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? Breite {
            get {
                XElement x = this.GetElement(BreiteXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(BreiteXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                }
                else {
                    this.SetElementWithValidation(BreiteXName, value, "Breite", BreiteLocalType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Laenge?, Breite?, Tiefe?, GrundflaecheVa?, FlaecheDauerstau?, HoeheDauerstau?, BoeschungVa?, StaerkeBodenschicht?, MaxEinstauhoehe?, Speichervolumen?, ExistenzUeberlauf?, Ueberlauf?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? Tiefe {
            get {
                XElement x = this.GetElement(TiefeXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(TiefeXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                }
                else {
                    this.SetElementWithValidation(TiefeXName, value, "Tiefe", TiefeLocalType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Laenge?, Breite?, Tiefe?, GrundflaecheVa?, FlaecheDauerstau?, HoeheDauerstau?, BoeschungVa?, StaerkeBodenschicht?, MaxEinstauhoehe?, Speichervolumen?, ExistenzUeberlauf?, Ueberlauf?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? GrundflaecheVa {
            get {
                XElement x = this.GetElement(GrundflaecheVaXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(GrundflaecheVaXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                }
                else {
                    this.SetElementWithValidation(GrundflaecheVaXName, value, "GrundflaecheVa", GrundflaecheVaLocalType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Laenge?, Breite?, Tiefe?, GrundflaecheVa?, FlaecheDauerstau?, HoeheDauerstau?, BoeschungVa?, StaerkeBodenschicht?, MaxEinstauhoehe?, Speichervolumen?, ExistenzUeberlauf?, Ueberlauf?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? FlaecheDauerstau {
            get {
                XElement x = this.GetElement(FlaecheDauerstauXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(FlaecheDauerstauXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                }
                else {
                    this.SetElementWithValidation(FlaecheDauerstauXName, value, "FlaecheDauerstau", FlaecheDauerstauLocalType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Laenge?, Breite?, Tiefe?, GrundflaecheVa?, FlaecheDauerstau?, HoeheDauerstau?, BoeschungVa?, StaerkeBodenschicht?, MaxEinstauhoehe?, Speichervolumen?, ExistenzUeberlauf?, Ueberlauf?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? HoeheDauerstau {
            get {
                XElement x = this.GetElement(HoeheDauerstauXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(HoeheDauerstauXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                }
                else {
                    this.SetElementWithValidation(HoeheDauerstauXName, value, "HoeheDauerstau", HoeheDauerstauLocalType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Laenge?, Breite?, Tiefe?, GrundflaecheVa?, FlaecheDauerstau?, HoeheDauerstau?, BoeschungVa?, StaerkeBodenschicht?, MaxEinstauhoehe?, Speichervolumen?, ExistenzUeberlauf?, Ueberlauf?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? BoeschungVa {
            get {
                XElement x = this.GetElement(BoeschungVaXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(BoeschungVaXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                }
                else {
                    this.SetElementWithValidation(BoeschungVaXName, value, "BoeschungVa", BoeschungVaLocalType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Laenge?, Breite?, Tiefe?, GrundflaecheVa?, FlaecheDauerstau?, HoeheDauerstau?, BoeschungVa?, StaerkeBodenschicht?, MaxEinstauhoehe?, Speichervolumen?, ExistenzUeberlauf?, Ueberlauf?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? StaerkeBodenschicht {
            get {
                XElement x = this.GetElement(StaerkeBodenschichtXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(StaerkeBodenschichtXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                }
                else {
                    this.SetElementWithValidation(StaerkeBodenschichtXName, value, "StaerkeBodenschicht", StaerkeBodenschichtLocalType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Laenge?, Breite?, Tiefe?, GrundflaecheVa?, FlaecheDauerstau?, HoeheDauerstau?, BoeschungVa?, StaerkeBodenschicht?, MaxEinstauhoehe?, Speichervolumen?, ExistenzUeberlauf?, Ueberlauf?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? MaxEinstauhoehe {
            get {
                XElement x = this.GetElement(MaxEinstauhoeheXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(MaxEinstauhoeheXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                }
                else {
                    this.SetElementWithValidation(MaxEinstauhoeheXName, value, "MaxEinstauhoehe", MaxEinstauhoeheLocalType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Laenge?, Breite?, Tiefe?, GrundflaecheVa?, FlaecheDauerstau?, HoeheDauerstau?, BoeschungVa?, StaerkeBodenschicht?, MaxEinstauhoehe?, Speichervolumen?, ExistenzUeberlauf?, Ueberlauf?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? Speichervolumen {
            get {
                XElement x = this.GetElement(SpeichervolumenXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(SpeichervolumenXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                }
                else {
                    this.SetElementWithValidation(SpeichervolumenXName, value, "Speichervolumen", SpeichervolumenLocalType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Laenge?, Breite?, Tiefe?, GrundflaecheVa?, FlaecheDauerstau?, HoeheDauerstau?, BoeschungVa?, StaerkeBodenschicht?, MaxEinstauhoehe?, Speichervolumen?, ExistenzUeberlauf?, Ueberlauf?)
        /// </para>
        /// </summary>
        public virtual System.Boolean? ExistenzUeberlauf {
            get {
                XElement x = this.GetElement(ExistenzUeberlaufXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
            set {
                this.SetElement(ExistenzUeberlaufXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Laenge?, Breite?, Tiefe?, GrundflaecheVa?, FlaecheDauerstau?, HoeheDauerstau?, BoeschungVa?, StaerkeBodenschicht?, MaxEinstauhoehe?, Speichervolumen?, ExistenzUeberlauf?, Ueberlauf?)
        /// </para>
        /// </summary>
        public virtual string Ueberlauf {
            get {
                XElement x = this.GetElement(UeberlaufXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(UeberlaufXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                else {
                    this.SetElementWithValidation(UeberlaufXName, value, "Ueberlauf", UeberlaufLocalType.TypeDefinition);
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<MuldeTeichType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(LaengeXName, typeof(decimal));
            localElementDictionary.Add(BreiteXName, typeof(decimal));
            localElementDictionary.Add(TiefeXName, typeof(decimal));
            localElementDictionary.Add(GrundflaecheVaXName, typeof(decimal));
            localElementDictionary.Add(FlaecheDauerstauXName, typeof(decimal));
            localElementDictionary.Add(HoeheDauerstauXName, typeof(decimal));
            localElementDictionary.Add(BoeschungVaXName, typeof(decimal));
            localElementDictionary.Add(StaerkeBodenschichtXName, typeof(decimal));
            localElementDictionary.Add(MaxEinstauhoeheXName, typeof(decimal));
            localElementDictionary.Add(SpeichervolumenXName, typeof(decimal));
            localElementDictionary.Add(ExistenzUeberlaufXName, typeof(bool));
            localElementDictionary.Add(UeberlaufXName, typeof(string));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        private class LaengeLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(3200)), null, 2, 0, 100m, null, 0, null, null, 0, null, 4, XmlSchemaWhiteSpace.Collapse));
            
            private LaengeLocalType() {
            }
        }
        
        private class BreiteLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(3200)), null, 2, 0, 100m, null, 0, null, null, 0, null, 4, XmlSchemaWhiteSpace.Collapse));
            
            private BreiteLocalType() {
            }
        }
        
        private class TiefeLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(3200)), null, 2, 0, 100m, null, 0, null, null, 0, null, 4, XmlSchemaWhiteSpace.Collapse));
            
            private TiefeLocalType() {
            }
        }
        
        private class GrundflaecheVaLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(3200)), null, 2, 0, 10000000m, null, 0, null, null, 0, null, 9, XmlSchemaWhiteSpace.Collapse));
            
            private GrundflaecheVaLocalType() {
            }
        }
        
        private class FlaecheDauerstauLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(3200)), null, 2, 0, 100000000m, null, 0, null, null, 0, null, 10, XmlSchemaWhiteSpace.Collapse));
            
            private FlaecheDauerstauLocalType() {
            }
        }
        
        private class HoeheDauerstauLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(1024)), null, 0, 0, null, null, 0, null, null, 0, null, 5, XmlSchemaWhiteSpace.Collapse));
            
            private HoeheDauerstauLocalType() {
            }
        }
        
        private class BoeschungVaLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(3200)), null, 2, 0, 100m, null, 0, null, null, 0, null, 4, XmlSchemaWhiteSpace.Collapse));
            
            private BoeschungVaLocalType() {
            }
        }
        
        private class StaerkeBodenschichtLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(1024)), null, 0, 0, null, null, 0, null, null, 0, null, 5, XmlSchemaWhiteSpace.Collapse));
            
            private StaerkeBodenschichtLocalType() {
            }
        }
        
        private class MaxEinstauhoeheLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(1024)), null, 0, 0, null, null, 0, null, null, 0, null, 5, XmlSchemaWhiteSpace.Collapse));
            
            private MaxEinstauhoeheLocalType() {
            }
        }
        
        private class SpeichervolumenLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(3200)), null, 3, 0, 1000000m, null, 0, null, null, 0, null, 9, XmlSchemaWhiteSpace.Collapse));
            
            private SpeichervolumenLocalType() {
            }
        }
        
        private class UeberlaufLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(4)), null, 0, 0, null, null, 30, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
            
            private UeberlaufLocalType() {
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Laenge?, Breite?, Tiefe?, RohrVa?, AnzahlRohre?, Rohrmaterial?, Fuellmaterial?, Speichervolumen?, Speicherkoeffizient?, Drosselabfluss?, ExistenzDrosselschacht?, Drosselschacht?, ExistenzUeberlauf?, Ueberlauf?, GrundflaecheVa?)
    /// </para>
    /// </summary>
    public partial class RohrRigoleType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName LaengeXName = System.Xml.Linq.XName.Get("Laenge", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName BreiteXName = System.Xml.Linq.XName.Get("Breite", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TiefeXName = System.Xml.Linq.XName.Get("Tiefe", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName RohrVaXName = System.Xml.Linq.XName.Get("RohrVa", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName AnzahlRohreXName = System.Xml.Linq.XName.Get("AnzahlRohre", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName RohrmaterialXName = System.Xml.Linq.XName.Get("Rohrmaterial", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName FuellmaterialXName = System.Xml.Linq.XName.Get("Fuellmaterial", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName SpeichervolumenXName = System.Xml.Linq.XName.Get("Speichervolumen", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName SpeicherkoeffizientXName = System.Xml.Linq.XName.Get("Speicherkoeffizient", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName DrosselabflussXName = System.Xml.Linq.XName.Get("Drosselabfluss", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ExistenzDrosselschachtXName = System.Xml.Linq.XName.Get("ExistenzDrosselschacht", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName DrosselschachtXName = System.Xml.Linq.XName.Get("Drosselschacht", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ExistenzUeberlaufXName = System.Xml.Linq.XName.Get("ExistenzUeberlauf", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName UeberlaufXName = System.Xml.Linq.XName.Get("Ueberlauf", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName GrundflaecheVaXName = System.Xml.Linq.XName.Get("GrundflaecheVa", "http://www.bfr-abwasser.de");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("RohrRigoleType", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator RohrRigoleType(XElement xe) { return XTypedServices.ToXTypedElement<RohrRigoleType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static RohrRigoleType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(LaengeXName), new NamedContentModelEntity(BreiteXName), new NamedContentModelEntity(TiefeXName), new NamedContentModelEntity(RohrVaXName), new NamedContentModelEntity(AnzahlRohreXName), new NamedContentModelEntity(RohrmaterialXName), new NamedContentModelEntity(FuellmaterialXName), new NamedContentModelEntity(SpeichervolumenXName), new NamedContentModelEntity(SpeicherkoeffizientXName), new NamedContentModelEntity(DrosselabflussXName), new NamedContentModelEntity(ExistenzDrosselschachtXName), new NamedContentModelEntity(DrosselschachtXName), new NamedContentModelEntity(ExistenzUeberlaufXName), new NamedContentModelEntity(UeberlaufXName), new NamedContentModelEntity(GrundflaecheVaXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Laenge?, Breite?, Tiefe?, RohrVa?, AnzahlRohre?, Rohrmaterial?, Fuellmaterial?, Speichervolumen?, Speicherkoeffizient?, Drosselabfluss?, ExistenzDrosselschacht?, Drosselschacht?, ExistenzUeberlauf?, Ueberlauf?, GrundflaecheVa?)
        /// </para>
        /// </summary>
        public RohrRigoleType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Laenge?, Breite?, Tiefe?, RohrVa?, AnzahlRohre?, Rohrmaterial?, Fuellmaterial?, Speichervolumen?, Speicherkoeffizient?, Drosselabfluss?, ExistenzDrosselschacht?, Drosselschacht?, ExistenzUeberlauf?, Ueberlauf?, GrundflaecheVa?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? Laenge {
            get {
                XElement x = this.GetElement(LaengeXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(LaengeXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                }
                else {
                    this.SetElementWithValidation(LaengeXName, value, "Laenge", LaengeLocalType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Laenge?, Breite?, Tiefe?, RohrVa?, AnzahlRohre?, Rohrmaterial?, Fuellmaterial?, Speichervolumen?, Speicherkoeffizient?, Drosselabfluss?, ExistenzDrosselschacht?, Drosselschacht?, ExistenzUeberlauf?, Ueberlauf?, GrundflaecheVa?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? Breite {
            get {
                XElement x = this.GetElement(BreiteXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(BreiteXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                }
                else {
                    this.SetElementWithValidation(BreiteXName, value, "Breite", BreiteLocalType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Laenge?, Breite?, Tiefe?, RohrVa?, AnzahlRohre?, Rohrmaterial?, Fuellmaterial?, Speichervolumen?, Speicherkoeffizient?, Drosselabfluss?, ExistenzDrosselschacht?, Drosselschacht?, ExistenzUeberlauf?, Ueberlauf?, GrundflaecheVa?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? Tiefe {
            get {
                XElement x = this.GetElement(TiefeXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(TiefeXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                }
                else {
                    this.SetElementWithValidation(TiefeXName, value, "Tiefe", TiefeLocalType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Laenge?, Breite?, Tiefe?, RohrVa?, AnzahlRohre?, Rohrmaterial?, Fuellmaterial?, Speichervolumen?, Speicherkoeffizient?, Drosselabfluss?, ExistenzDrosselschacht?, Drosselschacht?, ExistenzUeberlauf?, Ueberlauf?, GrundflaecheVa?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? RohrVa {
            get {
                XElement x = this.GetElement(RohrVaXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(RohrVaXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                }
                else {
                    this.SetElementWithValidation(RohrVaXName, value, "RohrVa", RohrVaLocalType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Laenge?, Breite?, Tiefe?, RohrVa?, AnzahlRohre?, Rohrmaterial?, Fuellmaterial?, Speichervolumen?, Speicherkoeffizient?, Drosselabfluss?, ExistenzDrosselschacht?, Drosselschacht?, ExistenzUeberlauf?, Ueberlauf?, GrundflaecheVa?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? AnzahlRohre {
            get {
                XElement x = this.GetElement(AnzahlRohreXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(AnzahlRohreXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                }
                else {
                    this.SetElementWithValidation(AnzahlRohreXName, value, "AnzahlRohre", AnzahlRohreLocalType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Laenge?, Breite?, Tiefe?, RohrVa?, AnzahlRohre?, Rohrmaterial?, Fuellmaterial?, Speichervolumen?, Speicherkoeffizient?, Drosselabfluss?, ExistenzDrosselschacht?, Drosselschacht?, ExistenzUeberlauf?, Ueberlauf?, GrundflaecheVa?)
        /// </para>
        /// </summary>
        public virtual string Rohrmaterial {
            get {
                XElement x = this.GetElement(RohrmaterialXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(RohrmaterialXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                else {
                    this.SetElementWithValidation(RohrmaterialXName, value, "Rohrmaterial", global::www.bfr.abwasser.de.MaterialType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Laenge?, Breite?, Tiefe?, RohrVa?, AnzahlRohre?, Rohrmaterial?, Fuellmaterial?, Speichervolumen?, Speicherkoeffizient?, Drosselabfluss?, ExistenzDrosselschacht?, Drosselschacht?, ExistenzUeberlauf?, Ueberlauf?, GrundflaecheVa?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? Fuellmaterial {
            get {
                XElement x = this.GetElement(FuellmaterialXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(FuellmaterialXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                }
                else {
                    this.SetElementWithValidation(FuellmaterialXName, value, "Fuellmaterial", global::www.bfr.abwasser.de.FuellmaterialType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Laenge?, Breite?, Tiefe?, RohrVa?, AnzahlRohre?, Rohrmaterial?, Fuellmaterial?, Speichervolumen?, Speicherkoeffizient?, Drosselabfluss?, ExistenzDrosselschacht?, Drosselschacht?, ExistenzUeberlauf?, Ueberlauf?, GrundflaecheVa?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? Speichervolumen {
            get {
                XElement x = this.GetElement(SpeichervolumenXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(SpeichervolumenXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                }
                else {
                    this.SetElementWithValidation(SpeichervolumenXName, value, "Speichervolumen", SpeichervolumenLocalType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Laenge?, Breite?, Tiefe?, RohrVa?, AnzahlRohre?, Rohrmaterial?, Fuellmaterial?, Speichervolumen?, Speicherkoeffizient?, Drosselabfluss?, ExistenzDrosselschacht?, Drosselschacht?, ExistenzUeberlauf?, Ueberlauf?, GrundflaecheVa?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? Speicherkoeffizient {
            get {
                XElement x = this.GetElement(SpeicherkoeffizientXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(SpeicherkoeffizientXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                }
                else {
                    this.SetElementWithValidation(SpeicherkoeffizientXName, value, "Speicherkoeffizient", SpeicherkoeffizientLocalType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Laenge?, Breite?, Tiefe?, RohrVa?, AnzahlRohre?, Rohrmaterial?, Fuellmaterial?, Speichervolumen?, Speicherkoeffizient?, Drosselabfluss?, ExistenzDrosselschacht?, Drosselschacht?, ExistenzUeberlauf?, Ueberlauf?, GrundflaecheVa?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? Drosselabfluss {
            get {
                XElement x = this.GetElement(DrosselabflussXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(DrosselabflussXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                }
                else {
                    this.SetElementWithValidation(DrosselabflussXName, value, "Drosselabfluss", DrosselabflussLocalType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Laenge?, Breite?, Tiefe?, RohrVa?, AnzahlRohre?, Rohrmaterial?, Fuellmaterial?, Speichervolumen?, Speicherkoeffizient?, Drosselabfluss?, ExistenzDrosselschacht?, Drosselschacht?, ExistenzUeberlauf?, Ueberlauf?, GrundflaecheVa?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? ExistenzDrosselschacht {
            get {
                XElement x = this.GetElement(ExistenzDrosselschachtXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(ExistenzDrosselschachtXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                }
                else {
                    this.SetElementWithValidation(ExistenzDrosselschachtXName, value, "ExistenzDrosselschacht", global::www.bfr.abwasser.de.ExistenzDrosselschachtType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Laenge?, Breite?, Tiefe?, RohrVa?, AnzahlRohre?, Rohrmaterial?, Fuellmaterial?, Speichervolumen?, Speicherkoeffizient?, Drosselabfluss?, ExistenzDrosselschacht?, Drosselschacht?, ExistenzUeberlauf?, Ueberlauf?, GrundflaecheVa?)
        /// </para>
        /// </summary>
        public virtual string Drosselschacht {
            get {
                XElement x = this.GetElement(DrosselschachtXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(DrosselschachtXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                else {
                    this.SetElementWithValidation(DrosselschachtXName, value, "Drosselschacht", DrosselschachtLocalType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Laenge?, Breite?, Tiefe?, RohrVa?, AnzahlRohre?, Rohrmaterial?, Fuellmaterial?, Speichervolumen?, Speicherkoeffizient?, Drosselabfluss?, ExistenzDrosselschacht?, Drosselschacht?, ExistenzUeberlauf?, Ueberlauf?, GrundflaecheVa?)
        /// </para>
        /// </summary>
        public virtual System.Boolean? ExistenzUeberlauf {
            get {
                XElement x = this.GetElement(ExistenzUeberlaufXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
            set {
                this.SetElement(ExistenzUeberlaufXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Laenge?, Breite?, Tiefe?, RohrVa?, AnzahlRohre?, Rohrmaterial?, Fuellmaterial?, Speichervolumen?, Speicherkoeffizient?, Drosselabfluss?, ExistenzDrosselschacht?, Drosselschacht?, ExistenzUeberlauf?, Ueberlauf?, GrundflaecheVa?)
        /// </para>
        /// </summary>
        public virtual string Ueberlauf {
            get {
                XElement x = this.GetElement(UeberlaufXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(UeberlaufXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                else {
                    this.SetElementWithValidation(UeberlaufXName, value, "Ueberlauf", UeberlaufLocalType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Laenge?, Breite?, Tiefe?, RohrVa?, AnzahlRohre?, Rohrmaterial?, Fuellmaterial?, Speichervolumen?, Speicherkoeffizient?, Drosselabfluss?, ExistenzDrosselschacht?, Drosselschacht?, ExistenzUeberlauf?, Ueberlauf?, GrundflaecheVa?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? GrundflaecheVa {
            get {
                XElement x = this.GetElement(GrundflaecheVaXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(GrundflaecheVaXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                }
                else {
                    this.SetElementWithValidation(GrundflaecheVaXName, value, "GrundflaecheVa", GrundflaecheVaLocalType.TypeDefinition);
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<RohrRigoleType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(LaengeXName, typeof(decimal));
            localElementDictionary.Add(BreiteXName, typeof(decimal));
            localElementDictionary.Add(TiefeXName, typeof(decimal));
            localElementDictionary.Add(RohrVaXName, typeof(decimal));
            localElementDictionary.Add(AnzahlRohreXName, typeof(decimal));
            localElementDictionary.Add(RohrmaterialXName, typeof(string));
            localElementDictionary.Add(FuellmaterialXName, typeof(decimal));
            localElementDictionary.Add(SpeichervolumenXName, typeof(decimal));
            localElementDictionary.Add(SpeicherkoeffizientXName, typeof(decimal));
            localElementDictionary.Add(DrosselabflussXName, typeof(decimal));
            localElementDictionary.Add(ExistenzDrosselschachtXName, typeof(decimal));
            localElementDictionary.Add(DrosselschachtXName, typeof(string));
            localElementDictionary.Add(ExistenzUeberlaufXName, typeof(bool));
            localElementDictionary.Add(UeberlaufXName, typeof(string));
            localElementDictionary.Add(GrundflaecheVaXName, typeof(decimal));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        private class LaengeLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(3200)), null, 2, 0, 100m, null, 0, null, null, 0, null, 4, XmlSchemaWhiteSpace.Collapse));
            
            private LaengeLocalType() {
            }
        }
        
        private class BreiteLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(3200)), null, 2, 0, 100m, null, 0, null, null, 0, null, 4, XmlSchemaWhiteSpace.Collapse));
            
            private BreiteLocalType() {
            }
        }
        
        private class TiefeLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(3200)), null, 2, 0, 100m, null, 0, null, null, 0, null, 4, XmlSchemaWhiteSpace.Collapse));
            
            private TiefeLocalType() {
            }
        }
        
        private class RohrVaLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(1024)), null, 0, 0, null, null, 0, null, null, 0, null, 5, XmlSchemaWhiteSpace.Collapse));
            
            private RohrVaLocalType() {
            }
        }
        
        private class AnzahlRohreLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(1024)), null, 0, 0, null, null, 0, null, null, 0, null, 2, XmlSchemaWhiteSpace.Collapse));
            
            private AnzahlRohreLocalType() {
            }
        }
        
        private class SpeichervolumenLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(3200)), null, 3, 0, 1000000m, null, 0, null, null, 0, null, 9, XmlSchemaWhiteSpace.Collapse));
            
            private SpeichervolumenLocalType() {
            }
        }
        
        private class SpeicherkoeffizientLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(3200)), null, 2, 0, 100m, null, 0, null, null, 0, null, 4, XmlSchemaWhiteSpace.Collapse));
            
            private SpeicherkoeffizientLocalType() {
            }
        }
        
        private class DrosselabflussLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(3200)), null, 2, 0, 10000000m, null, 0, null, null, 0, null, 9, XmlSchemaWhiteSpace.Collapse));
            
            private DrosselabflussLocalType() {
            }
        }
        
        private class DrosselschachtLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(4)), null, 0, 0, null, null, 30, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
            
            private DrosselschachtLocalType() {
            }
        }
        
        private class UeberlaufLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(4)), null, 0, 0, null, null, 30, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
            
            private UeberlaufLocalType() {
            }
        }
        
        private class GrundflaecheVaLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(3200)), null, 2, 0, 10000000m, null, 0, null, null, 0, null, 9, XmlSchemaWhiteSpace.Collapse));
            
            private GrundflaecheVaLocalType() {
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (VSchachtTyp?, Laenge?, Breite?, Tiefe?, GrundflaecheVa?, Fuellmaterial?, ExistenzFiltersack?, MaxEinstauhoehe?, Speichervolumen?, Drosselabfluss?, ExistenzUeberlauf?, Ueberlauf?)
    /// </para>
    /// </summary>
    public partial class VersickerungsschachtType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName VSchachtTypXName = System.Xml.Linq.XName.Get("VSchachtTyp", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName LaengeXName = System.Xml.Linq.XName.Get("Laenge", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName BreiteXName = System.Xml.Linq.XName.Get("Breite", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TiefeXName = System.Xml.Linq.XName.Get("Tiefe", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName GrundflaecheVaXName = System.Xml.Linq.XName.Get("GrundflaecheVa", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName FuellmaterialXName = System.Xml.Linq.XName.Get("Fuellmaterial", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ExistenzFiltersackXName = System.Xml.Linq.XName.Get("ExistenzFiltersack", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName MaxEinstauhoeheXName = System.Xml.Linq.XName.Get("MaxEinstauhoehe", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName SpeichervolumenXName = System.Xml.Linq.XName.Get("Speichervolumen", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName DrosselabflussXName = System.Xml.Linq.XName.Get("Drosselabfluss", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ExistenzUeberlaufXName = System.Xml.Linq.XName.Get("ExistenzUeberlauf", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName UeberlaufXName = System.Xml.Linq.XName.Get("Ueberlauf", "http://www.bfr-abwasser.de");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("VersickerungsschachtType", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator VersickerungsschachtType(XElement xe) { return XTypedServices.ToXTypedElement<VersickerungsschachtType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static VersickerungsschachtType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(VSchachtTypXName), new NamedContentModelEntity(LaengeXName), new NamedContentModelEntity(BreiteXName), new NamedContentModelEntity(TiefeXName), new NamedContentModelEntity(GrundflaecheVaXName), new NamedContentModelEntity(FuellmaterialXName), new NamedContentModelEntity(ExistenzFiltersackXName), new NamedContentModelEntity(MaxEinstauhoeheXName), new NamedContentModelEntity(SpeichervolumenXName), new NamedContentModelEntity(DrosselabflussXName), new NamedContentModelEntity(ExistenzUeberlaufXName), new NamedContentModelEntity(UeberlaufXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (VSchachtTyp?, Laenge?, Breite?, Tiefe?, GrundflaecheVa?, Fuellmaterial?, ExistenzFiltersack?, MaxEinstauhoehe?, Speichervolumen?, Drosselabfluss?, ExistenzUeberlauf?, Ueberlauf?)
        /// </para>
        /// </summary>
        public VersickerungsschachtType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (VSchachtTyp?, Laenge?, Breite?, Tiefe?, GrundflaecheVa?, Fuellmaterial?, ExistenzFiltersack?, MaxEinstauhoehe?, Speichervolumen?, Drosselabfluss?, ExistenzUeberlauf?, Ueberlauf?)
        /// </para>
        /// </summary>
        public virtual string VSchachtTyp {
            get {
                XElement x = this.GetElement(VSchachtTypXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(VSchachtTypXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                else {
                    this.SetElementWithValidation(VSchachtTypXName, value, "VSchachtTyp", global::www.bfr.abwasser.de.VSchachtTypType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (VSchachtTyp?, Laenge?, Breite?, Tiefe?, GrundflaecheVa?, Fuellmaterial?, ExistenzFiltersack?, MaxEinstauhoehe?, Speichervolumen?, Drosselabfluss?, ExistenzUeberlauf?, Ueberlauf?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? Laenge {
            get {
                XElement x = this.GetElement(LaengeXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(LaengeXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                }
                else {
                    this.SetElementWithValidation(LaengeXName, value, "Laenge", LaengeLocalType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (VSchachtTyp?, Laenge?, Breite?, Tiefe?, GrundflaecheVa?, Fuellmaterial?, ExistenzFiltersack?, MaxEinstauhoehe?, Speichervolumen?, Drosselabfluss?, ExistenzUeberlauf?, Ueberlauf?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? Breite {
            get {
                XElement x = this.GetElement(BreiteXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(BreiteXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                }
                else {
                    this.SetElementWithValidation(BreiteXName, value, "Breite", BreiteLocalType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (VSchachtTyp?, Laenge?, Breite?, Tiefe?, GrundflaecheVa?, Fuellmaterial?, ExistenzFiltersack?, MaxEinstauhoehe?, Speichervolumen?, Drosselabfluss?, ExistenzUeberlauf?, Ueberlauf?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? Tiefe {
            get {
                XElement x = this.GetElement(TiefeXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(TiefeXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                }
                else {
                    this.SetElementWithValidation(TiefeXName, value, "Tiefe", TiefeLocalType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (VSchachtTyp?, Laenge?, Breite?, Tiefe?, GrundflaecheVa?, Fuellmaterial?, ExistenzFiltersack?, MaxEinstauhoehe?, Speichervolumen?, Drosselabfluss?, ExistenzUeberlauf?, Ueberlauf?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? GrundflaecheVa {
            get {
                XElement x = this.GetElement(GrundflaecheVaXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(GrundflaecheVaXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                }
                else {
                    this.SetElementWithValidation(GrundflaecheVaXName, value, "GrundflaecheVa", GrundflaecheVaLocalType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (VSchachtTyp?, Laenge?, Breite?, Tiefe?, GrundflaecheVa?, Fuellmaterial?, ExistenzFiltersack?, MaxEinstauhoehe?, Speichervolumen?, Drosselabfluss?, ExistenzUeberlauf?, Ueberlauf?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? Fuellmaterial {
            get {
                XElement x = this.GetElement(FuellmaterialXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(FuellmaterialXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                }
                else {
                    this.SetElementWithValidation(FuellmaterialXName, value, "Fuellmaterial", global::www.bfr.abwasser.de.FuellmaterialType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (VSchachtTyp?, Laenge?, Breite?, Tiefe?, GrundflaecheVa?, Fuellmaterial?, ExistenzFiltersack?, MaxEinstauhoehe?, Speichervolumen?, Drosselabfluss?, ExistenzUeberlauf?, Ueberlauf?)
        /// </para>
        /// </summary>
        public virtual System.Boolean? ExistenzFiltersack {
            get {
                XElement x = this.GetElement(ExistenzFiltersackXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
            set {
                this.SetElement(ExistenzFiltersackXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (VSchachtTyp?, Laenge?, Breite?, Tiefe?, GrundflaecheVa?, Fuellmaterial?, ExistenzFiltersack?, MaxEinstauhoehe?, Speichervolumen?, Drosselabfluss?, ExistenzUeberlauf?, Ueberlauf?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? MaxEinstauhoehe {
            get {
                XElement x = this.GetElement(MaxEinstauhoeheXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(MaxEinstauhoeheXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                }
                else {
                    this.SetElementWithValidation(MaxEinstauhoeheXName, value, "MaxEinstauhoehe", MaxEinstauhoeheLocalType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (VSchachtTyp?, Laenge?, Breite?, Tiefe?, GrundflaecheVa?, Fuellmaterial?, ExistenzFiltersack?, MaxEinstauhoehe?, Speichervolumen?, Drosselabfluss?, ExistenzUeberlauf?, Ueberlauf?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? Speichervolumen {
            get {
                XElement x = this.GetElement(SpeichervolumenXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(SpeichervolumenXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                }
                else {
                    this.SetElementWithValidation(SpeichervolumenXName, value, "Speichervolumen", SpeichervolumenLocalType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (VSchachtTyp?, Laenge?, Breite?, Tiefe?, GrundflaecheVa?, Fuellmaterial?, ExistenzFiltersack?, MaxEinstauhoehe?, Speichervolumen?, Drosselabfluss?, ExistenzUeberlauf?, Ueberlauf?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? Drosselabfluss {
            get {
                XElement x = this.GetElement(DrosselabflussXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(DrosselabflussXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                }
                else {
                    this.SetElementWithValidation(DrosselabflussXName, value, "Drosselabfluss", DrosselabflussLocalType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (VSchachtTyp?, Laenge?, Breite?, Tiefe?, GrundflaecheVa?, Fuellmaterial?, ExistenzFiltersack?, MaxEinstauhoehe?, Speichervolumen?, Drosselabfluss?, ExistenzUeberlauf?, Ueberlauf?)
        /// </para>
        /// </summary>
        public virtual System.Boolean? ExistenzUeberlauf {
            get {
                XElement x = this.GetElement(ExistenzUeberlaufXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
            set {
                this.SetElement(ExistenzUeberlaufXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (VSchachtTyp?, Laenge?, Breite?, Tiefe?, GrundflaecheVa?, Fuellmaterial?, ExistenzFiltersack?, MaxEinstauhoehe?, Speichervolumen?, Drosselabfluss?, ExistenzUeberlauf?, Ueberlauf?)
        /// </para>
        /// </summary>
        public virtual string Ueberlauf {
            get {
                XElement x = this.GetElement(UeberlaufXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(UeberlaufXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                else {
                    this.SetElementWithValidation(UeberlaufXName, value, "Ueberlauf", UeberlaufLocalType.TypeDefinition);
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<VersickerungsschachtType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(VSchachtTypXName, typeof(string));
            localElementDictionary.Add(LaengeXName, typeof(decimal));
            localElementDictionary.Add(BreiteXName, typeof(decimal));
            localElementDictionary.Add(TiefeXName, typeof(decimal));
            localElementDictionary.Add(GrundflaecheVaXName, typeof(decimal));
            localElementDictionary.Add(FuellmaterialXName, typeof(decimal));
            localElementDictionary.Add(ExistenzFiltersackXName, typeof(bool));
            localElementDictionary.Add(MaxEinstauhoeheXName, typeof(decimal));
            localElementDictionary.Add(SpeichervolumenXName, typeof(decimal));
            localElementDictionary.Add(DrosselabflussXName, typeof(decimal));
            localElementDictionary.Add(ExistenzUeberlaufXName, typeof(bool));
            localElementDictionary.Add(UeberlaufXName, typeof(string));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        private class LaengeLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(3200)), null, 2, 0, 100m, null, 0, null, null, 0, null, 4, XmlSchemaWhiteSpace.Collapse));
            
            private LaengeLocalType() {
            }
        }
        
        private class BreiteLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(3200)), null, 2, 0, 100m, null, 0, null, null, 0, null, 4, XmlSchemaWhiteSpace.Collapse));
            
            private BreiteLocalType() {
            }
        }
        
        private class TiefeLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(3200)), null, 2, 0, 100m, null, 0, null, null, 0, null, 4, XmlSchemaWhiteSpace.Collapse));
            
            private TiefeLocalType() {
            }
        }
        
        private class GrundflaecheVaLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(3200)), null, 2, 0, 10000000m, null, 0, null, null, 0, null, 9, XmlSchemaWhiteSpace.Collapse));
            
            private GrundflaecheVaLocalType() {
            }
        }
        
        private class MaxEinstauhoeheLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(1024)), null, 0, 0, null, null, 0, null, null, 0, null, 5, XmlSchemaWhiteSpace.Collapse));
            
            private MaxEinstauhoeheLocalType() {
            }
        }
        
        private class SpeichervolumenLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(3200)), null, 3, 0, 1000000m, null, 0, null, null, 0, null, 9, XmlSchemaWhiteSpace.Collapse));
            
            private SpeichervolumenLocalType() {
            }
        }
        
        private class DrosselabflussLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(3200)), null, 2, 0, 10000000m, null, 0, null, null, 0, null, 9, XmlSchemaWhiteSpace.Collapse));
            
            private DrosselabflussLocalType() {
            }
        }
        
        private class UeberlaufLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(4)), null, 0, 0, null, null, 30, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
            
            private UeberlaufLocalType() {
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Laenge?, Breite?, ExistenzUeberlauf?, Ueberlauf?, GrundflaecheVa?)
    /// </para>
    /// </summary>
    public partial class VersickerungsflaecheType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName LaengeXName = System.Xml.Linq.XName.Get("Laenge", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName BreiteXName = System.Xml.Linq.XName.Get("Breite", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ExistenzUeberlaufXName = System.Xml.Linq.XName.Get("ExistenzUeberlauf", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName UeberlaufXName = System.Xml.Linq.XName.Get("Ueberlauf", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName GrundflaecheVaXName = System.Xml.Linq.XName.Get("GrundflaecheVa", "http://www.bfr-abwasser.de");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("VersickerungsflaecheType", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator VersickerungsflaecheType(XElement xe) { return XTypedServices.ToXTypedElement<VersickerungsflaecheType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static VersickerungsflaecheType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(LaengeXName), new NamedContentModelEntity(BreiteXName), new NamedContentModelEntity(ExistenzUeberlaufXName), new NamedContentModelEntity(UeberlaufXName), new NamedContentModelEntity(GrundflaecheVaXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Laenge?, Breite?, ExistenzUeberlauf?, Ueberlauf?, GrundflaecheVa?)
        /// </para>
        /// </summary>
        public VersickerungsflaecheType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Laenge?, Breite?, ExistenzUeberlauf?, Ueberlauf?, GrundflaecheVa?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? Laenge {
            get {
                XElement x = this.GetElement(LaengeXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(LaengeXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                }
                else {
                    this.SetElementWithValidation(LaengeXName, value, "Laenge", LaengeLocalType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Laenge?, Breite?, ExistenzUeberlauf?, Ueberlauf?, GrundflaecheVa?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? Breite {
            get {
                XElement x = this.GetElement(BreiteXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(BreiteXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                }
                else {
                    this.SetElementWithValidation(BreiteXName, value, "Breite", BreiteLocalType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Laenge?, Breite?, ExistenzUeberlauf?, Ueberlauf?, GrundflaecheVa?)
        /// </para>
        /// </summary>
        public virtual System.Boolean? ExistenzUeberlauf {
            get {
                XElement x = this.GetElement(ExistenzUeberlaufXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
            set {
                this.SetElement(ExistenzUeberlaufXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Laenge?, Breite?, ExistenzUeberlauf?, Ueberlauf?, GrundflaecheVa?)
        /// </para>
        /// </summary>
        public virtual string Ueberlauf {
            get {
                XElement x = this.GetElement(UeberlaufXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(UeberlaufXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                else {
                    this.SetElementWithValidation(UeberlaufXName, value, "Ueberlauf", UeberlaufLocalType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Laenge?, Breite?, ExistenzUeberlauf?, Ueberlauf?, GrundflaecheVa?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? GrundflaecheVa {
            get {
                XElement x = this.GetElement(GrundflaecheVaXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(GrundflaecheVaXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                }
                else {
                    this.SetElementWithValidation(GrundflaecheVaXName, value, "GrundflaecheVa", GrundflaecheVaLocalType.TypeDefinition);
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<VersickerungsflaecheType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(LaengeXName, typeof(decimal));
            localElementDictionary.Add(BreiteXName, typeof(decimal));
            localElementDictionary.Add(ExistenzUeberlaufXName, typeof(bool));
            localElementDictionary.Add(UeberlaufXName, typeof(string));
            localElementDictionary.Add(GrundflaecheVaXName, typeof(decimal));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        private class LaengeLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(3200)), null, 2, 0, 100m, null, 0, null, null, 0, null, 4, XmlSchemaWhiteSpace.Collapse));
            
            private LaengeLocalType() {
            }
        }
        
        private class BreiteLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(3200)), null, 2, 0, 100m, null, 0, null, null, 0, null, 4, XmlSchemaWhiteSpace.Collapse));
            
            private BreiteLocalType() {
            }
        }
        
        private class UeberlaufLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(4)), null, 0, 0, null, null, 30, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
            
            private UeberlaufLocalType() {
            }
        }
        
        private class GrundflaecheVaLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(3200)), null, 2, 0, 10000000m, null, 0, null, null, 0, null, 9, XmlSchemaWhiteSpace.Collapse));
            
            private GrundflaecheVaLocalType() {
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (RegenwassernutzungFunktion?, Laenge?, Breite?, Tiefe?, Hoehe?, Durchmesser?, GrundflaecheRn?, Bauart?, MaterialRn?, Filterart?, ArtFlaechenanschluss?, AngeschlosseneFlaeche?, Volumennutzbar?, Rueckhaltevolumen?, Drosselabfluss?)
    /// </para>
    /// </summary>
    public partial class ZisterneType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName RegenwassernutzungFunktionXName = System.Xml.Linq.XName.Get("RegenwassernutzungFunktion", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName LaengeXName = System.Xml.Linq.XName.Get("Laenge", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName BreiteXName = System.Xml.Linq.XName.Get("Breite", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TiefeXName = System.Xml.Linq.XName.Get("Tiefe", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName HoeheXName = System.Xml.Linq.XName.Get("Hoehe", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName DurchmesserXName = System.Xml.Linq.XName.Get("Durchmesser", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName GrundflaecheRnXName = System.Xml.Linq.XName.Get("GrundflaecheRn", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName BauartXName = System.Xml.Linq.XName.Get("Bauart", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName MaterialRnXName = System.Xml.Linq.XName.Get("MaterialRn", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName FilterartXName = System.Xml.Linq.XName.Get("Filterart", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ArtFlaechenanschlussXName = System.Xml.Linq.XName.Get("ArtFlaechenanschluss", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName AngeschlosseneFlaecheXName = System.Xml.Linq.XName.Get("AngeschlosseneFlaeche", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName VolumennutzbarXName = System.Xml.Linq.XName.Get("Volumennutzbar", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName RueckhaltevolumenXName = System.Xml.Linq.XName.Get("Rueckhaltevolumen", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName DrosselabflussXName = System.Xml.Linq.XName.Get("Drosselabfluss", "http://www.bfr-abwasser.de");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("ZisterneType", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator ZisterneType(XElement xe) { return XTypedServices.ToXTypedElement<ZisterneType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static ZisterneType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(RegenwassernutzungFunktionXName), new NamedContentModelEntity(LaengeXName), new NamedContentModelEntity(BreiteXName), new NamedContentModelEntity(TiefeXName), new NamedContentModelEntity(HoeheXName), new NamedContentModelEntity(DurchmesserXName), new NamedContentModelEntity(GrundflaecheRnXName), new NamedContentModelEntity(BauartXName), new NamedContentModelEntity(MaterialRnXName), new NamedContentModelEntity(FilterartXName), new NamedContentModelEntity(ArtFlaechenanschlussXName), new NamedContentModelEntity(AngeschlosseneFlaecheXName), new NamedContentModelEntity(VolumennutzbarXName), new NamedContentModelEntity(RueckhaltevolumenXName), new NamedContentModelEntity(DrosselabflussXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (RegenwassernutzungFunktion?, Laenge?, Breite?, Tiefe?, Hoehe?, Durchmesser?, GrundflaecheRn?, Bauart?, MaterialRn?, Filterart?, ArtFlaechenanschluss?, AngeschlosseneFlaeche?, Volumennutzbar?, Rueckhaltevolumen?, Drosselabfluss?)
        /// </para>
        /// </summary>
        public ZisterneType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (RegenwassernutzungFunktion?, Laenge?, Breite?, Tiefe?, Hoehe?, Durchmesser?, GrundflaecheRn?, Bauart?, MaterialRn?, Filterart?, ArtFlaechenanschluss?, AngeschlosseneFlaeche?, Volumennutzbar?, Rueckhaltevolumen?, Drosselabfluss?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? RegenwassernutzungFunktion {
            get {
                XElement x = this.GetElement(RegenwassernutzungFunktionXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(RegenwassernutzungFunktionXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                }
                else {
                    this.SetElementWithValidation(RegenwassernutzungFunktionXName, value, "RegenwassernutzungFunktion", global::www.bfr.abwasser.de.RegenwassernutzungFunktionType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (RegenwassernutzungFunktion?, Laenge?, Breite?, Tiefe?, Hoehe?, Durchmesser?, GrundflaecheRn?, Bauart?, MaterialRn?, Filterart?, ArtFlaechenanschluss?, AngeschlosseneFlaeche?, Volumennutzbar?, Rueckhaltevolumen?, Drosselabfluss?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? Laenge {
            get {
                XElement x = this.GetElement(LaengeXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(LaengeXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                }
                else {
                    this.SetElementWithValidation(LaengeXName, value, "Laenge", LaengeLocalType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (RegenwassernutzungFunktion?, Laenge?, Breite?, Tiefe?, Hoehe?, Durchmesser?, GrundflaecheRn?, Bauart?, MaterialRn?, Filterart?, ArtFlaechenanschluss?, AngeschlosseneFlaeche?, Volumennutzbar?, Rueckhaltevolumen?, Drosselabfluss?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? Breite {
            get {
                XElement x = this.GetElement(BreiteXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(BreiteXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                }
                else {
                    this.SetElementWithValidation(BreiteXName, value, "Breite", BreiteLocalType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (RegenwassernutzungFunktion?, Laenge?, Breite?, Tiefe?, Hoehe?, Durchmesser?, GrundflaecheRn?, Bauart?, MaterialRn?, Filterart?, ArtFlaechenanschluss?, AngeschlosseneFlaeche?, Volumennutzbar?, Rueckhaltevolumen?, Drosselabfluss?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? Tiefe {
            get {
                XElement x = this.GetElement(TiefeXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(TiefeXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                }
                else {
                    this.SetElementWithValidation(TiefeXName, value, "Tiefe", TiefeLocalType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (RegenwassernutzungFunktion?, Laenge?, Breite?, Tiefe?, Hoehe?, Durchmesser?, GrundflaecheRn?, Bauart?, MaterialRn?, Filterart?, ArtFlaechenanschluss?, AngeschlosseneFlaeche?, Volumennutzbar?, Rueckhaltevolumen?, Drosselabfluss?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? Hoehe {
            get {
                XElement x = this.GetElement(HoeheXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(HoeheXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                }
                else {
                    this.SetElementWithValidation(HoeheXName, value, "Hoehe", HoeheLocalType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (RegenwassernutzungFunktion?, Laenge?, Breite?, Tiefe?, Hoehe?, Durchmesser?, GrundflaecheRn?, Bauart?, MaterialRn?, Filterart?, ArtFlaechenanschluss?, AngeschlosseneFlaeche?, Volumennutzbar?, Rueckhaltevolumen?, Drosselabfluss?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? Durchmesser {
            get {
                XElement x = this.GetElement(DurchmesserXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(DurchmesserXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                }
                else {
                    this.SetElementWithValidation(DurchmesserXName, value, "Durchmesser", DurchmesserLocalType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (RegenwassernutzungFunktion?, Laenge?, Breite?, Tiefe?, Hoehe?, Durchmesser?, GrundflaecheRn?, Bauart?, MaterialRn?, Filterart?, ArtFlaechenanschluss?, AngeschlosseneFlaeche?, Volumennutzbar?, Rueckhaltevolumen?, Drosselabfluss?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? GrundflaecheRn {
            get {
                XElement x = this.GetElement(GrundflaecheRnXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(GrundflaecheRnXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                }
                else {
                    this.SetElementWithValidation(GrundflaecheRnXName, value, "GrundflaecheRn", GrundflaecheRnLocalType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (RegenwassernutzungFunktion?, Laenge?, Breite?, Tiefe?, Hoehe?, Durchmesser?, GrundflaecheRn?, Bauart?, MaterialRn?, Filterart?, ArtFlaechenanschluss?, AngeschlosseneFlaeche?, Volumennutzbar?, Rueckhaltevolumen?, Drosselabfluss?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? Bauart {
            get {
                XElement x = this.GetElement(BauartXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(BauartXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                }
                else {
                    this.SetElementWithValidation(BauartXName, value, "Bauart", global::www.bfr.abwasser.de.AufstellungsartType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (RegenwassernutzungFunktion?, Laenge?, Breite?, Tiefe?, Hoehe?, Durchmesser?, GrundflaecheRn?, Bauart?, MaterialRn?, Filterart?, ArtFlaechenanschluss?, AngeschlosseneFlaeche?, Volumennutzbar?, Rueckhaltevolumen?, Drosselabfluss?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? MaterialRn {
            get {
                XElement x = this.GetElement(MaterialRnXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(MaterialRnXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                }
                else {
                    this.SetElementWithValidation(MaterialRnXName, value, "MaterialRn", global::www.bfr.abwasser.de.MaterialRnType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (RegenwassernutzungFunktion?, Laenge?, Breite?, Tiefe?, Hoehe?, Durchmesser?, GrundflaecheRn?, Bauart?, MaterialRn?, Filterart?, ArtFlaechenanschluss?, AngeschlosseneFlaeche?, Volumennutzbar?, Rueckhaltevolumen?, Drosselabfluss?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? Filterart {
            get {
                XElement x = this.GetElement(FilterartXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(FilterartXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                }
                else {
                    this.SetElementWithValidation(FilterartXName, value, "Filterart", global::www.bfr.abwasser.de.FilterartType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (RegenwassernutzungFunktion?, Laenge?, Breite?, Tiefe?, Hoehe?, Durchmesser?, GrundflaecheRn?, Bauart?, MaterialRn?, Filterart?, ArtFlaechenanschluss?, AngeschlosseneFlaeche?, Volumennutzbar?, Rueckhaltevolumen?, Drosselabfluss?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? ArtFlaechenanschluss {
            get {
                XElement x = this.GetElement(ArtFlaechenanschlussXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(ArtFlaechenanschlussXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                }
                else {
                    this.SetElementWithValidation(ArtFlaechenanschlussXName, value, "ArtFlaechenanschluss", global::www.bfr.abwasser.de.ArtFlaechenanschlussType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (RegenwassernutzungFunktion?, Laenge?, Breite?, Tiefe?, Hoehe?, Durchmesser?, GrundflaecheRn?, Bauart?, MaterialRn?, Filterart?, ArtFlaechenanschluss?, AngeschlosseneFlaeche?, Volumennutzbar?, Rueckhaltevolumen?, Drosselabfluss?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? AngeschlosseneFlaeche {
            get {
                XElement x = this.GetElement(AngeschlosseneFlaecheXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(AngeschlosseneFlaecheXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                }
                else {
                    this.SetElementWithValidation(AngeschlosseneFlaecheXName, value, "AngeschlosseneFlaeche", AngeschlosseneFlaecheLocalType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (RegenwassernutzungFunktion?, Laenge?, Breite?, Tiefe?, Hoehe?, Durchmesser?, GrundflaecheRn?, Bauart?, MaterialRn?, Filterart?, ArtFlaechenanschluss?, AngeschlosseneFlaeche?, Volumennutzbar?, Rueckhaltevolumen?, Drosselabfluss?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? Volumennutzbar {
            get {
                XElement x = this.GetElement(VolumennutzbarXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(VolumennutzbarXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                }
                else {
                    this.SetElementWithValidation(VolumennutzbarXName, value, "Volumennutzbar", VolumennutzbarLocalType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (RegenwassernutzungFunktion?, Laenge?, Breite?, Tiefe?, Hoehe?, Durchmesser?, GrundflaecheRn?, Bauart?, MaterialRn?, Filterart?, ArtFlaechenanschluss?, AngeschlosseneFlaeche?, Volumennutzbar?, Rueckhaltevolumen?, Drosselabfluss?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? Rueckhaltevolumen {
            get {
                XElement x = this.GetElement(RueckhaltevolumenXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(RueckhaltevolumenXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                }
                else {
                    this.SetElementWithValidation(RueckhaltevolumenXName, value, "Rueckhaltevolumen", RueckhaltevolumenLocalType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (RegenwassernutzungFunktion?, Laenge?, Breite?, Tiefe?, Hoehe?, Durchmesser?, GrundflaecheRn?, Bauart?, MaterialRn?, Filterart?, ArtFlaechenanschluss?, AngeschlosseneFlaeche?, Volumennutzbar?, Rueckhaltevolumen?, Drosselabfluss?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? Drosselabfluss {
            get {
                XElement x = this.GetElement(DrosselabflussXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(DrosselabflussXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                }
                else {
                    this.SetElementWithValidation(DrosselabflussXName, value, "Drosselabfluss", DrosselabflussLocalType.TypeDefinition);
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ZisterneType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(RegenwassernutzungFunktionXName, typeof(decimal));
            localElementDictionary.Add(LaengeXName, typeof(decimal));
            localElementDictionary.Add(BreiteXName, typeof(decimal));
            localElementDictionary.Add(TiefeXName, typeof(decimal));
            localElementDictionary.Add(HoeheXName, typeof(decimal));
            localElementDictionary.Add(DurchmesserXName, typeof(decimal));
            localElementDictionary.Add(GrundflaecheRnXName, typeof(decimal));
            localElementDictionary.Add(BauartXName, typeof(decimal));
            localElementDictionary.Add(MaterialRnXName, typeof(decimal));
            localElementDictionary.Add(FilterartXName, typeof(decimal));
            localElementDictionary.Add(ArtFlaechenanschlussXName, typeof(decimal));
            localElementDictionary.Add(AngeschlosseneFlaecheXName, typeof(decimal));
            localElementDictionary.Add(VolumennutzbarXName, typeof(decimal));
            localElementDictionary.Add(RueckhaltevolumenXName, typeof(decimal));
            localElementDictionary.Add(DrosselabflussXName, typeof(decimal));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        private class LaengeLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(3200)), null, 2, 0, 100m, null, 0, null, null, 0, null, 4, XmlSchemaWhiteSpace.Collapse));
            
            private LaengeLocalType() {
            }
        }
        
        private class BreiteLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(3200)), null, 2, 0, 100m, null, 0, null, null, 0, null, 4, XmlSchemaWhiteSpace.Collapse));
            
            private BreiteLocalType() {
            }
        }
        
        private class TiefeLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(3200)), null, 2, 0, 100m, null, 0, null, null, 0, null, 4, XmlSchemaWhiteSpace.Collapse));
            
            private TiefeLocalType() {
            }
        }
        
        private class HoeheLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(3200)), null, 2, 0, 100m, null, 0, null, null, 0, null, 4, XmlSchemaWhiteSpace.Collapse));
            
            private HoeheLocalType() {
            }
        }
        
        private class DurchmesserLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(3200)), null, 2, 0, 100m, null, 0, null, null, 0, null, 4, XmlSchemaWhiteSpace.Collapse));
            
            private DurchmesserLocalType() {
            }
        }
        
        private class GrundflaecheRnLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(3200)), null, 2, 0, 1000m, null, 0, null, null, 0, null, 5, XmlSchemaWhiteSpace.Collapse));
            
            private GrundflaecheRnLocalType() {
            }
        }
        
        private class AngeschlosseneFlaecheLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(1024)), null, 0, 0, null, null, 0, null, null, 0, null, 5, XmlSchemaWhiteSpace.Collapse));
            
            private AngeschlosseneFlaecheLocalType() {
            }
        }
        
        private class VolumennutzbarLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(3200)), null, 2, 0, 1000m, null, 0, null, null, 0, null, 5, XmlSchemaWhiteSpace.Collapse));
            
            private VolumennutzbarLocalType() {
            }
        }
        
        private class RueckhaltevolumenLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(3200)), null, 2, 0, 1000m, null, 0, null, null, 0, null, 5, XmlSchemaWhiteSpace.Collapse));
            
            private RueckhaltevolumenLocalType() {
            }
        }
        
        private class DrosselabflussLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(3200)), null, 2, 0, 10000000m, null, 0, null, null, 0, null, 9, XmlSchemaWhiteSpace.Collapse));
            
            private DrosselabflussLocalType() {
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Strassenschluessel?, Strassenname?, Ortsteilschluessel?, Ortsteilname?, LageOberflaeche?, KommentarLage?, Ueberschwemmungsgebiet?)
    /// </para>
    /// </summary>
    public partial class StammLageType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName StrassenschluesselXName = System.Xml.Linq.XName.Get("Strassenschluessel", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName StrassennameXName = System.Xml.Linq.XName.Get("Strassenname", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName OrtsteilschluesselXName = System.Xml.Linq.XName.Get("Ortsteilschluessel", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName OrtsteilnameXName = System.Xml.Linq.XName.Get("Ortsteilname", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName LageOberflaecheXName = System.Xml.Linq.XName.Get("LageOberflaeche", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName KommentarLageXName = System.Xml.Linq.XName.Get("KommentarLage", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName UeberschwemmungsgebietXName = System.Xml.Linq.XName.Get("Ueberschwemmungsgebiet", "http://www.bfr-abwasser.de");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("StammLageType", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator StammLageType(XElement xe) { return XTypedServices.ToXTypedElement<StammLageType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static StammLageType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(StrassenschluesselXName), new NamedContentModelEntity(StrassennameXName), new NamedContentModelEntity(OrtsteilschluesselXName), new NamedContentModelEntity(OrtsteilnameXName), new NamedContentModelEntity(LageOberflaecheXName), new NamedContentModelEntity(KommentarLageXName), new NamedContentModelEntity(UeberschwemmungsgebietXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Strassenschluessel?, Strassenname?, Ortsteilschluessel?, Ortsteilname?, LageOberflaeche?, KommentarLage?, Ueberschwemmungsgebiet?)
        /// </para>
        /// </summary>
        public StammLageType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Strassenschluessel?, Strassenname?, Ortsteilschluessel?, Ortsteilname?, LageOberflaeche?, KommentarLage?, Ueberschwemmungsgebiet?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? Strassenschluessel {
            get {
                XElement x = this.GetElement(StrassenschluesselXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(StrassenschluesselXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                }
                else {
                    this.SetElementWithValidation(StrassenschluesselXName, value, "Strassenschluessel", StrassenschluesselLocalType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Strassenschluessel?, Strassenname?, Ortsteilschluessel?, Ortsteilname?, LageOberflaeche?, KommentarLage?, Ueberschwemmungsgebiet?)
        /// </para>
        /// </summary>
        public virtual string Strassenname {
            get {
                XElement x = this.GetElement(StrassennameXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(StrassennameXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                else {
                    this.SetElementWithValidation(StrassennameXName, value, "Strassenname", StrassennameLocalType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Strassenschluessel?, Strassenname?, Ortsteilschluessel?, Ortsteilname?, LageOberflaeche?, KommentarLage?, Ueberschwemmungsgebiet?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? Ortsteilschluessel {
            get {
                XElement x = this.GetElement(OrtsteilschluesselXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(OrtsteilschluesselXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                }
                else {
                    this.SetElementWithValidation(OrtsteilschluesselXName, value, "Ortsteilschluessel", OrtsteilschluesselLocalType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Strassenschluessel?, Strassenname?, Ortsteilschluessel?, Ortsteilname?, LageOberflaeche?, KommentarLage?, Ueberschwemmungsgebiet?)
        /// </para>
        /// </summary>
        public virtual string Ortsteilname {
            get {
                XElement x = this.GetElement(OrtsteilnameXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(OrtsteilnameXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                else {
                    this.SetElementWithValidation(OrtsteilnameXName, value, "Ortsteilname", OrtsteilnameLocalType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Strassenschluessel?, Strassenname?, Ortsteilschluessel?, Ortsteilname?, LageOberflaeche?, KommentarLage?, Ueberschwemmungsgebiet?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? LageOberflaeche {
            get {
                XElement x = this.GetElement(LageOberflaecheXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(LageOberflaecheXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                }
                else {
                    this.SetElementWithValidation(LageOberflaecheXName, value, "LageOberflaeche", global::www.bfr.abwasser.de.LageType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Strassenschluessel?, Strassenname?, Ortsteilschluessel?, Ortsteilname?, LageOberflaeche?, KommentarLage?, Ueberschwemmungsgebiet?)
        /// </para>
        /// </summary>
        public virtual string KommentarLage {
            get {
                XElement x = this.GetElement(KommentarLageXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
            set {
                this.SetElement(KommentarLageXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Strassenschluessel?, Strassenname?, Ortsteilschluessel?, Ortsteilname?, LageOberflaeche?, KommentarLage?, Ueberschwemmungsgebiet?)
        /// </para>
        /// </summary>
        public virtual System.Boolean? Ueberschwemmungsgebiet {
            get {
                XElement x = this.GetElement(UeberschwemmungsgebietXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
            set {
                this.SetElement(UeberschwemmungsgebietXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<StammLageType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(StrassenschluesselXName, typeof(decimal));
            localElementDictionary.Add(StrassennameXName, typeof(string));
            localElementDictionary.Add(OrtsteilschluesselXName, typeof(decimal));
            localElementDictionary.Add(OrtsteilnameXName, typeof(string));
            localElementDictionary.Add(LageOberflaecheXName, typeof(decimal));
            localElementDictionary.Add(KommentarLageXName, typeof(string));
            localElementDictionary.Add(UeberschwemmungsgebietXName, typeof(bool));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        private class StrassenschluesselLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(1024)), null, 0, 0, null, null, 0, null, null, 0, null, 5, XmlSchemaWhiteSpace.Collapse));
            
            private StrassenschluesselLocalType() {
            }
        }
        
        private class StrassennameLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(4)), null, 0, 0, null, null, 40, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
            
            private StrassennameLocalType() {
            }
        }
        
        private class OrtsteilschluesselLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(1024)), null, 0, 0, null, null, 0, null, null, 0, null, 4, XmlSchemaWhiteSpace.Collapse));
            
            private OrtsteilschluesselLocalType() {
            }
        }
        
        private class OrtsteilnameLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(4)), null, 0, 0, null, null, 40, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
            
            private OrtsteilnameLocalType() {
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (BezeichnungMassnahme, Auftragskennung, Ausfuehrungsbeginn?, Ausfuehrungsende?, Abnahmedatum?, Gewaehrleistungsende?, Verfahrensbezeichnung?, Sanierungsumfang?, Bauwerksteil?, LichteWeite1?, LichteWeite2?, Profilkennziffer_Bauteilform?, Dichtheitspruefung?, Abschreibungszeitraum?, Kommentar?, Lagedaten?, MaterialKennwerte?)
    /// </para>
    /// </summary>
    public partial class SanierungType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName BezeichnungMassnahmeXName = System.Xml.Linq.XName.Get("BezeichnungMassnahme", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName AuftragskennungXName = System.Xml.Linq.XName.Get("Auftragskennung", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName AusfuehrungsbeginnXName = System.Xml.Linq.XName.Get("Ausfuehrungsbeginn", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName AusfuehrungsendeXName = System.Xml.Linq.XName.Get("Ausfuehrungsende", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName AbnahmedatumXName = System.Xml.Linq.XName.Get("Abnahmedatum", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName GewaehrleistungsendeXName = System.Xml.Linq.XName.Get("Gewaehrleistungsende", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName VerfahrensbezeichnungXName = System.Xml.Linq.XName.Get("Verfahrensbezeichnung", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName SanierungsumfangXName = System.Xml.Linq.XName.Get("Sanierungsumfang", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName BauwerksteilXName = System.Xml.Linq.XName.Get("Bauwerksteil", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName LichteWeite1XName = System.Xml.Linq.XName.Get("LichteWeite1", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName LichteWeite2XName = System.Xml.Linq.XName.Get("LichteWeite2", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName Profilkennziffer_BauteilformXName = System.Xml.Linq.XName.Get("Profilkennziffer_Bauteilform", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName DichtheitspruefungXName = System.Xml.Linq.XName.Get("Dichtheitspruefung", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName AbschreibungszeitraumXName = System.Xml.Linq.XName.Get("Abschreibungszeitraum", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName KommentarXName = System.Xml.Linq.XName.Get("Kommentar", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName LagedatenXName = System.Xml.Linq.XName.Get("Lagedaten", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName MaterialKennwerteXName = System.Xml.Linq.XName.Get("MaterialKennwerte", "http://www.bfr-abwasser.de");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("SanierungType", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator SanierungType(XElement xe) { return XTypedServices.ToXTypedElement<SanierungType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static SanierungType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(BezeichnungMassnahmeXName), new NamedContentModelEntity(AuftragskennungXName), new NamedContentModelEntity(AusfuehrungsbeginnXName), new NamedContentModelEntity(AusfuehrungsendeXName), new NamedContentModelEntity(AbnahmedatumXName), new NamedContentModelEntity(GewaehrleistungsendeXName), new NamedContentModelEntity(VerfahrensbezeichnungXName), new NamedContentModelEntity(SanierungsumfangXName), new NamedContentModelEntity(BauwerksteilXName), new NamedContentModelEntity(LichteWeite1XName), new NamedContentModelEntity(LichteWeite2XName), new NamedContentModelEntity(Profilkennziffer_BauteilformXName), new NamedContentModelEntity(DichtheitspruefungXName), new NamedContentModelEntity(AbschreibungszeitraumXName), new NamedContentModelEntity(KommentarXName), new NamedContentModelEntity(LagedatenXName), new NamedContentModelEntity(MaterialKennwerteXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (BezeichnungMassnahme, Auftragskennung, Ausfuehrungsbeginn?, Ausfuehrungsende?, Abnahmedatum?, Gewaehrleistungsende?, Verfahrensbezeichnung?, Sanierungsumfang?, Bauwerksteil?, LichteWeite1?, LichteWeite2?, Profilkennziffer_Bauteilform?, Dichtheitspruefung?, Abschreibungszeitraum?, Kommentar?, Lagedaten?, MaterialKennwerte?)
        /// </para>
        /// </summary>
        public SanierungType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (BezeichnungMassnahme, Auftragskennung, Ausfuehrungsbeginn?, Ausfuehrungsende?, Abnahmedatum?, Gewaehrleistungsende?, Verfahrensbezeichnung?, Sanierungsumfang?, Bauwerksteil?, LichteWeite1?, LichteWeite2?, Profilkennziffer_Bauteilform?, Dichtheitspruefung?, Abschreibungszeitraum?, Kommentar?, Lagedaten?, MaterialKennwerte?)
        /// </para>
        /// </summary>
        public virtual string BezeichnungMassnahme {
            get {
                XElement x = this.GetElement(BezeichnungMassnahmeXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(BezeichnungMassnahmeXName, value, "BezeichnungMassnahme", BezeichnungMassnahmeLocalType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (BezeichnungMassnahme, Auftragskennung, Ausfuehrungsbeginn?, Ausfuehrungsende?, Abnahmedatum?, Gewaehrleistungsende?, Verfahrensbezeichnung?, Sanierungsumfang?, Bauwerksteil?, LichteWeite1?, LichteWeite2?, Profilkennziffer_Bauteilform?, Dichtheitspruefung?, Abschreibungszeitraum?, Kommentar?, Lagedaten?, MaterialKennwerte?)
        /// </para>
        /// </summary>
        public virtual decimal Auftragskennung {
            get {
                XElement x = this.GetElement(AuftragskennungXName);
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                this.SetElementWithValidation(AuftragskennungXName, value, "Auftragskennung", AuftragskennungLocalType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (BezeichnungMassnahme, Auftragskennung, Ausfuehrungsbeginn?, Ausfuehrungsende?, Abnahmedatum?, Gewaehrleistungsende?, Verfahrensbezeichnung?, Sanierungsumfang?, Bauwerksteil?, LichteWeite1?, LichteWeite2?, Profilkennziffer_Bauteilform?, Dichtheitspruefung?, Abschreibungszeitraum?, Kommentar?, Lagedaten?, MaterialKennwerte?)
        /// </para>
        /// </summary>
        public virtual System.DateTime? Ausfuehrungsbeginn {
            get {
                XElement x = this.GetElement(AusfuehrungsbeginnXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<System.DateTime>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date).Datatype);
            }
            set {
                this.SetElement(AusfuehrungsbeginnXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (BezeichnungMassnahme, Auftragskennung, Ausfuehrungsbeginn?, Ausfuehrungsende?, Abnahmedatum?, Gewaehrleistungsende?, Verfahrensbezeichnung?, Sanierungsumfang?, Bauwerksteil?, LichteWeite1?, LichteWeite2?, Profilkennziffer_Bauteilform?, Dichtheitspruefung?, Abschreibungszeitraum?, Kommentar?, Lagedaten?, MaterialKennwerte?)
        /// </para>
        /// </summary>
        public virtual System.DateTime? Ausfuehrungsende {
            get {
                XElement x = this.GetElement(AusfuehrungsendeXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<System.DateTime>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date).Datatype);
            }
            set {
                this.SetElement(AusfuehrungsendeXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (BezeichnungMassnahme, Auftragskennung, Ausfuehrungsbeginn?, Ausfuehrungsende?, Abnahmedatum?, Gewaehrleistungsende?, Verfahrensbezeichnung?, Sanierungsumfang?, Bauwerksteil?, LichteWeite1?, LichteWeite2?, Profilkennziffer_Bauteilform?, Dichtheitspruefung?, Abschreibungszeitraum?, Kommentar?, Lagedaten?, MaterialKennwerte?)
        /// </para>
        /// </summary>
        public virtual System.DateTime? Abnahmedatum {
            get {
                XElement x = this.GetElement(AbnahmedatumXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<System.DateTime>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date).Datatype);
            }
            set {
                this.SetElement(AbnahmedatumXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (BezeichnungMassnahme, Auftragskennung, Ausfuehrungsbeginn?, Ausfuehrungsende?, Abnahmedatum?, Gewaehrleistungsende?, Verfahrensbezeichnung?, Sanierungsumfang?, Bauwerksteil?, LichteWeite1?, LichteWeite2?, Profilkennziffer_Bauteilform?, Dichtheitspruefung?, Abschreibungszeitraum?, Kommentar?, Lagedaten?, MaterialKennwerte?)
        /// </para>
        /// </summary>
        public virtual System.DateTime? Gewaehrleistungsende {
            get {
                XElement x = this.GetElement(GewaehrleistungsendeXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<System.DateTime>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date).Datatype);
            }
            set {
                this.SetElement(GewaehrleistungsendeXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (BezeichnungMassnahme, Auftragskennung, Ausfuehrungsbeginn?, Ausfuehrungsende?, Abnahmedatum?, Gewaehrleistungsende?, Verfahrensbezeichnung?, Sanierungsumfang?, Bauwerksteil?, LichteWeite1?, LichteWeite2?, Profilkennziffer_Bauteilform?, Dichtheitspruefung?, Abschreibungszeitraum?, Kommentar?, Lagedaten?, MaterialKennwerte?)
        /// </para>
        /// </summary>
        public virtual string Verfahrensbezeichnung {
            get {
                XElement x = this.GetElement(VerfahrensbezeichnungXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(VerfahrensbezeichnungXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                else {
                    this.SetElementWithValidation(VerfahrensbezeichnungXName, value, "Verfahrensbezeichnung", global::www.bfr.abwasser.de.VerfahrensbezeichnungType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (BezeichnungMassnahme, Auftragskennung, Ausfuehrungsbeginn?, Ausfuehrungsende?, Abnahmedatum?, Gewaehrleistungsende?, Verfahrensbezeichnung?, Sanierungsumfang?, Bauwerksteil?, LichteWeite1?, LichteWeite2?, Profilkennziffer_Bauteilform?, Dichtheitspruefung?, Abschreibungszeitraum?, Kommentar?, Lagedaten?, MaterialKennwerte?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? Sanierungsumfang {
            get {
                XElement x = this.GetElement(SanierungsumfangXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(SanierungsumfangXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                }
                else {
                    this.SetElementWithValidation(SanierungsumfangXName, value, "Sanierungsumfang", global::www.bfr.abwasser.de.SanierungsumfangType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (BezeichnungMassnahme, Auftragskennung, Ausfuehrungsbeginn?, Ausfuehrungsende?, Abnahmedatum?, Gewaehrleistungsende?, Verfahrensbezeichnung?, Sanierungsumfang?, Bauwerksteil?, LichteWeite1?, LichteWeite2?, Profilkennziffer_Bauteilform?, Dichtheitspruefung?, Abschreibungszeitraum?, Kommentar?, Lagedaten?, MaterialKennwerte?)
        /// </para>
        /// </summary>
        public virtual string Bauwerksteil {
            get {
                XElement x = this.GetElement(BauwerksteilXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(BauwerksteilXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                else {
                    this.SetElementWithValidation(BauwerksteilXName, value, "Bauwerksteil", global::www.bfr.abwasser.de.BauwerksteilType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (BezeichnungMassnahme, Auftragskennung, Ausfuehrungsbeginn?, Ausfuehrungsende?, Abnahmedatum?, Gewaehrleistungsende?, Verfahrensbezeichnung?, Sanierungsumfang?, Bauwerksteil?, LichteWeite1?, LichteWeite2?, Profilkennziffer_Bauteilform?, Dichtheitspruefung?, Abschreibungszeitraum?, Kommentar?, Lagedaten?, MaterialKennwerte?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? LichteWeite1 {
            get {
                XElement x = this.GetElement(LichteWeite1XName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(LichteWeite1XName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                }
                else {
                    this.SetElementWithValidation(LichteWeite1XName, value, "LichteWeite1", LichteWeite1LocalType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (BezeichnungMassnahme, Auftragskennung, Ausfuehrungsbeginn?, Ausfuehrungsende?, Abnahmedatum?, Gewaehrleistungsende?, Verfahrensbezeichnung?, Sanierungsumfang?, Bauwerksteil?, LichteWeite1?, LichteWeite2?, Profilkennziffer_Bauteilform?, Dichtheitspruefung?, Abschreibungszeitraum?, Kommentar?, Lagedaten?, MaterialKennwerte?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? LichteWeite2 {
            get {
                XElement x = this.GetElement(LichteWeite2XName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(LichteWeite2XName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                }
                else {
                    this.SetElementWithValidation(LichteWeite2XName, value, "LichteWeite2", LichteWeite2LocalType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (BezeichnungMassnahme, Auftragskennung, Ausfuehrungsbeginn?, Ausfuehrungsende?, Abnahmedatum?, Gewaehrleistungsende?, Verfahrensbezeichnung?, Sanierungsumfang?, Bauwerksteil?, LichteWeite1?, LichteWeite2?, Profilkennziffer_Bauteilform?, Dichtheitspruefung?, Abschreibungszeitraum?, Kommentar?, Lagedaten?, MaterialKennwerte?)
        /// </para>
        /// </summary>
        public virtual string Profilkennziffer_Bauteilform {
            get {
                XElement x = this.GetElement(Profilkennziffer_BauteilformXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(Profilkennziffer_BauteilformXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                else {
                    this.SetElementWithValidation(Profilkennziffer_BauteilformXName, value, "Profilkennziffer_Bauteilform", global::www.bfr.abwasser.de.ProfiltypType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (BezeichnungMassnahme, Auftragskennung, Ausfuehrungsbeginn?, Ausfuehrungsende?, Abnahmedatum?, Gewaehrleistungsende?, Verfahrensbezeichnung?, Sanierungsumfang?, Bauwerksteil?, LichteWeite1?, LichteWeite2?, Profilkennziffer_Bauteilform?, Dichtheitspruefung?, Abschreibungszeitraum?, Kommentar?, Lagedaten?, MaterialKennwerte?)
        /// </para>
        /// </summary>
        public virtual System.Boolean? Dichtheitspruefung {
            get {
                XElement x = this.GetElement(DichtheitspruefungXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
            set {
                this.SetElement(DichtheitspruefungXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (BezeichnungMassnahme, Auftragskennung, Ausfuehrungsbeginn?, Ausfuehrungsende?, Abnahmedatum?, Gewaehrleistungsende?, Verfahrensbezeichnung?, Sanierungsumfang?, Bauwerksteil?, LichteWeite1?, LichteWeite2?, Profilkennziffer_Bauteilform?, Dichtheitspruefung?, Abschreibungszeitraum?, Kommentar?, Lagedaten?, MaterialKennwerte?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? Abschreibungszeitraum {
            get {
                XElement x = this.GetElement(AbschreibungszeitraumXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(AbschreibungszeitraumXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                }
                else {
                    this.SetElementWithValidation(AbschreibungszeitraumXName, value, "Abschreibungszeitraum", AbschreibungszeitraumLocalType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (BezeichnungMassnahme, Auftragskennung, Ausfuehrungsbeginn?, Ausfuehrungsende?, Abnahmedatum?, Gewaehrleistungsende?, Verfahrensbezeichnung?, Sanierungsumfang?, Bauwerksteil?, LichteWeite1?, LichteWeite2?, Profilkennziffer_Bauteilform?, Dichtheitspruefung?, Abschreibungszeitraum?, Kommentar?, Lagedaten?, MaterialKennwerte?)
        /// </para>
        /// </summary>
        public virtual string Kommentar {
            get {
                XElement x = this.GetElement(KommentarXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
            set {
                this.SetElement(KommentarXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (BezeichnungMassnahme, Auftragskennung, Ausfuehrungsbeginn?, Ausfuehrungsende?, Abnahmedatum?, Gewaehrleistungsende?, Verfahrensbezeichnung?, Sanierungsumfang?, Bauwerksteil?, LichteWeite1?, LichteWeite2?, Profilkennziffer_Bauteilform?, Dichtheitspruefung?, Abschreibungszeitraum?, Kommentar?, Lagedaten?, MaterialKennwerte?)
        /// </para>
        /// </summary>
        public virtual LagedatenType Lagedaten {
            get {
                XElement x = this.GetElement(LagedatenXName);
                return ((LagedatenType)(x));
            }
            set {
                this.SetElement(LagedatenXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (BezeichnungMassnahme, Auftragskennung, Ausfuehrungsbeginn?, Ausfuehrungsende?, Abnahmedatum?, Gewaehrleistungsende?, Verfahrensbezeichnung?, Sanierungsumfang?, Bauwerksteil?, LichteWeite1?, LichteWeite2?, Profilkennziffer_Bauteilform?, Dichtheitspruefung?, Abschreibungszeitraum?, Kommentar?, Lagedaten?, MaterialKennwerte?)
        /// </para>
        /// </summary>
        public virtual MaterialkennwerteType MaterialKennwerte {
            get {
                XElement x = this.GetElement(MaterialKennwerteXName);
                return ((MaterialkennwerteType)(x));
            }
            set {
                this.SetElement(MaterialKennwerteXName, value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<SanierungType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(BezeichnungMassnahmeXName, typeof(string));
            localElementDictionary.Add(AuftragskennungXName, typeof(decimal));
            localElementDictionary.Add(AusfuehrungsbeginnXName, typeof(System.DateTime));
            localElementDictionary.Add(AusfuehrungsendeXName, typeof(System.DateTime));
            localElementDictionary.Add(AbnahmedatumXName, typeof(System.DateTime));
            localElementDictionary.Add(GewaehrleistungsendeXName, typeof(System.DateTime));
            localElementDictionary.Add(VerfahrensbezeichnungXName, typeof(string));
            localElementDictionary.Add(SanierungsumfangXName, typeof(decimal));
            localElementDictionary.Add(BauwerksteilXName, typeof(string));
            localElementDictionary.Add(LichteWeite1XName, typeof(decimal));
            localElementDictionary.Add(LichteWeite2XName, typeof(decimal));
            localElementDictionary.Add(Profilkennziffer_BauteilformXName, typeof(string));
            localElementDictionary.Add(DichtheitspruefungXName, typeof(bool));
            localElementDictionary.Add(AbschreibungszeitraumXName, typeof(decimal));
            localElementDictionary.Add(KommentarXName, typeof(string));
            localElementDictionary.Add(LagedatenXName, typeof(LagedatenType));
            localElementDictionary.Add(MaterialKennwerteXName, typeof(MaterialkennwerteType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        private class BezeichnungMassnahmeLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(4)), null, 0, 0, null, null, 5, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
            
            private BezeichnungMassnahmeLocalType() {
            }
        }
        
        private class AuftragskennungLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(1024)), null, 0, 0, null, null, 0, null, null, 0, null, 6, XmlSchemaWhiteSpace.Collapse));
            
            private AuftragskennungLocalType() {
            }
        }
        
        private class LichteWeite1LocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(1024)), null, 0, 0, null, null, 0, null, null, 0, null, 5, XmlSchemaWhiteSpace.Collapse));
            
            private LichteWeite1LocalType() {
            }
        }
        
        private class LichteWeite2LocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(1024)), null, 0, 0, null, null, 0, null, null, 0, null, 5, XmlSchemaWhiteSpace.Collapse));
            
            private LichteWeite2LocalType() {
            }
        }
        
        private class AbschreibungszeitraumLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(1024)), null, 0, 0, null, null, 0, null, null, 0, null, 3, XmlSchemaWhiteSpace.Collapse));
            
            private AbschreibungszeitraumLocalType() {
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (StationierungAnfang?, StationierungEnde?, Dokumentationsrichtung?, PositionVon?, PositionBis?, Kommentar?)
    /// </para>
    /// </summary>
    public partial class LagedatenType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName StationierungAnfangXName = System.Xml.Linq.XName.Get("StationierungAnfang", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName StationierungEndeXName = System.Xml.Linq.XName.Get("StationierungEnde", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName DokumentationsrichtungXName = System.Xml.Linq.XName.Get("Dokumentationsrichtung", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName PositionVonXName = System.Xml.Linq.XName.Get("PositionVon", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName PositionBisXName = System.Xml.Linq.XName.Get("PositionBis", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName KommentarXName = System.Xml.Linq.XName.Get("Kommentar", "http://www.bfr-abwasser.de");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("LagedatenType", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator LagedatenType(XElement xe) { return XTypedServices.ToXTypedElement<LagedatenType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static LagedatenType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(StationierungAnfangXName), new NamedContentModelEntity(StationierungEndeXName), new NamedContentModelEntity(DokumentationsrichtungXName), new NamedContentModelEntity(PositionVonXName), new NamedContentModelEntity(PositionBisXName), new NamedContentModelEntity(KommentarXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (StationierungAnfang?, StationierungEnde?, Dokumentationsrichtung?, PositionVon?, PositionBis?, Kommentar?)
        /// </para>
        /// </summary>
        public LagedatenType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (StationierungAnfang?, StationierungEnde?, Dokumentationsrichtung?, PositionVon?, PositionBis?, Kommentar?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? StationierungAnfang {
            get {
                XElement x = this.GetElement(StationierungAnfangXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(StationierungAnfangXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                }
                else {
                    this.SetElementWithValidation(StationierungAnfangXName, value, "StationierungAnfang", StationierungAnfangLocalType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (StationierungAnfang?, StationierungEnde?, Dokumentationsrichtung?, PositionVon?, PositionBis?, Kommentar?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? StationierungEnde {
            get {
                XElement x = this.GetElement(StationierungEndeXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(StationierungEndeXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                }
                else {
                    this.SetElementWithValidation(StationierungEndeXName, value, "StationierungEnde", StationierungEndeLocalType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (StationierungAnfang?, StationierungEnde?, Dokumentationsrichtung?, PositionVon?, PositionBis?, Kommentar?)
        /// </para>
        /// </summary>
        public virtual string Dokumentationsrichtung {
            get {
                XElement x = this.GetElement(DokumentationsrichtungXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(DokumentationsrichtungXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                else {
                    this.SetElementWithValidation(DokumentationsrichtungXName, value, "Dokumentationsrichtung", global::www.bfr.abwasser.de.DokumentationsrichtungType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (StationierungAnfang?, StationierungEnde?, Dokumentationsrichtung?, PositionVon?, PositionBis?, Kommentar?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? PositionVon {
            get {
                XElement x = this.GetElement(PositionVonXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(PositionVonXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                }
                else {
                    this.SetElementWithValidation(PositionVonXName, value, "PositionVon", PositionVonLocalType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (StationierungAnfang?, StationierungEnde?, Dokumentationsrichtung?, PositionVon?, PositionBis?, Kommentar?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? PositionBis {
            get {
                XElement x = this.GetElement(PositionBisXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(PositionBisXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                }
                else {
                    this.SetElementWithValidation(PositionBisXName, value, "PositionBis", PositionBisLocalType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (StationierungAnfang?, StationierungEnde?, Dokumentationsrichtung?, PositionVon?, PositionBis?, Kommentar?)
        /// </para>
        /// </summary>
        public virtual string Kommentar {
            get {
                XElement x = this.GetElement(KommentarXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
            set {
                this.SetElement(KommentarXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<LagedatenType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(StationierungAnfangXName, typeof(decimal));
            localElementDictionary.Add(StationierungEndeXName, typeof(decimal));
            localElementDictionary.Add(DokumentationsrichtungXName, typeof(string));
            localElementDictionary.Add(PositionVonXName, typeof(decimal));
            localElementDictionary.Add(PositionBisXName, typeof(decimal));
            localElementDictionary.Add(KommentarXName, typeof(string));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        private class StationierungAnfangLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(3200)), null, 2, 0, 1000m, null, 0, null, null, 0, null, 5, XmlSchemaWhiteSpace.Collapse));
            
            private StationierungAnfangLocalType() {
            }
        }
        
        private class StationierungEndeLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(3200)), null, 2, 0, 1000m, null, 0, null, null, 0, null, 5, XmlSchemaWhiteSpace.Collapse));
            
            private StationierungEndeLocalType() {
            }
        }
        
        private class PositionVonLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(1024)), null, 0, 0, null, null, 0, null, null, 0, null, 2, XmlSchemaWhiteSpace.Collapse));
            
            private PositionVonLocalType() {
            }
        }
        
        private class PositionBisLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(1024)), null, 0, 0, null, null, 0, null, null, 0, null, 2, XmlSchemaWhiteSpace.Collapse));
            
            private PositionBisLocalType() {
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (MaterialPrimaer?, MaterialVerbund1?, MaterialVerbund2?, Materialstaerke?, Belastung?, ChemBestaendigkeit?, Ringsteifigkeit?, BiegeEModul?, Biegefestigkeit?, Wanddicke?, Wasserdurchlaessigkeit?)
    /// </para>
    /// </summary>
    public partial class MaterialkennwerteType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName MaterialPrimaerXName = System.Xml.Linq.XName.Get("MaterialPrimaer", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName MaterialVerbund1XName = System.Xml.Linq.XName.Get("MaterialVerbund1", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName MaterialVerbund2XName = System.Xml.Linq.XName.Get("MaterialVerbund2", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName MaterialstaerkeXName = System.Xml.Linq.XName.Get("Materialstaerke", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName BelastungXName = System.Xml.Linq.XName.Get("Belastung", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ChemBestaendigkeitXName = System.Xml.Linq.XName.Get("ChemBestaendigkeit", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName RingsteifigkeitXName = System.Xml.Linq.XName.Get("Ringsteifigkeit", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName BiegeEModulXName = System.Xml.Linq.XName.Get("BiegeEModul", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName BiegefestigkeitXName = System.Xml.Linq.XName.Get("Biegefestigkeit", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName WanddickeXName = System.Xml.Linq.XName.Get("Wanddicke", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName WasserdurchlaessigkeitXName = System.Xml.Linq.XName.Get("Wasserdurchlaessigkeit", "http://www.bfr-abwasser.de");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("MaterialkennwerteType", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator MaterialkennwerteType(XElement xe) { return XTypedServices.ToXTypedElement<MaterialkennwerteType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static MaterialkennwerteType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(MaterialPrimaerXName), new NamedContentModelEntity(MaterialVerbund1XName), new NamedContentModelEntity(MaterialVerbund2XName), new NamedContentModelEntity(MaterialstaerkeXName), new NamedContentModelEntity(BelastungXName), new NamedContentModelEntity(ChemBestaendigkeitXName), new NamedContentModelEntity(RingsteifigkeitXName), new NamedContentModelEntity(BiegeEModulXName), new NamedContentModelEntity(BiegefestigkeitXName), new NamedContentModelEntity(WanddickeXName), new NamedContentModelEntity(WasserdurchlaessigkeitXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (MaterialPrimaer?, MaterialVerbund1?, MaterialVerbund2?, Materialstaerke?, Belastung?, ChemBestaendigkeit?, Ringsteifigkeit?, BiegeEModul?, Biegefestigkeit?, Wanddicke?, Wasserdurchlaessigkeit?)
        /// </para>
        /// </summary>
        public MaterialkennwerteType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (MaterialPrimaer?, MaterialVerbund1?, MaterialVerbund2?, Materialstaerke?, Belastung?, ChemBestaendigkeit?, Ringsteifigkeit?, BiegeEModul?, Biegefestigkeit?, Wanddicke?, Wasserdurchlaessigkeit?)
        /// </para>
        /// </summary>
        public virtual string MaterialPrimaer {
            get {
                XElement x = this.GetElement(MaterialPrimaerXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(MaterialPrimaerXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                else {
                    this.SetElementWithValidation(MaterialPrimaerXName, value, "MaterialPrimaer", global::www.bfr.abwasser.de.MaterialType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (MaterialPrimaer?, MaterialVerbund1?, MaterialVerbund2?, Materialstaerke?, Belastung?, ChemBestaendigkeit?, Ringsteifigkeit?, BiegeEModul?, Biegefestigkeit?, Wanddicke?, Wasserdurchlaessigkeit?)
        /// </para>
        /// </summary>
        public virtual string MaterialVerbund1 {
            get {
                XElement x = this.GetElement(MaterialVerbund1XName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(MaterialVerbund1XName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                else {
                    this.SetElementWithValidation(MaterialVerbund1XName, value, "MaterialVerbund1", global::www.bfr.abwasser.de.MaterialVerbundType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (MaterialPrimaer?, MaterialVerbund1?, MaterialVerbund2?, Materialstaerke?, Belastung?, ChemBestaendigkeit?, Ringsteifigkeit?, BiegeEModul?, Biegefestigkeit?, Wanddicke?, Wasserdurchlaessigkeit?)
        /// </para>
        /// </summary>
        public virtual string MaterialVerbund2 {
            get {
                XElement x = this.GetElement(MaterialVerbund2XName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(MaterialVerbund2XName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                else {
                    this.SetElementWithValidation(MaterialVerbund2XName, value, "MaterialVerbund2", global::www.bfr.abwasser.de.MaterialVerbundType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (MaterialPrimaer?, MaterialVerbund1?, MaterialVerbund2?, Materialstaerke?, Belastung?, ChemBestaendigkeit?, Ringsteifigkeit?, BiegeEModul?, Biegefestigkeit?, Wanddicke?, Wasserdurchlaessigkeit?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? Materialstaerke {
            get {
                XElement x = this.GetElement(MaterialstaerkeXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(MaterialstaerkeXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                }
                else {
                    this.SetElementWithValidation(MaterialstaerkeXName, value, "Materialstaerke", MaterialstaerkeLocalType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (MaterialPrimaer?, MaterialVerbund1?, MaterialVerbund2?, Materialstaerke?, Belastung?, ChemBestaendigkeit?, Ringsteifigkeit?, BiegeEModul?, Biegefestigkeit?, Wanddicke?, Wasserdurchlaessigkeit?)
        /// </para>
        /// </summary>
        public virtual string Belastung {
            get {
                XElement x = this.GetElement(BelastungXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(BelastungXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                else {
                    this.SetElementWithValidation(BelastungXName, value, "Belastung", global::www.bfr.abwasser.de.BelastungType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (MaterialPrimaer?, MaterialVerbund1?, MaterialVerbund2?, Materialstaerke?, Belastung?, ChemBestaendigkeit?, Ringsteifigkeit?, BiegeEModul?, Biegefestigkeit?, Wanddicke?, Wasserdurchlaessigkeit?)
        /// </para>
        /// </summary>
        public virtual string ChemBestaendigkeit {
            get {
                XElement x = this.GetElement(ChemBestaendigkeitXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(ChemBestaendigkeitXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                else {
                    this.SetElementWithValidation(ChemBestaendigkeitXName, value, "ChemBestaendigkeit", ChemBestaendigkeitLocalType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (MaterialPrimaer?, MaterialVerbund1?, MaterialVerbund2?, Materialstaerke?, Belastung?, ChemBestaendigkeit?, Ringsteifigkeit?, BiegeEModul?, Biegefestigkeit?, Wanddicke?, Wasserdurchlaessigkeit?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? Ringsteifigkeit {
            get {
                XElement x = this.GetElement(RingsteifigkeitXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(RingsteifigkeitXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                }
                else {
                    this.SetElementWithValidation(RingsteifigkeitXName, value, "Ringsteifigkeit", RingsteifigkeitLocalType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (MaterialPrimaer?, MaterialVerbund1?, MaterialVerbund2?, Materialstaerke?, Belastung?, ChemBestaendigkeit?, Ringsteifigkeit?, BiegeEModul?, Biegefestigkeit?, Wanddicke?, Wasserdurchlaessigkeit?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? BiegeEModul {
            get {
                XElement x = this.GetElement(BiegeEModulXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(BiegeEModulXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                }
                else {
                    this.SetElementWithValidation(BiegeEModulXName, value, "BiegeEModul", BiegeEModulLocalType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (MaterialPrimaer?, MaterialVerbund1?, MaterialVerbund2?, Materialstaerke?, Belastung?, ChemBestaendigkeit?, Ringsteifigkeit?, BiegeEModul?, Biegefestigkeit?, Wanddicke?, Wasserdurchlaessigkeit?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? Biegefestigkeit {
            get {
                XElement x = this.GetElement(BiegefestigkeitXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(BiegefestigkeitXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                }
                else {
                    this.SetElementWithValidation(BiegefestigkeitXName, value, "Biegefestigkeit", BiegefestigkeitLocalType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (MaterialPrimaer?, MaterialVerbund1?, MaterialVerbund2?, Materialstaerke?, Belastung?, ChemBestaendigkeit?, Ringsteifigkeit?, BiegeEModul?, Biegefestigkeit?, Wanddicke?, Wasserdurchlaessigkeit?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? Wanddicke {
            get {
                XElement x = this.GetElement(WanddickeXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(WanddickeXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                }
                else {
                    this.SetElementWithValidation(WanddickeXName, value, "Wanddicke", WanddickeLocalType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (MaterialPrimaer?, MaterialVerbund1?, MaterialVerbund2?, Materialstaerke?, Belastung?, ChemBestaendigkeit?, Ringsteifigkeit?, BiegeEModul?, Biegefestigkeit?, Wanddicke?, Wasserdurchlaessigkeit?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? Wasserdurchlaessigkeit {
            get {
                XElement x = this.GetElement(WasserdurchlaessigkeitXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(WasserdurchlaessigkeitXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                }
                else {
                    this.SetElementWithValidation(WasserdurchlaessigkeitXName, value, "Wasserdurchlaessigkeit", global::www.bfr.abwasser.de.WasserdurchlaessigkeitType.TypeDefinition);
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<MaterialkennwerteType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(MaterialPrimaerXName, typeof(string));
            localElementDictionary.Add(MaterialVerbund1XName, typeof(string));
            localElementDictionary.Add(MaterialVerbund2XName, typeof(string));
            localElementDictionary.Add(MaterialstaerkeXName, typeof(decimal));
            localElementDictionary.Add(BelastungXName, typeof(string));
            localElementDictionary.Add(ChemBestaendigkeitXName, typeof(string));
            localElementDictionary.Add(RingsteifigkeitXName, typeof(decimal));
            localElementDictionary.Add(BiegeEModulXName, typeof(decimal));
            localElementDictionary.Add(BiegefestigkeitXName, typeof(decimal));
            localElementDictionary.Add(WanddickeXName, typeof(decimal));
            localElementDictionary.Add(WasserdurchlaessigkeitXName, typeof(decimal));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        private class MaterialstaerkeLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(1024)), null, 0, 0, null, null, 0, null, null, 0, null, 4, XmlSchemaWhiteSpace.Collapse));
            
            private MaterialstaerkeLocalType() {
            }
        }
        
        private class ChemBestaendigkeitLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(4)), null, 0, 0, null, null, 60, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
            
            private ChemBestaendigkeitLocalType() {
            }
        }
        
        private class RingsteifigkeitLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(3200)), null, 3, 0, 100m, null, 0, null, null, 0, null, 5, XmlSchemaWhiteSpace.Collapse));
            
            private RingsteifigkeitLocalType() {
            }
        }
        
        private class BiegeEModulLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(3200)), null, 1, 0, 1000000m, null, 0, null, null, 0, null, 7, XmlSchemaWhiteSpace.Collapse));
            
            private BiegeEModulLocalType() {
            }
        }
        
        private class BiegefestigkeitLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(3200)), null, 1, 0, 100000m, null, 0, null, null, 0, null, 6, XmlSchemaWhiteSpace.Collapse));
            
            private BiegefestigkeitLocalType() {
            }
        }
        
        private class WanddickeLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(3200)), null, 2, 0, 1000m, null, 0, null, null, 0, null, 5, XmlSchemaWhiteSpace.Collapse));
            
            private WanddickeLocalType() {
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (VorlaeufigeBezeichnung?, GeoObjektart?, GeoObjekttyp?, Lagegenauigkeitsklasse?, Hoehengenauigkeitsklasse?, Datenherkunft?, Kommentar?, Geometriedaten, CRSLage?)
    /// </para>
    /// </summary>
    public partial class GeometrieType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName VorlaeufigeBezeichnungXName = System.Xml.Linq.XName.Get("VorlaeufigeBezeichnung", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName GeoObjektartXName = System.Xml.Linq.XName.Get("GeoObjektart", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName GeoObjekttypXName = System.Xml.Linq.XName.Get("GeoObjekttyp", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName LagegenauigkeitsklasseXName = System.Xml.Linq.XName.Get("Lagegenauigkeitsklasse", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName HoehengenauigkeitsklasseXName = System.Xml.Linq.XName.Get("Hoehengenauigkeitsklasse", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName DatenherkunftXName = System.Xml.Linq.XName.Get("Datenherkunft", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName KommentarXName = System.Xml.Linq.XName.Get("Kommentar", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName GeometriedatenXName = System.Xml.Linq.XName.Get("Geometriedaten", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName CRSLageXName = System.Xml.Linq.XName.Get("CRSLage", "http://www.bfr-abwasser.de");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("GeometrieType", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator GeometrieType(XElement xe) { return XTypedServices.ToXTypedElement<GeometrieType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static GeometrieType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(VorlaeufigeBezeichnungXName), new NamedContentModelEntity(GeoObjektartXName), new NamedContentModelEntity(GeoObjekttypXName), new NamedContentModelEntity(LagegenauigkeitsklasseXName), new NamedContentModelEntity(HoehengenauigkeitsklasseXName), new NamedContentModelEntity(DatenherkunftXName), new NamedContentModelEntity(KommentarXName), new NamedContentModelEntity(GeometriedatenXName), new NamedContentModelEntity(CRSLageXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (VorlaeufigeBezeichnung?, GeoObjektart?, GeoObjekttyp?, Lagegenauigkeitsklasse?, Hoehengenauigkeitsklasse?, Datenherkunft?, Kommentar?, Geometriedaten, CRSLage?)
        /// </para>
        /// </summary>
        public GeometrieType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (VorlaeufigeBezeichnung?, GeoObjektart?, GeoObjekttyp?, Lagegenauigkeitsklasse?, Hoehengenauigkeitsklasse?, Datenherkunft?, Kommentar?, Geometriedaten, CRSLage?)
        /// </para>
        /// </summary>
        public virtual string VorlaeufigeBezeichnung {
            get {
                XElement x = this.GetElement(VorlaeufigeBezeichnungXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(VorlaeufigeBezeichnungXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                else {
                    this.SetElementWithValidation(VorlaeufigeBezeichnungXName, value, "VorlaeufigeBezeichnung", VorlaeufigeBezeichnungLocalType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (VorlaeufigeBezeichnung?, GeoObjektart?, GeoObjekttyp?, Lagegenauigkeitsklasse?, Hoehengenauigkeitsklasse?, Datenherkunft?, Kommentar?, Geometriedaten, CRSLage?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? GeoObjektart {
            get {
                XElement x = this.GetElement(GeoObjektartXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(GeoObjektartXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                }
                else {
                    this.SetElementWithValidation(GeoObjektartXName, value, "GeoObjektart", global::www.bfr.abwasser.de.GeoObjektartType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (VorlaeufigeBezeichnung?, GeoObjektart?, GeoObjekttyp?, Lagegenauigkeitsklasse?, Hoehengenauigkeitsklasse?, Datenherkunft?, Kommentar?, Geometriedaten, CRSLage?)
        /// </para>
        /// </summary>
        public virtual string GeoObjekttyp {
            get {
                XElement x = this.GetElement(GeoObjekttypXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(GeoObjekttypXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                else {
                    this.SetElementWithValidation(GeoObjekttypXName, value, "GeoObjekttyp", global::www.bfr.abwasser.de.GeoObjektTypType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (VorlaeufigeBezeichnung?, GeoObjektart?, GeoObjekttyp?, Lagegenauigkeitsklasse?, Hoehengenauigkeitsklasse?, Datenherkunft?, Kommentar?, Geometriedaten, CRSLage?)
        /// </para>
        /// </summary>
        public virtual string Lagegenauigkeitsklasse {
            get {
                XElement x = this.GetElement(LagegenauigkeitsklasseXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(LagegenauigkeitsklasseXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                else {
                    this.SetElementWithValidation(LagegenauigkeitsklasseXName, value, "Lagegenauigkeitsklasse", global::www.bfr.abwasser.de.LagegenauigkeitsklasseType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (VorlaeufigeBezeichnung?, GeoObjektart?, GeoObjekttyp?, Lagegenauigkeitsklasse?, Hoehengenauigkeitsklasse?, Datenherkunft?, Kommentar?, Geometriedaten, CRSLage?)
        /// </para>
        /// </summary>
        public virtual string Hoehengenauigkeitsklasse {
            get {
                XElement x = this.GetElement(HoehengenauigkeitsklasseXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(HoehengenauigkeitsklasseXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                else {
                    this.SetElementWithValidation(HoehengenauigkeitsklasseXName, value, "Hoehengenauigkeitsklasse", global::www.bfr.abwasser.de.HoehengenauigkeitsklasseType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (VorlaeufigeBezeichnung?, GeoObjektart?, GeoObjekttyp?, Lagegenauigkeitsklasse?, Hoehengenauigkeitsklasse?, Datenherkunft?, Kommentar?, Geometriedaten, CRSLage?)
        /// </para>
        /// </summary>
        public virtual string Datenherkunft {
            get {
                XElement x = this.GetElement(DatenherkunftXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(DatenherkunftXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                else {
                    this.SetElementWithValidation(DatenherkunftXName, value, "Datenherkunft", DatenherkunftLocalType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (VorlaeufigeBezeichnung?, GeoObjektart?, GeoObjekttyp?, Lagegenauigkeitsklasse?, Hoehengenauigkeitsklasse?, Datenherkunft?, Kommentar?, Geometriedaten, CRSLage?)
        /// </para>
        /// </summary>
        public virtual string Kommentar {
            get {
                XElement x = this.GetElement(KommentarXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
            set {
                this.SetElement(KommentarXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (VorlaeufigeBezeichnung?, GeoObjektart?, GeoObjekttyp?, Lagegenauigkeitsklasse?, Hoehengenauigkeitsklasse?, Datenherkunft?, Kommentar?, Geometriedaten, CRSLage?)
        /// </para>
        /// </summary>
        public virtual GeometriedatenLocalType Geometriedaten {
            get {
                XElement x = this.GetElement(GeometriedatenXName);
                return ((GeometriedatenLocalType)(x));
            }
            set {
                this.SetElement(GeometriedatenXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (VorlaeufigeBezeichnung?, GeoObjektart?, GeoObjekttyp?, Lagegenauigkeitsklasse?, Hoehengenauigkeitsklasse?, Datenherkunft?, Kommentar?, Geometriedaten, CRSLage?)
        /// </para>
        /// </summary>
        public virtual string CRSLage {
            get {
                XElement x = this.GetElement(CRSLageXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(CRSLageXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                else {
                    this.SetElementWithValidation(CRSLageXName, value, "CRSLage", CRSLageLocalType.TypeDefinition);
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<GeometrieType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(VorlaeufigeBezeichnungXName, typeof(string));
            localElementDictionary.Add(GeoObjektartXName, typeof(decimal));
            localElementDictionary.Add(GeoObjekttypXName, typeof(string));
            localElementDictionary.Add(LagegenauigkeitsklasseXName, typeof(string));
            localElementDictionary.Add(HoehengenauigkeitsklasseXName, typeof(string));
            localElementDictionary.Add(DatenherkunftXName, typeof(string));
            localElementDictionary.Add(KommentarXName, typeof(string));
            localElementDictionary.Add(GeometriedatenXName, typeof(GeometriedatenLocalType));
            localElementDictionary.Add(CRSLageXName, typeof(string));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        private class VorlaeufigeBezeichnungLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(4)), null, 0, 0, null, null, 30, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
            
            private VorlaeufigeBezeichnungLocalType() {
            }
        }
        
        private class DatenherkunftLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(4)), null, 0, 0, null, null, 40, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
            
            private DatenherkunftLocalType() {
            }
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Knoten?, Kanten?, Polygone?)
        /// </para>
        /// </summary>
        public partial class GeometriedatenLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName KnotenXName = System.Xml.Linq.XName.Get("Knoten", "http://www.bfr-abwasser.de");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName KantenXName = System.Xml.Linq.XName.Get("Kanten", "http://www.bfr-abwasser.de");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName PolygoneXName = System.Xml.Linq.XName.Get("Polygone", "http://www.bfr-abwasser.de");
            
            private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("Geometriedaten", "http://www.bfr-abwasser.de");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;
            
		public static explicit operator GeometriedatenLocalType(XElement xe) { return XTypedServices.ToXTypedElement<GeometriedatenLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static GeometriedatenLocalType() {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(KnotenXName), new NamedContentModelEntity(KantenXName), new NamedContentModelEntity(PolygoneXName));
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (Knoten?, Kanten?, Polygone?)
            /// </para>
            /// </summary>
            public GeometriedatenLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (Knoten?, Kanten?, Polygone?)
            /// </para>
            /// </summary>
            public virtual KnotenLocalType Knoten {
                get {
                    XElement x = this.GetElement(KnotenXName);
                    return ((KnotenLocalType)(x));
                }
                set {
                    this.SetElement(KnotenXName, value);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (Knoten?, Kanten?, Polygone?)
            /// </para>
            /// </summary>
            public virtual KantenLocalType Kanten {
                get {
                    XElement x = this.GetElement(KantenXName);
                    return ((KantenLocalType)(x));
                }
                set {
                    this.SetElement(KantenXName, value);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (Knoten?, Kanten?, Polygone?)
            /// </para>
            /// </summary>
            public virtual PolygoneLocalType Polygone {
                get {
                    XElement x = this.GetElement(PolygoneXName);
                    return ((PolygoneLocalType)(x));
                }
                set {
                    this.SetElement(PolygoneXName, value);
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            System.Xml.Linq.XName IXMetaData.SchemaName {
                get {
                    return xName;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<GeometriedatenLocalType>(this);
            }
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(KnotenXName, typeof(KnotenLocalType));
                localElementDictionary.Add(KantenXName, typeof(KantenLocalType));
                localElementDictionary.Add(PolygoneXName, typeof(PolygoneLocalType));
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return contentModel;
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (Punkt+)
            /// </para>
            /// </summary>
            public partial class KnotenLocalType : XTypedElement, IXMetaData {
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName PunktXName = System.Xml.Linq.XName.Get("Punkt", "http://www.bfr-abwasser.de");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                private XTypedList<PunktType> PunktField;
                
                private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("Knoten", "http://www.bfr-abwasser.de");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                private static ContentModelEntity contentModel;
                
		public static explicit operator KnotenLocalType(XElement xe) { return XTypedServices.ToXTypedElement<KnotenLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
                
                static KnotenLocalType() {
                    BuildElementDictionary();
                    contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(PunktXName));
                }
                
                /// <summary>
                /// <para>
                /// Regular expression: (Punkt+)
                /// </para>
                /// </summary>
                public KnotenLocalType() {
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: required, repeating
                /// </para>
                /// <para>
                /// Regular expression: (Punkt+)
                /// </para>
                /// </summary>
                public virtual IList<PunktType> Punkt {
                    get {
                        if ((this.PunktField == null)) {
                            this.PunktField = new XTypedList<PunktType>(this, LinqToXsdTypeManager.Instance, PunktXName);
                        }
                        return this.PunktField;
                    }
                    set {
                        if ((value == null)) {
                            this.PunktField = null;
                        }
                        else {
                            if ((this.PunktField == null)) {
                                this.PunktField = XTypedList<PunktType>.Initialize(this, LinqToXsdTypeManager.Instance, value, PunktXName);
                            }
                            else {
                                XTypedServices.SetList<PunktType>(this.PunktField, value);
                            }
                        }
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
                    get {
                        return localElementDictionary;
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                System.Xml.Linq.XName IXMetaData.SchemaName {
                    get {
                        return xName;
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                SchemaOrigin IXMetaData.TypeOrigin {
                    get {
                        return SchemaOrigin.Fragment;
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                ILinqToXsdTypeManager IXMetaData.TypeManager {
                    get {
                        return LinqToXsdTypeManager.Instance;
                    }
                }
                
                public override XTypedElement Clone() {
                    return XTypedServices.CloneXTypedElement<KnotenLocalType>(this);
                }
                
                private static void BuildElementDictionary() {
                    localElementDictionary.Add(PunktXName, typeof(PunktType));
                }
                
                ContentModelEntity IXMetaData.GetContentModel() {
                    return contentModel;
                }
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (Kante+)
            /// </para>
            /// </summary>
            public partial class KantenLocalType : XTypedElement, IXMetaData {
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName KanteXName = System.Xml.Linq.XName.Get("Kante", "http://www.bfr-abwasser.de");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                private XTypedList<KanteType> KanteField;
                
                private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("Kanten", "http://www.bfr-abwasser.de");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                private static ContentModelEntity contentModel;
                
		public static explicit operator KantenLocalType(XElement xe) { return XTypedServices.ToXTypedElement<KantenLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
                
                static KantenLocalType() {
                    BuildElementDictionary();
                    contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(KanteXName));
                }
                
                /// <summary>
                /// <para>
                /// Regular expression: (Kante+)
                /// </para>
                /// </summary>
                public KantenLocalType() {
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: required, repeating
                /// </para>
                /// <para>
                /// Regular expression: (Kante+)
                /// </para>
                /// </summary>
                public virtual IList<KanteType> Kante {
                    get {
                        if ((this.KanteField == null)) {
                            this.KanteField = new XTypedList<KanteType>(this, LinqToXsdTypeManager.Instance, KanteXName);
                        }
                        return this.KanteField;
                    }
                    set {
                        if ((value == null)) {
                            this.KanteField = null;
                        }
                        else {
                            if ((this.KanteField == null)) {
                                this.KanteField = XTypedList<KanteType>.Initialize(this, LinqToXsdTypeManager.Instance, value, KanteXName);
                            }
                            else {
                                XTypedServices.SetList<KanteType>(this.KanteField, value);
                            }
                        }
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
                    get {
                        return localElementDictionary;
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                System.Xml.Linq.XName IXMetaData.SchemaName {
                    get {
                        return xName;
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                SchemaOrigin IXMetaData.TypeOrigin {
                    get {
                        return SchemaOrigin.Fragment;
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                ILinqToXsdTypeManager IXMetaData.TypeManager {
                    get {
                        return LinqToXsdTypeManager.Instance;
                    }
                }
                
                public override XTypedElement Clone() {
                    return XTypedServices.CloneXTypedElement<KantenLocalType>(this);
                }
                
                private static void BuildElementDictionary() {
                    localElementDictionary.Add(KanteXName, typeof(KanteType));
                }
                
                ContentModelEntity IXMetaData.GetContentModel() {
                    return contentModel;
                }
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (Polygon+)
            /// </para>
            /// </summary>
            public partial class PolygoneLocalType : XTypedElement, IXMetaData {
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName PolygonXName = System.Xml.Linq.XName.Get("Polygon", "http://www.bfr-abwasser.de");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                private XTypedList<PolygonLocalType> PolygonField;
                
                private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("Polygone", "http://www.bfr-abwasser.de");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                private static ContentModelEntity contentModel;
                
		public static explicit operator PolygoneLocalType(XElement xe) { return XTypedServices.ToXTypedElement<PolygoneLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
                
                static PolygoneLocalType() {
                    BuildElementDictionary();
                    contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(PolygonXName));
                }
                
                /// <summary>
                /// <para>
                /// Regular expression: (Polygon+)
                /// </para>
                /// </summary>
                public PolygoneLocalType() {
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: required, repeating
                /// </para>
                /// <para>
                /// Regular expression: (Polygon+)
                /// </para>
                /// </summary>
                public virtual IList<www.bfr.abwasser.de.GeometrieType.GeometriedatenLocalType.PolygoneLocalType.PolygonLocalType> Polygon {
                    get {
                        if ((this.PolygonField == null)) {
                            this.PolygonField = new XTypedList<PolygonLocalType>(this, LinqToXsdTypeManager.Instance, PolygonXName);
                        }
                        return this.PolygonField;
                    }
                    set {
                        if ((value == null)) {
                            this.PolygonField = null;
                        }
                        else {
                            if ((this.PolygonField == null)) {
                                this.PolygonField = XTypedList<PolygonLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, PolygonXName);
                            }
                            else {
                                XTypedServices.SetList<PolygonLocalType>(this.PolygonField, value);
                            }
                        }
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
                    get {
                        return localElementDictionary;
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                System.Xml.Linq.XName IXMetaData.SchemaName {
                    get {
                        return xName;
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                SchemaOrigin IXMetaData.TypeOrigin {
                    get {
                        return SchemaOrigin.Fragment;
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                ILinqToXsdTypeManager IXMetaData.TypeManager {
                    get {
                        return LinqToXsdTypeManager.Instance;
                    }
                }
                
                public override XTypedElement Clone() {
                    return XTypedServices.CloneXTypedElement<PolygoneLocalType>(this);
                }
                
                private static void BuildElementDictionary() {
                    localElementDictionary.Add(PolygonXName, typeof(PolygonLocalType));
                }
                
                ContentModelEntity IXMetaData.GetContentModel() {
                    return contentModel;
                }
                
                /// <summary>
                /// <para>
                /// Regular expression: (Polygonart, Kante+)
                /// </para>
                /// </summary>
                public partial class PolygonLocalType : XTypedElement, IXMetaData {
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    [EditorBrowsable(EditorBrowsableState.Never)]
                    internal static readonly System.Xml.Linq.XName PolygonartXName = System.Xml.Linq.XName.Get("Polygonart", "http://www.bfr-abwasser.de");
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    [EditorBrowsable(EditorBrowsableState.Never)]
                    internal static readonly System.Xml.Linq.XName KanteXName = System.Xml.Linq.XName.Get("Kante", "http://www.bfr-abwasser.de");
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    private XTypedList<KanteType> KanteField;
                    
                    private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("Polygon", "http://www.bfr-abwasser.de");
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    private static ContentModelEntity contentModel;
                    
		public static explicit operator PolygonLocalType(XElement xe) { return XTypedServices.ToXTypedElement<PolygonLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
                    
                    static PolygonLocalType() {
                        BuildElementDictionary();
                        contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(PolygonartXName), new NamedContentModelEntity(KanteXName));
                    }
                    
                    /// <summary>
                    /// <para>
                    /// Regular expression: (Polygonart, Kante+)
                    /// </para>
                    /// </summary>
                    public PolygonLocalType() {
                    }
                    
                    /// <summary>
                    /// <para>
                    /// Occurrence: required
                    /// </para>
                    /// <para>
                    /// Regular expression: (Polygonart, Kante+)
                    /// </para>
                    /// </summary>
                    public virtual decimal Polygonart {
                        get {
                            XElement x = this.GetElement(PolygonartXName);
                            return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                        }
                        set {
                            this.SetElementWithValidation(PolygonartXName, value, "Polygonart", global::www.bfr.abwasser.de.PolygonartType.TypeDefinition);
                        }
                    }
                    
                    /// <summary>
                    /// <para>
                    /// Occurrence: required, repeating
                    /// </para>
                    /// <para>
                    /// Regular expression: (Polygonart, Kante+)
                    /// </para>
                    /// </summary>
                    public virtual IList<KanteType> Kante {
                        get {
                            if ((this.KanteField == null)) {
                                this.KanteField = new XTypedList<KanteType>(this, LinqToXsdTypeManager.Instance, KanteXName);
                            }
                            return this.KanteField;
                        }
                        set {
                            if ((value == null)) {
                                this.KanteField = null;
                            }
                            else {
                                if ((this.KanteField == null)) {
                                    this.KanteField = XTypedList<KanteType>.Initialize(this, LinqToXsdTypeManager.Instance, value, KanteXName);
                                }
                                else {
                                    XTypedServices.SetList<KanteType>(this.KanteField, value);
                                }
                            }
                        }
                    }
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
                        get {
                            return localElementDictionary;
                        }
                    }
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    System.Xml.Linq.XName IXMetaData.SchemaName {
                        get {
                            return xName;
                        }
                    }
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    SchemaOrigin IXMetaData.TypeOrigin {
                        get {
                            return SchemaOrigin.Fragment;
                        }
                    }
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    ILinqToXsdTypeManager IXMetaData.TypeManager {
                        get {
                            return LinqToXsdTypeManager.Instance;
                        }
                    }
                    
                    public override XTypedElement Clone() {
                        return XTypedServices.CloneXTypedElement<PolygonLocalType>(this);
                    }
                    
                    private static void BuildElementDictionary() {
                        localElementDictionary.Add(PolygonartXName, typeof(decimal));
                        localElementDictionary.Add(KanteXName, typeof(KanteType));
                    }
                    
                    ContentModelEntity IXMetaData.GetContentModel() {
                        return contentModel;
                    }
                }
            }
        }
        
        private class CRSLageLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(4)), null, 0, 0, null, null, 30, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
            
            private CRSLageLocalType() {
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Start, Ende, Mitte?)
    /// </para>
    /// </summary>
    public partial class KanteType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName StartXName = System.Xml.Linq.XName.Get("Start", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName EndeXName = System.Xml.Linq.XName.Get("Ende", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName MitteXName = System.Xml.Linq.XName.Get("Mitte", "http://www.bfr-abwasser.de");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("KanteType", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator KanteType(XElement xe) { return XTypedServices.ToXTypedElement<KanteType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static KanteType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(StartXName), new NamedContentModelEntity(EndeXName), new NamedContentModelEntity(MitteXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Start, Ende, Mitte?)
        /// </para>
        /// </summary>
        public KanteType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (Start, Ende, Mitte?)
        /// </para>
        /// </summary>
        public virtual PunktType Start {
            get {
                XElement x = this.GetElement(StartXName);
                return ((PunktType)(x));
            }
            set {
                this.SetElement(StartXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (Start, Ende, Mitte?)
        /// </para>
        /// </summary>
        public virtual PunktType Ende {
            get {
                XElement x = this.GetElement(EndeXName);
                return ((PunktType)(x));
            }
            set {
                this.SetElement(EndeXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Start, Ende, Mitte?)
        /// </para>
        /// </summary>
        public virtual PunktType Mitte {
            get {
                XElement x = this.GetElement(MitteXName);
                return ((PunktType)(x));
            }
            set {
                this.SetElement(MitteXName, value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<KanteType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(StartXName, typeof(PunktType));
            localElementDictionary.Add(EndeXName, typeof(PunktType));
            localElementDictionary.Add(MitteXName, typeof(PunktType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Rechtswert?, Hochwert?, Punkthoehe?, PunktattributAbwasser, Lagegenauigkeitsstufe?, Hoehengenauigkeitsstufe?, Index?)
    /// </para>
    /// </summary>
    public partial class PunktType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName RechtswertXName = System.Xml.Linq.XName.Get("Rechtswert", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName HochwertXName = System.Xml.Linq.XName.Get("Hochwert", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName PunkthoeheXName = System.Xml.Linq.XName.Get("Punkthoehe", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName PunktattributAbwasserXName = System.Xml.Linq.XName.Get("PunktattributAbwasser", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName LagegenauigkeitsstufeXName = System.Xml.Linq.XName.Get("Lagegenauigkeitsstufe", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName HoehengenauigkeitsstufeXName = System.Xml.Linq.XName.Get("Hoehengenauigkeitsstufe", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName IndexXName = System.Xml.Linq.XName.Get("Index", "http://www.bfr-abwasser.de");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("PunktType", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator PunktType(XElement xe) { return XTypedServices.ToXTypedElement<PunktType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static PunktType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(RechtswertXName), new NamedContentModelEntity(HochwertXName), new NamedContentModelEntity(PunkthoeheXName), new NamedContentModelEntity(PunktattributAbwasserXName), new NamedContentModelEntity(LagegenauigkeitsstufeXName), new NamedContentModelEntity(HoehengenauigkeitsstufeXName), new NamedContentModelEntity(IndexXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Rechtswert?, Hochwert?, Punkthoehe?, PunktattributAbwasser, Lagegenauigkeitsstufe?, Hoehengenauigkeitsstufe?, Index?)
        /// </para>
        /// </summary>
        public PunktType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Rechtswert?, Hochwert?, Punkthoehe?, PunktattributAbwasser, Lagegenauigkeitsstufe?, Hoehengenauigkeitsstufe?, Index?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? Rechtswert {
            get {
                XElement x = this.GetElement(RechtswertXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(RechtswertXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                }
                else {
                    this.SetElementWithValidation(RechtswertXName, value, "Rechtswert", RechtswertLocalType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Rechtswert?, Hochwert?, Punkthoehe?, PunktattributAbwasser, Lagegenauigkeitsstufe?, Hoehengenauigkeitsstufe?, Index?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? Hochwert {
            get {
                XElement x = this.GetElement(HochwertXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(HochwertXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                }
                else {
                    this.SetElementWithValidation(HochwertXName, value, "Hochwert", HochwertLocalType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Rechtswert?, Hochwert?, Punkthoehe?, PunktattributAbwasser, Lagegenauigkeitsstufe?, Hoehengenauigkeitsstufe?, Index?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? Punkthoehe {
            get {
                XElement x = this.GetElement(PunkthoeheXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(PunkthoeheXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                }
                else {
                    this.SetElementWithValidation(PunkthoeheXName, value, "Punkthoehe", PunkthoeheLocalType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (Rechtswert?, Hochwert?, Punkthoehe?, PunktattributAbwasser, Lagegenauigkeitsstufe?, Hoehengenauigkeitsstufe?, Index?)
        /// </para>
        /// </summary>
        public virtual string PunktattributAbwasser {
            get {
                XElement x = this.GetElement(PunktattributAbwasserXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(PunktattributAbwasserXName, value, "PunktattributAbwasser", PunktattributAbwasserLocalType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Rechtswert?, Hochwert?, Punkthoehe?, PunktattributAbwasser, Lagegenauigkeitsstufe?, Hoehengenauigkeitsstufe?, Index?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? Lagegenauigkeitsstufe {
            get {
                XElement x = this.GetElement(LagegenauigkeitsstufeXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(LagegenauigkeitsstufeXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                }
                else {
                    this.SetElementWithValidation(LagegenauigkeitsstufeXName, value, "Lagegenauigkeitsstufe", LagegenauigkeitsstufeLocalType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Rechtswert?, Hochwert?, Punkthoehe?, PunktattributAbwasser, Lagegenauigkeitsstufe?, Hoehengenauigkeitsstufe?, Index?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? Hoehengenauigkeitsstufe {
            get {
                XElement x = this.GetElement(HoehengenauigkeitsstufeXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(HoehengenauigkeitsstufeXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                }
                else {
                    this.SetElementWithValidation(HoehengenauigkeitsstufeXName, value, "Hoehengenauigkeitsstufe", HoehengenauigkeitsstufeLocalType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Rechtswert?, Hochwert?, Punkthoehe?, PunktattributAbwasser, Lagegenauigkeitsstufe?, Hoehengenauigkeitsstufe?, Index?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? Index {
            get {
                XElement x = this.GetElement(IndexXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(IndexXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                }
                else {
                    this.SetElementWithValidation(IndexXName, value, "Index", IndexLocalType.TypeDefinition);
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<PunktType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(RechtswertXName, typeof(decimal));
            localElementDictionary.Add(HochwertXName, typeof(decimal));
            localElementDictionary.Add(PunkthoeheXName, typeof(decimal));
            localElementDictionary.Add(PunktattributAbwasserXName, typeof(string));
            localElementDictionary.Add(LagegenauigkeitsstufeXName, typeof(decimal));
            localElementDictionary.Add(HoehengenauigkeitsstufeXName, typeof(decimal));
            localElementDictionary.Add(IndexXName, typeof(decimal));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        private class RechtswertLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(3200)), null, 3, 0, 100000000m, null, 0, null, null, 0, null, 11, XmlSchemaWhiteSpace.Collapse));
            
            private RechtswertLocalType() {
            }
        }
        
        private class HochwertLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(3200)), null, 3, 0, 10000000m, null, 0, null, null, 0, null, 10, XmlSchemaWhiteSpace.Collapse));
            
            private HochwertLocalType() {
            }
        }
        
        private class PunkthoeheLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(3200)), null, 3, 0, 10000m, null, 0, null, null, 0, null, 7, XmlSchemaWhiteSpace.Collapse));
            
            private PunkthoeheLocalType() {
            }
        }
        
        private class PunktattributAbwasserLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(20)), new object[] {
                            "DMP",
                            "SMP",
                            "RAP",
                            "LHP",
                            "AP",
                            "NN",
                            "ER",
                            "GA",
                            "RR",
                            "SE",
                            "SBD",
                            "SBW",
                            "KOP",
                            "FLP",
                            "ZLK",
                            "KP",
                            "HP",
                            "GOK",
                            "KMP",
                            "PAU",
                            "AV",
                            "RV",
                            "EG",
                            "BA",
                            "ZG",
                            "DR",
                            "GP",
                            "AS"}, 0, 0, null, null, 3, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
            
            private PunktattributAbwasserLocalType() {
            }
        }
        
        private class LagegenauigkeitsstufeLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(1360)), new object[] {
                            0m,
                            1m,
                            2m,
                            3m,
                            4m,
                            5m,
                            6m,
                            7m,
                            8m,
                            9m}, 0, 0, null, 9m, 0, null, 0m, 0, null, 1, XmlSchemaWhiteSpace.Collapse));
            
            private LagegenauigkeitsstufeLocalType() {
            }
        }
        
        private class HoehengenauigkeitsstufeLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(1360)), new object[] {
                            0m,
                            1m,
                            2m,
                            3m,
                            4m,
                            5m,
                            6m,
                            7m,
                            9m}, 0, 0, null, 9m, 0, null, 0m, 0, null, 1, XmlSchemaWhiteSpace.Collapse));
            
            private HoehengenauigkeitsstufeLocalType() {
            }
        }
        
        private class IndexLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(1024)), null, 0, 0, null, null, 0, null, null, 0, null, 2, XmlSchemaWhiteSpace.Collapse));
            
            private IndexLocalType() {
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Abwasserart?, AbwasserartWGS?, GWabstand?, Wasserschutzzone?, Bodenart?)
    /// </para>
    /// </summary>
    public partial class UmweltparameterType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName AbwasserartXName = System.Xml.Linq.XName.Get("Abwasserart", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName AbwasserartWGSXName = System.Xml.Linq.XName.Get("AbwasserartWGS", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName GWabstandXName = System.Xml.Linq.XName.Get("GWabstand", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName WasserschutzzoneXName = System.Xml.Linq.XName.Get("Wasserschutzzone", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName BodenartXName = System.Xml.Linq.XName.Get("Bodenart", "http://www.bfr-abwasser.de");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("UmweltparameterType", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator UmweltparameterType(XElement xe) { return XTypedServices.ToXTypedElement<UmweltparameterType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static UmweltparameterType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(AbwasserartXName), new NamedContentModelEntity(AbwasserartWGSXName), new NamedContentModelEntity(GWabstandXName), new NamedContentModelEntity(WasserschutzzoneXName), new NamedContentModelEntity(BodenartXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Abwasserart?, AbwasserartWGS?, GWabstand?, Wasserschutzzone?, Bodenart?)
        /// </para>
        /// </summary>
        public UmweltparameterType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Abwasserart?, AbwasserartWGS?, GWabstand?, Wasserschutzzone?, Bodenart?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? Abwasserart {
            get {
                XElement x = this.GetElement(AbwasserartXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(AbwasserartXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                }
                else {
                    this.SetElementWithValidation(AbwasserartXName, value, "Abwasserart", global::www.bfr.abwasser.de.AbwasserartType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Abwasserart?, AbwasserartWGS?, GWabstand?, Wasserschutzzone?, Bodenart?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? AbwasserartWGS {
            get {
                XElement x = this.GetElement(AbwasserartWGSXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(AbwasserartWGSXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                }
                else {
                    this.SetElementWithValidation(AbwasserartWGSXName, value, "AbwasserartWGS", global::www.bfr.abwasser.de.AbwasserartWgSType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Abwasserart?, AbwasserartWGS?, GWabstand?, Wasserschutzzone?, Bodenart?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? GWabstand {
            get {
                XElement x = this.GetElement(GWabstandXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(GWabstandXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                }
                else {
                    this.SetElementWithValidation(GWabstandXName, value, "GWabstand", global::www.bfr.abwasser.de.GWabstandType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Abwasserart?, AbwasserartWGS?, GWabstand?, Wasserschutzzone?, Bodenart?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? Wasserschutzzone {
            get {
                XElement x = this.GetElement(WasserschutzzoneXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(WasserschutzzoneXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                }
                else {
                    this.SetElementWithValidation(WasserschutzzoneXName, value, "Wasserschutzzone", global::www.bfr.abwasser.de.WasserschutzzoneType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Abwasserart?, AbwasserartWGS?, GWabstand?, Wasserschutzzone?, Bodenart?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? Bodenart {
            get {
                XElement x = this.GetElement(BodenartXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(BodenartXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                }
                else {
                    this.SetElementWithValidation(BodenartXName, value, "Bodenart", global::www.bfr.abwasser.de.BodenartType.TypeDefinition);
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<UmweltparameterType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(AbwasserartXName, typeof(decimal));
            localElementDictionary.Add(AbwasserartWGSXName, typeof(decimal));
            localElementDictionary.Add(GWabstandXName, typeof(decimal));
            localElementDictionary.Add(WasserschutzzoneXName, typeof(decimal));
            localElementDictionary.Add(BodenartXName, typeof(decimal));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Objektbezeichnung, Kantentyp, Entfernung?, Anschlussart?, Fixierung?, Kommentar?, DrainageAngeschlossen?, Material?)
    /// </para>
    /// </summary>
    public partial class StammAnschlussType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ObjektbezeichnungXName = System.Xml.Linq.XName.Get("Objektbezeichnung", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName KantentypXName = System.Xml.Linq.XName.Get("Kantentyp", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName EntfernungXName = System.Xml.Linq.XName.Get("Entfernung", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName AnschlussartXName = System.Xml.Linq.XName.Get("Anschlussart", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName FixierungXName = System.Xml.Linq.XName.Get("Fixierung", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName KommentarXName = System.Xml.Linq.XName.Get("Kommentar", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName DrainageAngeschlossenXName = System.Xml.Linq.XName.Get("DrainageAngeschlossen", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName MaterialXName = System.Xml.Linq.XName.Get("Material", "http://www.bfr-abwasser.de");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("StammAnschlussType", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator StammAnschlussType(XElement xe) { return XTypedServices.ToXTypedElement<StammAnschlussType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static StammAnschlussType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(ObjektbezeichnungXName), new NamedContentModelEntity(KantentypXName), new NamedContentModelEntity(EntfernungXName), new NamedContentModelEntity(AnschlussartXName), new NamedContentModelEntity(FixierungXName), new NamedContentModelEntity(KommentarXName), new NamedContentModelEntity(DrainageAngeschlossenXName), new NamedContentModelEntity(MaterialXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Objektbezeichnung, Kantentyp, Entfernung?, Anschlussart?, Fixierung?, Kommentar?, DrainageAngeschlossen?, Material?)
        /// </para>
        /// </summary>
        public StammAnschlussType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (Objektbezeichnung, Kantentyp, Entfernung?, Anschlussart?, Fixierung?, Kommentar?, DrainageAngeschlossen?, Material?)
        /// </para>
        /// </summary>
        public virtual string Objektbezeichnung {
            get {
                XElement x = this.GetElement(ObjektbezeichnungXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(ObjektbezeichnungXName, value, "Objektbezeichnung", ObjektbezeichnungLocalType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (Objektbezeichnung, Kantentyp, Entfernung?, Anschlussart?, Fixierung?, Kommentar?, DrainageAngeschlossen?, Material?)
        /// </para>
        /// </summary>
        public virtual decimal Kantentyp {
            get {
                XElement x = this.GetElement(KantentypXName);
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                this.SetElementWithValidation(KantentypXName, value, "Kantentyp", global::www.bfr.abwasser.de.KantentypType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Objektbezeichnung, Kantentyp, Entfernung?, Anschlussart?, Fixierung?, Kommentar?, DrainageAngeschlossen?, Material?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? Entfernung {
            get {
                XElement x = this.GetElement(EntfernungXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(EntfernungXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                }
                else {
                    this.SetElementWithValidation(EntfernungXName, value, "Entfernung", EntfernungLocalType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Objektbezeichnung, Kantentyp, Entfernung?, Anschlussart?, Fixierung?, Kommentar?, DrainageAngeschlossen?, Material?)
        /// </para>
        /// </summary>
        public virtual string Anschlussart {
            get {
                XElement x = this.GetElement(AnschlussartXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(AnschlussartXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                else {
                    this.SetElementWithValidation(AnschlussartXName, value, "Anschlussart", global::www.bfr.abwasser.de.AnschlussartType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Objektbezeichnung, Kantentyp, Entfernung?, Anschlussart?, Fixierung?, Kommentar?, DrainageAngeschlossen?, Material?)
        /// </para>
        /// </summary>
        public virtual string Fixierung {
            get {
                XElement x = this.GetElement(FixierungXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(FixierungXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                else {
                    this.SetElementWithValidation(FixierungXName, value, "Fixierung", FixierungLocalType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Objektbezeichnung, Kantentyp, Entfernung?, Anschlussart?, Fixierung?, Kommentar?, DrainageAngeschlossen?, Material?)
        /// </para>
        /// </summary>
        public virtual string Kommentar {
            get {
                XElement x = this.GetElement(KommentarXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
            set {
                this.SetElement(KommentarXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Objektbezeichnung, Kantentyp, Entfernung?, Anschlussart?, Fixierung?, Kommentar?, DrainageAngeschlossen?, Material?)
        /// </para>
        /// </summary>
        public virtual System.Boolean? DrainageAngeschlossen {
            get {
                XElement x = this.GetElement(DrainageAngeschlossenXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
            set {
                this.SetElement(DrainageAngeschlossenXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Objektbezeichnung, Kantentyp, Entfernung?, Anschlussart?, Fixierung?, Kommentar?, DrainageAngeschlossen?, Material?)
        /// </para>
        /// </summary>
        public virtual string Material {
            get {
                XElement x = this.GetElement(MaterialXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(MaterialXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                else {
                    this.SetElementWithValidation(MaterialXName, value, "Material", global::www.bfr.abwasser.de.MaterialType.TypeDefinition);
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<StammAnschlussType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(ObjektbezeichnungXName, typeof(string));
            localElementDictionary.Add(KantentypXName, typeof(decimal));
            localElementDictionary.Add(EntfernungXName, typeof(decimal));
            localElementDictionary.Add(AnschlussartXName, typeof(string));
            localElementDictionary.Add(FixierungXName, typeof(string));
            localElementDictionary.Add(KommentarXName, typeof(string));
            localElementDictionary.Add(DrainageAngeschlossenXName, typeof(bool));
            localElementDictionary.Add(MaterialXName, typeof(string));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        private class ObjektbezeichnungLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(4)), null, 0, 0, null, null, 30, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
            
            private ObjektbezeichnungLocalType() {
            }
        }
        
        private class EntfernungLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(3200)), null, 2, 0, 10000m, null, 0, null, null, 0, null, 6, XmlSchemaWhiteSpace.Collapse));
            
            private EntfernungLocalType() {
            }
        }
        
        private class FixierungLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(6)), null, 0, 0, null, null, 2, null, null, 2, null, 0, XmlSchemaWhiteSpace.Preserve));
            
            private FixierungLocalType() {
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (StationierungAnfang, StationierungEnde, Dokumentationsrichtung, KennungOrdnungseinheit?, Eigentum?, Profil?, Material?, Baujahr?)
    /// </para>
    /// </summary>
    public partial class SegmentType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName StationierungAnfangXName = System.Xml.Linq.XName.Get("StationierungAnfang", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName StationierungEndeXName = System.Xml.Linq.XName.Get("StationierungEnde", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName DokumentationsrichtungXName = System.Xml.Linq.XName.Get("Dokumentationsrichtung", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName KennungOrdnungseinheitXName = System.Xml.Linq.XName.Get("KennungOrdnungseinheit", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName EigentumXName = System.Xml.Linq.XName.Get("Eigentum", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ProfilXName = System.Xml.Linq.XName.Get("Profil", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName MaterialXName = System.Xml.Linq.XName.Get("Material", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName BaujahrXName = System.Xml.Linq.XName.Get("Baujahr", "http://www.bfr-abwasser.de");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("SegmentType", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator SegmentType(XElement xe) { return XTypedServices.ToXTypedElement<SegmentType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static SegmentType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(StationierungAnfangXName), new NamedContentModelEntity(StationierungEndeXName), new NamedContentModelEntity(DokumentationsrichtungXName), new NamedContentModelEntity(KennungOrdnungseinheitXName), new NamedContentModelEntity(EigentumXName), new NamedContentModelEntity(ProfilXName), new NamedContentModelEntity(MaterialXName), new NamedContentModelEntity(BaujahrXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (StationierungAnfang, StationierungEnde, Dokumentationsrichtung, KennungOrdnungseinheit?, Eigentum?, Profil?, Material?, Baujahr?)
        /// </para>
        /// </summary>
        public SegmentType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (StationierungAnfang, StationierungEnde, Dokumentationsrichtung, KennungOrdnungseinheit?, Eigentum?, Profil?, Material?, Baujahr?)
        /// </para>
        /// </summary>
        public virtual decimal StationierungAnfang {
            get {
                XElement x = this.GetElement(StationierungAnfangXName);
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
            set {
                this.SetElementWithValidation(StationierungAnfangXName, value, "StationierungAnfang", StationierungAnfangLocalType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (StationierungAnfang, StationierungEnde, Dokumentationsrichtung, KennungOrdnungseinheit?, Eigentum?, Profil?, Material?, Baujahr?)
        /// </para>
        /// </summary>
        public virtual decimal StationierungEnde {
            get {
                XElement x = this.GetElement(StationierungEndeXName);
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
            set {
                this.SetElementWithValidation(StationierungEndeXName, value, "StationierungEnde", StationierungEndeLocalType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (StationierungAnfang, StationierungEnde, Dokumentationsrichtung, KennungOrdnungseinheit?, Eigentum?, Profil?, Material?, Baujahr?)
        /// </para>
        /// </summary>
        public virtual string Dokumentationsrichtung {
            get {
                XElement x = this.GetElement(DokumentationsrichtungXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(DokumentationsrichtungXName, value, "Dokumentationsrichtung", global::www.bfr.abwasser.de.DokumentationsrichtungType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (StationierungAnfang, StationierungEnde, Dokumentationsrichtung, KennungOrdnungseinheit?, Eigentum?, Profil?, Material?, Baujahr?)
        /// </para>
        /// </summary>
        public virtual string KennungOrdnungseinheit {
            get {
                XElement x = this.GetElement(KennungOrdnungseinheitXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(KennungOrdnungseinheitXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                else {
                    this.SetElementWithValidation(KennungOrdnungseinheitXName, value, "KennungOrdnungseinheit", KennungOrdnungseinheitLocalType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (StationierungAnfang, StationierungEnde, Dokumentationsrichtung, KennungOrdnungseinheit?, Eigentum?, Profil?, Material?, Baujahr?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? Eigentum {
            get {
                XElement x = this.GetElement(EigentumXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(EigentumXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                }
                else {
                    this.SetElementWithValidation(EigentumXName, value, "Eigentum", global::www.bfr.abwasser.de.EigentumType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (StationierungAnfang, StationierungEnde, Dokumentationsrichtung, KennungOrdnungseinheit?, Eigentum?, Profil?, Material?, Baujahr?)
        /// </para>
        /// </summary>
        public virtual ProfilType Profil {
            get {
                XElement x = this.GetElement(ProfilXName);
                return ((ProfilType)(x));
            }
            set {
                this.SetElement(ProfilXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (StationierungAnfang, StationierungEnde, Dokumentationsrichtung, KennungOrdnungseinheit?, Eigentum?, Profil?, Material?, Baujahr?)
        /// </para>
        /// </summary>
        public virtual string Material {
            get {
                XElement x = this.GetElement(MaterialXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(MaterialXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                else {
                    this.SetElementWithValidation(MaterialXName, value, "Material", global::www.bfr.abwasser.de.MaterialType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (StationierungAnfang, StationierungEnde, Dokumentationsrichtung, KennungOrdnungseinheit?, Eigentum?, Profil?, Material?, Baujahr?)
        /// </para>
        /// </summary>
        public virtual System.DateTime? Baujahr {
            get {
                XElement x = this.GetElement(BaujahrXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<System.DateTime>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.GYear).Datatype);
            }
            set {
                this.SetElement(BaujahrXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.GYear).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<SegmentType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(StationierungAnfangXName, typeof(decimal));
            localElementDictionary.Add(StationierungEndeXName, typeof(decimal));
            localElementDictionary.Add(DokumentationsrichtungXName, typeof(string));
            localElementDictionary.Add(KennungOrdnungseinheitXName, typeof(string));
            localElementDictionary.Add(EigentumXName, typeof(decimal));
            localElementDictionary.Add(ProfilXName, typeof(ProfilType));
            localElementDictionary.Add(MaterialXName, typeof(string));
            localElementDictionary.Add(BaujahrXName, typeof(System.DateTime));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        private class StationierungAnfangLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(3200)), null, 2, 0, 1000m, null, 0, null, null, 0, null, 5, XmlSchemaWhiteSpace.Collapse));
            
            private StationierungAnfangLocalType() {
            }
        }
        
        private class StationierungEndeLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(3200)), null, 2, 0, 1000m, null, 0, null, null, 0, null, 5, XmlSchemaWhiteSpace.Collapse));
            
            private StationierungEndeLocalType() {
            }
        }
        
        private class KennungOrdnungseinheitLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(1)), null, 0, 4, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
            
            private KennungOrdnungseinheitLocalType() {
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Objektbezeichnung, Objektart)
    /// </para>
    /// </summary>
    public partial class UebergeordneteAbwassertechnischeAnlageType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ObjektbezeichnungXName = System.Xml.Linq.XName.Get("Objektbezeichnung", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ObjektartXName = System.Xml.Linq.XName.Get("Objektart", "http://www.bfr-abwasser.de");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("UebergeordneteAbwassertechnischeAnlageType", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator UebergeordneteAbwassertechnischeAnlageType(XElement xe) { return XTypedServices.ToXTypedElement<UebergeordneteAbwassertechnischeAnlageType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static UebergeordneteAbwassertechnischeAnlageType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(ObjektbezeichnungXName), new NamedContentModelEntity(ObjektartXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Objektbezeichnung, Objektart)
        /// </para>
        /// </summary>
        public UebergeordneteAbwassertechnischeAnlageType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (Objektbezeichnung, Objektart)
        /// </para>
        /// </summary>
        public virtual string Objektbezeichnung {
            get {
                XElement x = this.GetElement(ObjektbezeichnungXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(ObjektbezeichnungXName, value, "Objektbezeichnung", ObjektbezeichnungLocalType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (Objektbezeichnung, Objektart)
        /// </para>
        /// </summary>
        public virtual decimal Objektart {
            get {
                XElement x = this.GetElement(ObjektartXName);
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                this.SetElementWithValidation(ObjektartXName, value, "Objektart", global::www.bfr.abwasser.de.ObjektartType.TypeDefinition);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<UebergeordneteAbwassertechnischeAnlageType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(ObjektbezeichnungXName, typeof(string));
            localElementDictionary.Add(ObjektartXName, typeof(decimal));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        private class ObjektbezeichnungLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(4)), null, 0, 0, null, null, 30, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
            
            private ObjektbezeichnungLocalType() {
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Index?, LISAGUID?, Deckelform?, Deckeltyp?, LaengeDeckel?, BreiteDeckel?, Abdeckungsklasse?, MaterialAbdeckung?, Schmutzfaenger?)
    /// </para>
    /// </summary>
    public partial class DeckelType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName IndexXName = System.Xml.Linq.XName.Get("Index", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName LISAGUIDXName = System.Xml.Linq.XName.Get("LISA-GUID", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName DeckelformXName = System.Xml.Linq.XName.Get("Deckelform", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName DeckeltypXName = System.Xml.Linq.XName.Get("Deckeltyp", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName LaengeDeckelXName = System.Xml.Linq.XName.Get("LaengeDeckel", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName BreiteDeckelXName = System.Xml.Linq.XName.Get("BreiteDeckel", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName AbdeckungsklasseXName = System.Xml.Linq.XName.Get("Abdeckungsklasse", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName MaterialAbdeckungXName = System.Xml.Linq.XName.Get("MaterialAbdeckung", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName SchmutzfaengerXName = System.Xml.Linq.XName.Get("Schmutzfaenger", "http://www.bfr-abwasser.de");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("DeckelType", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator DeckelType(XElement xe) { return XTypedServices.ToXTypedElement<DeckelType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static DeckelType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(IndexXName), new NamedContentModelEntity(LISAGUIDXName), new NamedContentModelEntity(DeckelformXName), new NamedContentModelEntity(DeckeltypXName), new NamedContentModelEntity(LaengeDeckelXName), new NamedContentModelEntity(BreiteDeckelXName), new NamedContentModelEntity(AbdeckungsklasseXName), new NamedContentModelEntity(MaterialAbdeckungXName), new NamedContentModelEntity(SchmutzfaengerXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Index?, LISAGUID?, Deckelform?, Deckeltyp?, LaengeDeckel?, BreiteDeckel?, Abdeckungsklasse?, MaterialAbdeckung?, Schmutzfaenger?)
        /// </para>
        /// </summary>
        public DeckelType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Index?, LISAGUID?, Deckelform?, Deckeltyp?, LaengeDeckel?, BreiteDeckel?, Abdeckungsklasse?, MaterialAbdeckung?, Schmutzfaenger?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? Index {
            get {
                XElement x = this.GetElement(IndexXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(IndexXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                }
                else {
                    this.SetElementWithValidation(IndexXName, value, "Index", IndexLocalType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Index?, LISAGUID?, Deckelform?, Deckeltyp?, LaengeDeckel?, BreiteDeckel?, Abdeckungsklasse?, MaterialAbdeckung?, Schmutzfaenger?)
        /// </para>
        /// </summary>
        public virtual string LISAGUID {
            get {
                XElement x = this.GetElement(LISAGUIDXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(LISAGUIDXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                else {
                    this.SetElementWithValidation(LISAGUIDXName, value, "LISAGUID", LISAGUIDLocalType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Index?, LISAGUID?, Deckelform?, Deckeltyp?, LaengeDeckel?, BreiteDeckel?, Abdeckungsklasse?, MaterialAbdeckung?, Schmutzfaenger?)
        /// </para>
        /// </summary>
        public virtual string Deckelform {
            get {
                XElement x = this.GetElement(DeckelformXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(DeckelformXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                else {
                    this.SetElementWithValidation(DeckelformXName, value, "Deckelform", global::www.bfr.abwasser.de.DeckelformType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Index?, LISAGUID?, Deckelform?, Deckeltyp?, LaengeDeckel?, BreiteDeckel?, Abdeckungsklasse?, MaterialAbdeckung?, Schmutzfaenger?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? Deckeltyp {
            get {
                XElement x = this.GetElement(DeckeltypXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(DeckeltypXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                }
                else {
                    this.SetElementWithValidation(DeckeltypXName, value, "Deckeltyp", global::www.bfr.abwasser.de.DeckeltypType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Index?, LISAGUID?, Deckelform?, Deckeltyp?, LaengeDeckel?, BreiteDeckel?, Abdeckungsklasse?, MaterialAbdeckung?, Schmutzfaenger?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? LaengeDeckel {
            get {
                XElement x = this.GetElement(LaengeDeckelXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(LaengeDeckelXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                }
                else {
                    this.SetElementWithValidation(LaengeDeckelXName, value, "LaengeDeckel", LaengeDeckelLocalType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Index?, LISAGUID?, Deckelform?, Deckeltyp?, LaengeDeckel?, BreiteDeckel?, Abdeckungsklasse?, MaterialAbdeckung?, Schmutzfaenger?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? BreiteDeckel {
            get {
                XElement x = this.GetElement(BreiteDeckelXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(BreiteDeckelXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                }
                else {
                    this.SetElementWithValidation(BreiteDeckelXName, value, "BreiteDeckel", BreiteDeckelLocalType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Index?, LISAGUID?, Deckelform?, Deckeltyp?, LaengeDeckel?, BreiteDeckel?, Abdeckungsklasse?, MaterialAbdeckung?, Schmutzfaenger?)
        /// </para>
        /// </summary>
        public virtual string Abdeckungsklasse {
            get {
                XElement x = this.GetElement(AbdeckungsklasseXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(AbdeckungsklasseXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                else {
                    this.SetElementWithValidation(AbdeckungsklasseXName, value, "Abdeckungsklasse", global::www.bfr.abwasser.de.AbdeckungsklasseType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Index?, LISAGUID?, Deckelform?, Deckeltyp?, LaengeDeckel?, BreiteDeckel?, Abdeckungsklasse?, MaterialAbdeckung?, Schmutzfaenger?)
        /// </para>
        /// </summary>
        public virtual string MaterialAbdeckung {
            get {
                XElement x = this.GetElement(MaterialAbdeckungXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(MaterialAbdeckungXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                else {
                    this.SetElementWithValidation(MaterialAbdeckungXName, value, "MaterialAbdeckung", global::www.bfr.abwasser.de.MaterialType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Index?, LISAGUID?, Deckelform?, Deckeltyp?, LaengeDeckel?, BreiteDeckel?, Abdeckungsklasse?, MaterialAbdeckung?, Schmutzfaenger?)
        /// </para>
        /// </summary>
        public virtual System.Boolean? Schmutzfaenger {
            get {
                XElement x = this.GetElement(SchmutzfaengerXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
            set {
                this.SetElement(SchmutzfaengerXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<DeckelType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(IndexXName, typeof(decimal));
            localElementDictionary.Add(LISAGUIDXName, typeof(string));
            localElementDictionary.Add(DeckelformXName, typeof(string));
            localElementDictionary.Add(DeckeltypXName, typeof(decimal));
            localElementDictionary.Add(LaengeDeckelXName, typeof(decimal));
            localElementDictionary.Add(BreiteDeckelXName, typeof(decimal));
            localElementDictionary.Add(AbdeckungsklasseXName, typeof(string));
            localElementDictionary.Add(MaterialAbdeckungXName, typeof(string));
            localElementDictionary.Add(SchmutzfaengerXName, typeof(bool));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        private class IndexLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(1024)), null, 0, 0, null, null, 0, null, null, 0, null, 2, XmlSchemaWhiteSpace.Collapse));
            
            private IndexLocalType() {
            }
        }
        
        private class LISAGUIDLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(4)), null, 0, 0, null, null, 32, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
            
            private LISAGUIDLocalType() {
            }
        }
        
        private class LaengeDeckelLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(3200)), null, 2, 0, 100m, null, 0, null, null, 0, null, 4, XmlSchemaWhiteSpace.Collapse));
            
            private LaengeDeckelLocalType() {
            }
        }
        
        private class BreiteDeckelLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(3200)), null, 2, 0, 100m, null, 0, null, null, 0, null, 4, XmlSchemaWhiteSpace.Collapse));
            
            private BreiteDeckelLocalType() {
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (AnzahlAuflageringe?, HoeheAuflageringe?)
    /// </para>
    /// </summary>
    public partial class AuflageringType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName AnzahlAuflageringeXName = System.Xml.Linq.XName.Get("AnzahlAuflageringe", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName HoeheAuflageringeXName = System.Xml.Linq.XName.Get("HoeheAuflageringe", "http://www.bfr-abwasser.de");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("AuflageringType", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator AuflageringType(XElement xe) { return XTypedServices.ToXTypedElement<AuflageringType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static AuflageringType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(AnzahlAuflageringeXName), new NamedContentModelEntity(HoeheAuflageringeXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (AnzahlAuflageringe?, HoeheAuflageringe?)
        /// </para>
        /// </summary>
        public AuflageringType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (AnzahlAuflageringe?, HoeheAuflageringe?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? AnzahlAuflageringe {
            get {
                XElement x = this.GetElement(AnzahlAuflageringeXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(AnzahlAuflageringeXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                }
                else {
                    this.SetElementWithValidation(AnzahlAuflageringeXName, value, "AnzahlAuflageringe", AnzahlAuflageringeLocalType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (AnzahlAuflageringe?, HoeheAuflageringe?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? HoeheAuflageringe {
            get {
                XElement x = this.GetElement(HoeheAuflageringeXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(HoeheAuflageringeXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                }
                else {
                    this.SetElementWithValidation(HoeheAuflageringeXName, value, "HoeheAuflageringe", HoeheAuflageringeLocalType.TypeDefinition);
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<AuflageringType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(AnzahlAuflageringeXName, typeof(decimal));
            localElementDictionary.Add(HoeheAuflageringeXName, typeof(decimal));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        private class AnzahlAuflageringeLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(1024)), null, 0, 0, null, null, 0, null, null, 0, null, 2, XmlSchemaWhiteSpace.Collapse));
            
            private AnzahlAuflageringeLocalType() {
            }
        }
        
        private class HoeheAuflageringeLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(1024)), null, 0, 0, null, null, 0, null, null, 0, null, 2, XmlSchemaWhiteSpace.Collapse));
            
            private HoeheAuflageringeLocalType() {
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (ArtEinlaufbauwerk?, Schutzgitter?)
    /// </para>
    /// </summary>
    public partial class EinlaufbauwerkType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ArtEinlaufbauwerkXName = System.Xml.Linq.XName.Get("ArtEinlaufbauwerk", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName SchutzgitterXName = System.Xml.Linq.XName.Get("Schutzgitter", "http://www.bfr-abwasser.de");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("EinlaufbauwerkType", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator EinlaufbauwerkType(XElement xe) { return XTypedServices.ToXTypedElement<EinlaufbauwerkType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static EinlaufbauwerkType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(ArtEinlaufbauwerkXName), new NamedContentModelEntity(SchutzgitterXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (ArtEinlaufbauwerk?, Schutzgitter?)
        /// </para>
        /// </summary>
        public EinlaufbauwerkType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (ArtEinlaufbauwerk?, Schutzgitter?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? ArtEinlaufbauwerk {
            get {
                XElement x = this.GetElement(ArtEinlaufbauwerkXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(ArtEinlaufbauwerkXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                }
                else {
                    this.SetElementWithValidation(ArtEinlaufbauwerkXName, value, "ArtEinlaufbauwerk", global::www.bfr.abwasser.de.ArtEinlaufbauwerkType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (ArtEinlaufbauwerk?, Schutzgitter?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? Schutzgitter {
            get {
                XElement x = this.GetElement(SchutzgitterXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(SchutzgitterXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                }
                else {
                    this.SetElementWithValidation(SchutzgitterXName, value, "Schutzgitter", global::www.bfr.abwasser.de.SchutzgitterType.TypeDefinition);
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<EinlaufbauwerkType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(ArtEinlaufbauwerkXName, typeof(decimal));
            localElementDictionary.Add(SchutzgitterXName, typeof(decimal));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Kennung, Beschreibung?, Auftraege, InspizierteAbwassertechnischeAnlage*, Filme?)
    /// </para>
    /// </summary>
    public partial class ZustandsdatenType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName KennungXName = System.Xml.Linq.XName.Get("Kennung", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName BeschreibungXName = System.Xml.Linq.XName.Get("Beschreibung", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName AuftraegeXName = System.Xml.Linq.XName.Get("Auftraege", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName InspizierteAbwassertechnischeAnlageXName = System.Xml.Linq.XName.Get("InspizierteAbwassertechnischeAnlage", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<InspizierteAbwassertechnischeAnlageType> InspizierteAbwassertechnischeAnlageField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName FilmeXName = System.Xml.Linq.XName.Get("Filme", "http://www.bfr-abwasser.de");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("ZustandsdatenType", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator ZustandsdatenType(XElement xe) { return XTypedServices.ToXTypedElement<ZustandsdatenType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static ZustandsdatenType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(KennungXName), new NamedContentModelEntity(BeschreibungXName), new NamedContentModelEntity(AuftraegeXName), new NamedContentModelEntity(InspizierteAbwassertechnischeAnlageXName), new NamedContentModelEntity(FilmeXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Kennung, Beschreibung?, Auftraege, InspizierteAbwassertechnischeAnlage*, Filme?)
        /// </para>
        /// </summary>
        public ZustandsdatenType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (Kennung, Beschreibung?, Auftraege, InspizierteAbwassertechnischeAnlage*, Filme?)
        /// </para>
        /// </summary>
        public virtual string Kennung {
            get {
                XElement x = this.GetElement(KennungXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(KennungXName, value, "Kennung", KennungLocalType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Kennung, Beschreibung?, Auftraege, InspizierteAbwassertechnischeAnlage*, Filme?)
        /// </para>
        /// </summary>
        public virtual string Beschreibung {
            get {
                XElement x = this.GetElement(BeschreibungXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(BeschreibungXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                else {
                    this.SetElementWithValidation(BeschreibungXName, value, "Beschreibung", BeschreibungLocalType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (Kennung, Beschreibung?, Auftraege, InspizierteAbwassertechnischeAnlage*, Filme?)
        /// </para>
        /// </summary>
        public virtual AuftraegeLocalType Auftraege {
            get {
                XElement x = this.GetElement(AuftraegeXName);
                return ((AuftraegeLocalType)(x));
            }
            set {
                this.SetElement(AuftraegeXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Kennung, Beschreibung?, Auftraege, InspizierteAbwassertechnischeAnlage*, Filme?)
        /// </para>
        /// </summary>
        public virtual IList<InspizierteAbwassertechnischeAnlageType> InspizierteAbwassertechnischeAnlage {
            get {
                if ((this.InspizierteAbwassertechnischeAnlageField == null)) {
                    this.InspizierteAbwassertechnischeAnlageField = new XTypedList<InspizierteAbwassertechnischeAnlageType>(this, LinqToXsdTypeManager.Instance, InspizierteAbwassertechnischeAnlageXName);
                }
                return this.InspizierteAbwassertechnischeAnlageField;
            }
            set {
                if ((value == null)) {
                    this.InspizierteAbwassertechnischeAnlageField = null;
                }
                else {
                    if ((this.InspizierteAbwassertechnischeAnlageField == null)) {
                        this.InspizierteAbwassertechnischeAnlageField = XTypedList<InspizierteAbwassertechnischeAnlageType>.Initialize(this, LinqToXsdTypeManager.Instance, value, InspizierteAbwassertechnischeAnlageXName);
                    }
                    else {
                        XTypedServices.SetList<InspizierteAbwassertechnischeAnlageType>(this.InspizierteAbwassertechnischeAnlageField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Kennung, Beschreibung?, Auftraege, InspizierteAbwassertechnischeAnlage*, Filme?)
        /// </para>
        /// </summary>
        public virtual FilmeLocalType Filme {
            get {
                XElement x = this.GetElement(FilmeXName);
                return ((FilmeLocalType)(x));
            }
            set {
                this.SetElement(FilmeXName, value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ZustandsdatenType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(KennungXName, typeof(string));
            localElementDictionary.Add(BeschreibungXName, typeof(string));
            localElementDictionary.Add(AuftraegeXName, typeof(AuftraegeLocalType));
            localElementDictionary.Add(InspizierteAbwassertechnischeAnlageXName, typeof(InspizierteAbwassertechnischeAnlageType));
            localElementDictionary.Add(FilmeXName, typeof(FilmeLocalType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        private class KennungLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(6)), null, 0, 0, null, null, 5, null, null, 5, null, 0, XmlSchemaWhiteSpace.Preserve));
            
            private KennungLocalType() {
            }
        }
        
        private class BeschreibungLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(4)), null, 0, 0, null, null, 100, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
            
            private BeschreibungLocalType() {
            }
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Auftrag+)
        /// </para>
        /// </summary>
        public partial class AuftraegeLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName AuftragXName = System.Xml.Linq.XName.Get("Auftrag", "http://www.bfr-abwasser.de");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XTypedList<AuftragType> AuftragField;
            
            private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("Auftraege", "http://www.bfr-abwasser.de");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;
            
		public static explicit operator AuftraegeLocalType(XElement xe) { return XTypedServices.ToXTypedElement<AuftraegeLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static AuftraegeLocalType() {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(AuftragXName));
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (Auftrag+)
            /// </para>
            /// </summary>
            public AuftraegeLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required, repeating
            /// </para>
            /// <para>
            /// Regular expression: (Auftrag+)
            /// </para>
            /// </summary>
            public virtual IList<AuftragType> Auftrag {
                get {
                    if ((this.AuftragField == null)) {
                        this.AuftragField = new XTypedList<AuftragType>(this, LinqToXsdTypeManager.Instance, AuftragXName);
                    }
                    return this.AuftragField;
                }
                set {
                    if ((value == null)) {
                        this.AuftragField = null;
                    }
                    else {
                        if ((this.AuftragField == null)) {
                            this.AuftragField = XTypedList<AuftragType>.Initialize(this, LinqToXsdTypeManager.Instance, value, AuftragXName);
                        }
                        else {
                            XTypedServices.SetList<AuftragType>(this.AuftragField, value);
                        }
                    }
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            System.Xml.Linq.XName IXMetaData.SchemaName {
                get {
                    return xName;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<AuftraegeLocalType>(this);
            }
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(AuftragXName, typeof(AuftragType));
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return contentModel;
            }
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Film*)
        /// </para>
        /// </summary>
        public partial class FilmeLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName FilmXName = System.Xml.Linq.XName.Get("Film", "http://www.bfr-abwasser.de");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XTypedList<FilmType> FilmField;
            
            private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("Filme", "http://www.bfr-abwasser.de");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;
            
		public static explicit operator FilmeLocalType(XElement xe) { return XTypedServices.ToXTypedElement<FilmeLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static FilmeLocalType() {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(FilmXName));
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (Film*)
            /// </para>
            /// </summary>
            public FilmeLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional, repeating
            /// </para>
            /// <para>
            /// Regular expression: (Film*)
            /// </para>
            /// </summary>
            public virtual IList<FilmType> Film {
                get {
                    if ((this.FilmField == null)) {
                        this.FilmField = new XTypedList<FilmType>(this, LinqToXsdTypeManager.Instance, FilmXName);
                    }
                    return this.FilmField;
                }
                set {
                    if ((value == null)) {
                        this.FilmField = null;
                    }
                    else {
                        if ((this.FilmField == null)) {
                            this.FilmField = XTypedList<FilmType>.Initialize(this, LinqToXsdTypeManager.Instance, value, FilmXName);
                        }
                        else {
                            XTypedServices.SetList<FilmType>(this.FilmField, value);
                        }
                    }
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            System.Xml.Linq.XName IXMetaData.SchemaName {
                get {
                    return xName;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<FilmeLocalType>(this);
            }
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(FilmXName, typeof(FilmType));
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return contentModel;
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Objektbezeichnung, Anlagentyp, Lage?, OptischeInspektion?, Dichtheitspruefungen?)
    /// </para>
    /// </summary>
    public partial class InspizierteAbwassertechnischeAnlageType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ObjektbezeichnungXName = System.Xml.Linq.XName.Get("Objektbezeichnung", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName AnlagentypXName = System.Xml.Linq.XName.Get("Anlagentyp", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName LageXName = System.Xml.Linq.XName.Get("Lage", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName OptischeInspektionXName = System.Xml.Linq.XName.Get("OptischeInspektion", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName DichtheitspruefungenXName = System.Xml.Linq.XName.Get("Dichtheitspruefungen", "http://www.bfr-abwasser.de");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("InspizierteAbwassertechnischeAnlageType", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator InspizierteAbwassertechnischeAnlageType(XElement xe) { return XTypedServices.ToXTypedElement<InspizierteAbwassertechnischeAnlageType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static InspizierteAbwassertechnischeAnlageType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(ObjektbezeichnungXName), new NamedContentModelEntity(AnlagentypXName), new NamedContentModelEntity(LageXName), new NamedContentModelEntity(OptischeInspektionXName), new NamedContentModelEntity(DichtheitspruefungenXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Objektbezeichnung, Anlagentyp, Lage?, OptischeInspektion?, Dichtheitspruefungen?)
        /// </para>
        /// </summary>
        public InspizierteAbwassertechnischeAnlageType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (Objektbezeichnung, Anlagentyp, Lage?, OptischeInspektion?, Dichtheitspruefungen?)
        /// </para>
        /// </summary>
        public virtual string Objektbezeichnung {
            get {
                XElement x = this.GetElement(ObjektbezeichnungXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(ObjektbezeichnungXName, value, "Objektbezeichnung", ObjektbezeichnungLocalType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (Objektbezeichnung, Anlagentyp, Lage?, OptischeInspektion?, Dichtheitspruefungen?)
        /// </para>
        /// </summary>
        public virtual decimal Anlagentyp {
            get {
                XElement x = this.GetElement(AnlagentypXName);
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                this.SetElementWithValidation(AnlagentypXName, value, "Anlagentyp", global::www.bfr.abwasser.de.AnlagentypType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Objektbezeichnung, Anlagentyp, Lage?, OptischeInspektion?, Dichtheitspruefungen?)
        /// </para>
        /// </summary>
        public virtual OrtLageType Lage {
            get {
                XElement x = this.GetElement(LageXName);
                return ((OrtLageType)(x));
            }
            set {
                this.SetElement(LageXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Objektbezeichnung, Anlagentyp, Lage?, OptischeInspektion?, Dichtheitspruefungen?)
        /// </para>
        /// </summary>
        public virtual OptischeInspektionType OptischeInspektion {
            get {
                XElement x = this.GetElement(OptischeInspektionXName);
                return ((OptischeInspektionType)(x));
            }
            set {
                this.SetElement(OptischeInspektionXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Objektbezeichnung, Anlagentyp, Lage?, OptischeInspektion?, Dichtheitspruefungen?)
        /// </para>
        /// </summary>
        public virtual DichtheitspruefungenLocalType Dichtheitspruefungen {
            get {
                XElement x = this.GetElement(DichtheitspruefungenXName);
                return ((DichtheitspruefungenLocalType)(x));
            }
            set {
                this.SetElement(DichtheitspruefungenXName, value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<InspizierteAbwassertechnischeAnlageType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(ObjektbezeichnungXName, typeof(string));
            localElementDictionary.Add(AnlagentypXName, typeof(decimal));
            localElementDictionary.Add(LageXName, typeof(OrtLageType));
            localElementDictionary.Add(OptischeInspektionXName, typeof(OptischeInspektionType));
            localElementDictionary.Add(DichtheitspruefungenXName, typeof(DichtheitspruefungenLocalType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        private class ObjektbezeichnungLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(4)), null, 0, 0, null, null, 30, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
            
            private ObjektbezeichnungLocalType() {
            }
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Pruefung+)
        /// </para>
        /// </summary>
        public partial class DichtheitspruefungenLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName PruefungXName = System.Xml.Linq.XName.Get("Pruefung", "http://www.bfr-abwasser.de");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XTypedList<DichtheitType> PruefungField;
            
            private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("Dichtheitspruefungen", "http://www.bfr-abwasser.de");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;
            
		public static explicit operator DichtheitspruefungenLocalType(XElement xe) { return XTypedServices.ToXTypedElement<DichtheitspruefungenLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static DichtheitspruefungenLocalType() {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(PruefungXName));
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (Pruefung+)
            /// </para>
            /// </summary>
            public DichtheitspruefungenLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required, repeating
            /// </para>
            /// <para>
            /// Regular expression: (Pruefung+)
            /// </para>
            /// </summary>
            public virtual IList<DichtheitType> Pruefung {
                get {
                    if ((this.PruefungField == null)) {
                        this.PruefungField = new XTypedList<DichtheitType>(this, LinqToXsdTypeManager.Instance, PruefungXName);
                    }
                    return this.PruefungField;
                }
                set {
                    if ((value == null)) {
                        this.PruefungField = null;
                    }
                    else {
                        if ((this.PruefungField == null)) {
                            this.PruefungField = XTypedList<DichtheitType>.Initialize(this, LinqToXsdTypeManager.Instance, value, PruefungXName);
                        }
                        else {
                            XTypedServices.SetList<DichtheitType>(this.PruefungField, value);
                        }
                    }
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            System.Xml.Linq.XName IXMetaData.SchemaName {
                get {
                    return xName;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<DichtheitspruefungenLocalType>(this);
            }
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(PruefungXName, typeof(DichtheitType));
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return contentModel;
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Rohrleitungstyp, Inspektionsrichtung, BezugspunktLage?, Inspektionslaenge?, Inspektionsart?, ArtVideoreferenz?, RGrunddaten?, Inspektionsdaten?, Bewertung?)
    /// </para>
    /// </summary>
    public partial class RohrType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName RohrleitungstypXName = System.Xml.Linq.XName.Get("Rohrleitungstyp", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName InspektionsrichtungXName = System.Xml.Linq.XName.Get("Inspektionsrichtung", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName BezugspunktLageXName = System.Xml.Linq.XName.Get("BezugspunktLage", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName InspektionslaengeXName = System.Xml.Linq.XName.Get("Inspektionslaenge", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName InspektionsartXName = System.Xml.Linq.XName.Get("Inspektionsart", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ArtVideoreferenzXName = System.Xml.Linq.XName.Get("ArtVideoreferenz", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName RGrunddatenXName = System.Xml.Linq.XName.Get("RGrunddaten", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName InspektionsdatenXName = System.Xml.Linq.XName.Get("Inspektionsdaten", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName BewertungXName = System.Xml.Linq.XName.Get("Bewertung", "http://www.bfr-abwasser.de");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("RohrType", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator RohrType(XElement xe) { return XTypedServices.ToXTypedElement<RohrType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static RohrType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(RohrleitungstypXName), new NamedContentModelEntity(InspektionsrichtungXName), new NamedContentModelEntity(BezugspunktLageXName), new NamedContentModelEntity(InspektionslaengeXName), new NamedContentModelEntity(InspektionsartXName), new NamedContentModelEntity(ArtVideoreferenzXName), new NamedContentModelEntity(RGrunddatenXName), new NamedContentModelEntity(InspektionsdatenXName), new NamedContentModelEntity(BewertungXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Rohrleitungstyp, Inspektionsrichtung, BezugspunktLage?, Inspektionslaenge?, Inspektionsart?, ArtVideoreferenz?, RGrunddaten?, Inspektionsdaten?, Bewertung?)
        /// </para>
        /// </summary>
        public RohrType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (Rohrleitungstyp, Inspektionsrichtung, BezugspunktLage?, Inspektionslaenge?, Inspektionsart?, ArtVideoreferenz?, RGrunddaten?, Inspektionsdaten?, Bewertung?)
        /// </para>
        /// </summary>
        public virtual decimal Rohrleitungstyp {
            get {
                XElement x = this.GetElement(RohrleitungstypXName);
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                this.SetElementWithValidation(RohrleitungstypXName, value, "Rohrleitungstyp", global::www.bfr.abwasser.de.RohrleitungstypType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (Rohrleitungstyp, Inspektionsrichtung, BezugspunktLage?, Inspektionslaenge?, Inspektionsart?, ArtVideoreferenz?, RGrunddaten?, Inspektionsdaten?, Bewertung?)
        /// </para>
        /// </summary>
        public virtual string Inspektionsrichtung {
            get {
                XElement x = this.GetElement(InspektionsrichtungXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(InspektionsrichtungXName, value, "Inspektionsrichtung", global::www.bfr.abwasser.de.InspektionsrichtungType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Rohrleitungstyp, Inspektionsrichtung, BezugspunktLage?, Inspektionslaenge?, Inspektionsart?, ArtVideoreferenz?, RGrunddaten?, Inspektionsdaten?, Bewertung?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? BezugspunktLage {
            get {
                XElement x = this.GetElement(BezugspunktLageXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(BezugspunktLageXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                }
                else {
                    this.SetElementWithValidation(BezugspunktLageXName, value, "BezugspunktLage", global::www.bfr.abwasser.de.BezugspunktLageType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Rohrleitungstyp, Inspektionsrichtung, BezugspunktLage?, Inspektionslaenge?, Inspektionsart?, ArtVideoreferenz?, RGrunddaten?, Inspektionsdaten?, Bewertung?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? Inspektionslaenge {
            get {
                XElement x = this.GetElement(InspektionslaengeXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(InspektionslaengeXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                }
                else {
                    this.SetElementWithValidation(InspektionslaengeXName, value, "Inspektionslaenge", InspektionslaengeLocalType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Rohrleitungstyp, Inspektionsrichtung, BezugspunktLage?, Inspektionslaenge?, Inspektionsart?, ArtVideoreferenz?, RGrunddaten?, Inspektionsdaten?, Bewertung?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? Inspektionsart {
            get {
                XElement x = this.GetElement(InspektionsartXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(InspektionsartXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                }
                else {
                    this.SetElementWithValidation(InspektionsartXName, value, "Inspektionsart", global::www.bfr.abwasser.de.InspektionsartType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Rohrleitungstyp, Inspektionsrichtung, BezugspunktLage?, Inspektionslaenge?, Inspektionsart?, ArtVideoreferenz?, RGrunddaten?, Inspektionsdaten?, Bewertung?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? ArtVideoreferenz {
            get {
                XElement x = this.GetElement(ArtVideoreferenzXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(ArtVideoreferenzXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                }
                else {
                    this.SetElementWithValidation(ArtVideoreferenzXName, value, "ArtVideoreferenz", global::www.bfr.abwasser.de.ArtVideoreferenzType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Rohrleitungstyp, Inspektionsrichtung, BezugspunktLage?, Inspektionslaenge?, Inspektionsart?, ArtVideoreferenz?, RGrunddaten?, Inspektionsdaten?, Bewertung?)
        /// </para>
        /// </summary>
        public virtual RGrunddatenType RGrunddaten {
            get {
                XElement x = this.GetElement(RGrunddatenXName);
                return ((RGrunddatenType)(x));
            }
            set {
                this.SetElement(RGrunddatenXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Rohrleitungstyp, Inspektionsrichtung, BezugspunktLage?, Inspektionslaenge?, Inspektionsart?, ArtVideoreferenz?, RGrunddaten?, Inspektionsdaten?, Bewertung?)
        /// </para>
        /// </summary>
        public virtual InspektionsdatenLocalType Inspektionsdaten {
            get {
                XElement x = this.GetElement(InspektionsdatenXName);
                return ((InspektionsdatenLocalType)(x));
            }
            set {
                this.SetElement(InspektionsdatenXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Rohrleitungstyp, Inspektionsrichtung, BezugspunktLage?, Inspektionslaenge?, Inspektionsart?, ArtVideoreferenz?, RGrunddaten?, Inspektionsdaten?, Bewertung?)
        /// </para>
        /// </summary>
        public virtual BewertungType Bewertung {
            get {
                XElement x = this.GetElement(BewertungXName);
                return ((BewertungType)(x));
            }
            set {
                this.SetElement(BewertungXName, value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<RohrType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(RohrleitungstypXName, typeof(decimal));
            localElementDictionary.Add(InspektionsrichtungXName, typeof(string));
            localElementDictionary.Add(BezugspunktLageXName, typeof(decimal));
            localElementDictionary.Add(InspektionslaengeXName, typeof(decimal));
            localElementDictionary.Add(InspektionsartXName, typeof(decimal));
            localElementDictionary.Add(ArtVideoreferenzXName, typeof(decimal));
            localElementDictionary.Add(RGrunddatenXName, typeof(RGrunddatenType));
            localElementDictionary.Add(InspektionsdatenXName, typeof(InspektionsdatenLocalType));
            localElementDictionary.Add(BewertungXName, typeof(BewertungType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        private class InspektionslaengeLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(3200)), null, 2, 0, 1000m, null, 0, null, null, 0, null, 5, XmlSchemaWhiteSpace.Collapse));
            
            private InspektionslaengeLocalType() {
            }
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (RZustand+)
        /// </para>
        /// </summary>
        public partial class InspektionsdatenLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName RZustandXName = System.Xml.Linq.XName.Get("RZustand", "http://www.bfr-abwasser.de");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XTypedList<RZustandType> RZustandField;
            
            private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("Inspektionsdaten", "http://www.bfr-abwasser.de");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;
            
		public static explicit operator InspektionsdatenLocalType(XElement xe) { return XTypedServices.ToXTypedElement<InspektionsdatenLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static InspektionsdatenLocalType() {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(RZustandXName));
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (RZustand+)
            /// </para>
            /// </summary>
            public InspektionsdatenLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required, repeating
            /// </para>
            /// <para>
            /// Regular expression: (RZustand+)
            /// </para>
            /// </summary>
            public virtual IList<RZustandType> RZustand {
                get {
                    if ((this.RZustandField == null)) {
                        this.RZustandField = new XTypedList<RZustandType>(this, LinqToXsdTypeManager.Instance, RZustandXName);
                    }
                    return this.RZustandField;
                }
                set {
                    if ((value == null)) {
                        this.RZustandField = null;
                    }
                    else {
                        if ((this.RZustandField == null)) {
                            this.RZustandField = XTypedList<RZustandType>.Initialize(this, LinqToXsdTypeManager.Instance, value, RZustandXName);
                        }
                        else {
                            XTypedServices.SetList<RZustandType>(this.RZustandField, value);
                        }
                    }
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            System.Xml.Linq.XName IXMetaData.SchemaName {
                get {
                    return xName;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<InspektionsdatenLocalType>(this);
            }
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(RZustandXName, typeof(RZustandType));
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return contentModel;
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (BezugspunktVertikal?, BezugspunktHorizontal?, ArtVideoreferenz?, KGrunddaten?, Inspektionsdaten?, Bewertung?)
    /// </para>
    /// </summary>
    public partial class KnotenType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName BezugspunktVertikalXName = System.Xml.Linq.XName.Get("BezugspunktVertikal", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName BezugspunktHorizontalXName = System.Xml.Linq.XName.Get("BezugspunktHorizontal", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ArtVideoreferenzXName = System.Xml.Linq.XName.Get("ArtVideoreferenz", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName KGrunddatenXName = System.Xml.Linq.XName.Get("KGrunddaten", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName InspektionsdatenXName = System.Xml.Linq.XName.Get("Inspektionsdaten", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName BewertungXName = System.Xml.Linq.XName.Get("Bewertung", "http://www.bfr-abwasser.de");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("KnotenType", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator KnotenType(XElement xe) { return XTypedServices.ToXTypedElement<KnotenType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static KnotenType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(BezugspunktVertikalXName), new NamedContentModelEntity(BezugspunktHorizontalXName), new NamedContentModelEntity(ArtVideoreferenzXName), new NamedContentModelEntity(KGrunddatenXName), new NamedContentModelEntity(InspektionsdatenXName), new NamedContentModelEntity(BewertungXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (BezugspunktVertikal?, BezugspunktHorizontal?, ArtVideoreferenz?, KGrunddaten?, Inspektionsdaten?, Bewertung?)
        /// </para>
        /// </summary>
        public KnotenType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (BezugspunktVertikal?, BezugspunktHorizontal?, ArtVideoreferenz?, KGrunddaten?, Inspektionsdaten?, Bewertung?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? BezugspunktVertikal {
            get {
                XElement x = this.GetElement(BezugspunktVertikalXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(BezugspunktVertikalXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                }
                else {
                    this.SetElementWithValidation(BezugspunktVertikalXName, value, "BezugspunktVertikal", global::www.bfr.abwasser.de.VertikalerBezugspunktType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (BezugspunktVertikal?, BezugspunktHorizontal?, ArtVideoreferenz?, KGrunddaten?, Inspektionsdaten?, Bewertung?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? BezugspunktHorizontal {
            get {
                XElement x = this.GetElement(BezugspunktHorizontalXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(BezugspunktHorizontalXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                }
                else {
                    this.SetElementWithValidation(BezugspunktHorizontalXName, value, "BezugspunktHorizontal", global::www.bfr.abwasser.de.HorizontalerBezugspunktType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (BezugspunktVertikal?, BezugspunktHorizontal?, ArtVideoreferenz?, KGrunddaten?, Inspektionsdaten?, Bewertung?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? ArtVideoreferenz {
            get {
                XElement x = this.GetElement(ArtVideoreferenzXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(ArtVideoreferenzXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                }
                else {
                    this.SetElementWithValidation(ArtVideoreferenzXName, value, "ArtVideoreferenz", global::www.bfr.abwasser.de.ArtVideoreferenzType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (BezugspunktVertikal?, BezugspunktHorizontal?, ArtVideoreferenz?, KGrunddaten?, Inspektionsdaten?, Bewertung?)
        /// </para>
        /// </summary>
        public virtual KGrunddatenType KGrunddaten {
            get {
                XElement x = this.GetElement(KGrunddatenXName);
                return ((KGrunddatenType)(x));
            }
            set {
                this.SetElement(KGrunddatenXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (BezugspunktVertikal?, BezugspunktHorizontal?, ArtVideoreferenz?, KGrunddaten?, Inspektionsdaten?, Bewertung?)
        /// </para>
        /// </summary>
        public virtual InspektionsdatenLocalType Inspektionsdaten {
            get {
                XElement x = this.GetElement(InspektionsdatenXName);
                return ((InspektionsdatenLocalType)(x));
            }
            set {
                this.SetElement(InspektionsdatenXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (BezugspunktVertikal?, BezugspunktHorizontal?, ArtVideoreferenz?, KGrunddaten?, Inspektionsdaten?, Bewertung?)
        /// </para>
        /// </summary>
        public virtual BewertungType Bewertung {
            get {
                XElement x = this.GetElement(BewertungXName);
                return ((BewertungType)(x));
            }
            set {
                this.SetElement(BewertungXName, value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<KnotenType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(BezugspunktVertikalXName, typeof(decimal));
            localElementDictionary.Add(BezugspunktHorizontalXName, typeof(decimal));
            localElementDictionary.Add(ArtVideoreferenzXName, typeof(decimal));
            localElementDictionary.Add(KGrunddatenXName, typeof(KGrunddatenType));
            localElementDictionary.Add(InspektionsdatenXName, typeof(InspektionsdatenLocalType));
            localElementDictionary.Add(BewertungXName, typeof(BewertungType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (KZustand+)
        /// </para>
        /// </summary>
        public partial class InspektionsdatenLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName KZustandXName = System.Xml.Linq.XName.Get("KZustand", "http://www.bfr-abwasser.de");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XTypedList<KZustandType> KZustandField;
            
            private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("Inspektionsdaten", "http://www.bfr-abwasser.de");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;
            
		public static explicit operator InspektionsdatenLocalType(XElement xe) { return XTypedServices.ToXTypedElement<InspektionsdatenLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static InspektionsdatenLocalType() {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(KZustandXName));
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (KZustand+)
            /// </para>
            /// </summary>
            public InspektionsdatenLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required, repeating
            /// </para>
            /// <para>
            /// Regular expression: (KZustand+)
            /// </para>
            /// </summary>
            public virtual IList<KZustandType> KZustand {
                get {
                    if ((this.KZustandField == null)) {
                        this.KZustandField = new XTypedList<KZustandType>(this, LinqToXsdTypeManager.Instance, KZustandXName);
                    }
                    return this.KZustandField;
                }
                set {
                    if ((value == null)) {
                        this.KZustandField = null;
                    }
                    else {
                        if ((this.KZustandField == null)) {
                            this.KZustandField = XTypedList<KZustandType>.Initialize(this, LinqToXsdTypeManager.Instance, value, KZustandXName);
                        }
                        else {
                            XTypedServices.SetList<KZustandType>(this.KZustandField, value);
                        }
                    }
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            System.Xml.Linq.XName IXMetaData.SchemaName {
                get {
                    return xName;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<InspektionsdatenLocalType>(this);
            }
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(KZustandXName, typeof(KZustandType));
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return contentModel;
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Bauwerktyp, Inspektionsdaten?, ArtVideoreferenz?)
    /// </para>
    /// </summary>
    public partial class BauwerkeType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName BauwerktypXName = System.Xml.Linq.XName.Get("Bauwerktyp", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName InspektionsdatenXName = System.Xml.Linq.XName.Get("Inspektionsdaten", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ArtVideoreferenzXName = System.Xml.Linq.XName.Get("ArtVideoreferenz", "http://www.bfr-abwasser.de");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("BauwerkeType", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator BauwerkeType(XElement xe) { return XTypedServices.ToXTypedElement<BauwerkeType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static BauwerkeType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(BauwerktypXName), new NamedContentModelEntity(InspektionsdatenXName), new NamedContentModelEntity(ArtVideoreferenzXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Bauwerktyp, Inspektionsdaten?, ArtVideoreferenz?)
        /// </para>
        /// </summary>
        public BauwerkeType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (Bauwerktyp, Inspektionsdaten?, ArtVideoreferenz?)
        /// </para>
        /// </summary>
        public virtual decimal Bauwerktyp {
            get {
                XElement x = this.GetElement(BauwerktypXName);
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                this.SetElementWithValidation(BauwerktypXName, value, "Bauwerktyp", global::www.bfr.abwasser.de.BauwerkstypType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Bauwerktyp, Inspektionsdaten?, ArtVideoreferenz?)
        /// </para>
        /// </summary>
        public virtual InspektionsdatenLocalType Inspektionsdaten {
            get {
                XElement x = this.GetElement(InspektionsdatenXName);
                return ((InspektionsdatenLocalType)(x));
            }
            set {
                this.SetElement(InspektionsdatenXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Bauwerktyp, Inspektionsdaten?, ArtVideoreferenz?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? ArtVideoreferenz {
            get {
                XElement x = this.GetElement(ArtVideoreferenzXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(ArtVideoreferenzXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                }
                else {
                    this.SetElementWithValidation(ArtVideoreferenzXName, value, "ArtVideoreferenz", global::www.bfr.abwasser.de.ArtVideoreferenzType.TypeDefinition);
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<BauwerkeType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(BauwerktypXName, typeof(decimal));
            localElementDictionary.Add(InspektionsdatenXName, typeof(InspektionsdatenLocalType));
            localElementDictionary.Add(ArtVideoreferenzXName, typeof(decimal));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (BZustand+)
        /// </para>
        /// </summary>
        public partial class InspektionsdatenLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName BZustandXName = System.Xml.Linq.XName.Get("BZustand", "http://www.bfr-abwasser.de");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XTypedList<BZustandType> BZustandField;
            
            private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("Inspektionsdaten", "http://www.bfr-abwasser.de");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;
            
		public static explicit operator InspektionsdatenLocalType(XElement xe) { return XTypedServices.ToXTypedElement<InspektionsdatenLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static InspektionsdatenLocalType() {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(BZustandXName));
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (BZustand+)
            /// </para>
            /// </summary>
            public InspektionsdatenLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required, repeating
            /// </para>
            /// <para>
            /// Regular expression: (BZustand+)
            /// </para>
            /// </summary>
            public virtual IList<BZustandType> BZustand {
                get {
                    if ((this.BZustandField == null)) {
                        this.BZustandField = new XTypedList<BZustandType>(this, LinqToXsdTypeManager.Instance, BZustandXName);
                    }
                    return this.BZustandField;
                }
                set {
                    if ((value == null)) {
                        this.BZustandField = null;
                    }
                    else {
                        if ((this.BZustandField == null)) {
                            this.BZustandField = XTypedList<BZustandType>.Initialize(this, LinqToXsdTypeManager.Instance, value, BZustandXName);
                        }
                        else {
                            XTypedServices.SetList<BZustandType>(this.BZustandField, value);
                        }
                    }
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            System.Xml.Linq.XName IXMetaData.SchemaName {
                get {
                    return xName;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<InspektionsdatenLocalType>(this);
            }
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(BZustandXName, typeof(BZustandType));
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return contentModel;
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Auftragsbezeichnung, Auftragsnummer?, Auftragskennung, Auftragsdatum?, Auftragsart, Inspektionsort?, Inspektionszweck?, Kodiersystem?, Auftragnehmer?, Systemname?, Version?, InspektionsdatumEnde?)
    /// </para>
    /// </summary>
    public partial class AuftragType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName AuftragsbezeichnungXName = System.Xml.Linq.XName.Get("Auftragsbezeichnung", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName AuftragsnummerXName = System.Xml.Linq.XName.Get("Auftragsnummer", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName AuftragskennungXName = System.Xml.Linq.XName.Get("Auftragskennung", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName AuftragsdatumXName = System.Xml.Linq.XName.Get("Auftragsdatum", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName AuftragsartXName = System.Xml.Linq.XName.Get("Auftragsart", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName InspektionsortXName = System.Xml.Linq.XName.Get("Inspektionsort", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName InspektionszweckXName = System.Xml.Linq.XName.Get("Inspektionszweck", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName KodiersystemXName = System.Xml.Linq.XName.Get("Kodiersystem", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName AuftragnehmerXName = System.Xml.Linq.XName.Get("Auftragnehmer", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName SystemnameXName = System.Xml.Linq.XName.Get("Systemname", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName VersionXName = System.Xml.Linq.XName.Get("Version", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName InspektionsdatumEndeXName = System.Xml.Linq.XName.Get("InspektionsdatumEnde", "http://www.bfr-abwasser.de");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("AuftragType", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator AuftragType(XElement xe) { return XTypedServices.ToXTypedElement<AuftragType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static AuftragType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(AuftragsbezeichnungXName), new NamedContentModelEntity(AuftragsnummerXName), new NamedContentModelEntity(AuftragskennungXName), new NamedContentModelEntity(AuftragsdatumXName), new NamedContentModelEntity(AuftragsartXName), new NamedContentModelEntity(InspektionsortXName), new NamedContentModelEntity(InspektionszweckXName), new NamedContentModelEntity(KodiersystemXName), new NamedContentModelEntity(AuftragnehmerXName), new NamedContentModelEntity(SystemnameXName), new NamedContentModelEntity(VersionXName), new NamedContentModelEntity(InspektionsdatumEndeXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Auftragsbezeichnung, Auftragsnummer?, Auftragskennung, Auftragsdatum?, Auftragsart, Inspektionsort?, Inspektionszweck?, Kodiersystem?, Auftragnehmer?, Systemname?, Version?, InspektionsdatumEnde?)
        /// </para>
        /// </summary>
        public AuftragType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (Auftragsbezeichnung, Auftragsnummer?, Auftragskennung, Auftragsdatum?, Auftragsart, Inspektionsort?, Inspektionszweck?, Kodiersystem?, Auftragnehmer?, Systemname?, Version?, InspektionsdatumEnde?)
        /// </para>
        /// </summary>
        public virtual string Auftragsbezeichnung {
            get {
                XElement x = this.GetElement(AuftragsbezeichnungXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(AuftragsbezeichnungXName, value, "Auftragsbezeichnung", AuftragsbezeichnungLocalType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Auftragsbezeichnung, Auftragsnummer?, Auftragskennung, Auftragsdatum?, Auftragsart, Inspektionsort?, Inspektionszweck?, Kodiersystem?, Auftragnehmer?, Systemname?, Version?, InspektionsdatumEnde?)
        /// </para>
        /// </summary>
        public virtual string Auftragsnummer {
            get {
                XElement x = this.GetElement(AuftragsnummerXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(AuftragsnummerXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                else {
                    this.SetElementWithValidation(AuftragsnummerXName, value, "Auftragsnummer", AuftragsnummerLocalType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (Auftragsbezeichnung, Auftragsnummer?, Auftragskennung, Auftragsdatum?, Auftragsart, Inspektionsort?, Inspektionszweck?, Kodiersystem?, Auftragnehmer?, Systemname?, Version?, InspektionsdatumEnde?)
        /// </para>
        /// </summary>
        public virtual decimal Auftragskennung {
            get {
                XElement x = this.GetElement(AuftragskennungXName);
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                this.SetElementWithValidation(AuftragskennungXName, value, "Auftragskennung", AuftragskennungLocalType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Auftragsbezeichnung, Auftragsnummer?, Auftragskennung, Auftragsdatum?, Auftragsart, Inspektionsort?, Inspektionszweck?, Kodiersystem?, Auftragnehmer?, Systemname?, Version?, InspektionsdatumEnde?)
        /// </para>
        /// </summary>
        public virtual System.DateTime? Auftragsdatum {
            get {
                XElement x = this.GetElement(AuftragsdatumXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<System.DateTime>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date).Datatype);
            }
            set {
                this.SetElement(AuftragsdatumXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (Auftragsbezeichnung, Auftragsnummer?, Auftragskennung, Auftragsdatum?, Auftragsart, Inspektionsort?, Inspektionszweck?, Kodiersystem?, Auftragnehmer?, Systemname?, Version?, InspektionsdatumEnde?)
        /// </para>
        /// </summary>
        public virtual decimal Auftragsart {
            get {
                XElement x = this.GetElement(AuftragsartXName);
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                this.SetElementWithValidation(AuftragsartXName, value, "Auftragsart", global::www.bfr.abwasser.de.AuftragsartType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Auftragsbezeichnung, Auftragsnummer?, Auftragskennung, Auftragsdatum?, Auftragsart, Inspektionsort?, Inspektionszweck?, Kodiersystem?, Auftragnehmer?, Systemname?, Version?, InspektionsdatumEnde?)
        /// </para>
        /// </summary>
        public virtual string Inspektionsort {
            get {
                XElement x = this.GetElement(InspektionsortXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(InspektionsortXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                else {
                    this.SetElementWithValidation(InspektionsortXName, value, "Inspektionsort", InspektionsortLocalType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Auftragsbezeichnung, Auftragsnummer?, Auftragskennung, Auftragsdatum?, Auftragsart, Inspektionsort?, Inspektionszweck?, Kodiersystem?, Auftragnehmer?, Systemname?, Version?, InspektionsdatumEnde?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? Inspektionszweck {
            get {
                XElement x = this.GetElement(InspektionszweckXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(InspektionszweckXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                }
                else {
                    this.SetElementWithValidation(InspektionszweckXName, value, "Inspektionszweck", global::www.bfr.abwasser.de.InspektionszweckType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Auftragsbezeichnung, Auftragsnummer?, Auftragskennung, Auftragsdatum?, Auftragsart, Inspektionsort?, Inspektionszweck?, Kodiersystem?, Auftragnehmer?, Systemname?, Version?, InspektionsdatumEnde?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? Kodiersystem {
            get {
                XElement x = this.GetElement(KodiersystemXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(KodiersystemXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                }
                else {
                    this.SetElementWithValidation(KodiersystemXName, value, "Kodiersystem", global::www.bfr.abwasser.de.KodiersystemType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Auftragsbezeichnung, Auftragsnummer?, Auftragskennung, Auftragsdatum?, Auftragsart, Inspektionsort?, Inspektionszweck?, Kodiersystem?, Auftragnehmer?, Systemname?, Version?, InspektionsdatumEnde?)
        /// </para>
        /// </summary>
        public virtual string Auftragnehmer {
            get {
                XElement x = this.GetElement(AuftragnehmerXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(AuftragnehmerXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                else {
                    this.SetElementWithValidation(AuftragnehmerXName, value, "Auftragnehmer", AuftragnehmerLocalType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Auftragsbezeichnung, Auftragsnummer?, Auftragskennung, Auftragsdatum?, Auftragsart, Inspektionsort?, Inspektionszweck?, Kodiersystem?, Auftragnehmer?, Systemname?, Version?, InspektionsdatumEnde?)
        /// </para>
        /// </summary>
        public virtual string Systemname {
            get {
                XElement x = this.GetElement(SystemnameXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(SystemnameXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                else {
                    this.SetElementWithValidation(SystemnameXName, value, "Systemname", SystemnameLocalType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Auftragsbezeichnung, Auftragsnummer?, Auftragskennung, Auftragsdatum?, Auftragsart, Inspektionsort?, Inspektionszweck?, Kodiersystem?, Auftragnehmer?, Systemname?, Version?, InspektionsdatumEnde?)
        /// </para>
        /// </summary>
        public virtual string Version {
            get {
                XElement x = this.GetElement(VersionXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(VersionXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                else {
                    this.SetElementWithValidation(VersionXName, value, "Version", VersionLocalType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Auftragsbezeichnung, Auftragsnummer?, Auftragskennung, Auftragsdatum?, Auftragsart, Inspektionsort?, Inspektionszweck?, Kodiersystem?, Auftragnehmer?, Systemname?, Version?, InspektionsdatumEnde?)
        /// </para>
        /// </summary>
        public virtual System.DateTime? InspektionsdatumEnde {
            get {
                XElement x = this.GetElement(InspektionsdatumEndeXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<System.DateTime>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date).Datatype);
            }
            set {
                this.SetElement(InspektionsdatumEndeXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<AuftragType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(AuftragsbezeichnungXName, typeof(string));
            localElementDictionary.Add(AuftragsnummerXName, typeof(string));
            localElementDictionary.Add(AuftragskennungXName, typeof(decimal));
            localElementDictionary.Add(AuftragsdatumXName, typeof(System.DateTime));
            localElementDictionary.Add(AuftragsartXName, typeof(decimal));
            localElementDictionary.Add(InspektionsortXName, typeof(string));
            localElementDictionary.Add(InspektionszweckXName, typeof(decimal));
            localElementDictionary.Add(KodiersystemXName, typeof(decimal));
            localElementDictionary.Add(AuftragnehmerXName, typeof(string));
            localElementDictionary.Add(SystemnameXName, typeof(string));
            localElementDictionary.Add(VersionXName, typeof(string));
            localElementDictionary.Add(InspektionsdatumEndeXName, typeof(System.DateTime));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        private class AuftragsbezeichnungLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(4)), null, 0, 0, null, null, 60, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
            
            private AuftragsbezeichnungLocalType() {
            }
        }
        
        private class AuftragsnummerLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(4)), null, 0, 0, null, null, 40, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
            
            private AuftragsnummerLocalType() {
            }
        }
        
        private class AuftragskennungLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(1024)), null, 0, 0, null, null, 0, null, null, 0, null, 6, XmlSchemaWhiteSpace.Collapse));
            
            private AuftragskennungLocalType() {
            }
        }
        
        private class InspektionsortLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(4)), null, 0, 0, null, null, 40, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
            
            private InspektionsortLocalType() {
            }
        }
        
        private class AuftragnehmerLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(4)), null, 0, 0, null, null, 60, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
            
            private AuftragnehmerLocalType() {
            }
        }
        
        private class SystemnameLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(4)), null, 0, 0, null, null, 40, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
            
            private SystemnameLocalType() {
            }
        }
        
        private class VersionLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(4)), null, 0, 0, null, null, 10, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
            
            private VersionLocalType() {
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Dokumentname, Dateiname, Dokumentquelle, Kommentar?)
    /// </para>
    /// </summary>
    public partial class DokumentenType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName DokumentnameXName = System.Xml.Linq.XName.Get("Dokumentname", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName DateinameXName = System.Xml.Linq.XName.Get("Dateiname", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName DokumentquelleXName = System.Xml.Linq.XName.Get("Dokumentquelle", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName KommentarXName = System.Xml.Linq.XName.Get("Kommentar", "http://www.bfr-abwasser.de");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("DokumentenType", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator DokumentenType(XElement xe) { return XTypedServices.ToXTypedElement<DokumentenType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static DokumentenType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(DokumentnameXName), new NamedContentModelEntity(DateinameXName), new NamedContentModelEntity(DokumentquelleXName), new NamedContentModelEntity(KommentarXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Dokumentname, Dateiname, Dokumentquelle, Kommentar?)
        /// </para>
        /// </summary>
        public DokumentenType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (Dokumentname, Dateiname, Dokumentquelle, Kommentar?)
        /// </para>
        /// </summary>
        public virtual string Dokumentname {
            get {
                XElement x = this.GetElement(DokumentnameXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(DokumentnameXName, value, "Dokumentname", DokumentnameLocalType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (Dokumentname, Dateiname, Dokumentquelle, Kommentar?)
        /// </para>
        /// </summary>
        public virtual string Dateiname {
            get {
                XElement x = this.GetElement(DateinameXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(DateinameXName, value, "Dateiname", DateinameLocalType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (Dokumentname, Dateiname, Dokumentquelle, Kommentar?)
        /// </para>
        /// </summary>
        public virtual string Dokumentquelle {
            get {
                XElement x = this.GetElement(DokumentquelleXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(DokumentquelleXName, value, "Dokumentquelle", DokumentquelleLocalType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Dokumentname, Dateiname, Dokumentquelle, Kommentar?)
        /// </para>
        /// </summary>
        public virtual string Kommentar {
            get {
                XElement x = this.GetElement(KommentarXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
            set {
                this.SetElement(KommentarXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<DokumentenType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(DokumentnameXName, typeof(string));
            localElementDictionary.Add(DateinameXName, typeof(string));
            localElementDictionary.Add(DokumentquelleXName, typeof(string));
            localElementDictionary.Add(KommentarXName, typeof(string));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        private class DokumentnameLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(4)), null, 0, 0, null, null, 40, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
            
            private DokumentnameLocalType() {
            }
        }
        
        private class DateinameLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(4)), null, 0, 0, null, null, 255, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
            
            private DateinameLocalType() {
            }
        }
        
        private class DokumentquelleLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(4)), null, 0, 0, null, null, 40, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
            
            private DokumentquelleLocalType() {
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Strassenschluessel?, Strassenname?, Ortsteilschluessel?, Ortsteilname?)
    /// </para>
    /// </summary>
    public partial class OrtLageType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName StrassenschluesselXName = System.Xml.Linq.XName.Get("Strassenschluessel", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName StrassennameXName = System.Xml.Linq.XName.Get("Strassenname", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName OrtsteilschluesselXName = System.Xml.Linq.XName.Get("Ortsteilschluessel", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName OrtsteilnameXName = System.Xml.Linq.XName.Get("Ortsteilname", "http://www.bfr-abwasser.de");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("OrtLageType", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator OrtLageType(XElement xe) { return XTypedServices.ToXTypedElement<OrtLageType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static OrtLageType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(StrassenschluesselXName), new NamedContentModelEntity(StrassennameXName), new NamedContentModelEntity(OrtsteilschluesselXName), new NamedContentModelEntity(OrtsteilnameXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Strassenschluessel?, Strassenname?, Ortsteilschluessel?, Ortsteilname?)
        /// </para>
        /// </summary>
        public OrtLageType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Strassenschluessel?, Strassenname?, Ortsteilschluessel?, Ortsteilname?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? Strassenschluessel {
            get {
                XElement x = this.GetElement(StrassenschluesselXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(StrassenschluesselXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                }
                else {
                    this.SetElementWithValidation(StrassenschluesselXName, value, "Strassenschluessel", StrassenschluesselLocalType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Strassenschluessel?, Strassenname?, Ortsteilschluessel?, Ortsteilname?)
        /// </para>
        /// </summary>
        public virtual string Strassenname {
            get {
                XElement x = this.GetElement(StrassennameXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(StrassennameXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                else {
                    this.SetElementWithValidation(StrassennameXName, value, "Strassenname", StrassennameLocalType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Strassenschluessel?, Strassenname?, Ortsteilschluessel?, Ortsteilname?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? Ortsteilschluessel {
            get {
                XElement x = this.GetElement(OrtsteilschluesselXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(OrtsteilschluesselXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                }
                else {
                    this.SetElementWithValidation(OrtsteilschluesselXName, value, "Ortsteilschluessel", OrtsteilschluesselLocalType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Strassenschluessel?, Strassenname?, Ortsteilschluessel?, Ortsteilname?)
        /// </para>
        /// </summary>
        public virtual string Ortsteilname {
            get {
                XElement x = this.GetElement(OrtsteilnameXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(OrtsteilnameXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                else {
                    this.SetElementWithValidation(OrtsteilnameXName, value, "Ortsteilname", OrtsteilnameLocalType.TypeDefinition);
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<OrtLageType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(StrassenschluesselXName, typeof(decimal));
            localElementDictionary.Add(StrassennameXName, typeof(string));
            localElementDictionary.Add(OrtsteilschluesselXName, typeof(decimal));
            localElementDictionary.Add(OrtsteilnameXName, typeof(string));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        private class StrassenschluesselLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(1024)), null, 0, 0, null, null, 0, null, null, 0, null, 5, XmlSchemaWhiteSpace.Collapse));
            
            private StrassenschluesselLocalType() {
            }
        }
        
        private class StrassennameLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(4)), null, 0, 0, null, null, 40, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
            
            private StrassennameLocalType() {
            }
        }
        
        private class OrtsteilschluesselLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(1024)), null, 0, 0, null, null, 0, null, null, 0, null, 5, XmlSchemaWhiteSpace.Collapse));
            
            private OrtsteilschluesselLocalType() {
            }
        }
        
        private class OrtsteilnameLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(4)), null, 0, 0, null, null, 40, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
            
            private OrtsteilnameLocalType() {
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Auftragskennung, Inspektionsdatum?, Inspektionsverfahren?, NameUntersucher?, Uhrzeit?, Wetter?, Temperatur?, Reinigung?, Wasserhaltung?, VideoSpeichermedium?, Videoablagereferenz?, Bemerkung?, (Rohrleitung | Knoten | Bauwerk), Dokumente?)
    /// </para>
    /// </summary>
    public partial class OptischeInspektionType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName AuftragskennungXName = System.Xml.Linq.XName.Get("Auftragskennung", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName InspektionsdatumXName = System.Xml.Linq.XName.Get("Inspektionsdatum", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName InspektionsverfahrenXName = System.Xml.Linq.XName.Get("Inspektionsverfahren", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName NameUntersucherXName = System.Xml.Linq.XName.Get("NameUntersucher", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName UhrzeitXName = System.Xml.Linq.XName.Get("Uhrzeit", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName WetterXName = System.Xml.Linq.XName.Get("Wetter", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TemperaturXName = System.Xml.Linq.XName.Get("Temperatur", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ReinigungXName = System.Xml.Linq.XName.Get("Reinigung", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName WasserhaltungXName = System.Xml.Linq.XName.Get("Wasserhaltung", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName VideoSpeichermediumXName = System.Xml.Linq.XName.Get("VideoSpeichermedium", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName VideoablagereferenzXName = System.Xml.Linq.XName.Get("Videoablagereferenz", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName BemerkungXName = System.Xml.Linq.XName.Get("Bemerkung", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName RohrleitungXName = System.Xml.Linq.XName.Get("Rohrleitung", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName KnotenXName = System.Xml.Linq.XName.Get("Knoten", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName BauwerkXName = System.Xml.Linq.XName.Get("Bauwerk", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName DokumenteXName = System.Xml.Linq.XName.Get("Dokumente", "http://www.bfr-abwasser.de");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("OptischeInspektionType", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator OptischeInspektionType(XElement xe) { return XTypedServices.ToXTypedElement<OptischeInspektionType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static OptischeInspektionType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(AuftragskennungXName), new NamedContentModelEntity(InspektionsdatumXName), new NamedContentModelEntity(InspektionsverfahrenXName), new NamedContentModelEntity(NameUntersucherXName), new NamedContentModelEntity(UhrzeitXName), new NamedContentModelEntity(WetterXName), new NamedContentModelEntity(TemperaturXName), new NamedContentModelEntity(ReinigungXName), new NamedContentModelEntity(WasserhaltungXName), new NamedContentModelEntity(VideoSpeichermediumXName), new NamedContentModelEntity(VideoablagereferenzXName), new NamedContentModelEntity(BemerkungXName), new ChoiceContentModelEntity(new NamedContentModelEntity(RohrleitungXName), new NamedContentModelEntity(KnotenXName), new NamedContentModelEntity(BauwerkXName)), new NamedContentModelEntity(DokumenteXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Auftragskennung, Inspektionsdatum?, Inspektionsverfahren?, NameUntersucher?, Uhrzeit?, Wetter?, Temperatur?, Reinigung?, Wasserhaltung?, VideoSpeichermedium?, Videoablagereferenz?, Bemerkung?, (Rohrleitung | Knoten | Bauwerk), Dokumente?)
        /// </para>
        /// </summary>
        public OptischeInspektionType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (Auftragskennung, Inspektionsdatum?, Inspektionsverfahren?, NameUntersucher?, Uhrzeit?, Wetter?, Temperatur?, Reinigung?, Wasserhaltung?, VideoSpeichermedium?, Videoablagereferenz?, Bemerkung?, (Rohrleitung | Knoten | Bauwerk), Dokumente?)
        /// </para>
        /// </summary>
        public virtual decimal Auftragskennung {
            get {
                XElement x = this.GetElement(AuftragskennungXName);
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                this.SetElementWithValidation(AuftragskennungXName, value, "Auftragskennung", AuftragskennungLocalType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Auftragskennung, Inspektionsdatum?, Inspektionsverfahren?, NameUntersucher?, Uhrzeit?, Wetter?, Temperatur?, Reinigung?, Wasserhaltung?, VideoSpeichermedium?, Videoablagereferenz?, Bemerkung?, (Rohrleitung | Knoten | Bauwerk), Dokumente?)
        /// </para>
        /// </summary>
        public virtual System.DateTime? Inspektionsdatum {
            get {
                XElement x = this.GetElement(InspektionsdatumXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<System.DateTime>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date).Datatype);
            }
            set {
                this.SetElement(InspektionsdatumXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Auftragskennung, Inspektionsdatum?, Inspektionsverfahren?, NameUntersucher?, Uhrzeit?, Wetter?, Temperatur?, Reinigung?, Wasserhaltung?, VideoSpeichermedium?, Videoablagereferenz?, Bemerkung?, (Rohrleitung | Knoten | Bauwerk), Dokumente?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? Inspektionsverfahren {
            get {
                XElement x = this.GetElement(InspektionsverfahrenXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(InspektionsverfahrenXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                }
                else {
                    this.SetElementWithValidation(InspektionsverfahrenXName, value, "Inspektionsverfahren", global::www.bfr.abwasser.de.InspektionsverfahrenType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Auftragskennung, Inspektionsdatum?, Inspektionsverfahren?, NameUntersucher?, Uhrzeit?, Wetter?, Temperatur?, Reinigung?, Wasserhaltung?, VideoSpeichermedium?, Videoablagereferenz?, Bemerkung?, (Rohrleitung | Knoten | Bauwerk), Dokumente?)
        /// </para>
        /// </summary>
        public virtual string NameUntersucher {
            get {
                XElement x = this.GetElement(NameUntersucherXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(NameUntersucherXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                else {
                    this.SetElementWithValidation(NameUntersucherXName, value, "NameUntersucher", NameUntersucherLocalType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Auftragskennung, Inspektionsdatum?, Inspektionsverfahren?, NameUntersucher?, Uhrzeit?, Wetter?, Temperatur?, Reinigung?, Wasserhaltung?, VideoSpeichermedium?, Videoablagereferenz?, Bemerkung?, (Rohrleitung | Knoten | Bauwerk), Dokumente?)
        /// </para>
        /// </summary>
        public virtual System.DateTime? Uhrzeit {
            get {
                XElement x = this.GetElement(UhrzeitXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<System.DateTime>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Time).Datatype);
            }
            set {
                this.SetElement(UhrzeitXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Time).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Auftragskennung, Inspektionsdatum?, Inspektionsverfahren?, NameUntersucher?, Uhrzeit?, Wetter?, Temperatur?, Reinigung?, Wasserhaltung?, VideoSpeichermedium?, Videoablagereferenz?, Bemerkung?, (Rohrleitung | Knoten | Bauwerk), Dokumente?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? Wetter {
            get {
                XElement x = this.GetElement(WetterXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(WetterXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                }
                else {
                    this.SetElementWithValidation(WetterXName, value, "Wetter", global::www.bfr.abwasser.de.WetterType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Auftragskennung, Inspektionsdatum?, Inspektionsverfahren?, NameUntersucher?, Uhrzeit?, Wetter?, Temperatur?, Reinigung?, Wasserhaltung?, VideoSpeichermedium?, Videoablagereferenz?, Bemerkung?, (Rohrleitung | Knoten | Bauwerk), Dokumente?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? Temperatur {
            get {
                XElement x = this.GetElement(TemperaturXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(TemperaturXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                }
                else {
                    this.SetElementWithValidation(TemperaturXName, value, "Temperatur", TemperaturLocalType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Auftragskennung, Inspektionsdatum?, Inspektionsverfahren?, NameUntersucher?, Uhrzeit?, Wetter?, Temperatur?, Reinigung?, Wasserhaltung?, VideoSpeichermedium?, Videoablagereferenz?, Bemerkung?, (Rohrleitung | Knoten | Bauwerk), Dokumente?)
        /// </para>
        /// </summary>
        public virtual System.Boolean? Reinigung {
            get {
                XElement x = this.GetElement(ReinigungXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(ReinigungXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
                }
                else {
                    this.SetElementWithValidation(ReinigungXName, value, "Reinigung", ReinigungLocalType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Auftragskennung, Inspektionsdatum?, Inspektionsverfahren?, NameUntersucher?, Uhrzeit?, Wetter?, Temperatur?, Reinigung?, Wasserhaltung?, VideoSpeichermedium?, Videoablagereferenz?, Bemerkung?, (Rohrleitung | Knoten | Bauwerk), Dokumente?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? Wasserhaltung {
            get {
                XElement x = this.GetElement(WasserhaltungXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(WasserhaltungXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                }
                else {
                    this.SetElementWithValidation(WasserhaltungXName, value, "Wasserhaltung", global::www.bfr.abwasser.de.WasserhaltungType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Auftragskennung, Inspektionsdatum?, Inspektionsverfahren?, NameUntersucher?, Uhrzeit?, Wetter?, Temperatur?, Reinigung?, Wasserhaltung?, VideoSpeichermedium?, Videoablagereferenz?, Bemerkung?, (Rohrleitung | Knoten | Bauwerk), Dokumente?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? VideoSpeichermedium {
            get {
                XElement x = this.GetElement(VideoSpeichermediumXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(VideoSpeichermediumXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                }
                else {
                    this.SetElementWithValidation(VideoSpeichermediumXName, value, "VideoSpeichermedium", global::www.bfr.abwasser.de.VideoSpeichermediumType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Auftragskennung, Inspektionsdatum?, Inspektionsverfahren?, NameUntersucher?, Uhrzeit?, Wetter?, Temperatur?, Reinigung?, Wasserhaltung?, VideoSpeichermedium?, Videoablagereferenz?, Bemerkung?, (Rohrleitung | Knoten | Bauwerk), Dokumente?)
        /// </para>
        /// </summary>
        public virtual string Videoablagereferenz {
            get {
                XElement x = this.GetElement(VideoablagereferenzXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(VideoablagereferenzXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                else {
                    this.SetElementWithValidation(VideoablagereferenzXName, value, "Videoablagereferenz", VideoablagereferenzLocalType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Auftragskennung, Inspektionsdatum?, Inspektionsverfahren?, NameUntersucher?, Uhrzeit?, Wetter?, Temperatur?, Reinigung?, Wasserhaltung?, VideoSpeichermedium?, Videoablagereferenz?, Bemerkung?, (Rohrleitung | Knoten | Bauwerk), Dokumente?)
        /// </para>
        /// </summary>
        public virtual string Bemerkung {
            get {
                XElement x = this.GetElement(BemerkungXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
            set {
                this.SetElement(BemerkungXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (Auftragskennung, Inspektionsdatum?, Inspektionsverfahren?, NameUntersucher?, Uhrzeit?, Wetter?, Temperatur?, Reinigung?, Wasserhaltung?, VideoSpeichermedium?, Videoablagereferenz?, Bemerkung?, (Rohrleitung | Knoten | Bauwerk), Dokumente?)
        /// </para>
        /// </summary>
        public virtual RohrType Rohrleitung {
            get {
                XElement x = this.GetElement(RohrleitungXName);
                return ((RohrType)(x));
            }
            set {
                this.SetElement(RohrleitungXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (Auftragskennung, Inspektionsdatum?, Inspektionsverfahren?, NameUntersucher?, Uhrzeit?, Wetter?, Temperatur?, Reinigung?, Wasserhaltung?, VideoSpeichermedium?, Videoablagereferenz?, Bemerkung?, (Rohrleitung | Knoten | Bauwerk), Dokumente?)
        /// </para>
        /// </summary>
        public virtual KnotenType Knoten {
            get {
                XElement x = this.GetElement(KnotenXName);
                return ((KnotenType)(x));
            }
            set {
                this.SetElement(KnotenXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (Auftragskennung, Inspektionsdatum?, Inspektionsverfahren?, NameUntersucher?, Uhrzeit?, Wetter?, Temperatur?, Reinigung?, Wasserhaltung?, VideoSpeichermedium?, Videoablagereferenz?, Bemerkung?, (Rohrleitung | Knoten | Bauwerk), Dokumente?)
        /// </para>
        /// </summary>
        public virtual BauwerkeType Bauwerk {
            get {
                XElement x = this.GetElement(BauwerkXName);
                return ((BauwerkeType)(x));
            }
            set {
                this.SetElement(BauwerkXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Auftragskennung, Inspektionsdatum?, Inspektionsverfahren?, NameUntersucher?, Uhrzeit?, Wetter?, Temperatur?, Reinigung?, Wasserhaltung?, VideoSpeichermedium?, Videoablagereferenz?, Bemerkung?, (Rohrleitung | Knoten | Bauwerk), Dokumente?)
        /// </para>
        /// </summary>
        public virtual DokumenteLocalType Dokumente {
            get {
                XElement x = this.GetElement(DokumenteXName);
                return ((DokumenteLocalType)(x));
            }
            set {
                this.SetElement(DokumenteXName, value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<OptischeInspektionType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(AuftragskennungXName, typeof(decimal));
            localElementDictionary.Add(InspektionsdatumXName, typeof(System.DateTime));
            localElementDictionary.Add(InspektionsverfahrenXName, typeof(decimal));
            localElementDictionary.Add(NameUntersucherXName, typeof(string));
            localElementDictionary.Add(UhrzeitXName, typeof(System.DateTime));
            localElementDictionary.Add(WetterXName, typeof(decimal));
            localElementDictionary.Add(TemperaturXName, typeof(decimal));
            localElementDictionary.Add(ReinigungXName, typeof(bool));
            localElementDictionary.Add(WasserhaltungXName, typeof(decimal));
            localElementDictionary.Add(VideoSpeichermediumXName, typeof(decimal));
            localElementDictionary.Add(VideoablagereferenzXName, typeof(string));
            localElementDictionary.Add(BemerkungXName, typeof(string));
            localElementDictionary.Add(RohrleitungXName, typeof(RohrType));
            localElementDictionary.Add(KnotenXName, typeof(KnotenType));
            localElementDictionary.Add(BauwerkXName, typeof(BauwerkeType));
            localElementDictionary.Add(DokumenteXName, typeof(DokumenteLocalType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        private class AuftragskennungLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(1024)), null, 0, 0, null, null, 0, null, null, 0, null, 6, XmlSchemaWhiteSpace.Collapse));
            
            private AuftragskennungLocalType() {
            }
        }
        
        private class NameUntersucherLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(4)), null, 0, 0, null, null, 40, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
            
            private NameUntersucherLocalType() {
            }
        }
        
        private class TemperaturLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(1024)), null, 0, 0, null, null, 0, null, null, 0, null, 2, XmlSchemaWhiteSpace.Collapse));
            
            private TemperaturLocalType() {
            }
        }
        
        private class ReinigungLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean), null);
            
            private ReinigungLocalType() {
            }
        }
        
        private class VideoablagereferenzLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(4)), null, 0, 0, null, null, 30, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
            
            private VideoablagereferenzLocalType() {
            }
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Dokument+)
        /// </para>
        /// </summary>
        public partial class DokumenteLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName DokumentXName = System.Xml.Linq.XName.Get("Dokument", "http://www.bfr-abwasser.de");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XTypedList<DokumentenType> DokumentField;
            
            private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("Dokumente", "http://www.bfr-abwasser.de");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;
            
		public static explicit operator DokumenteLocalType(XElement xe) { return XTypedServices.ToXTypedElement<DokumenteLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static DokumenteLocalType() {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(DokumentXName));
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (Dokument+)
            /// </para>
            /// </summary>
            public DokumenteLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required, repeating
            /// </para>
            /// <para>
            /// Regular expression: (Dokument+)
            /// </para>
            /// </summary>
            public virtual IList<DokumentenType> Dokument {
                get {
                    if ((this.DokumentField == null)) {
                        this.DokumentField = new XTypedList<DokumentenType>(this, LinqToXsdTypeManager.Instance, DokumentXName);
                    }
                    return this.DokumentField;
                }
                set {
                    if ((value == null)) {
                        this.DokumentField = null;
                    }
                    else {
                        if ((this.DokumentField == null)) {
                            this.DokumentField = XTypedList<DokumentenType>.Initialize(this, LinqToXsdTypeManager.Instance, value, DokumentXName);
                        }
                        else {
                            XTypedServices.SetList<DokumentenType>(this.DokumentField, value);
                        }
                    }
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            System.Xml.Linq.XName IXMetaData.SchemaName {
                get {
                    return xName;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<DokumenteLocalType>(this);
            }
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(DokumentXName, typeof(DokumentenType));
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return contentModel;
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Auftragskennung, Pruefgrund, Pruefvorschrift, Pruefdatum, Geraetefuehrer, Pruefverfahren, Pruefumfang, Pruefergebnis, PruefProtokolle?, Prueflaenge?, (DeltaP | DeltaV)?, PruefObjekte?)
    /// </para>
    /// </summary>
    public partial class DichtheitType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName AuftragskennungXName = System.Xml.Linq.XName.Get("Auftragskennung", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName PruefgrundXName = System.Xml.Linq.XName.Get("Pruefgrund", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName PruefvorschriftXName = System.Xml.Linq.XName.Get("Pruefvorschrift", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName PruefdatumXName = System.Xml.Linq.XName.Get("Pruefdatum", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName GeraetefuehrerXName = System.Xml.Linq.XName.Get("Geraetefuehrer", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName PruefverfahrenXName = System.Xml.Linq.XName.Get("Pruefverfahren", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName PruefumfangXName = System.Xml.Linq.XName.Get("Pruefumfang", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName PruefergebnisXName = System.Xml.Linq.XName.Get("Pruefergebnis", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName PruefProtokolleXName = System.Xml.Linq.XName.Get("PruefProtokolle", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName PrueflaengeXName = System.Xml.Linq.XName.Get("Prueflaenge", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName DeltaPXName = System.Xml.Linq.XName.Get("DeltaP", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName DeltaVXName = System.Xml.Linq.XName.Get("DeltaV", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName PruefObjekteXName = System.Xml.Linq.XName.Get("PruefObjekte", "http://www.bfr-abwasser.de");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("DichtheitType", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator DichtheitType(XElement xe) { return XTypedServices.ToXTypedElement<DichtheitType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static DichtheitType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(AuftragskennungXName), new NamedContentModelEntity(PruefgrundXName), new NamedContentModelEntity(PruefvorschriftXName), new NamedContentModelEntity(PruefdatumXName), new NamedContentModelEntity(GeraetefuehrerXName), new NamedContentModelEntity(PruefverfahrenXName), new NamedContentModelEntity(PruefumfangXName), new NamedContentModelEntity(PruefergebnisXName), new NamedContentModelEntity(PruefProtokolleXName), new NamedContentModelEntity(PrueflaengeXName), new ChoiceContentModelEntity(new NamedContentModelEntity(DeltaPXName), new NamedContentModelEntity(DeltaVXName)), new NamedContentModelEntity(PruefObjekteXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Auftragskennung, Pruefgrund, Pruefvorschrift, Pruefdatum, Geraetefuehrer, Pruefverfahren, Pruefumfang, Pruefergebnis, PruefProtokolle?, Prueflaenge?, (DeltaP | DeltaV)?, PruefObjekte?)
        /// </para>
        /// </summary>
        public DichtheitType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (Auftragskennung, Pruefgrund, Pruefvorschrift, Pruefdatum, Geraetefuehrer, Pruefverfahren, Pruefumfang, Pruefergebnis, PruefProtokolle?, Prueflaenge?, (DeltaP | DeltaV)?, PruefObjekte?)
        /// </para>
        /// </summary>
        public virtual decimal Auftragskennung {
            get {
                XElement x = this.GetElement(AuftragskennungXName);
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                this.SetElementWithValidation(AuftragskennungXName, value, "Auftragskennung", AuftragskennungLocalType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (Auftragskennung, Pruefgrund, Pruefvorschrift, Pruefdatum, Geraetefuehrer, Pruefverfahren, Pruefumfang, Pruefergebnis, PruefProtokolle?, Prueflaenge?, (DeltaP | DeltaV)?, PruefObjekte?)
        /// </para>
        /// </summary>
        public virtual decimal Pruefgrund {
            get {
                XElement x = this.GetElement(PruefgrundXName);
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                this.SetElementWithValidation(PruefgrundXName, value, "Pruefgrund", global::www.bfr.abwasser.de.PruefgrundType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (Auftragskennung, Pruefgrund, Pruefvorschrift, Pruefdatum, Geraetefuehrer, Pruefverfahren, Pruefumfang, Pruefergebnis, PruefProtokolle?, Prueflaenge?, (DeltaP | DeltaV)?, PruefObjekte?)
        /// </para>
        /// </summary>
        public virtual decimal Pruefvorschrift {
            get {
                XElement x = this.GetElement(PruefvorschriftXName);
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                this.SetElementWithValidation(PruefvorschriftXName, value, "Pruefvorschrift", global::www.bfr.abwasser.de.PruefvorschriftType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (Auftragskennung, Pruefgrund, Pruefvorschrift, Pruefdatum, Geraetefuehrer, Pruefverfahren, Pruefumfang, Pruefergebnis, PruefProtokolle?, Prueflaenge?, (DeltaP | DeltaV)?, PruefObjekte?)
        /// </para>
        /// </summary>
        public virtual System.DateTime Pruefdatum {
            get {
                XElement x = this.GetElement(PruefdatumXName);
                return XTypedServices.ParseValue<System.DateTime>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date).Datatype);
            }
            set {
                this.SetElement(PruefdatumXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (Auftragskennung, Pruefgrund, Pruefvorschrift, Pruefdatum, Geraetefuehrer, Pruefverfahren, Pruefumfang, Pruefergebnis, PruefProtokolle?, Prueflaenge?, (DeltaP | DeltaV)?, PruefObjekte?)
        /// </para>
        /// </summary>
        public virtual string Geraetefuehrer {
            get {
                XElement x = this.GetElement(GeraetefuehrerXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(GeraetefuehrerXName, value, "Geraetefuehrer", GeraetefuehrerLocalType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (Auftragskennung, Pruefgrund, Pruefvorschrift, Pruefdatum, Geraetefuehrer, Pruefverfahren, Pruefumfang, Pruefergebnis, PruefProtokolle?, Prueflaenge?, (DeltaP | DeltaV)?, PruefObjekte?)
        /// </para>
        /// </summary>
        public virtual decimal Pruefverfahren {
            get {
                XElement x = this.GetElement(PruefverfahrenXName);
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                this.SetElementWithValidation(PruefverfahrenXName, value, "Pruefverfahren", global::www.bfr.abwasser.de.PruefverfahrenType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (Auftragskennung, Pruefgrund, Pruefvorschrift, Pruefdatum, Geraetefuehrer, Pruefverfahren, Pruefumfang, Pruefergebnis, PruefProtokolle?, Prueflaenge?, (DeltaP | DeltaV)?, PruefObjekte?)
        /// </para>
        /// </summary>
        public virtual decimal Pruefumfang {
            get {
                XElement x = this.GetElement(PruefumfangXName);
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                this.SetElementWithValidation(PruefumfangXName, value, "Pruefumfang", global::www.bfr.abwasser.de.PruefumfangType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (Auftragskennung, Pruefgrund, Pruefvorschrift, Pruefdatum, Geraetefuehrer, Pruefverfahren, Pruefumfang, Pruefergebnis, PruefProtokolle?, Prueflaenge?, (DeltaP | DeltaV)?, PruefObjekte?)
        /// </para>
        /// </summary>
        public virtual bool Pruefergebnis {
            get {
                XElement x = this.GetElement(PruefergebnisXName);
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
            set {
                this.SetElement(PruefergebnisXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Auftragskennung, Pruefgrund, Pruefvorschrift, Pruefdatum, Geraetefuehrer, Pruefverfahren, Pruefumfang, Pruefergebnis, PruefProtokolle?, Prueflaenge?, (DeltaP | DeltaV)?, PruefObjekte?)
        /// </para>
        /// </summary>
        public virtual PruefProtokolleLocalType PruefProtokolle {
            get {
                XElement x = this.GetElement(PruefProtokolleXName);
                return ((PruefProtokolleLocalType)(x));
            }
            set {
                this.SetElement(PruefProtokolleXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Auftragskennung, Pruefgrund, Pruefvorschrift, Pruefdatum, Geraetefuehrer, Pruefverfahren, Pruefumfang, Pruefergebnis, PruefProtokolle?, Prueflaenge?, (DeltaP | DeltaV)?, PruefObjekte?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? Prueflaenge {
            get {
                XElement x = this.GetElement(PrueflaengeXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(PrueflaengeXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                }
                else {
                    this.SetElementWithValidation(PrueflaengeXName, value, "Prueflaenge", PrueflaengeLocalType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (Auftragskennung, Pruefgrund, Pruefvorschrift, Pruefdatum, Geraetefuehrer, Pruefverfahren, Pruefumfang, Pruefergebnis, PruefProtokolle?, Prueflaenge?, (DeltaP | DeltaV)?, PruefObjekte?)
        /// </para>
        /// </summary>
        public virtual PruefDeltaPType DeltaP {
            get {
                XElement x = this.GetElement(DeltaPXName);
                return ((PruefDeltaPType)(x));
            }
            set {
                this.SetElement(DeltaPXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (Auftragskennung, Pruefgrund, Pruefvorschrift, Pruefdatum, Geraetefuehrer, Pruefverfahren, Pruefumfang, Pruefergebnis, PruefProtokolle?, Prueflaenge?, (DeltaP | DeltaV)?, PruefObjekte?)
        /// </para>
        /// </summary>
        public virtual PruefDeltaVType DeltaV {
            get {
                XElement x = this.GetElement(DeltaVXName);
                return ((PruefDeltaVType)(x));
            }
            set {
                this.SetElement(DeltaVXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Auftragskennung, Pruefgrund, Pruefvorschrift, Pruefdatum, Geraetefuehrer, Pruefverfahren, Pruefumfang, Pruefergebnis, PruefProtokolle?, Prueflaenge?, (DeltaP | DeltaV)?, PruefObjekte?)
        /// </para>
        /// </summary>
        public virtual PruefObjekteLocalType PruefObjekte {
            get {
                XElement x = this.GetElement(PruefObjekteXName);
                return ((PruefObjekteLocalType)(x));
            }
            set {
                this.SetElement(PruefObjekteXName, value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<DichtheitType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(AuftragskennungXName, typeof(decimal));
            localElementDictionary.Add(PruefgrundXName, typeof(decimal));
            localElementDictionary.Add(PruefvorschriftXName, typeof(decimal));
            localElementDictionary.Add(PruefdatumXName, typeof(System.DateTime));
            localElementDictionary.Add(GeraetefuehrerXName, typeof(string));
            localElementDictionary.Add(PruefverfahrenXName, typeof(decimal));
            localElementDictionary.Add(PruefumfangXName, typeof(decimal));
            localElementDictionary.Add(PruefergebnisXName, typeof(bool));
            localElementDictionary.Add(PruefProtokolleXName, typeof(PruefProtokolleLocalType));
            localElementDictionary.Add(PrueflaengeXName, typeof(decimal));
            localElementDictionary.Add(DeltaPXName, typeof(PruefDeltaPType));
            localElementDictionary.Add(DeltaVXName, typeof(PruefDeltaVType));
            localElementDictionary.Add(PruefObjekteXName, typeof(PruefObjekteLocalType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        private class AuftragskennungLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(1024)), null, 0, 0, null, null, 0, null, null, 0, null, 6, XmlSchemaWhiteSpace.Collapse));
            
            private AuftragskennungLocalType() {
            }
        }
        
        private class GeraetefuehrerLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(4)), null, 0, 0, null, null, 40, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
            
            private GeraetefuehrerLocalType() {
            }
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Dokument+)
        /// </para>
        /// </summary>
        public partial class PruefProtokolleLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName DokumentXName = System.Xml.Linq.XName.Get("Dokument", "http://www.bfr-abwasser.de");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XTypedList<DokumentenType> DokumentField;
            
            private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("PruefProtokolle", "http://www.bfr-abwasser.de");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;
            
		public static explicit operator PruefProtokolleLocalType(XElement xe) { return XTypedServices.ToXTypedElement<PruefProtokolleLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static PruefProtokolleLocalType() {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(DokumentXName));
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (Dokument+)
            /// </para>
            /// </summary>
            public PruefProtokolleLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required, repeating
            /// </para>
            /// <para>
            /// Regular expression: (Dokument+)
            /// </para>
            /// </summary>
            public virtual IList<DokumentenType> Dokument {
                get {
                    if ((this.DokumentField == null)) {
                        this.DokumentField = new XTypedList<DokumentenType>(this, LinqToXsdTypeManager.Instance, DokumentXName);
                    }
                    return this.DokumentField;
                }
                set {
                    if ((value == null)) {
                        this.DokumentField = null;
                    }
                    else {
                        if ((this.DokumentField == null)) {
                            this.DokumentField = XTypedList<DokumentenType>.Initialize(this, LinqToXsdTypeManager.Instance, value, DokumentXName);
                        }
                        else {
                            XTypedServices.SetList<DokumentenType>(this.DokumentField, value);
                        }
                    }
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            System.Xml.Linq.XName IXMetaData.SchemaName {
                get {
                    return xName;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<PruefProtokolleLocalType>(this);
            }
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(DokumentXName, typeof(DokumentenType));
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return contentModel;
            }
        }
        
        private class PrueflaengeLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(3200)), null, 2, 0, 10000m, null, 0, null, null, 0, null, 6, XmlSchemaWhiteSpace.Collapse));
            
            private PrueflaengeLocalType() {
            }
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (PruefObjekt+)
        /// </para>
        /// </summary>
        public partial class PruefObjekteLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName PruefObjektXName = System.Xml.Linq.XName.Get("PruefObjekt", "http://www.bfr-abwasser.de");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XTypedList<PruefObjektType> PruefObjektField;
            
            private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("PruefObjekte", "http://www.bfr-abwasser.de");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;
            
		public static explicit operator PruefObjekteLocalType(XElement xe) { return XTypedServices.ToXTypedElement<PruefObjekteLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static PruefObjekteLocalType() {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(PruefObjektXName));
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (PruefObjekt+)
            /// </para>
            /// </summary>
            public PruefObjekteLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required, repeating
            /// </para>
            /// <para>
            /// Regular expression: (PruefObjekt+)
            /// </para>
            /// </summary>
            public virtual IList<PruefObjektType> PruefObjekt {
                get {
                    if ((this.PruefObjektField == null)) {
                        this.PruefObjektField = new XTypedList<PruefObjektType>(this, LinqToXsdTypeManager.Instance, PruefObjektXName);
                    }
                    return this.PruefObjektField;
                }
                set {
                    if ((value == null)) {
                        this.PruefObjektField = null;
                    }
                    else {
                        if ((this.PruefObjektField == null)) {
                            this.PruefObjektField = XTypedList<PruefObjektType>.Initialize(this, LinqToXsdTypeManager.Instance, value, PruefObjektXName);
                        }
                        else {
                            XTypedServices.SetList<PruefObjektType>(this.PruefObjektField, value);
                        }
                    }
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            System.Xml.Linq.XName IXMetaData.SchemaName {
                get {
                    return xName;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<PruefObjekteLocalType>(this);
            }
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(PruefObjektXName, typeof(PruefObjektType));
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return contentModel;
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (KnotenZulauf, KnotenZulaufTyp, KnotenAblauf, KnotenAblaufTyp, HerkunftProfilmasse?, Profilhoehe?, Profilbreite?, Profilart?, HerkunftMaterial?, Material?, Innenschutz?, Regeleinzelrohrlaenge?, ArtAuskleidung?, Kanalart?, Anschlussdaten?)
    /// </para>
    /// </summary>
    public partial class RGrunddatenType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName KnotenZulaufXName = System.Xml.Linq.XName.Get("KnotenZulauf", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName KnotenZulaufTypXName = System.Xml.Linq.XName.Get("KnotenZulaufTyp", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName KnotenAblaufXName = System.Xml.Linq.XName.Get("KnotenAblauf", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName KnotenAblaufTypXName = System.Xml.Linq.XName.Get("KnotenAblaufTyp", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName HerkunftProfilmasseXName = System.Xml.Linq.XName.Get("HerkunftProfilmasse", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ProfilhoeheXName = System.Xml.Linq.XName.Get("Profilhoehe", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ProfilbreiteXName = System.Xml.Linq.XName.Get("Profilbreite", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ProfilartXName = System.Xml.Linq.XName.Get("Profilart", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName HerkunftMaterialXName = System.Xml.Linq.XName.Get("HerkunftMaterial", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName MaterialXName = System.Xml.Linq.XName.Get("Material", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName InnenschutzXName = System.Xml.Linq.XName.Get("Innenschutz", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName RegeleinzelrohrlaengeXName = System.Xml.Linq.XName.Get("Regeleinzelrohrlaenge", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ArtAuskleidungXName = System.Xml.Linq.XName.Get("ArtAuskleidung", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName KanalartXName = System.Xml.Linq.XName.Get("Kanalart", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName AnschlussdatenXName = System.Xml.Linq.XName.Get("Anschlussdaten", "http://www.bfr-abwasser.de");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("RGrunddatenType", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator RGrunddatenType(XElement xe) { return XTypedServices.ToXTypedElement<RGrunddatenType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static RGrunddatenType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(KnotenZulaufXName), new NamedContentModelEntity(KnotenZulaufTypXName), new NamedContentModelEntity(KnotenAblaufXName), new NamedContentModelEntity(KnotenAblaufTypXName), new NamedContentModelEntity(HerkunftProfilmasseXName), new NamedContentModelEntity(ProfilhoeheXName), new NamedContentModelEntity(ProfilbreiteXName), new NamedContentModelEntity(ProfilartXName), new NamedContentModelEntity(HerkunftMaterialXName), new NamedContentModelEntity(MaterialXName), new NamedContentModelEntity(InnenschutzXName), new NamedContentModelEntity(RegeleinzelrohrlaengeXName), new NamedContentModelEntity(ArtAuskleidungXName), new NamedContentModelEntity(KanalartXName), new NamedContentModelEntity(AnschlussdatenXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (KnotenZulauf, KnotenZulaufTyp, KnotenAblauf, KnotenAblaufTyp, HerkunftProfilmasse?, Profilhoehe?, Profilbreite?, Profilart?, HerkunftMaterial?, Material?, Innenschutz?, Regeleinzelrohrlaenge?, ArtAuskleidung?, Kanalart?, Anschlussdaten?)
        /// </para>
        /// </summary>
        public RGrunddatenType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (KnotenZulauf, KnotenZulaufTyp, KnotenAblauf, KnotenAblaufTyp, HerkunftProfilmasse?, Profilhoehe?, Profilbreite?, Profilart?, HerkunftMaterial?, Material?, Innenschutz?, Regeleinzelrohrlaenge?, ArtAuskleidung?, Kanalart?, Anschlussdaten?)
        /// </para>
        /// </summary>
        public virtual string KnotenZulauf {
            get {
                XElement x = this.GetElement(KnotenZulaufXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(KnotenZulaufXName, value, "KnotenZulauf", KnotenZulaufLocalType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (KnotenZulauf, KnotenZulaufTyp, KnotenAblauf, KnotenAblaufTyp, HerkunftProfilmasse?, Profilhoehe?, Profilbreite?, Profilart?, HerkunftMaterial?, Material?, Innenschutz?, Regeleinzelrohrlaenge?, ArtAuskleidung?, Kanalart?, Anschlussdaten?)
        /// </para>
        /// </summary>
        public virtual decimal KnotenZulaufTyp {
            get {
                XElement x = this.GetElement(KnotenZulaufTypXName);
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                this.SetElementWithValidation(KnotenZulaufTypXName, value, "KnotenZulaufTyp", global::www.bfr.abwasser.de.KnotentypType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (KnotenZulauf, KnotenZulaufTyp, KnotenAblauf, KnotenAblaufTyp, HerkunftProfilmasse?, Profilhoehe?, Profilbreite?, Profilart?, HerkunftMaterial?, Material?, Innenschutz?, Regeleinzelrohrlaenge?, ArtAuskleidung?, Kanalart?, Anschlussdaten?)
        /// </para>
        /// </summary>
        public virtual string KnotenAblauf {
            get {
                XElement x = this.GetElement(KnotenAblaufXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(KnotenAblaufXName, value, "KnotenAblauf", KnotenAblaufLocalType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (KnotenZulauf, KnotenZulaufTyp, KnotenAblauf, KnotenAblaufTyp, HerkunftProfilmasse?, Profilhoehe?, Profilbreite?, Profilart?, HerkunftMaterial?, Material?, Innenschutz?, Regeleinzelrohrlaenge?, ArtAuskleidung?, Kanalart?, Anschlussdaten?)
        /// </para>
        /// </summary>
        public virtual decimal KnotenAblaufTyp {
            get {
                XElement x = this.GetElement(KnotenAblaufTypXName);
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                this.SetElementWithValidation(KnotenAblaufTypXName, value, "KnotenAblaufTyp", global::www.bfr.abwasser.de.KnotentypType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (KnotenZulauf, KnotenZulaufTyp, KnotenAblauf, KnotenAblaufTyp, HerkunftProfilmasse?, Profilhoehe?, Profilbreite?, Profilart?, HerkunftMaterial?, Material?, Innenschutz?, Regeleinzelrohrlaenge?, ArtAuskleidung?, Kanalart?, Anschlussdaten?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? HerkunftProfilmasse {
            get {
                XElement x = this.GetElement(HerkunftProfilmasseXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(HerkunftProfilmasseXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                }
                else {
                    this.SetElementWithValidation(HerkunftProfilmasseXName, value, "HerkunftProfilmasse", global::www.bfr.abwasser.de.HerkunftProfilType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (KnotenZulauf, KnotenZulaufTyp, KnotenAblauf, KnotenAblaufTyp, HerkunftProfilmasse?, Profilhoehe?, Profilbreite?, Profilart?, HerkunftMaterial?, Material?, Innenschutz?, Regeleinzelrohrlaenge?, ArtAuskleidung?, Kanalart?, Anschlussdaten?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? Profilhoehe {
            get {
                XElement x = this.GetElement(ProfilhoeheXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(ProfilhoeheXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                }
                else {
                    this.SetElementWithValidation(ProfilhoeheXName, value, "Profilhoehe", ProfilhoeheLocalType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (KnotenZulauf, KnotenZulaufTyp, KnotenAblauf, KnotenAblaufTyp, HerkunftProfilmasse?, Profilhoehe?, Profilbreite?, Profilart?, HerkunftMaterial?, Material?, Innenschutz?, Regeleinzelrohrlaenge?, ArtAuskleidung?, Kanalart?, Anschlussdaten?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? Profilbreite {
            get {
                XElement x = this.GetElement(ProfilbreiteXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(ProfilbreiteXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                }
                else {
                    this.SetElementWithValidation(ProfilbreiteXName, value, "Profilbreite", ProfilbreiteLocalType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (KnotenZulauf, KnotenZulaufTyp, KnotenAblauf, KnotenAblaufTyp, HerkunftProfilmasse?, Profilhoehe?, Profilbreite?, Profilart?, HerkunftMaterial?, Material?, Innenschutz?, Regeleinzelrohrlaenge?, ArtAuskleidung?, Kanalart?, Anschlussdaten?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? Profilart {
            get {
                XElement x = this.GetElement(ProfilartXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(ProfilartXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                }
                else {
                    this.SetElementWithValidation(ProfilartXName, value, "Profilart", global::www.bfr.abwasser.de.ProfilartType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (KnotenZulauf, KnotenZulaufTyp, KnotenAblauf, KnotenAblaufTyp, HerkunftProfilmasse?, Profilhoehe?, Profilbreite?, Profilart?, HerkunftMaterial?, Material?, Innenschutz?, Regeleinzelrohrlaenge?, ArtAuskleidung?, Kanalart?, Anschlussdaten?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? HerkunftMaterial {
            get {
                XElement x = this.GetElement(HerkunftMaterialXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(HerkunftMaterialXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                }
                else {
                    this.SetElementWithValidation(HerkunftMaterialXName, value, "HerkunftMaterial", global::www.bfr.abwasser.de.HerkunftType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (KnotenZulauf, KnotenZulaufTyp, KnotenAblauf, KnotenAblaufTyp, HerkunftProfilmasse?, Profilhoehe?, Profilbreite?, Profilart?, HerkunftMaterial?, Material?, Innenschutz?, Regeleinzelrohrlaenge?, ArtAuskleidung?, Kanalart?, Anschlussdaten?)
        /// </para>
        /// </summary>
        public virtual string Material {
            get {
                XElement x = this.GetElement(MaterialXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(MaterialXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                else {
                    this.SetElementWithValidation(MaterialXName, value, "Material", global::www.bfr.abwasser.de.MaterialType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (KnotenZulauf, KnotenZulaufTyp, KnotenAblauf, KnotenAblaufTyp, HerkunftProfilmasse?, Profilhoehe?, Profilbreite?, Profilart?, HerkunftMaterial?, Material?, Innenschutz?, Regeleinzelrohrlaenge?, ArtAuskleidung?, Kanalart?, Anschlussdaten?)
        /// </para>
        /// </summary>
        public virtual string Innenschutz {
            get {
                XElement x = this.GetElement(InnenschutzXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(InnenschutzXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                else {
                    this.SetElementWithValidation(InnenschutzXName, value, "Innenschutz", global::www.bfr.abwasser.de.InnenschutzType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (KnotenZulauf, KnotenZulaufTyp, KnotenAblauf, KnotenAblaufTyp, HerkunftProfilmasse?, Profilhoehe?, Profilbreite?, Profilart?, HerkunftMaterial?, Material?, Innenschutz?, Regeleinzelrohrlaenge?, ArtAuskleidung?, Kanalart?, Anschlussdaten?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? Regeleinzelrohrlaenge {
            get {
                XElement x = this.GetElement(RegeleinzelrohrlaengeXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(RegeleinzelrohrlaengeXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                }
                else {
                    this.SetElementWithValidation(RegeleinzelrohrlaengeXName, value, "Regeleinzelrohrlaenge", RegeleinzelrohrlaengeLocalType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (KnotenZulauf, KnotenZulaufTyp, KnotenAblauf, KnotenAblaufTyp, HerkunftProfilmasse?, Profilhoehe?, Profilbreite?, Profilart?, HerkunftMaterial?, Material?, Innenschutz?, Regeleinzelrohrlaenge?, ArtAuskleidung?, Kanalart?, Anschlussdaten?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? ArtAuskleidung {
            get {
                XElement x = this.GetElement(ArtAuskleidungXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(ArtAuskleidungXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                }
                else {
                    this.SetElementWithValidation(ArtAuskleidungXName, value, "ArtAuskleidung", global::www.bfr.abwasser.de.ArtAuskleidungType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (KnotenZulauf, KnotenZulaufTyp, KnotenAblauf, KnotenAblaufTyp, HerkunftProfilmasse?, Profilhoehe?, Profilbreite?, Profilart?, HerkunftMaterial?, Material?, Innenschutz?, Regeleinzelrohrlaenge?, ArtAuskleidung?, Kanalart?, Anschlussdaten?)
        /// </para>
        /// </summary>
        public virtual string Kanalart {
            get {
                XElement x = this.GetElement(KanalartXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(KanalartXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                else {
                    this.SetElementWithValidation(KanalartXName, value, "Kanalart", global::www.bfr.abwasser.de.EntwaesserungsartType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (KnotenZulauf, KnotenZulaufTyp, KnotenAblauf, KnotenAblaufTyp, HerkunftProfilmasse?, Profilhoehe?, Profilbreite?, Profilart?, HerkunftMaterial?, Material?, Innenschutz?, Regeleinzelrohrlaenge?, ArtAuskleidung?, Kanalart?, Anschlussdaten?)
        /// </para>
        /// </summary>
        public virtual AnschlussType Anschlussdaten {
            get {
                XElement x = this.GetElement(AnschlussdatenXName);
                return ((AnschlussType)(x));
            }
            set {
                this.SetElement(AnschlussdatenXName, value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<RGrunddatenType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(KnotenZulaufXName, typeof(string));
            localElementDictionary.Add(KnotenZulaufTypXName, typeof(decimal));
            localElementDictionary.Add(KnotenAblaufXName, typeof(string));
            localElementDictionary.Add(KnotenAblaufTypXName, typeof(decimal));
            localElementDictionary.Add(HerkunftProfilmasseXName, typeof(decimal));
            localElementDictionary.Add(ProfilhoeheXName, typeof(decimal));
            localElementDictionary.Add(ProfilbreiteXName, typeof(decimal));
            localElementDictionary.Add(ProfilartXName, typeof(decimal));
            localElementDictionary.Add(HerkunftMaterialXName, typeof(decimal));
            localElementDictionary.Add(MaterialXName, typeof(string));
            localElementDictionary.Add(InnenschutzXName, typeof(string));
            localElementDictionary.Add(RegeleinzelrohrlaengeXName, typeof(decimal));
            localElementDictionary.Add(ArtAuskleidungXName, typeof(decimal));
            localElementDictionary.Add(KanalartXName, typeof(string));
            localElementDictionary.Add(AnschlussdatenXName, typeof(AnschlussType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        private class KnotenZulaufLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(4)), null, 0, 0, null, null, 30, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
            
            private KnotenZulaufLocalType() {
            }
        }
        
        private class KnotenAblaufLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(4)), null, 0, 0, null, null, 30, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
            
            private KnotenAblaufLocalType() {
            }
        }
        
        private class ProfilhoeheLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(1024)), null, 0, 0, null, null, 0, null, null, 0, null, 4, XmlSchemaWhiteSpace.Collapse));
            
            private ProfilhoeheLocalType() {
            }
        }
        
        private class ProfilbreiteLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(1024)), null, 0, 0, null, null, 0, null, null, 0, null, 4, XmlSchemaWhiteSpace.Collapse));
            
            private ProfilbreiteLocalType() {
            }
        }
        
        private class RegeleinzelrohrlaengeLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(3200)), null, 2, 0, 100m, null, 0, null, null, 0, null, 4, XmlSchemaWhiteSpace.Collapse));
            
            private RegeleinzelrohrlaengeLocalType() {
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Innenschutz?, ArtAuskleidung?)
    /// </para>
    /// </summary>
    public partial class KGrunddatenType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName InnenschutzXName = System.Xml.Linq.XName.Get("Innenschutz", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ArtAuskleidungXName = System.Xml.Linq.XName.Get("ArtAuskleidung", "http://www.bfr-abwasser.de");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("KGrunddatenType", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator KGrunddatenType(XElement xe) { return XTypedServices.ToXTypedElement<KGrunddatenType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static KGrunddatenType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(InnenschutzXName), new NamedContentModelEntity(ArtAuskleidungXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Innenschutz?, ArtAuskleidung?)
        /// </para>
        /// </summary>
        public KGrunddatenType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Innenschutz?, ArtAuskleidung?)
        /// </para>
        /// </summary>
        public virtual string Innenschutz {
            get {
                XElement x = this.GetElement(InnenschutzXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(InnenschutzXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                else {
                    this.SetElementWithValidation(InnenschutzXName, value, "Innenschutz", global::www.bfr.abwasser.de.InnenschutzType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Innenschutz?, ArtAuskleidung?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? ArtAuskleidung {
            get {
                XElement x = this.GetElement(ArtAuskleidungXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(ArtAuskleidungXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                }
                else {
                    this.SetElementWithValidation(ArtAuskleidungXName, value, "ArtAuskleidung", global::www.bfr.abwasser.de.ArtAuskleidungType.TypeDefinition);
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<KGrunddatenType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(InnenschutzXName, typeof(string));
            localElementDictionary.Add(ArtAuskleidungXName, typeof(decimal));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Objektbezeichnung, Kantentyp, Entfernung?, AnschlussArt?, Fixierung?, Kommentar?)
    /// </para>
    /// </summary>
    public partial class AnschlussType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ObjektbezeichnungXName = System.Xml.Linq.XName.Get("Objektbezeichnung", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName KantentypXName = System.Xml.Linq.XName.Get("Kantentyp", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName EntfernungXName = System.Xml.Linq.XName.Get("Entfernung", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName AnschlussArtXName = System.Xml.Linq.XName.Get("AnschlussArt", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName FixierungXName = System.Xml.Linq.XName.Get("Fixierung", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName KommentarXName = System.Xml.Linq.XName.Get("Kommentar", "http://www.bfr-abwasser.de");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("AnschlussType", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator AnschlussType(XElement xe) { return XTypedServices.ToXTypedElement<AnschlussType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static AnschlussType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(ObjektbezeichnungXName), new NamedContentModelEntity(KantentypXName), new NamedContentModelEntity(EntfernungXName), new NamedContentModelEntity(AnschlussArtXName), new NamedContentModelEntity(FixierungXName), new NamedContentModelEntity(KommentarXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Objektbezeichnung, Kantentyp, Entfernung?, AnschlussArt?, Fixierung?, Kommentar?)
        /// </para>
        /// </summary>
        public AnschlussType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (Objektbezeichnung, Kantentyp, Entfernung?, AnschlussArt?, Fixierung?, Kommentar?)
        /// </para>
        /// </summary>
        public virtual string Objektbezeichnung {
            get {
                XElement x = this.GetElement(ObjektbezeichnungXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(ObjektbezeichnungXName, value, "Objektbezeichnung", ObjektbezeichnungLocalType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (Objektbezeichnung, Kantentyp, Entfernung?, AnschlussArt?, Fixierung?, Kommentar?)
        /// </para>
        /// </summary>
        public virtual decimal Kantentyp {
            get {
                XElement x = this.GetElement(KantentypXName);
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                this.SetElementWithValidation(KantentypXName, value, "Kantentyp", global::www.bfr.abwasser.de.KantentypType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Objektbezeichnung, Kantentyp, Entfernung?, AnschlussArt?, Fixierung?, Kommentar?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? Entfernung {
            get {
                XElement x = this.GetElement(EntfernungXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(EntfernungXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                }
                else {
                    this.SetElementWithValidation(EntfernungXName, value, "Entfernung", EntfernungLocalType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Objektbezeichnung, Kantentyp, Entfernung?, AnschlussArt?, Fixierung?, Kommentar?)
        /// </para>
        /// </summary>
        public virtual string AnschlussArt {
            get {
                XElement x = this.GetElement(AnschlussArtXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(AnschlussArtXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                else {
                    this.SetElementWithValidation(AnschlussArtXName, value, "AnschlussArt", global::www.bfr.abwasser.de.AnschlussartType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Objektbezeichnung, Kantentyp, Entfernung?, AnschlussArt?, Fixierung?, Kommentar?)
        /// </para>
        /// </summary>
        public virtual string Fixierung {
            get {
                XElement x = this.GetElement(FixierungXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(FixierungXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                else {
                    this.SetElementWithValidation(FixierungXName, value, "Fixierung", FixierungLocalType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Objektbezeichnung, Kantentyp, Entfernung?, AnschlussArt?, Fixierung?, Kommentar?)
        /// </para>
        /// </summary>
        public virtual string Kommentar {
            get {
                XElement x = this.GetElement(KommentarXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
            set {
                this.SetElement(KommentarXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<AnschlussType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(ObjektbezeichnungXName, typeof(string));
            localElementDictionary.Add(KantentypXName, typeof(decimal));
            localElementDictionary.Add(EntfernungXName, typeof(decimal));
            localElementDictionary.Add(AnschlussArtXName, typeof(string));
            localElementDictionary.Add(FixierungXName, typeof(string));
            localElementDictionary.Add(KommentarXName, typeof(string));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        private class ObjektbezeichnungLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(4)), null, 0, 0, null, null, 30, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
            
            private ObjektbezeichnungLocalType() {
            }
        }
        
        private class EntfernungLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(3200)), null, 2, 0, 10000m, null, 0, null, null, 0, null, 6, XmlSchemaWhiteSpace.Collapse));
            
            private EntfernungLocalType() {
            }
        }
        
        private class FixierungLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(4)), null, 0, 0, null, null, 2, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
            
            private FixierungLocalType() {
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Index?, Station, (Timecode | Frame | Videozaehler | Parameter), InspektionsKode, Charakterisierung1?, Charakterisierung2?, Verbindung?, (Quantifizierung1Numerisch? | Quantifizierung1Text?)?, (Quantifizierung2Numerisch? | Quantifizierung2Text?)?, Streckenschaden?, StreckenschadenLfdNr?, PositionVon?, PositionBis?, GrundAbbruch?, BezeichnungSanierung?, (BAKZustandSanierung? | BALZustandSanierung?)?, QZustandSanierung?, RVerfahrenSanierung?, Fotodatei?, FotoSpeichermedium?, Fotonummer?, Kommentar?, Klassifizierung?, Gruppe?, BDBZustandLeitung?, BCAMaterial?, BDEZulaufDrainage?)
    /// </para>
    /// </summary>
    public partial class RZustandType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName IndexXName = System.Xml.Linq.XName.Get("Index", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName StationXName = System.Xml.Linq.XName.Get("Station", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TimecodeXName = System.Xml.Linq.XName.Get("Timecode", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName FrameXName = System.Xml.Linq.XName.Get("Frame", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName VideozaehlerXName = System.Xml.Linq.XName.Get("Videozaehler", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ParameterXName = System.Xml.Linq.XName.Get("Parameter", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName InspektionsKodeXName = System.Xml.Linq.XName.Get("InspektionsKode", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName Charakterisierung1XName = System.Xml.Linq.XName.Get("Charakterisierung1", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName Charakterisierung2XName = System.Xml.Linq.XName.Get("Charakterisierung2", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName VerbindungXName = System.Xml.Linq.XName.Get("Verbindung", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName Quantifizierung1NumerischXName = System.Xml.Linq.XName.Get("Quantifizierung1Numerisch", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName Quantifizierung1TextXName = System.Xml.Linq.XName.Get("Quantifizierung1Text", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName Quantifizierung2NumerischXName = System.Xml.Linq.XName.Get("Quantifizierung2Numerisch", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName Quantifizierung2TextXName = System.Xml.Linq.XName.Get("Quantifizierung2Text", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName StreckenschadenXName = System.Xml.Linq.XName.Get("Streckenschaden", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName StreckenschadenLfdNrXName = System.Xml.Linq.XName.Get("StreckenschadenLfdNr", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName PositionVonXName = System.Xml.Linq.XName.Get("PositionVon", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName PositionBisXName = System.Xml.Linq.XName.Get("PositionBis", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName GrundAbbruchXName = System.Xml.Linq.XName.Get("GrundAbbruch", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName BezeichnungSanierungXName = System.Xml.Linq.XName.Get("BezeichnungSanierung", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName BAKZustandSanierungXName = System.Xml.Linq.XName.Get("BAKZustandSanierung", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName BALZustandSanierungXName = System.Xml.Linq.XName.Get("BALZustandSanierung", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName QZustandSanierungXName = System.Xml.Linq.XName.Get("QZustandSanierung", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName RVerfahrenSanierungXName = System.Xml.Linq.XName.Get("RVerfahrenSanierung", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName FotodateiXName = System.Xml.Linq.XName.Get("Fotodatei", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName FotoSpeichermediumXName = System.Xml.Linq.XName.Get("FotoSpeichermedium", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName FotonummerXName = System.Xml.Linq.XName.Get("Fotonummer", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName KommentarXName = System.Xml.Linq.XName.Get("Kommentar", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName KlassifizierungXName = System.Xml.Linq.XName.Get("Klassifizierung", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName GruppeXName = System.Xml.Linq.XName.Get("Gruppe", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName BDBZustandLeitungXName = System.Xml.Linq.XName.Get("BDBZustandLeitung", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName BCAMaterialXName = System.Xml.Linq.XName.Get("BCAMaterial", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName BDEZulaufDrainageXName = System.Xml.Linq.XName.Get("BDEZulaufDrainage", "http://www.bfr-abwasser.de");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("RZustandType", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator RZustandType(XElement xe) { return XTypedServices.ToXTypedElement<RZustandType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static RZustandType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(IndexXName), new NamedContentModelEntity(StationXName), new ChoiceContentModelEntity(new NamedContentModelEntity(TimecodeXName), new NamedContentModelEntity(FrameXName), new NamedContentModelEntity(VideozaehlerXName), new NamedContentModelEntity(ParameterXName)), new NamedContentModelEntity(InspektionsKodeXName), new NamedContentModelEntity(Charakterisierung1XName), new NamedContentModelEntity(Charakterisierung2XName), new NamedContentModelEntity(VerbindungXName), new ChoiceContentModelEntity(new NamedContentModelEntity(Quantifizierung1NumerischXName), new NamedContentModelEntity(Quantifizierung1TextXName)), new ChoiceContentModelEntity(new NamedContentModelEntity(Quantifizierung2NumerischXName), new NamedContentModelEntity(Quantifizierung2TextXName)), new NamedContentModelEntity(StreckenschadenXName), new NamedContentModelEntity(StreckenschadenLfdNrXName), new NamedContentModelEntity(PositionVonXName), new NamedContentModelEntity(PositionBisXName), new NamedContentModelEntity(GrundAbbruchXName), new NamedContentModelEntity(BezeichnungSanierungXName), new ChoiceContentModelEntity(new NamedContentModelEntity(BAKZustandSanierungXName), new NamedContentModelEntity(BALZustandSanierungXName)), new NamedContentModelEntity(QZustandSanierungXName), new NamedContentModelEntity(RVerfahrenSanierungXName), new NamedContentModelEntity(FotodateiXName), new NamedContentModelEntity(FotoSpeichermediumXName), new NamedContentModelEntity(FotonummerXName), new NamedContentModelEntity(KommentarXName), new NamedContentModelEntity(KlassifizierungXName), new NamedContentModelEntity(GruppeXName), new NamedContentModelEntity(BDBZustandLeitungXName), new NamedContentModelEntity(BCAMaterialXName), new NamedContentModelEntity(BDEZulaufDrainageXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Index?, Station, (Timecode | Frame | Videozaehler | Parameter), InspektionsKode, Charakterisierung1?, Charakterisierung2?, Verbindung?, (Quantifizierung1Numerisch? | Quantifizierung1Text?)?, (Quantifizierung2Numerisch? | Quantifizierung2Text?)?, Streckenschaden?, StreckenschadenLfdNr?, PositionVon?, PositionBis?, GrundAbbruch?, BezeichnungSanierung?, (BAKZustandSanierung? | BALZustandSanierung?)?, QZustandSanierung?, RVerfahrenSanierung?, Fotodatei?, FotoSpeichermedium?, Fotonummer?, Kommentar?, Klassifizierung?, Gruppe?, BDBZustandLeitung?, BCAMaterial?, BDEZulaufDrainage?)
        /// </para>
        /// </summary>
        public RZustandType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Index?, Station, (Timecode | Frame | Videozaehler | Parameter), InspektionsKode, Charakterisierung1?, Charakterisierung2?, Verbindung?, (Quantifizierung1Numerisch? | Quantifizierung1Text?)?, (Quantifizierung2Numerisch? | Quantifizierung2Text?)?, Streckenschaden?, StreckenschadenLfdNr?, PositionVon?, PositionBis?, GrundAbbruch?, BezeichnungSanierung?, (BAKZustandSanierung? | BALZustandSanierung?)?, QZustandSanierung?, RVerfahrenSanierung?, Fotodatei?, FotoSpeichermedium?, Fotonummer?, Kommentar?, Klassifizierung?, Gruppe?, BDBZustandLeitung?, BCAMaterial?, BDEZulaufDrainage?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? Index {
            get {
                XElement x = this.GetElement(IndexXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(IndexXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                }
                else {
                    this.SetElementWithValidation(IndexXName, value, "Index", IndexLocalType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (Index?, Station, (Timecode | Frame | Videozaehler | Parameter), InspektionsKode, Charakterisierung1?, Charakterisierung2?, Verbindung?, (Quantifizierung1Numerisch? | Quantifizierung1Text?)?, (Quantifizierung2Numerisch? | Quantifizierung2Text?)?, Streckenschaden?, StreckenschadenLfdNr?, PositionVon?, PositionBis?, GrundAbbruch?, BezeichnungSanierung?, (BAKZustandSanierung? | BALZustandSanierung?)?, QZustandSanierung?, RVerfahrenSanierung?, Fotodatei?, FotoSpeichermedium?, Fotonummer?, Kommentar?, Klassifizierung?, Gruppe?, BDBZustandLeitung?, BCAMaterial?, BDEZulaufDrainage?)
        /// </para>
        /// </summary>
        public virtual decimal Station {
            get {
                XElement x = this.GetElement(StationXName);
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
            set {
                this.SetElementWithValidation(StationXName, value, "Station", StationLocalType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (Index?, Station, (Timecode | Frame | Videozaehler | Parameter), InspektionsKode, Charakterisierung1?, Charakterisierung2?, Verbindung?, (Quantifizierung1Numerisch? | Quantifizierung1Text?)?, (Quantifizierung2Numerisch? | Quantifizierung2Text?)?, Streckenschaden?, StreckenschadenLfdNr?, PositionVon?, PositionBis?, GrundAbbruch?, BezeichnungSanierung?, (BAKZustandSanierung? | BALZustandSanierung?)?, QZustandSanierung?, RVerfahrenSanierung?, Fotodatei?, FotoSpeichermedium?, Fotonummer?, Kommentar?, Klassifizierung?, Gruppe?, BDBZustandLeitung?, BCAMaterial?, BDEZulaufDrainage?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? Timecode {
            get {
                XElement x = this.GetElement(TimecodeXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(TimecodeXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                }
                else {
                    this.SetElementWithValidation(TimecodeXName, value, "Timecode", TimecodeLocalType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (Index?, Station, (Timecode | Frame | Videozaehler | Parameter), InspektionsKode, Charakterisierung1?, Charakterisierung2?, Verbindung?, (Quantifizierung1Numerisch? | Quantifizierung1Text?)?, (Quantifizierung2Numerisch? | Quantifizierung2Text?)?, Streckenschaden?, StreckenschadenLfdNr?, PositionVon?, PositionBis?, GrundAbbruch?, BezeichnungSanierung?, (BAKZustandSanierung? | BALZustandSanierung?)?, QZustandSanierung?, RVerfahrenSanierung?, Fotodatei?, FotoSpeichermedium?, Fotonummer?, Kommentar?, Klassifizierung?, Gruppe?, BDBZustandLeitung?, BCAMaterial?, BDEZulaufDrainage?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? Frame {
            get {
                XElement x = this.GetElement(FrameXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(FrameXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                }
                else {
                    this.SetElementWithValidation(FrameXName, value, "Frame", FrameLocalType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (Index?, Station, (Timecode | Frame | Videozaehler | Parameter), InspektionsKode, Charakterisierung1?, Charakterisierung2?, Verbindung?, (Quantifizierung1Numerisch? | Quantifizierung1Text?)?, (Quantifizierung2Numerisch? | Quantifizierung2Text?)?, Streckenschaden?, StreckenschadenLfdNr?, PositionVon?, PositionBis?, GrundAbbruch?, BezeichnungSanierung?, (BAKZustandSanierung? | BALZustandSanierung?)?, QZustandSanierung?, RVerfahrenSanierung?, Fotodatei?, FotoSpeichermedium?, Fotonummer?, Kommentar?, Klassifizierung?, Gruppe?, BDBZustandLeitung?, BCAMaterial?, BDEZulaufDrainage?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? Videozaehler {
            get {
                XElement x = this.GetElement(VideozaehlerXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(VideozaehlerXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                }
                else {
                    this.SetElementWithValidation(VideozaehlerXName, value, "Videozaehler", VideozaehlerLocalType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (Index?, Station, (Timecode | Frame | Videozaehler | Parameter), InspektionsKode, Charakterisierung1?, Charakterisierung2?, Verbindung?, (Quantifizierung1Numerisch? | Quantifizierung1Text?)?, (Quantifizierung2Numerisch? | Quantifizierung2Text?)?, Streckenschaden?, StreckenschadenLfdNr?, PositionVon?, PositionBis?, GrundAbbruch?, BezeichnungSanierung?, (BAKZustandSanierung? | BALZustandSanierung?)?, QZustandSanierung?, RVerfahrenSanierung?, Fotodatei?, FotoSpeichermedium?, Fotonummer?, Kommentar?, Klassifizierung?, Gruppe?, BDBZustandLeitung?, BCAMaterial?, BDEZulaufDrainage?)
        /// </para>
        /// </summary>
        public virtual string Parameter {
            get {
                XElement x = this.GetElement(ParameterXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(ParameterXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                else {
                    this.SetElementWithValidation(ParameterXName, value, "Parameter", ParameterLocalType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (Index?, Station, (Timecode | Frame | Videozaehler | Parameter), InspektionsKode, Charakterisierung1?, Charakterisierung2?, Verbindung?, (Quantifizierung1Numerisch? | Quantifizierung1Text?)?, (Quantifizierung2Numerisch? | Quantifizierung2Text?)?, Streckenschaden?, StreckenschadenLfdNr?, PositionVon?, PositionBis?, GrundAbbruch?, BezeichnungSanierung?, (BAKZustandSanierung? | BALZustandSanierung?)?, QZustandSanierung?, RVerfahrenSanierung?, Fotodatei?, FotoSpeichermedium?, Fotonummer?, Kommentar?, Klassifizierung?, Gruppe?, BDBZustandLeitung?, BCAMaterial?, BDEZulaufDrainage?)
        /// </para>
        /// </summary>
        public virtual string InspektionsKode {
            get {
                XElement x = this.GetElement(InspektionsKodeXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(InspektionsKodeXName, value, "InspektionsKode", InspektionsKodeLocalType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Index?, Station, (Timecode | Frame | Videozaehler | Parameter), InspektionsKode, Charakterisierung1?, Charakterisierung2?, Verbindung?, (Quantifizierung1Numerisch? | Quantifizierung1Text?)?, (Quantifizierung2Numerisch? | Quantifizierung2Text?)?, Streckenschaden?, StreckenschadenLfdNr?, PositionVon?, PositionBis?, GrundAbbruch?, BezeichnungSanierung?, (BAKZustandSanierung? | BALZustandSanierung?)?, QZustandSanierung?, RVerfahrenSanierung?, Fotodatei?, FotoSpeichermedium?, Fotonummer?, Kommentar?, Klassifizierung?, Gruppe?, BDBZustandLeitung?, BCAMaterial?, BDEZulaufDrainage?)
        /// </para>
        /// </summary>
        public virtual string Charakterisierung1 {
            get {
                XElement x = this.GetElement(Charakterisierung1XName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(Charakterisierung1XName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                else {
                    this.SetElementWithValidation(Charakterisierung1XName, value, "Charakterisierung1", Charakterisierung1LocalType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Index?, Station, (Timecode | Frame | Videozaehler | Parameter), InspektionsKode, Charakterisierung1?, Charakterisierung2?, Verbindung?, (Quantifizierung1Numerisch? | Quantifizierung1Text?)?, (Quantifizierung2Numerisch? | Quantifizierung2Text?)?, Streckenschaden?, StreckenschadenLfdNr?, PositionVon?, PositionBis?, GrundAbbruch?, BezeichnungSanierung?, (BAKZustandSanierung? | BALZustandSanierung?)?, QZustandSanierung?, RVerfahrenSanierung?, Fotodatei?, FotoSpeichermedium?, Fotonummer?, Kommentar?, Klassifizierung?, Gruppe?, BDBZustandLeitung?, BCAMaterial?, BDEZulaufDrainage?)
        /// </para>
        /// </summary>
        public virtual string Charakterisierung2 {
            get {
                XElement x = this.GetElement(Charakterisierung2XName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(Charakterisierung2XName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                else {
                    this.SetElementWithValidation(Charakterisierung2XName, value, "Charakterisierung2", Charakterisierung2LocalType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Index?, Station, (Timecode | Frame | Videozaehler | Parameter), InspektionsKode, Charakterisierung1?, Charakterisierung2?, Verbindung?, (Quantifizierung1Numerisch? | Quantifizierung1Text?)?, (Quantifizierung2Numerisch? | Quantifizierung2Text?)?, Streckenschaden?, StreckenschadenLfdNr?, PositionVon?, PositionBis?, GrundAbbruch?, BezeichnungSanierung?, (BAKZustandSanierung? | BALZustandSanierung?)?, QZustandSanierung?, RVerfahrenSanierung?, Fotodatei?, FotoSpeichermedium?, Fotonummer?, Kommentar?, Klassifizierung?, Gruppe?, BDBZustandLeitung?, BCAMaterial?, BDEZulaufDrainage?)
        /// </para>
        /// </summary>
        public virtual System.Boolean? Verbindung {
            get {
                XElement x = this.GetElement(VerbindungXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
            set {
                this.SetElement(VerbindungXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (Index?, Station, (Timecode | Frame | Videozaehler | Parameter), InspektionsKode, Charakterisierung1?, Charakterisierung2?, Verbindung?, (Quantifizierung1Numerisch? | Quantifizierung1Text?)?, (Quantifizierung2Numerisch? | Quantifizierung2Text?)?, Streckenschaden?, StreckenschadenLfdNr?, PositionVon?, PositionBis?, GrundAbbruch?, BezeichnungSanierung?, (BAKZustandSanierung? | BALZustandSanierung?)?, QZustandSanierung?, RVerfahrenSanierung?, Fotodatei?, FotoSpeichermedium?, Fotonummer?, Kommentar?, Klassifizierung?, Gruppe?, BDBZustandLeitung?, BCAMaterial?, BDEZulaufDrainage?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? Quantifizierung1Numerisch {
            get {
                XElement x = this.GetElement(Quantifizierung1NumerischXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(Quantifizierung1NumerischXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                }
                else {
                    this.SetElementWithValidation(Quantifizierung1NumerischXName, value, "Quantifizierung1Numerisch", Quantifizierung1NumerischLocalType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (Index?, Station, (Timecode | Frame | Videozaehler | Parameter), InspektionsKode, Charakterisierung1?, Charakterisierung2?, Verbindung?, (Quantifizierung1Numerisch? | Quantifizierung1Text?)?, (Quantifizierung2Numerisch? | Quantifizierung2Text?)?, Streckenschaden?, StreckenschadenLfdNr?, PositionVon?, PositionBis?, GrundAbbruch?, BezeichnungSanierung?, (BAKZustandSanierung? | BALZustandSanierung?)?, QZustandSanierung?, RVerfahrenSanierung?, Fotodatei?, FotoSpeichermedium?, Fotonummer?, Kommentar?, Klassifizierung?, Gruppe?, BDBZustandLeitung?, BCAMaterial?, BDEZulaufDrainage?)
        /// </para>
        /// </summary>
        public virtual string Quantifizierung1Text {
            get {
                XElement x = this.GetElement(Quantifizierung1TextXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(Quantifizierung1TextXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                else {
                    this.SetElementWithValidation(Quantifizierung1TextXName, value, "Quantifizierung1Text", Quantifizierung1TextLocalType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (Index?, Station, (Timecode | Frame | Videozaehler | Parameter), InspektionsKode, Charakterisierung1?, Charakterisierung2?, Verbindung?, (Quantifizierung1Numerisch? | Quantifizierung1Text?)?, (Quantifizierung2Numerisch? | Quantifizierung2Text?)?, Streckenschaden?, StreckenschadenLfdNr?, PositionVon?, PositionBis?, GrundAbbruch?, BezeichnungSanierung?, (BAKZustandSanierung? | BALZustandSanierung?)?, QZustandSanierung?, RVerfahrenSanierung?, Fotodatei?, FotoSpeichermedium?, Fotonummer?, Kommentar?, Klassifizierung?, Gruppe?, BDBZustandLeitung?, BCAMaterial?, BDEZulaufDrainage?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? Quantifizierung2Numerisch {
            get {
                XElement x = this.GetElement(Quantifizierung2NumerischXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(Quantifizierung2NumerischXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                }
                else {
                    this.SetElementWithValidation(Quantifizierung2NumerischXName, value, "Quantifizierung2Numerisch", Quantifizierung2NumerischLocalType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (Index?, Station, (Timecode | Frame | Videozaehler | Parameter), InspektionsKode, Charakterisierung1?, Charakterisierung2?, Verbindung?, (Quantifizierung1Numerisch? | Quantifizierung1Text?)?, (Quantifizierung2Numerisch? | Quantifizierung2Text?)?, Streckenschaden?, StreckenschadenLfdNr?, PositionVon?, PositionBis?, GrundAbbruch?, BezeichnungSanierung?, (BAKZustandSanierung? | BALZustandSanierung?)?, QZustandSanierung?, RVerfahrenSanierung?, Fotodatei?, FotoSpeichermedium?, Fotonummer?, Kommentar?, Klassifizierung?, Gruppe?, BDBZustandLeitung?, BCAMaterial?, BDEZulaufDrainage?)
        /// </para>
        /// </summary>
        public virtual string Quantifizierung2Text {
            get {
                XElement x = this.GetElement(Quantifizierung2TextXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(Quantifizierung2TextXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                else {
                    this.SetElementWithValidation(Quantifizierung2TextXName, value, "Quantifizierung2Text", Quantifizierung2TextLocalType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Index?, Station, (Timecode | Frame | Videozaehler | Parameter), InspektionsKode, Charakterisierung1?, Charakterisierung2?, Verbindung?, (Quantifizierung1Numerisch? | Quantifizierung1Text?)?, (Quantifizierung2Numerisch? | Quantifizierung2Text?)?, Streckenschaden?, StreckenschadenLfdNr?, PositionVon?, PositionBis?, GrundAbbruch?, BezeichnungSanierung?, (BAKZustandSanierung? | BALZustandSanierung?)?, QZustandSanierung?, RVerfahrenSanierung?, Fotodatei?, FotoSpeichermedium?, Fotonummer?, Kommentar?, Klassifizierung?, Gruppe?, BDBZustandLeitung?, BCAMaterial?, BDEZulaufDrainage?)
        /// </para>
        /// </summary>
        public virtual string Streckenschaden {
            get {
                XElement x = this.GetElement(StreckenschadenXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(StreckenschadenXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                else {
                    this.SetElementWithValidation(StreckenschadenXName, value, "Streckenschaden", global::www.bfr.abwasser.de.StreckenschadenType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Index?, Station, (Timecode | Frame | Videozaehler | Parameter), InspektionsKode, Charakterisierung1?, Charakterisierung2?, Verbindung?, (Quantifizierung1Numerisch? | Quantifizierung1Text?)?, (Quantifizierung2Numerisch? | Quantifizierung2Text?)?, Streckenschaden?, StreckenschadenLfdNr?, PositionVon?, PositionBis?, GrundAbbruch?, BezeichnungSanierung?, (BAKZustandSanierung? | BALZustandSanierung?)?, QZustandSanierung?, RVerfahrenSanierung?, Fotodatei?, FotoSpeichermedium?, Fotonummer?, Kommentar?, Klassifizierung?, Gruppe?, BDBZustandLeitung?, BCAMaterial?, BDEZulaufDrainage?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? StreckenschadenLfdNr {
            get {
                XElement x = this.GetElement(StreckenschadenLfdNrXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(StreckenschadenLfdNrXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                }
                else {
                    this.SetElementWithValidation(StreckenschadenLfdNrXName, value, "StreckenschadenLfdNr", StreckenschadenLfdNrLocalType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Index?, Station, (Timecode | Frame | Videozaehler | Parameter), InspektionsKode, Charakterisierung1?, Charakterisierung2?, Verbindung?, (Quantifizierung1Numerisch? | Quantifizierung1Text?)?, (Quantifizierung2Numerisch? | Quantifizierung2Text?)?, Streckenschaden?, StreckenschadenLfdNr?, PositionVon?, PositionBis?, GrundAbbruch?, BezeichnungSanierung?, (BAKZustandSanierung? | BALZustandSanierung?)?, QZustandSanierung?, RVerfahrenSanierung?, Fotodatei?, FotoSpeichermedium?, Fotonummer?, Kommentar?, Klassifizierung?, Gruppe?, BDBZustandLeitung?, BCAMaterial?, BDEZulaufDrainage?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? PositionVon {
            get {
                XElement x = this.GetElement(PositionVonXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(PositionVonXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                }
                else {
                    this.SetElementWithValidation(PositionVonXName, value, "PositionVon", PositionVonLocalType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Index?, Station, (Timecode | Frame | Videozaehler | Parameter), InspektionsKode, Charakterisierung1?, Charakterisierung2?, Verbindung?, (Quantifizierung1Numerisch? | Quantifizierung1Text?)?, (Quantifizierung2Numerisch? | Quantifizierung2Text?)?, Streckenschaden?, StreckenschadenLfdNr?, PositionVon?, PositionBis?, GrundAbbruch?, BezeichnungSanierung?, (BAKZustandSanierung? | BALZustandSanierung?)?, QZustandSanierung?, RVerfahrenSanierung?, Fotodatei?, FotoSpeichermedium?, Fotonummer?, Kommentar?, Klassifizierung?, Gruppe?, BDBZustandLeitung?, BCAMaterial?, BDEZulaufDrainage?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? PositionBis {
            get {
                XElement x = this.GetElement(PositionBisXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(PositionBisXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                }
                else {
                    this.SetElementWithValidation(PositionBisXName, value, "PositionBis", PositionBisLocalType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Index?, Station, (Timecode | Frame | Videozaehler | Parameter), InspektionsKode, Charakterisierung1?, Charakterisierung2?, Verbindung?, (Quantifizierung1Numerisch? | Quantifizierung1Text?)?, (Quantifizierung2Numerisch? | Quantifizierung2Text?)?, Streckenschaden?, StreckenschadenLfdNr?, PositionVon?, PositionBis?, GrundAbbruch?, BezeichnungSanierung?, (BAKZustandSanierung? | BALZustandSanierung?)?, QZustandSanierung?, RVerfahrenSanierung?, Fotodatei?, FotoSpeichermedium?, Fotonummer?, Kommentar?, Klassifizierung?, Gruppe?, BDBZustandLeitung?, BCAMaterial?, BDEZulaufDrainage?)
        /// </para>
        /// </summary>
        public virtual string GrundAbbruch {
            get {
                XElement x = this.GetElement(GrundAbbruchXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(GrundAbbruchXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                else {
                    this.SetElementWithValidation(GrundAbbruchXName, value, "GrundAbbruch", global::www.bfr.abwasser.de.GrundAbbruchType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Index?, Station, (Timecode | Frame | Videozaehler | Parameter), InspektionsKode, Charakterisierung1?, Charakterisierung2?, Verbindung?, (Quantifizierung1Numerisch? | Quantifizierung1Text?)?, (Quantifizierung2Numerisch? | Quantifizierung2Text?)?, Streckenschaden?, StreckenschadenLfdNr?, PositionVon?, PositionBis?, GrundAbbruch?, BezeichnungSanierung?, (BAKZustandSanierung? | BALZustandSanierung?)?, QZustandSanierung?, RVerfahrenSanierung?, Fotodatei?, FotoSpeichermedium?, Fotonummer?, Kommentar?, Klassifizierung?, Gruppe?, BDBZustandLeitung?, BCAMaterial?, BDEZulaufDrainage?)
        /// </para>
        /// </summary>
        public virtual string BezeichnungSanierung {
            get {
                XElement x = this.GetElement(BezeichnungSanierungXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(BezeichnungSanierungXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                else {
                    this.SetElementWithValidation(BezeichnungSanierungXName, value, "BezeichnungSanierung", BezeichnungSanierungLocalType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (Index?, Station, (Timecode | Frame | Videozaehler | Parameter), InspektionsKode, Charakterisierung1?, Charakterisierung2?, Verbindung?, (Quantifizierung1Numerisch? | Quantifizierung1Text?)?, (Quantifizierung2Numerisch? | Quantifizierung2Text?)?, Streckenschaden?, StreckenschadenLfdNr?, PositionVon?, PositionBis?, GrundAbbruch?, BezeichnungSanierung?, (BAKZustandSanierung? | BALZustandSanierung?)?, QZustandSanierung?, RVerfahrenSanierung?, Fotodatei?, FotoSpeichermedium?, Fotonummer?, Kommentar?, Klassifizierung?, Gruppe?, BDBZustandLeitung?, BCAMaterial?, BDEZulaufDrainage?)
        /// </para>
        /// </summary>
        public virtual string BAKZustandSanierung {
            get {
                XElement x = this.GetElement(BAKZustandSanierungXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(BAKZustandSanierungXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                else {
                    this.SetElementWithValidation(BAKZustandSanierungXName, value, "BAKZustandSanierung", global::www.bfr.abwasser.de.BAKZustandSanierungType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (Index?, Station, (Timecode | Frame | Videozaehler | Parameter), InspektionsKode, Charakterisierung1?, Charakterisierung2?, Verbindung?, (Quantifizierung1Numerisch? | Quantifizierung1Text?)?, (Quantifizierung2Numerisch? | Quantifizierung2Text?)?, Streckenschaden?, StreckenschadenLfdNr?, PositionVon?, PositionBis?, GrundAbbruch?, BezeichnungSanierung?, (BAKZustandSanierung? | BALZustandSanierung?)?, QZustandSanierung?, RVerfahrenSanierung?, Fotodatei?, FotoSpeichermedium?, Fotonummer?, Kommentar?, Klassifizierung?, Gruppe?, BDBZustandLeitung?, BCAMaterial?, BDEZulaufDrainage?)
        /// </para>
        /// </summary>
        public virtual string BALZustandSanierung {
            get {
                XElement x = this.GetElement(BALZustandSanierungXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(BALZustandSanierungXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                else {
                    this.SetElementWithValidation(BALZustandSanierungXName, value, "BALZustandSanierung", global::www.bfr.abwasser.de.BALZustandSanierungType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Index?, Station, (Timecode | Frame | Videozaehler | Parameter), InspektionsKode, Charakterisierung1?, Charakterisierung2?, Verbindung?, (Quantifizierung1Numerisch? | Quantifizierung1Text?)?, (Quantifizierung2Numerisch? | Quantifizierung2Text?)?, Streckenschaden?, StreckenschadenLfdNr?, PositionVon?, PositionBis?, GrundAbbruch?, BezeichnungSanierung?, (BAKZustandSanierung? | BALZustandSanierung?)?, QZustandSanierung?, RVerfahrenSanierung?, Fotodatei?, FotoSpeichermedium?, Fotonummer?, Kommentar?, Klassifizierung?, Gruppe?, BDBZustandLeitung?, BCAMaterial?, BDEZulaufDrainage?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? QZustandSanierung {
            get {
                XElement x = this.GetElement(QZustandSanierungXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(QZustandSanierungXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                }
                else {
                    this.SetElementWithValidation(QZustandSanierungXName, value, "QZustandSanierung", QZustandSanierungLocalType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Index?, Station, (Timecode | Frame | Videozaehler | Parameter), InspektionsKode, Charakterisierung1?, Charakterisierung2?, Verbindung?, (Quantifizierung1Numerisch? | Quantifizierung1Text?)?, (Quantifizierung2Numerisch? | Quantifizierung2Text?)?, Streckenschaden?, StreckenschadenLfdNr?, PositionVon?, PositionBis?, GrundAbbruch?, BezeichnungSanierung?, (BAKZustandSanierung? | BALZustandSanierung?)?, QZustandSanierung?, RVerfahrenSanierung?, Fotodatei?, FotoSpeichermedium?, Fotonummer?, Kommentar?, Klassifizierung?, Gruppe?, BDBZustandLeitung?, BCAMaterial?, BDEZulaufDrainage?)
        /// </para>
        /// </summary>
        public virtual string RVerfahrenSanierung {
            get {
                XElement x = this.GetElement(RVerfahrenSanierungXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(RVerfahrenSanierungXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                else {
                    this.SetElementWithValidation(RVerfahrenSanierungXName, value, "RVerfahrenSanierung", global::www.bfr.abwasser.de.RVerfahrenSanierungType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Index?, Station, (Timecode | Frame | Videozaehler | Parameter), InspektionsKode, Charakterisierung1?, Charakterisierung2?, Verbindung?, (Quantifizierung1Numerisch? | Quantifizierung1Text?)?, (Quantifizierung2Numerisch? | Quantifizierung2Text?)?, Streckenschaden?, StreckenschadenLfdNr?, PositionVon?, PositionBis?, GrundAbbruch?, BezeichnungSanierung?, (BAKZustandSanierung? | BALZustandSanierung?)?, QZustandSanierung?, RVerfahrenSanierung?, Fotodatei?, FotoSpeichermedium?, Fotonummer?, Kommentar?, Klassifizierung?, Gruppe?, BDBZustandLeitung?, BCAMaterial?, BDEZulaufDrainage?)
        /// </para>
        /// </summary>
        public virtual string Fotodatei {
            get {
                XElement x = this.GetElement(FotodateiXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(FotodateiXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                else {
                    this.SetElementWithValidation(FotodateiXName, value, "Fotodatei", FotodateiLocalType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Index?, Station, (Timecode | Frame | Videozaehler | Parameter), InspektionsKode, Charakterisierung1?, Charakterisierung2?, Verbindung?, (Quantifizierung1Numerisch? | Quantifizierung1Text?)?, (Quantifizierung2Numerisch? | Quantifizierung2Text?)?, Streckenschaden?, StreckenschadenLfdNr?, PositionVon?, PositionBis?, GrundAbbruch?, BezeichnungSanierung?, (BAKZustandSanierung? | BALZustandSanierung?)?, QZustandSanierung?, RVerfahrenSanierung?, Fotodatei?, FotoSpeichermedium?, Fotonummer?, Kommentar?, Klassifizierung?, Gruppe?, BDBZustandLeitung?, BCAMaterial?, BDEZulaufDrainage?)
        /// </para>
        /// </summary>
        public virtual string FotoSpeichermedium {
            get {
                XElement x = this.GetElement(FotoSpeichermediumXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(FotoSpeichermediumXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                else {
                    this.SetElementWithValidation(FotoSpeichermediumXName, value, "FotoSpeichermedium", global::www.bfr.abwasser.de.FotoSpeichermediumType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Index?, Station, (Timecode | Frame | Videozaehler | Parameter), InspektionsKode, Charakterisierung1?, Charakterisierung2?, Verbindung?, (Quantifizierung1Numerisch? | Quantifizierung1Text?)?, (Quantifizierung2Numerisch? | Quantifizierung2Text?)?, Streckenschaden?, StreckenschadenLfdNr?, PositionVon?, PositionBis?, GrundAbbruch?, BezeichnungSanierung?, (BAKZustandSanierung? | BALZustandSanierung?)?, QZustandSanierung?, RVerfahrenSanierung?, Fotodatei?, FotoSpeichermedium?, Fotonummer?, Kommentar?, Klassifizierung?, Gruppe?, BDBZustandLeitung?, BCAMaterial?, BDEZulaufDrainage?)
        /// </para>
        /// </summary>
        public virtual string Fotonummer {
            get {
                XElement x = this.GetElement(FotonummerXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(FotonummerXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                else {
                    this.SetElementWithValidation(FotonummerXName, value, "Fotonummer", FotonummerLocalType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Index?, Station, (Timecode | Frame | Videozaehler | Parameter), InspektionsKode, Charakterisierung1?, Charakterisierung2?, Verbindung?, (Quantifizierung1Numerisch? | Quantifizierung1Text?)?, (Quantifizierung2Numerisch? | Quantifizierung2Text?)?, Streckenschaden?, StreckenschadenLfdNr?, PositionVon?, PositionBis?, GrundAbbruch?, BezeichnungSanierung?, (BAKZustandSanierung? | BALZustandSanierung?)?, QZustandSanierung?, RVerfahrenSanierung?, Fotodatei?, FotoSpeichermedium?, Fotonummer?, Kommentar?, Klassifizierung?, Gruppe?, BDBZustandLeitung?, BCAMaterial?, BDEZulaufDrainage?)
        /// </para>
        /// </summary>
        public virtual string Kommentar {
            get {
                XElement x = this.GetElement(KommentarXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
            set {
                this.SetElement(KommentarXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Index?, Station, (Timecode | Frame | Videozaehler | Parameter), InspektionsKode, Charakterisierung1?, Charakterisierung2?, Verbindung?, (Quantifizierung1Numerisch? | Quantifizierung1Text?)?, (Quantifizierung2Numerisch? | Quantifizierung2Text?)?, Streckenschaden?, StreckenschadenLfdNr?, PositionVon?, PositionBis?, GrundAbbruch?, BezeichnungSanierung?, (BAKZustandSanierung? | BALZustandSanierung?)?, QZustandSanierung?, RVerfahrenSanierung?, Fotodatei?, FotoSpeichermedium?, Fotonummer?, Kommentar?, Klassifizierung?, Gruppe?, BDBZustandLeitung?, BCAMaterial?, BDEZulaufDrainage?)
        /// </para>
        /// </summary>
        public virtual KlassifizierungType Klassifizierung {
            get {
                XElement x = this.GetElement(KlassifizierungXName);
                return ((KlassifizierungType)(x));
            }
            set {
                this.SetElement(KlassifizierungXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Index?, Station, (Timecode | Frame | Videozaehler | Parameter), InspektionsKode, Charakterisierung1?, Charakterisierung2?, Verbindung?, (Quantifizierung1Numerisch? | Quantifizierung1Text?)?, (Quantifizierung2Numerisch? | Quantifizierung2Text?)?, Streckenschaden?, StreckenschadenLfdNr?, PositionVon?, PositionBis?, GrundAbbruch?, BezeichnungSanierung?, (BAKZustandSanierung? | BALZustandSanierung?)?, QZustandSanierung?, RVerfahrenSanierung?, Fotodatei?, FotoSpeichermedium?, Fotonummer?, Kommentar?, Klassifizierung?, Gruppe?, BDBZustandLeitung?, BCAMaterial?, BDEZulaufDrainage?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? Gruppe {
            get {
                XElement x = this.GetElement(GruppeXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(GruppeXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                }
                else {
                    this.SetElementWithValidation(GruppeXName, value, "Gruppe", GruppeLocalType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Index?, Station, (Timecode | Frame | Videozaehler | Parameter), InspektionsKode, Charakterisierung1?, Charakterisierung2?, Verbindung?, (Quantifizierung1Numerisch? | Quantifizierung1Text?)?, (Quantifizierung2Numerisch? | Quantifizierung2Text?)?, Streckenschaden?, StreckenschadenLfdNr?, PositionVon?, PositionBis?, GrundAbbruch?, BezeichnungSanierung?, (BAKZustandSanierung? | BALZustandSanierung?)?, QZustandSanierung?, RVerfahrenSanierung?, Fotodatei?, FotoSpeichermedium?, Fotonummer?, Kommentar?, Klassifizierung?, Gruppe?, BDBZustandLeitung?, BCAMaterial?, BDEZulaufDrainage?)
        /// </para>
        /// </summary>
        public virtual string BDBZustandLeitung {
            get {
                XElement x = this.GetElement(BDBZustandLeitungXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(BDBZustandLeitungXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                else {
                    this.SetElementWithValidation(BDBZustandLeitungXName, value, "BDBZustandLeitung", global::www.bfr.abwasser.de.BDBZustandLeitungType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Index?, Station, (Timecode | Frame | Videozaehler | Parameter), InspektionsKode, Charakterisierung1?, Charakterisierung2?, Verbindung?, (Quantifizierung1Numerisch? | Quantifizierung1Text?)?, (Quantifizierung2Numerisch? | Quantifizierung2Text?)?, Streckenschaden?, StreckenschadenLfdNr?, PositionVon?, PositionBis?, GrundAbbruch?, BezeichnungSanierung?, (BAKZustandSanierung? | BALZustandSanierung?)?, QZustandSanierung?, RVerfahrenSanierung?, Fotodatei?, FotoSpeichermedium?, Fotonummer?, Kommentar?, Klassifizierung?, Gruppe?, BDBZustandLeitung?, BCAMaterial?, BDEZulaufDrainage?)
        /// </para>
        /// </summary>
        public virtual string BCAMaterial {
            get {
                XElement x = this.GetElement(BCAMaterialXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(BCAMaterialXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                else {
                    this.SetElementWithValidation(BCAMaterialXName, value, "BCAMaterial", global::www.bfr.abwasser.de.MaterialType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Index?, Station, (Timecode | Frame | Videozaehler | Parameter), InspektionsKode, Charakterisierung1?, Charakterisierung2?, Verbindung?, (Quantifizierung1Numerisch? | Quantifizierung1Text?)?, (Quantifizierung2Numerisch? | Quantifizierung2Text?)?, Streckenschaden?, StreckenschadenLfdNr?, PositionVon?, PositionBis?, GrundAbbruch?, BezeichnungSanierung?, (BAKZustandSanierung? | BALZustandSanierung?)?, QZustandSanierung?, RVerfahrenSanierung?, Fotodatei?, FotoSpeichermedium?, Fotonummer?, Kommentar?, Klassifizierung?, Gruppe?, BDBZustandLeitung?, BCAMaterial?, BDEZulaufDrainage?)
        /// </para>
        /// </summary>
        public virtual System.Boolean? BDEZulaufDrainage {
            get {
                XElement x = this.GetElement(BDEZulaufDrainageXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
            set {
                this.SetElement(BDEZulaufDrainageXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<RZustandType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(IndexXName, typeof(decimal));
            localElementDictionary.Add(StationXName, typeof(decimal));
            localElementDictionary.Add(TimecodeXName, typeof(decimal));
            localElementDictionary.Add(FrameXName, typeof(decimal));
            localElementDictionary.Add(VideozaehlerXName, typeof(decimal));
            localElementDictionary.Add(ParameterXName, typeof(string));
            localElementDictionary.Add(InspektionsKodeXName, typeof(string));
            localElementDictionary.Add(Charakterisierung1XName, typeof(string));
            localElementDictionary.Add(Charakterisierung2XName, typeof(string));
            localElementDictionary.Add(VerbindungXName, typeof(bool));
            localElementDictionary.Add(Quantifizierung1NumerischXName, typeof(decimal));
            localElementDictionary.Add(Quantifizierung1TextXName, typeof(string));
            localElementDictionary.Add(Quantifizierung2NumerischXName, typeof(decimal));
            localElementDictionary.Add(Quantifizierung2TextXName, typeof(string));
            localElementDictionary.Add(StreckenschadenXName, typeof(string));
            localElementDictionary.Add(StreckenschadenLfdNrXName, typeof(decimal));
            localElementDictionary.Add(PositionVonXName, typeof(decimal));
            localElementDictionary.Add(PositionBisXName, typeof(decimal));
            localElementDictionary.Add(GrundAbbruchXName, typeof(string));
            localElementDictionary.Add(BezeichnungSanierungXName, typeof(string));
            localElementDictionary.Add(BAKZustandSanierungXName, typeof(string));
            localElementDictionary.Add(BALZustandSanierungXName, typeof(string));
            localElementDictionary.Add(QZustandSanierungXName, typeof(decimal));
            localElementDictionary.Add(RVerfahrenSanierungXName, typeof(string));
            localElementDictionary.Add(FotodateiXName, typeof(string));
            localElementDictionary.Add(FotoSpeichermediumXName, typeof(string));
            localElementDictionary.Add(FotonummerXName, typeof(string));
            localElementDictionary.Add(KommentarXName, typeof(string));
            localElementDictionary.Add(KlassifizierungXName, typeof(KlassifizierungType));
            localElementDictionary.Add(GruppeXName, typeof(decimal));
            localElementDictionary.Add(BDBZustandLeitungXName, typeof(string));
            localElementDictionary.Add(BCAMaterialXName, typeof(string));
            localElementDictionary.Add(BDEZulaufDrainageXName, typeof(bool));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        private class IndexLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(1024)), null, 0, 0, null, null, 0, null, null, 0, null, 2, XmlSchemaWhiteSpace.Collapse));
            
            private IndexLocalType() {
            }
        }
        
        private class StationLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(3200)), null, 2, 0, 1000m, null, 0, null, null, 0, null, 5, XmlSchemaWhiteSpace.Collapse));
            
            private StationLocalType() {
            }
        }
        
        private class TimecodeLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(1024)), null, 0, 0, null, null, 0, null, null, 0, null, 8, XmlSchemaWhiteSpace.Collapse));
            
            private TimecodeLocalType() {
            }
        }
        
        private class FrameLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(1024)), null, 0, 0, null, null, 0, null, null, 0, null, 10, XmlSchemaWhiteSpace.Collapse));
            
            private FrameLocalType() {
            }
        }
        
        private class VideozaehlerLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(1024)), null, 0, 0, null, null, 0, null, null, 0, null, 5, XmlSchemaWhiteSpace.Collapse));
            
            private VideozaehlerLocalType() {
            }
        }
        
        private class ParameterLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), null);
            
            private ParameterLocalType() {
            }
        }
        
        private class InspektionsKodeLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(4)), null, 0, 0, null, null, 10, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
            
            private InspektionsKodeLocalType() {
            }
        }
        
        private class Charakterisierung1LocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(4)), null, 0, 0, null, null, 10, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
            
            private Charakterisierung1LocalType() {
            }
        }
        
        private class Charakterisierung2LocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(4)), null, 0, 0, null, null, 10, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
            
            private Charakterisierung2LocalType() {
            }
        }
        
        private class Quantifizierung1NumerischLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(3200)), null, 2, 0, 10000m, null, 0, null, null, 0, null, 6, XmlSchemaWhiteSpace.Collapse));
            
            private Quantifizierung1NumerischLocalType() {
            }
        }
        
        private class Quantifizierung1TextLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(4)), null, 0, 0, null, null, 30, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
            
            private Quantifizierung1TextLocalType() {
            }
        }
        
        private class Quantifizierung2NumerischLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(3200)), null, 2, 0, 10000m, null, 0, null, null, 0, null, 6, XmlSchemaWhiteSpace.Collapse));
            
            private Quantifizierung2NumerischLocalType() {
            }
        }
        
        private class Quantifizierung2TextLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(4)), null, 0, 0, null, null, 30, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
            
            private Quantifizierung2TextLocalType() {
            }
        }
        
        private class StreckenschadenLfdNrLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(1344)), null, 0, 0, null, 99m, 0, null, 1m, 0, null, 2, XmlSchemaWhiteSpace.Collapse));
            
            private StreckenschadenLfdNrLocalType() {
            }
        }
        
        private class PositionVonLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(1024)), null, 0, 0, null, null, 0, null, null, 0, null, 2, XmlSchemaWhiteSpace.Collapse));
            
            private PositionVonLocalType() {
            }
        }
        
        private class PositionBisLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(1024)), null, 0, 0, null, null, 0, null, null, 0, null, 2, XmlSchemaWhiteSpace.Collapse));
            
            private PositionBisLocalType() {
            }
        }
        
        private class BezeichnungSanierungLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(4)), null, 0, 0, null, null, 5, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
            
            private BezeichnungSanierungLocalType() {
            }
        }
        
        private class QZustandSanierungLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(1024)), null, 0, 0, null, null, 0, null, null, 0, null, 4, XmlSchemaWhiteSpace.Collapse));
            
            private QZustandSanierungLocalType() {
            }
        }
        
        private class FotodateiLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(4)), null, 0, 0, null, null, 255, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
            
            private FotodateiLocalType() {
            }
        }
        
        private class FotonummerLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(4)), null, 0, 0, null, null, 20, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
            
            private FotonummerLocalType() {
            }
        }
        
        private class GruppeLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(1344)), null, 0, 0, null, 99m, 0, null, 1m, 0, null, 2, XmlSchemaWhiteSpace.Collapse));
            
            private GruppeLocalType() {
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Index?, VertikaleLage?, (Timecode? | Frame? | Videozaehler? | Parameter?)?, InspektionsKode, Charakterisierung1?, Charakterisierung2?, Verbindung?, (Quantifizierung1Numerisch? | Quantifizierung1Text?)?, (Quantifizierung2Numerisch? | Quantifizierung2Text?)?, Streckenschaden?, StreckenschadenLfdNr?, Schachtbereich?, PositionVon?, PositionBis?, BezeichnungSanierung?, (DAKZustandSanierung? | DALZustandSanierung?)?, QZustandSanierung?, KVerfahrenSanierung?, Fotodatei?, FotoSpeichermedium?, Fotonummer?, Kommentar?, Klassifizierung?, Gruppe?, DDEZulaufDrainage?)
    /// </para>
    /// </summary>
    public partial class KZustandType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName IndexXName = System.Xml.Linq.XName.Get("Index", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName VertikaleLageXName = System.Xml.Linq.XName.Get("VertikaleLage", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TimecodeXName = System.Xml.Linq.XName.Get("Timecode", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName FrameXName = System.Xml.Linq.XName.Get("Frame", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName VideozaehlerXName = System.Xml.Linq.XName.Get("Videozaehler", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ParameterXName = System.Xml.Linq.XName.Get("Parameter", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName InspektionsKodeXName = System.Xml.Linq.XName.Get("InspektionsKode", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName Charakterisierung1XName = System.Xml.Linq.XName.Get("Charakterisierung1", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName Charakterisierung2XName = System.Xml.Linq.XName.Get("Charakterisierung2", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName VerbindungXName = System.Xml.Linq.XName.Get("Verbindung", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName Quantifizierung1NumerischXName = System.Xml.Linq.XName.Get("Quantifizierung1Numerisch", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName Quantifizierung1TextXName = System.Xml.Linq.XName.Get("Quantifizierung1Text", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName Quantifizierung2NumerischXName = System.Xml.Linq.XName.Get("Quantifizierung2Numerisch", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName Quantifizierung2TextXName = System.Xml.Linq.XName.Get("Quantifizierung2Text", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName StreckenschadenXName = System.Xml.Linq.XName.Get("Streckenschaden", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName StreckenschadenLfdNrXName = System.Xml.Linq.XName.Get("StreckenschadenLfdNr", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName SchachtbereichXName = System.Xml.Linq.XName.Get("Schachtbereich", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName PositionVonXName = System.Xml.Linq.XName.Get("PositionVon", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName PositionBisXName = System.Xml.Linq.XName.Get("PositionBis", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName BezeichnungSanierungXName = System.Xml.Linq.XName.Get("BezeichnungSanierung", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName DAKZustandSanierungXName = System.Xml.Linq.XName.Get("DAKZustandSanierung", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName DALZustandSanierungXName = System.Xml.Linq.XName.Get("DALZustandSanierung", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName QZustandSanierungXName = System.Xml.Linq.XName.Get("QZustandSanierung", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName KVerfahrenSanierungXName = System.Xml.Linq.XName.Get("KVerfahrenSanierung", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName FotodateiXName = System.Xml.Linq.XName.Get("Fotodatei", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName FotoSpeichermediumXName = System.Xml.Linq.XName.Get("FotoSpeichermedium", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName FotonummerXName = System.Xml.Linq.XName.Get("Fotonummer", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName KommentarXName = System.Xml.Linq.XName.Get("Kommentar", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName KlassifizierungXName = System.Xml.Linq.XName.Get("Klassifizierung", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName GruppeXName = System.Xml.Linq.XName.Get("Gruppe", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName DDEZulaufDrainageXName = System.Xml.Linq.XName.Get("DDEZulaufDrainage", "http://www.bfr-abwasser.de");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("KZustandType", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator KZustandType(XElement xe) { return XTypedServices.ToXTypedElement<KZustandType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static KZustandType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(IndexXName), new NamedContentModelEntity(VertikaleLageXName), new ChoiceContentModelEntity(new NamedContentModelEntity(TimecodeXName), new NamedContentModelEntity(FrameXName), new NamedContentModelEntity(VideozaehlerXName), new NamedContentModelEntity(ParameterXName)), new NamedContentModelEntity(InspektionsKodeXName), new NamedContentModelEntity(Charakterisierung1XName), new NamedContentModelEntity(Charakterisierung2XName), new NamedContentModelEntity(VerbindungXName), new ChoiceContentModelEntity(new NamedContentModelEntity(Quantifizierung1NumerischXName), new NamedContentModelEntity(Quantifizierung1TextXName)), new ChoiceContentModelEntity(new NamedContentModelEntity(Quantifizierung2NumerischXName), new NamedContentModelEntity(Quantifizierung2TextXName)), new NamedContentModelEntity(StreckenschadenXName), new NamedContentModelEntity(StreckenschadenLfdNrXName), new NamedContentModelEntity(SchachtbereichXName), new NamedContentModelEntity(PositionVonXName), new NamedContentModelEntity(PositionBisXName), new NamedContentModelEntity(BezeichnungSanierungXName), new ChoiceContentModelEntity(new NamedContentModelEntity(DAKZustandSanierungXName), new NamedContentModelEntity(DALZustandSanierungXName)), new NamedContentModelEntity(QZustandSanierungXName), new NamedContentModelEntity(KVerfahrenSanierungXName), new NamedContentModelEntity(FotodateiXName), new NamedContentModelEntity(FotoSpeichermediumXName), new NamedContentModelEntity(FotonummerXName), new NamedContentModelEntity(KommentarXName), new NamedContentModelEntity(KlassifizierungXName), new NamedContentModelEntity(GruppeXName), new NamedContentModelEntity(DDEZulaufDrainageXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Index?, VertikaleLage?, (Timecode? | Frame? | Videozaehler? | Parameter?)?, InspektionsKode, Charakterisierung1?, Charakterisierung2?, Verbindung?, (Quantifizierung1Numerisch? | Quantifizierung1Text?)?, (Quantifizierung2Numerisch? | Quantifizierung2Text?)?, Streckenschaden?, StreckenschadenLfdNr?, Schachtbereich?, PositionVon?, PositionBis?, BezeichnungSanierung?, (DAKZustandSanierung? | DALZustandSanierung?)?, QZustandSanierung?, KVerfahrenSanierung?, Fotodatei?, FotoSpeichermedium?, Fotonummer?, Kommentar?, Klassifizierung?, Gruppe?, DDEZulaufDrainage?)
        /// </para>
        /// </summary>
        public KZustandType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Index?, VertikaleLage?, (Timecode? | Frame? | Videozaehler? | Parameter?)?, InspektionsKode, Charakterisierung1?, Charakterisierung2?, Verbindung?, (Quantifizierung1Numerisch? | Quantifizierung1Text?)?, (Quantifizierung2Numerisch? | Quantifizierung2Text?)?, Streckenschaden?, StreckenschadenLfdNr?, Schachtbereich?, PositionVon?, PositionBis?, BezeichnungSanierung?, (DAKZustandSanierung? | DALZustandSanierung?)?, QZustandSanierung?, KVerfahrenSanierung?, Fotodatei?, FotoSpeichermedium?, Fotonummer?, Kommentar?, Klassifizierung?, Gruppe?, DDEZulaufDrainage?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? Index {
            get {
                XElement x = this.GetElement(IndexXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(IndexXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                }
                else {
                    this.SetElementWithValidation(IndexXName, value, "Index", IndexLocalType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Index?, VertikaleLage?, (Timecode? | Frame? | Videozaehler? | Parameter?)?, InspektionsKode, Charakterisierung1?, Charakterisierung2?, Verbindung?, (Quantifizierung1Numerisch? | Quantifizierung1Text?)?, (Quantifizierung2Numerisch? | Quantifizierung2Text?)?, Streckenschaden?, StreckenschadenLfdNr?, Schachtbereich?, PositionVon?, PositionBis?, BezeichnungSanierung?, (DAKZustandSanierung? | DALZustandSanierung?)?, QZustandSanierung?, KVerfahrenSanierung?, Fotodatei?, FotoSpeichermedium?, Fotonummer?, Kommentar?, Klassifizierung?, Gruppe?, DDEZulaufDrainage?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? VertikaleLage {
            get {
                XElement x = this.GetElement(VertikaleLageXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(VertikaleLageXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                }
                else {
                    this.SetElementWithValidation(VertikaleLageXName, value, "VertikaleLage", VertikaleLageLocalType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (Index?, VertikaleLage?, (Timecode? | Frame? | Videozaehler? | Parameter?)?, InspektionsKode, Charakterisierung1?, Charakterisierung2?, Verbindung?, (Quantifizierung1Numerisch? | Quantifizierung1Text?)?, (Quantifizierung2Numerisch? | Quantifizierung2Text?)?, Streckenschaden?, StreckenschadenLfdNr?, Schachtbereich?, PositionVon?, PositionBis?, BezeichnungSanierung?, (DAKZustandSanierung? | DALZustandSanierung?)?, QZustandSanierung?, KVerfahrenSanierung?, Fotodatei?, FotoSpeichermedium?, Fotonummer?, Kommentar?, Klassifizierung?, Gruppe?, DDEZulaufDrainage?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? Timecode {
            get {
                XElement x = this.GetElement(TimecodeXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(TimecodeXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                }
                else {
                    this.SetElementWithValidation(TimecodeXName, value, "Timecode", TimecodeLocalType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (Index?, VertikaleLage?, (Timecode? | Frame? | Videozaehler? | Parameter?)?, InspektionsKode, Charakterisierung1?, Charakterisierung2?, Verbindung?, (Quantifizierung1Numerisch? | Quantifizierung1Text?)?, (Quantifizierung2Numerisch? | Quantifizierung2Text?)?, Streckenschaden?, StreckenschadenLfdNr?, Schachtbereich?, PositionVon?, PositionBis?, BezeichnungSanierung?, (DAKZustandSanierung? | DALZustandSanierung?)?, QZustandSanierung?, KVerfahrenSanierung?, Fotodatei?, FotoSpeichermedium?, Fotonummer?, Kommentar?, Klassifizierung?, Gruppe?, DDEZulaufDrainage?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? Frame {
            get {
                XElement x = this.GetElement(FrameXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(FrameXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                }
                else {
                    this.SetElementWithValidation(FrameXName, value, "Frame", FrameLocalType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (Index?, VertikaleLage?, (Timecode? | Frame? | Videozaehler? | Parameter?)?, InspektionsKode, Charakterisierung1?, Charakterisierung2?, Verbindung?, (Quantifizierung1Numerisch? | Quantifizierung1Text?)?, (Quantifizierung2Numerisch? | Quantifizierung2Text?)?, Streckenschaden?, StreckenschadenLfdNr?, Schachtbereich?, PositionVon?, PositionBis?, BezeichnungSanierung?, (DAKZustandSanierung? | DALZustandSanierung?)?, QZustandSanierung?, KVerfahrenSanierung?, Fotodatei?, FotoSpeichermedium?, Fotonummer?, Kommentar?, Klassifizierung?, Gruppe?, DDEZulaufDrainage?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? Videozaehler {
            get {
                XElement x = this.GetElement(VideozaehlerXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(VideozaehlerXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                }
                else {
                    this.SetElementWithValidation(VideozaehlerXName, value, "Videozaehler", VideozaehlerLocalType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (Index?, VertikaleLage?, (Timecode? | Frame? | Videozaehler? | Parameter?)?, InspektionsKode, Charakterisierung1?, Charakterisierung2?, Verbindung?, (Quantifizierung1Numerisch? | Quantifizierung1Text?)?, (Quantifizierung2Numerisch? | Quantifizierung2Text?)?, Streckenschaden?, StreckenschadenLfdNr?, Schachtbereich?, PositionVon?, PositionBis?, BezeichnungSanierung?, (DAKZustandSanierung? | DALZustandSanierung?)?, QZustandSanierung?, KVerfahrenSanierung?, Fotodatei?, FotoSpeichermedium?, Fotonummer?, Kommentar?, Klassifizierung?, Gruppe?, DDEZulaufDrainage?)
        /// </para>
        /// </summary>
        public virtual string Parameter {
            get {
                XElement x = this.GetElement(ParameterXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(ParameterXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                else {
                    this.SetElementWithValidation(ParameterXName, value, "Parameter", ParameterLocalType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (Index?, VertikaleLage?, (Timecode? | Frame? | Videozaehler? | Parameter?)?, InspektionsKode, Charakterisierung1?, Charakterisierung2?, Verbindung?, (Quantifizierung1Numerisch? | Quantifizierung1Text?)?, (Quantifizierung2Numerisch? | Quantifizierung2Text?)?, Streckenschaden?, StreckenschadenLfdNr?, Schachtbereich?, PositionVon?, PositionBis?, BezeichnungSanierung?, (DAKZustandSanierung? | DALZustandSanierung?)?, QZustandSanierung?, KVerfahrenSanierung?, Fotodatei?, FotoSpeichermedium?, Fotonummer?, Kommentar?, Klassifizierung?, Gruppe?, DDEZulaufDrainage?)
        /// </para>
        /// </summary>
        public virtual string InspektionsKode {
            get {
                XElement x = this.GetElement(InspektionsKodeXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(InspektionsKodeXName, value, "InspektionsKode", InspektionsKodeLocalType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Index?, VertikaleLage?, (Timecode? | Frame? | Videozaehler? | Parameter?)?, InspektionsKode, Charakterisierung1?, Charakterisierung2?, Verbindung?, (Quantifizierung1Numerisch? | Quantifizierung1Text?)?, (Quantifizierung2Numerisch? | Quantifizierung2Text?)?, Streckenschaden?, StreckenschadenLfdNr?, Schachtbereich?, PositionVon?, PositionBis?, BezeichnungSanierung?, (DAKZustandSanierung? | DALZustandSanierung?)?, QZustandSanierung?, KVerfahrenSanierung?, Fotodatei?, FotoSpeichermedium?, Fotonummer?, Kommentar?, Klassifizierung?, Gruppe?, DDEZulaufDrainage?)
        /// </para>
        /// </summary>
        public virtual string Charakterisierung1 {
            get {
                XElement x = this.GetElement(Charakterisierung1XName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(Charakterisierung1XName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                else {
                    this.SetElementWithValidation(Charakterisierung1XName, value, "Charakterisierung1", Charakterisierung1LocalType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Index?, VertikaleLage?, (Timecode? | Frame? | Videozaehler? | Parameter?)?, InspektionsKode, Charakterisierung1?, Charakterisierung2?, Verbindung?, (Quantifizierung1Numerisch? | Quantifizierung1Text?)?, (Quantifizierung2Numerisch? | Quantifizierung2Text?)?, Streckenschaden?, StreckenschadenLfdNr?, Schachtbereich?, PositionVon?, PositionBis?, BezeichnungSanierung?, (DAKZustandSanierung? | DALZustandSanierung?)?, QZustandSanierung?, KVerfahrenSanierung?, Fotodatei?, FotoSpeichermedium?, Fotonummer?, Kommentar?, Klassifizierung?, Gruppe?, DDEZulaufDrainage?)
        /// </para>
        /// </summary>
        public virtual string Charakterisierung2 {
            get {
                XElement x = this.GetElement(Charakterisierung2XName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(Charakterisierung2XName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                else {
                    this.SetElementWithValidation(Charakterisierung2XName, value, "Charakterisierung2", Charakterisierung2LocalType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Index?, VertikaleLage?, (Timecode? | Frame? | Videozaehler? | Parameter?)?, InspektionsKode, Charakterisierung1?, Charakterisierung2?, Verbindung?, (Quantifizierung1Numerisch? | Quantifizierung1Text?)?, (Quantifizierung2Numerisch? | Quantifizierung2Text?)?, Streckenschaden?, StreckenschadenLfdNr?, Schachtbereich?, PositionVon?, PositionBis?, BezeichnungSanierung?, (DAKZustandSanierung? | DALZustandSanierung?)?, QZustandSanierung?, KVerfahrenSanierung?, Fotodatei?, FotoSpeichermedium?, Fotonummer?, Kommentar?, Klassifizierung?, Gruppe?, DDEZulaufDrainage?)
        /// </para>
        /// </summary>
        public virtual System.Boolean? Verbindung {
            get {
                XElement x = this.GetElement(VerbindungXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
            set {
                this.SetElement(VerbindungXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (Index?, VertikaleLage?, (Timecode? | Frame? | Videozaehler? | Parameter?)?, InspektionsKode, Charakterisierung1?, Charakterisierung2?, Verbindung?, (Quantifizierung1Numerisch? | Quantifizierung1Text?)?, (Quantifizierung2Numerisch? | Quantifizierung2Text?)?, Streckenschaden?, StreckenschadenLfdNr?, Schachtbereich?, PositionVon?, PositionBis?, BezeichnungSanierung?, (DAKZustandSanierung? | DALZustandSanierung?)?, QZustandSanierung?, KVerfahrenSanierung?, Fotodatei?, FotoSpeichermedium?, Fotonummer?, Kommentar?, Klassifizierung?, Gruppe?, DDEZulaufDrainage?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? Quantifizierung1Numerisch {
            get {
                XElement x = this.GetElement(Quantifizierung1NumerischXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(Quantifizierung1NumerischXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                }
                else {
                    this.SetElementWithValidation(Quantifizierung1NumerischXName, value, "Quantifizierung1Numerisch", Quantifizierung1NumerischLocalType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (Index?, VertikaleLage?, (Timecode? | Frame? | Videozaehler? | Parameter?)?, InspektionsKode, Charakterisierung1?, Charakterisierung2?, Verbindung?, (Quantifizierung1Numerisch? | Quantifizierung1Text?)?, (Quantifizierung2Numerisch? | Quantifizierung2Text?)?, Streckenschaden?, StreckenschadenLfdNr?, Schachtbereich?, PositionVon?, PositionBis?, BezeichnungSanierung?, (DAKZustandSanierung? | DALZustandSanierung?)?, QZustandSanierung?, KVerfahrenSanierung?, Fotodatei?, FotoSpeichermedium?, Fotonummer?, Kommentar?, Klassifizierung?, Gruppe?, DDEZulaufDrainage?)
        /// </para>
        /// </summary>
        public virtual string Quantifizierung1Text {
            get {
                XElement x = this.GetElement(Quantifizierung1TextXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(Quantifizierung1TextXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                else {
                    this.SetElementWithValidation(Quantifizierung1TextXName, value, "Quantifizierung1Text", Quantifizierung1TextLocalType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (Index?, VertikaleLage?, (Timecode? | Frame? | Videozaehler? | Parameter?)?, InspektionsKode, Charakterisierung1?, Charakterisierung2?, Verbindung?, (Quantifizierung1Numerisch? | Quantifizierung1Text?)?, (Quantifizierung2Numerisch? | Quantifizierung2Text?)?, Streckenschaden?, StreckenschadenLfdNr?, Schachtbereich?, PositionVon?, PositionBis?, BezeichnungSanierung?, (DAKZustandSanierung? | DALZustandSanierung?)?, QZustandSanierung?, KVerfahrenSanierung?, Fotodatei?, FotoSpeichermedium?, Fotonummer?, Kommentar?, Klassifizierung?, Gruppe?, DDEZulaufDrainage?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? Quantifizierung2Numerisch {
            get {
                XElement x = this.GetElement(Quantifizierung2NumerischXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(Quantifizierung2NumerischXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                }
                else {
                    this.SetElementWithValidation(Quantifizierung2NumerischXName, value, "Quantifizierung2Numerisch", Quantifizierung2NumerischLocalType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (Index?, VertikaleLage?, (Timecode? | Frame? | Videozaehler? | Parameter?)?, InspektionsKode, Charakterisierung1?, Charakterisierung2?, Verbindung?, (Quantifizierung1Numerisch? | Quantifizierung1Text?)?, (Quantifizierung2Numerisch? | Quantifizierung2Text?)?, Streckenschaden?, StreckenschadenLfdNr?, Schachtbereich?, PositionVon?, PositionBis?, BezeichnungSanierung?, (DAKZustandSanierung? | DALZustandSanierung?)?, QZustandSanierung?, KVerfahrenSanierung?, Fotodatei?, FotoSpeichermedium?, Fotonummer?, Kommentar?, Klassifizierung?, Gruppe?, DDEZulaufDrainage?)
        /// </para>
        /// </summary>
        public virtual string Quantifizierung2Text {
            get {
                XElement x = this.GetElement(Quantifizierung2TextXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(Quantifizierung2TextXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                else {
                    this.SetElementWithValidation(Quantifizierung2TextXName, value, "Quantifizierung2Text", Quantifizierung2TextLocalType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Index?, VertikaleLage?, (Timecode? | Frame? | Videozaehler? | Parameter?)?, InspektionsKode, Charakterisierung1?, Charakterisierung2?, Verbindung?, (Quantifizierung1Numerisch? | Quantifizierung1Text?)?, (Quantifizierung2Numerisch? | Quantifizierung2Text?)?, Streckenschaden?, StreckenschadenLfdNr?, Schachtbereich?, PositionVon?, PositionBis?, BezeichnungSanierung?, (DAKZustandSanierung? | DALZustandSanierung?)?, QZustandSanierung?, KVerfahrenSanierung?, Fotodatei?, FotoSpeichermedium?, Fotonummer?, Kommentar?, Klassifizierung?, Gruppe?, DDEZulaufDrainage?)
        /// </para>
        /// </summary>
        public virtual string Streckenschaden {
            get {
                XElement x = this.GetElement(StreckenschadenXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(StreckenschadenXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                else {
                    this.SetElementWithValidation(StreckenschadenXName, value, "Streckenschaden", global::www.bfr.abwasser.de.StreckenschadenType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Index?, VertikaleLage?, (Timecode? | Frame? | Videozaehler? | Parameter?)?, InspektionsKode, Charakterisierung1?, Charakterisierung2?, Verbindung?, (Quantifizierung1Numerisch? | Quantifizierung1Text?)?, (Quantifizierung2Numerisch? | Quantifizierung2Text?)?, Streckenschaden?, StreckenschadenLfdNr?, Schachtbereich?, PositionVon?, PositionBis?, BezeichnungSanierung?, (DAKZustandSanierung? | DALZustandSanierung?)?, QZustandSanierung?, KVerfahrenSanierung?, Fotodatei?, FotoSpeichermedium?, Fotonummer?, Kommentar?, Klassifizierung?, Gruppe?, DDEZulaufDrainage?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? StreckenschadenLfdNr {
            get {
                XElement x = this.GetElement(StreckenschadenLfdNrXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(StreckenschadenLfdNrXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                }
                else {
                    this.SetElementWithValidation(StreckenschadenLfdNrXName, value, "StreckenschadenLfdNr", StreckenschadenLfdNrLocalType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Index?, VertikaleLage?, (Timecode? | Frame? | Videozaehler? | Parameter?)?, InspektionsKode, Charakterisierung1?, Charakterisierung2?, Verbindung?, (Quantifizierung1Numerisch? | Quantifizierung1Text?)?, (Quantifizierung2Numerisch? | Quantifizierung2Text?)?, Streckenschaden?, StreckenschadenLfdNr?, Schachtbereich?, PositionVon?, PositionBis?, BezeichnungSanierung?, (DAKZustandSanierung? | DALZustandSanierung?)?, QZustandSanierung?, KVerfahrenSanierung?, Fotodatei?, FotoSpeichermedium?, Fotonummer?, Kommentar?, Klassifizierung?, Gruppe?, DDEZulaufDrainage?)
        /// </para>
        /// </summary>
        public virtual string Schachtbereich {
            get {
                XElement x = this.GetElement(SchachtbereichXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(SchachtbereichXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                else {
                    this.SetElementWithValidation(SchachtbereichXName, value, "Schachtbereich", global::www.bfr.abwasser.de.SchachtbereichType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Index?, VertikaleLage?, (Timecode? | Frame? | Videozaehler? | Parameter?)?, InspektionsKode, Charakterisierung1?, Charakterisierung2?, Verbindung?, (Quantifizierung1Numerisch? | Quantifizierung1Text?)?, (Quantifizierung2Numerisch? | Quantifizierung2Text?)?, Streckenschaden?, StreckenschadenLfdNr?, Schachtbereich?, PositionVon?, PositionBis?, BezeichnungSanierung?, (DAKZustandSanierung? | DALZustandSanierung?)?, QZustandSanierung?, KVerfahrenSanierung?, Fotodatei?, FotoSpeichermedium?, Fotonummer?, Kommentar?, Klassifizierung?, Gruppe?, DDEZulaufDrainage?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? PositionVon {
            get {
                XElement x = this.GetElement(PositionVonXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(PositionVonXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                }
                else {
                    this.SetElementWithValidation(PositionVonXName, value, "PositionVon", PositionVonLocalType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Index?, VertikaleLage?, (Timecode? | Frame? | Videozaehler? | Parameter?)?, InspektionsKode, Charakterisierung1?, Charakterisierung2?, Verbindung?, (Quantifizierung1Numerisch? | Quantifizierung1Text?)?, (Quantifizierung2Numerisch? | Quantifizierung2Text?)?, Streckenschaden?, StreckenschadenLfdNr?, Schachtbereich?, PositionVon?, PositionBis?, BezeichnungSanierung?, (DAKZustandSanierung? | DALZustandSanierung?)?, QZustandSanierung?, KVerfahrenSanierung?, Fotodatei?, FotoSpeichermedium?, Fotonummer?, Kommentar?, Klassifizierung?, Gruppe?, DDEZulaufDrainage?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? PositionBis {
            get {
                XElement x = this.GetElement(PositionBisXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(PositionBisXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                }
                else {
                    this.SetElementWithValidation(PositionBisXName, value, "PositionBis", PositionBisLocalType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Index?, VertikaleLage?, (Timecode? | Frame? | Videozaehler? | Parameter?)?, InspektionsKode, Charakterisierung1?, Charakterisierung2?, Verbindung?, (Quantifizierung1Numerisch? | Quantifizierung1Text?)?, (Quantifizierung2Numerisch? | Quantifizierung2Text?)?, Streckenschaden?, StreckenschadenLfdNr?, Schachtbereich?, PositionVon?, PositionBis?, BezeichnungSanierung?, (DAKZustandSanierung? | DALZustandSanierung?)?, QZustandSanierung?, KVerfahrenSanierung?, Fotodatei?, FotoSpeichermedium?, Fotonummer?, Kommentar?, Klassifizierung?, Gruppe?, DDEZulaufDrainage?)
        /// </para>
        /// </summary>
        public virtual string BezeichnungSanierung {
            get {
                XElement x = this.GetElement(BezeichnungSanierungXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(BezeichnungSanierungXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                else {
                    this.SetElementWithValidation(BezeichnungSanierungXName, value, "BezeichnungSanierung", BezeichnungSanierungLocalType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (Index?, VertikaleLage?, (Timecode? | Frame? | Videozaehler? | Parameter?)?, InspektionsKode, Charakterisierung1?, Charakterisierung2?, Verbindung?, (Quantifizierung1Numerisch? | Quantifizierung1Text?)?, (Quantifizierung2Numerisch? | Quantifizierung2Text?)?, Streckenschaden?, StreckenschadenLfdNr?, Schachtbereich?, PositionVon?, PositionBis?, BezeichnungSanierung?, (DAKZustandSanierung? | DALZustandSanierung?)?, QZustandSanierung?, KVerfahrenSanierung?, Fotodatei?, FotoSpeichermedium?, Fotonummer?, Kommentar?, Klassifizierung?, Gruppe?, DDEZulaufDrainage?)
        /// </para>
        /// </summary>
        public virtual string DAKZustandSanierung {
            get {
                XElement x = this.GetElement(DAKZustandSanierungXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(DAKZustandSanierungXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                else {
                    this.SetElementWithValidation(DAKZustandSanierungXName, value, "DAKZustandSanierung", global::www.bfr.abwasser.de.DAKZustandSanierungType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (Index?, VertikaleLage?, (Timecode? | Frame? | Videozaehler? | Parameter?)?, InspektionsKode, Charakterisierung1?, Charakterisierung2?, Verbindung?, (Quantifizierung1Numerisch? | Quantifizierung1Text?)?, (Quantifizierung2Numerisch? | Quantifizierung2Text?)?, Streckenschaden?, StreckenschadenLfdNr?, Schachtbereich?, PositionVon?, PositionBis?, BezeichnungSanierung?, (DAKZustandSanierung? | DALZustandSanierung?)?, QZustandSanierung?, KVerfahrenSanierung?, Fotodatei?, FotoSpeichermedium?, Fotonummer?, Kommentar?, Klassifizierung?, Gruppe?, DDEZulaufDrainage?)
        /// </para>
        /// </summary>
        public virtual string DALZustandSanierung {
            get {
                XElement x = this.GetElement(DALZustandSanierungXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(DALZustandSanierungXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                else {
                    this.SetElementWithValidation(DALZustandSanierungXName, value, "DALZustandSanierung", global::www.bfr.abwasser.de.DALZustandSanierungType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Index?, VertikaleLage?, (Timecode? | Frame? | Videozaehler? | Parameter?)?, InspektionsKode, Charakterisierung1?, Charakterisierung2?, Verbindung?, (Quantifizierung1Numerisch? | Quantifizierung1Text?)?, (Quantifizierung2Numerisch? | Quantifizierung2Text?)?, Streckenschaden?, StreckenschadenLfdNr?, Schachtbereich?, PositionVon?, PositionBis?, BezeichnungSanierung?, (DAKZustandSanierung? | DALZustandSanierung?)?, QZustandSanierung?, KVerfahrenSanierung?, Fotodatei?, FotoSpeichermedium?, Fotonummer?, Kommentar?, Klassifizierung?, Gruppe?, DDEZulaufDrainage?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? QZustandSanierung {
            get {
                XElement x = this.GetElement(QZustandSanierungXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(QZustandSanierungXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                }
                else {
                    this.SetElementWithValidation(QZustandSanierungXName, value, "QZustandSanierung", QZustandSanierungLocalType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Index?, VertikaleLage?, (Timecode? | Frame? | Videozaehler? | Parameter?)?, InspektionsKode, Charakterisierung1?, Charakterisierung2?, Verbindung?, (Quantifizierung1Numerisch? | Quantifizierung1Text?)?, (Quantifizierung2Numerisch? | Quantifizierung2Text?)?, Streckenschaden?, StreckenschadenLfdNr?, Schachtbereich?, PositionVon?, PositionBis?, BezeichnungSanierung?, (DAKZustandSanierung? | DALZustandSanierung?)?, QZustandSanierung?, KVerfahrenSanierung?, Fotodatei?, FotoSpeichermedium?, Fotonummer?, Kommentar?, Klassifizierung?, Gruppe?, DDEZulaufDrainage?)
        /// </para>
        /// </summary>
        public virtual string KVerfahrenSanierung {
            get {
                XElement x = this.GetElement(KVerfahrenSanierungXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(KVerfahrenSanierungXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                else {
                    this.SetElementWithValidation(KVerfahrenSanierungXName, value, "KVerfahrenSanierung", global::www.bfr.abwasser.de.KVerfahrenSanierungType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Index?, VertikaleLage?, (Timecode? | Frame? | Videozaehler? | Parameter?)?, InspektionsKode, Charakterisierung1?, Charakterisierung2?, Verbindung?, (Quantifizierung1Numerisch? | Quantifizierung1Text?)?, (Quantifizierung2Numerisch? | Quantifizierung2Text?)?, Streckenschaden?, StreckenschadenLfdNr?, Schachtbereich?, PositionVon?, PositionBis?, BezeichnungSanierung?, (DAKZustandSanierung? | DALZustandSanierung?)?, QZustandSanierung?, KVerfahrenSanierung?, Fotodatei?, FotoSpeichermedium?, Fotonummer?, Kommentar?, Klassifizierung?, Gruppe?, DDEZulaufDrainage?)
        /// </para>
        /// </summary>
        public virtual string Fotodatei {
            get {
                XElement x = this.GetElement(FotodateiXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(FotodateiXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                else {
                    this.SetElementWithValidation(FotodateiXName, value, "Fotodatei", FotodateiLocalType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Index?, VertikaleLage?, (Timecode? | Frame? | Videozaehler? | Parameter?)?, InspektionsKode, Charakterisierung1?, Charakterisierung2?, Verbindung?, (Quantifizierung1Numerisch? | Quantifizierung1Text?)?, (Quantifizierung2Numerisch? | Quantifizierung2Text?)?, Streckenschaden?, StreckenschadenLfdNr?, Schachtbereich?, PositionVon?, PositionBis?, BezeichnungSanierung?, (DAKZustandSanierung? | DALZustandSanierung?)?, QZustandSanierung?, KVerfahrenSanierung?, Fotodatei?, FotoSpeichermedium?, Fotonummer?, Kommentar?, Klassifizierung?, Gruppe?, DDEZulaufDrainage?)
        /// </para>
        /// </summary>
        public virtual string FotoSpeichermedium {
            get {
                XElement x = this.GetElement(FotoSpeichermediumXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(FotoSpeichermediumXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                else {
                    this.SetElementWithValidation(FotoSpeichermediumXName, value, "FotoSpeichermedium", global::www.bfr.abwasser.de.FotoSpeichermediumType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Index?, VertikaleLage?, (Timecode? | Frame? | Videozaehler? | Parameter?)?, InspektionsKode, Charakterisierung1?, Charakterisierung2?, Verbindung?, (Quantifizierung1Numerisch? | Quantifizierung1Text?)?, (Quantifizierung2Numerisch? | Quantifizierung2Text?)?, Streckenschaden?, StreckenschadenLfdNr?, Schachtbereich?, PositionVon?, PositionBis?, BezeichnungSanierung?, (DAKZustandSanierung? | DALZustandSanierung?)?, QZustandSanierung?, KVerfahrenSanierung?, Fotodatei?, FotoSpeichermedium?, Fotonummer?, Kommentar?, Klassifizierung?, Gruppe?, DDEZulaufDrainage?)
        /// </para>
        /// </summary>
        public virtual string Fotonummer {
            get {
                XElement x = this.GetElement(FotonummerXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(FotonummerXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                else {
                    this.SetElementWithValidation(FotonummerXName, value, "Fotonummer", FotonummerLocalType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Index?, VertikaleLage?, (Timecode? | Frame? | Videozaehler? | Parameter?)?, InspektionsKode, Charakterisierung1?, Charakterisierung2?, Verbindung?, (Quantifizierung1Numerisch? | Quantifizierung1Text?)?, (Quantifizierung2Numerisch? | Quantifizierung2Text?)?, Streckenschaden?, StreckenschadenLfdNr?, Schachtbereich?, PositionVon?, PositionBis?, BezeichnungSanierung?, (DAKZustandSanierung? | DALZustandSanierung?)?, QZustandSanierung?, KVerfahrenSanierung?, Fotodatei?, FotoSpeichermedium?, Fotonummer?, Kommentar?, Klassifizierung?, Gruppe?, DDEZulaufDrainage?)
        /// </para>
        /// </summary>
        public virtual string Kommentar {
            get {
                XElement x = this.GetElement(KommentarXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
            set {
                this.SetElement(KommentarXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Index?, VertikaleLage?, (Timecode? | Frame? | Videozaehler? | Parameter?)?, InspektionsKode, Charakterisierung1?, Charakterisierung2?, Verbindung?, (Quantifizierung1Numerisch? | Quantifizierung1Text?)?, (Quantifizierung2Numerisch? | Quantifizierung2Text?)?, Streckenschaden?, StreckenschadenLfdNr?, Schachtbereich?, PositionVon?, PositionBis?, BezeichnungSanierung?, (DAKZustandSanierung? | DALZustandSanierung?)?, QZustandSanierung?, KVerfahrenSanierung?, Fotodatei?, FotoSpeichermedium?, Fotonummer?, Kommentar?, Klassifizierung?, Gruppe?, DDEZulaufDrainage?)
        /// </para>
        /// </summary>
        public virtual KlassifizierungType Klassifizierung {
            get {
                XElement x = this.GetElement(KlassifizierungXName);
                return ((KlassifizierungType)(x));
            }
            set {
                this.SetElement(KlassifizierungXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Index?, VertikaleLage?, (Timecode? | Frame? | Videozaehler? | Parameter?)?, InspektionsKode, Charakterisierung1?, Charakterisierung2?, Verbindung?, (Quantifizierung1Numerisch? | Quantifizierung1Text?)?, (Quantifizierung2Numerisch? | Quantifizierung2Text?)?, Streckenschaden?, StreckenschadenLfdNr?, Schachtbereich?, PositionVon?, PositionBis?, BezeichnungSanierung?, (DAKZustandSanierung? | DALZustandSanierung?)?, QZustandSanierung?, KVerfahrenSanierung?, Fotodatei?, FotoSpeichermedium?, Fotonummer?, Kommentar?, Klassifizierung?, Gruppe?, DDEZulaufDrainage?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? Gruppe {
            get {
                XElement x = this.GetElement(GruppeXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(GruppeXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                }
                else {
                    this.SetElementWithValidation(GruppeXName, value, "Gruppe", GruppeLocalType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Index?, VertikaleLage?, (Timecode? | Frame? | Videozaehler? | Parameter?)?, InspektionsKode, Charakterisierung1?, Charakterisierung2?, Verbindung?, (Quantifizierung1Numerisch? | Quantifizierung1Text?)?, (Quantifizierung2Numerisch? | Quantifizierung2Text?)?, Streckenschaden?, StreckenschadenLfdNr?, Schachtbereich?, PositionVon?, PositionBis?, BezeichnungSanierung?, (DAKZustandSanierung? | DALZustandSanierung?)?, QZustandSanierung?, KVerfahrenSanierung?, Fotodatei?, FotoSpeichermedium?, Fotonummer?, Kommentar?, Klassifizierung?, Gruppe?, DDEZulaufDrainage?)
        /// </para>
        /// </summary>
        public virtual System.Boolean? DDEZulaufDrainage {
            get {
                XElement x = this.GetElement(DDEZulaufDrainageXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
            set {
                this.SetElement(DDEZulaufDrainageXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<KZustandType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(IndexXName, typeof(decimal));
            localElementDictionary.Add(VertikaleLageXName, typeof(decimal));
            localElementDictionary.Add(TimecodeXName, typeof(decimal));
            localElementDictionary.Add(FrameXName, typeof(decimal));
            localElementDictionary.Add(VideozaehlerXName, typeof(decimal));
            localElementDictionary.Add(ParameterXName, typeof(string));
            localElementDictionary.Add(InspektionsKodeXName, typeof(string));
            localElementDictionary.Add(Charakterisierung1XName, typeof(string));
            localElementDictionary.Add(Charakterisierung2XName, typeof(string));
            localElementDictionary.Add(VerbindungXName, typeof(bool));
            localElementDictionary.Add(Quantifizierung1NumerischXName, typeof(decimal));
            localElementDictionary.Add(Quantifizierung1TextXName, typeof(string));
            localElementDictionary.Add(Quantifizierung2NumerischXName, typeof(decimal));
            localElementDictionary.Add(Quantifizierung2TextXName, typeof(string));
            localElementDictionary.Add(StreckenschadenXName, typeof(string));
            localElementDictionary.Add(StreckenschadenLfdNrXName, typeof(decimal));
            localElementDictionary.Add(SchachtbereichXName, typeof(string));
            localElementDictionary.Add(PositionVonXName, typeof(decimal));
            localElementDictionary.Add(PositionBisXName, typeof(decimal));
            localElementDictionary.Add(BezeichnungSanierungXName, typeof(string));
            localElementDictionary.Add(DAKZustandSanierungXName, typeof(string));
            localElementDictionary.Add(DALZustandSanierungXName, typeof(string));
            localElementDictionary.Add(QZustandSanierungXName, typeof(decimal));
            localElementDictionary.Add(KVerfahrenSanierungXName, typeof(string));
            localElementDictionary.Add(FotodateiXName, typeof(string));
            localElementDictionary.Add(FotoSpeichermediumXName, typeof(string));
            localElementDictionary.Add(FotonummerXName, typeof(string));
            localElementDictionary.Add(KommentarXName, typeof(string));
            localElementDictionary.Add(KlassifizierungXName, typeof(KlassifizierungType));
            localElementDictionary.Add(GruppeXName, typeof(decimal));
            localElementDictionary.Add(DDEZulaufDrainageXName, typeof(bool));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        private class IndexLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(1024)), null, 0, 0, null, null, 0, null, null, 0, null, 2, XmlSchemaWhiteSpace.Collapse));
            
            private IndexLocalType() {
            }
        }
        
        private class VertikaleLageLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(3072)), null, 2, 0, null, null, 0, null, null, 0, null, 6, XmlSchemaWhiteSpace.Collapse));
            
            private VertikaleLageLocalType() {
            }
        }
        
        private class TimecodeLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(1024)), null, 0, 0, null, null, 0, null, null, 0, null, 8, XmlSchemaWhiteSpace.Collapse));
            
            private TimecodeLocalType() {
            }
        }
        
        private class FrameLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(1024)), null, 0, 0, null, null, 0, null, null, 0, null, 10, XmlSchemaWhiteSpace.Collapse));
            
            private FrameLocalType() {
            }
        }
        
        private class VideozaehlerLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(1024)), null, 0, 0, null, null, 0, null, null, 0, null, 5, XmlSchemaWhiteSpace.Collapse));
            
            private VideozaehlerLocalType() {
            }
        }
        
        private class ParameterLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), null);
            
            private ParameterLocalType() {
            }
        }
        
        private class InspektionsKodeLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(6)), null, 0, 0, null, null, 10, null, null, 1, null, 0, XmlSchemaWhiteSpace.Preserve));
            
            private InspektionsKodeLocalType() {
            }
        }
        
        private class Charakterisierung1LocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(4)), null, 0, 0, null, null, 10, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
            
            private Charakterisierung1LocalType() {
            }
        }
        
        private class Charakterisierung2LocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(4)), null, 0, 0, null, null, 10, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
            
            private Charakterisierung2LocalType() {
            }
        }
        
        private class Quantifizierung1NumerischLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(3072)), null, 2, 0, null, null, 0, null, null, 0, null, 6, XmlSchemaWhiteSpace.Collapse));
            
            private Quantifizierung1NumerischLocalType() {
            }
        }
        
        private class Quantifizierung1TextLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(4)), null, 0, 0, null, null, 30, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
            
            private Quantifizierung1TextLocalType() {
            }
        }
        
        private class Quantifizierung2NumerischLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(3072)), null, 2, 0, null, null, 0, null, null, 0, null, 6, XmlSchemaWhiteSpace.Collapse));
            
            private Quantifizierung2NumerischLocalType() {
            }
        }
        
        private class Quantifizierung2TextLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(4)), null, 0, 0, null, null, 30, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
            
            private Quantifizierung2TextLocalType() {
            }
        }
        
        private class StreckenschadenLfdNrLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(1344)), null, 0, 0, null, 99m, 0, null, 1m, 0, null, 2, XmlSchemaWhiteSpace.Collapse));
            
            private StreckenschadenLfdNrLocalType() {
            }
        }
        
        private class PositionVonLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(1024)), null, 0, 0, null, null, 0, null, null, 0, null, 2, XmlSchemaWhiteSpace.Collapse));
            
            private PositionVonLocalType() {
            }
        }
        
        private class PositionBisLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(1024)), null, 0, 0, null, null, 0, null, null, 0, null, 2, XmlSchemaWhiteSpace.Collapse));
            
            private PositionBisLocalType() {
            }
        }
        
        private class BezeichnungSanierungLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(4)), null, 0, 0, null, null, 5, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
            
            private BezeichnungSanierungLocalType() {
            }
        }
        
        private class QZustandSanierungLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(1024)), null, 0, 0, null, null, 0, null, null, 0, null, 4, XmlSchemaWhiteSpace.Collapse));
            
            private QZustandSanierungLocalType() {
            }
        }
        
        private class FotodateiLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(4)), null, 0, 0, null, null, 255, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
            
            private FotodateiLocalType() {
            }
        }
        
        private class FotonummerLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(4)), null, 0, 0, null, null, 20, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
            
            private FotonummerLocalType() {
            }
        }
        
        private class GruppeLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(1344)), null, 0, 0, null, 99m, 0, null, 1m, 0, null, 2, XmlSchemaWhiteSpace.Collapse));
            
            private GruppeLocalType() {
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Zustandsbeschreibung, BezeichnungSanierung?, Fotodatei?, FotoSpeichermedium?, Fotonummer?, (Timecode? | Frame? | Videozaehler? | Parameter?)?)
    /// </para>
    /// </summary>
    public partial class BZustandType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ZustandsbeschreibungXName = System.Xml.Linq.XName.Get("Zustandsbeschreibung", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName BezeichnungSanierungXName = System.Xml.Linq.XName.Get("BezeichnungSanierung", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName FotodateiXName = System.Xml.Linq.XName.Get("Fotodatei", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName FotoSpeichermediumXName = System.Xml.Linq.XName.Get("FotoSpeichermedium", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName FotonummerXName = System.Xml.Linq.XName.Get("Fotonummer", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TimecodeXName = System.Xml.Linq.XName.Get("Timecode", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName FrameXName = System.Xml.Linq.XName.Get("Frame", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName VideozaehlerXName = System.Xml.Linq.XName.Get("Videozaehler", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ParameterXName = System.Xml.Linq.XName.Get("Parameter", "http://www.bfr-abwasser.de");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("BZustandType", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator BZustandType(XElement xe) { return XTypedServices.ToXTypedElement<BZustandType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static BZustandType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(ZustandsbeschreibungXName), new NamedContentModelEntity(BezeichnungSanierungXName), new NamedContentModelEntity(FotodateiXName), new NamedContentModelEntity(FotoSpeichermediumXName), new NamedContentModelEntity(FotonummerXName), new ChoiceContentModelEntity(new NamedContentModelEntity(TimecodeXName), new NamedContentModelEntity(FrameXName), new NamedContentModelEntity(VideozaehlerXName), new NamedContentModelEntity(ParameterXName)));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Zustandsbeschreibung, BezeichnungSanierung?, Fotodatei?, FotoSpeichermedium?, Fotonummer?, (Timecode? | Frame? | Videozaehler? | Parameter?)?)
        /// </para>
        /// </summary>
        public BZustandType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (Zustandsbeschreibung, BezeichnungSanierung?, Fotodatei?, FotoSpeichermedium?, Fotonummer?, (Timecode? | Frame? | Videozaehler? | Parameter?)?)
        /// </para>
        /// </summary>
        public virtual string Zustandsbeschreibung {
            get {
                XElement x = this.GetElement(ZustandsbeschreibungXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
            set {
                this.SetElement(ZustandsbeschreibungXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Zustandsbeschreibung, BezeichnungSanierung?, Fotodatei?, FotoSpeichermedium?, Fotonummer?, (Timecode? | Frame? | Videozaehler? | Parameter?)?)
        /// </para>
        /// </summary>
        public virtual string BezeichnungSanierung {
            get {
                XElement x = this.GetElement(BezeichnungSanierungXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(BezeichnungSanierungXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                else {
                    this.SetElementWithValidation(BezeichnungSanierungXName, value, "BezeichnungSanierung", BezeichnungSanierungLocalType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Zustandsbeschreibung, BezeichnungSanierung?, Fotodatei?, FotoSpeichermedium?, Fotonummer?, (Timecode? | Frame? | Videozaehler? | Parameter?)?)
        /// </para>
        /// </summary>
        public virtual string Fotodatei {
            get {
                XElement x = this.GetElement(FotodateiXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(FotodateiXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                else {
                    this.SetElementWithValidation(FotodateiXName, value, "Fotodatei", FotodateiLocalType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Zustandsbeschreibung, BezeichnungSanierung?, Fotodatei?, FotoSpeichermedium?, Fotonummer?, (Timecode? | Frame? | Videozaehler? | Parameter?)?)
        /// </para>
        /// </summary>
        public virtual string FotoSpeichermedium {
            get {
                XElement x = this.GetElement(FotoSpeichermediumXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(FotoSpeichermediumXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                else {
                    this.SetElementWithValidation(FotoSpeichermediumXName, value, "FotoSpeichermedium", global::www.bfr.abwasser.de.FotoSpeichermediumType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Zustandsbeschreibung, BezeichnungSanierung?, Fotodatei?, FotoSpeichermedium?, Fotonummer?, (Timecode? | Frame? | Videozaehler? | Parameter?)?)
        /// </para>
        /// </summary>
        public virtual string Fotonummer {
            get {
                XElement x = this.GetElement(FotonummerXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(FotonummerXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                else {
                    this.SetElementWithValidation(FotonummerXName, value, "Fotonummer", FotonummerLocalType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (Zustandsbeschreibung, BezeichnungSanierung?, Fotodatei?, FotoSpeichermedium?, Fotonummer?, (Timecode? | Frame? | Videozaehler? | Parameter?)?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? Timecode {
            get {
                XElement x = this.GetElement(TimecodeXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(TimecodeXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                }
                else {
                    this.SetElementWithValidation(TimecodeXName, value, "Timecode", TimecodeLocalType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (Zustandsbeschreibung, BezeichnungSanierung?, Fotodatei?, FotoSpeichermedium?, Fotonummer?, (Timecode? | Frame? | Videozaehler? | Parameter?)?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? Frame {
            get {
                XElement x = this.GetElement(FrameXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(FrameXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                }
                else {
                    this.SetElementWithValidation(FrameXName, value, "Frame", FrameLocalType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (Zustandsbeschreibung, BezeichnungSanierung?, Fotodatei?, FotoSpeichermedium?, Fotonummer?, (Timecode? | Frame? | Videozaehler? | Parameter?)?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? Videozaehler {
            get {
                XElement x = this.GetElement(VideozaehlerXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(VideozaehlerXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                }
                else {
                    this.SetElementWithValidation(VideozaehlerXName, value, "Videozaehler", VideozaehlerLocalType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (Zustandsbeschreibung, BezeichnungSanierung?, Fotodatei?, FotoSpeichermedium?, Fotonummer?, (Timecode? | Frame? | Videozaehler? | Parameter?)?)
        /// </para>
        /// </summary>
        public virtual string Parameter {
            get {
                XElement x = this.GetElement(ParameterXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(ParameterXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                else {
                    this.SetElementWithValidation(ParameterXName, value, "Parameter", ParameterLocalType.TypeDefinition);
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<BZustandType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(ZustandsbeschreibungXName, typeof(string));
            localElementDictionary.Add(BezeichnungSanierungXName, typeof(string));
            localElementDictionary.Add(FotodateiXName, typeof(string));
            localElementDictionary.Add(FotoSpeichermediumXName, typeof(string));
            localElementDictionary.Add(FotonummerXName, typeof(string));
            localElementDictionary.Add(TimecodeXName, typeof(decimal));
            localElementDictionary.Add(FrameXName, typeof(decimal));
            localElementDictionary.Add(VideozaehlerXName, typeof(decimal));
            localElementDictionary.Add(ParameterXName, typeof(string));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        private class BezeichnungSanierungLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(4)), null, 0, 0, null, null, 5, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
            
            private BezeichnungSanierungLocalType() {
            }
        }
        
        private class FotodateiLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(4)), null, 0, 0, null, null, 255, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
            
            private FotodateiLocalType() {
            }
        }
        
        private class FotonummerLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(4)), null, 0, 0, null, null, 20, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
            
            private FotonummerLocalType() {
            }
        }
        
        private class TimecodeLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(1024)), null, 0, 0, null, null, 0, null, null, 0, null, 8, XmlSchemaWhiteSpace.Collapse));
            
            private TimecodeLocalType() {
            }
        }
        
        private class FrameLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(1024)), null, 0, 0, null, null, 0, null, null, 0, null, 10, XmlSchemaWhiteSpace.Collapse));
            
            private FrameLocalType() {
            }
        }
        
        private class VideozaehlerLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(1024)), null, 0, 0, null, null, 0, null, null, 0, null, 5, XmlSchemaWhiteSpace.Collapse));
            
            private VideozaehlerLocalType() {
            }
        }
        
        private class ParameterLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), null);
            
            private ParameterLocalType() {
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Dichtheit?, Standsicherheit?, Betriebssicherheit?, MaxSZeAuto?, MaxSKeAuto?)
    /// </para>
    /// </summary>
    public partial class KlassifizierungType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName DichtheitXName = System.Xml.Linq.XName.Get("Dichtheit", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName StandsicherheitXName = System.Xml.Linq.XName.Get("Standsicherheit", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName BetriebssicherheitXName = System.Xml.Linq.XName.Get("Betriebssicherheit", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName MaxSZeAutoXName = System.Xml.Linq.XName.Get("MaxSZeAuto", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName MaxSKeAutoXName = System.Xml.Linq.XName.Get("MaxSKeAuto", "http://www.bfr-abwasser.de");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("KlassifizierungType", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator KlassifizierungType(XElement xe) { return XTypedServices.ToXTypedElement<KlassifizierungType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static KlassifizierungType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(DichtheitXName), new NamedContentModelEntity(StandsicherheitXName), new NamedContentModelEntity(BetriebssicherheitXName), new NamedContentModelEntity(MaxSZeAutoXName), new NamedContentModelEntity(MaxSKeAutoXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Dichtheit?, Standsicherheit?, Betriebssicherheit?, MaxSZeAuto?, MaxSKeAuto?)
        /// </para>
        /// </summary>
        public KlassifizierungType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Dichtheit?, Standsicherheit?, Betriebssicherheit?, MaxSZeAuto?, MaxSKeAuto?)
        /// </para>
        /// </summary>
        public virtual KDichtheitType Dichtheit {
            get {
                XElement x = this.GetElement(DichtheitXName);
                return ((KDichtheitType)(x));
            }
            set {
                this.SetElement(DichtheitXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Dichtheit?, Standsicherheit?, Betriebssicherheit?, MaxSZeAuto?, MaxSKeAuto?)
        /// </para>
        /// </summary>
        public virtual KStandsicherheitType Standsicherheit {
            get {
                XElement x = this.GetElement(StandsicherheitXName);
                return ((KStandsicherheitType)(x));
            }
            set {
                this.SetElement(StandsicherheitXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Dichtheit?, Standsicherheit?, Betriebssicherheit?, MaxSZeAuto?, MaxSKeAuto?)
        /// </para>
        /// </summary>
        public virtual KBetriebssicherheitType Betriebssicherheit {
            get {
                XElement x = this.GetElement(BetriebssicherheitXName);
                return ((KBetriebssicherheitType)(x));
            }
            set {
                this.SetElement(BetriebssicherheitXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Dichtheit?, Standsicherheit?, Betriebssicherheit?, MaxSZeAuto?, MaxSKeAuto?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? MaxSZeAuto {
            get {
                XElement x = this.GetElement(MaxSZeAutoXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(MaxSZeAutoXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                }
                else {
                    this.SetElementWithValidation(MaxSZeAutoXName, value, "MaxSZeAuto", MaxSZeAutoLocalType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Dichtheit?, Standsicherheit?, Betriebssicherheit?, MaxSZeAuto?, MaxSKeAuto?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? MaxSKeAuto {
            get {
                XElement x = this.GetElement(MaxSKeAutoXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(MaxSKeAutoXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                }
                else {
                    this.SetElementWithValidation(MaxSKeAutoXName, value, "MaxSKeAuto", MaxSKeAutoLocalType.TypeDefinition);
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<KlassifizierungType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(DichtheitXName, typeof(KDichtheitType));
            localElementDictionary.Add(StandsicherheitXName, typeof(KStandsicherheitType));
            localElementDictionary.Add(BetriebssicherheitXName, typeof(KBetriebssicherheitType));
            localElementDictionary.Add(MaxSZeAutoXName, typeof(decimal));
            localElementDictionary.Add(MaxSKeAutoXName, typeof(decimal));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        private class MaxSZeAutoLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(1024)), null, 0, 0, null, null, 0, null, null, 0, null, 3, XmlSchemaWhiteSpace.Collapse));
            
            private MaxSZeAutoLocalType() {
            }
        }
        
        private class MaxSKeAutoLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(1024)), null, 0, 0, null, null, 0, null, null, 0, null, 1, XmlSchemaWhiteSpace.Collapse));
            
            private MaxSKeAutoLocalType() {
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (SKDvAuto, SKDvManu?, SZDvAuto, SZDeAuto, SKDeAuto)
    /// </para>
    /// </summary>
    public partial class KDichtheitType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName SKDvAutoXName = System.Xml.Linq.XName.Get("SKDvAuto", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName SKDvManuXName = System.Xml.Linq.XName.Get("SKDvManu", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName SZDvAutoXName = System.Xml.Linq.XName.Get("SZDvAuto", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName SZDeAutoXName = System.Xml.Linq.XName.Get("SZDeAuto", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName SKDeAutoXName = System.Xml.Linq.XName.Get("SKDeAuto", "http://www.bfr-abwasser.de");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("KDichtheitType", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator KDichtheitType(XElement xe) { return XTypedServices.ToXTypedElement<KDichtheitType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static KDichtheitType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(SKDvAutoXName), new NamedContentModelEntity(SKDvManuXName), new NamedContentModelEntity(SZDvAutoXName), new NamedContentModelEntity(SZDeAutoXName), new NamedContentModelEntity(SKDeAutoXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (SKDvAuto, SKDvManu?, SZDvAuto, SZDeAuto, SKDeAuto)
        /// </para>
        /// </summary>
        public KDichtheitType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (SKDvAuto, SKDvManu?, SZDvAuto, SZDeAuto, SKDeAuto)
        /// </para>
        /// </summary>
        public virtual decimal SKDvAuto {
            get {
                XElement x = this.GetElement(SKDvAutoXName);
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                this.SetElementWithValidation(SKDvAutoXName, value, "SKDvAuto", SKDvAutoLocalType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (SKDvAuto, SKDvManu?, SZDvAuto, SZDeAuto, SKDeAuto)
        /// </para>
        /// </summary>
        public virtual System.Decimal? SKDvManu {
            get {
                XElement x = this.GetElement(SKDvManuXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(SKDvManuXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                }
                else {
                    this.SetElementWithValidation(SKDvManuXName, value, "SKDvManu", SKDvManuLocalType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (SKDvAuto, SKDvManu?, SZDvAuto, SZDeAuto, SKDeAuto)
        /// </para>
        /// </summary>
        public virtual decimal SZDvAuto {
            get {
                XElement x = this.GetElement(SZDvAutoXName);
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                this.SetElementWithValidation(SZDvAutoXName, value, "SZDvAuto", SZDvAutoLocalType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (SKDvAuto, SKDvManu?, SZDvAuto, SZDeAuto, SKDeAuto)
        /// </para>
        /// </summary>
        public virtual decimal SZDeAuto {
            get {
                XElement x = this.GetElement(SZDeAutoXName);
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                this.SetElementWithValidation(SZDeAutoXName, value, "SZDeAuto", SZDeAutoLocalType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (SKDvAuto, SKDvManu?, SZDvAuto, SZDeAuto, SKDeAuto)
        /// </para>
        /// </summary>
        public virtual decimal SKDeAuto {
            get {
                XElement x = this.GetElement(SKDeAutoXName);
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                this.SetElementWithValidation(SKDeAutoXName, value, "SKDeAuto", SKDeAutoLocalType.TypeDefinition);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<KDichtheitType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(SKDvAutoXName, typeof(decimal));
            localElementDictionary.Add(SKDvManuXName, typeof(decimal));
            localElementDictionary.Add(SZDvAutoXName, typeof(decimal));
            localElementDictionary.Add(SZDeAutoXName, typeof(decimal));
            localElementDictionary.Add(SKDeAutoXName, typeof(decimal));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        private class SKDvAutoLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(1024)), null, 0, 0, null, null, 0, null, null, 0, null, 1, XmlSchemaWhiteSpace.Collapse));
            
            private SKDvAutoLocalType() {
            }
        }
        
        private class SKDvManuLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(1024)), null, 0, 0, null, null, 0, null, null, 0, null, 1, XmlSchemaWhiteSpace.Collapse));
            
            private SKDvManuLocalType() {
            }
        }
        
        private class SZDvAutoLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(1024)), null, 0, 0, null, null, 0, null, null, 0, null, 3, XmlSchemaWhiteSpace.Collapse));
            
            private SZDvAutoLocalType() {
            }
        }
        
        private class SZDeAutoLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(1024)), null, 0, 0, null, null, 0, null, null, 0, null, 3, XmlSchemaWhiteSpace.Collapse));
            
            private SZDeAutoLocalType() {
            }
        }
        
        private class SKDeAutoLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(1024)), null, 0, 0, null, null, 0, null, null, 0, null, 1, XmlSchemaWhiteSpace.Collapse));
            
            private SKDeAutoLocalType() {
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (SKSvAuto, SKSvManu?, SZSvAuto, SZSeAuto, SKSeAuto)
    /// </para>
    /// </summary>
    public partial class KStandsicherheitType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName SKSvAutoXName = System.Xml.Linq.XName.Get("SKSvAuto", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName SKSvManuXName = System.Xml.Linq.XName.Get("SKSvManu", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName SZSvAutoXName = System.Xml.Linq.XName.Get("SZSvAuto", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName SZSeAutoXName = System.Xml.Linq.XName.Get("SZSeAuto", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName SKSeAutoXName = System.Xml.Linq.XName.Get("SKSeAuto", "http://www.bfr-abwasser.de");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("KStandsicherheitType", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator KStandsicherheitType(XElement xe) { return XTypedServices.ToXTypedElement<KStandsicherheitType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static KStandsicherheitType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(SKSvAutoXName), new NamedContentModelEntity(SKSvManuXName), new NamedContentModelEntity(SZSvAutoXName), new NamedContentModelEntity(SZSeAutoXName), new NamedContentModelEntity(SKSeAutoXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (SKSvAuto, SKSvManu?, SZSvAuto, SZSeAuto, SKSeAuto)
        /// </para>
        /// </summary>
        public KStandsicherheitType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (SKSvAuto, SKSvManu?, SZSvAuto, SZSeAuto, SKSeAuto)
        /// </para>
        /// </summary>
        public virtual decimal SKSvAuto {
            get {
                XElement x = this.GetElement(SKSvAutoXName);
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                this.SetElementWithValidation(SKSvAutoXName, value, "SKSvAuto", SKSvAutoLocalType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (SKSvAuto, SKSvManu?, SZSvAuto, SZSeAuto, SKSeAuto)
        /// </para>
        /// </summary>
        public virtual System.Decimal? SKSvManu {
            get {
                XElement x = this.GetElement(SKSvManuXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(SKSvManuXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                }
                else {
                    this.SetElementWithValidation(SKSvManuXName, value, "SKSvManu", SKSvManuLocalType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (SKSvAuto, SKSvManu?, SZSvAuto, SZSeAuto, SKSeAuto)
        /// </para>
        /// </summary>
        public virtual decimal SZSvAuto {
            get {
                XElement x = this.GetElement(SZSvAutoXName);
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                this.SetElementWithValidation(SZSvAutoXName, value, "SZSvAuto", SZSvAutoLocalType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (SKSvAuto, SKSvManu?, SZSvAuto, SZSeAuto, SKSeAuto)
        /// </para>
        /// </summary>
        public virtual decimal SZSeAuto {
            get {
                XElement x = this.GetElement(SZSeAutoXName);
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                this.SetElementWithValidation(SZSeAutoXName, value, "SZSeAuto", SZSeAutoLocalType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (SKSvAuto, SKSvManu?, SZSvAuto, SZSeAuto, SKSeAuto)
        /// </para>
        /// </summary>
        public virtual decimal SKSeAuto {
            get {
                XElement x = this.GetElement(SKSeAutoXName);
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                this.SetElementWithValidation(SKSeAutoXName, value, "SKSeAuto", SKSeAutoLocalType.TypeDefinition);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<KStandsicherheitType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(SKSvAutoXName, typeof(decimal));
            localElementDictionary.Add(SKSvManuXName, typeof(decimal));
            localElementDictionary.Add(SZSvAutoXName, typeof(decimal));
            localElementDictionary.Add(SZSeAutoXName, typeof(decimal));
            localElementDictionary.Add(SKSeAutoXName, typeof(decimal));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        private class SKSvAutoLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(1024)), null, 0, 0, null, null, 0, null, null, 0, null, 1, XmlSchemaWhiteSpace.Collapse));
            
            private SKSvAutoLocalType() {
            }
        }
        
        private class SKSvManuLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(1024)), null, 0, 0, null, null, 0, null, null, 0, null, 1, XmlSchemaWhiteSpace.Collapse));
            
            private SKSvManuLocalType() {
            }
        }
        
        private class SZSvAutoLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(1024)), null, 0, 0, null, null, 0, null, null, 0, null, 3, XmlSchemaWhiteSpace.Collapse));
            
            private SZSvAutoLocalType() {
            }
        }
        
        private class SZSeAutoLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(1024)), null, 0, 0, null, null, 0, null, null, 0, null, 3, XmlSchemaWhiteSpace.Collapse));
            
            private SZSeAutoLocalType() {
            }
        }
        
        private class SKSeAutoLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(1024)), null, 0, 0, null, null, 0, null, null, 0, null, 1, XmlSchemaWhiteSpace.Collapse));
            
            private SKSeAutoLocalType() {
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (SKBvAuto, SKBvManu?, SZBvAuto, SZBeAuto, SKBeAuto)
    /// </para>
    /// </summary>
    public partial class KBetriebssicherheitType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName SKBvAutoXName = System.Xml.Linq.XName.Get("SKBvAuto", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName SKBvManuXName = System.Xml.Linq.XName.Get("SKBvManu", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName SZBvAutoXName = System.Xml.Linq.XName.Get("SZBvAuto", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName SZBeAutoXName = System.Xml.Linq.XName.Get("SZBeAuto", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName SKBeAutoXName = System.Xml.Linq.XName.Get("SKBeAuto", "http://www.bfr-abwasser.de");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("KBetriebssicherheitType", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator KBetriebssicherheitType(XElement xe) { return XTypedServices.ToXTypedElement<KBetriebssicherheitType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static KBetriebssicherheitType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(SKBvAutoXName), new NamedContentModelEntity(SKBvManuXName), new NamedContentModelEntity(SZBvAutoXName), new NamedContentModelEntity(SZBeAutoXName), new NamedContentModelEntity(SKBeAutoXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (SKBvAuto, SKBvManu?, SZBvAuto, SZBeAuto, SKBeAuto)
        /// </para>
        /// </summary>
        public KBetriebssicherheitType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (SKBvAuto, SKBvManu?, SZBvAuto, SZBeAuto, SKBeAuto)
        /// </para>
        /// </summary>
        public virtual decimal SKBvAuto {
            get {
                XElement x = this.GetElement(SKBvAutoXName);
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                this.SetElementWithValidation(SKBvAutoXName, value, "SKBvAuto", SKBvAutoLocalType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (SKBvAuto, SKBvManu?, SZBvAuto, SZBeAuto, SKBeAuto)
        /// </para>
        /// </summary>
        public virtual System.Decimal? SKBvManu {
            get {
                XElement x = this.GetElement(SKBvManuXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(SKBvManuXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                }
                else {
                    this.SetElementWithValidation(SKBvManuXName, value, "SKBvManu", SKBvManuLocalType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (SKBvAuto, SKBvManu?, SZBvAuto, SZBeAuto, SKBeAuto)
        /// </para>
        /// </summary>
        public virtual decimal SZBvAuto {
            get {
                XElement x = this.GetElement(SZBvAutoXName);
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                this.SetElementWithValidation(SZBvAutoXName, value, "SZBvAuto", SZBvAutoLocalType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (SKBvAuto, SKBvManu?, SZBvAuto, SZBeAuto, SKBeAuto)
        /// </para>
        /// </summary>
        public virtual decimal SZBeAuto {
            get {
                XElement x = this.GetElement(SZBeAutoXName);
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                this.SetElementWithValidation(SZBeAutoXName, value, "SZBeAuto", SZBeAutoLocalType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (SKBvAuto, SKBvManu?, SZBvAuto, SZBeAuto, SKBeAuto)
        /// </para>
        /// </summary>
        public virtual decimal SKBeAuto {
            get {
                XElement x = this.GetElement(SKBeAutoXName);
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                this.SetElementWithValidation(SKBeAutoXName, value, "SKBeAuto", SKBeAutoLocalType.TypeDefinition);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<KBetriebssicherheitType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(SKBvAutoXName, typeof(decimal));
            localElementDictionary.Add(SKBvManuXName, typeof(decimal));
            localElementDictionary.Add(SZBvAutoXName, typeof(decimal));
            localElementDictionary.Add(SZBeAutoXName, typeof(decimal));
            localElementDictionary.Add(SKBeAutoXName, typeof(decimal));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        private class SKBvAutoLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(1024)), null, 0, 0, null, null, 0, null, null, 0, null, 1, XmlSchemaWhiteSpace.Collapse));
            
            private SKBvAutoLocalType() {
            }
        }
        
        private class SKBvManuLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(1024)), null, 0, 0, null, null, 0, null, null, 0, null, 1, XmlSchemaWhiteSpace.Collapse));
            
            private SKBvManuLocalType() {
            }
        }
        
        private class SZBvAutoLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(1024)), null, 0, 0, null, null, 0, null, null, 0, null, 3, XmlSchemaWhiteSpace.Collapse));
            
            private SZBvAutoLocalType() {
            }
        }
        
        private class SZBeAutoLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(1024)), null, 0, 0, null, null, 0, null, null, 0, null, 3, XmlSchemaWhiteSpace.Collapse));
            
            private SZBeAutoLocalType() {
            }
        }
        
        private class SKBeAutoLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(1024)), null, 0, 0, null, null, 0, null, null, 0, null, 1, XmlSchemaWhiteSpace.Collapse));
            
            private SKBeAutoLocalType() {
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Bewertungsverfahren?, Bewertungsdatum?, MassgebenderSchaden?, MassgebendeQuantifizierung?, ZahlVorlaeufig?, Zusatzpunkte?, ZahlEndgueltig?, KlasseAutomatisch?, KlasseManuell?)
    /// </para>
    /// </summary>
    public partial class BewertungType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName BewertungsverfahrenXName = System.Xml.Linq.XName.Get("Bewertungsverfahren", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName BewertungsdatumXName = System.Xml.Linq.XName.Get("Bewertungsdatum", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName MassgebenderSchadenXName = System.Xml.Linq.XName.Get("MassgebenderSchaden", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName MassgebendeQuantifizierungXName = System.Xml.Linq.XName.Get("MassgebendeQuantifizierung", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ZahlVorlaeufigXName = System.Xml.Linq.XName.Get("ZahlVorlaeufig", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ZusatzpunkteXName = System.Xml.Linq.XName.Get("Zusatzpunkte", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ZahlEndgueltigXName = System.Xml.Linq.XName.Get("ZahlEndgueltig", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName KlasseAutomatischXName = System.Xml.Linq.XName.Get("KlasseAutomatisch", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName KlasseManuellXName = System.Xml.Linq.XName.Get("KlasseManuell", "http://www.bfr-abwasser.de");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("BewertungType", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator BewertungType(XElement xe) { return XTypedServices.ToXTypedElement<BewertungType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static BewertungType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(BewertungsverfahrenXName), new NamedContentModelEntity(BewertungsdatumXName), new NamedContentModelEntity(MassgebenderSchadenXName), new NamedContentModelEntity(MassgebendeQuantifizierungXName), new NamedContentModelEntity(ZahlVorlaeufigXName), new NamedContentModelEntity(ZusatzpunkteXName), new NamedContentModelEntity(ZahlEndgueltigXName), new NamedContentModelEntity(KlasseAutomatischXName), new NamedContentModelEntity(KlasseManuellXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Bewertungsverfahren?, Bewertungsdatum?, MassgebenderSchaden?, MassgebendeQuantifizierung?, ZahlVorlaeufig?, Zusatzpunkte?, ZahlEndgueltig?, KlasseAutomatisch?, KlasseManuell?)
        /// </para>
        /// </summary>
        public BewertungType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Bewertungsverfahren?, Bewertungsdatum?, MassgebenderSchaden?, MassgebendeQuantifizierung?, ZahlVorlaeufig?, Zusatzpunkte?, ZahlEndgueltig?, KlasseAutomatisch?, KlasseManuell?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? Bewertungsverfahren {
            get {
                XElement x = this.GetElement(BewertungsverfahrenXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(BewertungsverfahrenXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                }
                else {
                    this.SetElementWithValidation(BewertungsverfahrenXName, value, "Bewertungsverfahren", global::www.bfr.abwasser.de.BewertungsverfahrenType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Bewertungsverfahren?, Bewertungsdatum?, MassgebenderSchaden?, MassgebendeQuantifizierung?, ZahlVorlaeufig?, Zusatzpunkte?, ZahlEndgueltig?, KlasseAutomatisch?, KlasseManuell?)
        /// </para>
        /// </summary>
        public virtual System.DateTime? Bewertungsdatum {
            get {
                XElement x = this.GetElement(BewertungsdatumXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<System.DateTime>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date).Datatype);
            }
            set {
                this.SetElement(BewertungsdatumXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Bewertungsverfahren?, Bewertungsdatum?, MassgebenderSchaden?, MassgebendeQuantifizierung?, ZahlVorlaeufig?, Zusatzpunkte?, ZahlEndgueltig?, KlasseAutomatisch?, KlasseManuell?)
        /// </para>
        /// </summary>
        public virtual string MassgebenderSchaden {
            get {
                XElement x = this.GetElement(MassgebenderSchadenXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(MassgebenderSchadenXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                else {
                    this.SetElementWithValidation(MassgebenderSchadenXName, value, "MassgebenderSchaden", MassgebenderSchadenLocalType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Bewertungsverfahren?, Bewertungsdatum?, MassgebenderSchaden?, MassgebendeQuantifizierung?, ZahlVorlaeufig?, Zusatzpunkte?, ZahlEndgueltig?, KlasseAutomatisch?, KlasseManuell?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? MassgebendeQuantifizierung {
            get {
                XElement x = this.GetElement(MassgebendeQuantifizierungXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(MassgebendeQuantifizierungXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                }
                else {
                    this.SetElementWithValidation(MassgebendeQuantifizierungXName, value, "MassgebendeQuantifizierung", MassgebendeQuantifizierungLocalType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Bewertungsverfahren?, Bewertungsdatum?, MassgebenderSchaden?, MassgebendeQuantifizierung?, ZahlVorlaeufig?, Zusatzpunkte?, ZahlEndgueltig?, KlasseAutomatisch?, KlasseManuell?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? ZahlVorlaeufig {
            get {
                XElement x = this.GetElement(ZahlVorlaeufigXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(ZahlVorlaeufigXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                }
                else {
                    this.SetElementWithValidation(ZahlVorlaeufigXName, value, "ZahlVorlaeufig", ZahlVorlaeufigLocalType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Bewertungsverfahren?, Bewertungsdatum?, MassgebenderSchaden?, MassgebendeQuantifizierung?, ZahlVorlaeufig?, Zusatzpunkte?, ZahlEndgueltig?, KlasseAutomatisch?, KlasseManuell?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? Zusatzpunkte {
            get {
                XElement x = this.GetElement(ZusatzpunkteXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(ZusatzpunkteXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                }
                else {
                    this.SetElementWithValidation(ZusatzpunkteXName, value, "Zusatzpunkte", ZusatzpunkteLocalType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Bewertungsverfahren?, Bewertungsdatum?, MassgebenderSchaden?, MassgebendeQuantifizierung?, ZahlVorlaeufig?, Zusatzpunkte?, ZahlEndgueltig?, KlasseAutomatisch?, KlasseManuell?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? ZahlEndgueltig {
            get {
                XElement x = this.GetElement(ZahlEndgueltigXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(ZahlEndgueltigXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                }
                else {
                    this.SetElementWithValidation(ZahlEndgueltigXName, value, "ZahlEndgueltig", ZahlEndgueltigLocalType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Bewertungsverfahren?, Bewertungsdatum?, MassgebenderSchaden?, MassgebendeQuantifizierung?, ZahlVorlaeufig?, Zusatzpunkte?, ZahlEndgueltig?, KlasseAutomatisch?, KlasseManuell?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? KlasseAutomatisch {
            get {
                XElement x = this.GetElement(KlasseAutomatischXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(KlasseAutomatischXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                }
                else {
                    this.SetElementWithValidation(KlasseAutomatischXName, value, "KlasseAutomatisch", KlasseAutomatischLocalType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Bewertungsverfahren?, Bewertungsdatum?, MassgebenderSchaden?, MassgebendeQuantifizierung?, ZahlVorlaeufig?, Zusatzpunkte?, ZahlEndgueltig?, KlasseAutomatisch?, KlasseManuell?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? KlasseManuell {
            get {
                XElement x = this.GetElement(KlasseManuellXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(KlasseManuellXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                }
                else {
                    this.SetElementWithValidation(KlasseManuellXName, value, "KlasseManuell", KlasseManuellLocalType.TypeDefinition);
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<BewertungType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(BewertungsverfahrenXName, typeof(decimal));
            localElementDictionary.Add(BewertungsdatumXName, typeof(System.DateTime));
            localElementDictionary.Add(MassgebenderSchadenXName, typeof(string));
            localElementDictionary.Add(MassgebendeQuantifizierungXName, typeof(decimal));
            localElementDictionary.Add(ZahlVorlaeufigXName, typeof(decimal));
            localElementDictionary.Add(ZusatzpunkteXName, typeof(decimal));
            localElementDictionary.Add(ZahlEndgueltigXName, typeof(decimal));
            localElementDictionary.Add(KlasseAutomatischXName, typeof(decimal));
            localElementDictionary.Add(KlasseManuellXName, typeof(decimal));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        private class MassgebenderSchadenLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(4)), null, 0, 0, null, null, 10, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
            
            private MassgebenderSchadenLocalType() {
            }
        }
        
        private class MassgebendeQuantifizierungLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(3200)), null, 2, 0, 10000m, null, 0, null, null, 0, null, 6, XmlSchemaWhiteSpace.Collapse));
            
            private MassgebendeQuantifizierungLocalType() {
            }
        }
        
        private class ZahlVorlaeufigLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(1024)), null, 0, 0, null, null, 0, null, null, 0, null, 3, XmlSchemaWhiteSpace.Collapse));
            
            private ZahlVorlaeufigLocalType() {
            }
        }
        
        private class ZusatzpunkteLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(1024)), null, 0, 0, null, null, 0, null, null, 0, null, 3, XmlSchemaWhiteSpace.Collapse));
            
            private ZusatzpunkteLocalType() {
            }
        }
        
        private class ZahlEndgueltigLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(1024)), null, 0, 0, null, null, 0, null, null, 0, null, 3, XmlSchemaWhiteSpace.Collapse));
            
            private ZahlEndgueltigLocalType() {
            }
        }
        
        private class KlasseAutomatischLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(1024)), null, 0, 0, null, null, 0, null, null, 0, null, 1, XmlSchemaWhiteSpace.Collapse));
            
            private KlasseAutomatischLocalType() {
            }
        }
        
        private class KlasseManuellLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(1024)), null, 0, 0, null, null, 0, null, null, 0, null, 1, XmlSchemaWhiteSpace.Collapse));
            
            private KlasseManuellLocalType() {
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (zulDeltaP, vorhDeltaP)
    /// </para>
    /// </summary>
    public partial class PruefDeltaPType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName zulDeltaPXName = System.Xml.Linq.XName.Get("zulDeltaP", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName vorhDeltaPXName = System.Xml.Linq.XName.Get("vorhDeltaP", "http://www.bfr-abwasser.de");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("PruefDeltaPType", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator PruefDeltaPType(XElement xe) { return XTypedServices.ToXTypedElement<PruefDeltaPType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static PruefDeltaPType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(zulDeltaPXName), new NamedContentModelEntity(vorhDeltaPXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (zulDeltaP, vorhDeltaP)
        /// </para>
        /// </summary>
        public PruefDeltaPType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (zulDeltaP, vorhDeltaP)
        /// </para>
        /// </summary>
        public virtual decimal zulDeltaP {
            get {
                XElement x = this.GetElement(zulDeltaPXName);
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
            set {
                this.SetElementWithValidation(zulDeltaPXName, value, "zulDeltaP", zulDeltaPLocalType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (zulDeltaP, vorhDeltaP)
        /// </para>
        /// </summary>
        public virtual decimal vorhDeltaP {
            get {
                XElement x = this.GetElement(vorhDeltaPXName);
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
            set {
                this.SetElementWithValidation(vorhDeltaPXName, value, "vorhDeltaP", vorhDeltaPLocalType.TypeDefinition);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<PruefDeltaPType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(zulDeltaPXName, typeof(decimal));
            localElementDictionary.Add(vorhDeltaPXName, typeof(decimal));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        private class zulDeltaPLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(3200)), null, 2, 0, 10000m, null, 0, null, null, 0, null, 6, XmlSchemaWhiteSpace.Collapse));
            
            private zulDeltaPLocalType() {
            }
        }
        
        private class vorhDeltaPLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(3200)), null, 2, 0, 10000m, null, 0, null, null, 0, null, 6, XmlSchemaWhiteSpace.Collapse));
            
            private vorhDeltaPLocalType() {
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (zulDeltaV, vorhDeltaV)
    /// </para>
    /// </summary>
    public partial class PruefDeltaVType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName zulDeltaVXName = System.Xml.Linq.XName.Get("zulDeltaV", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName vorhDeltaVXName = System.Xml.Linq.XName.Get("vorhDeltaV", "http://www.bfr-abwasser.de");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("PruefDeltaVType", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator PruefDeltaVType(XElement xe) { return XTypedServices.ToXTypedElement<PruefDeltaVType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static PruefDeltaVType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(zulDeltaVXName), new NamedContentModelEntity(vorhDeltaVXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (zulDeltaV, vorhDeltaV)
        /// </para>
        /// </summary>
        public PruefDeltaVType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (zulDeltaV, vorhDeltaV)
        /// </para>
        /// </summary>
        public virtual decimal zulDeltaV {
            get {
                XElement x = this.GetElement(zulDeltaVXName);
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
            set {
                this.SetElementWithValidation(zulDeltaVXName, value, "zulDeltaV", zulDeltaVLocalType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (zulDeltaV, vorhDeltaV)
        /// </para>
        /// </summary>
        public virtual decimal vorhDeltaV {
            get {
                XElement x = this.GetElement(vorhDeltaVXName);
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
            set {
                this.SetElementWithValidation(vorhDeltaVXName, value, "vorhDeltaV", vorhDeltaVLocalType.TypeDefinition);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<PruefDeltaVType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(zulDeltaVXName, typeof(decimal));
            localElementDictionary.Add(vorhDeltaVXName, typeof(decimal));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        private class zulDeltaVLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(3200)), null, 3, 0, 10000m, null, 0, null, null, 0, null, 7, XmlSchemaWhiteSpace.Collapse));
            
            private zulDeltaVLocalType() {
            }
        }
        
        private class vorhDeltaVLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(3200)), null, 3, 0, 10000m, null, 0, null, null, 0, null, 7, XmlSchemaWhiteSpace.Collapse));
            
            private vorhDeltaVLocalType() {
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Objektbezeichnung, Typ)
    /// </para>
    /// </summary>
    public partial class PruefObjektType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ObjektbezeichnungXName = System.Xml.Linq.XName.Get("Objektbezeichnung", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TypXName = System.Xml.Linq.XName.Get("Typ", "http://www.bfr-abwasser.de");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("PruefObjektType", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator PruefObjektType(XElement xe) { return XTypedServices.ToXTypedElement<PruefObjektType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static PruefObjektType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(ObjektbezeichnungXName), new NamedContentModelEntity(TypXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Objektbezeichnung, Typ)
        /// </para>
        /// </summary>
        public PruefObjektType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (Objektbezeichnung, Typ)
        /// </para>
        /// </summary>
        public virtual string Objektbezeichnung {
            get {
                XElement x = this.GetElement(ObjektbezeichnungXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(ObjektbezeichnungXName, value, "Objektbezeichnung", ObjektbezeichnungLocalType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (Objektbezeichnung, Typ)
        /// </para>
        /// </summary>
        public virtual decimal Typ {
            get {
                XElement x = this.GetElement(TypXName);
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                this.SetElementWithValidation(TypXName, value, "Typ", global::www.bfr.abwasser.de.AnlagentypType.TypeDefinition);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<PruefObjektType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(ObjektbezeichnungXName, typeof(string));
            localElementDictionary.Add(TypXName, typeof(decimal));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        private class ObjektbezeichnungLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(4)), null, 0, 0, null, null, 30, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
            
            private ObjektbezeichnungLocalType() {
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Filmname, Auftragskennung, Filmpfad?, FilmpfadIstAbsolut?, Videoablagereferenz, Frame?, Offsets?, Datendateien?, FilmObjekte)
    /// </para>
    /// </summary>
    public partial class FilmType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName FilmnameXName = System.Xml.Linq.XName.Get("Filmname", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName AuftragskennungXName = System.Xml.Linq.XName.Get("Auftragskennung", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName FilmpfadXName = System.Xml.Linq.XName.Get("Filmpfad", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName FilmpfadIstAbsolutXName = System.Xml.Linq.XName.Get("FilmpfadIstAbsolut", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName VideoablagereferenzXName = System.Xml.Linq.XName.Get("Videoablagereferenz", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName FrameXName = System.Xml.Linq.XName.Get("Frame", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName OffsetsXName = System.Xml.Linq.XName.Get("Offsets", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName DatendateienXName = System.Xml.Linq.XName.Get("Datendateien", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName FilmObjekteXName = System.Xml.Linq.XName.Get("FilmObjekte", "http://www.bfr-abwasser.de");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("FilmType", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator FilmType(XElement xe) { return XTypedServices.ToXTypedElement<FilmType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static FilmType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(FilmnameXName), new NamedContentModelEntity(AuftragskennungXName), new NamedContentModelEntity(FilmpfadXName), new NamedContentModelEntity(FilmpfadIstAbsolutXName), new NamedContentModelEntity(VideoablagereferenzXName), new NamedContentModelEntity(FrameXName), new NamedContentModelEntity(OffsetsXName), new NamedContentModelEntity(DatendateienXName), new NamedContentModelEntity(FilmObjekteXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Filmname, Auftragskennung, Filmpfad?, FilmpfadIstAbsolut?, Videoablagereferenz, Frame?, Offsets?, Datendateien?, FilmObjekte)
        /// </para>
        /// </summary>
        public FilmType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (Filmname, Auftragskennung, Filmpfad?, FilmpfadIstAbsolut?, Videoablagereferenz, Frame?, Offsets?, Datendateien?, FilmObjekte)
        /// </para>
        /// </summary>
        public virtual string Filmname {
            get {
                XElement x = this.GetElement(FilmnameXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(FilmnameXName, value, "Filmname", FilmnameLocalType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (Filmname, Auftragskennung, Filmpfad?, FilmpfadIstAbsolut?, Videoablagereferenz, Frame?, Offsets?, Datendateien?, FilmObjekte)
        /// </para>
        /// </summary>
        public virtual decimal Auftragskennung {
            get {
                XElement x = this.GetElement(AuftragskennungXName);
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                this.SetElementWithValidation(AuftragskennungXName, value, "Auftragskennung", AuftragskennungLocalType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Filmname, Auftragskennung, Filmpfad?, FilmpfadIstAbsolut?, Videoablagereferenz, Frame?, Offsets?, Datendateien?, FilmObjekte)
        /// </para>
        /// </summary>
        public virtual string Filmpfad {
            get {
                XElement x = this.GetElement(FilmpfadXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(FilmpfadXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                else {
                    this.SetElementWithValidation(FilmpfadXName, value, "Filmpfad", FilmpfadLocalType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Filmname, Auftragskennung, Filmpfad?, FilmpfadIstAbsolut?, Videoablagereferenz, Frame?, Offsets?, Datendateien?, FilmObjekte)
        /// </para>
        /// </summary>
        public virtual System.Boolean? FilmpfadIstAbsolut {
            get {
                XElement x = this.GetElement(FilmpfadIstAbsolutXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
            set {
                this.SetElement(FilmpfadIstAbsolutXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (Filmname, Auftragskennung, Filmpfad?, FilmpfadIstAbsolut?, Videoablagereferenz, Frame?, Offsets?, Datendateien?, FilmObjekte)
        /// </para>
        /// </summary>
        public virtual string Videoablagereferenz {
            get {
                XElement x = this.GetElement(VideoablagereferenzXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(VideoablagereferenzXName, value, "Videoablagereferenz", VideoablagereferenzLocalType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Filmname, Auftragskennung, Filmpfad?, FilmpfadIstAbsolut?, Videoablagereferenz, Frame?, Offsets?, Datendateien?, FilmObjekte)
        /// </para>
        /// </summary>
        public virtual FrameType Frame {
            get {
                XElement x = this.GetElement(FrameXName);
                return ((FrameType)(x));
            }
            set {
                this.SetElement(FrameXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Filmname, Auftragskennung, Filmpfad?, FilmpfadIstAbsolut?, Videoablagereferenz, Frame?, Offsets?, Datendateien?, FilmObjekte)
        /// </para>
        /// </summary>
        public virtual OffsetsLocalType Offsets {
            get {
                XElement x = this.GetElement(OffsetsXName);
                return ((OffsetsLocalType)(x));
            }
            set {
                this.SetElement(OffsetsXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Filmname, Auftragskennung, Filmpfad?, FilmpfadIstAbsolut?, Videoablagereferenz, Frame?, Offsets?, Datendateien?, FilmObjekte)
        /// </para>
        /// </summary>
        public virtual DatendateienLocalType Datendateien {
            get {
                XElement x = this.GetElement(DatendateienXName);
                return ((DatendateienLocalType)(x));
            }
            set {
                this.SetElement(DatendateienXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (Filmname, Auftragskennung, Filmpfad?, FilmpfadIstAbsolut?, Videoablagereferenz, Frame?, Offsets?, Datendateien?, FilmObjekte)
        /// </para>
        /// </summary>
        public virtual FilmObjekteLocalType FilmObjekte {
            get {
                XElement x = this.GetElement(FilmObjekteXName);
                return ((FilmObjekteLocalType)(x));
            }
            set {
                this.SetElement(FilmObjekteXName, value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<FilmType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(FilmnameXName, typeof(string));
            localElementDictionary.Add(AuftragskennungXName, typeof(decimal));
            localElementDictionary.Add(FilmpfadXName, typeof(string));
            localElementDictionary.Add(FilmpfadIstAbsolutXName, typeof(bool));
            localElementDictionary.Add(VideoablagereferenzXName, typeof(string));
            localElementDictionary.Add(FrameXName, typeof(FrameType));
            localElementDictionary.Add(OffsetsXName, typeof(OffsetsLocalType));
            localElementDictionary.Add(DatendateienXName, typeof(DatendateienLocalType));
            localElementDictionary.Add(FilmObjekteXName, typeof(FilmObjekteLocalType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        private class FilmnameLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(4)), null, 0, 0, null, null, 255, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
            
            private FilmnameLocalType() {
            }
        }
        
        private class AuftragskennungLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(1024)), null, 0, 0, null, null, 0, null, null, 0, null, 6, XmlSchemaWhiteSpace.Collapse));
            
            private AuftragskennungLocalType() {
            }
        }
        
        private class FilmpfadLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(4)), null, 0, 0, null, null, 255, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
            
            private FilmpfadLocalType() {
            }
        }
        
        private class VideoablagereferenzLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(4)), null, 0, 0, null, null, 30, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
            
            private VideoablagereferenzLocalType() {
            }
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Offset+)
        /// </para>
        /// </summary>
        public partial class OffsetsLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName OffsetXName = System.Xml.Linq.XName.Get("Offset", "http://www.bfr-abwasser.de");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XTypedList<OffsetType> OffsetField;
            
            private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("Offsets", "http://www.bfr-abwasser.de");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;
            
		public static explicit operator OffsetsLocalType(XElement xe) { return XTypedServices.ToXTypedElement<OffsetsLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static OffsetsLocalType() {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(OffsetXName));
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (Offset+)
            /// </para>
            /// </summary>
            public OffsetsLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required, repeating
            /// </para>
            /// <para>
            /// Regular expression: (Offset+)
            /// </para>
            /// </summary>
            public virtual IList<OffsetType> Offset {
                get {
                    if ((this.OffsetField == null)) {
                        this.OffsetField = new XTypedList<OffsetType>(this, LinqToXsdTypeManager.Instance, OffsetXName);
                    }
                    return this.OffsetField;
                }
                set {
                    if ((value == null)) {
                        this.OffsetField = null;
                    }
                    else {
                        if ((this.OffsetField == null)) {
                            this.OffsetField = XTypedList<OffsetType>.Initialize(this, LinqToXsdTypeManager.Instance, value, OffsetXName);
                        }
                        else {
                            XTypedServices.SetList<OffsetType>(this.OffsetField, value);
                        }
                    }
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            System.Xml.Linq.XName IXMetaData.SchemaName {
                get {
                    return xName;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<OffsetsLocalType>(this);
            }
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(OffsetXName, typeof(OffsetType));
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return contentModel;
            }
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Datendatei*)
        /// </para>
        /// </summary>
        public partial class DatendateienLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName DatendateiXName = System.Xml.Linq.XName.Get("Datendatei", "http://www.bfr-abwasser.de");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XSimpleList<string> DatendateiField;
            
            private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("Datendateien", "http://www.bfr-abwasser.de");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;
            
		public static explicit operator DatendateienLocalType(XElement xe) { return XTypedServices.ToXTypedElement<DatendateienLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static DatendateienLocalType() {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(DatendateiXName));
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (Datendatei*)
            /// </para>
            /// </summary>
            public DatendateienLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional, repeating
            /// </para>
            /// <para>
            /// Regular expression: (Datendatei*)
            /// </para>
            /// </summary>
            public virtual IList<string> Datendatei {
                get {
                    if ((this.DatendateiField == null)) {
                        this.DatendateiField = new XSimpleList<string>(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, DatendateiXName);
                    }
                    return this.DatendateiField;
                }
                set {
                    if ((value == null)) {
                        this.DatendateiField = null;
                    }
                    else {
                        if ((this.DatendateiField == null)) {
                            this.DatendateiField = XSimpleList<string>.Initialize(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, value, DatendateiXName);
                        }
                        else {
                            XTypedServices.SetList<System.String>(this.DatendateiField, value);
                        }
                    }
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            System.Xml.Linq.XName IXMetaData.SchemaName {
                get {
                    return xName;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<DatendateienLocalType>(this);
            }
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(DatendateiXName, typeof(string));
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return contentModel;
            }
            
            private class DatendateiLocalType {
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(4)), null, 0, 0, null, null, 255, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
                
                private DatendateiLocalType() {
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (FilmObjekt+)
        /// </para>
        /// </summary>
        public partial class FilmObjekteLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName FilmObjektXName = System.Xml.Linq.XName.Get("FilmObjekt", "http://www.bfr-abwasser.de");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XTypedList<FilmObjektType> FilmObjektField;
            
            private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("FilmObjekte", "http://www.bfr-abwasser.de");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;
            
		public static explicit operator FilmObjekteLocalType(XElement xe) { return XTypedServices.ToXTypedElement<FilmObjekteLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static FilmObjekteLocalType() {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(FilmObjektXName));
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (FilmObjekt+)
            /// </para>
            /// </summary>
            public FilmObjekteLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required, repeating
            /// </para>
            /// <para>
            /// Regular expression: (FilmObjekt+)
            /// </para>
            /// </summary>
            public virtual IList<FilmObjektType> FilmObjekt {
                get {
                    if ((this.FilmObjektField == null)) {
                        this.FilmObjektField = new XTypedList<FilmObjektType>(this, LinqToXsdTypeManager.Instance, FilmObjektXName);
                    }
                    return this.FilmObjektField;
                }
                set {
                    if ((value == null)) {
                        this.FilmObjektField = null;
                    }
                    else {
                        if ((this.FilmObjektField == null)) {
                            this.FilmObjektField = XTypedList<FilmObjektType>.Initialize(this, LinqToXsdTypeManager.Instance, value, FilmObjektXName);
                        }
                        else {
                            XTypedServices.SetList<FilmObjektType>(this.FilmObjektField, value);
                        }
                    }
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            System.Xml.Linq.XName IXMetaData.SchemaName {
                get {
                    return xName;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<FilmObjekteLocalType>(this);
            }
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(FilmObjektXName, typeof(FilmObjektType));
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return contentModel;
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (fps, Start, Ende)
    /// </para>
    /// </summary>
    public partial class FrameType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName fpsXName = System.Xml.Linq.XName.Get("fps", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName StartXName = System.Xml.Linq.XName.Get("Start", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName EndeXName = System.Xml.Linq.XName.Get("Ende", "http://www.bfr-abwasser.de");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("FrameType", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator FrameType(XElement xe) { return XTypedServices.ToXTypedElement<FrameType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static FrameType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(fpsXName), new NamedContentModelEntity(StartXName), new NamedContentModelEntity(EndeXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (fps, Start, Ende)
        /// </para>
        /// </summary>
        public FrameType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (fps, Start, Ende)
        /// </para>
        /// </summary>
        public virtual decimal fps {
            get {
                XElement x = this.GetElement(fpsXName);
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                this.SetElementWithValidation(fpsXName, value, "fps", fpsLocalType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (fps, Start, Ende)
        /// </para>
        /// </summary>
        public virtual decimal Start {
            get {
                XElement x = this.GetElement(StartXName);
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                this.SetElementWithValidation(StartXName, value, "Start", StartLocalType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (fps, Start, Ende)
        /// </para>
        /// </summary>
        public virtual decimal Ende {
            get {
                XElement x = this.GetElement(EndeXName);
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                this.SetElementWithValidation(EndeXName, value, "Ende", EndeLocalType.TypeDefinition);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<FrameType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(fpsXName, typeof(decimal));
            localElementDictionary.Add(StartXName, typeof(decimal));
            localElementDictionary.Add(EndeXName, typeof(decimal));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        private class fpsLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(1024)), null, 0, 0, null, null, 0, null, null, 0, null, 3, XmlSchemaWhiteSpace.Collapse));
            
            private fpsLocalType() {
            }
        }
        
        private class StartLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(1024)), null, 0, 0, null, null, 0, null, null, 0, null, 10, XmlSchemaWhiteSpace.Collapse));
            
            private StartLocalType() {
            }
        }
        
        private class EndeLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(1024)), null, 0, 0, null, null, 0, null, null, 0, null, 10, XmlSchemaWhiteSpace.Collapse));
            
            private EndeLocalType() {
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (TcFrameNr, MPEGFrameNr)
    /// </para>
    /// </summary>
    public partial class OffsetType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TcFrameNrXName = System.Xml.Linq.XName.Get("TcFrameNr", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName MPEGFrameNrXName = System.Xml.Linq.XName.Get("MPEGFrameNr", "http://www.bfr-abwasser.de");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("OffsetType", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator OffsetType(XElement xe) { return XTypedServices.ToXTypedElement<OffsetType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static OffsetType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(TcFrameNrXName), new NamedContentModelEntity(MPEGFrameNrXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (TcFrameNr, MPEGFrameNr)
        /// </para>
        /// </summary>
        public OffsetType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (TcFrameNr, MPEGFrameNr)
        /// </para>
        /// </summary>
        public virtual decimal TcFrameNr {
            get {
                XElement x = this.GetElement(TcFrameNrXName);
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                this.SetElementWithValidation(TcFrameNrXName, value, "TcFrameNr", TcFrameNrLocalType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (TcFrameNr, MPEGFrameNr)
        /// </para>
        /// </summary>
        public virtual decimal MPEGFrameNr {
            get {
                XElement x = this.GetElement(MPEGFrameNrXName);
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                this.SetElementWithValidation(MPEGFrameNrXName, value, "MPEGFrameNr", MPEGFrameNrLocalType.TypeDefinition);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<OffsetType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(TcFrameNrXName, typeof(decimal));
            localElementDictionary.Add(MPEGFrameNrXName, typeof(decimal));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        private class TcFrameNrLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(1024)), null, 0, 0, null, null, 0, null, null, 0, null, 10, XmlSchemaWhiteSpace.Collapse));
            
            private TcFrameNrLocalType() {
            }
        }
        
        private class MPEGFrameNrLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(1024)), null, 0, 0, null, null, 0, null, null, 0, null, 10, XmlSchemaWhiteSpace.Collapse));
            
            private MPEGFrameNrLocalType() {
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Objektbezeichnung, Typ, Inspektionsrichtung?)
    /// </para>
    /// </summary>
    public partial class FilmObjektType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ObjektbezeichnungXName = System.Xml.Linq.XName.Get("Objektbezeichnung", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TypXName = System.Xml.Linq.XName.Get("Typ", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName InspektionsrichtungXName = System.Xml.Linq.XName.Get("Inspektionsrichtung", "http://www.bfr-abwasser.de");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("FilmObjektType", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator FilmObjektType(XElement xe) { return XTypedServices.ToXTypedElement<FilmObjektType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static FilmObjektType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(ObjektbezeichnungXName), new NamedContentModelEntity(TypXName), new NamedContentModelEntity(InspektionsrichtungXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Objektbezeichnung, Typ, Inspektionsrichtung?)
        /// </para>
        /// </summary>
        public FilmObjektType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (Objektbezeichnung, Typ, Inspektionsrichtung?)
        /// </para>
        /// </summary>
        public virtual string Objektbezeichnung {
            get {
                XElement x = this.GetElement(ObjektbezeichnungXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(ObjektbezeichnungXName, value, "Objektbezeichnung", ObjektbezeichnungLocalType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (Objektbezeichnung, Typ, Inspektionsrichtung?)
        /// </para>
        /// </summary>
        public virtual decimal Typ {
            get {
                XElement x = this.GetElement(TypXName);
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                this.SetElementWithValidation(TypXName, value, "Typ", global::www.bfr.abwasser.de.AnlagentypType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Objektbezeichnung, Typ, Inspektionsrichtung?)
        /// </para>
        /// </summary>
        public virtual string Inspektionsrichtung {
            get {
                XElement x = this.GetElement(InspektionsrichtungXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(InspektionsrichtungXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                else {
                    this.SetElementWithValidation(InspektionsrichtungXName, value, "Inspektionsrichtung", global::www.bfr.abwasser.de.InspektionsrichtungType.TypeDefinition);
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<FilmObjektType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(ObjektbezeichnungXName, typeof(string));
            localElementDictionary.Add(TypXName, typeof(decimal));
            localElementDictionary.Add(InspektionsrichtungXName, typeof(string));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        private class ObjektbezeichnungLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(4)), null, 0, 0, null, null, 30, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
            
            private ObjektbezeichnungLocalType() {
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Kennung, Beschreibung?, Verfahrensvorgaben?, Rechennetz?, Gebiete?, Flaechen?, Systembelastungen?, Berechnungen?)
    /// </para>
    /// </summary>
    public partial class HydraulikdatenType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName KennungXName = System.Xml.Linq.XName.Get("Kennung", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName BeschreibungXName = System.Xml.Linq.XName.Get("Beschreibung", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName VerfahrensvorgabenXName = System.Xml.Linq.XName.Get("Verfahrensvorgaben", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName RechennetzXName = System.Xml.Linq.XName.Get("Rechennetz", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName GebieteXName = System.Xml.Linq.XName.Get("Gebiete", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName FlaechenXName = System.Xml.Linq.XName.Get("Flaechen", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName SystembelastungenXName = System.Xml.Linq.XName.Get("Systembelastungen", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName BerechnungenXName = System.Xml.Linq.XName.Get("Berechnungen", "http://www.bfr-abwasser.de");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("HydraulikdatenType", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator HydraulikdatenType(XElement xe) { return XTypedServices.ToXTypedElement<HydraulikdatenType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static HydraulikdatenType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(KennungXName), new NamedContentModelEntity(BeschreibungXName), new NamedContentModelEntity(VerfahrensvorgabenXName), new NamedContentModelEntity(RechennetzXName), new NamedContentModelEntity(GebieteXName), new NamedContentModelEntity(FlaechenXName), new NamedContentModelEntity(SystembelastungenXName), new NamedContentModelEntity(BerechnungenXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Kennung, Beschreibung?, Verfahrensvorgaben?, Rechennetz?, Gebiete?, Flaechen?, Systembelastungen?, Berechnungen?)
        /// </para>
        /// </summary>
        public HydraulikdatenType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (Kennung, Beschreibung?, Verfahrensvorgaben?, Rechennetz?, Gebiete?, Flaechen?, Systembelastungen?, Berechnungen?)
        /// </para>
        /// </summary>
        public virtual string Kennung {
            get {
                XElement x = this.GetElement(KennungXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(KennungXName, value, "Kennung", KennungLocalType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Kennung, Beschreibung?, Verfahrensvorgaben?, Rechennetz?, Gebiete?, Flaechen?, Systembelastungen?, Berechnungen?)
        /// </para>
        /// </summary>
        public virtual string Beschreibung {
            get {
                XElement x = this.GetElement(BeschreibungXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(BeschreibungXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                else {
                    this.SetElementWithValidation(BeschreibungXName, value, "Beschreibung", BeschreibungLocalType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Kennung, Beschreibung?, Verfahrensvorgaben?, Rechennetz?, Gebiete?, Flaechen?, Systembelastungen?, Berechnungen?)
        /// </para>
        /// </summary>
        public virtual VerfahrensvorgabenLocalType Verfahrensvorgaben {
            get {
                XElement x = this.GetElement(VerfahrensvorgabenXName);
                return ((VerfahrensvorgabenLocalType)(x));
            }
            set {
                this.SetElement(VerfahrensvorgabenXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Kennung, Beschreibung?, Verfahrensvorgaben?, Rechennetz?, Gebiete?, Flaechen?, Systembelastungen?, Berechnungen?)
        /// </para>
        /// </summary>
        public virtual RechennetzType Rechennetz {
            get {
                XElement x = this.GetElement(RechennetzXName);
                return ((RechennetzType)(x));
            }
            set {
                this.SetElement(RechennetzXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Kennung, Beschreibung?, Verfahrensvorgaben?, Rechennetz?, Gebiete?, Flaechen?, Systembelastungen?, Berechnungen?)
        /// </para>
        /// </summary>
        public virtual GebieteLocalType Gebiete {
            get {
                XElement x = this.GetElement(GebieteXName);
                return ((GebieteLocalType)(x));
            }
            set {
                this.SetElement(GebieteXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Kennung, Beschreibung?, Verfahrensvorgaben?, Rechennetz?, Gebiete?, Flaechen?, Systembelastungen?, Berechnungen?)
        /// </para>
        /// </summary>
        public virtual FlaechenLocalType Flaechen {
            get {
                XElement x = this.GetElement(FlaechenXName);
                return ((FlaechenLocalType)(x));
            }
            set {
                this.SetElement(FlaechenXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Kennung, Beschreibung?, Verfahrensvorgaben?, Rechennetz?, Gebiete?, Flaechen?, Systembelastungen?, Berechnungen?)
        /// </para>
        /// </summary>
        public virtual SystembelastungenLocalType Systembelastungen {
            get {
                XElement x = this.GetElement(SystembelastungenXName);
                return ((SystembelastungenLocalType)(x));
            }
            set {
                this.SetElement(SystembelastungenXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Kennung, Beschreibung?, Verfahrensvorgaben?, Rechennetz?, Gebiete?, Flaechen?, Systembelastungen?, Berechnungen?)
        /// </para>
        /// </summary>
        public virtual BerechnungenLocalType Berechnungen {
            get {
                XElement x = this.GetElement(BerechnungenXName);
                return ((BerechnungenLocalType)(x));
            }
            set {
                this.SetElement(BerechnungenXName, value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<HydraulikdatenType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(KennungXName, typeof(string));
            localElementDictionary.Add(BeschreibungXName, typeof(string));
            localElementDictionary.Add(VerfahrensvorgabenXName, typeof(VerfahrensvorgabenLocalType));
            localElementDictionary.Add(RechennetzXName, typeof(RechennetzType));
            localElementDictionary.Add(GebieteXName, typeof(GebieteLocalType));
            localElementDictionary.Add(FlaechenXName, typeof(FlaechenLocalType));
            localElementDictionary.Add(SystembelastungenXName, typeof(SystembelastungenLocalType));
            localElementDictionary.Add(BerechnungenXName, typeof(BerechnungenLocalType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        private class KennungLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(6)), null, 0, 0, null, null, 5, null, null, 5, null, 0, XmlSchemaWhiteSpace.Preserve));
            
            private KennungLocalType() {
            }
        }
        
        private class BeschreibungLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(4)), null, 0, 0, null, null, 100, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
            
            private BeschreibungLocalType() {
            }
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Verfahren+)
        /// </para>
        /// </summary>
        public partial class VerfahrensvorgabenLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName VerfahrenXName = System.Xml.Linq.XName.Get("Verfahren", "http://www.bfr-abwasser.de");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XTypedList<Verfahrentype> VerfahrenField;
            
            private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("Verfahrensvorgaben", "http://www.bfr-abwasser.de");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;
            
		public static explicit operator VerfahrensvorgabenLocalType(XElement xe) { return XTypedServices.ToXTypedElement<VerfahrensvorgabenLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static VerfahrensvorgabenLocalType() {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(VerfahrenXName));
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (Verfahren+)
            /// </para>
            /// </summary>
            public VerfahrensvorgabenLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required, repeating
            /// </para>
            /// <para>
            /// Regular expression: (Verfahren+)
            /// </para>
            /// </summary>
            public virtual IList<Verfahrentype> Verfahren {
                get {
                    if ((this.VerfahrenField == null)) {
                        this.VerfahrenField = new XTypedList<Verfahrentype>(this, LinqToXsdTypeManager.Instance, VerfahrenXName);
                    }
                    return this.VerfahrenField;
                }
                set {
                    if ((value == null)) {
                        this.VerfahrenField = null;
                    }
                    else {
                        if ((this.VerfahrenField == null)) {
                            this.VerfahrenField = XTypedList<Verfahrentype>.Initialize(this, LinqToXsdTypeManager.Instance, value, VerfahrenXName);
                        }
                        else {
                            XTypedServices.SetList<Verfahrentype>(this.VerfahrenField, value);
                        }
                    }
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            System.Xml.Linq.XName IXMetaData.SchemaName {
                get {
                    return xName;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<VerfahrensvorgabenLocalType>(this);
            }
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(VerfahrenXName, typeof(Verfahrentype));
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return contentModel;
            }
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Gebiet+)
        /// </para>
        /// </summary>
        public partial class GebieteLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName GebietXName = System.Xml.Linq.XName.Get("Gebiet", "http://www.bfr-abwasser.de");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XTypedList<GebietType> GebietField;
            
            private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("Gebiete", "http://www.bfr-abwasser.de");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;
            
		public static explicit operator GebieteLocalType(XElement xe) { return XTypedServices.ToXTypedElement<GebieteLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static GebieteLocalType() {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(GebietXName));
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (Gebiet+)
            /// </para>
            /// </summary>
            public GebieteLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required, repeating
            /// </para>
            /// <para>
            /// Regular expression: (Gebiet+)
            /// </para>
            /// </summary>
            public virtual IList<GebietType> Gebiet {
                get {
                    if ((this.GebietField == null)) {
                        this.GebietField = new XTypedList<GebietType>(this, LinqToXsdTypeManager.Instance, GebietXName);
                    }
                    return this.GebietField;
                }
                set {
                    if ((value == null)) {
                        this.GebietField = null;
                    }
                    else {
                        if ((this.GebietField == null)) {
                            this.GebietField = XTypedList<GebietType>.Initialize(this, LinqToXsdTypeManager.Instance, value, GebietXName);
                        }
                        else {
                            XTypedServices.SetList<GebietType>(this.GebietField, value);
                        }
                    }
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            System.Xml.Linq.XName IXMetaData.SchemaName {
                get {
                    return xName;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<GebieteLocalType>(this);
            }
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(GebietXName, typeof(GebietType));
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return contentModel;
            }
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Flaeche+)
        /// </para>
        /// </summary>
        public partial class FlaechenLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName FlaecheXName = System.Xml.Linq.XName.Get("Flaeche", "http://www.bfr-abwasser.de");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XTypedList<FlaecheType> FlaecheField;
            
            private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("Flaechen", "http://www.bfr-abwasser.de");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;
            
		public static explicit operator FlaechenLocalType(XElement xe) { return XTypedServices.ToXTypedElement<FlaechenLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static FlaechenLocalType() {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(FlaecheXName));
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (Flaeche+)
            /// </para>
            /// </summary>
            public FlaechenLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required, repeating
            /// </para>
            /// <para>
            /// Regular expression: (Flaeche+)
            /// </para>
            /// </summary>
            public virtual IList<FlaecheType> Flaeche {
                get {
                    if ((this.FlaecheField == null)) {
                        this.FlaecheField = new XTypedList<FlaecheType>(this, LinqToXsdTypeManager.Instance, FlaecheXName);
                    }
                    return this.FlaecheField;
                }
                set {
                    if ((value == null)) {
                        this.FlaecheField = null;
                    }
                    else {
                        if ((this.FlaecheField == null)) {
                            this.FlaecheField = XTypedList<FlaecheType>.Initialize(this, LinqToXsdTypeManager.Instance, value, FlaecheXName);
                        }
                        else {
                            XTypedServices.SetList<FlaecheType>(this.FlaecheField, value);
                        }
                    }
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            System.Xml.Linq.XName IXMetaData.SchemaName {
                get {
                    return xName;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<FlaechenLocalType>(this);
            }
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(FlaecheXName, typeof(FlaecheType));
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return contentModel;
            }
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Niederschlaege?, Trockenwetterabflussspenden?, Einleiterkollektive?)
        /// </para>
        /// </summary>
        public partial class SystembelastungenLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName NiederschlaegeXName = System.Xml.Linq.XName.Get("Niederschlaege", "http://www.bfr-abwasser.de");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName TrockenwetterabflussspendenXName = System.Xml.Linq.XName.Get("Trockenwetterabflussspenden", "http://www.bfr-abwasser.de");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName EinleiterkollektiveXName = System.Xml.Linq.XName.Get("Einleiterkollektive", "http://www.bfr-abwasser.de");
            
            private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("Systembelastungen", "http://www.bfr-abwasser.de");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;
            
		public static explicit operator SystembelastungenLocalType(XElement xe) { return XTypedServices.ToXTypedElement<SystembelastungenLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static SystembelastungenLocalType() {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(NiederschlaegeXName), new NamedContentModelEntity(TrockenwetterabflussspendenXName), new NamedContentModelEntity(EinleiterkollektiveXName));
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (Niederschlaege?, Trockenwetterabflussspenden?, Einleiterkollektive?)
            /// </para>
            /// </summary>
            public SystembelastungenLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (Niederschlaege?, Trockenwetterabflussspenden?, Einleiterkollektive?)
            /// </para>
            /// </summary>
            public virtual NiederschlaegeLocalType Niederschlaege {
                get {
                    XElement x = this.GetElement(NiederschlaegeXName);
                    return ((NiederschlaegeLocalType)(x));
                }
                set {
                    this.SetElement(NiederschlaegeXName, value);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (Niederschlaege?, Trockenwetterabflussspenden?, Einleiterkollektive?)
            /// </para>
            /// </summary>
            public virtual TrockenwetterabflussspendenLocalType Trockenwetterabflussspenden {
                get {
                    XElement x = this.GetElement(TrockenwetterabflussspendenXName);
                    return ((TrockenwetterabflussspendenLocalType)(x));
                }
                set {
                    this.SetElement(TrockenwetterabflussspendenXName, value);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (Niederschlaege?, Trockenwetterabflussspenden?, Einleiterkollektive?)
            /// </para>
            /// </summary>
            public virtual EinleiterkollektiveLocalType Einleiterkollektive {
                get {
                    XElement x = this.GetElement(EinleiterkollektiveXName);
                    return ((EinleiterkollektiveLocalType)(x));
                }
                set {
                    this.SetElement(EinleiterkollektiveXName, value);
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            System.Xml.Linq.XName IXMetaData.SchemaName {
                get {
                    return xName;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<SystembelastungenLocalType>(this);
            }
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(NiederschlaegeXName, typeof(NiederschlaegeLocalType));
                localElementDictionary.Add(TrockenwetterabflussspendenXName, typeof(TrockenwetterabflussspendenLocalType));
                localElementDictionary.Add(EinleiterkollektiveXName, typeof(EinleiterkollektiveLocalType));
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return contentModel;
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (Niederschlag*)
            /// </para>
            /// </summary>
            public partial class NiederschlaegeLocalType : XTypedElement, IXMetaData {
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName NiederschlagXName = System.Xml.Linq.XName.Get("Niederschlag", "http://www.bfr-abwasser.de");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                private XTypedList<NiederschlagType> NiederschlagField;
                
                private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("Niederschlaege", "http://www.bfr-abwasser.de");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                private static ContentModelEntity contentModel;
                
		public static explicit operator NiederschlaegeLocalType(XElement xe) { return XTypedServices.ToXTypedElement<NiederschlaegeLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
                
                static NiederschlaegeLocalType() {
                    BuildElementDictionary();
                    contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(NiederschlagXName));
                }
                
                /// <summary>
                /// <para>
                /// Regular expression: (Niederschlag*)
                /// </para>
                /// </summary>
                public NiederschlaegeLocalType() {
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: optional, repeating
                /// </para>
                /// <para>
                /// Regular expression: (Niederschlag*)
                /// </para>
                /// </summary>
                public virtual IList<NiederschlagType> Niederschlag {
                    get {
                        if ((this.NiederschlagField == null)) {
                            this.NiederschlagField = new XTypedList<NiederschlagType>(this, LinqToXsdTypeManager.Instance, NiederschlagXName);
                        }
                        return this.NiederschlagField;
                    }
                    set {
                        if ((value == null)) {
                            this.NiederschlagField = null;
                        }
                        else {
                            if ((this.NiederschlagField == null)) {
                                this.NiederschlagField = XTypedList<NiederschlagType>.Initialize(this, LinqToXsdTypeManager.Instance, value, NiederschlagXName);
                            }
                            else {
                                XTypedServices.SetList<NiederschlagType>(this.NiederschlagField, value);
                            }
                        }
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
                    get {
                        return localElementDictionary;
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                System.Xml.Linq.XName IXMetaData.SchemaName {
                    get {
                        return xName;
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                SchemaOrigin IXMetaData.TypeOrigin {
                    get {
                        return SchemaOrigin.Fragment;
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                ILinqToXsdTypeManager IXMetaData.TypeManager {
                    get {
                        return LinqToXsdTypeManager.Instance;
                    }
                }
                
                public override XTypedElement Clone() {
                    return XTypedServices.CloneXTypedElement<NiederschlaegeLocalType>(this);
                }
                
                private static void BuildElementDictionary() {
                    localElementDictionary.Add(NiederschlagXName, typeof(NiederschlagType));
                }
                
                ContentModelEntity IXMetaData.GetContentModel() {
                    return contentModel;
                }
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (Trockenwetterabflussspende*)
            /// </para>
            /// </summary>
            public partial class TrockenwetterabflussspendenLocalType : XTypedElement, IXMetaData {
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName TrockenwetterabflussspendeXName = System.Xml.Linq.XName.Get("Trockenwetterabflussspende", "http://www.bfr-abwasser.de");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                private XTypedList<TrockenwetterType> TrockenwetterabflussspendeField;
                
                private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("Trockenwetterabflussspenden", "http://www.bfr-abwasser.de");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                private static ContentModelEntity contentModel;
                
		public static explicit operator TrockenwetterabflussspendenLocalType(XElement xe) { return XTypedServices.ToXTypedElement<TrockenwetterabflussspendenLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
                
                static TrockenwetterabflussspendenLocalType() {
                    BuildElementDictionary();
                    contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(TrockenwetterabflussspendeXName));
                }
                
                /// <summary>
                /// <para>
                /// Regular expression: (Trockenwetterabflussspende*)
                /// </para>
                /// </summary>
                public TrockenwetterabflussspendenLocalType() {
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: optional, repeating
                /// </para>
                /// <para>
                /// Regular expression: (Trockenwetterabflussspende*)
                /// </para>
                /// </summary>
                public virtual IList<TrockenwetterType> Trockenwetterabflussspende {
                    get {
                        if ((this.TrockenwetterabflussspendeField == null)) {
                            this.TrockenwetterabflussspendeField = new XTypedList<TrockenwetterType>(this, LinqToXsdTypeManager.Instance, TrockenwetterabflussspendeXName);
                        }
                        return this.TrockenwetterabflussspendeField;
                    }
                    set {
                        if ((value == null)) {
                            this.TrockenwetterabflussspendeField = null;
                        }
                        else {
                            if ((this.TrockenwetterabflussspendeField == null)) {
                                this.TrockenwetterabflussspendeField = XTypedList<TrockenwetterType>.Initialize(this, LinqToXsdTypeManager.Instance, value, TrockenwetterabflussspendeXName);
                            }
                            else {
                                XTypedServices.SetList<TrockenwetterType>(this.TrockenwetterabflussspendeField, value);
                            }
                        }
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
                    get {
                        return localElementDictionary;
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                System.Xml.Linq.XName IXMetaData.SchemaName {
                    get {
                        return xName;
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                SchemaOrigin IXMetaData.TypeOrigin {
                    get {
                        return SchemaOrigin.Fragment;
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                ILinqToXsdTypeManager IXMetaData.TypeManager {
                    get {
                        return LinqToXsdTypeManager.Instance;
                    }
                }
                
                public override XTypedElement Clone() {
                    return XTypedServices.CloneXTypedElement<TrockenwetterabflussspendenLocalType>(this);
                }
                
                private static void BuildElementDictionary() {
                    localElementDictionary.Add(TrockenwetterabflussspendeXName, typeof(TrockenwetterType));
                }
                
                ContentModelEntity IXMetaData.GetContentModel() {
                    return contentModel;
                }
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (Einleiterkollektiv*)
            /// </para>
            /// </summary>
            public partial class EinleiterkollektiveLocalType : XTypedElement, IXMetaData {
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName EinleiterkollektivXName = System.Xml.Linq.XName.Get("Einleiterkollektiv", "http://www.bfr-abwasser.de");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                private XTypedList<Einleiterkollektiv> EinleiterkollektivField;
                
                private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("Einleiterkollektive", "http://www.bfr-abwasser.de");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                private static ContentModelEntity contentModel;
                
		public static explicit operator EinleiterkollektiveLocalType(XElement xe) { return XTypedServices.ToXTypedElement<EinleiterkollektiveLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
                
                static EinleiterkollektiveLocalType() {
                    BuildElementDictionary();
                    contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(EinleiterkollektivXName));
                }
                
                /// <summary>
                /// <para>
                /// Regular expression: (Einleiterkollektiv*)
                /// </para>
                /// </summary>
                public EinleiterkollektiveLocalType() {
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: optional, repeating
                /// </para>
                /// <para>
                /// Regular expression: (Einleiterkollektiv*)
                /// </para>
                /// </summary>
                public virtual IList<Einleiterkollektiv> Einleiterkollektiv {
                    get {
                        if ((this.EinleiterkollektivField == null)) {
                            this.EinleiterkollektivField = new XTypedList<Einleiterkollektiv>(this, LinqToXsdTypeManager.Instance, EinleiterkollektivXName);
                        }
                        return this.EinleiterkollektivField;
                    }
                    set {
                        if ((value == null)) {
                            this.EinleiterkollektivField = null;
                        }
                        else {
                            if ((this.EinleiterkollektivField == null)) {
                                this.EinleiterkollektivField = XTypedList<Einleiterkollektiv>.Initialize(this, LinqToXsdTypeManager.Instance, value, EinleiterkollektivXName);
                            }
                            else {
                                XTypedServices.SetList<Einleiterkollektiv>(this.EinleiterkollektivField, value);
                            }
                        }
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
                    get {
                        return localElementDictionary;
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                System.Xml.Linq.XName IXMetaData.SchemaName {
                    get {
                        return xName;
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                SchemaOrigin IXMetaData.TypeOrigin {
                    get {
                        return SchemaOrigin.Fragment;
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                ILinqToXsdTypeManager IXMetaData.TypeManager {
                    get {
                        return LinqToXsdTypeManager.Instance;
                    }
                }
                
                public override XTypedElement Clone() {
                    return XTypedServices.CloneXTypedElement<EinleiterkollektiveLocalType>(this);
                }
                
                private static void BuildElementDictionary() {
                    localElementDictionary.Add(EinleiterkollektivXName, typeof(Einleiterkollektiv));
                }
                
                ContentModelEntity IXMetaData.GetContentModel() {
                    return contentModel;
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Berechnung+)
        /// </para>
        /// </summary>
        public partial class BerechnungenLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName BerechnungXName = System.Xml.Linq.XName.Get("Berechnung", "http://www.bfr-abwasser.de");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XTypedList<BerechnungType> BerechnungField;
            
            private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("Berechnungen", "http://www.bfr-abwasser.de");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;
            
		public static explicit operator BerechnungenLocalType(XElement xe) { return XTypedServices.ToXTypedElement<BerechnungenLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static BerechnungenLocalType() {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(BerechnungXName));
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (Berechnung+)
            /// </para>
            /// </summary>
            public BerechnungenLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required, repeating
            /// </para>
            /// <para>
            /// Regular expression: (Berechnung+)
            /// </para>
            /// </summary>
            public virtual IList<BerechnungType> Berechnung {
                get {
                    if ((this.BerechnungField == null)) {
                        this.BerechnungField = new XTypedList<BerechnungType>(this, LinqToXsdTypeManager.Instance, BerechnungXName);
                    }
                    return this.BerechnungField;
                }
                set {
                    if ((value == null)) {
                        this.BerechnungField = null;
                    }
                    else {
                        if ((this.BerechnungField == null)) {
                            this.BerechnungField = XTypedList<BerechnungType>.Initialize(this, LinqToXsdTypeManager.Instance, value, BerechnungXName);
                        }
                        else {
                            XTypedServices.SetList<BerechnungType>(this.BerechnungField, value);
                        }
                    }
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            System.Xml.Linq.XName IXMetaData.SchemaName {
                get {
                    return xName;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<BerechnungenLocalType>(this);
            }
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(BerechnungXName, typeof(BerechnungType));
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return contentModel;
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Stammdatenkennung, HydraulikObjekte)
    /// </para>
    /// </summary>
    public partial class RechennetzType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName StammdatenkennungXName = System.Xml.Linq.XName.Get("Stammdatenkennung", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName HydraulikObjekteXName = System.Xml.Linq.XName.Get("HydraulikObjekte", "http://www.bfr-abwasser.de");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("RechennetzType", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator RechennetzType(XElement xe) { return XTypedServices.ToXTypedElement<RechennetzType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static RechennetzType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(StammdatenkennungXName), new NamedContentModelEntity(HydraulikObjekteXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Stammdatenkennung, HydraulikObjekte)
        /// </para>
        /// </summary>
        public RechennetzType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (Stammdatenkennung, HydraulikObjekte)
        /// </para>
        /// </summary>
        public virtual string Stammdatenkennung {
            get {
                XElement x = this.GetElement(StammdatenkennungXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(StammdatenkennungXName, value, "Stammdatenkennung", StammdatenkennungLocalType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (Stammdatenkennung, HydraulikObjekte)
        /// </para>
        /// </summary>
        public virtual HydraulikObjekteLocalType HydraulikObjekte {
            get {
                XElement x = this.GetElement(HydraulikObjekteXName);
                return ((HydraulikObjekteLocalType)(x));
            }
            set {
                this.SetElement(HydraulikObjekteXName, value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<RechennetzType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(StammdatenkennungXName, typeof(string));
            localElementDictionary.Add(HydraulikObjekteXName, typeof(HydraulikObjekteLocalType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        private class StammdatenkennungLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(4)), null, 0, 0, null, null, 5, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
            
            private StammdatenkennungLocalType() {
            }
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (HydraulikObjekt+)
        /// </para>
        /// </summary>
        public partial class HydraulikObjekteLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName HydraulikObjektXName = System.Xml.Linq.XName.Get("HydraulikObjekt", "http://www.bfr-abwasser.de");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XTypedList<HydraulikObjektType> HydraulikObjektField;
            
            private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("HydraulikObjekte", "http://www.bfr-abwasser.de");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;
            
		public static explicit operator HydraulikObjekteLocalType(XElement xe) { return XTypedServices.ToXTypedElement<HydraulikObjekteLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static HydraulikObjekteLocalType() {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(HydraulikObjektXName));
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (HydraulikObjekt+)
            /// </para>
            /// </summary>
            public HydraulikObjekteLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required, repeating
            /// </para>
            /// <para>
            /// Regular expression: (HydraulikObjekt+)
            /// </para>
            /// </summary>
            public virtual IList<HydraulikObjektType> HydraulikObjekt {
                get {
                    if ((this.HydraulikObjektField == null)) {
                        this.HydraulikObjektField = new XTypedList<HydraulikObjektType>(this, LinqToXsdTypeManager.Instance, HydraulikObjektXName);
                    }
                    return this.HydraulikObjektField;
                }
                set {
                    if ((value == null)) {
                        this.HydraulikObjektField = null;
                    }
                    else {
                        if ((this.HydraulikObjektField == null)) {
                            this.HydraulikObjektField = XTypedList<HydraulikObjektType>.Initialize(this, LinqToXsdTypeManager.Instance, value, HydraulikObjektXName);
                        }
                        else {
                            XTypedServices.SetList<HydraulikObjektType>(this.HydraulikObjektField, value);
                        }
                    }
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            System.Xml.Linq.XName IXMetaData.SchemaName {
                get {
                    return xName;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<HydraulikObjekteLocalType>(this);
            }
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(HydraulikObjektXName, typeof(HydraulikObjektType));
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return contentModel;
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Objektbezeichnung, HydObjektTyp, Kommentar?, (Haltung? | Leitung? | Gerinne? | Pumpe? | Wehr? | Schieber? | Schacht? | Speicherbauwerk? | GrundSeitenAuslass? | FreierAuslass? | Drossel? | Regler?))
    /// </para>
    /// </summary>
    public partial class HydraulikObjektType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ObjektbezeichnungXName = System.Xml.Linq.XName.Get("Objektbezeichnung", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName HydObjektTypXName = System.Xml.Linq.XName.Get("HydObjektTyp", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName KommentarXName = System.Xml.Linq.XName.Get("Kommentar", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName HaltungXName = System.Xml.Linq.XName.Get("Haltung", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName LeitungXName = System.Xml.Linq.XName.Get("Leitung", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName GerinneXName = System.Xml.Linq.XName.Get("Gerinne", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName PumpeXName = System.Xml.Linq.XName.Get("Pumpe", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName WehrXName = System.Xml.Linq.XName.Get("Wehr", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName SchieberXName = System.Xml.Linq.XName.Get("Schieber", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName SchachtXName = System.Xml.Linq.XName.Get("Schacht", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName SpeicherbauwerkXName = System.Xml.Linq.XName.Get("Speicherbauwerk", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName GrundSeitenAuslassXName = System.Xml.Linq.XName.Get("GrundSeitenAuslass", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName FreierAuslassXName = System.Xml.Linq.XName.Get("FreierAuslass", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName DrosselXName = System.Xml.Linq.XName.Get("Drossel", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ReglerXName = System.Xml.Linq.XName.Get("Regler", "http://www.bfr-abwasser.de");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("HydraulikObjektType", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator HydraulikObjektType(XElement xe) { return XTypedServices.ToXTypedElement<HydraulikObjektType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static HydraulikObjektType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(ObjektbezeichnungXName), new NamedContentModelEntity(HydObjektTypXName), new NamedContentModelEntity(KommentarXName), new ChoiceContentModelEntity(new NamedContentModelEntity(HaltungXName), new NamedContentModelEntity(LeitungXName), new NamedContentModelEntity(GerinneXName), new NamedContentModelEntity(PumpeXName), new NamedContentModelEntity(WehrXName), new NamedContentModelEntity(SchieberXName), new NamedContentModelEntity(SchachtXName), new NamedContentModelEntity(SpeicherbauwerkXName), new NamedContentModelEntity(GrundSeitenAuslassXName), new NamedContentModelEntity(FreierAuslassXName), new NamedContentModelEntity(DrosselXName), new NamedContentModelEntity(ReglerXName)));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Objektbezeichnung, HydObjektTyp, Kommentar?, (Haltung? | Leitung? | Gerinne? | Pumpe? | Wehr? | Schieber? | Schacht? | Speicherbauwerk? | GrundSeitenAuslass? | FreierAuslass? | Drossel? | Regler?))
        /// </para>
        /// </summary>
        public HydraulikObjektType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (Objektbezeichnung, HydObjektTyp, Kommentar?, (Haltung? | Leitung? | Gerinne? | Pumpe? | Wehr? | Schieber? | Schacht? | Speicherbauwerk? | GrundSeitenAuslass? | FreierAuslass? | Drossel? | Regler?))
        /// </para>
        /// </summary>
        public virtual string Objektbezeichnung {
            get {
                XElement x = this.GetElement(ObjektbezeichnungXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(ObjektbezeichnungXName, value, "Objektbezeichnung", ObjektbezeichnungLocalType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (Objektbezeichnung, HydObjektTyp, Kommentar?, (Haltung? | Leitung? | Gerinne? | Pumpe? | Wehr? | Schieber? | Schacht? | Speicherbauwerk? | GrundSeitenAuslass? | FreierAuslass? | Drossel? | Regler?))
        /// </para>
        /// </summary>
        public virtual decimal HydObjektTyp {
            get {
                XElement x = this.GetElement(HydObjektTypXName);
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                this.SetElementWithValidation(HydObjektTypXName, value, "HydObjektTyp", global::www.bfr.abwasser.de.HydraulikObjektTypType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Objektbezeichnung, HydObjektTyp, Kommentar?, (Haltung? | Leitung? | Gerinne? | Pumpe? | Wehr? | Schieber? | Schacht? | Speicherbauwerk? | GrundSeitenAuslass? | FreierAuslass? | Drossel? | Regler?))
        /// </para>
        /// </summary>
        public virtual string Kommentar {
            get {
                XElement x = this.GetElement(KommentarXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
            set {
                this.SetElement(KommentarXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (Objektbezeichnung, HydObjektTyp, Kommentar?, (Haltung? | Leitung? | Gerinne? | Pumpe? | Wehr? | Schieber? | Schacht? | Speicherbauwerk? | GrundSeitenAuslass? | FreierAuslass? | Drossel? | Regler?))
        /// </para>
        /// </summary>
        public virtual HydHaltungLeitungType Haltung {
            get {
                XElement x = this.GetElement(HaltungXName);
                return ((HydHaltungLeitungType)(x));
            }
            set {
                this.SetElement(HaltungXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (Objektbezeichnung, HydObjektTyp, Kommentar?, (Haltung? | Leitung? | Gerinne? | Pumpe? | Wehr? | Schieber? | Schacht? | Speicherbauwerk? | GrundSeitenAuslass? | FreierAuslass? | Drossel? | Regler?))
        /// </para>
        /// </summary>
        public virtual HydHaltungLeitungType Leitung {
            get {
                XElement x = this.GetElement(LeitungXName);
                return ((HydHaltungLeitungType)(x));
            }
            set {
                this.SetElement(LeitungXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (Objektbezeichnung, HydObjektTyp, Kommentar?, (Haltung? | Leitung? | Gerinne? | Pumpe? | Wehr? | Schieber? | Schacht? | Speicherbauwerk? | GrundSeitenAuslass? | FreierAuslass? | Drossel? | Regler?))
        /// </para>
        /// </summary>
        public virtual HydGerinneType Gerinne {
            get {
                XElement x = this.GetElement(GerinneXName);
                return ((HydGerinneType)(x));
            }
            set {
                this.SetElement(GerinneXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (Objektbezeichnung, HydObjektTyp, Kommentar?, (Haltung? | Leitung? | Gerinne? | Pumpe? | Wehr? | Schieber? | Schacht? | Speicherbauwerk? | GrundSeitenAuslass? | FreierAuslass? | Drossel? | Regler?))
        /// </para>
        /// </summary>
        public virtual HydPumpeType Pumpe {
            get {
                XElement x = this.GetElement(PumpeXName);
                return ((HydPumpeType)(x));
            }
            set {
                this.SetElement(PumpeXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (Objektbezeichnung, HydObjektTyp, Kommentar?, (Haltung? | Leitung? | Gerinne? | Pumpe? | Wehr? | Schieber? | Schacht? | Speicherbauwerk? | GrundSeitenAuslass? | FreierAuslass? | Drossel? | Regler?))
        /// </para>
        /// </summary>
        public virtual HydWehrType Wehr {
            get {
                XElement x = this.GetElement(WehrXName);
                return ((HydWehrType)(x));
            }
            set {
                this.SetElement(WehrXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (Objektbezeichnung, HydObjektTyp, Kommentar?, (Haltung? | Leitung? | Gerinne? | Pumpe? | Wehr? | Schieber? | Schacht? | Speicherbauwerk? | GrundSeitenAuslass? | FreierAuslass? | Drossel? | Regler?))
        /// </para>
        /// </summary>
        public virtual HydSchieberType Schieber {
            get {
                XElement x = this.GetElement(SchieberXName);
                return ((HydSchieberType)(x));
            }
            set {
                this.SetElement(SchieberXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (Objektbezeichnung, HydObjektTyp, Kommentar?, (Haltung? | Leitung? | Gerinne? | Pumpe? | Wehr? | Schieber? | Schacht? | Speicherbauwerk? | GrundSeitenAuslass? | FreierAuslass? | Drossel? | Regler?))
        /// </para>
        /// </summary>
        public virtual HydSchachtType Schacht {
            get {
                XElement x = this.GetElement(SchachtXName);
                return ((HydSchachtType)(x));
            }
            set {
                this.SetElement(SchachtXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (Objektbezeichnung, HydObjektTyp, Kommentar?, (Haltung? | Leitung? | Gerinne? | Pumpe? | Wehr? | Schieber? | Schacht? | Speicherbauwerk? | GrundSeitenAuslass? | FreierAuslass? | Drossel? | Regler?))
        /// </para>
        /// </summary>
        public virtual HydSpeicherbauwerkType Speicherbauwerk {
            get {
                XElement x = this.GetElement(SpeicherbauwerkXName);
                return ((HydSpeicherbauwerkType)(x));
            }
            set {
                this.SetElement(SpeicherbauwerkXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (Objektbezeichnung, HydObjektTyp, Kommentar?, (Haltung? | Leitung? | Gerinne? | Pumpe? | Wehr? | Schieber? | Schacht? | Speicherbauwerk? | GrundSeitenAuslass? | FreierAuslass? | Drossel? | Regler?))
        /// </para>
        /// </summary>
        public virtual HydGSAuslassType GrundSeitenAuslass {
            get {
                XElement x = this.GetElement(GrundSeitenAuslassXName);
                return ((HydGSAuslassType)(x));
            }
            set {
                this.SetElement(GrundSeitenAuslassXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (Objektbezeichnung, HydObjektTyp, Kommentar?, (Haltung? | Leitung? | Gerinne? | Pumpe? | Wehr? | Schieber? | Schacht? | Speicherbauwerk? | GrundSeitenAuslass? | FreierAuslass? | Drossel? | Regler?))
        /// </para>
        /// </summary>
        public virtual HydFreiAuslassType FreierAuslass {
            get {
                XElement x = this.GetElement(FreierAuslassXName);
                return ((HydFreiAuslassType)(x));
            }
            set {
                this.SetElement(FreierAuslassXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (Objektbezeichnung, HydObjektTyp, Kommentar?, (Haltung? | Leitung? | Gerinne? | Pumpe? | Wehr? | Schieber? | Schacht? | Speicherbauwerk? | GrundSeitenAuslass? | FreierAuslass? | Drossel? | Regler?))
        /// </para>
        /// </summary>
        public virtual HydDrosselType Drossel {
            get {
                XElement x = this.GetElement(DrosselXName);
                return ((HydDrosselType)(x));
            }
            set {
                this.SetElement(DrosselXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (Objektbezeichnung, HydObjektTyp, Kommentar?, (Haltung? | Leitung? | Gerinne? | Pumpe? | Wehr? | Schieber? | Schacht? | Speicherbauwerk? | GrundSeitenAuslass? | FreierAuslass? | Drossel? | Regler?))
        /// </para>
        /// </summary>
        public virtual HydReglerType Regler {
            get {
                XElement x = this.GetElement(ReglerXName);
                return ((HydReglerType)(x));
            }
            set {
                this.SetElement(ReglerXName, value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<HydraulikObjektType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(ObjektbezeichnungXName, typeof(string));
            localElementDictionary.Add(HydObjektTypXName, typeof(decimal));
            localElementDictionary.Add(KommentarXName, typeof(string));
            localElementDictionary.Add(HaltungXName, typeof(HydHaltungLeitungType));
            localElementDictionary.Add(LeitungXName, typeof(HydHaltungLeitungType));
            localElementDictionary.Add(GerinneXName, typeof(HydGerinneType));
            localElementDictionary.Add(PumpeXName, typeof(HydPumpeType));
            localElementDictionary.Add(WehrXName, typeof(HydWehrType));
            localElementDictionary.Add(SchieberXName, typeof(HydSchieberType));
            localElementDictionary.Add(SchachtXName, typeof(HydSchachtType));
            localElementDictionary.Add(SpeicherbauwerkXName, typeof(HydSpeicherbauwerkType));
            localElementDictionary.Add(GrundSeitenAuslassXName, typeof(HydGSAuslassType));
            localElementDictionary.Add(FreierAuslassXName, typeof(HydFreiAuslassType));
            localElementDictionary.Add(DrosselXName, typeof(HydDrosselType));
            localElementDictionary.Add(ReglerXName, typeof(HydReglerType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        private class ObjektbezeichnungLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(4)), null, 0, 0, null, null, 30, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
            
            private ObjektbezeichnungLocalType() {
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Gebietskennung, Gebietsname?, Kommentar?, (Einwohnerwerte? | Einwohnerdichte?), Trockenwetterkennung?)
    /// </para>
    /// </summary>
    public partial class GebietType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName GebietskennungXName = System.Xml.Linq.XName.Get("Gebietskennung", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName GebietsnameXName = System.Xml.Linq.XName.Get("Gebietsname", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName KommentarXName = System.Xml.Linq.XName.Get("Kommentar", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName EinwohnerwerteXName = System.Xml.Linq.XName.Get("Einwohnerwerte", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName EinwohnerdichteXName = System.Xml.Linq.XName.Get("Einwohnerdichte", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TrockenwetterkennungXName = System.Xml.Linq.XName.Get("Trockenwetterkennung", "http://www.bfr-abwasser.de");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("GebietType", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator GebietType(XElement xe) { return XTypedServices.ToXTypedElement<GebietType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static GebietType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(GebietskennungXName), new NamedContentModelEntity(GebietsnameXName), new NamedContentModelEntity(KommentarXName), new ChoiceContentModelEntity(new NamedContentModelEntity(EinwohnerwerteXName), new NamedContentModelEntity(EinwohnerdichteXName)), new NamedContentModelEntity(TrockenwetterkennungXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Gebietskennung, Gebietsname?, Kommentar?, (Einwohnerwerte? | Einwohnerdichte?), Trockenwetterkennung?)
        /// </para>
        /// </summary>
        public GebietType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (Gebietskennung, Gebietsname?, Kommentar?, (Einwohnerwerte? | Einwohnerdichte?), Trockenwetterkennung?)
        /// </para>
        /// </summary>
        public virtual string Gebietskennung {
            get {
                XElement x = this.GetElement(GebietskennungXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(GebietskennungXName, value, "Gebietskennung", GebietskennungLocalType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Gebietskennung, Gebietsname?, Kommentar?, (Einwohnerwerte? | Einwohnerdichte?), Trockenwetterkennung?)
        /// </para>
        /// </summary>
        public virtual string Gebietsname {
            get {
                XElement x = this.GetElement(GebietsnameXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(GebietsnameXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                else {
                    this.SetElementWithValidation(GebietsnameXName, value, "Gebietsname", GebietsnameLocalType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Gebietskennung, Gebietsname?, Kommentar?, (Einwohnerwerte? | Einwohnerdichte?), Trockenwetterkennung?)
        /// </para>
        /// </summary>
        public virtual string Kommentar {
            get {
                XElement x = this.GetElement(KommentarXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
            set {
                this.SetElement(KommentarXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (Gebietskennung, Gebietsname?, Kommentar?, (Einwohnerwerte? | Einwohnerdichte?), Trockenwetterkennung?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? Einwohnerwerte {
            get {
                XElement x = this.GetElement(EinwohnerwerteXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(EinwohnerwerteXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                }
                else {
                    this.SetElementWithValidation(EinwohnerwerteXName, value, "Einwohnerwerte", EinwohnerwerteLocalType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (Gebietskennung, Gebietsname?, Kommentar?, (Einwohnerwerte? | Einwohnerdichte?), Trockenwetterkennung?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? Einwohnerdichte {
            get {
                XElement x = this.GetElement(EinwohnerdichteXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(EinwohnerdichteXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                }
                else {
                    this.SetElementWithValidation(EinwohnerdichteXName, value, "Einwohnerdichte", EinwohnerdichteLocalType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Gebietskennung, Gebietsname?, Kommentar?, (Einwohnerwerte? | Einwohnerdichte?), Trockenwetterkennung?)
        /// </para>
        /// </summary>
        public virtual string Trockenwetterkennung {
            get {
                XElement x = this.GetElement(TrockenwetterkennungXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(TrockenwetterkennungXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                else {
                    this.SetElementWithValidation(TrockenwetterkennungXName, value, "Trockenwetterkennung", TrockenwetterkennungLocalType.TypeDefinition);
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<GebietType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(GebietskennungXName, typeof(string));
            localElementDictionary.Add(GebietsnameXName, typeof(string));
            localElementDictionary.Add(KommentarXName, typeof(string));
            localElementDictionary.Add(EinwohnerwerteXName, typeof(decimal));
            localElementDictionary.Add(EinwohnerdichteXName, typeof(decimal));
            localElementDictionary.Add(TrockenwetterkennungXName, typeof(string));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        private class GebietskennungLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(4)), null, 0, 0, null, null, 5, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
            
            private GebietskennungLocalType() {
            }
        }
        
        private class GebietsnameLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(4)), null, 0, 0, null, null, 30, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
            
            private GebietsnameLocalType() {
            }
        }
        
        private class EinwohnerwerteLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(3200)), null, 2, 0, 10000m, null, 0, null, null, 0, null, 6, XmlSchemaWhiteSpace.Collapse));
            
            private EinwohnerwerteLocalType() {
            }
        }
        
        private class EinwohnerdichteLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(3200)), null, 2, 0, 1000m, null, 0, null, null, 0, null, 5, XmlSchemaWhiteSpace.Collapse));
            
            private EinwohnerdichteLocalType() {
            }
        }
        
        private class TrockenwetterkennungLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(4)), null, 0, 0, null, null, 5, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
            
            private TrockenwetterkennungLocalType() {
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Flaechennummer, Flaechenbezeichnung, Flaechenart?, Flaecheneigenschaft?, Flaechenfunktion?, Flaechennutzung?, Materialzusatz?, Verschmutzungsklasse?, Flaechengroesse, Neigungsklasse?, Abflussbeiwert?, Kommentar?, Gebietskennung?, Flaechengeometrie?, (HydraulikObjekt? | Flaechenobjekt? | Hauptflaeche?), Schwerpunktlaufzeit?, Rauigkeitsansatz?, (RauigkeitsbeiwertKb? | RauigkeitsbeiwertKst?))
    /// </para>
    /// </summary>
    public partial class FlaecheType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName FlaechennummerXName = System.Xml.Linq.XName.Get("Flaechennummer", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName FlaechenbezeichnungXName = System.Xml.Linq.XName.Get("Flaechenbezeichnung", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName FlaechenartXName = System.Xml.Linq.XName.Get("Flaechenart", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName FlaecheneigenschaftXName = System.Xml.Linq.XName.Get("Flaecheneigenschaft", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName FlaechenfunktionXName = System.Xml.Linq.XName.Get("Flaechenfunktion", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName FlaechennutzungXName = System.Xml.Linq.XName.Get("Flaechennutzung", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName MaterialzusatzXName = System.Xml.Linq.XName.Get("Materialzusatz", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName VerschmutzungsklasseXName = System.Xml.Linq.XName.Get("Verschmutzungsklasse", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName FlaechengroesseXName = System.Xml.Linq.XName.Get("Flaechengroesse", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName NeigungsklasseXName = System.Xml.Linq.XName.Get("Neigungsklasse", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName AbflussbeiwertXName = System.Xml.Linq.XName.Get("Abflussbeiwert", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName KommentarXName = System.Xml.Linq.XName.Get("Kommentar", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName GebietskennungXName = System.Xml.Linq.XName.Get("Gebietskennung", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName FlaechengeometrieXName = System.Xml.Linq.XName.Get("Flaechengeometrie", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName HydraulikObjektXName = System.Xml.Linq.XName.Get("HydraulikObjekt", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName FlaechenobjektXName = System.Xml.Linq.XName.Get("Flaechenobjekt", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName HauptflaecheXName = System.Xml.Linq.XName.Get("Hauptflaeche", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName SchwerpunktlaufzeitXName = System.Xml.Linq.XName.Get("Schwerpunktlaufzeit", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName RauigkeitsansatzXName = System.Xml.Linq.XName.Get("Rauigkeitsansatz", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName RauigkeitsbeiwertKbXName = System.Xml.Linq.XName.Get("RauigkeitsbeiwertKb", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName RauigkeitsbeiwertKstXName = System.Xml.Linq.XName.Get("RauigkeitsbeiwertKst", "http://www.bfr-abwasser.de");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("FlaecheType", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator FlaecheType(XElement xe) { return XTypedServices.ToXTypedElement<FlaecheType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static FlaecheType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(FlaechennummerXName), new NamedContentModelEntity(FlaechenbezeichnungXName), new NamedContentModelEntity(FlaechenartXName), new NamedContentModelEntity(FlaecheneigenschaftXName), new NamedContentModelEntity(FlaechenfunktionXName), new NamedContentModelEntity(FlaechennutzungXName), new NamedContentModelEntity(MaterialzusatzXName), new NamedContentModelEntity(VerschmutzungsklasseXName), new NamedContentModelEntity(FlaechengroesseXName), new NamedContentModelEntity(NeigungsklasseXName), new NamedContentModelEntity(AbflussbeiwertXName), new NamedContentModelEntity(KommentarXName), new NamedContentModelEntity(GebietskennungXName), new NamedContentModelEntity(FlaechengeometrieXName), new ChoiceContentModelEntity(new NamedContentModelEntity(HydraulikObjektXName), new NamedContentModelEntity(FlaechenobjektXName), new NamedContentModelEntity(HauptflaecheXName)), new NamedContentModelEntity(SchwerpunktlaufzeitXName), new NamedContentModelEntity(RauigkeitsansatzXName), new ChoiceContentModelEntity(new NamedContentModelEntity(RauigkeitsbeiwertKbXName), new NamedContentModelEntity(RauigkeitsbeiwertKstXName)));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Flaechennummer, Flaechenbezeichnung, Flaechenart?, Flaecheneigenschaft?, Flaechenfunktion?, Flaechennutzung?, Materialzusatz?, Verschmutzungsklasse?, Flaechengroesse, Neigungsklasse?, Abflussbeiwert?, Kommentar?, Gebietskennung?, Flaechengeometrie?, (HydraulikObjekt? | Flaechenobjekt? | Hauptflaeche?), Schwerpunktlaufzeit?, Rauigkeitsansatz?, (RauigkeitsbeiwertKb? | RauigkeitsbeiwertKst?))
        /// </para>
        /// </summary>
        public FlaecheType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (Flaechennummer, Flaechenbezeichnung, Flaechenart?, Flaecheneigenschaft?, Flaechenfunktion?, Flaechennutzung?, Materialzusatz?, Verschmutzungsklasse?, Flaechengroesse, Neigungsklasse?, Abflussbeiwert?, Kommentar?, Gebietskennung?, Flaechengeometrie?, (HydraulikObjekt? | Flaechenobjekt? | Hauptflaeche?), Schwerpunktlaufzeit?, Rauigkeitsansatz?, (RauigkeitsbeiwertKb? | RauigkeitsbeiwertKst?))
        /// </para>
        /// </summary>
        public virtual decimal Flaechennummer {
            get {
                XElement x = this.GetElement(FlaechennummerXName);
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                this.SetElementWithValidation(FlaechennummerXName, value, "Flaechennummer", FlaechennummerLocalType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (Flaechennummer, Flaechenbezeichnung, Flaechenart?, Flaecheneigenschaft?, Flaechenfunktion?, Flaechennutzung?, Materialzusatz?, Verschmutzungsklasse?, Flaechengroesse, Neigungsklasse?, Abflussbeiwert?, Kommentar?, Gebietskennung?, Flaechengeometrie?, (HydraulikObjekt? | Flaechenobjekt? | Hauptflaeche?), Schwerpunktlaufzeit?, Rauigkeitsansatz?, (RauigkeitsbeiwertKb? | RauigkeitsbeiwertKst?))
        /// </para>
        /// </summary>
        public virtual string Flaechenbezeichnung {
            get {
                XElement x = this.GetElement(FlaechenbezeichnungXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(FlaechenbezeichnungXName, value, "Flaechenbezeichnung", FlaechenbezeichnungLocalType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Flaechennummer, Flaechenbezeichnung, Flaechenart?, Flaecheneigenschaft?, Flaechenfunktion?, Flaechennutzung?, Materialzusatz?, Verschmutzungsklasse?, Flaechengroesse, Neigungsklasse?, Abflussbeiwert?, Kommentar?, Gebietskennung?, Flaechengeometrie?, (HydraulikObjekt? | Flaechenobjekt? | Hauptflaeche?), Schwerpunktlaufzeit?, Rauigkeitsansatz?, (RauigkeitsbeiwertKb? | RauigkeitsbeiwertKst?))
        /// </para>
        /// </summary>
        public virtual System.Decimal? Flaechenart {
            get {
                XElement x = this.GetElement(FlaechenartXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(FlaechenartXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                }
                else {
                    this.SetElementWithValidation(FlaechenartXName, value, "Flaechenart", global::www.bfr.abwasser.de.FlaechenartType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Flaechennummer, Flaechenbezeichnung, Flaechenart?, Flaecheneigenschaft?, Flaechenfunktion?, Flaechennutzung?, Materialzusatz?, Verschmutzungsklasse?, Flaechengroesse, Neigungsklasse?, Abflussbeiwert?, Kommentar?, Gebietskennung?, Flaechengeometrie?, (HydraulikObjekt? | Flaechenobjekt? | Hauptflaeche?), Schwerpunktlaufzeit?, Rauigkeitsansatz?, (RauigkeitsbeiwertKb? | RauigkeitsbeiwertKst?))
        /// </para>
        /// </summary>
        public virtual System.Decimal? Flaecheneigenschaft {
            get {
                XElement x = this.GetElement(FlaecheneigenschaftXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(FlaecheneigenschaftXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                }
                else {
                    this.SetElementWithValidation(FlaecheneigenschaftXName, value, "Flaecheneigenschaft", global::www.bfr.abwasser.de.FlaecheneigenschaftType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Flaechennummer, Flaechenbezeichnung, Flaechenart?, Flaecheneigenschaft?, Flaechenfunktion?, Flaechennutzung?, Materialzusatz?, Verschmutzungsklasse?, Flaechengroesse, Neigungsklasse?, Abflussbeiwert?, Kommentar?, Gebietskennung?, Flaechengeometrie?, (HydraulikObjekt? | Flaechenobjekt? | Hauptflaeche?), Schwerpunktlaufzeit?, Rauigkeitsansatz?, (RauigkeitsbeiwertKb? | RauigkeitsbeiwertKst?))
        /// </para>
        /// </summary>
        public virtual System.Decimal? Flaechenfunktion {
            get {
                XElement x = this.GetElement(FlaechenfunktionXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(FlaechenfunktionXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                }
                else {
                    this.SetElementWithValidation(FlaechenfunktionXName, value, "Flaechenfunktion", global::www.bfr.abwasser.de.FlaechenfunktionType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Flaechennummer, Flaechenbezeichnung, Flaechenart?, Flaecheneigenschaft?, Flaechenfunktion?, Flaechennutzung?, Materialzusatz?, Verschmutzungsklasse?, Flaechengroesse, Neigungsklasse?, Abflussbeiwert?, Kommentar?, Gebietskennung?, Flaechengeometrie?, (HydraulikObjekt? | Flaechenobjekt? | Hauptflaeche?), Schwerpunktlaufzeit?, Rauigkeitsansatz?, (RauigkeitsbeiwertKb? | RauigkeitsbeiwertKst?))
        /// </para>
        /// </summary>
        public virtual System.Decimal? Flaechennutzung {
            get {
                XElement x = this.GetElement(FlaechennutzungXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(FlaechennutzungXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                }
                else {
                    this.SetElementWithValidation(FlaechennutzungXName, value, "Flaechennutzung", global::www.bfr.abwasser.de.FlaechennutzungType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Flaechennummer, Flaechenbezeichnung, Flaechenart?, Flaecheneigenschaft?, Flaechenfunktion?, Flaechennutzung?, Materialzusatz?, Verschmutzungsklasse?, Flaechengroesse, Neigungsklasse?, Abflussbeiwert?, Kommentar?, Gebietskennung?, Flaechengeometrie?, (HydraulikObjekt? | Flaechenobjekt? | Hauptflaeche?), Schwerpunktlaufzeit?, Rauigkeitsansatz?, (RauigkeitsbeiwertKb? | RauigkeitsbeiwertKst?))
        /// </para>
        /// </summary>
        public virtual System.Decimal? Materialzusatz {
            get {
                XElement x = this.GetElement(MaterialzusatzXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(MaterialzusatzXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                }
                else {
                    this.SetElementWithValidation(MaterialzusatzXName, value, "Materialzusatz", global::www.bfr.abwasser.de.MaterialzusatzType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Flaechennummer, Flaechenbezeichnung, Flaechenart?, Flaecheneigenschaft?, Flaechenfunktion?, Flaechennutzung?, Materialzusatz?, Verschmutzungsklasse?, Flaechengroesse, Neigungsklasse?, Abflussbeiwert?, Kommentar?, Gebietskennung?, Flaechengeometrie?, (HydraulikObjekt? | Flaechenobjekt? | Hauptflaeche?), Schwerpunktlaufzeit?, Rauigkeitsansatz?, (RauigkeitsbeiwertKb? | RauigkeitsbeiwertKst?))
        /// </para>
        /// </summary>
        public virtual System.Decimal? Verschmutzungsklasse {
            get {
                XElement x = this.GetElement(VerschmutzungsklasseXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(VerschmutzungsklasseXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                }
                else {
                    this.SetElementWithValidation(VerschmutzungsklasseXName, value, "Verschmutzungsklasse", global::www.bfr.abwasser.de.VerschmutzungsklasseType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (Flaechennummer, Flaechenbezeichnung, Flaechenart?, Flaecheneigenschaft?, Flaechenfunktion?, Flaechennutzung?, Materialzusatz?, Verschmutzungsklasse?, Flaechengroesse, Neigungsklasse?, Abflussbeiwert?, Kommentar?, Gebietskennung?, Flaechengeometrie?, (HydraulikObjekt? | Flaechenobjekt? | Hauptflaeche?), Schwerpunktlaufzeit?, Rauigkeitsansatz?, (RauigkeitsbeiwertKb? | RauigkeitsbeiwertKst?))
        /// </para>
        /// </summary>
        public virtual decimal Flaechengroesse {
            get {
                XElement x = this.GetElement(FlaechengroesseXName);
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
            set {
                this.SetElementWithValidation(FlaechengroesseXName, value, "Flaechengroesse", FlaechengroesseLocalType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Flaechennummer, Flaechenbezeichnung, Flaechenart?, Flaecheneigenschaft?, Flaechenfunktion?, Flaechennutzung?, Materialzusatz?, Verschmutzungsklasse?, Flaechengroesse, Neigungsklasse?, Abflussbeiwert?, Kommentar?, Gebietskennung?, Flaechengeometrie?, (HydraulikObjekt? | Flaechenobjekt? | Hauptflaeche?), Schwerpunktlaufzeit?, Rauigkeitsansatz?, (RauigkeitsbeiwertKb? | RauigkeitsbeiwertKst?))
        /// </para>
        /// </summary>
        public virtual System.Decimal? Neigungsklasse {
            get {
                XElement x = this.GetElement(NeigungsklasseXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(NeigungsklasseXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                }
                else {
                    this.SetElementWithValidation(NeigungsklasseXName, value, "Neigungsklasse", global::www.bfr.abwasser.de.NeigungsklasseType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Flaechennummer, Flaechenbezeichnung, Flaechenart?, Flaecheneigenschaft?, Flaechenfunktion?, Flaechennutzung?, Materialzusatz?, Verschmutzungsklasse?, Flaechengroesse, Neigungsklasse?, Abflussbeiwert?, Kommentar?, Gebietskennung?, Flaechengeometrie?, (HydraulikObjekt? | Flaechenobjekt? | Hauptflaeche?), Schwerpunktlaufzeit?, Rauigkeitsansatz?, (RauigkeitsbeiwertKb? | RauigkeitsbeiwertKst?))
        /// </para>
        /// </summary>
        public virtual System.Decimal? Abflussbeiwert {
            get {
                XElement x = this.GetElement(AbflussbeiwertXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(AbflussbeiwertXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                }
                else {
                    this.SetElementWithValidation(AbflussbeiwertXName, value, "Abflussbeiwert", AbflussbeiwertLocalType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Flaechennummer, Flaechenbezeichnung, Flaechenart?, Flaecheneigenschaft?, Flaechenfunktion?, Flaechennutzung?, Materialzusatz?, Verschmutzungsklasse?, Flaechengroesse, Neigungsklasse?, Abflussbeiwert?, Kommentar?, Gebietskennung?, Flaechengeometrie?, (HydraulikObjekt? | Flaechenobjekt? | Hauptflaeche?), Schwerpunktlaufzeit?, Rauigkeitsansatz?, (RauigkeitsbeiwertKb? | RauigkeitsbeiwertKst?))
        /// </para>
        /// </summary>
        public virtual string Kommentar {
            get {
                XElement x = this.GetElement(KommentarXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
            set {
                this.SetElement(KommentarXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Flaechennummer, Flaechenbezeichnung, Flaechenart?, Flaecheneigenschaft?, Flaechenfunktion?, Flaechennutzung?, Materialzusatz?, Verschmutzungsklasse?, Flaechengroesse, Neigungsklasse?, Abflussbeiwert?, Kommentar?, Gebietskennung?, Flaechengeometrie?, (HydraulikObjekt? | Flaechenobjekt? | Hauptflaeche?), Schwerpunktlaufzeit?, Rauigkeitsansatz?, (RauigkeitsbeiwertKb? | RauigkeitsbeiwertKst?))
        /// </para>
        /// </summary>
        public virtual string Gebietskennung {
            get {
                XElement x = this.GetElement(GebietskennungXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(GebietskennungXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                else {
                    this.SetElementWithValidation(GebietskennungXName, value, "Gebietskennung", GebietskennungLocalType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Flaechennummer, Flaechenbezeichnung, Flaechenart?, Flaecheneigenschaft?, Flaechenfunktion?, Flaechennutzung?, Materialzusatz?, Verschmutzungsklasse?, Flaechengroesse, Neigungsklasse?, Abflussbeiwert?, Kommentar?, Gebietskennung?, Flaechengeometrie?, (HydraulikObjekt? | Flaechenobjekt? | Hauptflaeche?), Schwerpunktlaufzeit?, Rauigkeitsansatz?, (RauigkeitsbeiwertKb? | RauigkeitsbeiwertKst?))
        /// </para>
        /// </summary>
        public virtual FlaechengeometrieType Flaechengeometrie {
            get {
                XElement x = this.GetElement(FlaechengeometrieXName);
                return ((FlaechengeometrieType)(x));
            }
            set {
                this.SetElement(FlaechengeometrieXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (Flaechennummer, Flaechenbezeichnung, Flaechenart?, Flaecheneigenschaft?, Flaechenfunktion?, Flaechennutzung?, Materialzusatz?, Verschmutzungsklasse?, Flaechengroesse, Neigungsklasse?, Abflussbeiwert?, Kommentar?, Gebietskennung?, Flaechengeometrie?, (HydraulikObjekt? | Flaechenobjekt? | Hauptflaeche?), Schwerpunktlaufzeit?, Rauigkeitsansatz?, (RauigkeitsbeiwertKb? | RauigkeitsbeiwertKst?))
        /// </para>
        /// </summary>
        public virtual HydraulikObjektLocalType HydraulikObjekt {
            get {
                XElement x = this.GetElement(HydraulikObjektXName);
                return ((HydraulikObjektLocalType)(x));
            }
            set {
                this.SetElement(HydraulikObjektXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (Flaechennummer, Flaechenbezeichnung, Flaechenart?, Flaecheneigenschaft?, Flaechenfunktion?, Flaechennutzung?, Materialzusatz?, Verschmutzungsklasse?, Flaechengroesse, Neigungsklasse?, Abflussbeiwert?, Kommentar?, Gebietskennung?, Flaechengeometrie?, (HydraulikObjekt? | Flaechenobjekt? | Hauptflaeche?), Schwerpunktlaufzeit?, Rauigkeitsansatz?, (RauigkeitsbeiwertKb? | RauigkeitsbeiwertKst?))
        /// </para>
        /// </summary>
        public virtual FlaechenobjektLocalType Flaechenobjekt {
            get {
                XElement x = this.GetElement(FlaechenobjektXName);
                return ((FlaechenobjektLocalType)(x));
            }
            set {
                this.SetElement(FlaechenobjektXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (Flaechennummer, Flaechenbezeichnung, Flaechenart?, Flaecheneigenschaft?, Flaechenfunktion?, Flaechennutzung?, Materialzusatz?, Verschmutzungsklasse?, Flaechengroesse, Neigungsklasse?, Abflussbeiwert?, Kommentar?, Gebietskennung?, Flaechengeometrie?, (HydraulikObjekt? | Flaechenobjekt? | Hauptflaeche?), Schwerpunktlaufzeit?, Rauigkeitsansatz?, (RauigkeitsbeiwertKb? | RauigkeitsbeiwertKst?))
        /// </para>
        /// </summary>
        public virtual HauptflaecheLocalType Hauptflaeche {
            get {
                XElement x = this.GetElement(HauptflaecheXName);
                return ((HauptflaecheLocalType)(x));
            }
            set {
                this.SetElement(HauptflaecheXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Flaechennummer, Flaechenbezeichnung, Flaechenart?, Flaecheneigenschaft?, Flaechenfunktion?, Flaechennutzung?, Materialzusatz?, Verschmutzungsklasse?, Flaechengroesse, Neigungsklasse?, Abflussbeiwert?, Kommentar?, Gebietskennung?, Flaechengeometrie?, (HydraulikObjekt? | Flaechenobjekt? | Hauptflaeche?), Schwerpunktlaufzeit?, Rauigkeitsansatz?, (RauigkeitsbeiwertKb? | RauigkeitsbeiwertKst?))
        /// </para>
        /// </summary>
        public virtual System.Decimal? Schwerpunktlaufzeit {
            get {
                XElement x = this.GetElement(SchwerpunktlaufzeitXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(SchwerpunktlaufzeitXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                }
                else {
                    this.SetElementWithValidation(SchwerpunktlaufzeitXName, value, "Schwerpunktlaufzeit", SchwerpunktlaufzeitLocalType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Flaechennummer, Flaechenbezeichnung, Flaechenart?, Flaecheneigenschaft?, Flaechenfunktion?, Flaechennutzung?, Materialzusatz?, Verschmutzungsklasse?, Flaechengroesse, Neigungsklasse?, Abflussbeiwert?, Kommentar?, Gebietskennung?, Flaechengeometrie?, (HydraulikObjekt? | Flaechenobjekt? | Hauptflaeche?), Schwerpunktlaufzeit?, Rauigkeitsansatz?, (RauigkeitsbeiwertKb? | RauigkeitsbeiwertKst?))
        /// </para>
        /// </summary>
        public virtual System.Decimal? Rauigkeitsansatz {
            get {
                XElement x = this.GetElement(RauigkeitsansatzXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(RauigkeitsansatzXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                }
                else {
                    this.SetElementWithValidation(RauigkeitsansatzXName, value, "Rauigkeitsansatz", global::www.bfr.abwasser.de.RauigkeitsansatzType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (Flaechennummer, Flaechenbezeichnung, Flaechenart?, Flaecheneigenschaft?, Flaechenfunktion?, Flaechennutzung?, Materialzusatz?, Verschmutzungsklasse?, Flaechengroesse, Neigungsklasse?, Abflussbeiwert?, Kommentar?, Gebietskennung?, Flaechengeometrie?, (HydraulikObjekt? | Flaechenobjekt? | Hauptflaeche?), Schwerpunktlaufzeit?, Rauigkeitsansatz?, (RauigkeitsbeiwertKb? | RauigkeitsbeiwertKst?))
        /// </para>
        /// </summary>
        public virtual System.Decimal? RauigkeitsbeiwertKb {
            get {
                XElement x = this.GetElement(RauigkeitsbeiwertKbXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(RauigkeitsbeiwertKbXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                }
                else {
                    this.SetElementWithValidation(RauigkeitsbeiwertKbXName, value, "RauigkeitsbeiwertKb", RauigkeitsbeiwertKbLocalType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (Flaechennummer, Flaechenbezeichnung, Flaechenart?, Flaecheneigenschaft?, Flaechenfunktion?, Flaechennutzung?, Materialzusatz?, Verschmutzungsklasse?, Flaechengroesse, Neigungsklasse?, Abflussbeiwert?, Kommentar?, Gebietskennung?, Flaechengeometrie?, (HydraulikObjekt? | Flaechenobjekt? | Hauptflaeche?), Schwerpunktlaufzeit?, Rauigkeitsansatz?, (RauigkeitsbeiwertKb? | RauigkeitsbeiwertKst?))
        /// </para>
        /// </summary>
        public virtual System.Decimal? RauigkeitsbeiwertKst {
            get {
                XElement x = this.GetElement(RauigkeitsbeiwertKstXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(RauigkeitsbeiwertKstXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                }
                else {
                    this.SetElementWithValidation(RauigkeitsbeiwertKstXName, value, "RauigkeitsbeiwertKst", RauigkeitsbeiwertKstLocalType.TypeDefinition);
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<FlaecheType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(FlaechennummerXName, typeof(decimal));
            localElementDictionary.Add(FlaechenbezeichnungXName, typeof(string));
            localElementDictionary.Add(FlaechenartXName, typeof(decimal));
            localElementDictionary.Add(FlaecheneigenschaftXName, typeof(decimal));
            localElementDictionary.Add(FlaechenfunktionXName, typeof(decimal));
            localElementDictionary.Add(FlaechennutzungXName, typeof(decimal));
            localElementDictionary.Add(MaterialzusatzXName, typeof(decimal));
            localElementDictionary.Add(VerschmutzungsklasseXName, typeof(decimal));
            localElementDictionary.Add(FlaechengroesseXName, typeof(decimal));
            localElementDictionary.Add(NeigungsklasseXName, typeof(decimal));
            localElementDictionary.Add(AbflussbeiwertXName, typeof(decimal));
            localElementDictionary.Add(KommentarXName, typeof(string));
            localElementDictionary.Add(GebietskennungXName, typeof(string));
            localElementDictionary.Add(FlaechengeometrieXName, typeof(FlaechengeometrieType));
            localElementDictionary.Add(HydraulikObjektXName, typeof(HydraulikObjektLocalType));
            localElementDictionary.Add(FlaechenobjektXName, typeof(FlaechenobjektLocalType));
            localElementDictionary.Add(HauptflaecheXName, typeof(HauptflaecheLocalType));
            localElementDictionary.Add(SchwerpunktlaufzeitXName, typeof(decimal));
            localElementDictionary.Add(RauigkeitsansatzXName, typeof(decimal));
            localElementDictionary.Add(RauigkeitsbeiwertKbXName, typeof(decimal));
            localElementDictionary.Add(RauigkeitsbeiwertKstXName, typeof(decimal));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        private class FlaechennummerLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(1024)), null, 0, 0, null, null, 0, null, null, 0, null, 10, XmlSchemaWhiteSpace.Collapse));
            
            private FlaechennummerLocalType() {
            }
        }
        
        private class FlaechenbezeichnungLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(4)), null, 0, 0, null, null, 30, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
            
            private FlaechenbezeichnungLocalType() {
            }
        }
        
        private class FlaechengroesseLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(3200)), null, 4, 0, 100m, null, 0, null, null, 0, null, 6, XmlSchemaWhiteSpace.Collapse));
            
            private FlaechengroesseLocalType() {
            }
        }
        
        private class AbflussbeiwertLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(3200)), null, 2, 0, 100m, null, 0, null, null, 0, null, 4, XmlSchemaWhiteSpace.Collapse));
            
            private AbflussbeiwertLocalType() {
            }
        }
        
        private class GebietskennungLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(4)), null, 0, 0, null, null, 5, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
            
            private GebietskennungLocalType() {
            }
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Objektbezeichnung, HydObjektTyp)
        /// </para>
        /// </summary>
        public partial class HydraulikObjektLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName ObjektbezeichnungXName = System.Xml.Linq.XName.Get("Objektbezeichnung", "http://www.bfr-abwasser.de");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName HydObjektTypXName = System.Xml.Linq.XName.Get("HydObjektTyp", "http://www.bfr-abwasser.de");
            
            private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("HydraulikObjekt", "http://www.bfr-abwasser.de");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;
            
		public static explicit operator HydraulikObjektLocalType(XElement xe) { return XTypedServices.ToXTypedElement<HydraulikObjektLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static HydraulikObjektLocalType() {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(ObjektbezeichnungXName), new NamedContentModelEntity(HydObjektTypXName));
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (Objektbezeichnung, HydObjektTyp)
            /// </para>
            /// </summary>
            public HydraulikObjektLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (Objektbezeichnung, HydObjektTyp)
            /// </para>
            /// </summary>
            public virtual string Objektbezeichnung {
                get {
                    XElement x = this.GetElement(ObjektbezeichnungXName);
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    this.SetElementWithValidation(ObjektbezeichnungXName, value, "Objektbezeichnung", ObjektbezeichnungLocalType.TypeDefinition);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (Objektbezeichnung, HydObjektTyp)
            /// </para>
            /// </summary>
            public virtual decimal HydObjektTyp {
                get {
                    XElement x = this.GetElement(HydObjektTypXName);
                    return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                }
                set {
                    this.SetElementWithValidation(HydObjektTypXName, value, "HydObjektTyp", global::www.bfr.abwasser.de.HydraulikObjektTypType.TypeDefinition);
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            System.Xml.Linq.XName IXMetaData.SchemaName {
                get {
                    return xName;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<HydraulikObjektLocalType>(this);
            }
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(ObjektbezeichnungXName, typeof(string));
                localElementDictionary.Add(HydObjektTypXName, typeof(decimal));
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return contentModel;
            }
            
            private class ObjektbezeichnungLocalType {
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(4)), null, 0, 0, null, null, 30, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
                
                private ObjektbezeichnungLocalType() {
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Flaechennummer)
        /// </para>
        /// </summary>
        public partial class FlaechenobjektLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName FlaechennummerXName = System.Xml.Linq.XName.Get("Flaechennummer", "http://www.bfr-abwasser.de");
            
            private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("Flaechenobjekt", "http://www.bfr-abwasser.de");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;
            
		public static explicit operator FlaechenobjektLocalType(XElement xe) { return XTypedServices.ToXTypedElement<FlaechenobjektLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static FlaechenobjektLocalType() {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(FlaechennummerXName));
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (Flaechennummer)
            /// </para>
            /// </summary>
            public FlaechenobjektLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (Flaechennummer)
            /// </para>
            /// </summary>
            public virtual decimal Flaechennummer {
                get {
                    XElement x = this.GetElement(FlaechennummerXName);
                    return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                }
                set {
                    this.SetElementWithValidation(FlaechennummerXName, value, "Flaechennummer", FlaechennummerLocalType.TypeDefinition);
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            System.Xml.Linq.XName IXMetaData.SchemaName {
                get {
                    return xName;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<FlaechenobjektLocalType>(this);
            }
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(FlaechennummerXName, typeof(decimal));
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return contentModel;
            }
            
            private class FlaechennummerLocalType {
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(1024)), null, 0, 0, null, null, 0, null, null, 0, null, 10, XmlSchemaWhiteSpace.Collapse));
                
                private FlaechennummerLocalType() {
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Flaechennummer)
        /// </para>
        /// </summary>
        public partial class HauptflaecheLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName FlaechennummerXName = System.Xml.Linq.XName.Get("Flaechennummer", "http://www.bfr-abwasser.de");
            
            private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("Hauptflaeche", "http://www.bfr-abwasser.de");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;
            
		public static explicit operator HauptflaecheLocalType(XElement xe) { return XTypedServices.ToXTypedElement<HauptflaecheLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static HauptflaecheLocalType() {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(FlaechennummerXName));
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (Flaechennummer)
            /// </para>
            /// </summary>
            public HauptflaecheLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (Flaechennummer)
            /// </para>
            /// </summary>
            public virtual decimal Flaechennummer {
                get {
                    XElement x = this.GetElement(FlaechennummerXName);
                    return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                }
                set {
                    this.SetElementWithValidation(FlaechennummerXName, value, "Flaechennummer", FlaechennummerLocalType.TypeDefinition);
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            System.Xml.Linq.XName IXMetaData.SchemaName {
                get {
                    return xName;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<HauptflaecheLocalType>(this);
            }
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(FlaechennummerXName, typeof(decimal));
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return contentModel;
            }
            
            private class FlaechennummerLocalType {
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(1024)), null, 0, 0, null, null, 0, null, null, 0, null, 10, XmlSchemaWhiteSpace.Collapse));
                
                private FlaechennummerLocalType() {
                }
            }
        }
        
        private class SchwerpunktlaufzeitLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(3200)), null, 2, 0, 10000m, null, 0, null, null, 0, null, 6, XmlSchemaWhiteSpace.Collapse));
            
            private SchwerpunktlaufzeitLocalType() {
            }
        }
        
        private class RauigkeitsbeiwertKbLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(3200)), null, 4, 0, 1000m, null, 0, null, null, 0, null, 7, XmlSchemaWhiteSpace.Collapse));
            
            private RauigkeitsbeiwertKbLocalType() {
            }
        }
        
        private class RauigkeitsbeiwertKstLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(3200)), null, 1, 0, 1000m, null, 0, null, null, 0, null, 4, XmlSchemaWhiteSpace.Collapse));
            
            private RauigkeitsbeiwertKstLocalType() {
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Polygon?, Knoten?)
    /// </para>
    /// </summary>
    public partial class FlaechengeometrieType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName PolygonXName = System.Xml.Linq.XName.Get("Polygon", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName KnotenXName = System.Xml.Linq.XName.Get("Knoten", "http://www.bfr-abwasser.de");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("FlaechengeometrieType", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator FlaechengeometrieType(XElement xe) { return XTypedServices.ToXTypedElement<FlaechengeometrieType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static FlaechengeometrieType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(PolygonXName), new NamedContentModelEntity(KnotenXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Polygon?, Knoten?)
        /// </para>
        /// </summary>
        public FlaechengeometrieType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Polygon?, Knoten?)
        /// </para>
        /// </summary>
        public virtual PolygonLocalType Polygon {
            get {
                XElement x = this.GetElement(PolygonXName);
                return ((PolygonLocalType)(x));
            }
            set {
                this.SetElement(PolygonXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Polygon?, Knoten?)
        /// </para>
        /// </summary>
        public virtual FlPunktType Knoten {
            get {
                XElement x = this.GetElement(KnotenXName);
                return ((FlPunktType)(x));
            }
            set {
                this.SetElement(KnotenXName, value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<FlaechengeometrieType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(PolygonXName, typeof(PolygonLocalType));
            localElementDictionary.Add(KnotenXName, typeof(FlPunktType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Kante+)
        /// </para>
        /// </summary>
        public partial class PolygonLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName KanteXName = System.Xml.Linq.XName.Get("Kante", "http://www.bfr-abwasser.de");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XTypedList<FlKanteType> KanteField;
            
            private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("Polygon", "http://www.bfr-abwasser.de");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;
            
		public static explicit operator PolygonLocalType(XElement xe) { return XTypedServices.ToXTypedElement<PolygonLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static PolygonLocalType() {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(KanteXName));
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (Kante+)
            /// </para>
            /// </summary>
            public PolygonLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required, repeating
            /// </para>
            /// <para>
            /// Regular expression: (Kante+)
            /// </para>
            /// </summary>
            public virtual IList<FlKanteType> Kante {
                get {
                    if ((this.KanteField == null)) {
                        this.KanteField = new XTypedList<FlKanteType>(this, LinqToXsdTypeManager.Instance, KanteXName);
                    }
                    return this.KanteField;
                }
                set {
                    if ((value == null)) {
                        this.KanteField = null;
                    }
                    else {
                        if ((this.KanteField == null)) {
                            this.KanteField = XTypedList<FlKanteType>.Initialize(this, LinqToXsdTypeManager.Instance, value, KanteXName);
                        }
                        else {
                            XTypedServices.SetList<FlKanteType>(this.KanteField, value);
                        }
                    }
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            System.Xml.Linq.XName IXMetaData.SchemaName {
                get {
                    return xName;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<PolygonLocalType>(this);
            }
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(KanteXName, typeof(FlKanteType));
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return contentModel;
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Start, Ende, Mitte?)
    /// </para>
    /// </summary>
    public partial class FlKanteType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName StartXName = System.Xml.Linq.XName.Get("Start", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName EndeXName = System.Xml.Linq.XName.Get("Ende", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName MitteXName = System.Xml.Linq.XName.Get("Mitte", "http://www.bfr-abwasser.de");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("FlKanteType", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator FlKanteType(XElement xe) { return XTypedServices.ToXTypedElement<FlKanteType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static FlKanteType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(StartXName), new NamedContentModelEntity(EndeXName), new NamedContentModelEntity(MitteXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Start, Ende, Mitte?)
        /// </para>
        /// </summary>
        public FlKanteType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (Start, Ende, Mitte?)
        /// </para>
        /// </summary>
        public virtual FlPunktType Start {
            get {
                XElement x = this.GetElement(StartXName);
                return ((FlPunktType)(x));
            }
            set {
                this.SetElement(StartXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (Start, Ende, Mitte?)
        /// </para>
        /// </summary>
        public virtual FlPunktType Ende {
            get {
                XElement x = this.GetElement(EndeXName);
                return ((FlPunktType)(x));
            }
            set {
                this.SetElement(EndeXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Start, Ende, Mitte?)
        /// </para>
        /// </summary>
        public virtual FlPunktType Mitte {
            get {
                XElement x = this.GetElement(MitteXName);
                return ((FlPunktType)(x));
            }
            set {
                this.SetElement(MitteXName, value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<FlKanteType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(StartXName, typeof(FlPunktType));
            localElementDictionary.Add(EndeXName, typeof(FlPunktType));
            localElementDictionary.Add(MitteXName, typeof(FlPunktType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Rechtswert, Hochwert, Punkthoehe?)
    /// </para>
    /// </summary>
    public partial class FlPunktType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName RechtswertXName = System.Xml.Linq.XName.Get("Rechtswert", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName HochwertXName = System.Xml.Linq.XName.Get("Hochwert", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName PunkthoeheXName = System.Xml.Linq.XName.Get("Punkthoehe", "http://www.bfr-abwasser.de");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("FlPunktType", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator FlPunktType(XElement xe) { return XTypedServices.ToXTypedElement<FlPunktType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static FlPunktType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(RechtswertXName), new NamedContentModelEntity(HochwertXName), new NamedContentModelEntity(PunkthoeheXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Rechtswert, Hochwert, Punkthoehe?)
        /// </para>
        /// </summary>
        public FlPunktType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (Rechtswert, Hochwert, Punkthoehe?)
        /// </para>
        /// </summary>
        public virtual decimal Rechtswert {
            get {
                XElement x = this.GetElement(RechtswertXName);
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
            set {
                this.SetElementWithValidation(RechtswertXName, value, "Rechtswert", RechtswertLocalType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (Rechtswert, Hochwert, Punkthoehe?)
        /// </para>
        /// </summary>
        public virtual decimal Hochwert {
            get {
                XElement x = this.GetElement(HochwertXName);
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
            set {
                this.SetElementWithValidation(HochwertXName, value, "Hochwert", HochwertLocalType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Rechtswert, Hochwert, Punkthoehe?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? Punkthoehe {
            get {
                XElement x = this.GetElement(PunkthoeheXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(PunkthoeheXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                }
                else {
                    this.SetElementWithValidation(PunkthoeheXName, value, "Punkthoehe", PunkthoeheLocalType.TypeDefinition);
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<FlPunktType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(RechtswertXName, typeof(decimal));
            localElementDictionary.Add(HochwertXName, typeof(decimal));
            localElementDictionary.Add(PunkthoeheXName, typeof(decimal));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        private class RechtswertLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(3072)), null, 3, 0, null, null, 0, null, null, 0, null, 11, XmlSchemaWhiteSpace.Collapse));
            
            private RechtswertLocalType() {
            }
        }
        
        private class HochwertLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(3072)), null, 3, 0, null, null, 0, null, null, 0, null, 10, XmlSchemaWhiteSpace.Collapse));
            
            private HochwertLocalType() {
            }
        }
        
        private class PunkthoeheLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(3072)), null, 3, 0, null, null, 0, null, null, 0, null, 7, XmlSchemaWhiteSpace.Collapse));
            
            private PunkthoeheLocalType() {
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Rauigkeitsansatz?, (RauigkeitsbeiwertKb? | RauigkeitsbeiwertKst?), Berechnungslaenge?, VerlustansatzA110?, VerlustmethodeA110?)
    /// </para>
    /// </summary>
    public partial class HydHaltungLeitungType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName RauigkeitsansatzXName = System.Xml.Linq.XName.Get("Rauigkeitsansatz", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName RauigkeitsbeiwertKbXName = System.Xml.Linq.XName.Get("RauigkeitsbeiwertKb", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName RauigkeitsbeiwertKstXName = System.Xml.Linq.XName.Get("RauigkeitsbeiwertKst", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName BerechnungslaengeXName = System.Xml.Linq.XName.Get("Berechnungslaenge", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName VerlustansatzA110XName = System.Xml.Linq.XName.Get("VerlustansatzA110", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName VerlustmethodeA110XName = System.Xml.Linq.XName.Get("VerlustmethodeA110", "http://www.bfr-abwasser.de");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("HydHaltungLeitungType", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator HydHaltungLeitungType(XElement xe) { return XTypedServices.ToXTypedElement<HydHaltungLeitungType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static HydHaltungLeitungType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(RauigkeitsansatzXName), new ChoiceContentModelEntity(new NamedContentModelEntity(RauigkeitsbeiwertKbXName), new NamedContentModelEntity(RauigkeitsbeiwertKstXName)), new NamedContentModelEntity(BerechnungslaengeXName), new NamedContentModelEntity(VerlustansatzA110XName), new NamedContentModelEntity(VerlustmethodeA110XName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Rauigkeitsansatz?, (RauigkeitsbeiwertKb? | RauigkeitsbeiwertKst?), Berechnungslaenge?, VerlustansatzA110?, VerlustmethodeA110?)
        /// </para>
        /// </summary>
        public HydHaltungLeitungType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Rauigkeitsansatz?, (RauigkeitsbeiwertKb? | RauigkeitsbeiwertKst?), Berechnungslaenge?, VerlustansatzA110?, VerlustmethodeA110?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? Rauigkeitsansatz {
            get {
                XElement x = this.GetElement(RauigkeitsansatzXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(RauigkeitsansatzXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                }
                else {
                    this.SetElementWithValidation(RauigkeitsansatzXName, value, "Rauigkeitsansatz", global::www.bfr.abwasser.de.RauigkeitsansatzType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (Rauigkeitsansatz?, (RauigkeitsbeiwertKb? | RauigkeitsbeiwertKst?), Berechnungslaenge?, VerlustansatzA110?, VerlustmethodeA110?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? RauigkeitsbeiwertKb {
            get {
                XElement x = this.GetElement(RauigkeitsbeiwertKbXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(RauigkeitsbeiwertKbXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                }
                else {
                    this.SetElementWithValidation(RauigkeitsbeiwertKbXName, value, "RauigkeitsbeiwertKb", RauigkeitsbeiwertKbLocalType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (Rauigkeitsansatz?, (RauigkeitsbeiwertKb? | RauigkeitsbeiwertKst?), Berechnungslaenge?, VerlustansatzA110?, VerlustmethodeA110?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? RauigkeitsbeiwertKst {
            get {
                XElement x = this.GetElement(RauigkeitsbeiwertKstXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(RauigkeitsbeiwertKstXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                }
                else {
                    this.SetElementWithValidation(RauigkeitsbeiwertKstXName, value, "RauigkeitsbeiwertKst", RauigkeitsbeiwertKstLocalType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Rauigkeitsansatz?, (RauigkeitsbeiwertKb? | RauigkeitsbeiwertKst?), Berechnungslaenge?, VerlustansatzA110?, VerlustmethodeA110?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? Berechnungslaenge {
            get {
                XElement x = this.GetElement(BerechnungslaengeXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(BerechnungslaengeXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                }
                else {
                    this.SetElementWithValidation(BerechnungslaengeXName, value, "Berechnungslaenge", BerechnungslaengeLocalType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Rauigkeitsansatz?, (RauigkeitsbeiwertKb? | RauigkeitsbeiwertKst?), Berechnungslaenge?, VerlustansatzA110?, VerlustmethodeA110?)
        /// </para>
        /// </summary>
        public virtual System.Boolean? VerlustansatzA110 {
            get {
                XElement x = this.GetElement(VerlustansatzA110XName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
            set {
                this.SetElement(VerlustansatzA110XName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Rauigkeitsansatz?, (RauigkeitsbeiwertKb? | RauigkeitsbeiwertKst?), Berechnungslaenge?, VerlustansatzA110?, VerlustmethodeA110?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? VerlustmethodeA110 {
            get {
                XElement x = this.GetElement(VerlustmethodeA110XName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(VerlustmethodeA110XName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                }
                else {
                    this.SetElementWithValidation(VerlustmethodeA110XName, value, "VerlustmethodeA110", global::www.bfr.abwasser.de.VerlustmethodeA110Type.TypeDefinition);
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<HydHaltungLeitungType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(RauigkeitsansatzXName, typeof(decimal));
            localElementDictionary.Add(RauigkeitsbeiwertKbXName, typeof(decimal));
            localElementDictionary.Add(RauigkeitsbeiwertKstXName, typeof(decimal));
            localElementDictionary.Add(BerechnungslaengeXName, typeof(decimal));
            localElementDictionary.Add(VerlustansatzA110XName, typeof(bool));
            localElementDictionary.Add(VerlustmethodeA110XName, typeof(decimal));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        private class RauigkeitsbeiwertKbLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(3200)), null, 4, 0, 1000m, null, 0, null, null, 0, null, 7, XmlSchemaWhiteSpace.Collapse));
            
            private RauigkeitsbeiwertKbLocalType() {
            }
        }
        
        private class RauigkeitsbeiwertKstLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(3200)), null, 1, 0, 1000m, null, 0, null, null, 0, null, 4, XmlSchemaWhiteSpace.Collapse));
            
            private RauigkeitsbeiwertKstLocalType() {
            }
        }
        
        private class BerechnungslaengeLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(3200)), null, 2, 0, 10000m, null, 0, null, null, 0, null, 6, XmlSchemaWhiteSpace.Collapse));
            
            private BerechnungslaengeLocalType() {
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Rauigkeitsbeiwert1?, Rauigkeitsbeiwert2?)
    /// </para>
    /// </summary>
    public partial class HydGerinneType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName Rauigkeitsbeiwert1XName = System.Xml.Linq.XName.Get("Rauigkeitsbeiwert1", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName Rauigkeitsbeiwert2XName = System.Xml.Linq.XName.Get("Rauigkeitsbeiwert2", "http://www.bfr-abwasser.de");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("HydGerinneType", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator HydGerinneType(XElement xe) { return XTypedServices.ToXTypedElement<HydGerinneType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static HydGerinneType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(Rauigkeitsbeiwert1XName), new NamedContentModelEntity(Rauigkeitsbeiwert2XName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Rauigkeitsbeiwert1?, Rauigkeitsbeiwert2?)
        /// </para>
        /// </summary>
        public HydGerinneType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Rauigkeitsbeiwert1?, Rauigkeitsbeiwert2?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? Rauigkeitsbeiwert1 {
            get {
                XElement x = this.GetElement(Rauigkeitsbeiwert1XName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(Rauigkeitsbeiwert1XName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                }
                else {
                    this.SetElementWithValidation(Rauigkeitsbeiwert1XName, value, "Rauigkeitsbeiwert1", Rauigkeitsbeiwert1LocalType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Rauigkeitsbeiwert1?, Rauigkeitsbeiwert2?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? Rauigkeitsbeiwert2 {
            get {
                XElement x = this.GetElement(Rauigkeitsbeiwert2XName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(Rauigkeitsbeiwert2XName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                }
                else {
                    this.SetElementWithValidation(Rauigkeitsbeiwert2XName, value, "Rauigkeitsbeiwert2", Rauigkeitsbeiwert2LocalType.TypeDefinition);
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<HydGerinneType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(Rauigkeitsbeiwert1XName, typeof(decimal));
            localElementDictionary.Add(Rauigkeitsbeiwert2XName, typeof(decimal));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        private class Rauigkeitsbeiwert1LocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(3200)), null, 1, 0, 1000m, null, 0, null, null, 0, null, 4, XmlSchemaWhiteSpace.Collapse));
            
            private Rauigkeitsbeiwert1LocalType() {
            }
        }
        
        private class Rauigkeitsbeiwert2LocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(3200)), null, 1, 0, 1000m, null, 0, null, null, 0, null, 4, XmlSchemaWhiteSpace.Collapse));
            
            private Rauigkeitsbeiwert2LocalType() {
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (PumpenTyp?, Steuerschacht?, ArtModellierung?, SchachtZulauf?, SchachtAblauf?, Anfangsvolumen?, Gesamtvolumen?, Sohlhoehe?, (MitKennlinie? | OhneKennlinie? | Schaltstufen? | Wasserstandsdifferenz?))
    /// </para>
    /// </summary>
    public partial class HydPumpeType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName PumpenTypXName = System.Xml.Linq.XName.Get("PumpenTyp", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName SteuerschachtXName = System.Xml.Linq.XName.Get("Steuerschacht", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ArtModellierungXName = System.Xml.Linq.XName.Get("ArtModellierung", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName SchachtZulaufXName = System.Xml.Linq.XName.Get("SchachtZulauf", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName SchachtAblaufXName = System.Xml.Linq.XName.Get("SchachtAblauf", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName AnfangsvolumenXName = System.Xml.Linq.XName.Get("Anfangsvolumen", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName GesamtvolumenXName = System.Xml.Linq.XName.Get("Gesamtvolumen", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName SohlhoeheXName = System.Xml.Linq.XName.Get("Sohlhoehe", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName MitKennlinieXName = System.Xml.Linq.XName.Get("MitKennlinie", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName OhneKennlinieXName = System.Xml.Linq.XName.Get("OhneKennlinie", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName SchaltstufenXName = System.Xml.Linq.XName.Get("Schaltstufen", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName WasserstandsdifferenzXName = System.Xml.Linq.XName.Get("Wasserstandsdifferenz", "http://www.bfr-abwasser.de");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("HydPumpeType", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator HydPumpeType(XElement xe) { return XTypedServices.ToXTypedElement<HydPumpeType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static HydPumpeType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(PumpenTypXName), new NamedContentModelEntity(SteuerschachtXName), new NamedContentModelEntity(ArtModellierungXName), new NamedContentModelEntity(SchachtZulaufXName), new NamedContentModelEntity(SchachtAblaufXName), new NamedContentModelEntity(AnfangsvolumenXName), new NamedContentModelEntity(GesamtvolumenXName), new NamedContentModelEntity(SohlhoeheXName), new ChoiceContentModelEntity(new NamedContentModelEntity(MitKennlinieXName), new NamedContentModelEntity(OhneKennlinieXName), new NamedContentModelEntity(SchaltstufenXName), new NamedContentModelEntity(WasserstandsdifferenzXName)));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (PumpenTyp?, Steuerschacht?, ArtModellierung?, SchachtZulauf?, SchachtAblauf?, Anfangsvolumen?, Gesamtvolumen?, Sohlhoehe?, (MitKennlinie? | OhneKennlinie? | Schaltstufen? | Wasserstandsdifferenz?))
        /// </para>
        /// </summary>
        public HydPumpeType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (PumpenTyp?, Steuerschacht?, ArtModellierung?, SchachtZulauf?, SchachtAblauf?, Anfangsvolumen?, Gesamtvolumen?, Sohlhoehe?, (MitKennlinie? | OhneKennlinie? | Schaltstufen? | Wasserstandsdifferenz?))
        /// </para>
        /// </summary>
        public virtual System.Decimal? PumpenTyp {
            get {
                XElement x = this.GetElement(PumpenTypXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(PumpenTypXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                }
                else {
                    this.SetElementWithValidation(PumpenTypXName, value, "PumpenTyp", global::www.bfr.abwasser.de.PumpentypType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (PumpenTyp?, Steuerschacht?, ArtModellierung?, SchachtZulauf?, SchachtAblauf?, Anfangsvolumen?, Gesamtvolumen?, Sohlhoehe?, (MitKennlinie? | OhneKennlinie? | Schaltstufen? | Wasserstandsdifferenz?))
        /// </para>
        /// </summary>
        public virtual string Steuerschacht {
            get {
                XElement x = this.GetElement(SteuerschachtXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(SteuerschachtXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                else {
                    this.SetElementWithValidation(SteuerschachtXName, value, "Steuerschacht", SteuerschachtLocalType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (PumpenTyp?, Steuerschacht?, ArtModellierung?, SchachtZulauf?, SchachtAblauf?, Anfangsvolumen?, Gesamtvolumen?, Sohlhoehe?, (MitKennlinie? | OhneKennlinie? | Schaltstufen? | Wasserstandsdifferenz?))
        /// </para>
        /// </summary>
        public virtual System.Decimal? ArtModellierung {
            get {
                XElement x = this.GetElement(ArtModellierungXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(ArtModellierungXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                }
                else {
                    this.SetElementWithValidation(ArtModellierungXName, value, "ArtModellierung", global::www.bfr.abwasser.de.ArtModellierungType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (PumpenTyp?, Steuerschacht?, ArtModellierung?, SchachtZulauf?, SchachtAblauf?, Anfangsvolumen?, Gesamtvolumen?, Sohlhoehe?, (MitKennlinie? | OhneKennlinie? | Schaltstufen? | Wasserstandsdifferenz?))
        /// </para>
        /// </summary>
        public virtual string SchachtZulauf {
            get {
                XElement x = this.GetElement(SchachtZulaufXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(SchachtZulaufXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                else {
                    this.SetElementWithValidation(SchachtZulaufXName, value, "SchachtZulauf", SchachtZulaufLocalType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (PumpenTyp?, Steuerschacht?, ArtModellierung?, SchachtZulauf?, SchachtAblauf?, Anfangsvolumen?, Gesamtvolumen?, Sohlhoehe?, (MitKennlinie? | OhneKennlinie? | Schaltstufen? | Wasserstandsdifferenz?))
        /// </para>
        /// </summary>
        public virtual string SchachtAblauf {
            get {
                XElement x = this.GetElement(SchachtAblaufXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(SchachtAblaufXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                else {
                    this.SetElementWithValidation(SchachtAblaufXName, value, "SchachtAblauf", SchachtAblaufLocalType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (PumpenTyp?, Steuerschacht?, ArtModellierung?, SchachtZulauf?, SchachtAblauf?, Anfangsvolumen?, Gesamtvolumen?, Sohlhoehe?, (MitKennlinie? | OhneKennlinie? | Schaltstufen? | Wasserstandsdifferenz?))
        /// </para>
        /// </summary>
        public virtual System.Decimal? Anfangsvolumen {
            get {
                XElement x = this.GetElement(AnfangsvolumenXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(AnfangsvolumenXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                }
                else {
                    this.SetElementWithValidation(AnfangsvolumenXName, value, "Anfangsvolumen", AnfangsvolumenLocalType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (PumpenTyp?, Steuerschacht?, ArtModellierung?, SchachtZulauf?, SchachtAblauf?, Anfangsvolumen?, Gesamtvolumen?, Sohlhoehe?, (MitKennlinie? | OhneKennlinie? | Schaltstufen? | Wasserstandsdifferenz?))
        /// </para>
        /// </summary>
        public virtual System.Decimal? Gesamtvolumen {
            get {
                XElement x = this.GetElement(GesamtvolumenXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(GesamtvolumenXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                }
                else {
                    this.SetElementWithValidation(GesamtvolumenXName, value, "Gesamtvolumen", GesamtvolumenLocalType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (PumpenTyp?, Steuerschacht?, ArtModellierung?, SchachtZulauf?, SchachtAblauf?, Anfangsvolumen?, Gesamtvolumen?, Sohlhoehe?, (MitKennlinie? | OhneKennlinie? | Schaltstufen? | Wasserstandsdifferenz?))
        /// </para>
        /// </summary>
        public virtual System.Decimal? Sohlhoehe {
            get {
                XElement x = this.GetElement(SohlhoeheXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(SohlhoeheXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                }
                else {
                    this.SetElementWithValidation(SohlhoeheXName, value, "Sohlhoehe", SohlhoeheLocalType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (PumpenTyp?, Steuerschacht?, ArtModellierung?, SchachtZulauf?, SchachtAblauf?, Anfangsvolumen?, Gesamtvolumen?, Sohlhoehe?, (MitKennlinie? | OhneKennlinie? | Schaltstufen? | Wasserstandsdifferenz?))
        /// </para>
        /// </summary>
        public virtual MitKennlinieLocalType MitKennlinie {
            get {
                XElement x = this.GetElement(MitKennlinieXName);
                return ((MitKennlinieLocalType)(x));
            }
            set {
                this.SetElement(MitKennlinieXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (PumpenTyp?, Steuerschacht?, ArtModellierung?, SchachtZulauf?, SchachtAblauf?, Anfangsvolumen?, Gesamtvolumen?, Sohlhoehe?, (MitKennlinie? | OhneKennlinie? | Schaltstufen? | Wasserstandsdifferenz?))
        /// </para>
        /// </summary>
        public virtual PumpenstufenType OhneKennlinie {
            get {
                XElement x = this.GetElement(OhneKennlinieXName);
                return ((PumpenstufenType)(x));
            }
            set {
                this.SetElement(OhneKennlinieXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (PumpenTyp?, Steuerschacht?, ArtModellierung?, SchachtZulauf?, SchachtAblauf?, Anfangsvolumen?, Gesamtvolumen?, Sohlhoehe?, (MitKennlinie? | OhneKennlinie? | Schaltstufen? | Wasserstandsdifferenz?))
        /// </para>
        /// </summary>
        public virtual SchaltstufenLocalType Schaltstufen {
            get {
                XElement x = this.GetElement(SchaltstufenXName);
                return ((SchaltstufenLocalType)(x));
            }
            set {
                this.SetElement(SchaltstufenXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (PumpenTyp?, Steuerschacht?, ArtModellierung?, SchachtZulauf?, SchachtAblauf?, Anfangsvolumen?, Gesamtvolumen?, Sohlhoehe?, (MitKennlinie? | OhneKennlinie? | Schaltstufen? | Wasserstandsdifferenz?))
        /// </para>
        /// </summary>
        public virtual WasserstandsdifferenzLocalType Wasserstandsdifferenz {
            get {
                XElement x = this.GetElement(WasserstandsdifferenzXName);
                return ((WasserstandsdifferenzLocalType)(x));
            }
            set {
                this.SetElement(WasserstandsdifferenzXName, value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<HydPumpeType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(PumpenTypXName, typeof(decimal));
            localElementDictionary.Add(SteuerschachtXName, typeof(string));
            localElementDictionary.Add(ArtModellierungXName, typeof(decimal));
            localElementDictionary.Add(SchachtZulaufXName, typeof(string));
            localElementDictionary.Add(SchachtAblaufXName, typeof(string));
            localElementDictionary.Add(AnfangsvolumenXName, typeof(decimal));
            localElementDictionary.Add(GesamtvolumenXName, typeof(decimal));
            localElementDictionary.Add(SohlhoeheXName, typeof(decimal));
            localElementDictionary.Add(MitKennlinieXName, typeof(MitKennlinieLocalType));
            localElementDictionary.Add(OhneKennlinieXName, typeof(PumpenstufenType));
            localElementDictionary.Add(SchaltstufenXName, typeof(SchaltstufenLocalType));
            localElementDictionary.Add(WasserstandsdifferenzXName, typeof(WasserstandsdifferenzLocalType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        private class SteuerschachtLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(4)), null, 0, 0, null, null, 30, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
            
            private SteuerschachtLocalType() {
            }
        }
        
        private class SchachtZulaufLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(4)), null, 0, 0, null, null, 30, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
            
            private SchachtZulaufLocalType() {
            }
        }
        
        private class SchachtAblaufLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(4)), null, 0, 0, null, null, 30, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
            
            private SchachtAblaufLocalType() {
            }
        }
        
        private class AnfangsvolumenLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(3200)), null, 3, 0, 100000000m, null, 0, null, null, 0, null, 11, XmlSchemaWhiteSpace.Collapse));
            
            private AnfangsvolumenLocalType() {
            }
        }
        
        private class GesamtvolumenLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(3200)), null, 3, 0, 100000000m, null, 0, null, null, 0, null, 11, XmlSchemaWhiteSpace.Collapse));
            
            private GesamtvolumenLocalType() {
            }
        }
        
        private class SohlhoeheLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(3200)), null, 3, 0, 10000m, null, 0, null, null, 0, null, 7, XmlSchemaWhiteSpace.Collapse));
            
            private SohlhoeheLocalType() {
            }
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Werte+)
        /// </para>
        /// </summary>
        public partial class MitKennlinieLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName WerteXName = System.Xml.Linq.XName.Get("Werte", "http://www.bfr-abwasser.de");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XTypedList<PumpenKennlinieType> WerteField;
            
            private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("MitKennlinie", "http://www.bfr-abwasser.de");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;
            
		public static explicit operator MitKennlinieLocalType(XElement xe) { return XTypedServices.ToXTypedElement<MitKennlinieLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static MitKennlinieLocalType() {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(WerteXName));
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (Werte+)
            /// </para>
            /// </summary>
            public MitKennlinieLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required, repeating
            /// </para>
            /// <para>
            /// Regular expression: (Werte+)
            /// </para>
            /// </summary>
            public virtual IList<PumpenKennlinieType> Werte {
                get {
                    if ((this.WerteField == null)) {
                        this.WerteField = new XTypedList<PumpenKennlinieType>(this, LinqToXsdTypeManager.Instance, WerteXName);
                    }
                    return this.WerteField;
                }
                set {
                    if ((value == null)) {
                        this.WerteField = null;
                    }
                    else {
                        if ((this.WerteField == null)) {
                            this.WerteField = XTypedList<PumpenKennlinieType>.Initialize(this, LinqToXsdTypeManager.Instance, value, WerteXName);
                        }
                        else {
                            XTypedServices.SetList<PumpenKennlinieType>(this.WerteField, value);
                        }
                    }
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            System.Xml.Linq.XName IXMetaData.SchemaName {
                get {
                    return xName;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<MitKennlinieLocalType>(this);
            }
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(WerteXName, typeof(PumpenKennlinieType));
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return contentModel;
            }
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Werte+)
        /// </para>
        /// </summary>
        public partial class SchaltstufenLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName WerteXName = System.Xml.Linq.XName.Get("Werte", "http://www.bfr-abwasser.de");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XTypedList<WerteLocalType> WerteField;
            
            private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("Schaltstufen", "http://www.bfr-abwasser.de");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;
            
		public static explicit operator SchaltstufenLocalType(XElement xe) { return XTypedServices.ToXTypedElement<SchaltstufenLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static SchaltstufenLocalType() {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(WerteXName));
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (Werte+)
            /// </para>
            /// </summary>
            public SchaltstufenLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required, repeating
            /// </para>
            /// <para>
            /// Regular expression: (Werte+)
            /// </para>
            /// </summary>
            public virtual IList<www.bfr.abwasser.de.HydPumpeType.SchaltstufenLocalType.WerteLocalType> Werte {
                get {
                    if ((this.WerteField == null)) {
                        this.WerteField = new XTypedList<WerteLocalType>(this, LinqToXsdTypeManager.Instance, WerteXName);
                    }
                    return this.WerteField;
                }
                set {
                    if ((value == null)) {
                        this.WerteField = null;
                    }
                    else {
                        if ((this.WerteField == null)) {
                            this.WerteField = XTypedList<WerteLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, WerteXName);
                        }
                        else {
                            XTypedServices.SetList<WerteLocalType>(this.WerteField, value);
                        }
                    }
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            System.Xml.Linq.XName IXMetaData.SchemaName {
                get {
                    return xName;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<SchaltstufenLocalType>(this);
            }
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(WerteXName, typeof(WerteLocalType));
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return contentModel;
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (Leistungsstufe, Schaltpunktsteigend, Schaltpunktfallend)
            /// </para>
            /// </summary>
            public partial class WerteLocalType : XTypedElement, IXMetaData {
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName LeistungsstufeXName = System.Xml.Linq.XName.Get("Leistungsstufe", "http://www.bfr-abwasser.de");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName SchaltpunktsteigendXName = System.Xml.Linq.XName.Get("Schaltpunktsteigend", "http://www.bfr-abwasser.de");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName SchaltpunktfallendXName = System.Xml.Linq.XName.Get("Schaltpunktfallend", "http://www.bfr-abwasser.de");
                
                private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("Werte", "http://www.bfr-abwasser.de");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                private static ContentModelEntity contentModel;
                
		public static explicit operator WerteLocalType(XElement xe) { return XTypedServices.ToXTypedElement<WerteLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
                
                static WerteLocalType() {
                    BuildElementDictionary();
                    contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(LeistungsstufeXName), new NamedContentModelEntity(SchaltpunktsteigendXName), new NamedContentModelEntity(SchaltpunktfallendXName));
                }
                
                /// <summary>
                /// <para>
                /// Regular expression: (Leistungsstufe, Schaltpunktsteigend, Schaltpunktfallend)
                /// </para>
                /// </summary>
                public WerteLocalType() {
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// <para>
                /// Regular expression: (Leistungsstufe, Schaltpunktsteigend, Schaltpunktfallend)
                /// </para>
                /// </summary>
                public virtual decimal Leistungsstufe {
                    get {
                        XElement x = this.GetElement(LeistungsstufeXName);
                        return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                    }
                    set {
                        this.SetElementWithValidation(LeistungsstufeXName, value, "Leistungsstufe", LeistungsstufeLocalType.TypeDefinition);
                    }
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// <para>
                /// Regular expression: (Leistungsstufe, Schaltpunktsteigend, Schaltpunktfallend)
                /// </para>
                /// </summary>
                public virtual decimal Schaltpunktsteigend {
                    get {
                        XElement x = this.GetElement(SchaltpunktsteigendXName);
                        return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                    }
                    set {
                        this.SetElementWithValidation(SchaltpunktsteigendXName, value, "Schaltpunktsteigend", SchaltpunktsteigendLocalType.TypeDefinition);
                    }
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// <para>
                /// Regular expression: (Leistungsstufe, Schaltpunktsteigend, Schaltpunktfallend)
                /// </para>
                /// </summary>
                public virtual decimal Schaltpunktfallend {
                    get {
                        XElement x = this.GetElement(SchaltpunktfallendXName);
                        return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                    }
                    set {
                        this.SetElementWithValidation(SchaltpunktfallendXName, value, "Schaltpunktfallend", SchaltpunktfallendLocalType.TypeDefinition);
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
                    get {
                        return localElementDictionary;
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                System.Xml.Linq.XName IXMetaData.SchemaName {
                    get {
                        return xName;
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                SchemaOrigin IXMetaData.TypeOrigin {
                    get {
                        return SchemaOrigin.Fragment;
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                ILinqToXsdTypeManager IXMetaData.TypeManager {
                    get {
                        return LinqToXsdTypeManager.Instance;
                    }
                }
                
                public override XTypedElement Clone() {
                    return XTypedServices.CloneXTypedElement<WerteLocalType>(this);
                }
                
                private static void BuildElementDictionary() {
                    localElementDictionary.Add(LeistungsstufeXName, typeof(decimal));
                    localElementDictionary.Add(SchaltpunktsteigendXName, typeof(decimal));
                    localElementDictionary.Add(SchaltpunktfallendXName, typeof(decimal));
                }
                
                ContentModelEntity IXMetaData.GetContentModel() {
                    return contentModel;
                }
                
                private class LeistungsstufeLocalType {
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(3200)), null, 3, 0, 100m, null, 0, null, null, 0, null, 5, XmlSchemaWhiteSpace.Collapse));
                    
                    private LeistungsstufeLocalType() {
                    }
                }
                
                private class SchaltpunktsteigendLocalType {
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(3200)), null, 3, 0, 1000000m, null, 0, null, null, 0, null, 9, XmlSchemaWhiteSpace.Collapse));
                    
                    private SchaltpunktsteigendLocalType() {
                    }
                }
                
                private class SchaltpunktfallendLocalType {
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(3200)), null, 3, 0, 1000000m, null, 0, null, null, 0, null, 9, XmlSchemaWhiteSpace.Collapse));
                    
                    private SchaltpunktfallendLocalType() {
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Werte+)
        /// </para>
        /// </summary>
        public partial class WasserstandsdifferenzLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName WerteXName = System.Xml.Linq.XName.Get("Werte", "http://www.bfr-abwasser.de");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XTypedList<WerteLocalType> WerteField;
            
            private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("Wasserstandsdifferenz", "http://www.bfr-abwasser.de");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;
            
		public static explicit operator WasserstandsdifferenzLocalType(XElement xe) { return XTypedServices.ToXTypedElement<WasserstandsdifferenzLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static WasserstandsdifferenzLocalType() {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(WerteXName));
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (Werte+)
            /// </para>
            /// </summary>
            public WasserstandsdifferenzLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required, repeating
            /// </para>
            /// <para>
            /// Regular expression: (Werte+)
            /// </para>
            /// </summary>
            public virtual IList<www.bfr.abwasser.de.HydPumpeType.WasserstandsdifferenzLocalType.WerteLocalType> Werte {
                get {
                    if ((this.WerteField == null)) {
                        this.WerteField = new XTypedList<WerteLocalType>(this, LinqToXsdTypeManager.Instance, WerteXName);
                    }
                    return this.WerteField;
                }
                set {
                    if ((value == null)) {
                        this.WerteField = null;
                    }
                    else {
                        if ((this.WerteField == null)) {
                            this.WerteField = XTypedList<WerteLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, WerteXName);
                        }
                        else {
                            XTypedServices.SetList<WerteLocalType>(this.WerteField, value);
                        }
                    }
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            System.Xml.Linq.XName IXMetaData.SchemaName {
                get {
                    return xName;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<WasserstandsdifferenzLocalType>(this);
            }
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(WerteXName, typeof(WerteLocalType));
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return contentModel;
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (Leistungsstufe, Wasserstandsdifferenz)
            /// </para>
            /// </summary>
            public partial class WerteLocalType : XTypedElement, IXMetaData {
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName LeistungsstufeXName = System.Xml.Linq.XName.Get("Leistungsstufe", "http://www.bfr-abwasser.de");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName WasserstandsdifferenzXName = System.Xml.Linq.XName.Get("Wasserstandsdifferenz", "http://www.bfr-abwasser.de");
                
                private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("Werte", "http://www.bfr-abwasser.de");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                private static ContentModelEntity contentModel;
                
		public static explicit operator WerteLocalType(XElement xe) { return XTypedServices.ToXTypedElement<WerteLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
                
                static WerteLocalType() {
                    BuildElementDictionary();
                    contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(LeistungsstufeXName), new NamedContentModelEntity(WasserstandsdifferenzXName));
                }
                
                /// <summary>
                /// <para>
                /// Regular expression: (Leistungsstufe, Wasserstandsdifferenz)
                /// </para>
                /// </summary>
                public WerteLocalType() {
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// <para>
                /// Regular expression: (Leistungsstufe, Wasserstandsdifferenz)
                /// </para>
                /// </summary>
                public virtual decimal Leistungsstufe {
                    get {
                        XElement x = this.GetElement(LeistungsstufeXName);
                        return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                    }
                    set {
                        this.SetElementWithValidation(LeistungsstufeXName, value, "Leistungsstufe", LeistungsstufeLocalType.TypeDefinition);
                    }
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// <para>
                /// Regular expression: (Leistungsstufe, Wasserstandsdifferenz)
                /// </para>
                /// </summary>
                public virtual decimal Wasserstandsdifferenz {
                    get {
                        XElement x = this.GetElement(WasserstandsdifferenzXName);
                        return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                    }
                    set {
                        this.SetElementWithValidation(WasserstandsdifferenzXName, value, "Wasserstandsdifferenz", WasserstandsdifferenzLocalType.TypeDefinition);
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
                    get {
                        return localElementDictionary;
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                System.Xml.Linq.XName IXMetaData.SchemaName {
                    get {
                        return xName;
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                SchemaOrigin IXMetaData.TypeOrigin {
                    get {
                        return SchemaOrigin.Fragment;
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                ILinqToXsdTypeManager IXMetaData.TypeManager {
                    get {
                        return LinqToXsdTypeManager.Instance;
                    }
                }
                
                public override XTypedElement Clone() {
                    return XTypedServices.CloneXTypedElement<WerteLocalType>(this);
                }
                
                private static void BuildElementDictionary() {
                    localElementDictionary.Add(LeistungsstufeXName, typeof(decimal));
                    localElementDictionary.Add(WasserstandsdifferenzXName, typeof(decimal));
                }
                
                ContentModelEntity IXMetaData.GetContentModel() {
                    return contentModel;
                }
                
                private class LeistungsstufeLocalType {
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(3200)), null, 3, 0, 100m, null, 0, null, null, 0, null, 5, XmlSchemaWhiteSpace.Collapse));
                    
                    private LeistungsstufeLocalType() {
                    }
                }
                
                private class WasserstandsdifferenzLocalType {
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(3200)), null, 3, 0, 100m, null, 0, null, null, 0, null, 5, XmlSchemaWhiteSpace.Collapse));
                    
                    private WasserstandsdifferenzLocalType() {
                    }
                }
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Leistungsstufe, Schaltstufe)
    /// </para>
    /// </summary>
    public partial class PumpenKennlinieType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName LeistungsstufeXName = System.Xml.Linq.XName.Get("Leistungsstufe", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName SchaltstufeXName = System.Xml.Linq.XName.Get("Schaltstufe", "http://www.bfr-abwasser.de");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("PumpenKennlinieType", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator PumpenKennlinieType(XElement xe) { return XTypedServices.ToXTypedElement<PumpenKennlinieType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static PumpenKennlinieType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(LeistungsstufeXName), new NamedContentModelEntity(SchaltstufeXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Leistungsstufe, Schaltstufe)
        /// </para>
        /// </summary>
        public PumpenKennlinieType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (Leistungsstufe, Schaltstufe)
        /// </para>
        /// </summary>
        public virtual decimal Leistungsstufe {
            get {
                XElement x = this.GetElement(LeistungsstufeXName);
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
            set {
                this.SetElementWithValidation(LeistungsstufeXName, value, "Leistungsstufe", LeistungsstufeLocalType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (Leistungsstufe, Schaltstufe)
        /// </para>
        /// </summary>
        public virtual decimal Schaltstufe {
            get {
                XElement x = this.GetElement(SchaltstufeXName);
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
            set {
                this.SetElementWithValidation(SchaltstufeXName, value, "Schaltstufe", SchaltstufeLocalType.TypeDefinition);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<PumpenKennlinieType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(LeistungsstufeXName, typeof(decimal));
            localElementDictionary.Add(SchaltstufeXName, typeof(decimal));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        private class LeistungsstufeLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(3200)), null, 3, 0, 100m, null, 0, null, null, 0, null, 5, XmlSchemaWhiteSpace.Collapse));
            
            private LeistungsstufeLocalType() {
            }
        }
        
        private class SchaltstufeLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(3200)), null, 3, 0, 1000000m, null, 0, null, null, 0, null, 9, XmlSchemaWhiteSpace.Collapse));
            
            private SchaltstufeLocalType() {
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Leistungsstufen, Schaltpunkte)
    /// </para>
    /// </summary>
    public partial class PumpenstufenType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName LeistungsstufenXName = System.Xml.Linq.XName.Get("Leistungsstufen", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName SchaltpunkteXName = System.Xml.Linq.XName.Get("Schaltpunkte", "http://www.bfr-abwasser.de");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("PumpenstufenType", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator PumpenstufenType(XElement xe) { return XTypedServices.ToXTypedElement<PumpenstufenType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static PumpenstufenType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(LeistungsstufenXName), new NamedContentModelEntity(SchaltpunkteXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Leistungsstufen, Schaltpunkte)
        /// </para>
        /// </summary>
        public PumpenstufenType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (Leistungsstufen, Schaltpunkte)
        /// </para>
        /// </summary>
        public virtual LeistungsstufenLocalType Leistungsstufen {
            get {
                XElement x = this.GetElement(LeistungsstufenXName);
                return ((LeistungsstufenLocalType)(x));
            }
            set {
                this.SetElement(LeistungsstufenXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (Leistungsstufen, Schaltpunkte)
        /// </para>
        /// </summary>
        public virtual SchaltpunkteLocalType Schaltpunkte {
            get {
                XElement x = this.GetElement(SchaltpunkteXName);
                return ((SchaltpunkteLocalType)(x));
            }
            set {
                this.SetElement(SchaltpunkteXName, value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<PumpenstufenType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(LeistungsstufenXName, typeof(LeistungsstufenLocalType));
            localElementDictionary.Add(SchaltpunkteXName, typeof(SchaltpunkteLocalType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Stufe1, Stufe2, Stufe3?, Stufe4?, Stufe5?)
        /// </para>
        /// </summary>
        public partial class LeistungsstufenLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName Stufe1XName = System.Xml.Linq.XName.Get("Stufe1", "http://www.bfr-abwasser.de");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName Stufe2XName = System.Xml.Linq.XName.Get("Stufe2", "http://www.bfr-abwasser.de");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName Stufe3XName = System.Xml.Linq.XName.Get("Stufe3", "http://www.bfr-abwasser.de");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName Stufe4XName = System.Xml.Linq.XName.Get("Stufe4", "http://www.bfr-abwasser.de");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName Stufe5XName = System.Xml.Linq.XName.Get("Stufe5", "http://www.bfr-abwasser.de");
            
            private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("Leistungsstufen", "http://www.bfr-abwasser.de");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;
            
		public static explicit operator LeistungsstufenLocalType(XElement xe) { return XTypedServices.ToXTypedElement<LeistungsstufenLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static LeistungsstufenLocalType() {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(Stufe1XName), new NamedContentModelEntity(Stufe2XName), new NamedContentModelEntity(Stufe3XName), new NamedContentModelEntity(Stufe4XName), new NamedContentModelEntity(Stufe5XName));
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (Stufe1, Stufe2, Stufe3?, Stufe4?, Stufe5?)
            /// </para>
            /// </summary>
            public LeistungsstufenLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (Stufe1, Stufe2, Stufe3?, Stufe4?, Stufe5?)
            /// </para>
            /// </summary>
            public virtual decimal Stufe1 {
                get {
                    XElement x = this.GetElement(Stufe1XName);
                    return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                }
                set {
                    this.SetElementWithValidation(Stufe1XName, value, "Stufe1", Stufe1LocalType.TypeDefinition);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (Stufe1, Stufe2, Stufe3?, Stufe4?, Stufe5?)
            /// </para>
            /// </summary>
            public virtual decimal Stufe2 {
                get {
                    XElement x = this.GetElement(Stufe2XName);
                    return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                }
                set {
                    this.SetElementWithValidation(Stufe2XName, value, "Stufe2", Stufe2LocalType.TypeDefinition);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (Stufe1, Stufe2, Stufe3?, Stufe4?, Stufe5?)
            /// </para>
            /// </summary>
            public virtual System.Decimal? Stufe3 {
                get {
                    XElement x = this.GetElement(Stufe3XName);
                    if ((x == null)) {
                        return null;
                    }
                    return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                }
                set {
                    if (value == null) {
                        this.SetElement(Stufe3XName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                    }
                    else {
                        this.SetElementWithValidation(Stufe3XName, value, "Stufe3", Stufe3LocalType.TypeDefinition);
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (Stufe1, Stufe2, Stufe3?, Stufe4?, Stufe5?)
            /// </para>
            /// </summary>
            public virtual System.Decimal? Stufe4 {
                get {
                    XElement x = this.GetElement(Stufe4XName);
                    if ((x == null)) {
                        return null;
                    }
                    return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                }
                set {
                    if (value == null) {
                        this.SetElement(Stufe4XName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                    }
                    else {
                        this.SetElementWithValidation(Stufe4XName, value, "Stufe4", Stufe4LocalType.TypeDefinition);
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (Stufe1, Stufe2, Stufe3?, Stufe4?, Stufe5?)
            /// </para>
            /// </summary>
            public virtual System.Decimal? Stufe5 {
                get {
                    XElement x = this.GetElement(Stufe5XName);
                    if ((x == null)) {
                        return null;
                    }
                    return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                }
                set {
                    if (value == null) {
                        this.SetElement(Stufe5XName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                    }
                    else {
                        this.SetElementWithValidation(Stufe5XName, value, "Stufe5", Stufe5LocalType.TypeDefinition);
                    }
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            System.Xml.Linq.XName IXMetaData.SchemaName {
                get {
                    return xName;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<LeistungsstufenLocalType>(this);
            }
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(Stufe1XName, typeof(decimal));
                localElementDictionary.Add(Stufe2XName, typeof(decimal));
                localElementDictionary.Add(Stufe3XName, typeof(decimal));
                localElementDictionary.Add(Stufe4XName, typeof(decimal));
                localElementDictionary.Add(Stufe5XName, typeof(decimal));
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return contentModel;
            }
            
            private class Stufe1LocalType {
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(3200)), null, 3, 0, 100m, null, 0, null, null, 0, null, 5, XmlSchemaWhiteSpace.Collapse));
                
                private Stufe1LocalType() {
                }
            }
            
            private class Stufe2LocalType {
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(3200)), null, 3, 0, 100m, null, 0, null, null, 0, null, 5, XmlSchemaWhiteSpace.Collapse));
                
                private Stufe2LocalType() {
                }
            }
            
            private class Stufe3LocalType {
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(3200)), null, 3, 0, 100m, null, 0, null, null, 0, null, 5, XmlSchemaWhiteSpace.Collapse));
                
                private Stufe3LocalType() {
                }
            }
            
            private class Stufe4LocalType {
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(3200)), null, 3, 0, 100m, null, 0, null, null, 0, null, 5, XmlSchemaWhiteSpace.Collapse));
                
                private Stufe4LocalType() {
                }
            }
            
            private class Stufe5LocalType {
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(3200)), null, 3, 0, 100m, null, 0, null, null, 0, null, 5, XmlSchemaWhiteSpace.Collapse));
                
                private Stufe5LocalType() {
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Schaltpunkt12, Schaltpunkt23?, Schaltpunkt34?, Schaltpunkt45?, Schaltpunkt54?, Schaltpunkt43?, Schaltpunkt32?, Schaltpunkt21)
        /// </para>
        /// </summary>
        public partial class SchaltpunkteLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName Schaltpunkt12XName = System.Xml.Linq.XName.Get("Schaltpunkt1-2", "http://www.bfr-abwasser.de");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName Schaltpunkt23XName = System.Xml.Linq.XName.Get("Schaltpunkt2-3", "http://www.bfr-abwasser.de");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName Schaltpunkt34XName = System.Xml.Linq.XName.Get("Schaltpunkt3-4", "http://www.bfr-abwasser.de");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName Schaltpunkt45XName = System.Xml.Linq.XName.Get("Schaltpunkt4-5", "http://www.bfr-abwasser.de");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName Schaltpunkt54XName = System.Xml.Linq.XName.Get("Schaltpunkt5-4", "http://www.bfr-abwasser.de");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName Schaltpunkt43XName = System.Xml.Linq.XName.Get("Schaltpunkt4-3", "http://www.bfr-abwasser.de");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName Schaltpunkt32XName = System.Xml.Linq.XName.Get("Schaltpunkt3-2", "http://www.bfr-abwasser.de");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName Schaltpunkt21XName = System.Xml.Linq.XName.Get("Schaltpunkt2-1", "http://www.bfr-abwasser.de");
            
            private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("Schaltpunkte", "http://www.bfr-abwasser.de");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;
            
		public static explicit operator SchaltpunkteLocalType(XElement xe) { return XTypedServices.ToXTypedElement<SchaltpunkteLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static SchaltpunkteLocalType() {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(Schaltpunkt12XName), new NamedContentModelEntity(Schaltpunkt23XName), new NamedContentModelEntity(Schaltpunkt34XName), new NamedContentModelEntity(Schaltpunkt45XName), new NamedContentModelEntity(Schaltpunkt54XName), new NamedContentModelEntity(Schaltpunkt43XName), new NamedContentModelEntity(Schaltpunkt32XName), new NamedContentModelEntity(Schaltpunkt21XName));
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (Schaltpunkt12, Schaltpunkt23?, Schaltpunkt34?, Schaltpunkt45?, Schaltpunkt54?, Schaltpunkt43?, Schaltpunkt32?, Schaltpunkt21)
            /// </para>
            /// </summary>
            public SchaltpunkteLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (Schaltpunkt12, Schaltpunkt23?, Schaltpunkt34?, Schaltpunkt45?, Schaltpunkt54?, Schaltpunkt43?, Schaltpunkt32?, Schaltpunkt21)
            /// </para>
            /// </summary>
            public virtual decimal Schaltpunkt12 {
                get {
                    XElement x = this.GetElement(Schaltpunkt12XName);
                    return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                }
                set {
                    this.SetElementWithValidation(Schaltpunkt12XName, value, "Schaltpunkt12", Schaltpunkt12LocalType.TypeDefinition);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (Schaltpunkt12, Schaltpunkt23?, Schaltpunkt34?, Schaltpunkt45?, Schaltpunkt54?, Schaltpunkt43?, Schaltpunkt32?, Schaltpunkt21)
            /// </para>
            /// </summary>
            public virtual System.Decimal? Schaltpunkt23 {
                get {
                    XElement x = this.GetElement(Schaltpunkt23XName);
                    if ((x == null)) {
                        return null;
                    }
                    return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                }
                set {
                    if (value == null) {
                        this.SetElement(Schaltpunkt23XName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                    }
                    else {
                        this.SetElementWithValidation(Schaltpunkt23XName, value, "Schaltpunkt23", Schaltpunkt23LocalType.TypeDefinition);
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (Schaltpunkt12, Schaltpunkt23?, Schaltpunkt34?, Schaltpunkt45?, Schaltpunkt54?, Schaltpunkt43?, Schaltpunkt32?, Schaltpunkt21)
            /// </para>
            /// </summary>
            public virtual System.Decimal? Schaltpunkt34 {
                get {
                    XElement x = this.GetElement(Schaltpunkt34XName);
                    if ((x == null)) {
                        return null;
                    }
                    return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                }
                set {
                    if (value == null) {
                        this.SetElement(Schaltpunkt34XName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                    }
                    else {
                        this.SetElementWithValidation(Schaltpunkt34XName, value, "Schaltpunkt34", Schaltpunkt34LocalType.TypeDefinition);
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (Schaltpunkt12, Schaltpunkt23?, Schaltpunkt34?, Schaltpunkt45?, Schaltpunkt54?, Schaltpunkt43?, Schaltpunkt32?, Schaltpunkt21)
            /// </para>
            /// </summary>
            public virtual System.Decimal? Schaltpunkt45 {
                get {
                    XElement x = this.GetElement(Schaltpunkt45XName);
                    if ((x == null)) {
                        return null;
                    }
                    return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                }
                set {
                    if (value == null) {
                        this.SetElement(Schaltpunkt45XName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                    }
                    else {
                        this.SetElementWithValidation(Schaltpunkt45XName, value, "Schaltpunkt45", Schaltpunkt45LocalType.TypeDefinition);
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (Schaltpunkt12, Schaltpunkt23?, Schaltpunkt34?, Schaltpunkt45?, Schaltpunkt54?, Schaltpunkt43?, Schaltpunkt32?, Schaltpunkt21)
            /// </para>
            /// </summary>
            public virtual System.Decimal? Schaltpunkt54 {
                get {
                    XElement x = this.GetElement(Schaltpunkt54XName);
                    if ((x == null)) {
                        return null;
                    }
                    return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                }
                set {
                    if (value == null) {
                        this.SetElement(Schaltpunkt54XName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                    }
                    else {
                        this.SetElementWithValidation(Schaltpunkt54XName, value, "Schaltpunkt54", Schaltpunkt54LocalType.TypeDefinition);
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (Schaltpunkt12, Schaltpunkt23?, Schaltpunkt34?, Schaltpunkt45?, Schaltpunkt54?, Schaltpunkt43?, Schaltpunkt32?, Schaltpunkt21)
            /// </para>
            /// </summary>
            public virtual System.Decimal? Schaltpunkt43 {
                get {
                    XElement x = this.GetElement(Schaltpunkt43XName);
                    if ((x == null)) {
                        return null;
                    }
                    return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                }
                set {
                    if (value == null) {
                        this.SetElement(Schaltpunkt43XName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                    }
                    else {
                        this.SetElementWithValidation(Schaltpunkt43XName, value, "Schaltpunkt43", Schaltpunkt43LocalType.TypeDefinition);
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (Schaltpunkt12, Schaltpunkt23?, Schaltpunkt34?, Schaltpunkt45?, Schaltpunkt54?, Schaltpunkt43?, Schaltpunkt32?, Schaltpunkt21)
            /// </para>
            /// </summary>
            public virtual System.Decimal? Schaltpunkt32 {
                get {
                    XElement x = this.GetElement(Schaltpunkt32XName);
                    if ((x == null)) {
                        return null;
                    }
                    return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                }
                set {
                    if (value == null) {
                        this.SetElement(Schaltpunkt32XName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                    }
                    else {
                        this.SetElementWithValidation(Schaltpunkt32XName, value, "Schaltpunkt32", Schaltpunkt32LocalType.TypeDefinition);
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (Schaltpunkt12, Schaltpunkt23?, Schaltpunkt34?, Schaltpunkt45?, Schaltpunkt54?, Schaltpunkt43?, Schaltpunkt32?, Schaltpunkt21)
            /// </para>
            /// </summary>
            public virtual decimal Schaltpunkt21 {
                get {
                    XElement x = this.GetElement(Schaltpunkt21XName);
                    return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                }
                set {
                    this.SetElementWithValidation(Schaltpunkt21XName, value, "Schaltpunkt21", Schaltpunkt21LocalType.TypeDefinition);
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            System.Xml.Linq.XName IXMetaData.SchemaName {
                get {
                    return xName;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<SchaltpunkteLocalType>(this);
            }
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(Schaltpunkt12XName, typeof(decimal));
                localElementDictionary.Add(Schaltpunkt23XName, typeof(decimal));
                localElementDictionary.Add(Schaltpunkt34XName, typeof(decimal));
                localElementDictionary.Add(Schaltpunkt45XName, typeof(decimal));
                localElementDictionary.Add(Schaltpunkt54XName, typeof(decimal));
                localElementDictionary.Add(Schaltpunkt43XName, typeof(decimal));
                localElementDictionary.Add(Schaltpunkt32XName, typeof(decimal));
                localElementDictionary.Add(Schaltpunkt21XName, typeof(decimal));
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return contentModel;
            }
            
            private class Schaltpunkt12LocalType {
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(3200)), null, 3, 0, 100000000m, null, 0, null, null, 0, null, 11, XmlSchemaWhiteSpace.Collapse));
                
                private Schaltpunkt12LocalType() {
                }
            }
            
            private class Schaltpunkt23LocalType {
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(3200)), null, 3, 0, 100000000m, null, 0, null, null, 0, null, 11, XmlSchemaWhiteSpace.Collapse));
                
                private Schaltpunkt23LocalType() {
                }
            }
            
            private class Schaltpunkt34LocalType {
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(3200)), null, 3, 0, 100000000m, null, 0, null, null, 0, null, 11, XmlSchemaWhiteSpace.Collapse));
                
                private Schaltpunkt34LocalType() {
                }
            }
            
            private class Schaltpunkt45LocalType {
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(3200)), null, 3, 0, 100000000m, null, 0, null, null, 0, null, 11, XmlSchemaWhiteSpace.Collapse));
                
                private Schaltpunkt45LocalType() {
                }
            }
            
            private class Schaltpunkt54LocalType {
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(3200)), null, 3, 0, 100000000m, null, 0, null, null, 0, null, 11, XmlSchemaWhiteSpace.Collapse));
                
                private Schaltpunkt54LocalType() {
                }
            }
            
            private class Schaltpunkt43LocalType {
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(3200)), null, 3, 0, 100000000m, null, 0, null, null, 0, null, 11, XmlSchemaWhiteSpace.Collapse));
                
                private Schaltpunkt43LocalType() {
                }
            }
            
            private class Schaltpunkt32LocalType {
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(3200)), null, 3, 0, 100000000m, null, 0, null, null, 0, null, 11, XmlSchemaWhiteSpace.Collapse));
                
                private Schaltpunkt32LocalType() {
                }
            }
            
            private class Schaltpunkt21LocalType {
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(3200)), null, 3, 0, 100000000m, null, 0, null, null, 0, null, 11, XmlSchemaWhiteSpace.Collapse));
                
                private Schaltpunkt21LocalType() {
                }
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (WehrTyp?, ArtModellierung?, SchachtZulauf?, SchachtAblauf?, LaengeWehrschwelle?, Schwellenhoehe?, Kammerhoehe?, Ueberfallbeiwert?, Randbedingung?, konstanterWasserstand?)
    /// </para>
    /// </summary>
    public partial class HydWehrType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName WehrTypXName = System.Xml.Linq.XName.Get("WehrTyp", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ArtModellierungXName = System.Xml.Linq.XName.Get("ArtModellierung", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName SchachtZulaufXName = System.Xml.Linq.XName.Get("SchachtZulauf", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName SchachtAblaufXName = System.Xml.Linq.XName.Get("SchachtAblauf", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName LaengeWehrschwelleXName = System.Xml.Linq.XName.Get("LaengeWehrschwelle", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName SchwellenhoeheXName = System.Xml.Linq.XName.Get("Schwellenhoehe", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName KammerhoeheXName = System.Xml.Linq.XName.Get("Kammerhoehe", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName UeberfallbeiwertXName = System.Xml.Linq.XName.Get("Ueberfallbeiwert", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName RandbedingungXName = System.Xml.Linq.XName.Get("Randbedingung", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName konstanterWasserstandXName = System.Xml.Linq.XName.Get("konstanterWasserstand", "http://www.bfr-abwasser.de");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("HydWehrType", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator HydWehrType(XElement xe) { return XTypedServices.ToXTypedElement<HydWehrType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static HydWehrType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(WehrTypXName), new NamedContentModelEntity(ArtModellierungXName), new NamedContentModelEntity(SchachtZulaufXName), new NamedContentModelEntity(SchachtAblaufXName), new NamedContentModelEntity(LaengeWehrschwelleXName), new NamedContentModelEntity(SchwellenhoeheXName), new NamedContentModelEntity(KammerhoeheXName), new NamedContentModelEntity(UeberfallbeiwertXName), new NamedContentModelEntity(RandbedingungXName), new NamedContentModelEntity(konstanterWasserstandXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (WehrTyp?, ArtModellierung?, SchachtZulauf?, SchachtAblauf?, LaengeWehrschwelle?, Schwellenhoehe?, Kammerhoehe?, Ueberfallbeiwert?, Randbedingung?, konstanterWasserstand?)
        /// </para>
        /// </summary>
        public HydWehrType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (WehrTyp?, ArtModellierung?, SchachtZulauf?, SchachtAblauf?, LaengeWehrschwelle?, Schwellenhoehe?, Kammerhoehe?, Ueberfallbeiwert?, Randbedingung?, konstanterWasserstand?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? WehrTyp {
            get {
                XElement x = this.GetElement(WehrTypXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(WehrTypXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                }
                else {
                    this.SetElementWithValidation(WehrTypXName, value, "WehrTyp", global::www.bfr.abwasser.de.HydWehrtypType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (WehrTyp?, ArtModellierung?, SchachtZulauf?, SchachtAblauf?, LaengeWehrschwelle?, Schwellenhoehe?, Kammerhoehe?, Ueberfallbeiwert?, Randbedingung?, konstanterWasserstand?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? ArtModellierung {
            get {
                XElement x = this.GetElement(ArtModellierungXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(ArtModellierungXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                }
                else {
                    this.SetElementWithValidation(ArtModellierungXName, value, "ArtModellierung", global::www.bfr.abwasser.de.ArtModellierungType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (WehrTyp?, ArtModellierung?, SchachtZulauf?, SchachtAblauf?, LaengeWehrschwelle?, Schwellenhoehe?, Kammerhoehe?, Ueberfallbeiwert?, Randbedingung?, konstanterWasserstand?)
        /// </para>
        /// </summary>
        public virtual string SchachtZulauf {
            get {
                XElement x = this.GetElement(SchachtZulaufXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(SchachtZulaufXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                else {
                    this.SetElementWithValidation(SchachtZulaufXName, value, "SchachtZulauf", SchachtZulaufLocalType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (WehrTyp?, ArtModellierung?, SchachtZulauf?, SchachtAblauf?, LaengeWehrschwelle?, Schwellenhoehe?, Kammerhoehe?, Ueberfallbeiwert?, Randbedingung?, konstanterWasserstand?)
        /// </para>
        /// </summary>
        public virtual string SchachtAblauf {
            get {
                XElement x = this.GetElement(SchachtAblaufXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(SchachtAblaufXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                else {
                    this.SetElementWithValidation(SchachtAblaufXName, value, "SchachtAblauf", SchachtAblaufLocalType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (WehrTyp?, ArtModellierung?, SchachtZulauf?, SchachtAblauf?, LaengeWehrschwelle?, Schwellenhoehe?, Kammerhoehe?, Ueberfallbeiwert?, Randbedingung?, konstanterWasserstand?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? LaengeWehrschwelle {
            get {
                XElement x = this.GetElement(LaengeWehrschwelleXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(LaengeWehrschwelleXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                }
                else {
                    this.SetElementWithValidation(LaengeWehrschwelleXName, value, "LaengeWehrschwelle", LaengeWehrschwelleLocalType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (WehrTyp?, ArtModellierung?, SchachtZulauf?, SchachtAblauf?, LaengeWehrschwelle?, Schwellenhoehe?, Kammerhoehe?, Ueberfallbeiwert?, Randbedingung?, konstanterWasserstand?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? Schwellenhoehe {
            get {
                XElement x = this.GetElement(SchwellenhoeheXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(SchwellenhoeheXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                }
                else {
                    this.SetElementWithValidation(SchwellenhoeheXName, value, "Schwellenhoehe", SchwellenhoeheLocalType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (WehrTyp?, ArtModellierung?, SchachtZulauf?, SchachtAblauf?, LaengeWehrschwelle?, Schwellenhoehe?, Kammerhoehe?, Ueberfallbeiwert?, Randbedingung?, konstanterWasserstand?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? Kammerhoehe {
            get {
                XElement x = this.GetElement(KammerhoeheXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(KammerhoeheXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                }
                else {
                    this.SetElementWithValidation(KammerhoeheXName, value, "Kammerhoehe", KammerhoeheLocalType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (WehrTyp?, ArtModellierung?, SchachtZulauf?, SchachtAblauf?, LaengeWehrschwelle?, Schwellenhoehe?, Kammerhoehe?, Ueberfallbeiwert?, Randbedingung?, konstanterWasserstand?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? Ueberfallbeiwert {
            get {
                XElement x = this.GetElement(UeberfallbeiwertXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(UeberfallbeiwertXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                }
                else {
                    this.SetElementWithValidation(UeberfallbeiwertXName, value, "Ueberfallbeiwert", UeberfallbeiwertLocalType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (WehrTyp?, ArtModellierung?, SchachtZulauf?, SchachtAblauf?, LaengeWehrschwelle?, Schwellenhoehe?, Kammerhoehe?, Ueberfallbeiwert?, Randbedingung?, konstanterWasserstand?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? Randbedingung {
            get {
                XElement x = this.GetElement(RandbedingungXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(RandbedingungXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                }
                else {
                    this.SetElementWithValidation(RandbedingungXName, value, "Randbedingung", global::www.bfr.abwasser.de.RandbedingungType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (WehrTyp?, ArtModellierung?, SchachtZulauf?, SchachtAblauf?, LaengeWehrschwelle?, Schwellenhoehe?, Kammerhoehe?, Ueberfallbeiwert?, Randbedingung?, konstanterWasserstand?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? konstanterWasserstand {
            get {
                XElement x = this.GetElement(konstanterWasserstandXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(konstanterWasserstandXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                }
                else {
                    this.SetElementWithValidation(konstanterWasserstandXName, value, "konstanterWasserstand", konstanterWasserstandLocalType.TypeDefinition);
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<HydWehrType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(WehrTypXName, typeof(decimal));
            localElementDictionary.Add(ArtModellierungXName, typeof(decimal));
            localElementDictionary.Add(SchachtZulaufXName, typeof(string));
            localElementDictionary.Add(SchachtAblaufXName, typeof(string));
            localElementDictionary.Add(LaengeWehrschwelleXName, typeof(decimal));
            localElementDictionary.Add(SchwellenhoeheXName, typeof(decimal));
            localElementDictionary.Add(KammerhoeheXName, typeof(decimal));
            localElementDictionary.Add(UeberfallbeiwertXName, typeof(decimal));
            localElementDictionary.Add(RandbedingungXName, typeof(decimal));
            localElementDictionary.Add(konstanterWasserstandXName, typeof(decimal));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        private class SchachtZulaufLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(4)), null, 0, 0, null, null, 30, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
            
            private SchachtZulaufLocalType() {
            }
        }
        
        private class SchachtAblaufLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(4)), null, 0, 0, null, null, 30, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
            
            private SchachtAblaufLocalType() {
            }
        }
        
        private class LaengeWehrschwelleLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(3200)), null, 2, 0, 10000m, null, 0, null, null, 0, null, 6, XmlSchemaWhiteSpace.Collapse));
            
            private LaengeWehrschwelleLocalType() {
            }
        }
        
        private class SchwellenhoeheLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(3200)), null, 3, 0, 10000m, null, 0, null, null, 0, null, 7, XmlSchemaWhiteSpace.Collapse));
            
            private SchwellenhoeheLocalType() {
            }
        }
        
        private class KammerhoeheLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(3200)), null, 3, 0, 10000m, null, 0, null, null, 0, null, 7, XmlSchemaWhiteSpace.Collapse));
            
            private KammerhoeheLocalType() {
            }
        }
        
        private class UeberfallbeiwertLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(3200)), null, 3, 0, 10m, null, 0, null, null, 0, null, 4, XmlSchemaWhiteSpace.Collapse));
            
            private UeberfallbeiwertLocalType() {
            }
        }
        
        private class konstanterWasserstandLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(3200)), null, 3, 0, 10000m, null, 0, null, null, 0, null, 7, XmlSchemaWhiteSpace.Collapse));
            
            private konstanterWasserstandLocalType() {
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (SchieberTyp?, ArtModellierung?, SchachtZulauf?, SchachtAblauf?, Schieberbreite?, Schiebernulllage?, maximaleHubhoehe?, Verlustbeiwert?, Schieberanfang?, Schieberverfahrgeschwindigkeit?)
    /// </para>
    /// </summary>
    public partial class HydSchieberType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName SchieberTypXName = System.Xml.Linq.XName.Get("SchieberTyp", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ArtModellierungXName = System.Xml.Linq.XName.Get("ArtModellierung", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName SchachtZulaufXName = System.Xml.Linq.XName.Get("SchachtZulauf", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName SchachtAblaufXName = System.Xml.Linq.XName.Get("SchachtAblauf", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName SchieberbreiteXName = System.Xml.Linq.XName.Get("Schieberbreite", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName SchiebernulllageXName = System.Xml.Linq.XName.Get("Schiebernulllage", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName maximaleHubhoeheXName = System.Xml.Linq.XName.Get("maximaleHubhoehe", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName VerlustbeiwertXName = System.Xml.Linq.XName.Get("Verlustbeiwert", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName SchieberanfangXName = System.Xml.Linq.XName.Get("Schieberanfang", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName SchieberverfahrgeschwindigkeitXName = System.Xml.Linq.XName.Get("Schieberverfahrgeschwindigkeit", "http://www.bfr-abwasser.de");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("HydSchieberType", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator HydSchieberType(XElement xe) { return XTypedServices.ToXTypedElement<HydSchieberType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static HydSchieberType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(SchieberTypXName), new NamedContentModelEntity(ArtModellierungXName), new NamedContentModelEntity(SchachtZulaufXName), new NamedContentModelEntity(SchachtAblaufXName), new NamedContentModelEntity(SchieberbreiteXName), new NamedContentModelEntity(SchiebernulllageXName), new NamedContentModelEntity(maximaleHubhoeheXName), new NamedContentModelEntity(VerlustbeiwertXName), new NamedContentModelEntity(SchieberanfangXName), new NamedContentModelEntity(SchieberverfahrgeschwindigkeitXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (SchieberTyp?, ArtModellierung?, SchachtZulauf?, SchachtAblauf?, Schieberbreite?, Schiebernulllage?, maximaleHubhoehe?, Verlustbeiwert?, Schieberanfang?, Schieberverfahrgeschwindigkeit?)
        /// </para>
        /// </summary>
        public HydSchieberType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (SchieberTyp?, ArtModellierung?, SchachtZulauf?, SchachtAblauf?, Schieberbreite?, Schiebernulllage?, maximaleHubhoehe?, Verlustbeiwert?, Schieberanfang?, Schieberverfahrgeschwindigkeit?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? SchieberTyp {
            get {
                XElement x = this.GetElement(SchieberTypXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(SchieberTypXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                }
                else {
                    this.SetElementWithValidation(SchieberTypXName, value, "SchieberTyp", global::www.bfr.abwasser.de.SchiebertypType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (SchieberTyp?, ArtModellierung?, SchachtZulauf?, SchachtAblauf?, Schieberbreite?, Schiebernulllage?, maximaleHubhoehe?, Verlustbeiwert?, Schieberanfang?, Schieberverfahrgeschwindigkeit?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? ArtModellierung {
            get {
                XElement x = this.GetElement(ArtModellierungXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(ArtModellierungXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                }
                else {
                    this.SetElementWithValidation(ArtModellierungXName, value, "ArtModellierung", global::www.bfr.abwasser.de.ArtModellierungType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (SchieberTyp?, ArtModellierung?, SchachtZulauf?, SchachtAblauf?, Schieberbreite?, Schiebernulllage?, maximaleHubhoehe?, Verlustbeiwert?, Schieberanfang?, Schieberverfahrgeschwindigkeit?)
        /// </para>
        /// </summary>
        public virtual string SchachtZulauf {
            get {
                XElement x = this.GetElement(SchachtZulaufXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(SchachtZulaufXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                else {
                    this.SetElementWithValidation(SchachtZulaufXName, value, "SchachtZulauf", SchachtZulaufLocalType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (SchieberTyp?, ArtModellierung?, SchachtZulauf?, SchachtAblauf?, Schieberbreite?, Schiebernulllage?, maximaleHubhoehe?, Verlustbeiwert?, Schieberanfang?, Schieberverfahrgeschwindigkeit?)
        /// </para>
        /// </summary>
        public virtual string SchachtAblauf {
            get {
                XElement x = this.GetElement(SchachtAblaufXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(SchachtAblaufXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                else {
                    this.SetElementWithValidation(SchachtAblaufXName, value, "SchachtAblauf", SchachtAblaufLocalType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (SchieberTyp?, ArtModellierung?, SchachtZulauf?, SchachtAblauf?, Schieberbreite?, Schiebernulllage?, maximaleHubhoehe?, Verlustbeiwert?, Schieberanfang?, Schieberverfahrgeschwindigkeit?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? Schieberbreite {
            get {
                XElement x = this.GetElement(SchieberbreiteXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(SchieberbreiteXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                }
                else {
                    this.SetElementWithValidation(SchieberbreiteXName, value, "Schieberbreite", SchieberbreiteLocalType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (SchieberTyp?, ArtModellierung?, SchachtZulauf?, SchachtAblauf?, Schieberbreite?, Schiebernulllage?, maximaleHubhoehe?, Verlustbeiwert?, Schieberanfang?, Schieberverfahrgeschwindigkeit?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? Schiebernulllage {
            get {
                XElement x = this.GetElement(SchiebernulllageXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(SchiebernulllageXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                }
                else {
                    this.SetElementWithValidation(SchiebernulllageXName, value, "Schiebernulllage", SchiebernulllageLocalType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (SchieberTyp?, ArtModellierung?, SchachtZulauf?, SchachtAblauf?, Schieberbreite?, Schiebernulllage?, maximaleHubhoehe?, Verlustbeiwert?, Schieberanfang?, Schieberverfahrgeschwindigkeit?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? maximaleHubhoehe {
            get {
                XElement x = this.GetElement(maximaleHubhoeheXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(maximaleHubhoeheXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                }
                else {
                    this.SetElementWithValidation(maximaleHubhoeheXName, value, "maximaleHubhoehe", maximaleHubhoeheLocalType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (SchieberTyp?, ArtModellierung?, SchachtZulauf?, SchachtAblauf?, Schieberbreite?, Schiebernulllage?, maximaleHubhoehe?, Verlustbeiwert?, Schieberanfang?, Schieberverfahrgeschwindigkeit?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? Verlustbeiwert {
            get {
                XElement x = this.GetElement(VerlustbeiwertXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(VerlustbeiwertXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                }
                else {
                    this.SetElementWithValidation(VerlustbeiwertXName, value, "Verlustbeiwert", VerlustbeiwertLocalType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (SchieberTyp?, ArtModellierung?, SchachtZulauf?, SchachtAblauf?, Schieberbreite?, Schiebernulllage?, maximaleHubhoehe?, Verlustbeiwert?, Schieberanfang?, Schieberverfahrgeschwindigkeit?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? Schieberanfang {
            get {
                XElement x = this.GetElement(SchieberanfangXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(SchieberanfangXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                }
                else {
                    this.SetElementWithValidation(SchieberanfangXName, value, "Schieberanfang", SchieberanfangLocalType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (SchieberTyp?, ArtModellierung?, SchachtZulauf?, SchachtAblauf?, Schieberbreite?, Schiebernulllage?, maximaleHubhoehe?, Verlustbeiwert?, Schieberanfang?, Schieberverfahrgeschwindigkeit?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? Schieberverfahrgeschwindigkeit {
            get {
                XElement x = this.GetElement(SchieberverfahrgeschwindigkeitXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(SchieberverfahrgeschwindigkeitXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                }
                else {
                    this.SetElementWithValidation(SchieberverfahrgeschwindigkeitXName, value, "Schieberverfahrgeschwindigkeit", SchieberverfahrgeschwindigkeitLocalType.TypeDefinition);
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<HydSchieberType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(SchieberTypXName, typeof(decimal));
            localElementDictionary.Add(ArtModellierungXName, typeof(decimal));
            localElementDictionary.Add(SchachtZulaufXName, typeof(string));
            localElementDictionary.Add(SchachtAblaufXName, typeof(string));
            localElementDictionary.Add(SchieberbreiteXName, typeof(decimal));
            localElementDictionary.Add(SchiebernulllageXName, typeof(decimal));
            localElementDictionary.Add(maximaleHubhoeheXName, typeof(decimal));
            localElementDictionary.Add(VerlustbeiwertXName, typeof(decimal));
            localElementDictionary.Add(SchieberanfangXName, typeof(decimal));
            localElementDictionary.Add(SchieberverfahrgeschwindigkeitXName, typeof(decimal));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        private class SchachtZulaufLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(4)), null, 0, 0, null, null, 30, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
            
            private SchachtZulaufLocalType() {
            }
        }
        
        private class SchachtAblaufLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(4)), null, 0, 0, null, null, 30, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
            
            private SchachtAblaufLocalType() {
            }
        }
        
        private class SchieberbreiteLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(3200)), null, 2, 0, 100m, null, 0, null, null, 0, null, 4, XmlSchemaWhiteSpace.Collapse));
            
            private SchieberbreiteLocalType() {
            }
        }
        
        private class SchiebernulllageLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(3200)), null, 3, 0, 10000m, null, 0, null, null, 0, null, 7, XmlSchemaWhiteSpace.Collapse));
            
            private SchiebernulllageLocalType() {
            }
        }
        
        private class maximaleHubhoeheLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(3200)), null, 3, 0, 10000m, null, 0, null, null, 0, null, 7, XmlSchemaWhiteSpace.Collapse));
            
            private maximaleHubhoeheLocalType() {
            }
        }
        
        private class VerlustbeiwertLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(3200)), null, 3, 0, 10m, null, 0, null, null, 0, null, 4, XmlSchemaWhiteSpace.Collapse));
            
            private VerlustbeiwertLocalType() {
            }
        }
        
        private class SchieberanfangLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(3200)), null, 3, 0, 10000m, null, 0, null, null, 0, null, 7, XmlSchemaWhiteSpace.Collapse));
            
            private SchieberanfangLocalType() {
            }
        }
        
        private class SchieberverfahrgeschwindigkeitLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(3200)), null, 2, 0, 10m, null, 0, null, null, 0, null, 3, XmlSchemaWhiteSpace.Collapse));
            
            private SchieberverfahrgeschwindigkeitLocalType() {
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (DruckdichterDeckel?)
    /// </para>
    /// </summary>
    public partial class HydSchachtType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName DruckdichterDeckelXName = System.Xml.Linq.XName.Get("DruckdichterDeckel", "http://www.bfr-abwasser.de");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("HydSchachtType", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator HydSchachtType(XElement xe) { return XTypedServices.ToXTypedElement<HydSchachtType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static HydSchachtType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(DruckdichterDeckelXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (DruckdichterDeckel?)
        /// </para>
        /// </summary>
        public HydSchachtType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (DruckdichterDeckel?)
        /// </para>
        /// </summary>
        public virtual System.Boolean? DruckdichterDeckel {
            get {
                XElement x = this.GetElement(DruckdichterDeckelXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
            set {
                this.SetElement(DruckdichterDeckelXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<HydSchachtType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(DruckdichterDeckelXName, typeof(bool));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (SpeicherbauwerkTyp?, Anfangsvolumen?, Volumenkennlinie?, Drosselkennlinie*, Drosselabfluss*, Versickerungskennlinie?, KfWertBoeschung?, KfWertSohle?)
    /// </para>
    /// </summary>
    public partial class HydSpeicherbauwerkType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName SpeicherbauwerkTypXName = System.Xml.Linq.XName.Get("SpeicherbauwerkTyp", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName AnfangsvolumenXName = System.Xml.Linq.XName.Get("Anfangsvolumen", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName VolumenkennlinieXName = System.Xml.Linq.XName.Get("Volumenkennlinie", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName DrosselkennlinieXName = System.Xml.Linq.XName.Get("Drosselkennlinie", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<DrosselkennlinieLocalType> DrosselkennlinieField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName DrosselabflussXName = System.Xml.Linq.XName.Get("Drosselabfluss", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<DrosselabflussType> DrosselabflussField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName VersickerungskennlinieXName = System.Xml.Linq.XName.Get("Versickerungskennlinie", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName KfWertBoeschungXName = System.Xml.Linq.XName.Get("KfWertBoeschung", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName KfWertSohleXName = System.Xml.Linq.XName.Get("KfWertSohle", "http://www.bfr-abwasser.de");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("HydSpeicherbauwerkType", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator HydSpeicherbauwerkType(XElement xe) { return XTypedServices.ToXTypedElement<HydSpeicherbauwerkType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static HydSpeicherbauwerkType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(SpeicherbauwerkTypXName), new NamedContentModelEntity(AnfangsvolumenXName), new NamedContentModelEntity(VolumenkennlinieXName), new NamedContentModelEntity(DrosselkennlinieXName), new NamedContentModelEntity(DrosselabflussXName), new NamedContentModelEntity(VersickerungskennlinieXName), new NamedContentModelEntity(KfWertBoeschungXName), new NamedContentModelEntity(KfWertSohleXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (SpeicherbauwerkTyp?, Anfangsvolumen?, Volumenkennlinie?, Drosselkennlinie*, Drosselabfluss*, Versickerungskennlinie?, KfWertBoeschung?, KfWertSohle?)
        /// </para>
        /// </summary>
        public HydSpeicherbauwerkType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (SpeicherbauwerkTyp?, Anfangsvolumen?, Volumenkennlinie?, Drosselkennlinie*, Drosselabfluss*, Versickerungskennlinie?, KfWertBoeschung?, KfWertSohle?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? SpeicherbauwerkTyp {
            get {
                XElement x = this.GetElement(SpeicherbauwerkTypXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(SpeicherbauwerkTypXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                }
                else {
                    this.SetElementWithValidation(SpeicherbauwerkTypXName, value, "SpeicherbauwerkTyp", global::www.bfr.abwasser.de.SpeicherbauwerkTypType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (SpeicherbauwerkTyp?, Anfangsvolumen?, Volumenkennlinie?, Drosselkennlinie*, Drosselabfluss*, Versickerungskennlinie?, KfWertBoeschung?, KfWertSohle?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? Anfangsvolumen {
            get {
                XElement x = this.GetElement(AnfangsvolumenXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(AnfangsvolumenXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                }
                else {
                    this.SetElementWithValidation(AnfangsvolumenXName, value, "Anfangsvolumen", AnfangsvolumenLocalType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (SpeicherbauwerkTyp?, Anfangsvolumen?, Volumenkennlinie?, Drosselkennlinie*, Drosselabfluss*, Versickerungskennlinie?, KfWertBoeschung?, KfWertSohle?)
        /// </para>
        /// </summary>
        public virtual VolumenkennlinieLocalType Volumenkennlinie {
            get {
                XElement x = this.GetElement(VolumenkennlinieXName);
                return ((VolumenkennlinieLocalType)(x));
            }
            set {
                this.SetElement(VolumenkennlinieXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (SpeicherbauwerkTyp?, Anfangsvolumen?, Volumenkennlinie?, Drosselkennlinie*, Drosselabfluss*, Versickerungskennlinie?, KfWertBoeschung?, KfWertSohle?)
        /// </para>
        /// </summary>
        public virtual IList<www.bfr.abwasser.de.HydSpeicherbauwerkType.DrosselkennlinieLocalType> Drosselkennlinie {
            get {
                if ((this.DrosselkennlinieField == null)) {
                    this.DrosselkennlinieField = new XTypedList<DrosselkennlinieLocalType>(this, LinqToXsdTypeManager.Instance, DrosselkennlinieXName);
                }
                return this.DrosselkennlinieField;
            }
            set {
                if ((value == null)) {
                    this.DrosselkennlinieField = null;
                }
                else {
                    if ((this.DrosselkennlinieField == null)) {
                        this.DrosselkennlinieField = XTypedList<DrosselkennlinieLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, DrosselkennlinieXName);
                    }
                    else {
                        XTypedServices.SetList<DrosselkennlinieLocalType>(this.DrosselkennlinieField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (SpeicherbauwerkTyp?, Anfangsvolumen?, Volumenkennlinie?, Drosselkennlinie*, Drosselabfluss*, Versickerungskennlinie?, KfWertBoeschung?, KfWertSohle?)
        /// </para>
        /// </summary>
        public virtual IList<DrosselabflussType> Drosselabfluss {
            get {
                if ((this.DrosselabflussField == null)) {
                    this.DrosselabflussField = new XTypedList<DrosselabflussType>(this, LinqToXsdTypeManager.Instance, DrosselabflussXName);
                }
                return this.DrosselabflussField;
            }
            set {
                if ((value == null)) {
                    this.DrosselabflussField = null;
                }
                else {
                    if ((this.DrosselabflussField == null)) {
                        this.DrosselabflussField = XTypedList<DrosselabflussType>.Initialize(this, LinqToXsdTypeManager.Instance, value, DrosselabflussXName);
                    }
                    else {
                        XTypedServices.SetList<DrosselabflussType>(this.DrosselabflussField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (SpeicherbauwerkTyp?, Anfangsvolumen?, Volumenkennlinie?, Drosselkennlinie*, Drosselabfluss*, Versickerungskennlinie?, KfWertBoeschung?, KfWertSohle?)
        /// </para>
        /// </summary>
        public virtual VersickerungskennlinieLocalType Versickerungskennlinie {
            get {
                XElement x = this.GetElement(VersickerungskennlinieXName);
                return ((VersickerungskennlinieLocalType)(x));
            }
            set {
                this.SetElement(VersickerungskennlinieXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (SpeicherbauwerkTyp?, Anfangsvolumen?, Volumenkennlinie?, Drosselkennlinie*, Drosselabfluss*, Versickerungskennlinie?, KfWertBoeschung?, KfWertSohle?)
        /// </para>
        /// </summary>
        public virtual System.Double? KfWertBoeschung {
            get {
                XElement x = this.GetElement(KfWertBoeschungXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetElement(KfWertBoeschungXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (SpeicherbauwerkTyp?, Anfangsvolumen?, Volumenkennlinie?, Drosselkennlinie*, Drosselabfluss*, Versickerungskennlinie?, KfWertBoeschung?, KfWertSohle?)
        /// </para>
        /// </summary>
        public virtual System.Double? KfWertSohle {
            get {
                XElement x = this.GetElement(KfWertSohleXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetElement(KfWertSohleXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<HydSpeicherbauwerkType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(SpeicherbauwerkTypXName, typeof(decimal));
            localElementDictionary.Add(AnfangsvolumenXName, typeof(decimal));
            localElementDictionary.Add(VolumenkennlinieXName, typeof(VolumenkennlinieLocalType));
            localElementDictionary.Add(DrosselkennlinieXName, typeof(DrosselkennlinieLocalType));
            localElementDictionary.Add(DrosselabflussXName, typeof(DrosselabflussType));
            localElementDictionary.Add(VersickerungskennlinieXName, typeof(VersickerungskennlinieLocalType));
            localElementDictionary.Add(KfWertBoeschungXName, typeof(double));
            localElementDictionary.Add(KfWertSohleXName, typeof(double));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        private class AnfangsvolumenLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(3200)), null, 3, 0, 1000000000m, null, 0, null, null, 0, null, 11, XmlSchemaWhiteSpace.Collapse));
            
            private AnfangsvolumenLocalType() {
            }
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Werte+)
        /// </para>
        /// </summary>
        public partial class VolumenkennlinieLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName WerteXName = System.Xml.Linq.XName.Get("Werte", "http://www.bfr-abwasser.de");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XTypedList<VolumenkennlinieType> WerteField;
            
            private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("Volumenkennlinie", "http://www.bfr-abwasser.de");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;
            
		public static explicit operator VolumenkennlinieLocalType(XElement xe) { return XTypedServices.ToXTypedElement<VolumenkennlinieLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static VolumenkennlinieLocalType() {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(WerteXName));
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (Werte+)
            /// </para>
            /// </summary>
            public VolumenkennlinieLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required, repeating
            /// </para>
            /// <para>
            /// Regular expression: (Werte+)
            /// </para>
            /// </summary>
            public virtual IList<VolumenkennlinieType> Werte {
                get {
                    if ((this.WerteField == null)) {
                        this.WerteField = new XTypedList<VolumenkennlinieType>(this, LinqToXsdTypeManager.Instance, WerteXName);
                    }
                    return this.WerteField;
                }
                set {
                    if ((value == null)) {
                        this.WerteField = null;
                    }
                    else {
                        if ((this.WerteField == null)) {
                            this.WerteField = XTypedList<VolumenkennlinieType>.Initialize(this, LinqToXsdTypeManager.Instance, value, WerteXName);
                        }
                        else {
                            XTypedServices.SetList<VolumenkennlinieType>(this.WerteField, value);
                        }
                    }
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            System.Xml.Linq.XName IXMetaData.SchemaName {
                get {
                    return xName;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<VolumenkennlinieLocalType>(this);
            }
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(WerteXName, typeof(VolumenkennlinieType));
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return contentModel;
            }
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Werte+)
        /// </para>
        /// </summary>
        public partial class DrosselkennlinieLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName WerteXName = System.Xml.Linq.XName.Get("Werte", "http://www.bfr-abwasser.de");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XTypedList<DrosselkennlinieType> WerteField;
            
            private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("Drosselkennlinie", "http://www.bfr-abwasser.de");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;
            
		public static explicit operator DrosselkennlinieLocalType(XElement xe) { return XTypedServices.ToXTypedElement<DrosselkennlinieLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static DrosselkennlinieLocalType() {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(WerteXName));
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (Werte+)
            /// </para>
            /// </summary>
            public DrosselkennlinieLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required, repeating
            /// </para>
            /// <para>
            /// Regular expression: (Werte+)
            /// </para>
            /// </summary>
            public virtual IList<DrosselkennlinieType> Werte {
                get {
                    if ((this.WerteField == null)) {
                        this.WerteField = new XTypedList<DrosselkennlinieType>(this, LinqToXsdTypeManager.Instance, WerteXName);
                    }
                    return this.WerteField;
                }
                set {
                    if ((value == null)) {
                        this.WerteField = null;
                    }
                    else {
                        if ((this.WerteField == null)) {
                            this.WerteField = XTypedList<DrosselkennlinieType>.Initialize(this, LinqToXsdTypeManager.Instance, value, WerteXName);
                        }
                        else {
                            XTypedServices.SetList<DrosselkennlinieType>(this.WerteField, value);
                        }
                    }
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            System.Xml.Linq.XName IXMetaData.SchemaName {
                get {
                    return xName;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<DrosselkennlinieLocalType>(this);
            }
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(WerteXName, typeof(DrosselkennlinieType));
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return contentModel;
            }
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Werte+)
        /// </para>
        /// </summary>
        public partial class VersickerungskennlinieLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName WerteXName = System.Xml.Linq.XName.Get("Werte", "http://www.bfr-abwasser.de");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XTypedList<VersickerungskennlinieType> WerteField;
            
            private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("Versickerungskennlinie", "http://www.bfr-abwasser.de");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;
            
		public static explicit operator VersickerungskennlinieLocalType(XElement xe) { return XTypedServices.ToXTypedElement<VersickerungskennlinieLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static VersickerungskennlinieLocalType() {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(WerteXName));
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (Werte+)
            /// </para>
            /// </summary>
            public VersickerungskennlinieLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required, repeating
            /// </para>
            /// <para>
            /// Regular expression: (Werte+)
            /// </para>
            /// </summary>
            public virtual IList<VersickerungskennlinieType> Werte {
                get {
                    if ((this.WerteField == null)) {
                        this.WerteField = new XTypedList<VersickerungskennlinieType>(this, LinqToXsdTypeManager.Instance, WerteXName);
                    }
                    return this.WerteField;
                }
                set {
                    if ((value == null)) {
                        this.WerteField = null;
                    }
                    else {
                        if ((this.WerteField == null)) {
                            this.WerteField = XTypedList<VersickerungskennlinieType>.Initialize(this, LinqToXsdTypeManager.Instance, value, WerteXName);
                        }
                        else {
                            XTypedServices.SetList<VersickerungskennlinieType>(this.WerteField, value);
                        }
                    }
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            System.Xml.Linq.XName IXMetaData.SchemaName {
                get {
                    return xName;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<VersickerungskennlinieLocalType>(this);
            }
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(WerteXName, typeof(VersickerungskennlinieType));
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return contentModel;
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Wasserstand, Volumen)
    /// </para>
    /// </summary>
    public partial class VolumenkennlinieType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName WasserstandXName = System.Xml.Linq.XName.Get("Wasserstand", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName VolumenXName = System.Xml.Linq.XName.Get("Volumen", "http://www.bfr-abwasser.de");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("VolumenkennlinieType", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator VolumenkennlinieType(XElement xe) { return XTypedServices.ToXTypedElement<VolumenkennlinieType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static VolumenkennlinieType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(WasserstandXName), new NamedContentModelEntity(VolumenXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Wasserstand, Volumen)
        /// </para>
        /// </summary>
        public VolumenkennlinieType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (Wasserstand, Volumen)
        /// </para>
        /// </summary>
        public virtual decimal Wasserstand {
            get {
                XElement x = this.GetElement(WasserstandXName);
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
            set {
                this.SetElementWithValidation(WasserstandXName, value, "Wasserstand", WasserstandLocalType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (Wasserstand, Volumen)
        /// </para>
        /// </summary>
        public virtual decimal Volumen {
            get {
                XElement x = this.GetElement(VolumenXName);
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
            set {
                this.SetElementWithValidation(VolumenXName, value, "Volumen", VolumenLocalType.TypeDefinition);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<VolumenkennlinieType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(WasserstandXName, typeof(decimal));
            localElementDictionary.Add(VolumenXName, typeof(decimal));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        private class WasserstandLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(3200)), null, 3, 0, 10000m, null, 0, null, null, 0, null, 7, XmlSchemaWhiteSpace.Collapse));
            
            private WasserstandLocalType() {
            }
        }
        
        private class VolumenLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(3200)), null, 3, 0, 100000000m, null, 0, null, null, 0, null, 11, XmlSchemaWhiteSpace.Collapse));
            
            private VolumenLocalType() {
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Wasserstand, Drosselabfluss)
    /// </para>
    /// </summary>
    public partial class DrosselkennlinieType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName WasserstandXName = System.Xml.Linq.XName.Get("Wasserstand", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName DrosselabflussXName = System.Xml.Linq.XName.Get("Drosselabfluss", "http://www.bfr-abwasser.de");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("DrosselkennlinieType", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator DrosselkennlinieType(XElement xe) { return XTypedServices.ToXTypedElement<DrosselkennlinieType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static DrosselkennlinieType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(WasserstandXName), new NamedContentModelEntity(DrosselabflussXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Wasserstand, Drosselabfluss)
        /// </para>
        /// </summary>
        public DrosselkennlinieType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (Wasserstand, Drosselabfluss)
        /// </para>
        /// </summary>
        public virtual decimal Wasserstand {
            get {
                XElement x = this.GetElement(WasserstandXName);
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
            set {
                this.SetElementWithValidation(WasserstandXName, value, "Wasserstand", WasserstandLocalType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (Wasserstand, Drosselabfluss)
        /// </para>
        /// </summary>
        public virtual decimal Drosselabfluss {
            get {
                XElement x = this.GetElement(DrosselabflussXName);
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
            set {
                this.SetElementWithValidation(DrosselabflussXName, value, "Drosselabfluss", DrosselabflussLocalType.TypeDefinition);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<DrosselkennlinieType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(WasserstandXName, typeof(decimal));
            localElementDictionary.Add(DrosselabflussXName, typeof(decimal));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        private class WasserstandLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(3200)), null, 3, 0, 10000m, null, 0, null, null, 0, null, 7, XmlSchemaWhiteSpace.Collapse));
            
            private WasserstandLocalType() {
            }
        }
        
        private class DrosselabflussLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(3200)), null, 1, 0, 100000m, null, 0, null, null, 0, null, 6, XmlSchemaWhiteSpace.Collapse));
            
            private DrosselabflussLocalType() {
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (HoeheRohrsohle?, (Abflusskonstant? | Abflussvariabel?))
    /// </para>
    /// </summary>
    public partial class DrosselabflussType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName HoeheRohrsohleXName = System.Xml.Linq.XName.Get("HoeheRohrsohle", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName AbflusskonstantXName = System.Xml.Linq.XName.Get("Abflusskonstant", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName AbflussvariabelXName = System.Xml.Linq.XName.Get("Abflussvariabel", "http://www.bfr-abwasser.de");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("DrosselabflussType", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator DrosselabflussType(XElement xe) { return XTypedServices.ToXTypedElement<DrosselabflussType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static DrosselabflussType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(HoeheRohrsohleXName), new ChoiceContentModelEntity(new NamedContentModelEntity(AbflusskonstantXName), new NamedContentModelEntity(AbflussvariabelXName)));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (HoeheRohrsohle?, (Abflusskonstant? | Abflussvariabel?))
        /// </para>
        /// </summary>
        public DrosselabflussType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (HoeheRohrsohle?, (Abflusskonstant? | Abflussvariabel?))
        /// </para>
        /// </summary>
        public virtual System.Decimal? HoeheRohrsohle {
            get {
                XElement x = this.GetElement(HoeheRohrsohleXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(HoeheRohrsohleXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                }
                else {
                    this.SetElementWithValidation(HoeheRohrsohleXName, value, "HoeheRohrsohle", HoeheRohrsohleLocalType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (HoeheRohrsohle?, (Abflusskonstant? | Abflussvariabel?))
        /// </para>
        /// </summary>
        public virtual System.Decimal? Abflusskonstant {
            get {
                XElement x = this.GetElement(AbflusskonstantXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(AbflusskonstantXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                }
                else {
                    this.SetElementWithValidation(AbflusskonstantXName, value, "Abflusskonstant", AbflusskonstantLocalType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (HoeheRohrsohle?, (Abflusskonstant? | Abflussvariabel?))
        /// </para>
        /// </summary>
        public virtual AbflussvariabelLocalType Abflussvariabel {
            get {
                XElement x = this.GetElement(AbflussvariabelXName);
                return ((AbflussvariabelLocalType)(x));
            }
            set {
                this.SetElement(AbflussvariabelXName, value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<DrosselabflussType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(HoeheRohrsohleXName, typeof(decimal));
            localElementDictionary.Add(AbflusskonstantXName, typeof(decimal));
            localElementDictionary.Add(AbflussvariabelXName, typeof(AbflussvariabelLocalType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        private class HoeheRohrsohleLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(3200)), null, 2, 0, 100m, null, 0, null, null, 0, null, 4, XmlSchemaWhiteSpace.Collapse));
            
            private HoeheRohrsohleLocalType() {
            }
        }
        
        private class AbflusskonstantLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(3200)), null, 1, 0, 100000m, null, 0, null, null, 0, null, 6, XmlSchemaWhiteSpace.Collapse));
            
            private AbflusskonstantLocalType() {
            }
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Drosseldurchmesser?, Drosselbeiwert?)
        /// </para>
        /// </summary>
        public partial class AbflussvariabelLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName DrosseldurchmesserXName = System.Xml.Linq.XName.Get("Drosseldurchmesser", "http://www.bfr-abwasser.de");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName DrosselbeiwertXName = System.Xml.Linq.XName.Get("Drosselbeiwert", "http://www.bfr-abwasser.de");
            
            private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("Abflussvariabel", "http://www.bfr-abwasser.de");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;
            
		public static explicit operator AbflussvariabelLocalType(XElement xe) { return XTypedServices.ToXTypedElement<AbflussvariabelLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static AbflussvariabelLocalType() {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(DrosseldurchmesserXName), new NamedContentModelEntity(DrosselbeiwertXName));
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (Drosseldurchmesser?, Drosselbeiwert?)
            /// </para>
            /// </summary>
            public AbflussvariabelLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (Drosseldurchmesser?, Drosselbeiwert?)
            /// </para>
            /// </summary>
            public virtual System.Decimal? Drosseldurchmesser {
                get {
                    XElement x = this.GetElement(DrosseldurchmesserXName);
                    if ((x == null)) {
                        return null;
                    }
                    return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                }
                set {
                    if (value == null) {
                        this.SetElement(DrosseldurchmesserXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                    }
                    else {
                        this.SetElementWithValidation(DrosseldurchmesserXName, value, "Drosseldurchmesser", DrosseldurchmesserLocalType.TypeDefinition);
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (Drosseldurchmesser?, Drosselbeiwert?)
            /// </para>
            /// </summary>
            public virtual System.Decimal? Drosselbeiwert {
                get {
                    XElement x = this.GetElement(DrosselbeiwertXName);
                    if ((x == null)) {
                        return null;
                    }
                    return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                }
                set {
                    if (value == null) {
                        this.SetElement(DrosselbeiwertXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                    }
                    else {
                        this.SetElementWithValidation(DrosselbeiwertXName, value, "Drosselbeiwert", DrosselbeiwertLocalType.TypeDefinition);
                    }
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            System.Xml.Linq.XName IXMetaData.SchemaName {
                get {
                    return xName;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<AbflussvariabelLocalType>(this);
            }
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(DrosseldurchmesserXName, typeof(decimal));
                localElementDictionary.Add(DrosselbeiwertXName, typeof(decimal));
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return contentModel;
            }
            
            private class DrosseldurchmesserLocalType {
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(3200)), null, 1, 0, 100000m, null, 0, null, null, 0, null, 6, XmlSchemaWhiteSpace.Collapse));
                
                private DrosseldurchmesserLocalType() {
                }
            }
            
            private class DrosselbeiwertLocalType {
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(3200)), null, 3, 0, 10m, null, 0, null, null, 0, null, 4, XmlSchemaWhiteSpace.Collapse));
                
                private DrosselbeiwertLocalType() {
                }
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Wasserstand, Oberflaeche)
    /// </para>
    /// </summary>
    public partial class VersickerungskennlinieType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName WasserstandXName = System.Xml.Linq.XName.Get("Wasserstand", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName OberflaecheXName = System.Xml.Linq.XName.Get("Oberflaeche", "http://www.bfr-abwasser.de");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("VersickerungskennlinieType", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator VersickerungskennlinieType(XElement xe) { return XTypedServices.ToXTypedElement<VersickerungskennlinieType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static VersickerungskennlinieType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(WasserstandXName), new NamedContentModelEntity(OberflaecheXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Wasserstand, Oberflaeche)
        /// </para>
        /// </summary>
        public VersickerungskennlinieType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (Wasserstand, Oberflaeche)
        /// </para>
        /// </summary>
        public virtual decimal Wasserstand {
            get {
                XElement x = this.GetElement(WasserstandXName);
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
            set {
                this.SetElementWithValidation(WasserstandXName, value, "Wasserstand", WasserstandLocalType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (Wasserstand, Oberflaeche)
        /// </para>
        /// </summary>
        public virtual decimal Oberflaeche {
            get {
                XElement x = this.GetElement(OberflaecheXName);
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
            set {
                this.SetElementWithValidation(OberflaecheXName, value, "Oberflaeche", OberflaecheLocalType.TypeDefinition);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<VersickerungskennlinieType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(WasserstandXName, typeof(decimal));
            localElementDictionary.Add(OberflaecheXName, typeof(decimal));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        private class WasserstandLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(3200)), null, 3, 0, 10000m, null, 0, null, null, 0, null, 7, XmlSchemaWhiteSpace.Collapse));
            
            private WasserstandLocalType() {
            }
        }
        
        private class OberflaecheLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(3200)), null, 3, 0, 100000000m, null, 0, null, null, 0, null, 11, XmlSchemaWhiteSpace.Collapse));
            
            private OberflaecheLocalType() {
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (GSAuslassTyp?, ArtModellierung?, SchachtZulauf?, SchachtAblauf?, Querschnittsflaeche?, Auslassbeiwert?, AbstandSohle?)
    /// </para>
    /// </summary>
    public partial class HydGSAuslassType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName GSAuslassTypXName = System.Xml.Linq.XName.Get("GSAuslassTyp", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ArtModellierungXName = System.Xml.Linq.XName.Get("ArtModellierung", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName SchachtZulaufXName = System.Xml.Linq.XName.Get("SchachtZulauf", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName SchachtAblaufXName = System.Xml.Linq.XName.Get("SchachtAblauf", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName QuerschnittsflaecheXName = System.Xml.Linq.XName.Get("Querschnittsflaeche", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName AuslassbeiwertXName = System.Xml.Linq.XName.Get("Auslassbeiwert", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName AbstandSohleXName = System.Xml.Linq.XName.Get("AbstandSohle", "http://www.bfr-abwasser.de");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("HydGSAuslassType", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator HydGSAuslassType(XElement xe) { return XTypedServices.ToXTypedElement<HydGSAuslassType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static HydGSAuslassType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(GSAuslassTypXName), new NamedContentModelEntity(ArtModellierungXName), new NamedContentModelEntity(SchachtZulaufXName), new NamedContentModelEntity(SchachtAblaufXName), new NamedContentModelEntity(QuerschnittsflaecheXName), new NamedContentModelEntity(AuslassbeiwertXName), new NamedContentModelEntity(AbstandSohleXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (GSAuslassTyp?, ArtModellierung?, SchachtZulauf?, SchachtAblauf?, Querschnittsflaeche?, Auslassbeiwert?, AbstandSohle?)
        /// </para>
        /// </summary>
        public HydGSAuslassType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (GSAuslassTyp?, ArtModellierung?, SchachtZulauf?, SchachtAblauf?, Querschnittsflaeche?, Auslassbeiwert?, AbstandSohle?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? GSAuslassTyp {
            get {
                XElement x = this.GetElement(GSAuslassTypXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(GSAuslassTypXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                }
                else {
                    this.SetElementWithValidation(GSAuslassTypXName, value, "GSAuslassTyp", global::www.bfr.abwasser.de.GSAuslasstypType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (GSAuslassTyp?, ArtModellierung?, SchachtZulauf?, SchachtAblauf?, Querschnittsflaeche?, Auslassbeiwert?, AbstandSohle?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? ArtModellierung {
            get {
                XElement x = this.GetElement(ArtModellierungXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(ArtModellierungXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                }
                else {
                    this.SetElementWithValidation(ArtModellierungXName, value, "ArtModellierung", global::www.bfr.abwasser.de.ArtModellierungType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (GSAuslassTyp?, ArtModellierung?, SchachtZulauf?, SchachtAblauf?, Querschnittsflaeche?, Auslassbeiwert?, AbstandSohle?)
        /// </para>
        /// </summary>
        public virtual string SchachtZulauf {
            get {
                XElement x = this.GetElement(SchachtZulaufXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(SchachtZulaufXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                else {
                    this.SetElementWithValidation(SchachtZulaufXName, value, "SchachtZulauf", SchachtZulaufLocalType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (GSAuslassTyp?, ArtModellierung?, SchachtZulauf?, SchachtAblauf?, Querschnittsflaeche?, Auslassbeiwert?, AbstandSohle?)
        /// </para>
        /// </summary>
        public virtual string SchachtAblauf {
            get {
                XElement x = this.GetElement(SchachtAblaufXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(SchachtAblaufXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                else {
                    this.SetElementWithValidation(SchachtAblaufXName, value, "SchachtAblauf", SchachtAblaufLocalType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (GSAuslassTyp?, ArtModellierung?, SchachtZulauf?, SchachtAblauf?, Querschnittsflaeche?, Auslassbeiwert?, AbstandSohle?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? Querschnittsflaeche {
            get {
                XElement x = this.GetElement(QuerschnittsflaecheXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(QuerschnittsflaecheXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                }
                else {
                    this.SetElementWithValidation(QuerschnittsflaecheXName, value, "Querschnittsflaeche", QuerschnittsflaecheLocalType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (GSAuslassTyp?, ArtModellierung?, SchachtZulauf?, SchachtAblauf?, Querschnittsflaeche?, Auslassbeiwert?, AbstandSohle?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? Auslassbeiwert {
            get {
                XElement x = this.GetElement(AuslassbeiwertXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(AuslassbeiwertXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                }
                else {
                    this.SetElementWithValidation(AuslassbeiwertXName, value, "Auslassbeiwert", AuslassbeiwertLocalType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (GSAuslassTyp?, ArtModellierung?, SchachtZulauf?, SchachtAblauf?, Querschnittsflaeche?, Auslassbeiwert?, AbstandSohle?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? AbstandSohle {
            get {
                XElement x = this.GetElement(AbstandSohleXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(AbstandSohleXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                }
                else {
                    this.SetElementWithValidation(AbstandSohleXName, value, "AbstandSohle", AbstandSohleLocalType.TypeDefinition);
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<HydGSAuslassType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(GSAuslassTypXName, typeof(decimal));
            localElementDictionary.Add(ArtModellierungXName, typeof(decimal));
            localElementDictionary.Add(SchachtZulaufXName, typeof(string));
            localElementDictionary.Add(SchachtAblaufXName, typeof(string));
            localElementDictionary.Add(QuerschnittsflaecheXName, typeof(decimal));
            localElementDictionary.Add(AuslassbeiwertXName, typeof(decimal));
            localElementDictionary.Add(AbstandSohleXName, typeof(decimal));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        private class SchachtZulaufLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(4)), null, 0, 0, null, null, 30, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
            
            private SchachtZulaufLocalType() {
            }
        }
        
        private class SchachtAblaufLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(4)), null, 0, 0, null, null, 30, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
            
            private SchachtAblaufLocalType() {
            }
        }
        
        private class QuerschnittsflaecheLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(3200)), null, 2, 0, 100m, null, 0, null, null, 0, null, 4, XmlSchemaWhiteSpace.Collapse));
            
            private QuerschnittsflaecheLocalType() {
            }
        }
        
        private class AuslassbeiwertLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(3200)), null, 3, 0, 10m, null, 0, null, null, 0, null, 4, XmlSchemaWhiteSpace.Collapse));
            
            private AuslassbeiwertLocalType() {
            }
        }
        
        private class AbstandSohleLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(3200)), null, 2, 0, 100m, null, 0, null, null, 0, null, 4, XmlSchemaWhiteSpace.Collapse));
            
            private AbstandSohleLocalType() {
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (FreiAuslasstyp?, Randbedingung?, konstanterWasserstand?)
    /// </para>
    /// </summary>
    public partial class HydFreiAuslassType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName FreiAuslasstypXName = System.Xml.Linq.XName.Get("FreiAuslasstyp", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName RandbedingungXName = System.Xml.Linq.XName.Get("Randbedingung", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName konstanterWasserstandXName = System.Xml.Linq.XName.Get("konstanterWasserstand", "http://www.bfr-abwasser.de");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("HydFreiAuslassType", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator HydFreiAuslassType(XElement xe) { return XTypedServices.ToXTypedElement<HydFreiAuslassType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static HydFreiAuslassType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(FreiAuslasstypXName), new NamedContentModelEntity(RandbedingungXName), new NamedContentModelEntity(konstanterWasserstandXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (FreiAuslasstyp?, Randbedingung?, konstanterWasserstand?)
        /// </para>
        /// </summary>
        public HydFreiAuslassType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (FreiAuslasstyp?, Randbedingung?, konstanterWasserstand?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? FreiAuslasstyp {
            get {
                XElement x = this.GetElement(FreiAuslasstypXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(FreiAuslasstypXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                }
                else {
                    this.SetElementWithValidation(FreiAuslasstypXName, value, "FreiAuslasstyp", global::www.bfr.abwasser.de.FreiAuslasstypType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (FreiAuslasstyp?, Randbedingung?, konstanterWasserstand?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? Randbedingung {
            get {
                XElement x = this.GetElement(RandbedingungXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(RandbedingungXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                }
                else {
                    this.SetElementWithValidation(RandbedingungXName, value, "Randbedingung", global::www.bfr.abwasser.de.RandbedingungType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (FreiAuslasstyp?, Randbedingung?, konstanterWasserstand?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? konstanterWasserstand {
            get {
                XElement x = this.GetElement(konstanterWasserstandXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(konstanterWasserstandXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                }
                else {
                    this.SetElementWithValidation(konstanterWasserstandXName, value, "konstanterWasserstand", konstanterWasserstandLocalType.TypeDefinition);
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<HydFreiAuslassType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(FreiAuslasstypXName, typeof(decimal));
            localElementDictionary.Add(RandbedingungXName, typeof(decimal));
            localElementDictionary.Add(konstanterWasserstandXName, typeof(decimal));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        private class konstanterWasserstandLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(3200)), null, 3, 0, 10000m, null, 0, null, null, 0, null, 7, XmlSchemaWhiteSpace.Collapse));
            
            private konstanterWasserstandLocalType() {
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (DrosselTyp?, ArtModellierung?, SchachtZulauf?, SchachtAblauf?, AbstandSohle?, ArtEinstauhoehe?, Rueckschlagklappe?, (Funktional? | Tabellarisch?)?)
    /// </para>
    /// </summary>
    public partial class HydDrosselType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName DrosselTypXName = System.Xml.Linq.XName.Get("DrosselTyp", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ArtModellierungXName = System.Xml.Linq.XName.Get("ArtModellierung", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName SchachtZulaufXName = System.Xml.Linq.XName.Get("SchachtZulauf", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName SchachtAblaufXName = System.Xml.Linq.XName.Get("SchachtAblauf", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName AbstandSohleXName = System.Xml.Linq.XName.Get("AbstandSohle", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ArtEinstauhoeheXName = System.Xml.Linq.XName.Get("ArtEinstauhoehe", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName RueckschlagklappeXName = System.Xml.Linq.XName.Get("Rueckschlagklappe", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName FunktionalXName = System.Xml.Linq.XName.Get("Funktional", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TabellarischXName = System.Xml.Linq.XName.Get("Tabellarisch", "http://www.bfr-abwasser.de");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("HydDrosselType", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator HydDrosselType(XElement xe) { return XTypedServices.ToXTypedElement<HydDrosselType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static HydDrosselType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(DrosselTypXName), new NamedContentModelEntity(ArtModellierungXName), new NamedContentModelEntity(SchachtZulaufXName), new NamedContentModelEntity(SchachtAblaufXName), new NamedContentModelEntity(AbstandSohleXName), new NamedContentModelEntity(ArtEinstauhoeheXName), new NamedContentModelEntity(RueckschlagklappeXName), new ChoiceContentModelEntity(new NamedContentModelEntity(FunktionalXName), new NamedContentModelEntity(TabellarischXName)));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (DrosselTyp?, ArtModellierung?, SchachtZulauf?, SchachtAblauf?, AbstandSohle?, ArtEinstauhoehe?, Rueckschlagklappe?, (Funktional? | Tabellarisch?)?)
        /// </para>
        /// </summary>
        public HydDrosselType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (DrosselTyp?, ArtModellierung?, SchachtZulauf?, SchachtAblauf?, AbstandSohle?, ArtEinstauhoehe?, Rueckschlagklappe?, (Funktional? | Tabellarisch?)?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? DrosselTyp {
            get {
                XElement x = this.GetElement(DrosselTypXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(DrosselTypXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                }
                else {
                    this.SetElementWithValidation(DrosselTypXName, value, "DrosselTyp", global::www.bfr.abwasser.de.DrosseltypType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (DrosselTyp?, ArtModellierung?, SchachtZulauf?, SchachtAblauf?, AbstandSohle?, ArtEinstauhoehe?, Rueckschlagklappe?, (Funktional? | Tabellarisch?)?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? ArtModellierung {
            get {
                XElement x = this.GetElement(ArtModellierungXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(ArtModellierungXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                }
                else {
                    this.SetElementWithValidation(ArtModellierungXName, value, "ArtModellierung", global::www.bfr.abwasser.de.ArtModellierungType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (DrosselTyp?, ArtModellierung?, SchachtZulauf?, SchachtAblauf?, AbstandSohle?, ArtEinstauhoehe?, Rueckschlagklappe?, (Funktional? | Tabellarisch?)?)
        /// </para>
        /// </summary>
        public virtual string SchachtZulauf {
            get {
                XElement x = this.GetElement(SchachtZulaufXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(SchachtZulaufXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                else {
                    this.SetElementWithValidation(SchachtZulaufXName, value, "SchachtZulauf", SchachtZulaufLocalType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (DrosselTyp?, ArtModellierung?, SchachtZulauf?, SchachtAblauf?, AbstandSohle?, ArtEinstauhoehe?, Rueckschlagklappe?, (Funktional? | Tabellarisch?)?)
        /// </para>
        /// </summary>
        public virtual string SchachtAblauf {
            get {
                XElement x = this.GetElement(SchachtAblaufXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(SchachtAblaufXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                else {
                    this.SetElementWithValidation(SchachtAblaufXName, value, "SchachtAblauf", SchachtAblaufLocalType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (DrosselTyp?, ArtModellierung?, SchachtZulauf?, SchachtAblauf?, AbstandSohle?, ArtEinstauhoehe?, Rueckschlagklappe?, (Funktional? | Tabellarisch?)?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? AbstandSohle {
            get {
                XElement x = this.GetElement(AbstandSohleXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(AbstandSohleXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                }
                else {
                    this.SetElementWithValidation(AbstandSohleXName, value, "AbstandSohle", AbstandSohleLocalType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (DrosselTyp?, ArtModellierung?, SchachtZulauf?, SchachtAblauf?, AbstandSohle?, ArtEinstauhoehe?, Rueckschlagklappe?, (Funktional? | Tabellarisch?)?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? ArtEinstauhoehe {
            get {
                XElement x = this.GetElement(ArtEinstauhoeheXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(ArtEinstauhoeheXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                }
                else {
                    this.SetElementWithValidation(ArtEinstauhoeheXName, value, "ArtEinstauhoehe", global::www.bfr.abwasser.de.ArtEinstauhoeheType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (DrosselTyp?, ArtModellierung?, SchachtZulauf?, SchachtAblauf?, AbstandSohle?, ArtEinstauhoehe?, Rueckschlagklappe?, (Funktional? | Tabellarisch?)?)
        /// </para>
        /// </summary>
        public virtual System.Boolean? Rueckschlagklappe {
            get {
                XElement x = this.GetElement(RueckschlagklappeXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
            set {
                this.SetElement(RueckschlagklappeXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (DrosselTyp?, ArtModellierung?, SchachtZulauf?, SchachtAblauf?, AbstandSohle?, ArtEinstauhoehe?, Rueckschlagklappe?, (Funktional? | Tabellarisch?)?)
        /// </para>
        /// </summary>
        public virtual FunktionalLocalType Funktional {
            get {
                XElement x = this.GetElement(FunktionalXName);
                return ((FunktionalLocalType)(x));
            }
            set {
                this.SetElement(FunktionalXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (DrosselTyp?, ArtModellierung?, SchachtZulauf?, SchachtAblauf?, AbstandSohle?, ArtEinstauhoehe?, Rueckschlagklappe?, (Funktional? | Tabellarisch?)?)
        /// </para>
        /// </summary>
        public virtual TabellarischLocalType Tabellarisch {
            get {
                XElement x = this.GetElement(TabellarischXName);
                return ((TabellarischLocalType)(x));
            }
            set {
                this.SetElement(TabellarischXName, value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<HydDrosselType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(DrosselTypXName, typeof(decimal));
            localElementDictionary.Add(ArtModellierungXName, typeof(decimal));
            localElementDictionary.Add(SchachtZulaufXName, typeof(string));
            localElementDictionary.Add(SchachtAblaufXName, typeof(string));
            localElementDictionary.Add(AbstandSohleXName, typeof(decimal));
            localElementDictionary.Add(ArtEinstauhoeheXName, typeof(decimal));
            localElementDictionary.Add(RueckschlagklappeXName, typeof(bool));
            localElementDictionary.Add(FunktionalXName, typeof(FunktionalLocalType));
            localElementDictionary.Add(TabellarischXName, typeof(TabellarischLocalType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        private class SchachtZulaufLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(4)), null, 0, 0, null, null, 30, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
            
            private SchachtZulaufLocalType() {
            }
        }
        
        private class SchachtAblaufLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(4)), null, 0, 0, null, null, 30, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
            
            private SchachtAblaufLocalType() {
            }
        }
        
        private class AbstandSohleLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(3200)), null, 2, 0, 100m, null, 0, null, null, 0, null, 4, XmlSchemaWhiteSpace.Collapse));
            
            private AbstandSohleLocalType() {
            }
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Exponent, Koeffizient)
        /// </para>
        /// </summary>
        public partial class FunktionalLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName ExponentXName = System.Xml.Linq.XName.Get("Exponent", "http://www.bfr-abwasser.de");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName KoeffizientXName = System.Xml.Linq.XName.Get("Koeffizient", "http://www.bfr-abwasser.de");
            
            private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("Funktional", "http://www.bfr-abwasser.de");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;
            
		public static explicit operator FunktionalLocalType(XElement xe) { return XTypedServices.ToXTypedElement<FunktionalLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static FunktionalLocalType() {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(ExponentXName), new NamedContentModelEntity(KoeffizientXName));
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (Exponent, Koeffizient)
            /// </para>
            /// </summary>
            public FunktionalLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (Exponent, Koeffizient)
            /// </para>
            /// </summary>
            public virtual decimal Exponent {
                get {
                    XElement x = this.GetElement(ExponentXName);
                    return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                }
                set {
                    this.SetElementWithValidation(ExponentXName, value, "Exponent", ExponentLocalType.TypeDefinition);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (Exponent, Koeffizient)
            /// </para>
            /// </summary>
            public virtual decimal Koeffizient {
                get {
                    XElement x = this.GetElement(KoeffizientXName);
                    return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                }
                set {
                    this.SetElementWithValidation(KoeffizientXName, value, "Koeffizient", KoeffizientLocalType.TypeDefinition);
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            System.Xml.Linq.XName IXMetaData.SchemaName {
                get {
                    return xName;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<FunktionalLocalType>(this);
            }
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(ExponentXName, typeof(decimal));
                localElementDictionary.Add(KoeffizientXName, typeof(decimal));
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return contentModel;
            }
            
            private class ExponentLocalType {
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(3200)), null, 2, 0, 100m, null, 0, null, null, 0, null, 4, XmlSchemaWhiteSpace.Collapse));
                
                private ExponentLocalType() {
                }
            }
            
            private class KoeffizientLocalType {
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(3200)), null, 3, 0, 1000m, null, 0, null, null, 0, null, 6, XmlSchemaWhiteSpace.Collapse));
                
                private KoeffizientLocalType() {
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Werte+)
        /// </para>
        /// </summary>
        public partial class TabellarischLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName WerteXName = System.Xml.Linq.XName.Get("Werte", "http://www.bfr-abwasser.de");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XTypedList<DrosselkennlinieType> WerteField;
            
            private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("Tabellarisch", "http://www.bfr-abwasser.de");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;
            
		public static explicit operator TabellarischLocalType(XElement xe) { return XTypedServices.ToXTypedElement<TabellarischLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static TabellarischLocalType() {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(WerteXName));
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (Werte+)
            /// </para>
            /// </summary>
            public TabellarischLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required, repeating
            /// </para>
            /// <para>
            /// Regular expression: (Werte+)
            /// </para>
            /// </summary>
            public virtual IList<DrosselkennlinieType> Werte {
                get {
                    if ((this.WerteField == null)) {
                        this.WerteField = new XTypedList<DrosselkennlinieType>(this, LinqToXsdTypeManager.Instance, WerteXName);
                    }
                    return this.WerteField;
                }
                set {
                    if ((value == null)) {
                        this.WerteField = null;
                    }
                    else {
                        if ((this.WerteField == null)) {
                            this.WerteField = XTypedList<DrosselkennlinieType>.Initialize(this, LinqToXsdTypeManager.Instance, value, WerteXName);
                        }
                        else {
                            XTypedServices.SetList<DrosselkennlinieType>(this.WerteField, value);
                        }
                    }
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            System.Xml.Linq.XName IXMetaData.SchemaName {
                get {
                    return xName;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<TabellarischLocalType>(this);
            }
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(WerteXName, typeof(DrosselkennlinieType));
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return contentModel;
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (ReglerTyp?, ArtModellierung?, SchachtZulauf?, SchachtAblauf?, (HRegler? | QRegler?)?)
    /// </para>
    /// </summary>
    public partial class HydReglerType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ReglerTypXName = System.Xml.Linq.XName.Get("ReglerTyp", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ArtModellierungXName = System.Xml.Linq.XName.Get("ArtModellierung", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName SchachtZulaufXName = System.Xml.Linq.XName.Get("SchachtZulauf", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName SchachtAblaufXName = System.Xml.Linq.XName.Get("SchachtAblauf", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName HReglerXName = System.Xml.Linq.XName.Get("HRegler", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName QReglerXName = System.Xml.Linq.XName.Get("QRegler", "http://www.bfr-abwasser.de");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("HydReglerType", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator HydReglerType(XElement xe) { return XTypedServices.ToXTypedElement<HydReglerType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static HydReglerType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(ReglerTypXName), new NamedContentModelEntity(ArtModellierungXName), new NamedContentModelEntity(SchachtZulaufXName), new NamedContentModelEntity(SchachtAblaufXName), new ChoiceContentModelEntity(new NamedContentModelEntity(HReglerXName), new NamedContentModelEntity(QReglerXName)));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (ReglerTyp?, ArtModellierung?, SchachtZulauf?, SchachtAblauf?, (HRegler? | QRegler?)?)
        /// </para>
        /// </summary>
        public HydReglerType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (ReglerTyp?, ArtModellierung?, SchachtZulauf?, SchachtAblauf?, (HRegler? | QRegler?)?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? ReglerTyp {
            get {
                XElement x = this.GetElement(ReglerTypXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(ReglerTypXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                }
                else {
                    this.SetElementWithValidation(ReglerTypXName, value, "ReglerTyp", global::www.bfr.abwasser.de.ReglertypType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (ReglerTyp?, ArtModellierung?, SchachtZulauf?, SchachtAblauf?, (HRegler? | QRegler?)?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? ArtModellierung {
            get {
                XElement x = this.GetElement(ArtModellierungXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(ArtModellierungXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                }
                else {
                    this.SetElementWithValidation(ArtModellierungXName, value, "ArtModellierung", global::www.bfr.abwasser.de.ArtModellierungType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (ReglerTyp?, ArtModellierung?, SchachtZulauf?, SchachtAblauf?, (HRegler? | QRegler?)?)
        /// </para>
        /// </summary>
        public virtual string SchachtZulauf {
            get {
                XElement x = this.GetElement(SchachtZulaufXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(SchachtZulaufXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                else {
                    this.SetElementWithValidation(SchachtZulaufXName, value, "SchachtZulauf", SchachtZulaufLocalType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (ReglerTyp?, ArtModellierung?, SchachtZulauf?, SchachtAblauf?, (HRegler? | QRegler?)?)
        /// </para>
        /// </summary>
        public virtual string SchachtAblauf {
            get {
                XElement x = this.GetElement(SchachtAblaufXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(SchachtAblaufXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                else {
                    this.SetElementWithValidation(SchachtAblaufXName, value, "SchachtAblauf", SchachtAblaufLocalType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (ReglerTyp?, ArtModellierung?, SchachtZulauf?, SchachtAblauf?, (HRegler? | QRegler?)?)
        /// </para>
        /// </summary>
        public virtual HReglerLocalType HRegler {
            get {
                XElement x = this.GetElement(HReglerXName);
                return ((HReglerLocalType)(x));
            }
            set {
                this.SetElement(HReglerXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (ReglerTyp?, ArtModellierung?, SchachtZulauf?, SchachtAblauf?, (HRegler? | QRegler?)?)
        /// </para>
        /// </summary>
        public virtual QReglerLocalType QRegler {
            get {
                XElement x = this.GetElement(QReglerXName);
                return ((QReglerLocalType)(x));
            }
            set {
                this.SetElement(QReglerXName, value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<HydReglerType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(ReglerTypXName, typeof(decimal));
            localElementDictionary.Add(ArtModellierungXName, typeof(decimal));
            localElementDictionary.Add(SchachtZulaufXName, typeof(string));
            localElementDictionary.Add(SchachtAblaufXName, typeof(string));
            localElementDictionary.Add(HReglerXName, typeof(HReglerLocalType));
            localElementDictionary.Add(QReglerXName, typeof(QReglerLocalType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        private class SchachtZulaufLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(4)), null, 0, 0, null, null, 30, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
            
            private SchachtZulaufLocalType() {
            }
        }
        
        private class SchachtAblaufLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(4)), null, 0, 0, null, null, 30, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
            
            private SchachtAblaufLocalType() {
            }
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (maxWasserstandUnten?, Aenderungsmass?)
        /// </para>
        /// </summary>
        public partial class HReglerLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName maxWasserstandUntenXName = System.Xml.Linq.XName.Get("maxWasserstandUnten", "http://www.bfr-abwasser.de");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName AenderungsmassXName = System.Xml.Linq.XName.Get("Aenderungsmass", "http://www.bfr-abwasser.de");
            
            private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("HRegler", "http://www.bfr-abwasser.de");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;
            
		public static explicit operator HReglerLocalType(XElement xe) { return XTypedServices.ToXTypedElement<HReglerLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static HReglerLocalType() {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(maxWasserstandUntenXName), new NamedContentModelEntity(AenderungsmassXName));
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (maxWasserstandUnten?, Aenderungsmass?)
            /// </para>
            /// </summary>
            public HReglerLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (maxWasserstandUnten?, Aenderungsmass?)
            /// </para>
            /// </summary>
            public virtual System.Decimal? maxWasserstandUnten {
                get {
                    XElement x = this.GetElement(maxWasserstandUntenXName);
                    if ((x == null)) {
                        return null;
                    }
                    return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                }
                set {
                    if (value == null) {
                        this.SetElement(maxWasserstandUntenXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                    }
                    else {
                        this.SetElementWithValidation(maxWasserstandUntenXName, value, "maxWasserstandUnten", maxWasserstandUntenLocalType.TypeDefinition);
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (maxWasserstandUnten?, Aenderungsmass?)
            /// </para>
            /// </summary>
            public virtual System.Decimal? Aenderungsmass {
                get {
                    XElement x = this.GetElement(AenderungsmassXName);
                    if ((x == null)) {
                        return null;
                    }
                    return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                }
                set {
                    if (value == null) {
                        this.SetElement(AenderungsmassXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                    }
                    else {
                        this.SetElementWithValidation(AenderungsmassXName, value, "Aenderungsmass", AenderungsmassLocalType.TypeDefinition);
                    }
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            System.Xml.Linq.XName IXMetaData.SchemaName {
                get {
                    return xName;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<HReglerLocalType>(this);
            }
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(maxWasserstandUntenXName, typeof(decimal));
                localElementDictionary.Add(AenderungsmassXName, typeof(decimal));
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return contentModel;
            }
            
            private class maxWasserstandUntenLocalType {
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(3200)), null, 3, 0, 10000m, null, 0, null, null, 0, null, 7, XmlSchemaWhiteSpace.Collapse));
                
                private maxWasserstandUntenLocalType() {
                }
            }
            
            private class AenderungsmassLocalType {
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(3200)), null, 2, 0, 100m, null, 0, null, null, 0, null, 4, XmlSchemaWhiteSpace.Collapse));
                
                private AenderungsmassLocalType() {
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (maxDurchfluss?, maxDurchflussUmkehr?, Aenderungsmass?)
        /// </para>
        /// </summary>
        public partial class QReglerLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName maxDurchflussXName = System.Xml.Linq.XName.Get("maxDurchfluss", "http://www.bfr-abwasser.de");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName maxDurchflussUmkehrXName = System.Xml.Linq.XName.Get("maxDurchflussUmkehr", "http://www.bfr-abwasser.de");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName AenderungsmassXName = System.Xml.Linq.XName.Get("Aenderungsmass", "http://www.bfr-abwasser.de");
            
            private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("QRegler", "http://www.bfr-abwasser.de");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;
            
		public static explicit operator QReglerLocalType(XElement xe) { return XTypedServices.ToXTypedElement<QReglerLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static QReglerLocalType() {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(maxDurchflussXName), new NamedContentModelEntity(maxDurchflussUmkehrXName), new NamedContentModelEntity(AenderungsmassXName));
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (maxDurchfluss?, maxDurchflussUmkehr?, Aenderungsmass?)
            /// </para>
            /// </summary>
            public QReglerLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (maxDurchfluss?, maxDurchflussUmkehr?, Aenderungsmass?)
            /// </para>
            /// </summary>
            public virtual System.Decimal? maxDurchfluss {
                get {
                    XElement x = this.GetElement(maxDurchflussXName);
                    if ((x == null)) {
                        return null;
                    }
                    return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                }
                set {
                    if (value == null) {
                        this.SetElement(maxDurchflussXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                    }
                    else {
                        this.SetElementWithValidation(maxDurchflussXName, value, "maxDurchfluss", maxDurchflussLocalType.TypeDefinition);
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (maxDurchfluss?, maxDurchflussUmkehr?, Aenderungsmass?)
            /// </para>
            /// </summary>
            public virtual System.Decimal? maxDurchflussUmkehr {
                get {
                    XElement x = this.GetElement(maxDurchflussUmkehrXName);
                    if ((x == null)) {
                        return null;
                    }
                    return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                }
                set {
                    if (value == null) {
                        this.SetElement(maxDurchflussUmkehrXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                    }
                    else {
                        this.SetElementWithValidation(maxDurchflussUmkehrXName, value, "maxDurchflussUmkehr", maxDurchflussUmkehrLocalType.TypeDefinition);
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (maxDurchfluss?, maxDurchflussUmkehr?, Aenderungsmass?)
            /// </para>
            /// </summary>
            public virtual System.Decimal? Aenderungsmass {
                get {
                    XElement x = this.GetElement(AenderungsmassXName);
                    if ((x == null)) {
                        return null;
                    }
                    return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                }
                set {
                    if (value == null) {
                        this.SetElement(AenderungsmassXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                    }
                    else {
                        this.SetElementWithValidation(AenderungsmassXName, value, "Aenderungsmass", AenderungsmassLocalType.TypeDefinition);
                    }
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            System.Xml.Linq.XName IXMetaData.SchemaName {
                get {
                    return xName;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<QReglerLocalType>(this);
            }
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(maxDurchflussXName, typeof(decimal));
                localElementDictionary.Add(maxDurchflussUmkehrXName, typeof(decimal));
                localElementDictionary.Add(AenderungsmassXName, typeof(decimal));
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return contentModel;
            }
            
            private class maxDurchflussLocalType {
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(3200)), null, 3, 0, 1000m, null, 0, null, null, 0, null, 6, XmlSchemaWhiteSpace.Collapse));
                
                private maxDurchflussLocalType() {
                }
            }
            
            private class maxDurchflussUmkehrLocalType {
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(3200)), null, 3, 0, 1000m, null, 0, null, null, 0, null, 6, XmlSchemaWhiteSpace.Collapse));
                
                private maxDurchflussUmkehrLocalType() {
                }
            }
            
            private class AenderungsmassLocalType {
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(3200)), null, 3, 0, 1000m, null, 0, null, null, 0, null, 6, XmlSchemaWhiteSpace.Collapse));
                
                private AenderungsmassLocalType() {
                }
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Verfahrenskennung, Verfahrensbezeichnung, Verfahrensbeschreibung?, Zielgroessen)
    /// </para>
    /// </summary>
    public partial class Verfahrentype : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName VerfahrenskennungXName = System.Xml.Linq.XName.Get("Verfahrenskennung", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName VerfahrensbezeichnungXName = System.Xml.Linq.XName.Get("Verfahrensbezeichnung", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName VerfahrensbeschreibungXName = System.Xml.Linq.XName.Get("Verfahrensbeschreibung", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ZielgroessenXName = System.Xml.Linq.XName.Get("Zielgroessen", "http://www.bfr-abwasser.de");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("Verfahrentype", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator Verfahrentype(XElement xe) { return XTypedServices.ToXTypedElement<Verfahrentype>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static Verfahrentype() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(VerfahrenskennungXName), new NamedContentModelEntity(VerfahrensbezeichnungXName), new NamedContentModelEntity(VerfahrensbeschreibungXName), new NamedContentModelEntity(ZielgroessenXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Verfahrenskennung, Verfahrensbezeichnung, Verfahrensbeschreibung?, Zielgroessen)
        /// </para>
        /// </summary>
        public Verfahrentype() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (Verfahrenskennung, Verfahrensbezeichnung, Verfahrensbeschreibung?, Zielgroessen)
        /// </para>
        /// </summary>
        public virtual string Verfahrenskennung {
            get {
                XElement x = this.GetElement(VerfahrenskennungXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(VerfahrenskennungXName, value, "Verfahrenskennung", VerfahrenskennungLocalType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (Verfahrenskennung, Verfahrensbezeichnung, Verfahrensbeschreibung?, Zielgroessen)
        /// </para>
        /// </summary>
        public virtual decimal Verfahrensbezeichnung {
            get {
                XElement x = this.GetElement(VerfahrensbezeichnungXName);
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                this.SetElementWithValidation(VerfahrensbezeichnungXName, value, "Verfahrensbezeichnung", global::www.bfr.abwasser.de.VerfahrensartType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Verfahrenskennung, Verfahrensbezeichnung, Verfahrensbeschreibung?, Zielgroessen)
        /// </para>
        /// </summary>
        public virtual string Verfahrensbeschreibung {
            get {
                XElement x = this.GetElement(VerfahrensbeschreibungXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
            set {
                this.SetElement(VerfahrensbeschreibungXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (Verfahrenskennung, Verfahrensbezeichnung, Verfahrensbeschreibung?, Zielgroessen)
        /// </para>
        /// </summary>
        public virtual ZielgroessenLocalType Zielgroessen {
            get {
                XElement x = this.GetElement(ZielgroessenXName);
                return ((ZielgroessenLocalType)(x));
            }
            set {
                this.SetElement(ZielgroessenXName, value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<Verfahrentype>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(VerfahrenskennungXName, typeof(string));
            localElementDictionary.Add(VerfahrensbezeichnungXName, typeof(decimal));
            localElementDictionary.Add(VerfahrensbeschreibungXName, typeof(string));
            localElementDictionary.Add(ZielgroessenXName, typeof(ZielgroessenLocalType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        private class VerfahrenskennungLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(4)), null, 0, 0, null, null, 5, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
            
            private VerfahrenskennungLocalType() {
            }
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Zielgroesse+)
        /// </para>
        /// </summary>
        public partial class ZielgroessenLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName ZielgroesseXName = System.Xml.Linq.XName.Get("Zielgroesse", "http://www.bfr-abwasser.de");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XTypedList<ZielgroesseType> ZielgroesseField;
            
            private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("Zielgroessen", "http://www.bfr-abwasser.de");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;
            
		public static explicit operator ZielgroessenLocalType(XElement xe) { return XTypedServices.ToXTypedElement<ZielgroessenLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static ZielgroessenLocalType() {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(ZielgroesseXName));
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (Zielgroesse+)
            /// </para>
            /// </summary>
            public ZielgroessenLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required, repeating
            /// </para>
            /// <para>
            /// Regular expression: (Zielgroesse+)
            /// </para>
            /// </summary>
            public virtual IList<ZielgroesseType> Zielgroesse {
                get {
                    if ((this.ZielgroesseField == null)) {
                        this.ZielgroesseField = new XTypedList<ZielgroesseType>(this, LinqToXsdTypeManager.Instance, ZielgroesseXName);
                    }
                    return this.ZielgroesseField;
                }
                set {
                    if ((value == null)) {
                        this.ZielgroesseField = null;
                    }
                    else {
                        if ((this.ZielgroesseField == null)) {
                            this.ZielgroesseField = XTypedList<ZielgroesseType>.Initialize(this, LinqToXsdTypeManager.Instance, value, ZielgroesseXName);
                        }
                        else {
                            XTypedServices.SetList<ZielgroesseType>(this.ZielgroesseField, value);
                        }
                    }
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            System.Xml.Linq.XName IXMetaData.SchemaName {
                get {
                    return xName;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<ZielgroessenLocalType>(this);
            }
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(ZielgroesseXName, typeof(ZielgroesseType));
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return contentModel;
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Zielgroessenkennung, HydObjektTyp, ArtZielgroesse, EinheitZielgroesse, WertZielgroesse)
    /// </para>
    /// </summary>
    public partial class ZielgroesseType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ZielgroessenkennungXName = System.Xml.Linq.XName.Get("Zielgroessenkennung", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName HydObjektTypXName = System.Xml.Linq.XName.Get("HydObjektTyp", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ArtZielgroesseXName = System.Xml.Linq.XName.Get("ArtZielgroesse", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName EinheitZielgroesseXName = System.Xml.Linq.XName.Get("EinheitZielgroesse", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName WertZielgroesseXName = System.Xml.Linq.XName.Get("WertZielgroesse", "http://www.bfr-abwasser.de");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("ZielgroesseType", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator ZielgroesseType(XElement xe) { return XTypedServices.ToXTypedElement<ZielgroesseType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static ZielgroesseType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(ZielgroessenkennungXName), new NamedContentModelEntity(HydObjektTypXName), new NamedContentModelEntity(ArtZielgroesseXName), new NamedContentModelEntity(EinheitZielgroesseXName), new NamedContentModelEntity(WertZielgroesseXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Zielgroessenkennung, HydObjektTyp, ArtZielgroesse, EinheitZielgroesse, WertZielgroesse)
        /// </para>
        /// </summary>
        public ZielgroesseType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (Zielgroessenkennung, HydObjektTyp, ArtZielgroesse, EinheitZielgroesse, WertZielgroesse)
        /// </para>
        /// </summary>
        public virtual string Zielgroessenkennung {
            get {
                XElement x = this.GetElement(ZielgroessenkennungXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(ZielgroessenkennungXName, value, "Zielgroessenkennung", ZielgroessenkennungLocalType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (Zielgroessenkennung, HydObjektTyp, ArtZielgroesse, EinheitZielgroesse, WertZielgroesse)
        /// </para>
        /// </summary>
        public virtual decimal HydObjektTyp {
            get {
                XElement x = this.GetElement(HydObjektTypXName);
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                this.SetElementWithValidation(HydObjektTypXName, value, "HydObjektTyp", global::www.bfr.abwasser.de.HydraulikObjektTypType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (Zielgroessenkennung, HydObjektTyp, ArtZielgroesse, EinheitZielgroesse, WertZielgroesse)
        /// </para>
        /// </summary>
        public virtual decimal ArtZielgroesse {
            get {
                XElement x = this.GetElement(ArtZielgroesseXName);
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                this.SetElementWithValidation(ArtZielgroesseXName, value, "ArtZielgroesse", global::www.bfr.abwasser.de.ArtZielgroesseType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (Zielgroessenkennung, HydObjektTyp, ArtZielgroesse, EinheitZielgroesse, WertZielgroesse)
        /// </para>
        /// </summary>
        public virtual decimal EinheitZielgroesse {
            get {
                XElement x = this.GetElement(EinheitZielgroesseXName);
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                this.SetElementWithValidation(EinheitZielgroesseXName, value, "EinheitZielgroesse", global::www.bfr.abwasser.de.EinheitZielgroesseType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (Zielgroessenkennung, HydObjektTyp, ArtZielgroesse, EinheitZielgroesse, WertZielgroesse)
        /// </para>
        /// </summary>
        public virtual decimal WertZielgroesse {
            get {
                XElement x = this.GetElement(WertZielgroesseXName);
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
            set {
                this.SetElementWithValidation(WertZielgroesseXName, value, "WertZielgroesse", WertZielgroesseLocalType.TypeDefinition);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ZielgroesseType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(ZielgroessenkennungXName, typeof(string));
            localElementDictionary.Add(HydObjektTypXName, typeof(decimal));
            localElementDictionary.Add(ArtZielgroesseXName, typeof(decimal));
            localElementDictionary.Add(EinheitZielgroesseXName, typeof(decimal));
            localElementDictionary.Add(WertZielgroesseXName, typeof(decimal));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        private class ZielgroessenkennungLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(4)), null, 0, 0, null, null, 5, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
            
            private ZielgroessenkennungLocalType() {
            }
        }
        
        private class WertZielgroesseLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(3200)), null, 3, 0, 1000000m, null, 0, null, null, 0, null, 9, XmlSchemaWhiteSpace.Collapse));
            
            private WertZielgroesseLocalType() {
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (BerechnungInfo, HydraulikObjekt+)
    /// </para>
    /// </summary>
    public partial class BerechnungType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName BerechnungInfoXName = System.Xml.Linq.XName.Get("BerechnungInfo", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName HydraulikObjektXName = System.Xml.Linq.XName.Get("HydraulikObjekt", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<BerechnungObjektType> HydraulikObjektField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("BerechnungType", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator BerechnungType(XElement xe) { return XTypedServices.ToXTypedElement<BerechnungType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static BerechnungType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(BerechnungInfoXName), new NamedContentModelEntity(HydraulikObjektXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (BerechnungInfo, HydraulikObjekt+)
        /// </para>
        /// </summary>
        public BerechnungType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (BerechnungInfo, HydraulikObjekt+)
        /// </para>
        /// </summary>
        public virtual BerechnungInfoType BerechnungInfo {
            get {
                XElement x = this.GetElement(BerechnungInfoXName);
                return ((BerechnungInfoType)(x));
            }
            set {
                this.SetElement(BerechnungInfoXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (BerechnungInfo, HydraulikObjekt+)
        /// </para>
        /// </summary>
        public virtual IList<BerechnungObjektType> HydraulikObjekt {
            get {
                if ((this.HydraulikObjektField == null)) {
                    this.HydraulikObjektField = new XTypedList<BerechnungObjektType>(this, LinqToXsdTypeManager.Instance, HydraulikObjektXName);
                }
                return this.HydraulikObjektField;
            }
            set {
                if ((value == null)) {
                    this.HydraulikObjektField = null;
                }
                else {
                    if ((this.HydraulikObjektField == null)) {
                        this.HydraulikObjektField = XTypedList<BerechnungObjektType>.Initialize(this, LinqToXsdTypeManager.Instance, value, HydraulikObjektXName);
                    }
                    else {
                        XTypedServices.SetList<BerechnungObjektType>(this.HydraulikObjektField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<BerechnungType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(BerechnungInfoXName, typeof(BerechnungInfoType));
            localElementDictionary.Add(HydraulikObjektXName, typeof(BerechnungObjektType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Rechenlaufkennung, ArtErgebnisse?, Sachbearbeiter?, DatumBerechnung?, Berechnungsmodell?, Berechnungsverfahrenallgemein?, Berechnungsverfahren?, ArtHaeufigkeit?, Verfahrenskennung?, Einleiterkollektivkennung?, Niederschlagsbelastung?, Simulationsdauer?, Kommentar?, Seriensimulation?, zulUeberstauniveau?, BezugUberstauniveau?)
    /// </para>
    /// </summary>
    public partial class BerechnungInfoType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName RechenlaufkennungXName = System.Xml.Linq.XName.Get("Rechenlaufkennung", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ArtErgebnisseXName = System.Xml.Linq.XName.Get("ArtErgebnisse", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName SachbearbeiterXName = System.Xml.Linq.XName.Get("Sachbearbeiter", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName DatumBerechnungXName = System.Xml.Linq.XName.Get("DatumBerechnung", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName BerechnungsmodellXName = System.Xml.Linq.XName.Get("Berechnungsmodell", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName BerechnungsverfahrenallgemeinXName = System.Xml.Linq.XName.Get("Berechnungsverfahrenallgemein", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName BerechnungsverfahrenXName = System.Xml.Linq.XName.Get("Berechnungsverfahren", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ArtHaeufigkeitXName = System.Xml.Linq.XName.Get("ArtHaeufigkeit", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName VerfahrenskennungXName = System.Xml.Linq.XName.Get("Verfahrenskennung", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName EinleiterkollektivkennungXName = System.Xml.Linq.XName.Get("Einleiterkollektivkennung", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName NiederschlagsbelastungXName = System.Xml.Linq.XName.Get("Niederschlagsbelastung", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName SimulationsdauerXName = System.Xml.Linq.XName.Get("Simulationsdauer", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName KommentarXName = System.Xml.Linq.XName.Get("Kommentar", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName SeriensimulationXName = System.Xml.Linq.XName.Get("Seriensimulation", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName zulUeberstauniveauXName = System.Xml.Linq.XName.Get("zulUeberstauniveau", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName BezugUberstauniveauXName = System.Xml.Linq.XName.Get("BezugUberstauniveau", "http://www.bfr-abwasser.de");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("BerechnungInfoType", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator BerechnungInfoType(XElement xe) { return XTypedServices.ToXTypedElement<BerechnungInfoType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static BerechnungInfoType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(RechenlaufkennungXName), new NamedContentModelEntity(ArtErgebnisseXName), new NamedContentModelEntity(SachbearbeiterXName), new NamedContentModelEntity(DatumBerechnungXName), new NamedContentModelEntity(BerechnungsmodellXName), new NamedContentModelEntity(BerechnungsverfahrenallgemeinXName), new NamedContentModelEntity(BerechnungsverfahrenXName), new NamedContentModelEntity(ArtHaeufigkeitXName), new NamedContentModelEntity(VerfahrenskennungXName), new NamedContentModelEntity(EinleiterkollektivkennungXName), new NamedContentModelEntity(NiederschlagsbelastungXName), new NamedContentModelEntity(SimulationsdauerXName), new NamedContentModelEntity(KommentarXName), new NamedContentModelEntity(SeriensimulationXName), new NamedContentModelEntity(zulUeberstauniveauXName), new NamedContentModelEntity(BezugUberstauniveauXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Rechenlaufkennung, ArtErgebnisse?, Sachbearbeiter?, DatumBerechnung?, Berechnungsmodell?, Berechnungsverfahrenallgemein?, Berechnungsverfahren?, ArtHaeufigkeit?, Verfahrenskennung?, Einleiterkollektivkennung?, Niederschlagsbelastung?, Simulationsdauer?, Kommentar?, Seriensimulation?, zulUeberstauniveau?, BezugUberstauniveau?)
        /// </para>
        /// </summary>
        public BerechnungInfoType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (Rechenlaufkennung, ArtErgebnisse?, Sachbearbeiter?, DatumBerechnung?, Berechnungsmodell?, Berechnungsverfahrenallgemein?, Berechnungsverfahren?, ArtHaeufigkeit?, Verfahrenskennung?, Einleiterkollektivkennung?, Niederschlagsbelastung?, Simulationsdauer?, Kommentar?, Seriensimulation?, zulUeberstauniveau?, BezugUberstauniveau?)
        /// </para>
        /// </summary>
        public virtual string Rechenlaufkennung {
            get {
                XElement x = this.GetElement(RechenlaufkennungXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(RechenlaufkennungXName, value, "Rechenlaufkennung", RechenlaufkennungLocalType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Rechenlaufkennung, ArtErgebnisse?, Sachbearbeiter?, DatumBerechnung?, Berechnungsmodell?, Berechnungsverfahrenallgemein?, Berechnungsverfahren?, ArtHaeufigkeit?, Verfahrenskennung?, Einleiterkollektivkennung?, Niederschlagsbelastung?, Simulationsdauer?, Kommentar?, Seriensimulation?, zulUeberstauniveau?, BezugUberstauniveau?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? ArtErgebnisse {
            get {
                XElement x = this.GetElement(ArtErgebnisseXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(ArtErgebnisseXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                }
                else {
                    this.SetElementWithValidation(ArtErgebnisseXName, value, "ArtErgebnisse", global::www.bfr.abwasser.de.ArtErgebnisseType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Rechenlaufkennung, ArtErgebnisse?, Sachbearbeiter?, DatumBerechnung?, Berechnungsmodell?, Berechnungsverfahrenallgemein?, Berechnungsverfahren?, ArtHaeufigkeit?, Verfahrenskennung?, Einleiterkollektivkennung?, Niederschlagsbelastung?, Simulationsdauer?, Kommentar?, Seriensimulation?, zulUeberstauniveau?, BezugUberstauniveau?)
        /// </para>
        /// </summary>
        public virtual string Sachbearbeiter {
            get {
                XElement x = this.GetElement(SachbearbeiterXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(SachbearbeiterXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                else {
                    this.SetElementWithValidation(SachbearbeiterXName, value, "Sachbearbeiter", SachbearbeiterLocalType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Rechenlaufkennung, ArtErgebnisse?, Sachbearbeiter?, DatumBerechnung?, Berechnungsmodell?, Berechnungsverfahrenallgemein?, Berechnungsverfahren?, ArtHaeufigkeit?, Verfahrenskennung?, Einleiterkollektivkennung?, Niederschlagsbelastung?, Simulationsdauer?, Kommentar?, Seriensimulation?, zulUeberstauniveau?, BezugUberstauniveau?)
        /// </para>
        /// </summary>
        public virtual System.DateTime? DatumBerechnung {
            get {
                XElement x = this.GetElement(DatumBerechnungXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<System.DateTime>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date).Datatype);
            }
            set {
                this.SetElement(DatumBerechnungXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Rechenlaufkennung, ArtErgebnisse?, Sachbearbeiter?, DatumBerechnung?, Berechnungsmodell?, Berechnungsverfahrenallgemein?, Berechnungsverfahren?, ArtHaeufigkeit?, Verfahrenskennung?, Einleiterkollektivkennung?, Niederschlagsbelastung?, Simulationsdauer?, Kommentar?, Seriensimulation?, zulUeberstauniveau?, BezugUberstauniveau?)
        /// </para>
        /// </summary>
        public virtual string Berechnungsmodell {
            get {
                XElement x = this.GetElement(BerechnungsmodellXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(BerechnungsmodellXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                else {
                    this.SetElementWithValidation(BerechnungsmodellXName, value, "Berechnungsmodell", BerechnungsmodellLocalType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Rechenlaufkennung, ArtErgebnisse?, Sachbearbeiter?, DatumBerechnung?, Berechnungsmodell?, Berechnungsverfahrenallgemein?, Berechnungsverfahren?, ArtHaeufigkeit?, Verfahrenskennung?, Einleiterkollektivkennung?, Niederschlagsbelastung?, Simulationsdauer?, Kommentar?, Seriensimulation?, zulUeberstauniveau?, BezugUberstauniveau?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? Berechnungsverfahrenallgemein {
            get {
                XElement x = this.GetElement(BerechnungsverfahrenallgemeinXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(BerechnungsverfahrenallgemeinXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                }
                else {
                    this.SetElementWithValidation(BerechnungsverfahrenallgemeinXName, value, "Berechnungsverfahrenallgemein", global::www.bfr.abwasser.de.BerechnungsverfahrenallgemeinType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Rechenlaufkennung, ArtErgebnisse?, Sachbearbeiter?, DatumBerechnung?, Berechnungsmodell?, Berechnungsverfahrenallgemein?, Berechnungsverfahren?, ArtHaeufigkeit?, Verfahrenskennung?, Einleiterkollektivkennung?, Niederschlagsbelastung?, Simulationsdauer?, Kommentar?, Seriensimulation?, zulUeberstauniveau?, BezugUberstauniveau?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? Berechnungsverfahren {
            get {
                XElement x = this.GetElement(BerechnungsverfahrenXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(BerechnungsverfahrenXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                }
                else {
                    this.SetElementWithValidation(BerechnungsverfahrenXName, value, "Berechnungsverfahren", global::www.bfr.abwasser.de.BerechnungsverfahrenType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Rechenlaufkennung, ArtErgebnisse?, Sachbearbeiter?, DatumBerechnung?, Berechnungsmodell?, Berechnungsverfahrenallgemein?, Berechnungsverfahren?, ArtHaeufigkeit?, Verfahrenskennung?, Einleiterkollektivkennung?, Niederschlagsbelastung?, Simulationsdauer?, Kommentar?, Seriensimulation?, zulUeberstauniveau?, BezugUberstauniveau?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? ArtHaeufigkeit {
            get {
                XElement x = this.GetElement(ArtHaeufigkeitXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(ArtHaeufigkeitXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                }
                else {
                    this.SetElementWithValidation(ArtHaeufigkeitXName, value, "ArtHaeufigkeit", global::www.bfr.abwasser.de.RegenUeberstauhaeufigkeitType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Rechenlaufkennung, ArtErgebnisse?, Sachbearbeiter?, DatumBerechnung?, Berechnungsmodell?, Berechnungsverfahrenallgemein?, Berechnungsverfahren?, ArtHaeufigkeit?, Verfahrenskennung?, Einleiterkollektivkennung?, Niederschlagsbelastung?, Simulationsdauer?, Kommentar?, Seriensimulation?, zulUeberstauniveau?, BezugUberstauniveau?)
        /// </para>
        /// </summary>
        public virtual string Verfahrenskennung {
            get {
                XElement x = this.GetElement(VerfahrenskennungXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(VerfahrenskennungXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                else {
                    this.SetElementWithValidation(VerfahrenskennungXName, value, "Verfahrenskennung", VerfahrenskennungLocalType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Rechenlaufkennung, ArtErgebnisse?, Sachbearbeiter?, DatumBerechnung?, Berechnungsmodell?, Berechnungsverfahrenallgemein?, Berechnungsverfahren?, ArtHaeufigkeit?, Verfahrenskennung?, Einleiterkollektivkennung?, Niederschlagsbelastung?, Simulationsdauer?, Kommentar?, Seriensimulation?, zulUeberstauniveau?, BezugUberstauniveau?)
        /// </para>
        /// </summary>
        public virtual string Einleiterkollektivkennung {
            get {
                XElement x = this.GetElement(EinleiterkollektivkennungXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(EinleiterkollektivkennungXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                else {
                    this.SetElementWithValidation(EinleiterkollektivkennungXName, value, "Einleiterkollektivkennung", EinleiterkollektivkennungLocalType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Rechenlaufkennung, ArtErgebnisse?, Sachbearbeiter?, DatumBerechnung?, Berechnungsmodell?, Berechnungsverfahrenallgemein?, Berechnungsverfahren?, ArtHaeufigkeit?, Verfahrenskennung?, Einleiterkollektivkennung?, Niederschlagsbelastung?, Simulationsdauer?, Kommentar?, Seriensimulation?, zulUeberstauniveau?, BezugUberstauniveau?)
        /// </para>
        /// </summary>
        public virtual NiederschlagsbelastungLocalType Niederschlagsbelastung {
            get {
                XElement x = this.GetElement(NiederschlagsbelastungXName);
                return ((NiederschlagsbelastungLocalType)(x));
            }
            set {
                this.SetElement(NiederschlagsbelastungXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Rechenlaufkennung, ArtErgebnisse?, Sachbearbeiter?, DatumBerechnung?, Berechnungsmodell?, Berechnungsverfahrenallgemein?, Berechnungsverfahren?, ArtHaeufigkeit?, Verfahrenskennung?, Einleiterkollektivkennung?, Niederschlagsbelastung?, Simulationsdauer?, Kommentar?, Seriensimulation?, zulUeberstauniveau?, BezugUberstauniveau?)
        /// </para>
        /// </summary>
        public virtual SimulationType Simulationsdauer {
            get {
                XElement x = this.GetElement(SimulationsdauerXName);
                return ((SimulationType)(x));
            }
            set {
                this.SetElement(SimulationsdauerXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Rechenlaufkennung, ArtErgebnisse?, Sachbearbeiter?, DatumBerechnung?, Berechnungsmodell?, Berechnungsverfahrenallgemein?, Berechnungsverfahren?, ArtHaeufigkeit?, Verfahrenskennung?, Einleiterkollektivkennung?, Niederschlagsbelastung?, Simulationsdauer?, Kommentar?, Seriensimulation?, zulUeberstauniveau?, BezugUberstauniveau?)
        /// </para>
        /// </summary>
        public virtual string Kommentar {
            get {
                XElement x = this.GetElement(KommentarXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
            set {
                this.SetElement(KommentarXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Rechenlaufkennung, ArtErgebnisse?, Sachbearbeiter?, DatumBerechnung?, Berechnungsmodell?, Berechnungsverfahrenallgemein?, Berechnungsverfahren?, ArtHaeufigkeit?, Verfahrenskennung?, Einleiterkollektivkennung?, Niederschlagsbelastung?, Simulationsdauer?, Kommentar?, Seriensimulation?, zulUeberstauniveau?, BezugUberstauniveau?)
        /// </para>
        /// </summary>
        public virtual SeriensimulationLocalType Seriensimulation {
            get {
                XElement x = this.GetElement(SeriensimulationXName);
                return ((SeriensimulationLocalType)(x));
            }
            set {
                this.SetElement(SeriensimulationXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Rechenlaufkennung, ArtErgebnisse?, Sachbearbeiter?, DatumBerechnung?, Berechnungsmodell?, Berechnungsverfahrenallgemein?, Berechnungsverfahren?, ArtHaeufigkeit?, Verfahrenskennung?, Einleiterkollektivkennung?, Niederschlagsbelastung?, Simulationsdauer?, Kommentar?, Seriensimulation?, zulUeberstauniveau?, BezugUberstauniveau?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? zulUeberstauniveau {
            get {
                XElement x = this.GetElement(zulUeberstauniveauXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(zulUeberstauniveauXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                }
                else {
                    this.SetElementWithValidation(zulUeberstauniveauXName, value, "zulUeberstauniveau", zulUeberstauniveauLocalType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Rechenlaufkennung, ArtErgebnisse?, Sachbearbeiter?, DatumBerechnung?, Berechnungsmodell?, Berechnungsverfahrenallgemein?, Berechnungsverfahren?, ArtHaeufigkeit?, Verfahrenskennung?, Einleiterkollektivkennung?, Niederschlagsbelastung?, Simulationsdauer?, Kommentar?, Seriensimulation?, zulUeberstauniveau?, BezugUberstauniveau?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? BezugUberstauniveau {
            get {
                XElement x = this.GetElement(BezugUberstauniveauXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(BezugUberstauniveauXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                }
                else {
                    this.SetElementWithValidation(BezugUberstauniveauXName, value, "BezugUberstauniveau", global::www.bfr.abwasser.de.BezugUeberstauniveauType.TypeDefinition);
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<BerechnungInfoType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(RechenlaufkennungXName, typeof(string));
            localElementDictionary.Add(ArtErgebnisseXName, typeof(decimal));
            localElementDictionary.Add(SachbearbeiterXName, typeof(string));
            localElementDictionary.Add(DatumBerechnungXName, typeof(System.DateTime));
            localElementDictionary.Add(BerechnungsmodellXName, typeof(string));
            localElementDictionary.Add(BerechnungsverfahrenallgemeinXName, typeof(decimal));
            localElementDictionary.Add(BerechnungsverfahrenXName, typeof(decimal));
            localElementDictionary.Add(ArtHaeufigkeitXName, typeof(decimal));
            localElementDictionary.Add(VerfahrenskennungXName, typeof(string));
            localElementDictionary.Add(EinleiterkollektivkennungXName, typeof(string));
            localElementDictionary.Add(NiederschlagsbelastungXName, typeof(NiederschlagsbelastungLocalType));
            localElementDictionary.Add(SimulationsdauerXName, typeof(SimulationType));
            localElementDictionary.Add(KommentarXName, typeof(string));
            localElementDictionary.Add(SeriensimulationXName, typeof(SeriensimulationLocalType));
            localElementDictionary.Add(zulUeberstauniveauXName, typeof(decimal));
            localElementDictionary.Add(BezugUberstauniveauXName, typeof(decimal));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        private class RechenlaufkennungLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(4)), null, 0, 0, null, null, 30, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
            
            private RechenlaufkennungLocalType() {
            }
        }
        
        private class SachbearbeiterLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(4)), null, 0, 0, null, null, 30, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
            
            private SachbearbeiterLocalType() {
            }
        }
        
        private class BerechnungsmodellLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(4)), null, 0, 0, null, null, 30, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
            
            private BerechnungsmodellLocalType() {
            }
        }
        
        private class VerfahrenskennungLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(4)), null, 0, 0, null, null, 5, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
            
            private VerfahrenskennungLocalType() {
            }
        }
        
        private class EinleiterkollektivkennungLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(4)), null, 0, 0, null, null, 4, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
            
            private EinleiterkollektivkennungLocalType() {
            }
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (GleichmaessigeUeberregnung? | UngleichmaessigeUeberregnung?)
        /// </para>
        /// </summary>
        public partial class NiederschlagsbelastungLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName GleichmaessigeUeberregnungXName = System.Xml.Linq.XName.Get("GleichmaessigeUeberregnung", "http://www.bfr-abwasser.de");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName UngleichmaessigeUeberregnungXName = System.Xml.Linq.XName.Get("UngleichmaessigeUeberregnung", "http://www.bfr-abwasser.de");
            
            private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("Niederschlagsbelastung", "http://www.bfr-abwasser.de");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;
            
		public static explicit operator NiederschlagsbelastungLocalType(XElement xe) { return XTypedServices.ToXTypedElement<NiederschlagsbelastungLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static NiederschlagsbelastungLocalType() {
                BuildElementDictionary();
                contentModel = new ChoiceContentModelEntity(new NamedContentModelEntity(GleichmaessigeUeberregnungXName), new NamedContentModelEntity(UngleichmaessigeUeberregnungXName));
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (GleichmaessigeUeberregnung? | UngleichmaessigeUeberregnung?)
            /// </para>
            /// </summary>
            public NiederschlagsbelastungLocalType() {
            }
            
            public NiederschlagsbelastungLocalType(GleichmaessigeUeberregnungLocalType GleichmaessigeUeberregnung) {
                this.GleichmaessigeUeberregnung = GleichmaessigeUeberregnung;
            }
            
            public NiederschlagsbelastungLocalType(UngleichmaessigeUeberregnungLocalType UngleichmaessigeUeberregnung) {
                this.UngleichmaessigeUeberregnung = UngleichmaessigeUeberregnung;
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional, choice
            /// </para>
            /// <para>
            /// Regular expression: (GleichmaessigeUeberregnung? | UngleichmaessigeUeberregnung?)
            /// </para>
            /// </summary>
            public virtual GleichmaessigeUeberregnungLocalType GleichmaessigeUeberregnung {
                get {
                    XElement x = this.GetElement(GleichmaessigeUeberregnungXName);
                    return ((GleichmaessigeUeberregnungLocalType)(x));
                }
                set {
                    this.SetElement(GleichmaessigeUeberregnungXName, value);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional, choice
            /// </para>
            /// <para>
            /// Regular expression: (GleichmaessigeUeberregnung? | UngleichmaessigeUeberregnung?)
            /// </para>
            /// </summary>
            public virtual UngleichmaessigeUeberregnungLocalType UngleichmaessigeUeberregnung {
                get {
                    XElement x = this.GetElement(UngleichmaessigeUeberregnungXName);
                    return ((UngleichmaessigeUeberregnungLocalType)(x));
                }
                set {
                    this.SetElement(UngleichmaessigeUeberregnungXName, value);
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            System.Xml.Linq.XName IXMetaData.SchemaName {
                get {
                    return xName;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<NiederschlagsbelastungLocalType>(this);
            }
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(GleichmaessigeUeberregnungXName, typeof(GleichmaessigeUeberregnungLocalType));
                localElementDictionary.Add(UngleichmaessigeUeberregnungXName, typeof(UngleichmaessigeUeberregnungLocalType));
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return contentModel;
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (Niederschlagkennung)
            /// </para>
            /// </summary>
            public partial class GleichmaessigeUeberregnungLocalType : XTypedElement, IXMetaData {
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName NiederschlagkennungXName = System.Xml.Linq.XName.Get("Niederschlagkennung", "http://www.bfr-abwasser.de");
                
                private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("GleichmaessigeUeberregnung", "http://www.bfr-abwasser.de");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                private static ContentModelEntity contentModel;
                
		public static explicit operator GleichmaessigeUeberregnungLocalType(XElement xe) { return XTypedServices.ToXTypedElement<GleichmaessigeUeberregnungLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
                
                static GleichmaessigeUeberregnungLocalType() {
                    BuildElementDictionary();
                    contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(NiederschlagkennungXName));
                }
                
                /// <summary>
                /// <para>
                /// Regular expression: (Niederschlagkennung)
                /// </para>
                /// </summary>
                public GleichmaessigeUeberregnungLocalType() {
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: required
                /// </para>
                /// <para>
                /// Regular expression: (Niederschlagkennung)
                /// </para>
                /// </summary>
                public virtual string Niederschlagkennung {
                    get {
                        XElement x = this.GetElement(NiederschlagkennungXName);
                        return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                    }
                    set {
                        this.SetElementWithValidation(NiederschlagkennungXName, value, "Niederschlagkennung", NiederschlagkennungLocalType.TypeDefinition);
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
                    get {
                        return localElementDictionary;
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                System.Xml.Linq.XName IXMetaData.SchemaName {
                    get {
                        return xName;
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                SchemaOrigin IXMetaData.TypeOrigin {
                    get {
                        return SchemaOrigin.Fragment;
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                ILinqToXsdTypeManager IXMetaData.TypeManager {
                    get {
                        return LinqToXsdTypeManager.Instance;
                    }
                }
                
                public override XTypedElement Clone() {
                    return XTypedServices.CloneXTypedElement<GleichmaessigeUeberregnungLocalType>(this);
                }
                
                private static void BuildElementDictionary() {
                    localElementDictionary.Add(NiederschlagkennungXName, typeof(string));
                }
                
                ContentModelEntity IXMetaData.GetContentModel() {
                    return contentModel;
                }
                
                private class NiederschlagkennungLocalType {
                    
                    [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                    public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(4)), null, 0, 0, null, null, 4, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
                    
                    private NiederschlagkennungLocalType() {
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (FlaechenNiederschlag+)
            /// </para>
            /// </summary>
            public partial class UngleichmaessigeUeberregnungLocalType : XTypedElement, IXMetaData {
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName FlaechenNiederschlagXName = System.Xml.Linq.XName.Get("FlaechenNiederschlag", "http://www.bfr-abwasser.de");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                private XTypedList<UeberregnungType> FlaechenNiederschlagField;
                
                private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("UngleichmaessigeUeberregnung", "http://www.bfr-abwasser.de");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                private static ContentModelEntity contentModel;
                
		public static explicit operator UngleichmaessigeUeberregnungLocalType(XElement xe) { return XTypedServices.ToXTypedElement<UngleichmaessigeUeberregnungLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
                
                static UngleichmaessigeUeberregnungLocalType() {
                    BuildElementDictionary();
                    contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(FlaechenNiederschlagXName));
                }
                
                /// <summary>
                /// <para>
                /// Regular expression: (FlaechenNiederschlag+)
                /// </para>
                /// </summary>
                public UngleichmaessigeUeberregnungLocalType() {
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: required, repeating
                /// </para>
                /// <para>
                /// Regular expression: (FlaechenNiederschlag+)
                /// </para>
                /// </summary>
                public virtual IList<UeberregnungType> FlaechenNiederschlag {
                    get {
                        if ((this.FlaechenNiederschlagField == null)) {
                            this.FlaechenNiederschlagField = new XTypedList<UeberregnungType>(this, LinqToXsdTypeManager.Instance, FlaechenNiederschlagXName);
                        }
                        return this.FlaechenNiederschlagField;
                    }
                    set {
                        if ((value == null)) {
                            this.FlaechenNiederschlagField = null;
                        }
                        else {
                            if ((this.FlaechenNiederschlagField == null)) {
                                this.FlaechenNiederschlagField = XTypedList<UeberregnungType>.Initialize(this, LinqToXsdTypeManager.Instance, value, FlaechenNiederschlagXName);
                            }
                            else {
                                XTypedServices.SetList<UeberregnungType>(this.FlaechenNiederschlagField, value);
                            }
                        }
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
                    get {
                        return localElementDictionary;
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                System.Xml.Linq.XName IXMetaData.SchemaName {
                    get {
                        return xName;
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                SchemaOrigin IXMetaData.TypeOrigin {
                    get {
                        return SchemaOrigin.Fragment;
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                ILinqToXsdTypeManager IXMetaData.TypeManager {
                    get {
                        return LinqToXsdTypeManager.Instance;
                    }
                }
                
                public override XTypedElement Clone() {
                    return XTypedServices.CloneXTypedElement<UngleichmaessigeUeberregnungLocalType>(this);
                }
                
                private static void BuildElementDictionary() {
                    localElementDictionary.Add(FlaechenNiederschlagXName, typeof(UeberregnungType));
                }
                
                ContentModelEntity IXMetaData.GetContentModel() {
                    return contentModel;
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Zeitraum, Gruppe)
        /// </para>
        /// </summary>
        public partial class SeriensimulationLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName ZeitraumXName = System.Xml.Linq.XName.Get("Zeitraum", "http://www.bfr-abwasser.de");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName GruppeXName = System.Xml.Linq.XName.Get("Gruppe", "http://www.bfr-abwasser.de");
            
            private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("Seriensimulation", "http://www.bfr-abwasser.de");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;
            
		public static explicit operator SeriensimulationLocalType(XElement xe) { return XTypedServices.ToXTypedElement<SeriensimulationLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static SeriensimulationLocalType() {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(ZeitraumXName), new NamedContentModelEntity(GruppeXName));
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (Zeitraum, Gruppe)
            /// </para>
            /// </summary>
            public SeriensimulationLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (Zeitraum, Gruppe)
            /// </para>
            /// </summary>
            public virtual decimal Zeitraum {
                get {
                    XElement x = this.GetElement(ZeitraumXName);
                    return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                }
                set {
                    this.SetElementWithValidation(ZeitraumXName, value, "Zeitraum", ZeitraumLocalType.TypeDefinition);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (Zeitraum, Gruppe)
            /// </para>
            /// </summary>
            public virtual decimal Gruppe {
                get {
                    XElement x = this.GetElement(GruppeXName);
                    return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                }
                set {
                    this.SetElementWithValidation(GruppeXName, value, "Gruppe", GruppeLocalType.TypeDefinition);
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            System.Xml.Linq.XName IXMetaData.SchemaName {
                get {
                    return xName;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<SeriensimulationLocalType>(this);
            }
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(ZeitraumXName, typeof(decimal));
                localElementDictionary.Add(GruppeXName, typeof(decimal));
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return contentModel;
            }
            
            private class ZeitraumLocalType {
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(1024)), null, 0, 0, null, null, 0, null, null, 0, null, 3, XmlSchemaWhiteSpace.Collapse));
                
                private ZeitraumLocalType() {
                }
            }
            
            private class GruppeLocalType {
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(1024)), null, 0, 0, null, null, 0, null, null, 0, null, 3, XmlSchemaWhiteSpace.Collapse));
                
                private GruppeLocalType() {
                }
            }
        }
        
        private class zulUeberstauniveauLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(3200)), null, 2, 0, 1000m, null, 0, null, null, 0, null, 5, XmlSchemaWhiteSpace.Collapse));
            
            private zulUeberstauniveauLocalType() {
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Flaechennummer, Niederschlagkennung)
    /// </para>
    /// </summary>
    public partial class UeberregnungType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName FlaechennummerXName = System.Xml.Linq.XName.Get("Flaechennummer", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName NiederschlagkennungXName = System.Xml.Linq.XName.Get("Niederschlagkennung", "http://www.bfr-abwasser.de");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("UeberregnungType", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator UeberregnungType(XElement xe) { return XTypedServices.ToXTypedElement<UeberregnungType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static UeberregnungType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(FlaechennummerXName), new NamedContentModelEntity(NiederschlagkennungXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Flaechennummer, Niederschlagkennung)
        /// </para>
        /// </summary>
        public UeberregnungType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (Flaechennummer, Niederschlagkennung)
        /// </para>
        /// </summary>
        public virtual decimal Flaechennummer {
            get {
                XElement x = this.GetElement(FlaechennummerXName);
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                this.SetElementWithValidation(FlaechennummerXName, value, "Flaechennummer", FlaechennummerLocalType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (Flaechennummer, Niederschlagkennung)
        /// </para>
        /// </summary>
        public virtual string Niederschlagkennung {
            get {
                XElement x = this.GetElement(NiederschlagkennungXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(NiederschlagkennungXName, value, "Niederschlagkennung", NiederschlagkennungLocalType.TypeDefinition);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<UeberregnungType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(FlaechennummerXName, typeof(decimal));
            localElementDictionary.Add(NiederschlagkennungXName, typeof(string));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        private class FlaechennummerLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(1024)), null, 0, 0, null, null, 0, null, null, 0, null, 10, XmlSchemaWhiteSpace.Collapse));
            
            private FlaechennummerLocalType() {
            }
        }
        
        private class NiederschlagkennungLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(4)), null, 0, 0, null, null, 4, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
            
            private NiederschlagkennungLocalType() {
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Jahre?, Tage?, Stunden?, Minuten?)
    /// </para>
    /// </summary>
    public partial class SimulationType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName JahreXName = System.Xml.Linq.XName.Get("Jahre", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TageXName = System.Xml.Linq.XName.Get("Tage", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName StundenXName = System.Xml.Linq.XName.Get("Stunden", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName MinutenXName = System.Xml.Linq.XName.Get("Minuten", "http://www.bfr-abwasser.de");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("SimulationType", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator SimulationType(XElement xe) { return XTypedServices.ToXTypedElement<SimulationType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static SimulationType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(JahreXName), new NamedContentModelEntity(TageXName), new NamedContentModelEntity(StundenXName), new NamedContentModelEntity(MinutenXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Jahre?, Tage?, Stunden?, Minuten?)
        /// </para>
        /// </summary>
        public SimulationType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Jahre?, Tage?, Stunden?, Minuten?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? Jahre {
            get {
                XElement x = this.GetElement(JahreXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(JahreXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                }
                else {
                    this.SetElementWithValidation(JahreXName, value, "Jahre", JahreLocalType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Jahre?, Tage?, Stunden?, Minuten?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? Tage {
            get {
                XElement x = this.GetElement(TageXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(TageXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                }
                else {
                    this.SetElementWithValidation(TageXName, value, "Tage", TageLocalType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Jahre?, Tage?, Stunden?, Minuten?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? Stunden {
            get {
                XElement x = this.GetElement(StundenXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(StundenXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                }
                else {
                    this.SetElementWithValidation(StundenXName, value, "Stunden", StundenLocalType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Jahre?, Tage?, Stunden?, Minuten?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? Minuten {
            get {
                XElement x = this.GetElement(MinutenXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(MinutenXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                }
                else {
                    this.SetElementWithValidation(MinutenXName, value, "Minuten", MinutenLocalType.TypeDefinition);
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<SimulationType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(JahreXName, typeof(decimal));
            localElementDictionary.Add(TageXName, typeof(decimal));
            localElementDictionary.Add(StundenXName, typeof(decimal));
            localElementDictionary.Add(MinutenXName, typeof(decimal));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        private class JahreLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(1024)), null, 0, 0, null, null, 0, null, null, 0, null, 3, XmlSchemaWhiteSpace.Collapse));
            
            private JahreLocalType() {
            }
        }
        
        private class TageLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(1024)), null, 0, 0, null, null, 0, null, null, 0, null, 3, XmlSchemaWhiteSpace.Collapse));
            
            private TageLocalType() {
            }
        }
        
        private class StundenLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(1024)), null, 0, 0, null, null, 0, null, null, 0, null, 2, XmlSchemaWhiteSpace.Collapse));
            
            private StundenLocalType() {
            }
        }
        
        private class MinutenLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(1024)), null, 0, 0, null, null, 0, null, null, 0, null, 2, XmlSchemaWhiteSpace.Collapse));
            
            private MinutenLocalType() {
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Objektbezeichnung, HydObjektTyp, Zielgroessenkennung?, Kommentar?, (Haltung? | Leitung? | Gerinne? | Pumpe? | Wehr? | Schieber? | Schacht? | Speicherbauwerk? | GrundSeitenAuslass? | FreierAuslass?), Dokumente?)
    /// </para>
    /// </summary>
    public partial class BerechnungObjektType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ObjektbezeichnungXName = System.Xml.Linq.XName.Get("Objektbezeichnung", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName HydObjektTypXName = System.Xml.Linq.XName.Get("HydObjektTyp", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ZielgroessenkennungXName = System.Xml.Linq.XName.Get("Zielgroessenkennung", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName KommentarXName = System.Xml.Linq.XName.Get("Kommentar", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName HaltungXName = System.Xml.Linq.XName.Get("Haltung", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName LeitungXName = System.Xml.Linq.XName.Get("Leitung", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName GerinneXName = System.Xml.Linq.XName.Get("Gerinne", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName PumpeXName = System.Xml.Linq.XName.Get("Pumpe", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName WehrXName = System.Xml.Linq.XName.Get("Wehr", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName SchieberXName = System.Xml.Linq.XName.Get("Schieber", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName SchachtXName = System.Xml.Linq.XName.Get("Schacht", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName SpeicherbauwerkXName = System.Xml.Linq.XName.Get("Speicherbauwerk", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName GrundSeitenAuslassXName = System.Xml.Linq.XName.Get("GrundSeitenAuslass", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName FreierAuslassXName = System.Xml.Linq.XName.Get("FreierAuslass", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName DokumenteXName = System.Xml.Linq.XName.Get("Dokumente", "http://www.bfr-abwasser.de");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("BerechnungObjektType", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator BerechnungObjektType(XElement xe) { return XTypedServices.ToXTypedElement<BerechnungObjektType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static BerechnungObjektType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(ObjektbezeichnungXName), new NamedContentModelEntity(HydObjektTypXName), new NamedContentModelEntity(ZielgroessenkennungXName), new NamedContentModelEntity(KommentarXName), new ChoiceContentModelEntity(new NamedContentModelEntity(HaltungXName), new NamedContentModelEntity(LeitungXName), new NamedContentModelEntity(GerinneXName), new NamedContentModelEntity(PumpeXName), new NamedContentModelEntity(WehrXName), new NamedContentModelEntity(SchieberXName), new NamedContentModelEntity(SchachtXName), new NamedContentModelEntity(SpeicherbauwerkXName), new NamedContentModelEntity(GrundSeitenAuslassXName), new NamedContentModelEntity(FreierAuslassXName)), new NamedContentModelEntity(DokumenteXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Objektbezeichnung, HydObjektTyp, Zielgroessenkennung?, Kommentar?, (Haltung? | Leitung? | Gerinne? | Pumpe? | Wehr? | Schieber? | Schacht? | Speicherbauwerk? | GrundSeitenAuslass? | FreierAuslass?), Dokumente?)
        /// </para>
        /// </summary>
        public BerechnungObjektType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (Objektbezeichnung, HydObjektTyp, Zielgroessenkennung?, Kommentar?, (Haltung? | Leitung? | Gerinne? | Pumpe? | Wehr? | Schieber? | Schacht? | Speicherbauwerk? | GrundSeitenAuslass? | FreierAuslass?), Dokumente?)
        /// </para>
        /// </summary>
        public virtual string Objektbezeichnung {
            get {
                XElement x = this.GetElement(ObjektbezeichnungXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(ObjektbezeichnungXName, value, "Objektbezeichnung", ObjektbezeichnungLocalType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (Objektbezeichnung, HydObjektTyp, Zielgroessenkennung?, Kommentar?, (Haltung? | Leitung? | Gerinne? | Pumpe? | Wehr? | Schieber? | Schacht? | Speicherbauwerk? | GrundSeitenAuslass? | FreierAuslass?), Dokumente?)
        /// </para>
        /// </summary>
        public virtual decimal HydObjektTyp {
            get {
                XElement x = this.GetElement(HydObjektTypXName);
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                this.SetElementWithValidation(HydObjektTypXName, value, "HydObjektTyp", global::www.bfr.abwasser.de.HydraulikObjektTypType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Objektbezeichnung, HydObjektTyp, Zielgroessenkennung?, Kommentar?, (Haltung? | Leitung? | Gerinne? | Pumpe? | Wehr? | Schieber? | Schacht? | Speicherbauwerk? | GrundSeitenAuslass? | FreierAuslass?), Dokumente?)
        /// </para>
        /// </summary>
        public virtual string Zielgroessenkennung {
            get {
                XElement x = this.GetElement(ZielgroessenkennungXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(ZielgroessenkennungXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                else {
                    this.SetElementWithValidation(ZielgroessenkennungXName, value, "Zielgroessenkennung", ZielgroessenkennungLocalType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Objektbezeichnung, HydObjektTyp, Zielgroessenkennung?, Kommentar?, (Haltung? | Leitung? | Gerinne? | Pumpe? | Wehr? | Schieber? | Schacht? | Speicherbauwerk? | GrundSeitenAuslass? | FreierAuslass?), Dokumente?)
        /// </para>
        /// </summary>
        public virtual string Kommentar {
            get {
                XElement x = this.GetElement(KommentarXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
            set {
                this.SetElement(KommentarXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (Objektbezeichnung, HydObjektTyp, Zielgroessenkennung?, Kommentar?, (Haltung? | Leitung? | Gerinne? | Pumpe? | Wehr? | Schieber? | Schacht? | Speicherbauwerk? | GrundSeitenAuslass? | FreierAuslass?), Dokumente?)
        /// </para>
        /// </summary>
        public virtual ErgHaltungType Haltung {
            get {
                XElement x = this.GetElement(HaltungXName);
                return ((ErgHaltungType)(x));
            }
            set {
                this.SetElement(HaltungXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (Objektbezeichnung, HydObjektTyp, Zielgroessenkennung?, Kommentar?, (Haltung? | Leitung? | Gerinne? | Pumpe? | Wehr? | Schieber? | Schacht? | Speicherbauwerk? | GrundSeitenAuslass? | FreierAuslass?), Dokumente?)
        /// </para>
        /// </summary>
        public virtual ErgLeitungType Leitung {
            get {
                XElement x = this.GetElement(LeitungXName);
                return ((ErgLeitungType)(x));
            }
            set {
                this.SetElement(LeitungXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (Objektbezeichnung, HydObjektTyp, Zielgroessenkennung?, Kommentar?, (Haltung? | Leitung? | Gerinne? | Pumpe? | Wehr? | Schieber? | Schacht? | Speicherbauwerk? | GrundSeitenAuslass? | FreierAuslass?), Dokumente?)
        /// </para>
        /// </summary>
        public virtual ErgGerinneType Gerinne {
            get {
                XElement x = this.GetElement(GerinneXName);
                return ((ErgGerinneType)(x));
            }
            set {
                this.SetElement(GerinneXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (Objektbezeichnung, HydObjektTyp, Zielgroessenkennung?, Kommentar?, (Haltung? | Leitung? | Gerinne? | Pumpe? | Wehr? | Schieber? | Schacht? | Speicherbauwerk? | GrundSeitenAuslass? | FreierAuslass?), Dokumente?)
        /// </para>
        /// </summary>
        public virtual ErgPumpeType Pumpe {
            get {
                XElement x = this.GetElement(PumpeXName);
                return ((ErgPumpeType)(x));
            }
            set {
                this.SetElement(PumpeXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (Objektbezeichnung, HydObjektTyp, Zielgroessenkennung?, Kommentar?, (Haltung? | Leitung? | Gerinne? | Pumpe? | Wehr? | Schieber? | Schacht? | Speicherbauwerk? | GrundSeitenAuslass? | FreierAuslass?), Dokumente?)
        /// </para>
        /// </summary>
        public virtual ErgWehrType Wehr {
            get {
                XElement x = this.GetElement(WehrXName);
                return ((ErgWehrType)(x));
            }
            set {
                this.SetElement(WehrXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (Objektbezeichnung, HydObjektTyp, Zielgroessenkennung?, Kommentar?, (Haltung? | Leitung? | Gerinne? | Pumpe? | Wehr? | Schieber? | Schacht? | Speicherbauwerk? | GrundSeitenAuslass? | FreierAuslass?), Dokumente?)
        /// </para>
        /// </summary>
        public virtual ErgSchieberType Schieber {
            get {
                XElement x = this.GetElement(SchieberXName);
                return ((ErgSchieberType)(x));
            }
            set {
                this.SetElement(SchieberXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (Objektbezeichnung, HydObjektTyp, Zielgroessenkennung?, Kommentar?, (Haltung? | Leitung? | Gerinne? | Pumpe? | Wehr? | Schieber? | Schacht? | Speicherbauwerk? | GrundSeitenAuslass? | FreierAuslass?), Dokumente?)
        /// </para>
        /// </summary>
        public virtual ErgSchachtType Schacht {
            get {
                XElement x = this.GetElement(SchachtXName);
                return ((ErgSchachtType)(x));
            }
            set {
                this.SetElement(SchachtXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (Objektbezeichnung, HydObjektTyp, Zielgroessenkennung?, Kommentar?, (Haltung? | Leitung? | Gerinne? | Pumpe? | Wehr? | Schieber? | Schacht? | Speicherbauwerk? | GrundSeitenAuslass? | FreierAuslass?), Dokumente?)
        /// </para>
        /// </summary>
        public virtual ErgSpeicherbauwerkType Speicherbauwerk {
            get {
                XElement x = this.GetElement(SpeicherbauwerkXName);
                return ((ErgSpeicherbauwerkType)(x));
            }
            set {
                this.SetElement(SpeicherbauwerkXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (Objektbezeichnung, HydObjektTyp, Zielgroessenkennung?, Kommentar?, (Haltung? | Leitung? | Gerinne? | Pumpe? | Wehr? | Schieber? | Schacht? | Speicherbauwerk? | GrundSeitenAuslass? | FreierAuslass?), Dokumente?)
        /// </para>
        /// </summary>
        public virtual ErgGSAuslassType GrundSeitenAuslass {
            get {
                XElement x = this.GetElement(GrundSeitenAuslassXName);
                return ((ErgGSAuslassType)(x));
            }
            set {
                this.SetElement(GrundSeitenAuslassXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (Objektbezeichnung, HydObjektTyp, Zielgroessenkennung?, Kommentar?, (Haltung? | Leitung? | Gerinne? | Pumpe? | Wehr? | Schieber? | Schacht? | Speicherbauwerk? | GrundSeitenAuslass? | FreierAuslass?), Dokumente?)
        /// </para>
        /// </summary>
        public virtual ErgFreiAuslassType FreierAuslass {
            get {
                XElement x = this.GetElement(FreierAuslassXName);
                return ((ErgFreiAuslassType)(x));
            }
            set {
                this.SetElement(FreierAuslassXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Objektbezeichnung, HydObjektTyp, Zielgroessenkennung?, Kommentar?, (Haltung? | Leitung? | Gerinne? | Pumpe? | Wehr? | Schieber? | Schacht? | Speicherbauwerk? | GrundSeitenAuslass? | FreierAuslass?), Dokumente?)
        /// </para>
        /// </summary>
        public virtual DokumenteLocalType Dokumente {
            get {
                XElement x = this.GetElement(DokumenteXName);
                return ((DokumenteLocalType)(x));
            }
            set {
                this.SetElement(DokumenteXName, value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<BerechnungObjektType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(ObjektbezeichnungXName, typeof(string));
            localElementDictionary.Add(HydObjektTypXName, typeof(decimal));
            localElementDictionary.Add(ZielgroessenkennungXName, typeof(string));
            localElementDictionary.Add(KommentarXName, typeof(string));
            localElementDictionary.Add(HaltungXName, typeof(ErgHaltungType));
            localElementDictionary.Add(LeitungXName, typeof(ErgLeitungType));
            localElementDictionary.Add(GerinneXName, typeof(ErgGerinneType));
            localElementDictionary.Add(PumpeXName, typeof(ErgPumpeType));
            localElementDictionary.Add(WehrXName, typeof(ErgWehrType));
            localElementDictionary.Add(SchieberXName, typeof(ErgSchieberType));
            localElementDictionary.Add(SchachtXName, typeof(ErgSchachtType));
            localElementDictionary.Add(SpeicherbauwerkXName, typeof(ErgSpeicherbauwerkType));
            localElementDictionary.Add(GrundSeitenAuslassXName, typeof(ErgGSAuslassType));
            localElementDictionary.Add(FreierAuslassXName, typeof(ErgFreiAuslassType));
            localElementDictionary.Add(DokumenteXName, typeof(DokumenteLocalType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        private class ObjektbezeichnungLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(4)), null, 0, 0, null, null, 30, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
            
            private ObjektbezeichnungLocalType() {
            }
        }
        
        private class ZielgroessenkennungLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(4)), null, 0, 0, null, null, 5, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
            
            private ZielgroessenkennungLocalType() {
            }
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Dokument+)
        /// </para>
        /// </summary>
        public partial class DokumenteLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName DokumentXName = System.Xml.Linq.XName.Get("Dokument", "http://www.bfr-abwasser.de");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XTypedList<HDokumenteType> DokumentField;
            
            private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("Dokumente", "http://www.bfr-abwasser.de");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;
            
		public static explicit operator DokumenteLocalType(XElement xe) { return XTypedServices.ToXTypedElement<DokumenteLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static DokumenteLocalType() {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(DokumentXName));
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (Dokument+)
            /// </para>
            /// </summary>
            public DokumenteLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required, repeating
            /// </para>
            /// <para>
            /// Regular expression: (Dokument+)
            /// </para>
            /// </summary>
            public virtual IList<HDokumenteType> Dokument {
                get {
                    if ((this.DokumentField == null)) {
                        this.DokumentField = new XTypedList<HDokumenteType>(this, LinqToXsdTypeManager.Instance, DokumentXName);
                    }
                    return this.DokumentField;
                }
                set {
                    if ((value == null)) {
                        this.DokumentField = null;
                    }
                    else {
                        if ((this.DokumentField == null)) {
                            this.DokumentField = XTypedList<HDokumenteType>.Initialize(this, LinqToXsdTypeManager.Instance, value, DokumentXName);
                        }
                        else {
                            XTypedServices.SetList<HDokumenteType>(this.DokumentField, value);
                        }
                    }
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            System.Xml.Linq.XName IXMetaData.SchemaName {
                get {
                    return xName;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<DokumenteLocalType>(this);
            }
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(DokumentXName, typeof(HDokumenteType));
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return contentModel;
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Vollfuellleistung?, Vollfuellgeschw?, Trockenwetterabfluss?, Trockenwettergeschw?, TwWasserstandOben?, TwWasserstandUnten?, maxAbfluss?, maxGeschw?, maxWasserstandOben?, maxWasserstandUnten?, Auslastungsgrad?, Auslastungskennziffer?, HaltungsklasseAuto?, HaltungsklasseManuell?)
    /// </para>
    /// </summary>
    public partial class ErgHaltungType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName VollfuellleistungXName = System.Xml.Linq.XName.Get("Vollfuellleistung", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName VollfuellgeschwXName = System.Xml.Linq.XName.Get("Vollfuellgeschw", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TrockenwetterabflussXName = System.Xml.Linq.XName.Get("Trockenwetterabfluss", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TrockenwettergeschwXName = System.Xml.Linq.XName.Get("Trockenwettergeschw", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TwWasserstandObenXName = System.Xml.Linq.XName.Get("TwWasserstandOben", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TwWasserstandUntenXName = System.Xml.Linq.XName.Get("TwWasserstandUnten", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName maxAbflussXName = System.Xml.Linq.XName.Get("maxAbfluss", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName maxGeschwXName = System.Xml.Linq.XName.Get("maxGeschw", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName maxWasserstandObenXName = System.Xml.Linq.XName.Get("maxWasserstandOben", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName maxWasserstandUntenXName = System.Xml.Linq.XName.Get("maxWasserstandUnten", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName AuslastungsgradXName = System.Xml.Linq.XName.Get("Auslastungsgrad", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName AuslastungskennzifferXName = System.Xml.Linq.XName.Get("Auslastungskennziffer", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName HaltungsklasseAutoXName = System.Xml.Linq.XName.Get("HaltungsklasseAuto", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName HaltungsklasseManuellXName = System.Xml.Linq.XName.Get("HaltungsklasseManuell", "http://www.bfr-abwasser.de");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("ErgHaltungType", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator ErgHaltungType(XElement xe) { return XTypedServices.ToXTypedElement<ErgHaltungType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static ErgHaltungType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(VollfuellleistungXName), new NamedContentModelEntity(VollfuellgeschwXName), new NamedContentModelEntity(TrockenwetterabflussXName), new NamedContentModelEntity(TrockenwettergeschwXName), new NamedContentModelEntity(TwWasserstandObenXName), new NamedContentModelEntity(TwWasserstandUntenXName), new NamedContentModelEntity(maxAbflussXName), new NamedContentModelEntity(maxGeschwXName), new NamedContentModelEntity(maxWasserstandObenXName), new NamedContentModelEntity(maxWasserstandUntenXName), new NamedContentModelEntity(AuslastungsgradXName), new NamedContentModelEntity(AuslastungskennzifferXName), new NamedContentModelEntity(HaltungsklasseAutoXName), new NamedContentModelEntity(HaltungsklasseManuellXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Vollfuellleistung?, Vollfuellgeschw?, Trockenwetterabfluss?, Trockenwettergeschw?, TwWasserstandOben?, TwWasserstandUnten?, maxAbfluss?, maxGeschw?, maxWasserstandOben?, maxWasserstandUnten?, Auslastungsgrad?, Auslastungskennziffer?, HaltungsklasseAuto?, HaltungsklasseManuell?)
        /// </para>
        /// </summary>
        public ErgHaltungType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Vollfuellleistung?, Vollfuellgeschw?, Trockenwetterabfluss?, Trockenwettergeschw?, TwWasserstandOben?, TwWasserstandUnten?, maxAbfluss?, maxGeschw?, maxWasserstandOben?, maxWasserstandUnten?, Auslastungsgrad?, Auslastungskennziffer?, HaltungsklasseAuto?, HaltungsklasseManuell?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? Vollfuellleistung {
            get {
                XElement x = this.GetElement(VollfuellleistungXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(VollfuellleistungXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                }
                else {
                    this.SetElementWithValidation(VollfuellleistungXName, value, "Vollfuellleistung", VollfuellleistungLocalType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Vollfuellleistung?, Vollfuellgeschw?, Trockenwetterabfluss?, Trockenwettergeschw?, TwWasserstandOben?, TwWasserstandUnten?, maxAbfluss?, maxGeschw?, maxWasserstandOben?, maxWasserstandUnten?, Auslastungsgrad?, Auslastungskennziffer?, HaltungsklasseAuto?, HaltungsklasseManuell?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? Vollfuellgeschw {
            get {
                XElement x = this.GetElement(VollfuellgeschwXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(VollfuellgeschwXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                }
                else {
                    this.SetElementWithValidation(VollfuellgeschwXName, value, "Vollfuellgeschw", VollfuellgeschwLocalType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Vollfuellleistung?, Vollfuellgeschw?, Trockenwetterabfluss?, Trockenwettergeschw?, TwWasserstandOben?, TwWasserstandUnten?, maxAbfluss?, maxGeschw?, maxWasserstandOben?, maxWasserstandUnten?, Auslastungsgrad?, Auslastungskennziffer?, HaltungsklasseAuto?, HaltungsklasseManuell?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? Trockenwetterabfluss {
            get {
                XElement x = this.GetElement(TrockenwetterabflussXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(TrockenwetterabflussXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                }
                else {
                    this.SetElementWithValidation(TrockenwetterabflussXName, value, "Trockenwetterabfluss", TrockenwetterabflussLocalType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Vollfuellleistung?, Vollfuellgeschw?, Trockenwetterabfluss?, Trockenwettergeschw?, TwWasserstandOben?, TwWasserstandUnten?, maxAbfluss?, maxGeschw?, maxWasserstandOben?, maxWasserstandUnten?, Auslastungsgrad?, Auslastungskennziffer?, HaltungsklasseAuto?, HaltungsklasseManuell?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? Trockenwettergeschw {
            get {
                XElement x = this.GetElement(TrockenwettergeschwXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(TrockenwettergeschwXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                }
                else {
                    this.SetElementWithValidation(TrockenwettergeschwXName, value, "Trockenwettergeschw", TrockenwettergeschwLocalType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Vollfuellleistung?, Vollfuellgeschw?, Trockenwetterabfluss?, Trockenwettergeschw?, TwWasserstandOben?, TwWasserstandUnten?, maxAbfluss?, maxGeschw?, maxWasserstandOben?, maxWasserstandUnten?, Auslastungsgrad?, Auslastungskennziffer?, HaltungsklasseAuto?, HaltungsklasseManuell?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? TwWasserstandOben {
            get {
                XElement x = this.GetElement(TwWasserstandObenXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(TwWasserstandObenXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                }
                else {
                    this.SetElementWithValidation(TwWasserstandObenXName, value, "TwWasserstandOben", TwWasserstandObenLocalType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Vollfuellleistung?, Vollfuellgeschw?, Trockenwetterabfluss?, Trockenwettergeschw?, TwWasserstandOben?, TwWasserstandUnten?, maxAbfluss?, maxGeschw?, maxWasserstandOben?, maxWasserstandUnten?, Auslastungsgrad?, Auslastungskennziffer?, HaltungsklasseAuto?, HaltungsklasseManuell?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? TwWasserstandUnten {
            get {
                XElement x = this.GetElement(TwWasserstandUntenXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(TwWasserstandUntenXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                }
                else {
                    this.SetElementWithValidation(TwWasserstandUntenXName, value, "TwWasserstandUnten", TwWasserstandUntenLocalType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Vollfuellleistung?, Vollfuellgeschw?, Trockenwetterabfluss?, Trockenwettergeschw?, TwWasserstandOben?, TwWasserstandUnten?, maxAbfluss?, maxGeschw?, maxWasserstandOben?, maxWasserstandUnten?, Auslastungsgrad?, Auslastungskennziffer?, HaltungsklasseAuto?, HaltungsklasseManuell?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? maxAbfluss {
            get {
                XElement x = this.GetElement(maxAbflussXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(maxAbflussXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                }
                else {
                    this.SetElementWithValidation(maxAbflussXName, value, "maxAbfluss", maxAbflussLocalType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Vollfuellleistung?, Vollfuellgeschw?, Trockenwetterabfluss?, Trockenwettergeschw?, TwWasserstandOben?, TwWasserstandUnten?, maxAbfluss?, maxGeschw?, maxWasserstandOben?, maxWasserstandUnten?, Auslastungsgrad?, Auslastungskennziffer?, HaltungsklasseAuto?, HaltungsklasseManuell?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? maxGeschw {
            get {
                XElement x = this.GetElement(maxGeschwXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(maxGeschwXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                }
                else {
                    this.SetElementWithValidation(maxGeschwXName, value, "maxGeschw", maxGeschwLocalType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Vollfuellleistung?, Vollfuellgeschw?, Trockenwetterabfluss?, Trockenwettergeschw?, TwWasserstandOben?, TwWasserstandUnten?, maxAbfluss?, maxGeschw?, maxWasserstandOben?, maxWasserstandUnten?, Auslastungsgrad?, Auslastungskennziffer?, HaltungsklasseAuto?, HaltungsklasseManuell?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? maxWasserstandOben {
            get {
                XElement x = this.GetElement(maxWasserstandObenXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(maxWasserstandObenXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                }
                else {
                    this.SetElementWithValidation(maxWasserstandObenXName, value, "maxWasserstandOben", maxWasserstandObenLocalType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Vollfuellleistung?, Vollfuellgeschw?, Trockenwetterabfluss?, Trockenwettergeschw?, TwWasserstandOben?, TwWasserstandUnten?, maxAbfluss?, maxGeschw?, maxWasserstandOben?, maxWasserstandUnten?, Auslastungsgrad?, Auslastungskennziffer?, HaltungsklasseAuto?, HaltungsklasseManuell?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? maxWasserstandUnten {
            get {
                XElement x = this.GetElement(maxWasserstandUntenXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(maxWasserstandUntenXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                }
                else {
                    this.SetElementWithValidation(maxWasserstandUntenXName, value, "maxWasserstandUnten", maxWasserstandUntenLocalType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Vollfuellleistung?, Vollfuellgeschw?, Trockenwetterabfluss?, Trockenwettergeschw?, TwWasserstandOben?, TwWasserstandUnten?, maxAbfluss?, maxGeschw?, maxWasserstandOben?, maxWasserstandUnten?, Auslastungsgrad?, Auslastungskennziffer?, HaltungsklasseAuto?, HaltungsklasseManuell?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? Auslastungsgrad {
            get {
                XElement x = this.GetElement(AuslastungsgradXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(AuslastungsgradXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                }
                else {
                    this.SetElementWithValidation(AuslastungsgradXName, value, "Auslastungsgrad", AuslastungsgradLocalType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Vollfuellleistung?, Vollfuellgeschw?, Trockenwetterabfluss?, Trockenwettergeschw?, TwWasserstandOben?, TwWasserstandUnten?, maxAbfluss?, maxGeschw?, maxWasserstandOben?, maxWasserstandUnten?, Auslastungsgrad?, Auslastungskennziffer?, HaltungsklasseAuto?, HaltungsklasseManuell?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? Auslastungskennziffer {
            get {
                XElement x = this.GetElement(AuslastungskennzifferXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(AuslastungskennzifferXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                }
                else {
                    this.SetElementWithValidation(AuslastungskennzifferXName, value, "Auslastungskennziffer", global::www.bfr.abwasser.de.AuslastungskennzifferType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Vollfuellleistung?, Vollfuellgeschw?, Trockenwetterabfluss?, Trockenwettergeschw?, TwWasserstandOben?, TwWasserstandUnten?, maxAbfluss?, maxGeschw?, maxWasserstandOben?, maxWasserstandUnten?, Auslastungsgrad?, Auslastungskennziffer?, HaltungsklasseAuto?, HaltungsklasseManuell?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? HaltungsklasseAuto {
            get {
                XElement x = this.GetElement(HaltungsklasseAutoXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(HaltungsklasseAutoXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                }
                else {
                    this.SetElementWithValidation(HaltungsklasseAutoXName, value, "HaltungsklasseAuto", HaltungsklasseAutoLocalType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Vollfuellleistung?, Vollfuellgeschw?, Trockenwetterabfluss?, Trockenwettergeschw?, TwWasserstandOben?, TwWasserstandUnten?, maxAbfluss?, maxGeschw?, maxWasserstandOben?, maxWasserstandUnten?, Auslastungsgrad?, Auslastungskennziffer?, HaltungsklasseAuto?, HaltungsklasseManuell?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? HaltungsklasseManuell {
            get {
                XElement x = this.GetElement(HaltungsklasseManuellXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(HaltungsklasseManuellXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                }
                else {
                    this.SetElementWithValidation(HaltungsklasseManuellXName, value, "HaltungsklasseManuell", HaltungsklasseManuellLocalType.TypeDefinition);
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ErgHaltungType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(VollfuellleistungXName, typeof(decimal));
            localElementDictionary.Add(VollfuellgeschwXName, typeof(decimal));
            localElementDictionary.Add(TrockenwetterabflussXName, typeof(decimal));
            localElementDictionary.Add(TrockenwettergeschwXName, typeof(decimal));
            localElementDictionary.Add(TwWasserstandObenXName, typeof(decimal));
            localElementDictionary.Add(TwWasserstandUntenXName, typeof(decimal));
            localElementDictionary.Add(maxAbflussXName, typeof(decimal));
            localElementDictionary.Add(maxGeschwXName, typeof(decimal));
            localElementDictionary.Add(maxWasserstandObenXName, typeof(decimal));
            localElementDictionary.Add(maxWasserstandUntenXName, typeof(decimal));
            localElementDictionary.Add(AuslastungsgradXName, typeof(decimal));
            localElementDictionary.Add(AuslastungskennzifferXName, typeof(decimal));
            localElementDictionary.Add(HaltungsklasseAutoXName, typeof(decimal));
            localElementDictionary.Add(HaltungsklasseManuellXName, typeof(decimal));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        private class VollfuellleistungLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(3200)), null, 3, 0, 1000m, null, 0, null, null, 0, null, 6, XmlSchemaWhiteSpace.Collapse));
            
            private VollfuellleistungLocalType() {
            }
        }
        
        private class VollfuellgeschwLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(3200)), null, 2, 0, 100m, null, 0, null, null, 0, null, 4, XmlSchemaWhiteSpace.Collapse));
            
            private VollfuellgeschwLocalType() {
            }
        }
        
        private class TrockenwetterabflussLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(3200)), null, 3, 0, 1000m, null, 0, null, null, 0, null, 6, XmlSchemaWhiteSpace.Collapse));
            
            private TrockenwetterabflussLocalType() {
            }
        }
        
        private class TrockenwettergeschwLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(3200)), null, 2, 0, 100m, null, 0, null, null, 0, null, 4, XmlSchemaWhiteSpace.Collapse));
            
            private TrockenwettergeschwLocalType() {
            }
        }
        
        private class TwWasserstandObenLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(3200)), null, 3, 0, 10000m, null, 0, null, null, 0, null, 7, XmlSchemaWhiteSpace.Collapse));
            
            private TwWasserstandObenLocalType() {
            }
        }
        
        private class TwWasserstandUntenLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(3200)), null, 3, 0, 10000m, null, 0, null, null, 0, null, 7, XmlSchemaWhiteSpace.Collapse));
            
            private TwWasserstandUntenLocalType() {
            }
        }
        
        private class maxAbflussLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(3200)), null, 3, 0, 1000m, null, 0, null, null, 0, null, 6, XmlSchemaWhiteSpace.Collapse));
            
            private maxAbflussLocalType() {
            }
        }
        
        private class maxGeschwLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(3200)), null, 2, 0, 100m, null, 0, null, null, 0, null, 4, XmlSchemaWhiteSpace.Collapse));
            
            private maxGeschwLocalType() {
            }
        }
        
        private class maxWasserstandObenLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(3200)), null, 3, 0, 10000m, null, 0, null, null, 0, null, 7, XmlSchemaWhiteSpace.Collapse));
            
            private maxWasserstandObenLocalType() {
            }
        }
        
        private class maxWasserstandUntenLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(3200)), null, 3, 0, 10000m, null, 0, null, null, 0, null, 7, XmlSchemaWhiteSpace.Collapse));
            
            private maxWasserstandUntenLocalType() {
            }
        }
        
        private class AuslastungsgradLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(3200)), null, 1, 0, 1000m, null, 0, null, null, 0, null, 4, XmlSchemaWhiteSpace.Collapse));
            
            private AuslastungsgradLocalType() {
            }
        }
        
        private class HaltungsklasseAutoLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(1024)), null, 0, 0, null, null, 0, null, null, 0, null, 1, XmlSchemaWhiteSpace.Collapse));
            
            private HaltungsklasseAutoLocalType() {
            }
        }
        
        private class HaltungsklasseManuellLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(1024)), null, 0, 0, null, null, 0, null, null, 0, null, 1, XmlSchemaWhiteSpace.Collapse));
            
            private HaltungsklasseManuellLocalType() {
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Vollfuellleistung?, Vollfuellgeschw?, Trockenwetterabfluss?, Trockenwettergeschw?, TwWasserstandOben?, TwWasserstandUnten?, maxAbfluss?, maxGeschw?, maxWasserstandOben?, maxWasserstandUnten?, Auslastungsgrad?)
    /// </para>
    /// </summary>
    public partial class ErgLeitungType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName VollfuellleistungXName = System.Xml.Linq.XName.Get("Vollfuellleistung", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName VollfuellgeschwXName = System.Xml.Linq.XName.Get("Vollfuellgeschw", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TrockenwetterabflussXName = System.Xml.Linq.XName.Get("Trockenwetterabfluss", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TrockenwettergeschwXName = System.Xml.Linq.XName.Get("Trockenwettergeschw", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TwWasserstandObenXName = System.Xml.Linq.XName.Get("TwWasserstandOben", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TwWasserstandUntenXName = System.Xml.Linq.XName.Get("TwWasserstandUnten", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName maxAbflussXName = System.Xml.Linq.XName.Get("maxAbfluss", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName maxGeschwXName = System.Xml.Linq.XName.Get("maxGeschw", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName maxWasserstandObenXName = System.Xml.Linq.XName.Get("maxWasserstandOben", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName maxWasserstandUntenXName = System.Xml.Linq.XName.Get("maxWasserstandUnten", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName AuslastungsgradXName = System.Xml.Linq.XName.Get("Auslastungsgrad", "http://www.bfr-abwasser.de");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("ErgLeitungType", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator ErgLeitungType(XElement xe) { return XTypedServices.ToXTypedElement<ErgLeitungType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static ErgLeitungType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(VollfuellleistungXName), new NamedContentModelEntity(VollfuellgeschwXName), new NamedContentModelEntity(TrockenwetterabflussXName), new NamedContentModelEntity(TrockenwettergeschwXName), new NamedContentModelEntity(TwWasserstandObenXName), new NamedContentModelEntity(TwWasserstandUntenXName), new NamedContentModelEntity(maxAbflussXName), new NamedContentModelEntity(maxGeschwXName), new NamedContentModelEntity(maxWasserstandObenXName), new NamedContentModelEntity(maxWasserstandUntenXName), new NamedContentModelEntity(AuslastungsgradXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Vollfuellleistung?, Vollfuellgeschw?, Trockenwetterabfluss?, Trockenwettergeschw?, TwWasserstandOben?, TwWasserstandUnten?, maxAbfluss?, maxGeschw?, maxWasserstandOben?, maxWasserstandUnten?, Auslastungsgrad?)
        /// </para>
        /// </summary>
        public ErgLeitungType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Vollfuellleistung?, Vollfuellgeschw?, Trockenwetterabfluss?, Trockenwettergeschw?, TwWasserstandOben?, TwWasserstandUnten?, maxAbfluss?, maxGeschw?, maxWasserstandOben?, maxWasserstandUnten?, Auslastungsgrad?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? Vollfuellleistung {
            get {
                XElement x = this.GetElement(VollfuellleistungXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(VollfuellleistungXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                }
                else {
                    this.SetElementWithValidation(VollfuellleistungXName, value, "Vollfuellleistung", VollfuellleistungLocalType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Vollfuellleistung?, Vollfuellgeschw?, Trockenwetterabfluss?, Trockenwettergeschw?, TwWasserstandOben?, TwWasserstandUnten?, maxAbfluss?, maxGeschw?, maxWasserstandOben?, maxWasserstandUnten?, Auslastungsgrad?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? Vollfuellgeschw {
            get {
                XElement x = this.GetElement(VollfuellgeschwXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(VollfuellgeschwXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                }
                else {
                    this.SetElementWithValidation(VollfuellgeschwXName, value, "Vollfuellgeschw", VollfuellgeschwLocalType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Vollfuellleistung?, Vollfuellgeschw?, Trockenwetterabfluss?, Trockenwettergeschw?, TwWasserstandOben?, TwWasserstandUnten?, maxAbfluss?, maxGeschw?, maxWasserstandOben?, maxWasserstandUnten?, Auslastungsgrad?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? Trockenwetterabfluss {
            get {
                XElement x = this.GetElement(TrockenwetterabflussXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(TrockenwetterabflussXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                }
                else {
                    this.SetElementWithValidation(TrockenwetterabflussXName, value, "Trockenwetterabfluss", TrockenwetterabflussLocalType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Vollfuellleistung?, Vollfuellgeschw?, Trockenwetterabfluss?, Trockenwettergeschw?, TwWasserstandOben?, TwWasserstandUnten?, maxAbfluss?, maxGeschw?, maxWasserstandOben?, maxWasserstandUnten?, Auslastungsgrad?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? Trockenwettergeschw {
            get {
                XElement x = this.GetElement(TrockenwettergeschwXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(TrockenwettergeschwXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                }
                else {
                    this.SetElementWithValidation(TrockenwettergeschwXName, value, "Trockenwettergeschw", TrockenwettergeschwLocalType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Vollfuellleistung?, Vollfuellgeschw?, Trockenwetterabfluss?, Trockenwettergeschw?, TwWasserstandOben?, TwWasserstandUnten?, maxAbfluss?, maxGeschw?, maxWasserstandOben?, maxWasserstandUnten?, Auslastungsgrad?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? TwWasserstandOben {
            get {
                XElement x = this.GetElement(TwWasserstandObenXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(TwWasserstandObenXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                }
                else {
                    this.SetElementWithValidation(TwWasserstandObenXName, value, "TwWasserstandOben", TwWasserstandObenLocalType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Vollfuellleistung?, Vollfuellgeschw?, Trockenwetterabfluss?, Trockenwettergeschw?, TwWasserstandOben?, TwWasserstandUnten?, maxAbfluss?, maxGeschw?, maxWasserstandOben?, maxWasserstandUnten?, Auslastungsgrad?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? TwWasserstandUnten {
            get {
                XElement x = this.GetElement(TwWasserstandUntenXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(TwWasserstandUntenXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                }
                else {
                    this.SetElementWithValidation(TwWasserstandUntenXName, value, "TwWasserstandUnten", TwWasserstandUntenLocalType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Vollfuellleistung?, Vollfuellgeschw?, Trockenwetterabfluss?, Trockenwettergeschw?, TwWasserstandOben?, TwWasserstandUnten?, maxAbfluss?, maxGeschw?, maxWasserstandOben?, maxWasserstandUnten?, Auslastungsgrad?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? maxAbfluss {
            get {
                XElement x = this.GetElement(maxAbflussXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(maxAbflussXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                }
                else {
                    this.SetElementWithValidation(maxAbflussXName, value, "maxAbfluss", maxAbflussLocalType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Vollfuellleistung?, Vollfuellgeschw?, Trockenwetterabfluss?, Trockenwettergeschw?, TwWasserstandOben?, TwWasserstandUnten?, maxAbfluss?, maxGeschw?, maxWasserstandOben?, maxWasserstandUnten?, Auslastungsgrad?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? maxGeschw {
            get {
                XElement x = this.GetElement(maxGeschwXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(maxGeschwXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                }
                else {
                    this.SetElementWithValidation(maxGeschwXName, value, "maxGeschw", maxGeschwLocalType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Vollfuellleistung?, Vollfuellgeschw?, Trockenwetterabfluss?, Trockenwettergeschw?, TwWasserstandOben?, TwWasserstandUnten?, maxAbfluss?, maxGeschw?, maxWasserstandOben?, maxWasserstandUnten?, Auslastungsgrad?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? maxWasserstandOben {
            get {
                XElement x = this.GetElement(maxWasserstandObenXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(maxWasserstandObenXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                }
                else {
                    this.SetElementWithValidation(maxWasserstandObenXName, value, "maxWasserstandOben", maxWasserstandObenLocalType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Vollfuellleistung?, Vollfuellgeschw?, Trockenwetterabfluss?, Trockenwettergeschw?, TwWasserstandOben?, TwWasserstandUnten?, maxAbfluss?, maxGeschw?, maxWasserstandOben?, maxWasserstandUnten?, Auslastungsgrad?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? maxWasserstandUnten {
            get {
                XElement x = this.GetElement(maxWasserstandUntenXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(maxWasserstandUntenXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                }
                else {
                    this.SetElementWithValidation(maxWasserstandUntenXName, value, "maxWasserstandUnten", maxWasserstandUntenLocalType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Vollfuellleistung?, Vollfuellgeschw?, Trockenwetterabfluss?, Trockenwettergeschw?, TwWasserstandOben?, TwWasserstandUnten?, maxAbfluss?, maxGeschw?, maxWasserstandOben?, maxWasserstandUnten?, Auslastungsgrad?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? Auslastungsgrad {
            get {
                XElement x = this.GetElement(AuslastungsgradXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(AuslastungsgradXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                }
                else {
                    this.SetElementWithValidation(AuslastungsgradXName, value, "Auslastungsgrad", AuslastungsgradLocalType.TypeDefinition);
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ErgLeitungType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(VollfuellleistungXName, typeof(decimal));
            localElementDictionary.Add(VollfuellgeschwXName, typeof(decimal));
            localElementDictionary.Add(TrockenwetterabflussXName, typeof(decimal));
            localElementDictionary.Add(TrockenwettergeschwXName, typeof(decimal));
            localElementDictionary.Add(TwWasserstandObenXName, typeof(decimal));
            localElementDictionary.Add(TwWasserstandUntenXName, typeof(decimal));
            localElementDictionary.Add(maxAbflussXName, typeof(decimal));
            localElementDictionary.Add(maxGeschwXName, typeof(decimal));
            localElementDictionary.Add(maxWasserstandObenXName, typeof(decimal));
            localElementDictionary.Add(maxWasserstandUntenXName, typeof(decimal));
            localElementDictionary.Add(AuslastungsgradXName, typeof(decimal));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        private class VollfuellleistungLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(3200)), null, 3, 0, 1000m, null, 0, null, null, 0, null, 6, XmlSchemaWhiteSpace.Collapse));
            
            private VollfuellleistungLocalType() {
            }
        }
        
        private class VollfuellgeschwLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(3200)), null, 2, 0, 100m, null, 0, null, null, 0, null, 4, XmlSchemaWhiteSpace.Collapse));
            
            private VollfuellgeschwLocalType() {
            }
        }
        
        private class TrockenwetterabflussLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(3200)), null, 3, 0, 1000m, null, 0, null, null, 0, null, 6, XmlSchemaWhiteSpace.Collapse));
            
            private TrockenwetterabflussLocalType() {
            }
        }
        
        private class TrockenwettergeschwLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(3200)), null, 2, 0, 100m, null, 0, null, null, 0, null, 4, XmlSchemaWhiteSpace.Collapse));
            
            private TrockenwettergeschwLocalType() {
            }
        }
        
        private class TwWasserstandObenLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(3200)), null, 3, 0, 10000m, null, 0, null, null, 0, null, 7, XmlSchemaWhiteSpace.Collapse));
            
            private TwWasserstandObenLocalType() {
            }
        }
        
        private class TwWasserstandUntenLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(3200)), null, 3, 0, 10000m, null, 0, null, null, 0, null, 7, XmlSchemaWhiteSpace.Collapse));
            
            private TwWasserstandUntenLocalType() {
            }
        }
        
        private class maxAbflussLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(3200)), null, 3, 0, 1000m, null, 0, null, null, 0, null, 6, XmlSchemaWhiteSpace.Collapse));
            
            private maxAbflussLocalType() {
            }
        }
        
        private class maxGeschwLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(3200)), null, 2, 0, 100m, null, 0, null, null, 0, null, 4, XmlSchemaWhiteSpace.Collapse));
            
            private maxGeschwLocalType() {
            }
        }
        
        private class maxWasserstandObenLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(3200)), null, 3, 0, 10000m, null, 0, null, null, 0, null, 7, XmlSchemaWhiteSpace.Collapse));
            
            private maxWasserstandObenLocalType() {
            }
        }
        
        private class maxWasserstandUntenLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(3200)), null, 3, 0, 10000m, null, 0, null, null, 0, null, 7, XmlSchemaWhiteSpace.Collapse));
            
            private maxWasserstandUntenLocalType() {
            }
        }
        
        private class AuslastungsgradLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(3200)), null, 1, 0, 1000m, null, 0, null, null, 0, null, 4, XmlSchemaWhiteSpace.Collapse));
            
            private AuslastungsgradLocalType() {
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Vollfuellleistung?, Vollfuellgeschw?, Trockenwetterabfluss?, Trockenwettergeschw?, TwWasserstandOben?, TwWasserstandUnten?, maxAbfluss?, maxGeschw?, maxWasserstandOben?, maxWasserstandUnten?, Auslastungsgrad?)
    /// </para>
    /// </summary>
    public partial class ErgGerinneType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName VollfuellleistungXName = System.Xml.Linq.XName.Get("Vollfuellleistung", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName VollfuellgeschwXName = System.Xml.Linq.XName.Get("Vollfuellgeschw", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TrockenwetterabflussXName = System.Xml.Linq.XName.Get("Trockenwetterabfluss", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TrockenwettergeschwXName = System.Xml.Linq.XName.Get("Trockenwettergeschw", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TwWasserstandObenXName = System.Xml.Linq.XName.Get("TwWasserstandOben", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TwWasserstandUntenXName = System.Xml.Linq.XName.Get("TwWasserstandUnten", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName maxAbflussXName = System.Xml.Linq.XName.Get("maxAbfluss", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName maxGeschwXName = System.Xml.Linq.XName.Get("maxGeschw", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName maxWasserstandObenXName = System.Xml.Linq.XName.Get("maxWasserstandOben", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName maxWasserstandUntenXName = System.Xml.Linq.XName.Get("maxWasserstandUnten", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName AuslastungsgradXName = System.Xml.Linq.XName.Get("Auslastungsgrad", "http://www.bfr-abwasser.de");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("ErgGerinneType", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator ErgGerinneType(XElement xe) { return XTypedServices.ToXTypedElement<ErgGerinneType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static ErgGerinneType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(VollfuellleistungXName), new NamedContentModelEntity(VollfuellgeschwXName), new NamedContentModelEntity(TrockenwetterabflussXName), new NamedContentModelEntity(TrockenwettergeschwXName), new NamedContentModelEntity(TwWasserstandObenXName), new NamedContentModelEntity(TwWasserstandUntenXName), new NamedContentModelEntity(maxAbflussXName), new NamedContentModelEntity(maxGeschwXName), new NamedContentModelEntity(maxWasserstandObenXName), new NamedContentModelEntity(maxWasserstandUntenXName), new NamedContentModelEntity(AuslastungsgradXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Vollfuellleistung?, Vollfuellgeschw?, Trockenwetterabfluss?, Trockenwettergeschw?, TwWasserstandOben?, TwWasserstandUnten?, maxAbfluss?, maxGeschw?, maxWasserstandOben?, maxWasserstandUnten?, Auslastungsgrad?)
        /// </para>
        /// </summary>
        public ErgGerinneType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Vollfuellleistung?, Vollfuellgeschw?, Trockenwetterabfluss?, Trockenwettergeschw?, TwWasserstandOben?, TwWasserstandUnten?, maxAbfluss?, maxGeschw?, maxWasserstandOben?, maxWasserstandUnten?, Auslastungsgrad?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? Vollfuellleistung {
            get {
                XElement x = this.GetElement(VollfuellleistungXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(VollfuellleistungXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                }
                else {
                    this.SetElementWithValidation(VollfuellleistungXName, value, "Vollfuellleistung", VollfuellleistungLocalType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Vollfuellleistung?, Vollfuellgeschw?, Trockenwetterabfluss?, Trockenwettergeschw?, TwWasserstandOben?, TwWasserstandUnten?, maxAbfluss?, maxGeschw?, maxWasserstandOben?, maxWasserstandUnten?, Auslastungsgrad?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? Vollfuellgeschw {
            get {
                XElement x = this.GetElement(VollfuellgeschwXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(VollfuellgeschwXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                }
                else {
                    this.SetElementWithValidation(VollfuellgeschwXName, value, "Vollfuellgeschw", VollfuellgeschwLocalType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Vollfuellleistung?, Vollfuellgeschw?, Trockenwetterabfluss?, Trockenwettergeschw?, TwWasserstandOben?, TwWasserstandUnten?, maxAbfluss?, maxGeschw?, maxWasserstandOben?, maxWasserstandUnten?, Auslastungsgrad?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? Trockenwetterabfluss {
            get {
                XElement x = this.GetElement(TrockenwetterabflussXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(TrockenwetterabflussXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                }
                else {
                    this.SetElementWithValidation(TrockenwetterabflussXName, value, "Trockenwetterabfluss", TrockenwetterabflussLocalType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Vollfuellleistung?, Vollfuellgeschw?, Trockenwetterabfluss?, Trockenwettergeschw?, TwWasserstandOben?, TwWasserstandUnten?, maxAbfluss?, maxGeschw?, maxWasserstandOben?, maxWasserstandUnten?, Auslastungsgrad?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? Trockenwettergeschw {
            get {
                XElement x = this.GetElement(TrockenwettergeschwXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(TrockenwettergeschwXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                }
                else {
                    this.SetElementWithValidation(TrockenwettergeschwXName, value, "Trockenwettergeschw", TrockenwettergeschwLocalType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Vollfuellleistung?, Vollfuellgeschw?, Trockenwetterabfluss?, Trockenwettergeschw?, TwWasserstandOben?, TwWasserstandUnten?, maxAbfluss?, maxGeschw?, maxWasserstandOben?, maxWasserstandUnten?, Auslastungsgrad?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? TwWasserstandOben {
            get {
                XElement x = this.GetElement(TwWasserstandObenXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(TwWasserstandObenXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                }
                else {
                    this.SetElementWithValidation(TwWasserstandObenXName, value, "TwWasserstandOben", TwWasserstandObenLocalType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Vollfuellleistung?, Vollfuellgeschw?, Trockenwetterabfluss?, Trockenwettergeschw?, TwWasserstandOben?, TwWasserstandUnten?, maxAbfluss?, maxGeschw?, maxWasserstandOben?, maxWasserstandUnten?, Auslastungsgrad?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? TwWasserstandUnten {
            get {
                XElement x = this.GetElement(TwWasserstandUntenXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(TwWasserstandUntenXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                }
                else {
                    this.SetElementWithValidation(TwWasserstandUntenXName, value, "TwWasserstandUnten", TwWasserstandUntenLocalType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Vollfuellleistung?, Vollfuellgeschw?, Trockenwetterabfluss?, Trockenwettergeschw?, TwWasserstandOben?, TwWasserstandUnten?, maxAbfluss?, maxGeschw?, maxWasserstandOben?, maxWasserstandUnten?, Auslastungsgrad?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? maxAbfluss {
            get {
                XElement x = this.GetElement(maxAbflussXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(maxAbflussXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                }
                else {
                    this.SetElementWithValidation(maxAbflussXName, value, "maxAbfluss", maxAbflussLocalType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Vollfuellleistung?, Vollfuellgeschw?, Trockenwetterabfluss?, Trockenwettergeschw?, TwWasserstandOben?, TwWasserstandUnten?, maxAbfluss?, maxGeschw?, maxWasserstandOben?, maxWasserstandUnten?, Auslastungsgrad?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? maxGeschw {
            get {
                XElement x = this.GetElement(maxGeschwXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(maxGeschwXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                }
                else {
                    this.SetElementWithValidation(maxGeschwXName, value, "maxGeschw", maxGeschwLocalType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Vollfuellleistung?, Vollfuellgeschw?, Trockenwetterabfluss?, Trockenwettergeschw?, TwWasserstandOben?, TwWasserstandUnten?, maxAbfluss?, maxGeschw?, maxWasserstandOben?, maxWasserstandUnten?, Auslastungsgrad?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? maxWasserstandOben {
            get {
                XElement x = this.GetElement(maxWasserstandObenXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(maxWasserstandObenXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                }
                else {
                    this.SetElementWithValidation(maxWasserstandObenXName, value, "maxWasserstandOben", maxWasserstandObenLocalType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Vollfuellleistung?, Vollfuellgeschw?, Trockenwetterabfluss?, Trockenwettergeschw?, TwWasserstandOben?, TwWasserstandUnten?, maxAbfluss?, maxGeschw?, maxWasserstandOben?, maxWasserstandUnten?, Auslastungsgrad?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? maxWasserstandUnten {
            get {
                XElement x = this.GetElement(maxWasserstandUntenXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(maxWasserstandUntenXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                }
                else {
                    this.SetElementWithValidation(maxWasserstandUntenXName, value, "maxWasserstandUnten", maxWasserstandUntenLocalType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Vollfuellleistung?, Vollfuellgeschw?, Trockenwetterabfluss?, Trockenwettergeschw?, TwWasserstandOben?, TwWasserstandUnten?, maxAbfluss?, maxGeschw?, maxWasserstandOben?, maxWasserstandUnten?, Auslastungsgrad?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? Auslastungsgrad {
            get {
                XElement x = this.GetElement(AuslastungsgradXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(AuslastungsgradXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                }
                else {
                    this.SetElementWithValidation(AuslastungsgradXName, value, "Auslastungsgrad", AuslastungsgradLocalType.TypeDefinition);
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ErgGerinneType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(VollfuellleistungXName, typeof(decimal));
            localElementDictionary.Add(VollfuellgeschwXName, typeof(decimal));
            localElementDictionary.Add(TrockenwetterabflussXName, typeof(decimal));
            localElementDictionary.Add(TrockenwettergeschwXName, typeof(decimal));
            localElementDictionary.Add(TwWasserstandObenXName, typeof(decimal));
            localElementDictionary.Add(TwWasserstandUntenXName, typeof(decimal));
            localElementDictionary.Add(maxAbflussXName, typeof(decimal));
            localElementDictionary.Add(maxGeschwXName, typeof(decimal));
            localElementDictionary.Add(maxWasserstandObenXName, typeof(decimal));
            localElementDictionary.Add(maxWasserstandUntenXName, typeof(decimal));
            localElementDictionary.Add(AuslastungsgradXName, typeof(decimal));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        private class VollfuellleistungLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(3200)), null, 3, 0, 10000m, null, 0, null, null, 0, null, 7, XmlSchemaWhiteSpace.Collapse));
            
            private VollfuellleistungLocalType() {
            }
        }
        
        private class VollfuellgeschwLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(3200)), null, 2, 0, 100m, null, 0, null, null, 0, null, 4, XmlSchemaWhiteSpace.Collapse));
            
            private VollfuellgeschwLocalType() {
            }
        }
        
        private class TrockenwetterabflussLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(3200)), null, 3, 0, 1000m, null, 0, null, null, 0, null, 6, XmlSchemaWhiteSpace.Collapse));
            
            private TrockenwetterabflussLocalType() {
            }
        }
        
        private class TrockenwettergeschwLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(3200)), null, 2, 0, 100m, null, 0, null, null, 0, null, 4, XmlSchemaWhiteSpace.Collapse));
            
            private TrockenwettergeschwLocalType() {
            }
        }
        
        private class TwWasserstandObenLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(3200)), null, 3, 0, 10000m, null, 0, null, null, 0, null, 7, XmlSchemaWhiteSpace.Collapse));
            
            private TwWasserstandObenLocalType() {
            }
        }
        
        private class TwWasserstandUntenLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(3200)), null, 3, 0, 10000m, null, 0, null, null, 0, null, 7, XmlSchemaWhiteSpace.Collapse));
            
            private TwWasserstandUntenLocalType() {
            }
        }
        
        private class maxAbflussLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(3200)), null, 3, 0, 10000m, null, 0, null, null, 0, null, 7, XmlSchemaWhiteSpace.Collapse));
            
            private maxAbflussLocalType() {
            }
        }
        
        private class maxGeschwLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(3200)), null, 2, 0, 100m, null, 0, null, null, 0, null, 4, XmlSchemaWhiteSpace.Collapse));
            
            private maxGeschwLocalType() {
            }
        }
        
        private class maxWasserstandObenLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(3200)), null, 3, 0, 10000m, null, 0, null, null, 0, null, 7, XmlSchemaWhiteSpace.Collapse));
            
            private maxWasserstandObenLocalType() {
            }
        }
        
        private class maxWasserstandUntenLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(3200)), null, 3, 0, 10000m, null, 0, null, null, 0, null, 7, XmlSchemaWhiteSpace.Collapse));
            
            private maxWasserstandUntenLocalType() {
            }
        }
        
        private class AuslastungsgradLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(3200)), null, 1, 0, 1000m, null, 0, null, null, 0, null, 4, XmlSchemaWhiteSpace.Collapse));
            
            private AuslastungsgradLocalType() {
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Qtrocken?, Qmax?, Pumpvolumen?, Pumpenlaufzeit?)
    /// </para>
    /// </summary>
    public partial class ErgPumpeType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName QtrockenXName = System.Xml.Linq.XName.Get("Qtrocken", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName QmaxXName = System.Xml.Linq.XName.Get("Qmax", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName PumpvolumenXName = System.Xml.Linq.XName.Get("Pumpvolumen", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName PumpenlaufzeitXName = System.Xml.Linq.XName.Get("Pumpenlaufzeit", "http://www.bfr-abwasser.de");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("ErgPumpeType", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator ErgPumpeType(XElement xe) { return XTypedServices.ToXTypedElement<ErgPumpeType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static ErgPumpeType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(QtrockenXName), new NamedContentModelEntity(QmaxXName), new NamedContentModelEntity(PumpvolumenXName), new NamedContentModelEntity(PumpenlaufzeitXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Qtrocken?, Qmax?, Pumpvolumen?, Pumpenlaufzeit?)
        /// </para>
        /// </summary>
        public ErgPumpeType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Qtrocken?, Qmax?, Pumpvolumen?, Pumpenlaufzeit?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? Qtrocken {
            get {
                XElement x = this.GetElement(QtrockenXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(QtrockenXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                }
                else {
                    this.SetElementWithValidation(QtrockenXName, value, "Qtrocken", QtrockenLocalType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Qtrocken?, Qmax?, Pumpvolumen?, Pumpenlaufzeit?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? Qmax {
            get {
                XElement x = this.GetElement(QmaxXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(QmaxXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                }
                else {
                    this.SetElementWithValidation(QmaxXName, value, "Qmax", QmaxLocalType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Qtrocken?, Qmax?, Pumpvolumen?, Pumpenlaufzeit?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? Pumpvolumen {
            get {
                XElement x = this.GetElement(PumpvolumenXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(PumpvolumenXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                }
                else {
                    this.SetElementWithValidation(PumpvolumenXName, value, "Pumpvolumen", PumpvolumenLocalType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Qtrocken?, Qmax?, Pumpvolumen?, Pumpenlaufzeit?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? Pumpenlaufzeit {
            get {
                XElement x = this.GetElement(PumpenlaufzeitXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(PumpenlaufzeitXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                }
                else {
                    this.SetElementWithValidation(PumpenlaufzeitXName, value, "Pumpenlaufzeit", PumpenlaufzeitLocalType.TypeDefinition);
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ErgPumpeType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(QtrockenXName, typeof(decimal));
            localElementDictionary.Add(QmaxXName, typeof(decimal));
            localElementDictionary.Add(PumpvolumenXName, typeof(decimal));
            localElementDictionary.Add(PumpenlaufzeitXName, typeof(decimal));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        private class QtrockenLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(3200)), null, 3, 0, 1000m, null, 0, null, null, 0, null, 6, XmlSchemaWhiteSpace.Collapse));
            
            private QtrockenLocalType() {
            }
        }
        
        private class QmaxLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(3200)), null, 3, 0, 1000m, null, 0, null, null, 0, null, 6, XmlSchemaWhiteSpace.Collapse));
            
            private QmaxLocalType() {
            }
        }
        
        private class PumpvolumenLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(3200)), null, 1, 0, 100000000m, null, 0, null, null, 0, null, 9, XmlSchemaWhiteSpace.Collapse));
            
            private PumpvolumenLocalType() {
            }
        }
        
        private class PumpenlaufzeitLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(3200)), null, 2, 0, 10000m, null, 0, null, null, 0, null, 6, XmlSchemaWhiteSpace.Collapse));
            
            private PumpenlaufzeitLocalType() {
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (maxUeberlauf?, Ueberlaufvolumen?)
    /// </para>
    /// </summary>
    public partial class ErgWehrType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName maxUeberlaufXName = System.Xml.Linq.XName.Get("maxUeberlauf", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName UeberlaufvolumenXName = System.Xml.Linq.XName.Get("Ueberlaufvolumen", "http://www.bfr-abwasser.de");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("ErgWehrType", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator ErgWehrType(XElement xe) { return XTypedServices.ToXTypedElement<ErgWehrType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static ErgWehrType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(maxUeberlaufXName), new NamedContentModelEntity(UeberlaufvolumenXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (maxUeberlauf?, Ueberlaufvolumen?)
        /// </para>
        /// </summary>
        public ErgWehrType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (maxUeberlauf?, Ueberlaufvolumen?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? maxUeberlauf {
            get {
                XElement x = this.GetElement(maxUeberlaufXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(maxUeberlaufXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                }
                else {
                    this.SetElementWithValidation(maxUeberlaufXName, value, "maxUeberlauf", maxUeberlaufLocalType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (maxUeberlauf?, Ueberlaufvolumen?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? Ueberlaufvolumen {
            get {
                XElement x = this.GetElement(UeberlaufvolumenXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(UeberlaufvolumenXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                }
                else {
                    this.SetElementWithValidation(UeberlaufvolumenXName, value, "Ueberlaufvolumen", UeberlaufvolumenLocalType.TypeDefinition);
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ErgWehrType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(maxUeberlaufXName, typeof(decimal));
            localElementDictionary.Add(UeberlaufvolumenXName, typeof(decimal));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        private class maxUeberlaufLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(3200)), null, 3, 0, 1000m, null, 0, null, null, 0, null, 6, XmlSchemaWhiteSpace.Collapse));
            
            private maxUeberlaufLocalType() {
            }
        }
        
        private class UeberlaufvolumenLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(3200)), null, 1, 0, 100000000m, null, 0, null, null, 0, null, 9, XmlSchemaWhiteSpace.Collapse));
            
            private UeberlaufvolumenLocalType() {
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Qmax?, Volumenschieber?)
    /// </para>
    /// </summary>
    public partial class ErgSchieberType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName QmaxXName = System.Xml.Linq.XName.Get("Qmax", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName VolumenschieberXName = System.Xml.Linq.XName.Get("Volumenschieber", "http://www.bfr-abwasser.de");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("ErgSchieberType", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator ErgSchieberType(XElement xe) { return XTypedServices.ToXTypedElement<ErgSchieberType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static ErgSchieberType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(QmaxXName), new NamedContentModelEntity(VolumenschieberXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Qmax?, Volumenschieber?)
        /// </para>
        /// </summary>
        public ErgSchieberType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Qmax?, Volumenschieber?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? Qmax {
            get {
                XElement x = this.GetElement(QmaxXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(QmaxXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                }
                else {
                    this.SetElementWithValidation(QmaxXName, value, "Qmax", QmaxLocalType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Qmax?, Volumenschieber?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? Volumenschieber {
            get {
                XElement x = this.GetElement(VolumenschieberXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(VolumenschieberXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                }
                else {
                    this.SetElementWithValidation(VolumenschieberXName, value, "Volumenschieber", VolumenschieberLocalType.TypeDefinition);
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ErgSchieberType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(QmaxXName, typeof(decimal));
            localElementDictionary.Add(VolumenschieberXName, typeof(decimal));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        private class QmaxLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(3200)), null, 3, 0, 1000m, null, 0, null, null, 0, null, 6, XmlSchemaWhiteSpace.Collapse));
            
            private QmaxLocalType() {
            }
        }
        
        private class VolumenschieberLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(3200)), null, 1, 0, 100000000m, null, 0, null, null, 0, null, 9, XmlSchemaWhiteSpace.Collapse));
            
            private VolumenschieberLocalType() {
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (maxWasserstand?, Auslastungskennziffer?, Ueberstauhaeufigkeit?, Ueberstaumenge?, Ueberstaudauer?, Ueberflutungshaeufigkeit?, Ueberflutungsmenge?, SchachtklasseAuto?, SchachtklasseManuell?)
    /// </para>
    /// </summary>
    public partial class ErgSchachtType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName maxWasserstandXName = System.Xml.Linq.XName.Get("maxWasserstand", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName AuslastungskennzifferXName = System.Xml.Linq.XName.Get("Auslastungskennziffer", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName UeberstauhaeufigkeitXName = System.Xml.Linq.XName.Get("Ueberstauhaeufigkeit", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName UeberstaumengeXName = System.Xml.Linq.XName.Get("Ueberstaumenge", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName UeberstaudauerXName = System.Xml.Linq.XName.Get("Ueberstaudauer", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName UeberflutungshaeufigkeitXName = System.Xml.Linq.XName.Get("Ueberflutungshaeufigkeit", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName UeberflutungsmengeXName = System.Xml.Linq.XName.Get("Ueberflutungsmenge", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName SchachtklasseAutoXName = System.Xml.Linq.XName.Get("SchachtklasseAuto", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName SchachtklasseManuellXName = System.Xml.Linq.XName.Get("SchachtklasseManuell", "http://www.bfr-abwasser.de");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("ErgSchachtType", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator ErgSchachtType(XElement xe) { return XTypedServices.ToXTypedElement<ErgSchachtType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static ErgSchachtType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(maxWasserstandXName), new NamedContentModelEntity(AuslastungskennzifferXName), new NamedContentModelEntity(UeberstauhaeufigkeitXName), new NamedContentModelEntity(UeberstaumengeXName), new NamedContentModelEntity(UeberstaudauerXName), new NamedContentModelEntity(UeberflutungshaeufigkeitXName), new NamedContentModelEntity(UeberflutungsmengeXName), new NamedContentModelEntity(SchachtklasseAutoXName), new NamedContentModelEntity(SchachtklasseManuellXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (maxWasserstand?, Auslastungskennziffer?, Ueberstauhaeufigkeit?, Ueberstaumenge?, Ueberstaudauer?, Ueberflutungshaeufigkeit?, Ueberflutungsmenge?, SchachtklasseAuto?, SchachtklasseManuell?)
        /// </para>
        /// </summary>
        public ErgSchachtType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (maxWasserstand?, Auslastungskennziffer?, Ueberstauhaeufigkeit?, Ueberstaumenge?, Ueberstaudauer?, Ueberflutungshaeufigkeit?, Ueberflutungsmenge?, SchachtklasseAuto?, SchachtklasseManuell?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? maxWasserstand {
            get {
                XElement x = this.GetElement(maxWasserstandXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(maxWasserstandXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                }
                else {
                    this.SetElementWithValidation(maxWasserstandXName, value, "maxWasserstand", maxWasserstandLocalType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (maxWasserstand?, Auslastungskennziffer?, Ueberstauhaeufigkeit?, Ueberstaumenge?, Ueberstaudauer?, Ueberflutungshaeufigkeit?, Ueberflutungsmenge?, SchachtklasseAuto?, SchachtklasseManuell?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? Auslastungskennziffer {
            get {
                XElement x = this.GetElement(AuslastungskennzifferXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(AuslastungskennzifferXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                }
                else {
                    this.SetElementWithValidation(AuslastungskennzifferXName, value, "Auslastungskennziffer", global::www.bfr.abwasser.de.AuslastungskennzifferType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (maxWasserstand?, Auslastungskennziffer?, Ueberstauhaeufigkeit?, Ueberstaumenge?, Ueberstaudauer?, Ueberflutungshaeufigkeit?, Ueberflutungsmenge?, SchachtklasseAuto?, SchachtklasseManuell?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? Ueberstauhaeufigkeit {
            get {
                XElement x = this.GetElement(UeberstauhaeufigkeitXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(UeberstauhaeufigkeitXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                }
                else {
                    this.SetElementWithValidation(UeberstauhaeufigkeitXName, value, "Ueberstauhaeufigkeit", UeberstauhaeufigkeitLocalType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (maxWasserstand?, Auslastungskennziffer?, Ueberstauhaeufigkeit?, Ueberstaumenge?, Ueberstaudauer?, Ueberflutungshaeufigkeit?, Ueberflutungsmenge?, SchachtklasseAuto?, SchachtklasseManuell?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? Ueberstaumenge {
            get {
                XElement x = this.GetElement(UeberstaumengeXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(UeberstaumengeXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                }
                else {
                    this.SetElementWithValidation(UeberstaumengeXName, value, "Ueberstaumenge", UeberstaumengeLocalType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (maxWasserstand?, Auslastungskennziffer?, Ueberstauhaeufigkeit?, Ueberstaumenge?, Ueberstaudauer?, Ueberflutungshaeufigkeit?, Ueberflutungsmenge?, SchachtklasseAuto?, SchachtklasseManuell?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? Ueberstaudauer {
            get {
                XElement x = this.GetElement(UeberstaudauerXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(UeberstaudauerXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                }
                else {
                    this.SetElementWithValidation(UeberstaudauerXName, value, "Ueberstaudauer", UeberstaudauerLocalType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (maxWasserstand?, Auslastungskennziffer?, Ueberstauhaeufigkeit?, Ueberstaumenge?, Ueberstaudauer?, Ueberflutungshaeufigkeit?, Ueberflutungsmenge?, SchachtklasseAuto?, SchachtklasseManuell?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? Ueberflutungshaeufigkeit {
            get {
                XElement x = this.GetElement(UeberflutungshaeufigkeitXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(UeberflutungshaeufigkeitXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                }
                else {
                    this.SetElementWithValidation(UeberflutungshaeufigkeitXName, value, "Ueberflutungshaeufigkeit", UeberflutungshaeufigkeitLocalType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (maxWasserstand?, Auslastungskennziffer?, Ueberstauhaeufigkeit?, Ueberstaumenge?, Ueberstaudauer?, Ueberflutungshaeufigkeit?, Ueberflutungsmenge?, SchachtklasseAuto?, SchachtklasseManuell?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? Ueberflutungsmenge {
            get {
                XElement x = this.GetElement(UeberflutungsmengeXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(UeberflutungsmengeXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                }
                else {
                    this.SetElementWithValidation(UeberflutungsmengeXName, value, "Ueberflutungsmenge", UeberflutungsmengeLocalType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (maxWasserstand?, Auslastungskennziffer?, Ueberstauhaeufigkeit?, Ueberstaumenge?, Ueberstaudauer?, Ueberflutungshaeufigkeit?, Ueberflutungsmenge?, SchachtklasseAuto?, SchachtklasseManuell?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? SchachtklasseAuto {
            get {
                XElement x = this.GetElement(SchachtklasseAutoXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(SchachtklasseAutoXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                }
                else {
                    this.SetElementWithValidation(SchachtklasseAutoXName, value, "SchachtklasseAuto", SchachtklasseAutoLocalType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (maxWasserstand?, Auslastungskennziffer?, Ueberstauhaeufigkeit?, Ueberstaumenge?, Ueberstaudauer?, Ueberflutungshaeufigkeit?, Ueberflutungsmenge?, SchachtklasseAuto?, SchachtklasseManuell?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? SchachtklasseManuell {
            get {
                XElement x = this.GetElement(SchachtklasseManuellXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(SchachtklasseManuellXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                }
                else {
                    this.SetElementWithValidation(SchachtklasseManuellXName, value, "SchachtklasseManuell", SchachtklasseManuellLocalType.TypeDefinition);
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ErgSchachtType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(maxWasserstandXName, typeof(decimal));
            localElementDictionary.Add(AuslastungskennzifferXName, typeof(decimal));
            localElementDictionary.Add(UeberstauhaeufigkeitXName, typeof(decimal));
            localElementDictionary.Add(UeberstaumengeXName, typeof(decimal));
            localElementDictionary.Add(UeberstaudauerXName, typeof(decimal));
            localElementDictionary.Add(UeberflutungshaeufigkeitXName, typeof(decimal));
            localElementDictionary.Add(UeberflutungsmengeXName, typeof(decimal));
            localElementDictionary.Add(SchachtklasseAutoXName, typeof(decimal));
            localElementDictionary.Add(SchachtklasseManuellXName, typeof(decimal));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        private class maxWasserstandLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(3200)), null, 3, 0, 10000m, null, 0, null, null, 0, null, 7, XmlSchemaWhiteSpace.Collapse));
            
            private maxWasserstandLocalType() {
            }
        }
        
        private class UeberstauhaeufigkeitLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(3200)), null, 3, 0, 1000m, null, 0, null, null, 0, null, 6, XmlSchemaWhiteSpace.Collapse));
            
            private UeberstauhaeufigkeitLocalType() {
            }
        }
        
        private class UeberstaumengeLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(3200)), null, 3, 0, 100000000m, null, 0, null, null, 0, null, 11, XmlSchemaWhiteSpace.Collapse));
            
            private UeberstaumengeLocalType() {
            }
        }
        
        private class UeberstaudauerLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(3200)), null, 2, 0, 1000000m, null, 0, null, null, 0, null, 8, XmlSchemaWhiteSpace.Collapse));
            
            private UeberstaudauerLocalType() {
            }
        }
        
        private class UeberflutungshaeufigkeitLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(3200)), null, 3, 0, 1000m, null, 0, null, null, 0, null, 6, XmlSchemaWhiteSpace.Collapse));
            
            private UeberflutungshaeufigkeitLocalType() {
            }
        }
        
        private class UeberflutungsmengeLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(3200)), null, 3, 0, 100000000m, null, 0, null, null, 0, null, 11, XmlSchemaWhiteSpace.Collapse));
            
            private UeberflutungsmengeLocalType() {
            }
        }
        
        private class SchachtklasseAutoLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(1024)), null, 0, 0, null, null, 0, null, null, 0, null, 1, XmlSchemaWhiteSpace.Collapse));
            
            private SchachtklasseAutoLocalType() {
            }
        }
        
        private class SchachtklasseManuellLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(1024)), null, 0, 0, null, null, 0, null, null, 0, null, 1, XmlSchemaWhiteSpace.Collapse));
            
            private SchachtklasseManuellLocalType() {
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Speicherbauwerktyp, (Regenrueckhaltebecken? | Regenueberlaufbecken? | Bodenfilterbecken? | Versickerungsanlage?))
    /// </para>
    /// </summary>
    public partial class ErgSpeicherbauwerkType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName SpeicherbauwerktypXName = System.Xml.Linq.XName.Get("Speicherbauwerktyp", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName RegenrueckhaltebeckenXName = System.Xml.Linq.XName.Get("Regenrueckhaltebecken", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName RegenueberlaufbeckenXName = System.Xml.Linq.XName.Get("Regenueberlaufbecken", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName BodenfilterbeckenXName = System.Xml.Linq.XName.Get("Bodenfilterbecken", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName VersickerungsanlageXName = System.Xml.Linq.XName.Get("Versickerungsanlage", "http://www.bfr-abwasser.de");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("ErgSpeicherbauwerkType", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator ErgSpeicherbauwerkType(XElement xe) { return XTypedServices.ToXTypedElement<ErgSpeicherbauwerkType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static ErgSpeicherbauwerkType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(SpeicherbauwerktypXName), new ChoiceContentModelEntity(new NamedContentModelEntity(RegenrueckhaltebeckenXName), new NamedContentModelEntity(RegenueberlaufbeckenXName), new NamedContentModelEntity(BodenfilterbeckenXName), new NamedContentModelEntity(VersickerungsanlageXName)));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Speicherbauwerktyp, (Regenrueckhaltebecken? | Regenueberlaufbecken? | Bodenfilterbecken? | Versickerungsanlage?))
        /// </para>
        /// </summary>
        public ErgSpeicherbauwerkType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (Speicherbauwerktyp, (Regenrueckhaltebecken? | Regenueberlaufbecken? | Bodenfilterbecken? | Versickerungsanlage?))
        /// </para>
        /// </summary>
        public virtual decimal Speicherbauwerktyp {
            get {
                XElement x = this.GetElement(SpeicherbauwerktypXName);
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                this.SetElementWithValidation(SpeicherbauwerktypXName, value, "Speicherbauwerktyp", global::www.bfr.abwasser.de.SpeicherbauwerkTypType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (Speicherbauwerktyp, (Regenrueckhaltebecken? | Regenueberlaufbecken? | Bodenfilterbecken? | Versickerungsanlage?))
        /// </para>
        /// </summary>
        public virtual ErgRRBType Regenrueckhaltebecken {
            get {
                XElement x = this.GetElement(RegenrueckhaltebeckenXName);
                return ((ErgRRBType)(x));
            }
            set {
                this.SetElement(RegenrueckhaltebeckenXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (Speicherbauwerktyp, (Regenrueckhaltebecken? | Regenueberlaufbecken? | Bodenfilterbecken? | Versickerungsanlage?))
        /// </para>
        /// </summary>
        public virtual ErgRUEBType Regenueberlaufbecken {
            get {
                XElement x = this.GetElement(RegenueberlaufbeckenXName);
                return ((ErgRUEBType)(x));
            }
            set {
                this.SetElement(RegenueberlaufbeckenXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (Speicherbauwerktyp, (Regenrueckhaltebecken? | Regenueberlaufbecken? | Bodenfilterbecken? | Versickerungsanlage?))
        /// </para>
        /// </summary>
        public virtual ErgBFBType Bodenfilterbecken {
            get {
                XElement x = this.GetElement(BodenfilterbeckenXName);
                return ((ErgBFBType)(x));
            }
            set {
                this.SetElement(BodenfilterbeckenXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (Speicherbauwerktyp, (Regenrueckhaltebecken? | Regenueberlaufbecken? | Bodenfilterbecken? | Versickerungsanlage?))
        /// </para>
        /// </summary>
        public virtual ErgVAType Versickerungsanlage {
            get {
                XElement x = this.GetElement(VersickerungsanlageXName);
                return ((ErgVAType)(x));
            }
            set {
                this.SetElement(VersickerungsanlageXName, value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ErgSpeicherbauwerkType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(SpeicherbauwerktypXName, typeof(decimal));
            localElementDictionary.Add(RegenrueckhaltebeckenXName, typeof(ErgRRBType));
            localElementDictionary.Add(RegenueberlaufbeckenXName, typeof(ErgRUEBType));
            localElementDictionary.Add(BodenfilterbeckenXName, typeof(ErgBFBType));
            localElementDictionary.Add(VersickerungsanlageXName, typeof(ErgVAType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (maxUeberlauf?, AnzahlUeberlaeufe?, KalendertageUeberlauf?, Ueberlaufdauer?, Ueberlaufvolumen?, Ueberlaufhaeufigkeit?)
    /// </para>
    /// </summary>
    public partial class ErgRRBType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName maxUeberlaufXName = System.Xml.Linq.XName.Get("maxUeberlauf", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName AnzahlUeberlaeufeXName = System.Xml.Linq.XName.Get("AnzahlUeberlaeufe", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName KalendertageUeberlaufXName = System.Xml.Linq.XName.Get("KalendertageUeberlauf", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName UeberlaufdauerXName = System.Xml.Linq.XName.Get("Ueberlaufdauer", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName UeberlaufvolumenXName = System.Xml.Linq.XName.Get("Ueberlaufvolumen", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName UeberlaufhaeufigkeitXName = System.Xml.Linq.XName.Get("Ueberlaufhaeufigkeit", "http://www.bfr-abwasser.de");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("ErgRRBType", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator ErgRRBType(XElement xe) { return XTypedServices.ToXTypedElement<ErgRRBType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static ErgRRBType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(maxUeberlaufXName), new NamedContentModelEntity(AnzahlUeberlaeufeXName), new NamedContentModelEntity(KalendertageUeberlaufXName), new NamedContentModelEntity(UeberlaufdauerXName), new NamedContentModelEntity(UeberlaufvolumenXName), new NamedContentModelEntity(UeberlaufhaeufigkeitXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (maxUeberlauf?, AnzahlUeberlaeufe?, KalendertageUeberlauf?, Ueberlaufdauer?, Ueberlaufvolumen?, Ueberlaufhaeufigkeit?)
        /// </para>
        /// </summary>
        public ErgRRBType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (maxUeberlauf?, AnzahlUeberlaeufe?, KalendertageUeberlauf?, Ueberlaufdauer?, Ueberlaufvolumen?, Ueberlaufhaeufigkeit?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? maxUeberlauf {
            get {
                XElement x = this.GetElement(maxUeberlaufXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(maxUeberlaufXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                }
                else {
                    this.SetElementWithValidation(maxUeberlaufXName, value, "maxUeberlauf", maxUeberlaufLocalType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (maxUeberlauf?, AnzahlUeberlaeufe?, KalendertageUeberlauf?, Ueberlaufdauer?, Ueberlaufvolumen?, Ueberlaufhaeufigkeit?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? AnzahlUeberlaeufe {
            get {
                XElement x = this.GetElement(AnzahlUeberlaeufeXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(AnzahlUeberlaeufeXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                }
                else {
                    this.SetElementWithValidation(AnzahlUeberlaeufeXName, value, "AnzahlUeberlaeufe", AnzahlUeberlaeufeLocalType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (maxUeberlauf?, AnzahlUeberlaeufe?, KalendertageUeberlauf?, Ueberlaufdauer?, Ueberlaufvolumen?, Ueberlaufhaeufigkeit?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? KalendertageUeberlauf {
            get {
                XElement x = this.GetElement(KalendertageUeberlaufXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(KalendertageUeberlaufXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                }
                else {
                    this.SetElementWithValidation(KalendertageUeberlaufXName, value, "KalendertageUeberlauf", KalendertageUeberlaufLocalType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (maxUeberlauf?, AnzahlUeberlaeufe?, KalendertageUeberlauf?, Ueberlaufdauer?, Ueberlaufvolumen?, Ueberlaufhaeufigkeit?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? Ueberlaufdauer {
            get {
                XElement x = this.GetElement(UeberlaufdauerXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(UeberlaufdauerXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                }
                else {
                    this.SetElementWithValidation(UeberlaufdauerXName, value, "Ueberlaufdauer", UeberlaufdauerLocalType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (maxUeberlauf?, AnzahlUeberlaeufe?, KalendertageUeberlauf?, Ueberlaufdauer?, Ueberlaufvolumen?, Ueberlaufhaeufigkeit?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? Ueberlaufvolumen {
            get {
                XElement x = this.GetElement(UeberlaufvolumenXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(UeberlaufvolumenXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                }
                else {
                    this.SetElementWithValidation(UeberlaufvolumenXName, value, "Ueberlaufvolumen", UeberlaufvolumenLocalType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (maxUeberlauf?, AnzahlUeberlaeufe?, KalendertageUeberlauf?, Ueberlaufdauer?, Ueberlaufvolumen?, Ueberlaufhaeufigkeit?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? Ueberlaufhaeufigkeit {
            get {
                XElement x = this.GetElement(UeberlaufhaeufigkeitXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(UeberlaufhaeufigkeitXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                }
                else {
                    this.SetElementWithValidation(UeberlaufhaeufigkeitXName, value, "Ueberlaufhaeufigkeit", UeberlaufhaeufigkeitLocalType.TypeDefinition);
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ErgRRBType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(maxUeberlaufXName, typeof(decimal));
            localElementDictionary.Add(AnzahlUeberlaeufeXName, typeof(decimal));
            localElementDictionary.Add(KalendertageUeberlaufXName, typeof(decimal));
            localElementDictionary.Add(UeberlaufdauerXName, typeof(decimal));
            localElementDictionary.Add(UeberlaufvolumenXName, typeof(decimal));
            localElementDictionary.Add(UeberlaufhaeufigkeitXName, typeof(decimal));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        private class maxUeberlaufLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(3200)), null, 3, 0, 100000m, null, 0, null, null, 0, null, 8, XmlSchemaWhiteSpace.Collapse));
            
            private maxUeberlaufLocalType() {
            }
        }
        
        private class AnzahlUeberlaeufeLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(1024)), null, 0, 0, null, null, 0, null, null, 0, null, 3, XmlSchemaWhiteSpace.Collapse));
            
            private AnzahlUeberlaeufeLocalType() {
            }
        }
        
        private class KalendertageUeberlaufLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(3200)), null, 1, 0, 1000m, null, 0, null, null, 0, null, 4, XmlSchemaWhiteSpace.Collapse));
            
            private KalendertageUeberlaufLocalType() {
            }
        }
        
        private class UeberlaufdauerLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(3200)), null, 2, 0, 10000m, null, 0, null, null, 0, null, 6, XmlSchemaWhiteSpace.Collapse));
            
            private UeberlaufdauerLocalType() {
            }
        }
        
        private class UeberlaufvolumenLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(3200)), null, 3, 0, 100000000m, null, 0, null, null, 0, null, 11, XmlSchemaWhiteSpace.Collapse));
            
            private UeberlaufvolumenLocalType() {
            }
        }
        
        private class UeberlaufhaeufigkeitLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(3200)), null, 3, 0, 1000m, null, 0, null, null, 0, null, 6, XmlSchemaWhiteSpace.Collapse));
            
            private UeberlaufhaeufigkeitLocalType() {
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (maxUeberlauf?, AnzahlUeberlaeufe?, KalendertageUeberlauf?, Ueberlaufdauer?, Ueberlaufvolumen?, Entlastungsrate?)
    /// </para>
    /// </summary>
    public partial class ErgRUEBType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName maxUeberlaufXName = System.Xml.Linq.XName.Get("maxUeberlauf", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName AnzahlUeberlaeufeXName = System.Xml.Linq.XName.Get("AnzahlUeberlaeufe", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName KalendertageUeberlaufXName = System.Xml.Linq.XName.Get("KalendertageUeberlauf", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName UeberlaufdauerXName = System.Xml.Linq.XName.Get("Ueberlaufdauer", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName UeberlaufvolumenXName = System.Xml.Linq.XName.Get("Ueberlaufvolumen", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName EntlastungsrateXName = System.Xml.Linq.XName.Get("Entlastungsrate", "http://www.bfr-abwasser.de");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("ErgRUEBType", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator ErgRUEBType(XElement xe) { return XTypedServices.ToXTypedElement<ErgRUEBType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static ErgRUEBType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(maxUeberlaufXName), new NamedContentModelEntity(AnzahlUeberlaeufeXName), new NamedContentModelEntity(KalendertageUeberlaufXName), new NamedContentModelEntity(UeberlaufdauerXName), new NamedContentModelEntity(UeberlaufvolumenXName), new NamedContentModelEntity(EntlastungsrateXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (maxUeberlauf?, AnzahlUeberlaeufe?, KalendertageUeberlauf?, Ueberlaufdauer?, Ueberlaufvolumen?, Entlastungsrate?)
        /// </para>
        /// </summary>
        public ErgRUEBType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (maxUeberlauf?, AnzahlUeberlaeufe?, KalendertageUeberlauf?, Ueberlaufdauer?, Ueberlaufvolumen?, Entlastungsrate?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? maxUeberlauf {
            get {
                XElement x = this.GetElement(maxUeberlaufXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(maxUeberlaufXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                }
                else {
                    this.SetElementWithValidation(maxUeberlaufXName, value, "maxUeberlauf", maxUeberlaufLocalType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (maxUeberlauf?, AnzahlUeberlaeufe?, KalendertageUeberlauf?, Ueberlaufdauer?, Ueberlaufvolumen?, Entlastungsrate?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? AnzahlUeberlaeufe {
            get {
                XElement x = this.GetElement(AnzahlUeberlaeufeXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(AnzahlUeberlaeufeXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                }
                else {
                    this.SetElementWithValidation(AnzahlUeberlaeufeXName, value, "AnzahlUeberlaeufe", AnzahlUeberlaeufeLocalType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (maxUeberlauf?, AnzahlUeberlaeufe?, KalendertageUeberlauf?, Ueberlaufdauer?, Ueberlaufvolumen?, Entlastungsrate?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? KalendertageUeberlauf {
            get {
                XElement x = this.GetElement(KalendertageUeberlaufXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(KalendertageUeberlaufXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                }
                else {
                    this.SetElementWithValidation(KalendertageUeberlaufXName, value, "KalendertageUeberlauf", KalendertageUeberlaufLocalType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (maxUeberlauf?, AnzahlUeberlaeufe?, KalendertageUeberlauf?, Ueberlaufdauer?, Ueberlaufvolumen?, Entlastungsrate?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? Ueberlaufdauer {
            get {
                XElement x = this.GetElement(UeberlaufdauerXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(UeberlaufdauerXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                }
                else {
                    this.SetElementWithValidation(UeberlaufdauerXName, value, "Ueberlaufdauer", UeberlaufdauerLocalType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (maxUeberlauf?, AnzahlUeberlaeufe?, KalendertageUeberlauf?, Ueberlaufdauer?, Ueberlaufvolumen?, Entlastungsrate?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? Ueberlaufvolumen {
            get {
                XElement x = this.GetElement(UeberlaufvolumenXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(UeberlaufvolumenXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                }
                else {
                    this.SetElementWithValidation(UeberlaufvolumenXName, value, "Ueberlaufvolumen", UeberlaufvolumenLocalType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (maxUeberlauf?, AnzahlUeberlaeufe?, KalendertageUeberlauf?, Ueberlaufdauer?, Ueberlaufvolumen?, Entlastungsrate?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? Entlastungsrate {
            get {
                XElement x = this.GetElement(EntlastungsrateXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(EntlastungsrateXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                }
                else {
                    this.SetElementWithValidation(EntlastungsrateXName, value, "Entlastungsrate", EntlastungsrateLocalType.TypeDefinition);
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ErgRUEBType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(maxUeberlaufXName, typeof(decimal));
            localElementDictionary.Add(AnzahlUeberlaeufeXName, typeof(decimal));
            localElementDictionary.Add(KalendertageUeberlaufXName, typeof(decimal));
            localElementDictionary.Add(UeberlaufdauerXName, typeof(decimal));
            localElementDictionary.Add(UeberlaufvolumenXName, typeof(decimal));
            localElementDictionary.Add(EntlastungsrateXName, typeof(decimal));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        private class maxUeberlaufLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(3200)), null, 3, 0, 100000m, null, 0, null, null, 0, null, 8, XmlSchemaWhiteSpace.Collapse));
            
            private maxUeberlaufLocalType() {
            }
        }
        
        private class AnzahlUeberlaeufeLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(1024)), null, 0, 0, null, null, 0, null, null, 0, null, 3, XmlSchemaWhiteSpace.Collapse));
            
            private AnzahlUeberlaeufeLocalType() {
            }
        }
        
        private class KalendertageUeberlaufLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(3200)), null, 1, 0, 1000m, null, 0, null, null, 0, null, 4, XmlSchemaWhiteSpace.Collapse));
            
            private KalendertageUeberlaufLocalType() {
            }
        }
        
        private class UeberlaufdauerLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(3200)), null, 2, 0, 10000m, null, 0, null, null, 0, null, 6, XmlSchemaWhiteSpace.Collapse));
            
            private UeberlaufdauerLocalType() {
            }
        }
        
        private class UeberlaufvolumenLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(3200)), null, 3, 0, 100000000m, null, 0, null, null, 0, null, 11, XmlSchemaWhiteSpace.Collapse));
            
            private UeberlaufvolumenLocalType() {
            }
        }
        
        private class EntlastungsrateLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(3200)), null, 2, 0, 1000m, null, 0, null, null, 0, null, 5, XmlSchemaWhiteSpace.Collapse));
            
            private EntlastungsrateLocalType() {
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (maxUeberlauf?, AnzahlUeberlaeufe?, KalendertageUeberlauf?, Uberlaufdauer?, Ueberlaufvolumen?, Stapelhoehe?, hydraulWirkungsgrad?)
    /// </para>
    /// </summary>
    public partial class ErgBFBType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName maxUeberlaufXName = System.Xml.Linq.XName.Get("maxUeberlauf", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName AnzahlUeberlaeufeXName = System.Xml.Linq.XName.Get("AnzahlUeberlaeufe", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName KalendertageUeberlaufXName = System.Xml.Linq.XName.Get("KalendertageUeberlauf", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName UberlaufdauerXName = System.Xml.Linq.XName.Get("Uberlaufdauer", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName UeberlaufvolumenXName = System.Xml.Linq.XName.Get("Ueberlaufvolumen", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName StapelhoeheXName = System.Xml.Linq.XName.Get("Stapelhoehe", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName hydraulWirkungsgradXName = System.Xml.Linq.XName.Get("hydraulWirkungsgrad", "http://www.bfr-abwasser.de");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("ErgBFBType", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator ErgBFBType(XElement xe) { return XTypedServices.ToXTypedElement<ErgBFBType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static ErgBFBType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(maxUeberlaufXName), new NamedContentModelEntity(AnzahlUeberlaeufeXName), new NamedContentModelEntity(KalendertageUeberlaufXName), new NamedContentModelEntity(UberlaufdauerXName), new NamedContentModelEntity(UeberlaufvolumenXName), new NamedContentModelEntity(StapelhoeheXName), new NamedContentModelEntity(hydraulWirkungsgradXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (maxUeberlauf?, AnzahlUeberlaeufe?, KalendertageUeberlauf?, Uberlaufdauer?, Ueberlaufvolumen?, Stapelhoehe?, hydraulWirkungsgrad?)
        /// </para>
        /// </summary>
        public ErgBFBType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (maxUeberlauf?, AnzahlUeberlaeufe?, KalendertageUeberlauf?, Uberlaufdauer?, Ueberlaufvolumen?, Stapelhoehe?, hydraulWirkungsgrad?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? maxUeberlauf {
            get {
                XElement x = this.GetElement(maxUeberlaufXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(maxUeberlaufXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                }
                else {
                    this.SetElementWithValidation(maxUeberlaufXName, value, "maxUeberlauf", maxUeberlaufLocalType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (maxUeberlauf?, AnzahlUeberlaeufe?, KalendertageUeberlauf?, Uberlaufdauer?, Ueberlaufvolumen?, Stapelhoehe?, hydraulWirkungsgrad?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? AnzahlUeberlaeufe {
            get {
                XElement x = this.GetElement(AnzahlUeberlaeufeXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(AnzahlUeberlaeufeXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                }
                else {
                    this.SetElementWithValidation(AnzahlUeberlaeufeXName, value, "AnzahlUeberlaeufe", AnzahlUeberlaeufeLocalType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (maxUeberlauf?, AnzahlUeberlaeufe?, KalendertageUeberlauf?, Uberlaufdauer?, Ueberlaufvolumen?, Stapelhoehe?, hydraulWirkungsgrad?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? KalendertageUeberlauf {
            get {
                XElement x = this.GetElement(KalendertageUeberlaufXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(KalendertageUeberlaufXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                }
                else {
                    this.SetElementWithValidation(KalendertageUeberlaufXName, value, "KalendertageUeberlauf", KalendertageUeberlaufLocalType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (maxUeberlauf?, AnzahlUeberlaeufe?, KalendertageUeberlauf?, Uberlaufdauer?, Ueberlaufvolumen?, Stapelhoehe?, hydraulWirkungsgrad?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? Uberlaufdauer {
            get {
                XElement x = this.GetElement(UberlaufdauerXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(UberlaufdauerXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                }
                else {
                    this.SetElementWithValidation(UberlaufdauerXName, value, "Uberlaufdauer", UberlaufdauerLocalType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (maxUeberlauf?, AnzahlUeberlaeufe?, KalendertageUeberlauf?, Uberlaufdauer?, Ueberlaufvolumen?, Stapelhoehe?, hydraulWirkungsgrad?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? Ueberlaufvolumen {
            get {
                XElement x = this.GetElement(UeberlaufvolumenXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(UeberlaufvolumenXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                }
                else {
                    this.SetElementWithValidation(UeberlaufvolumenXName, value, "Ueberlaufvolumen", UeberlaufvolumenLocalType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (maxUeberlauf?, AnzahlUeberlaeufe?, KalendertageUeberlauf?, Uberlaufdauer?, Ueberlaufvolumen?, Stapelhoehe?, hydraulWirkungsgrad?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? Stapelhoehe {
            get {
                XElement x = this.GetElement(StapelhoeheXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(StapelhoeheXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                }
                else {
                    this.SetElementWithValidation(StapelhoeheXName, value, "Stapelhoehe", StapelhoeheLocalType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (maxUeberlauf?, AnzahlUeberlaeufe?, KalendertageUeberlauf?, Uberlaufdauer?, Ueberlaufvolumen?, Stapelhoehe?, hydraulWirkungsgrad?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? hydraulWirkungsgrad {
            get {
                XElement x = this.GetElement(hydraulWirkungsgradXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(hydraulWirkungsgradXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                }
                else {
                    this.SetElementWithValidation(hydraulWirkungsgradXName, value, "hydraulWirkungsgrad", hydraulWirkungsgradLocalType.TypeDefinition);
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ErgBFBType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(maxUeberlaufXName, typeof(decimal));
            localElementDictionary.Add(AnzahlUeberlaeufeXName, typeof(decimal));
            localElementDictionary.Add(KalendertageUeberlaufXName, typeof(decimal));
            localElementDictionary.Add(UberlaufdauerXName, typeof(decimal));
            localElementDictionary.Add(UeberlaufvolumenXName, typeof(decimal));
            localElementDictionary.Add(StapelhoeheXName, typeof(decimal));
            localElementDictionary.Add(hydraulWirkungsgradXName, typeof(decimal));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        private class maxUeberlaufLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(3200)), null, 3, 0, 100000m, null, 0, null, null, 0, null, 8, XmlSchemaWhiteSpace.Collapse));
            
            private maxUeberlaufLocalType() {
            }
        }
        
        private class AnzahlUeberlaeufeLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(1024)), null, 0, 0, null, null, 0, null, null, 0, null, 3, XmlSchemaWhiteSpace.Collapse));
            
            private AnzahlUeberlaeufeLocalType() {
            }
        }
        
        private class KalendertageUeberlaufLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(3200)), null, 1, 0, 1000m, null, 0, null, null, 0, null, 4, XmlSchemaWhiteSpace.Collapse));
            
            private KalendertageUeberlaufLocalType() {
            }
        }
        
        private class UberlaufdauerLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(3200)), null, 2, 0, 10000m, null, 0, null, null, 0, null, 6, XmlSchemaWhiteSpace.Collapse));
            
            private UberlaufdauerLocalType() {
            }
        }
        
        private class UeberlaufvolumenLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(3200)), null, 3, 0, 100000000m, null, 0, null, null, 0, null, 11, XmlSchemaWhiteSpace.Collapse));
            
            private UeberlaufvolumenLocalType() {
            }
        }
        
        private class StapelhoeheLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(3200)), null, 2, 0, 1000m, null, 0, null, null, 0, null, 5, XmlSchemaWhiteSpace.Collapse));
            
            private StapelhoeheLocalType() {
            }
        }
        
        private class hydraulWirkungsgradLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(3200)), null, 2, 0, 1000m, null, 0, null, null, 0, null, 5, XmlSchemaWhiteSpace.Collapse));
            
            private hydraulWirkungsgradLocalType() {
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (maxUeberlauf?, Ueberlaufhaeufigkeit?, Ueberlaufvolumen?, maxEinstaudauer?)
    /// </para>
    /// </summary>
    public partial class ErgVAType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName maxUeberlaufXName = System.Xml.Linq.XName.Get("maxUeberlauf", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName UeberlaufhaeufigkeitXName = System.Xml.Linq.XName.Get("Ueberlaufhaeufigkeit", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName UeberlaufvolumenXName = System.Xml.Linq.XName.Get("Ueberlaufvolumen", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName maxEinstaudauerXName = System.Xml.Linq.XName.Get("maxEinstaudauer", "http://www.bfr-abwasser.de");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("ErgVAType", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator ErgVAType(XElement xe) { return XTypedServices.ToXTypedElement<ErgVAType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static ErgVAType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(maxUeberlaufXName), new NamedContentModelEntity(UeberlaufhaeufigkeitXName), new NamedContentModelEntity(UeberlaufvolumenXName), new NamedContentModelEntity(maxEinstaudauerXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (maxUeberlauf?, Ueberlaufhaeufigkeit?, Ueberlaufvolumen?, maxEinstaudauer?)
        /// </para>
        /// </summary>
        public ErgVAType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (maxUeberlauf?, Ueberlaufhaeufigkeit?, Ueberlaufvolumen?, maxEinstaudauer?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? maxUeberlauf {
            get {
                XElement x = this.GetElement(maxUeberlaufXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(maxUeberlaufXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                }
                else {
                    this.SetElementWithValidation(maxUeberlaufXName, value, "maxUeberlauf", maxUeberlaufLocalType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (maxUeberlauf?, Ueberlaufhaeufigkeit?, Ueberlaufvolumen?, maxEinstaudauer?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? Ueberlaufhaeufigkeit {
            get {
                XElement x = this.GetElement(UeberlaufhaeufigkeitXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(UeberlaufhaeufigkeitXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                }
                else {
                    this.SetElementWithValidation(UeberlaufhaeufigkeitXName, value, "Ueberlaufhaeufigkeit", UeberlaufhaeufigkeitLocalType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (maxUeberlauf?, Ueberlaufhaeufigkeit?, Ueberlaufvolumen?, maxEinstaudauer?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? Ueberlaufvolumen {
            get {
                XElement x = this.GetElement(UeberlaufvolumenXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(UeberlaufvolumenXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                }
                else {
                    this.SetElementWithValidation(UeberlaufvolumenXName, value, "Ueberlaufvolumen", UeberlaufvolumenLocalType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (maxUeberlauf?, Ueberlaufhaeufigkeit?, Ueberlaufvolumen?, maxEinstaudauer?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? maxEinstaudauer {
            get {
                XElement x = this.GetElement(maxEinstaudauerXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(maxEinstaudauerXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                }
                else {
                    this.SetElementWithValidation(maxEinstaudauerXName, value, "maxEinstaudauer", maxEinstaudauerLocalType.TypeDefinition);
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ErgVAType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(maxUeberlaufXName, typeof(decimal));
            localElementDictionary.Add(UeberlaufhaeufigkeitXName, typeof(decimal));
            localElementDictionary.Add(UeberlaufvolumenXName, typeof(decimal));
            localElementDictionary.Add(maxEinstaudauerXName, typeof(decimal));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        private class maxUeberlaufLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(3200)), null, 3, 0, 100000m, null, 0, null, null, 0, null, 8, XmlSchemaWhiteSpace.Collapse));
            
            private maxUeberlaufLocalType() {
            }
        }
        
        private class UeberlaufhaeufigkeitLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(3200)), null, 3, 0, 1000m, null, 0, null, null, 0, null, 6, XmlSchemaWhiteSpace.Collapse));
            
            private UeberlaufhaeufigkeitLocalType() {
            }
        }
        
        private class UeberlaufvolumenLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(3200)), null, 3, 0, 100000000m, null, 0, null, null, 0, null, 11, XmlSchemaWhiteSpace.Collapse));
            
            private UeberlaufvolumenLocalType() {
            }
        }
        
        private class maxEinstaudauerLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(3200)), null, 2, 0, 10000m, null, 0, null, null, 0, null, 6, XmlSchemaWhiteSpace.Collapse));
            
            private maxEinstaudauerLocalType() {
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (maxQAuslass?, VolumenAuslass?)
    /// </para>
    /// </summary>
    public partial class ErgGSAuslassType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName maxQAuslassXName = System.Xml.Linq.XName.Get("maxQAuslass", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName VolumenAuslassXName = System.Xml.Linq.XName.Get("VolumenAuslass", "http://www.bfr-abwasser.de");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("ErgGSAuslassType", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator ErgGSAuslassType(XElement xe) { return XTypedServices.ToXTypedElement<ErgGSAuslassType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static ErgGSAuslassType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(maxQAuslassXName), new NamedContentModelEntity(VolumenAuslassXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (maxQAuslass?, VolumenAuslass?)
        /// </para>
        /// </summary>
        public ErgGSAuslassType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (maxQAuslass?, VolumenAuslass?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? maxQAuslass {
            get {
                XElement x = this.GetElement(maxQAuslassXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(maxQAuslassXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                }
                else {
                    this.SetElementWithValidation(maxQAuslassXName, value, "maxQAuslass", maxQAuslassLocalType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (maxQAuslass?, VolumenAuslass?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? VolumenAuslass {
            get {
                XElement x = this.GetElement(VolumenAuslassXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(VolumenAuslassXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                }
                else {
                    this.SetElementWithValidation(VolumenAuslassXName, value, "VolumenAuslass", VolumenAuslassLocalType.TypeDefinition);
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ErgGSAuslassType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(maxQAuslassXName, typeof(decimal));
            localElementDictionary.Add(VolumenAuslassXName, typeof(decimal));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        private class maxQAuslassLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(3200)), null, 3, 0, 10000m, null, 0, null, null, 0, null, 7, XmlSchemaWhiteSpace.Collapse));
            
            private maxQAuslassLocalType() {
            }
        }
        
        private class VolumenAuslassLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(3200)), null, 3, 0, 100000000m, null, 0, null, null, 0, null, 11, XmlSchemaWhiteSpace.Collapse));
            
            private VolumenAuslassLocalType() {
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (maxQAuslass?, VolumenAuslass?, HaeufigkeitAuslass?)
    /// </para>
    /// </summary>
    public partial class ErgFreiAuslassType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName maxQAuslassXName = System.Xml.Linq.XName.Get("maxQAuslass", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName VolumenAuslassXName = System.Xml.Linq.XName.Get("VolumenAuslass", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName HaeufigkeitAuslassXName = System.Xml.Linq.XName.Get("HaeufigkeitAuslass", "http://www.bfr-abwasser.de");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("ErgFreiAuslassType", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator ErgFreiAuslassType(XElement xe) { return XTypedServices.ToXTypedElement<ErgFreiAuslassType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static ErgFreiAuslassType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(maxQAuslassXName), new NamedContentModelEntity(VolumenAuslassXName), new NamedContentModelEntity(HaeufigkeitAuslassXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (maxQAuslass?, VolumenAuslass?, HaeufigkeitAuslass?)
        /// </para>
        /// </summary>
        public ErgFreiAuslassType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (maxQAuslass?, VolumenAuslass?, HaeufigkeitAuslass?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? maxQAuslass {
            get {
                XElement x = this.GetElement(maxQAuslassXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(maxQAuslassXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                }
                else {
                    this.SetElementWithValidation(maxQAuslassXName, value, "maxQAuslass", maxQAuslassLocalType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (maxQAuslass?, VolumenAuslass?, HaeufigkeitAuslass?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? VolumenAuslass {
            get {
                XElement x = this.GetElement(VolumenAuslassXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(VolumenAuslassXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                }
                else {
                    this.SetElementWithValidation(VolumenAuslassXName, value, "VolumenAuslass", VolumenAuslassLocalType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (maxQAuslass?, VolumenAuslass?, HaeufigkeitAuslass?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? HaeufigkeitAuslass {
            get {
                XElement x = this.GetElement(HaeufigkeitAuslassXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(HaeufigkeitAuslassXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                }
                else {
                    this.SetElementWithValidation(HaeufigkeitAuslassXName, value, "HaeufigkeitAuslass", HaeufigkeitAuslassLocalType.TypeDefinition);
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ErgFreiAuslassType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(maxQAuslassXName, typeof(decimal));
            localElementDictionary.Add(VolumenAuslassXName, typeof(decimal));
            localElementDictionary.Add(HaeufigkeitAuslassXName, typeof(decimal));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        private class maxQAuslassLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(3200)), null, 3, 0, 10000m, null, 0, null, null, 0, null, 7, XmlSchemaWhiteSpace.Collapse));
            
            private maxQAuslassLocalType() {
            }
        }
        
        private class VolumenAuslassLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(3200)), null, 3, 0, 100000000m, null, 0, null, null, 0, null, 11, XmlSchemaWhiteSpace.Collapse));
            
            private VolumenAuslassLocalType() {
            }
        }
        
        private class HaeufigkeitAuslassLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(3200)), null, 2, 0, 1000m, null, 0, null, null, 0, null, 5, XmlSchemaWhiteSpace.Collapse));
            
            private HaeufigkeitAuslassLocalType() {
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Niederschlagkennung, Kommentar?, ArtBelastung?, (Blockregen? | Modellregen? | Naturregen? | Niederschlagskontinuum?))
    /// </para>
    /// </summary>
    public partial class NiederschlagType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName NiederschlagkennungXName = System.Xml.Linq.XName.Get("Niederschlagkennung", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName KommentarXName = System.Xml.Linq.XName.Get("Kommentar", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ArtBelastungXName = System.Xml.Linq.XName.Get("ArtBelastung", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName BlockregenXName = System.Xml.Linq.XName.Get("Blockregen", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ModellregenXName = System.Xml.Linq.XName.Get("Modellregen", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName NaturregenXName = System.Xml.Linq.XName.Get("Naturregen", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName NiederschlagskontinuumXName = System.Xml.Linq.XName.Get("Niederschlagskontinuum", "http://www.bfr-abwasser.de");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("NiederschlagType", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator NiederschlagType(XElement xe) { return XTypedServices.ToXTypedElement<NiederschlagType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static NiederschlagType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(NiederschlagkennungXName), new NamedContentModelEntity(KommentarXName), new NamedContentModelEntity(ArtBelastungXName), new ChoiceContentModelEntity(new NamedContentModelEntity(BlockregenXName), new NamedContentModelEntity(ModellregenXName), new NamedContentModelEntity(NaturregenXName), new NamedContentModelEntity(NiederschlagskontinuumXName)));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Niederschlagkennung, Kommentar?, ArtBelastung?, (Blockregen? | Modellregen? | Naturregen? | Niederschlagskontinuum?))
        /// </para>
        /// </summary>
        public NiederschlagType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (Niederschlagkennung, Kommentar?, ArtBelastung?, (Blockregen? | Modellregen? | Naturregen? | Niederschlagskontinuum?))
        /// </para>
        /// </summary>
        public virtual string Niederschlagkennung {
            get {
                XElement x = this.GetElement(NiederschlagkennungXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(NiederschlagkennungXName, value, "Niederschlagkennung", NiederschlagkennungLocalType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Niederschlagkennung, Kommentar?, ArtBelastung?, (Blockregen? | Modellregen? | Naturregen? | Niederschlagskontinuum?))
        /// </para>
        /// </summary>
        public virtual string Kommentar {
            get {
                XElement x = this.GetElement(KommentarXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
            set {
                this.SetElement(KommentarXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Niederschlagkennung, Kommentar?, ArtBelastung?, (Blockregen? | Modellregen? | Naturregen? | Niederschlagskontinuum?))
        /// </para>
        /// </summary>
        public virtual System.Decimal? ArtBelastung {
            get {
                XElement x = this.GetElement(ArtBelastungXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(ArtBelastungXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                }
                else {
                    this.SetElementWithValidation(ArtBelastungXName, value, "ArtBelastung", global::www.bfr.abwasser.de.ArtBelastungType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (Niederschlagkennung, Kommentar?, ArtBelastung?, (Blockregen? | Modellregen? | Naturregen? | Niederschlagskontinuum?))
        /// </para>
        /// </summary>
        public virtual BlockregenType Blockregen {
            get {
                XElement x = this.GetElement(BlockregenXName);
                return ((BlockregenType)(x));
            }
            set {
                this.SetElement(BlockregenXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (Niederschlagkennung, Kommentar?, ArtBelastung?, (Blockregen? | Modellregen? | Naturregen? | Niederschlagskontinuum?))
        /// </para>
        /// </summary>
        public virtual ModellregenType Modellregen {
            get {
                XElement x = this.GetElement(ModellregenXName);
                return ((ModellregenType)(x));
            }
            set {
                this.SetElement(ModellregenXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (Niederschlagkennung, Kommentar?, ArtBelastung?, (Blockregen? | Modellregen? | Naturregen? | Niederschlagskontinuum?))
        /// </para>
        /// </summary>
        public virtual NaturregenType Naturregen {
            get {
                XElement x = this.GetElement(NaturregenXName);
                return ((NaturregenType)(x));
            }
            set {
                this.SetElement(NaturregenXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (Niederschlagkennung, Kommentar?, ArtBelastung?, (Blockregen? | Modellregen? | Naturregen? | Niederschlagskontinuum?))
        /// </para>
        /// </summary>
        public virtual KontinuumType Niederschlagskontinuum {
            get {
                XElement x = this.GetElement(NiederschlagskontinuumXName);
                return ((KontinuumType)(x));
            }
            set {
                this.SetElement(NiederschlagskontinuumXName, value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<NiederschlagType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(NiederschlagkennungXName, typeof(string));
            localElementDictionary.Add(KommentarXName, typeof(string));
            localElementDictionary.Add(ArtBelastungXName, typeof(decimal));
            localElementDictionary.Add(BlockregenXName, typeof(BlockregenType));
            localElementDictionary.Add(ModellregenXName, typeof(ModellregenType));
            localElementDictionary.Add(NaturregenXName, typeof(NaturregenType));
            localElementDictionary.Add(NiederschlagskontinuumXName, typeof(KontinuumType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        private class NiederschlagkennungLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(4)), null, 0, 0, null, null, 4, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
            
            private NiederschlagkennungLocalType() {
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (SummeBlockregen?, DauerBlockregen?, Haeufigkeit?)
    /// </para>
    /// </summary>
    public partial class BlockregenType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName SummeBlockregenXName = System.Xml.Linq.XName.Get("SummeBlockregen", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName DauerBlockregenXName = System.Xml.Linq.XName.Get("DauerBlockregen", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName HaeufigkeitXName = System.Xml.Linq.XName.Get("Haeufigkeit", "http://www.bfr-abwasser.de");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("BlockregenType", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator BlockregenType(XElement xe) { return XTypedServices.ToXTypedElement<BlockregenType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static BlockregenType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(SummeBlockregenXName), new NamedContentModelEntity(DauerBlockregenXName), new NamedContentModelEntity(HaeufigkeitXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (SummeBlockregen?, DauerBlockregen?, Haeufigkeit?)
        /// </para>
        /// </summary>
        public BlockregenType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (SummeBlockregen?, DauerBlockregen?, Haeufigkeit?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? SummeBlockregen {
            get {
                XElement x = this.GetElement(SummeBlockregenXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(SummeBlockregenXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                }
                else {
                    this.SetElementWithValidation(SummeBlockregenXName, value, "SummeBlockregen", SummeBlockregenLocalType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (SummeBlockregen?, DauerBlockregen?, Haeufigkeit?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? DauerBlockregen {
            get {
                XElement x = this.GetElement(DauerBlockregenXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(DauerBlockregenXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                }
                else {
                    this.SetElementWithValidation(DauerBlockregenXName, value, "DauerBlockregen", DauerBlockregenLocalType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (SummeBlockregen?, DauerBlockregen?, Haeufigkeit?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? Haeufigkeit {
            get {
                XElement x = this.GetElement(HaeufigkeitXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(HaeufigkeitXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                }
                else {
                    this.SetElementWithValidation(HaeufigkeitXName, value, "Haeufigkeit", HaeufigkeitLocalType.TypeDefinition);
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<BlockregenType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(SummeBlockregenXName, typeof(decimal));
            localElementDictionary.Add(DauerBlockregenXName, typeof(decimal));
            localElementDictionary.Add(HaeufigkeitXName, typeof(decimal));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        private class SummeBlockregenLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(3200)), null, 2, 0, 1000m, null, 0, null, null, 0, null, 5, XmlSchemaWhiteSpace.Collapse));
            
            private SummeBlockregenLocalType() {
            }
        }
        
        private class DauerBlockregenLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(3200)), null, 2, 0, 1000m, null, 0, null, null, 0, null, 5, XmlSchemaWhiteSpace.Collapse));
            
            private DauerBlockregenLocalType() {
            }
        }
        
        private class HaeufigkeitLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(3200)), null, 3, 0, 1000m, null, 0, null, null, 0, null, 6, XmlSchemaWhiteSpace.Collapse));
            
            private HaeufigkeitLocalType() {
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (ArtModellregen?, SummeModellregen?, DauerModellregen?, Haeufigkeit?)
    /// </para>
    /// </summary>
    public partial class ModellregenType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ArtModellregenXName = System.Xml.Linq.XName.Get("ArtModellregen", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName SummeModellregenXName = System.Xml.Linq.XName.Get("SummeModellregen", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName DauerModellregenXName = System.Xml.Linq.XName.Get("DauerModellregen", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName HaeufigkeitXName = System.Xml.Linq.XName.Get("Haeufigkeit", "http://www.bfr-abwasser.de");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("ModellregenType", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator ModellregenType(XElement xe) { return XTypedServices.ToXTypedElement<ModellregenType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static ModellregenType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(ArtModellregenXName), new NamedContentModelEntity(SummeModellregenXName), new NamedContentModelEntity(DauerModellregenXName), new NamedContentModelEntity(HaeufigkeitXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (ArtModellregen?, SummeModellregen?, DauerModellregen?, Haeufigkeit?)
        /// </para>
        /// </summary>
        public ModellregenType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (ArtModellregen?, SummeModellregen?, DauerModellregen?, Haeufigkeit?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? ArtModellregen {
            get {
                XElement x = this.GetElement(ArtModellregenXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(ArtModellregenXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                }
                else {
                    this.SetElementWithValidation(ArtModellregenXName, value, "ArtModellregen", global::www.bfr.abwasser.de.ModellregentypType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (ArtModellregen?, SummeModellregen?, DauerModellregen?, Haeufigkeit?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? SummeModellregen {
            get {
                XElement x = this.GetElement(SummeModellregenXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(SummeModellregenXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                }
                else {
                    this.SetElementWithValidation(SummeModellregenXName, value, "SummeModellregen", SummeModellregenLocalType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (ArtModellregen?, SummeModellregen?, DauerModellregen?, Haeufigkeit?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? DauerModellregen {
            get {
                XElement x = this.GetElement(DauerModellregenXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(DauerModellregenXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                }
                else {
                    this.SetElementWithValidation(DauerModellregenXName, value, "DauerModellregen", DauerModellregenLocalType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (ArtModellregen?, SummeModellregen?, DauerModellregen?, Haeufigkeit?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? Haeufigkeit {
            get {
                XElement x = this.GetElement(HaeufigkeitXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(HaeufigkeitXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                }
                else {
                    this.SetElementWithValidation(HaeufigkeitXName, value, "Haeufigkeit", HaeufigkeitLocalType.TypeDefinition);
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ModellregenType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(ArtModellregenXName, typeof(decimal));
            localElementDictionary.Add(SummeModellregenXName, typeof(decimal));
            localElementDictionary.Add(DauerModellregenXName, typeof(decimal));
            localElementDictionary.Add(HaeufigkeitXName, typeof(decimal));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        private class SummeModellregenLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(3200)), null, 2, 0, 1000m, null, 0, null, null, 0, null, 5, XmlSchemaWhiteSpace.Collapse));
            
            private SummeModellregenLocalType() {
            }
        }
        
        private class DauerModellregenLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(3200)), null, 2, 0, 1000m, null, 0, null, null, 0, null, 5, XmlSchemaWhiteSpace.Collapse));
            
            private DauerModellregenLocalType() {
            }
        }
        
        private class HaeufigkeitLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(3200)), null, 3, 0, 1000m, null, 0, null, null, 0, null, 6, XmlSchemaWhiteSpace.Collapse));
            
            private HaeufigkeitLocalType() {
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (SummeNaturregen?, Stationsnummer?, Stationsbezeichnung?, Beginn?, Ende?)
    /// </para>
    /// </summary>
    public partial class NaturregenType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName SummeNaturregenXName = System.Xml.Linq.XName.Get("SummeNaturregen", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName StationsnummerXName = System.Xml.Linq.XName.Get("Stationsnummer", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName StationsbezeichnungXName = System.Xml.Linq.XName.Get("Stationsbezeichnung", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName BeginnXName = System.Xml.Linq.XName.Get("Beginn", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName EndeXName = System.Xml.Linq.XName.Get("Ende", "http://www.bfr-abwasser.de");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("NaturregenType", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator NaturregenType(XElement xe) { return XTypedServices.ToXTypedElement<NaturregenType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static NaturregenType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(SummeNaturregenXName), new NamedContentModelEntity(StationsnummerXName), new NamedContentModelEntity(StationsbezeichnungXName), new NamedContentModelEntity(BeginnXName), new NamedContentModelEntity(EndeXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (SummeNaturregen?, Stationsnummer?, Stationsbezeichnung?, Beginn?, Ende?)
        /// </para>
        /// </summary>
        public NaturregenType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (SummeNaturregen?, Stationsnummer?, Stationsbezeichnung?, Beginn?, Ende?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? SummeNaturregen {
            get {
                XElement x = this.GetElement(SummeNaturregenXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(SummeNaturregenXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                }
                else {
                    this.SetElementWithValidation(SummeNaturregenXName, value, "SummeNaturregen", SummeNaturregenLocalType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (SummeNaturregen?, Stationsnummer?, Stationsbezeichnung?, Beginn?, Ende?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? Stationsnummer {
            get {
                XElement x = this.GetElement(StationsnummerXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(StationsnummerXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                }
                else {
                    this.SetElementWithValidation(StationsnummerXName, value, "Stationsnummer", StationsnummerLocalType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (SummeNaturregen?, Stationsnummer?, Stationsbezeichnung?, Beginn?, Ende?)
        /// </para>
        /// </summary>
        public virtual string Stationsbezeichnung {
            get {
                XElement x = this.GetElement(StationsbezeichnungXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(StationsbezeichnungXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
                }
                else {
                    this.SetElementWithValidation(StationsbezeichnungXName, value, "Stationsbezeichnung", StationsbezeichnungLocalType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (SummeNaturregen?, Stationsnummer?, Stationsbezeichnung?, Beginn?, Ende?)
        /// </para>
        /// </summary>
        public virtual System.DateTime? Beginn {
            get {
                XElement x = this.GetElement(BeginnXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<System.DateTime>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date).Datatype);
            }
            set {
                this.SetElement(BeginnXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (SummeNaturregen?, Stationsnummer?, Stationsbezeichnung?, Beginn?, Ende?)
        /// </para>
        /// </summary>
        public virtual System.DateTime? Ende {
            get {
                XElement x = this.GetElement(EndeXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<System.DateTime>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date).Datatype);
            }
            set {
                this.SetElement(EndeXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<NaturregenType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(SummeNaturregenXName, typeof(decimal));
            localElementDictionary.Add(StationsnummerXName, typeof(decimal));
            localElementDictionary.Add(StationsbezeichnungXName, typeof(string));
            localElementDictionary.Add(BeginnXName, typeof(System.DateTime));
            localElementDictionary.Add(EndeXName, typeof(System.DateTime));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        private class SummeNaturregenLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(3200)), null, 2, 0, 1000m, null, 0, null, null, 0, null, 5, XmlSchemaWhiteSpace.Collapse));
            
            private SummeNaturregenLocalType() {
            }
        }
        
        private class StationsnummerLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(1024)), null, 0, 0, null, null, 0, null, null, 0, null, 5, XmlSchemaWhiteSpace.Collapse));
            
            private StationsnummerLocalType() {
            }
        }
        
        private class StationsbezeichnungLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(4)), null, 0, 0, null, null, 100, null, null, 0, null, 0, XmlSchemaWhiteSpace.Collapse));
            
            private StationsbezeichnungLocalType() {
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (ArtKontinuum?, Niederschlagssumme?, Stationsnummer?, Stationsbezeichnung?, Beginn?, Ende?)
    /// </para>
    /// </summary>
    public partial class KontinuumType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ArtKontinuumXName = System.Xml.Linq.XName.Get("ArtKontinuum", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName NiederschlagssummeXName = System.Xml.Linq.XName.Get("Niederschlagssumme", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName StationsnummerXName = System.Xml.Linq.XName.Get("Stationsnummer", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName StationsbezeichnungXName = System.Xml.Linq.XName.Get("Stationsbezeichnung", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName BeginnXName = System.Xml.Linq.XName.Get("Beginn", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName EndeXName = System.Xml.Linq.XName.Get("Ende", "http://www.bfr-abwasser.de");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("KontinuumType", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator KontinuumType(XElement xe) { return XTypedServices.ToXTypedElement<KontinuumType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static KontinuumType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(ArtKontinuumXName), new NamedContentModelEntity(NiederschlagssummeXName), new NamedContentModelEntity(StationsnummerXName), new NamedContentModelEntity(StationsbezeichnungXName), new NamedContentModelEntity(BeginnXName), new NamedContentModelEntity(EndeXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (ArtKontinuum?, Niederschlagssumme?, Stationsnummer?, Stationsbezeichnung?, Beginn?, Ende?)
        /// </para>
        /// </summary>
        public KontinuumType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (ArtKontinuum?, Niederschlagssumme?, Stationsnummer?, Stationsbezeichnung?, Beginn?, Ende?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? ArtKontinuum {
            get {
                XElement x = this.GetElement(ArtKontinuumXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(ArtKontinuumXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                }
                else {
                    this.SetElementWithValidation(ArtKontinuumXName, value, "ArtKontinuum", global::www.bfr.abwasser.de.ArtKontinuumType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (ArtKontinuum?, Niederschlagssumme?, Stationsnummer?, Stationsbezeichnung?, Beginn?, Ende?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? Niederschlagssumme {
            get {
                XElement x = this.GetElement(NiederschlagssummeXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(NiederschlagssummeXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                }
                else {
                    this.SetElementWithValidation(NiederschlagssummeXName, value, "Niederschlagssumme", NiederschlagssummeLocalType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (ArtKontinuum?, Niederschlagssumme?, Stationsnummer?, Stationsbezeichnung?, Beginn?, Ende?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? Stationsnummer {
            get {
                XElement x = this.GetElement(StationsnummerXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(StationsnummerXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                }
                else {
                    this.SetElementWithValidation(StationsnummerXName, value, "Stationsnummer", StationsnummerLocalType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (ArtKontinuum?, Niederschlagssumme?, Stationsnummer?, Stationsbezeichnung?, Beginn?, Ende?)
        /// </para>
        /// </summary>
        public virtual string Stationsbezeichnung {
            get {
                XElement x = this.GetElement(StationsbezeichnungXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(StationsbezeichnungXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
                }
                else {
                    this.SetElementWithValidation(StationsbezeichnungXName, value, "Stationsbezeichnung", StationsbezeichnungLocalType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (ArtKontinuum?, Niederschlagssumme?, Stationsnummer?, Stationsbezeichnung?, Beginn?, Ende?)
        /// </para>
        /// </summary>
        public virtual System.DateTime? Beginn {
            get {
                XElement x = this.GetElement(BeginnXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<System.DateTime>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date).Datatype);
            }
            set {
                this.SetElement(BeginnXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (ArtKontinuum?, Niederschlagssumme?, Stationsnummer?, Stationsbezeichnung?, Beginn?, Ende?)
        /// </para>
        /// </summary>
        public virtual System.DateTime? Ende {
            get {
                XElement x = this.GetElement(EndeXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<System.DateTime>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date).Datatype);
            }
            set {
                this.SetElement(EndeXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<KontinuumType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(ArtKontinuumXName, typeof(decimal));
            localElementDictionary.Add(NiederschlagssummeXName, typeof(decimal));
            localElementDictionary.Add(StationsnummerXName, typeof(decimal));
            localElementDictionary.Add(StationsbezeichnungXName, typeof(string));
            localElementDictionary.Add(BeginnXName, typeof(System.DateTime));
            localElementDictionary.Add(EndeXName, typeof(System.DateTime));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        private class NiederschlagssummeLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(3200)), null, 1, 0, 10000m, null, 0, null, null, 0, null, 5, XmlSchemaWhiteSpace.Collapse));
            
            private NiederschlagssummeLocalType() {
            }
        }
        
        private class StationsnummerLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(1024)), null, 0, 0, null, null, 0, null, null, 0, null, 5, XmlSchemaWhiteSpace.Collapse));
            
            private StationsnummerLocalType() {
            }
        }
        
        private class StationsbezeichnungLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(4)), null, 0, 0, null, null, 100, null, null, 0, null, 0, XmlSchemaWhiteSpace.Collapse));
            
            private StationsbezeichnungLocalType() {
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Trockenwetterkennung, Kommentar?, Wasserverbrauch?, TagesspitzeX?, qrt24?, (SpezFremdwasseranfall? | Fremdwasseranteil?))
    /// </para>
    /// </summary>
    public partial class TrockenwetterType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TrockenwetterkennungXName = System.Xml.Linq.XName.Get("Trockenwetterkennung", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName KommentarXName = System.Xml.Linq.XName.Get("Kommentar", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName WasserverbrauchXName = System.Xml.Linq.XName.Get("Wasserverbrauch", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TagesspitzeXXName = System.Xml.Linq.XName.Get("TagesspitzeX", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName qrt24XName = System.Xml.Linq.XName.Get("qrt24", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName SpezFremdwasseranfallXName = System.Xml.Linq.XName.Get("SpezFremdwasseranfall", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName FremdwasseranteilXName = System.Xml.Linq.XName.Get("Fremdwasseranteil", "http://www.bfr-abwasser.de");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("TrockenwetterType", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator TrockenwetterType(XElement xe) { return XTypedServices.ToXTypedElement<TrockenwetterType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static TrockenwetterType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(TrockenwetterkennungXName), new NamedContentModelEntity(KommentarXName), new NamedContentModelEntity(WasserverbrauchXName), new NamedContentModelEntity(TagesspitzeXXName), new NamedContentModelEntity(qrt24XName), new ChoiceContentModelEntity(new NamedContentModelEntity(SpezFremdwasseranfallXName), new NamedContentModelEntity(FremdwasseranteilXName)));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Trockenwetterkennung, Kommentar?, Wasserverbrauch?, TagesspitzeX?, qrt24?, (SpezFremdwasseranfall? | Fremdwasseranteil?))
        /// </para>
        /// </summary>
        public TrockenwetterType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (Trockenwetterkennung, Kommentar?, Wasserverbrauch?, TagesspitzeX?, qrt24?, (SpezFremdwasseranfall? | Fremdwasseranteil?))
        /// </para>
        /// </summary>
        public virtual string Trockenwetterkennung {
            get {
                XElement x = this.GetElement(TrockenwetterkennungXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(TrockenwetterkennungXName, value, "Trockenwetterkennung", TrockenwetterkennungLocalType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Trockenwetterkennung, Kommentar?, Wasserverbrauch?, TagesspitzeX?, qrt24?, (SpezFremdwasseranfall? | Fremdwasseranteil?))
        /// </para>
        /// </summary>
        public virtual string Kommentar {
            get {
                XElement x = this.GetElement(KommentarXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
            set {
                this.SetElement(KommentarXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Trockenwetterkennung, Kommentar?, Wasserverbrauch?, TagesspitzeX?, qrt24?, (SpezFremdwasseranfall? | Fremdwasseranteil?))
        /// </para>
        /// </summary>
        public virtual System.Decimal? Wasserverbrauch {
            get {
                XElement x = this.GetElement(WasserverbrauchXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(WasserverbrauchXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                }
                else {
                    this.SetElementWithValidation(WasserverbrauchXName, value, "Wasserverbrauch", WasserverbrauchLocalType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Trockenwetterkennung, Kommentar?, Wasserverbrauch?, TagesspitzeX?, qrt24?, (SpezFremdwasseranfall? | Fremdwasseranteil?))
        /// </para>
        /// </summary>
        public virtual System.Decimal? TagesspitzeX {
            get {
                XElement x = this.GetElement(TagesspitzeXXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(TagesspitzeXXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                }
                else {
                    this.SetElementWithValidation(TagesspitzeXXName, value, "TagesspitzeX", TagesspitzeXLocalType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Trockenwetterkennung, Kommentar?, Wasserverbrauch?, TagesspitzeX?, qrt24?, (SpezFremdwasseranfall? | Fremdwasseranteil?))
        /// </para>
        /// </summary>
        public virtual System.Decimal? qrt24 {
            get {
                XElement x = this.GetElement(qrt24XName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(qrt24XName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                }
                else {
                    this.SetElementWithValidation(qrt24XName, value, "qrt24", qrt24LocalType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (Trockenwetterkennung, Kommentar?, Wasserverbrauch?, TagesspitzeX?, qrt24?, (SpezFremdwasseranfall? | Fremdwasseranteil?))
        /// </para>
        /// </summary>
        public virtual System.Decimal? SpezFremdwasseranfall {
            get {
                XElement x = this.GetElement(SpezFremdwasseranfallXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(SpezFremdwasseranfallXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                }
                else {
                    this.SetElementWithValidation(SpezFremdwasseranfallXName, value, "SpezFremdwasseranfall", SpezFremdwasseranfallLocalType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (Trockenwetterkennung, Kommentar?, Wasserverbrauch?, TagesspitzeX?, qrt24?, (SpezFremdwasseranfall? | Fremdwasseranteil?))
        /// </para>
        /// </summary>
        public virtual System.Decimal? Fremdwasseranteil {
            get {
                XElement x = this.GetElement(FremdwasseranteilXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(FremdwasseranteilXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                }
                else {
                    this.SetElementWithValidation(FremdwasseranteilXName, value, "Fremdwasseranteil", FremdwasseranteilLocalType.TypeDefinition);
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<TrockenwetterType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(TrockenwetterkennungXName, typeof(string));
            localElementDictionary.Add(KommentarXName, typeof(string));
            localElementDictionary.Add(WasserverbrauchXName, typeof(decimal));
            localElementDictionary.Add(TagesspitzeXXName, typeof(decimal));
            localElementDictionary.Add(qrt24XName, typeof(decimal));
            localElementDictionary.Add(SpezFremdwasseranfallXName, typeof(decimal));
            localElementDictionary.Add(FremdwasseranteilXName, typeof(decimal));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        private class TrockenwetterkennungLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(4)), null, 0, 0, null, null, 5, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
            
            private TrockenwetterkennungLocalType() {
            }
        }
        
        private class WasserverbrauchLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(3200)), null, 2, 0, 1000m, null, 0, null, null, 0, null, 5, XmlSchemaWhiteSpace.Collapse));
            
            private WasserverbrauchLocalType() {
            }
        }
        
        private class TagesspitzeXLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(3200)), null, 2, 0, 100m, null, 0, null, null, 0, null, 4, XmlSchemaWhiteSpace.Collapse));
            
            private TagesspitzeXLocalType() {
            }
        }
        
        private class qrt24LocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(3200)), null, 3, 0, 100m, null, 0, null, null, 0, null, 5, XmlSchemaWhiteSpace.Collapse));
            
            private qrt24LocalType() {
            }
        }
        
        private class SpezFremdwasseranfallLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(3200)), null, 3, 0, 100m, null, 0, null, null, 0, null, 5, XmlSchemaWhiteSpace.Collapse));
            
            private SpezFremdwasseranfallLocalType() {
            }
        }
        
        private class FremdwasseranteilLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(3200)), null, 2, 0, 10000m, null, 0, null, null, 0, null, 6, XmlSchemaWhiteSpace.Collapse));
            
            private FremdwasseranteilLocalType() {
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Einleiterkollektivkennung, ListeEinzeleinleiter)
    /// </para>
    /// </summary>
    public partial class Einleiterkollektiv : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName EinleiterkollektivkennungXName = System.Xml.Linq.XName.Get("Einleiterkollektivkennung", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ListeEinzeleinleiterXName = System.Xml.Linq.XName.Get("ListeEinzeleinleiter", "http://www.bfr-abwasser.de");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("Einleiterkollektiv", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator Einleiterkollektiv(XElement xe) { return XTypedServices.ToXTypedElement<Einleiterkollektiv>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static Einleiterkollektiv() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(EinleiterkollektivkennungXName), new NamedContentModelEntity(ListeEinzeleinleiterXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Einleiterkollektivkennung, ListeEinzeleinleiter)
        /// </para>
        /// </summary>
        public Einleiterkollektiv() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (Einleiterkollektivkennung, ListeEinzeleinleiter)
        /// </para>
        /// </summary>
        public virtual string Einleiterkollektivkennung {
            get {
                XElement x = this.GetElement(EinleiterkollektivkennungXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(EinleiterkollektivkennungXName, value, "Einleiterkollektivkennung", EinleiterkollektivkennungLocalType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (Einleiterkollektivkennung, ListeEinzeleinleiter)
        /// </para>
        /// </summary>
        public virtual ListeEinzeleinleiterLocalType ListeEinzeleinleiter {
            get {
                XElement x = this.GetElement(ListeEinzeleinleiterXName);
                return ((ListeEinzeleinleiterLocalType)(x));
            }
            set {
                this.SetElement(ListeEinzeleinleiterXName, value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<Einleiterkollektiv>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(EinleiterkollektivkennungXName, typeof(string));
            localElementDictionary.Add(ListeEinzeleinleiterXName, typeof(ListeEinzeleinleiterLocalType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        private class EinleiterkollektivkennungLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(4)), null, 0, 0, null, null, 4, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
            
            private EinleiterkollektivkennungLocalType() {
            }
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Einzeleinleiter+)
        /// </para>
        /// </summary>
        public partial class ListeEinzeleinleiterLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName EinzeleinleiterXName = System.Xml.Linq.XName.Get("Einzeleinleiter", "http://www.bfr-abwasser.de");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XTypedList<EinzeleinleiterType> EinzeleinleiterField;
            
            private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("ListeEinzeleinleiter", "http://www.bfr-abwasser.de");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;
            
		public static explicit operator ListeEinzeleinleiterLocalType(XElement xe) { return XTypedServices.ToXTypedElement<ListeEinzeleinleiterLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static ListeEinzeleinleiterLocalType() {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(EinzeleinleiterXName));
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (Einzeleinleiter+)
            /// </para>
            /// </summary>
            public ListeEinzeleinleiterLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required, repeating
            /// </para>
            /// <para>
            /// Regular expression: (Einzeleinleiter+)
            /// </para>
            /// </summary>
            public virtual IList<EinzeleinleiterType> Einzeleinleiter {
                get {
                    if ((this.EinzeleinleiterField == null)) {
                        this.EinzeleinleiterField = new XTypedList<EinzeleinleiterType>(this, LinqToXsdTypeManager.Instance, EinzeleinleiterXName);
                    }
                    return this.EinzeleinleiterField;
                }
                set {
                    if ((value == null)) {
                        this.EinzeleinleiterField = null;
                    }
                    else {
                        if ((this.EinzeleinleiterField == null)) {
                            this.EinzeleinleiterField = XTypedList<EinzeleinleiterType>.Initialize(this, LinqToXsdTypeManager.Instance, value, EinzeleinleiterXName);
                        }
                        else {
                            XTypedServices.SetList<EinzeleinleiterType>(this.EinzeleinleiterField, value);
                        }
                    }
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            System.Xml.Linq.XName IXMetaData.SchemaName {
                get {
                    return xName;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<ListeEinzeleinleiterLocalType>(this);
            }
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(EinzeleinleiterXName, typeof(EinzeleinleiterType));
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return contentModel;
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Kommentar?, HydraulikObjekt, RegenwasserZufluss?, Trockenwetter?)
    /// </para>
    /// </summary>
    public partial class EinzeleinleiterType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName KommentarXName = System.Xml.Linq.XName.Get("Kommentar", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName HydraulikObjektXName = System.Xml.Linq.XName.Get("HydraulikObjekt", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName RegenwasserZuflussXName = System.Xml.Linq.XName.Get("RegenwasserZufluss", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TrockenwetterXName = System.Xml.Linq.XName.Get("Trockenwetter", "http://www.bfr-abwasser.de");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("EinzeleinleiterType", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator EinzeleinleiterType(XElement xe) { return XTypedServices.ToXTypedElement<EinzeleinleiterType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static EinzeleinleiterType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(KommentarXName), new NamedContentModelEntity(HydraulikObjektXName), new NamedContentModelEntity(RegenwasserZuflussXName), new NamedContentModelEntity(TrockenwetterXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Kommentar?, HydraulikObjekt, RegenwasserZufluss?, Trockenwetter?)
        /// </para>
        /// </summary>
        public EinzeleinleiterType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Kommentar?, HydraulikObjekt, RegenwasserZufluss?, Trockenwetter?)
        /// </para>
        /// </summary>
        public virtual string Kommentar {
            get {
                XElement x = this.GetElement(KommentarXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
            set {
                this.SetElement(KommentarXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (Kommentar?, HydraulikObjekt, RegenwasserZufluss?, Trockenwetter?)
        /// </para>
        /// </summary>
        public virtual HydraulikObjektLocalType HydraulikObjekt {
            get {
                XElement x = this.GetElement(HydraulikObjektXName);
                return ((HydraulikObjektLocalType)(x));
            }
            set {
                this.SetElement(HydraulikObjektXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Kommentar?, HydraulikObjekt, RegenwasserZufluss?, Trockenwetter?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? RegenwasserZufluss {
            get {
                XElement x = this.GetElement(RegenwasserZuflussXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(RegenwasserZuflussXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                }
                else {
                    this.SetElementWithValidation(RegenwasserZuflussXName, value, "RegenwasserZufluss", RegenwasserZuflussLocalType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Kommentar?, HydraulikObjekt, RegenwasserZufluss?, Trockenwetter?)
        /// </para>
        /// </summary>
        public virtual TrwEinleiterType Trockenwetter {
            get {
                XElement x = this.GetElement(TrockenwetterXName);
                return ((TrwEinleiterType)(x));
            }
            set {
                this.SetElement(TrockenwetterXName, value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<EinzeleinleiterType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(KommentarXName, typeof(string));
            localElementDictionary.Add(HydraulikObjektXName, typeof(HydraulikObjektLocalType));
            localElementDictionary.Add(RegenwasserZuflussXName, typeof(decimal));
            localElementDictionary.Add(TrockenwetterXName, typeof(TrwEinleiterType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Objektbezeichnung, HydObjektTyp)
        /// </para>
        /// </summary>
        public partial class HydraulikObjektLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName ObjektbezeichnungXName = System.Xml.Linq.XName.Get("Objektbezeichnung", "http://www.bfr-abwasser.de");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName HydObjektTypXName = System.Xml.Linq.XName.Get("HydObjektTyp", "http://www.bfr-abwasser.de");
            
            private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("HydraulikObjekt", "http://www.bfr-abwasser.de");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;
            
		public static explicit operator HydraulikObjektLocalType(XElement xe) { return XTypedServices.ToXTypedElement<HydraulikObjektLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static HydraulikObjektLocalType() {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(ObjektbezeichnungXName), new NamedContentModelEntity(HydObjektTypXName));
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (Objektbezeichnung, HydObjektTyp)
            /// </para>
            /// </summary>
            public HydraulikObjektLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (Objektbezeichnung, HydObjektTyp)
            /// </para>
            /// </summary>
            public virtual string Objektbezeichnung {
                get {
                    XElement x = this.GetElement(ObjektbezeichnungXName);
                    return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                set {
                    this.SetElementWithValidation(ObjektbezeichnungXName, value, "Objektbezeichnung", ObjektbezeichnungLocalType.TypeDefinition);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (Objektbezeichnung, HydObjektTyp)
            /// </para>
            /// </summary>
            public virtual decimal HydObjektTyp {
                get {
                    XElement x = this.GetElement(HydObjektTypXName);
                    return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                }
                set {
                    this.SetElementWithValidation(HydObjektTypXName, value, "HydObjektTyp", global::www.bfr.abwasser.de.HydraulikObjektTypType.TypeDefinition);
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            System.Xml.Linq.XName IXMetaData.SchemaName {
                get {
                    return xName;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<HydraulikObjektLocalType>(this);
            }
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(ObjektbezeichnungXName, typeof(string));
                localElementDictionary.Add(HydObjektTypXName, typeof(decimal));
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return contentModel;
            }
            
            private class ObjektbezeichnungLocalType {
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(4)), null, 0, 0, null, null, 30, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
                
                private ObjektbezeichnungLocalType() {
                }
            }
        }
        
        private class RegenwasserZuflussLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(3200)), null, 1, 0, 1000m, null, 0, null, null, 0, null, 4, XmlSchemaWhiteSpace.Collapse));
            
            private RegenwasserZuflussLocalType() {
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: ((TrwPauschal? | TrwEinzelwerte?))
    /// </para>
    /// </summary>
    public partial class TrwEinleiterType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TrwPauschalXName = System.Xml.Linq.XName.Get("TrwPauschal", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TrwEinzelwerteXName = System.Xml.Linq.XName.Get("TrwEinzelwerte", "http://www.bfr-abwasser.de");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("TrwEinleiterType", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator TrwEinleiterType(XElement xe) { return XTypedServices.ToXTypedElement<TrwEinleiterType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static TrwEinleiterType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new ChoiceContentModelEntity(new NamedContentModelEntity(TrwPauschalXName), new NamedContentModelEntity(TrwEinzelwerteXName)));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: ((TrwPauschal? | TrwEinzelwerte?))
        /// </para>
        /// </summary>
        public TrwEinleiterType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((TrwPauschal? | TrwEinzelwerte?))
        /// </para>
        /// </summary>
        public virtual TrwPauschalType TrwPauschal {
            get {
                XElement x = this.GetElement(TrwPauschalXName);
                return ((TrwPauschalType)(x));
            }
            set {
                this.SetElement(TrwPauschalXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((TrwPauschal? | TrwEinzelwerte?))
        /// </para>
        /// </summary>
        public virtual TrwEinzelwerteType TrwEinzelwerte {
            get {
                XElement x = this.GetElement(TrwEinzelwerteXName);
                return ((TrwEinzelwerteType)(x));
            }
            set {
                this.SetElement(TrwEinzelwerteXName, value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<TrwEinleiterType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(TrwPauschalXName, typeof(TrwPauschalType));
            localElementDictionary.Add(TrwEinzelwerteXName, typeof(TrwEinzelwerteType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (TrockenwetterZufluss?, TWzTagesspitzeX?)
    /// </para>
    /// </summary>
    public partial class TrwPauschalType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TrockenwetterZuflussXName = System.Xml.Linq.XName.Get("TrockenwetterZufluss", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TWzTagesspitzeXXName = System.Xml.Linq.XName.Get("TWzTagesspitzeX", "http://www.bfr-abwasser.de");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("TrwPauschalType", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator TrwPauschalType(XElement xe) { return XTypedServices.ToXTypedElement<TrwPauschalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static TrwPauschalType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(TrockenwetterZuflussXName), new NamedContentModelEntity(TWzTagesspitzeXXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (TrockenwetterZufluss?, TWzTagesspitzeX?)
        /// </para>
        /// </summary>
        public TrwPauschalType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (TrockenwetterZufluss?, TWzTagesspitzeX?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? TrockenwetterZufluss {
            get {
                XElement x = this.GetElement(TrockenwetterZuflussXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(TrockenwetterZuflussXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                }
                else {
                    this.SetElementWithValidation(TrockenwetterZuflussXName, value, "TrockenwetterZufluss", TrockenwetterZuflussLocalType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (TrockenwetterZufluss?, TWzTagesspitzeX?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? TWzTagesspitzeX {
            get {
                XElement x = this.GetElement(TWzTagesspitzeXXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(TWzTagesspitzeXXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                }
                else {
                    this.SetElementWithValidation(TWzTagesspitzeXXName, value, "TWzTagesspitzeX", TWzTagesspitzeXLocalType.TypeDefinition);
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<TrwPauschalType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(TrockenwetterZuflussXName, typeof(decimal));
            localElementDictionary.Add(TWzTagesspitzeXXName, typeof(decimal));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        private class TrockenwetterZuflussLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(3200)), null, 1, 0, 1000m, null, 0, null, null, 0, null, 4, XmlSchemaWhiteSpace.Collapse));
            
            private TrockenwetterZuflussLocalType() {
            }
        }
        
        private class TWzTagesspitzeXLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(3392)), null, 1, 0, null, 24m, 0, null, 0m, 0, null, 3, XmlSchemaWhiteSpace.Collapse));
            
            private TWzTagesspitzeXLocalType() {
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Qrt24FremdwasserZufluss?, FremdwasserZufluss?, Schmutzwasser?)
    /// </para>
    /// </summary>
    public partial class TrwEinzelwerteType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName Qrt24FremdwasserZuflussXName = System.Xml.Linq.XName.Get("Qrt24FremdwasserZufluss", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName FremdwasserZuflussXName = System.Xml.Linq.XName.Get("FremdwasserZufluss", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName SchmutzwasserXName = System.Xml.Linq.XName.Get("Schmutzwasser", "http://www.bfr-abwasser.de");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("TrwEinzelwerteType", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator TrwEinzelwerteType(XElement xe) { return XTypedServices.ToXTypedElement<TrwEinzelwerteType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static TrwEinzelwerteType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(Qrt24FremdwasserZuflussXName), new NamedContentModelEntity(FremdwasserZuflussXName), new NamedContentModelEntity(SchmutzwasserXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Qrt24FremdwasserZufluss?, FremdwasserZufluss?, Schmutzwasser?)
        /// </para>
        /// </summary>
        public TrwEinzelwerteType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Qrt24FremdwasserZufluss?, FremdwasserZufluss?, Schmutzwasser?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? Qrt24FremdwasserZufluss {
            get {
                XElement x = this.GetElement(Qrt24FremdwasserZuflussXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(Qrt24FremdwasserZuflussXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                }
                else {
                    this.SetElementWithValidation(Qrt24FremdwasserZuflussXName, value, "Qrt24FremdwasserZufluss", Qrt24FremdwasserZuflussLocalType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Qrt24FremdwasserZufluss?, FremdwasserZufluss?, Schmutzwasser?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? FremdwasserZufluss {
            get {
                XElement x = this.GetElement(FremdwasserZuflussXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(FremdwasserZuflussXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                }
                else {
                    this.SetElementWithValidation(FremdwasserZuflussXName, value, "FremdwasserZufluss", FremdwasserZuflussLocalType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Qrt24FremdwasserZufluss?, FremdwasserZufluss?, Schmutzwasser?)
        /// </para>
        /// </summary>
        public virtual SwEinleiterType Schmutzwasser {
            get {
                XElement x = this.GetElement(SchmutzwasserXName);
                return ((SwEinleiterType)(x));
            }
            set {
                this.SetElement(SchmutzwasserXName, value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<TrwEinzelwerteType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(Qrt24FremdwasserZuflussXName, typeof(decimal));
            localElementDictionary.Add(FremdwasserZuflussXName, typeof(decimal));
            localElementDictionary.Add(SchmutzwasserXName, typeof(SwEinleiterType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        private class Qrt24FremdwasserZuflussLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(3200)), null, 1, 0, 1000m, null, 0, null, null, 0, null, 4, XmlSchemaWhiteSpace.Collapse));
            
            private Qrt24FremdwasserZuflussLocalType() {
            }
        }
        
        private class FremdwasserZuflussLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(3200)), null, 1, 0, 1000m, null, 0, null, null, 0, null, 4, XmlSchemaWhiteSpace.Collapse));
            
            private FremdwasserZuflussLocalType() {
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: ((SwPauschal? | SwEinzelwerte?))
    /// </para>
    /// </summary>
    public partial class SwEinleiterType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName SwPauschalXName = System.Xml.Linq.XName.Get("SwPauschal", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName SwEinzelwerteXName = System.Xml.Linq.XName.Get("SwEinzelwerte", "http://www.bfr-abwasser.de");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("SwEinleiterType", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator SwEinleiterType(XElement xe) { return XTypedServices.ToXTypedElement<SwEinleiterType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static SwEinleiterType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new ChoiceContentModelEntity(new NamedContentModelEntity(SwPauschalXName), new NamedContentModelEntity(SwEinzelwerteXName)));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: ((SwPauschal? | SwEinzelwerte?))
        /// </para>
        /// </summary>
        public SwEinleiterType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((SwPauschal? | SwEinzelwerte?))
        /// </para>
        /// </summary>
        public virtual SwPauschalType SwPauschal {
            get {
                XElement x = this.GetElement(SwPauschalXName);
                return ((SwPauschalType)(x));
            }
            set {
                this.SetElement(SwPauschalXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((SwPauschal? | SwEinzelwerte?))
        /// </para>
        /// </summary>
        public virtual SwEinzelwerteType SwEinzelwerte {
            get {
                XElement x = this.GetElement(SwEinzelwerteXName);
                return ((SwEinzelwerteType)(x));
            }
            set {
                this.SetElement(SwEinzelwerteXName, value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<SwEinleiterType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(SwPauschalXName, typeof(SwPauschalType));
            localElementDictionary.Add(SwEinzelwerteXName, typeof(SwEinzelwerteType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (SchmutzwasserZufluss?, SWzTagesspitzeX?)
    /// </para>
    /// </summary>
    public partial class SwPauschalType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName SchmutzwasserZuflussXName = System.Xml.Linq.XName.Get("SchmutzwasserZufluss", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName SWzTagesspitzeXXName = System.Xml.Linq.XName.Get("SWzTagesspitzeX", "http://www.bfr-abwasser.de");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("SwPauschalType", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator SwPauschalType(XElement xe) { return XTypedServices.ToXTypedElement<SwPauschalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static SwPauschalType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(SchmutzwasserZuflussXName), new NamedContentModelEntity(SWzTagesspitzeXXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (SchmutzwasserZufluss?, SWzTagesspitzeX?)
        /// </para>
        /// </summary>
        public SwPauschalType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (SchmutzwasserZufluss?, SWzTagesspitzeX?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? SchmutzwasserZufluss {
            get {
                XElement x = this.GetElement(SchmutzwasserZuflussXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(SchmutzwasserZuflussXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                }
                else {
                    this.SetElementWithValidation(SchmutzwasserZuflussXName, value, "SchmutzwasserZufluss", SchmutzwasserZuflussLocalType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (SchmutzwasserZufluss?, SWzTagesspitzeX?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? SWzTagesspitzeX {
            get {
                XElement x = this.GetElement(SWzTagesspitzeXXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(SWzTagesspitzeXXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                }
                else {
                    this.SetElementWithValidation(SWzTagesspitzeXXName, value, "SWzTagesspitzeX", SWzTagesspitzeXLocalType.TypeDefinition);
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<SwPauschalType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(SchmutzwasserZuflussXName, typeof(decimal));
            localElementDictionary.Add(SWzTagesspitzeXXName, typeof(decimal));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        private class SchmutzwasserZuflussLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(3200)), null, 1, 0, 1000m, null, 0, null, null, 0, null, 4, XmlSchemaWhiteSpace.Collapse));
            
            private SchmutzwasserZuflussLocalType() {
            }
        }
        
        private class SWzTagesspitzeXLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(3392)), null, 1, 0, null, 24m, 0, null, 0m, 0, null, 3, XmlSchemaWhiteSpace.Collapse));
            
            private SWzTagesspitzeXLocalType() {
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (HaeuslicherZufluss?, HzTagesspitzeX?, GewerblicherZufluss?, GzTagesspitzeX?, IndustriellerZufluss?, IzTagesspitzeX?)
    /// </para>
    /// </summary>
    public partial class SwEinzelwerteType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName HaeuslicherZuflussXName = System.Xml.Linq.XName.Get("HaeuslicherZufluss", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName HzTagesspitzeXXName = System.Xml.Linq.XName.Get("HzTagesspitzeX", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName GewerblicherZuflussXName = System.Xml.Linq.XName.Get("GewerblicherZufluss", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName GzTagesspitzeXXName = System.Xml.Linq.XName.Get("GzTagesspitzeX", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName IndustriellerZuflussXName = System.Xml.Linq.XName.Get("IndustriellerZufluss", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName IzTagesspitzeXXName = System.Xml.Linq.XName.Get("IzTagesspitzeX", "http://www.bfr-abwasser.de");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("SwEinzelwerteType", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator SwEinzelwerteType(XElement xe) { return XTypedServices.ToXTypedElement<SwEinzelwerteType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static SwEinzelwerteType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(HaeuslicherZuflussXName), new NamedContentModelEntity(HzTagesspitzeXXName), new NamedContentModelEntity(GewerblicherZuflussXName), new NamedContentModelEntity(GzTagesspitzeXXName), new NamedContentModelEntity(IndustriellerZuflussXName), new NamedContentModelEntity(IzTagesspitzeXXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (HaeuslicherZufluss?, HzTagesspitzeX?, GewerblicherZufluss?, GzTagesspitzeX?, IndustriellerZufluss?, IzTagesspitzeX?)
        /// </para>
        /// </summary>
        public SwEinzelwerteType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (HaeuslicherZufluss?, HzTagesspitzeX?, GewerblicherZufluss?, GzTagesspitzeX?, IndustriellerZufluss?, IzTagesspitzeX?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? HaeuslicherZufluss {
            get {
                XElement x = this.GetElement(HaeuslicherZuflussXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(HaeuslicherZuflussXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                }
                else {
                    this.SetElementWithValidation(HaeuslicherZuflussXName, value, "HaeuslicherZufluss", HaeuslicherZuflussLocalType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (HaeuslicherZufluss?, HzTagesspitzeX?, GewerblicherZufluss?, GzTagesspitzeX?, IndustriellerZufluss?, IzTagesspitzeX?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? HzTagesspitzeX {
            get {
                XElement x = this.GetElement(HzTagesspitzeXXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(HzTagesspitzeXXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                }
                else {
                    this.SetElementWithValidation(HzTagesspitzeXXName, value, "HzTagesspitzeX", HzTagesspitzeXLocalType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (HaeuslicherZufluss?, HzTagesspitzeX?, GewerblicherZufluss?, GzTagesspitzeX?, IndustriellerZufluss?, IzTagesspitzeX?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? GewerblicherZufluss {
            get {
                XElement x = this.GetElement(GewerblicherZuflussXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(GewerblicherZuflussXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                }
                else {
                    this.SetElementWithValidation(GewerblicherZuflussXName, value, "GewerblicherZufluss", GewerblicherZuflussLocalType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (HaeuslicherZufluss?, HzTagesspitzeX?, GewerblicherZufluss?, GzTagesspitzeX?, IndustriellerZufluss?, IzTagesspitzeX?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? GzTagesspitzeX {
            get {
                XElement x = this.GetElement(GzTagesspitzeXXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(GzTagesspitzeXXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                }
                else {
                    this.SetElementWithValidation(GzTagesspitzeXXName, value, "GzTagesspitzeX", GzTagesspitzeXLocalType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (HaeuslicherZufluss?, HzTagesspitzeX?, GewerblicherZufluss?, GzTagesspitzeX?, IndustriellerZufluss?, IzTagesspitzeX?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? IndustriellerZufluss {
            get {
                XElement x = this.GetElement(IndustriellerZuflussXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(IndustriellerZuflussXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                }
                else {
                    this.SetElementWithValidation(IndustriellerZuflussXName, value, "IndustriellerZufluss", IndustriellerZuflussLocalType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (HaeuslicherZufluss?, HzTagesspitzeX?, GewerblicherZufluss?, GzTagesspitzeX?, IndustriellerZufluss?, IzTagesspitzeX?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? IzTagesspitzeX {
            get {
                XElement x = this.GetElement(IzTagesspitzeXXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(IzTagesspitzeXXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                }
                else {
                    this.SetElementWithValidation(IzTagesspitzeXXName, value, "IzTagesspitzeX", IzTagesspitzeXLocalType.TypeDefinition);
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<SwEinzelwerteType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(HaeuslicherZuflussXName, typeof(decimal));
            localElementDictionary.Add(HzTagesspitzeXXName, typeof(decimal));
            localElementDictionary.Add(GewerblicherZuflussXName, typeof(decimal));
            localElementDictionary.Add(GzTagesspitzeXXName, typeof(decimal));
            localElementDictionary.Add(IndustriellerZuflussXName, typeof(decimal));
            localElementDictionary.Add(IzTagesspitzeXXName, typeof(decimal));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        private class HaeuslicherZuflussLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(3200)), null, 1, 0, 1000m, null, 0, null, null, 0, null, 4, XmlSchemaWhiteSpace.Collapse));
            
            private HaeuslicherZuflussLocalType() {
            }
        }
        
        private class HzTagesspitzeXLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(3392)), null, 1, 0, null, 24m, 0, null, 0m, 0, null, 3, XmlSchemaWhiteSpace.Collapse));
            
            private HzTagesspitzeXLocalType() {
            }
        }
        
        private class GewerblicherZuflussLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(3200)), null, 1, 0, 1000m, null, 0, null, null, 0, null, 4, XmlSchemaWhiteSpace.Collapse));
            
            private GewerblicherZuflussLocalType() {
            }
        }
        
        private class GzTagesspitzeXLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(2368)), null, 3, 0, null, 24m, 0, null, 0m, 0, null, 0, XmlSchemaWhiteSpace.Collapse));
            
            private GzTagesspitzeXLocalType() {
            }
        }
        
        private class IndustriellerZuflussLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(3200)), null, 1, 0, 1000m, null, 0, null, null, 0, null, 4, XmlSchemaWhiteSpace.Collapse));
            
            private IndustriellerZuflussLocalType() {
            }
        }
        
        private class IzTagesspitzeXLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(3392)), null, 1, 0, null, 24m, 0, null, 0m, 0, null, 3, XmlSchemaWhiteSpace.Collapse));
            
            private IzTagesspitzeXLocalType() {
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Dokumentname, Dateiname, Dokumentquelle, Kommentar?)
    /// </para>
    /// </summary>
    public partial class HDokumenteType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName DokumentnameXName = System.Xml.Linq.XName.Get("Dokumentname", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName DateinameXName = System.Xml.Linq.XName.Get("Dateiname", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName DokumentquelleXName = System.Xml.Linq.XName.Get("Dokumentquelle", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName KommentarXName = System.Xml.Linq.XName.Get("Kommentar", "http://www.bfr-abwasser.de");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("HDokumenteType", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator HDokumenteType(XElement xe) { return XTypedServices.ToXTypedElement<HDokumenteType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static HDokumenteType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(DokumentnameXName), new NamedContentModelEntity(DateinameXName), new NamedContentModelEntity(DokumentquelleXName), new NamedContentModelEntity(KommentarXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Dokumentname, Dateiname, Dokumentquelle, Kommentar?)
        /// </para>
        /// </summary>
        public HDokumenteType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (Dokumentname, Dateiname, Dokumentquelle, Kommentar?)
        /// </para>
        /// </summary>
        public virtual string Dokumentname {
            get {
                XElement x = this.GetElement(DokumentnameXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(DokumentnameXName, value, "Dokumentname", DokumentnameLocalType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (Dokumentname, Dateiname, Dokumentquelle, Kommentar?)
        /// </para>
        /// </summary>
        public virtual string Dateiname {
            get {
                XElement x = this.GetElement(DateinameXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(DateinameXName, value, "Dateiname", DateinameLocalType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (Dokumentname, Dateiname, Dokumentquelle, Kommentar?)
        /// </para>
        /// </summary>
        public virtual string Dokumentquelle {
            get {
                XElement x = this.GetElement(DokumentquelleXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(DokumentquelleXName, value, "Dokumentquelle", DokumentquelleLocalType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Dokumentname, Dateiname, Dokumentquelle, Kommentar?)
        /// </para>
        /// </summary>
        public virtual string Kommentar {
            get {
                XElement x = this.GetElement(KommentarXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
            set {
                this.SetElement(KommentarXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<HDokumenteType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(DokumentnameXName, typeof(string));
            localElementDictionary.Add(DateinameXName, typeof(string));
            localElementDictionary.Add(DokumentquelleXName, typeof(string));
            localElementDictionary.Add(KommentarXName, typeof(string));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        private class DokumentnameLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(4)), null, 0, 0, null, null, 40, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
            
            private DokumentnameLocalType() {
            }
        }
        
        private class DateinameLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(4)), null, 0, 0, null, null, 255, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
            
            private DateinameLocalType() {
            }
        }
        
        private class DokumentquelleLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(4)), null, 0, 0, null, null, 40, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
            
            private DokumentquelleLocalType() {
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Kennung, Beschreibung?, Beobachtungen?)
    /// </para>
    /// </summary>
    public partial class BetriebsdatenType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName KennungXName = System.Xml.Linq.XName.Get("Kennung", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName BeschreibungXName = System.Xml.Linq.XName.Get("Beschreibung", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName BeobachtungenXName = System.Xml.Linq.XName.Get("Beobachtungen", "http://www.bfr-abwasser.de");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("BetriebsdatenType", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator BetriebsdatenType(XElement xe) { return XTypedServices.ToXTypedElement<BetriebsdatenType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static BetriebsdatenType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(KennungXName), new NamedContentModelEntity(BeschreibungXName), new NamedContentModelEntity(BeobachtungenXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Kennung, Beschreibung?, Beobachtungen?)
        /// </para>
        /// </summary>
        public BetriebsdatenType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (Kennung, Beschreibung?, Beobachtungen?)
        /// </para>
        /// </summary>
        public virtual string Kennung {
            get {
                XElement x = this.GetElement(KennungXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(KennungXName, value, "Kennung", KennungLocalType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Kennung, Beschreibung?, Beobachtungen?)
        /// </para>
        /// </summary>
        public virtual string Beschreibung {
            get {
                XElement x = this.GetElement(BeschreibungXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(BeschreibungXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                else {
                    this.SetElementWithValidation(BeschreibungXName, value, "Beschreibung", BeschreibungLocalType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Kennung, Beschreibung?, Beobachtungen?)
        /// </para>
        /// </summary>
        public virtual BeobachtungenLocalType Beobachtungen {
            get {
                XElement x = this.GetElement(BeobachtungenXName);
                return ((BeobachtungenLocalType)(x));
            }
            set {
                this.SetElement(BeobachtungenXName, value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<BetriebsdatenType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(KennungXName, typeof(string));
            localElementDictionary.Add(BeschreibungXName, typeof(string));
            localElementDictionary.Add(BeobachtungenXName, typeof(BeobachtungenLocalType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        private class KennungLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(6)), null, 0, 0, null, null, 5, null, null, 5, null, 0, XmlSchemaWhiteSpace.Preserve));
            
            private KennungLocalType() {
            }
        }
        
        private class BeschreibungLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(4)), null, 0, 0, null, null, 100, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
            
            private BeschreibungLocalType() {
            }
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Grundwasser?, Boden?)
        /// </para>
        /// </summary>
        public partial class BeobachtungenLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName GrundwasserXName = System.Xml.Linq.XName.Get("Grundwasser", "http://www.bfr-abwasser.de");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName BodenXName = System.Xml.Linq.XName.Get("Boden", "http://www.bfr-abwasser.de");
            
            private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("Beobachtungen", "http://www.bfr-abwasser.de");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;
            
		public static explicit operator BeobachtungenLocalType(XElement xe) { return XTypedServices.ToXTypedElement<BeobachtungenLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static BeobachtungenLocalType() {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(GrundwasserXName), new NamedContentModelEntity(BodenXName));
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (Grundwasser?, Boden?)
            /// </para>
            /// </summary>
            public BeobachtungenLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (Grundwasser?, Boden?)
            /// </para>
            /// </summary>
            public virtual GrundwasserLocalType Grundwasser {
                get {
                    XElement x = this.GetElement(GrundwasserXName);
                    return ((GrundwasserLocalType)(x));
                }
                set {
                    this.SetElement(GrundwasserXName, value);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (Grundwasser?, Boden?)
            /// </para>
            /// </summary>
            public virtual BodenLocalType Boden {
                get {
                    XElement x = this.GetElement(BodenXName);
                    return ((BodenLocalType)(x));
                }
                set {
                    this.SetElement(BodenXName, value);
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            System.Xml.Linq.XName IXMetaData.SchemaName {
                get {
                    return xName;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<BeobachtungenLocalType>(this);
            }
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(GrundwasserXName, typeof(GrundwasserLocalType));
                localElementDictionary.Add(BodenXName, typeof(BodenLocalType));
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return contentModel;
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (GWMessstelle+)
            /// </para>
            /// </summary>
            public partial class GrundwasserLocalType : XTypedElement, IXMetaData {
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName GWMessstelleXName = System.Xml.Linq.XName.Get("GWMessstelle", "http://www.bfr-abwasser.de");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                private XTypedList<GWMessstelleType> GWMessstelleField;
                
                private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("Grundwasser", "http://www.bfr-abwasser.de");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                private static ContentModelEntity contentModel;
                
		public static explicit operator GrundwasserLocalType(XElement xe) { return XTypedServices.ToXTypedElement<GrundwasserLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
                
                static GrundwasserLocalType() {
                    BuildElementDictionary();
                    contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(GWMessstelleXName));
                }
                
                /// <summary>
                /// <para>
                /// Regular expression: (GWMessstelle+)
                /// </para>
                /// </summary>
                public GrundwasserLocalType() {
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: required, repeating
                /// </para>
                /// <para>
                /// Regular expression: (GWMessstelle+)
                /// </para>
                /// </summary>
                public virtual IList<GWMessstelleType> GWMessstelle {
                    get {
                        if ((this.GWMessstelleField == null)) {
                            this.GWMessstelleField = new XTypedList<GWMessstelleType>(this, LinqToXsdTypeManager.Instance, GWMessstelleXName);
                        }
                        return this.GWMessstelleField;
                    }
                    set {
                        if ((value == null)) {
                            this.GWMessstelleField = null;
                        }
                        else {
                            if ((this.GWMessstelleField == null)) {
                                this.GWMessstelleField = XTypedList<GWMessstelleType>.Initialize(this, LinqToXsdTypeManager.Instance, value, GWMessstelleXName);
                            }
                            else {
                                XTypedServices.SetList<GWMessstelleType>(this.GWMessstelleField, value);
                            }
                        }
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
                    get {
                        return localElementDictionary;
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                System.Xml.Linq.XName IXMetaData.SchemaName {
                    get {
                        return xName;
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                SchemaOrigin IXMetaData.TypeOrigin {
                    get {
                        return SchemaOrigin.Fragment;
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                ILinqToXsdTypeManager IXMetaData.TypeManager {
                    get {
                        return LinqToXsdTypeManager.Instance;
                    }
                }
                
                public override XTypedElement Clone() {
                    return XTypedServices.CloneXTypedElement<GrundwasserLocalType>(this);
                }
                
                private static void BuildElementDictionary() {
                    localElementDictionary.Add(GWMessstelleXName, typeof(GWMessstelleType));
                }
                
                ContentModelEntity IXMetaData.GetContentModel() {
                    return contentModel;
                }
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (Bodenkennwerte+)
            /// </para>
            /// </summary>
            public partial class BodenLocalType : XTypedElement, IXMetaData {
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName BodenkennwerteXName = System.Xml.Linq.XName.Get("Bodenkennwerte", "http://www.bfr-abwasser.de");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                private XTypedList<BodenkennwerteType> BodenkennwerteField;
                
                private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("Boden", "http://www.bfr-abwasser.de");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                private static ContentModelEntity contentModel;
                
		public static explicit operator BodenLocalType(XElement xe) { return XTypedServices.ToXTypedElement<BodenLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
                
                static BodenLocalType() {
                    BuildElementDictionary();
                    contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(BodenkennwerteXName));
                }
                
                /// <summary>
                /// <para>
                /// Regular expression: (Bodenkennwerte+)
                /// </para>
                /// </summary>
                public BodenLocalType() {
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: required, repeating
                /// </para>
                /// <para>
                /// Regular expression: (Bodenkennwerte+)
                /// </para>
                /// </summary>
                public virtual IList<BodenkennwerteType> Bodenkennwerte {
                    get {
                        if ((this.BodenkennwerteField == null)) {
                            this.BodenkennwerteField = new XTypedList<BodenkennwerteType>(this, LinqToXsdTypeManager.Instance, BodenkennwerteXName);
                        }
                        return this.BodenkennwerteField;
                    }
                    set {
                        if ((value == null)) {
                            this.BodenkennwerteField = null;
                        }
                        else {
                            if ((this.BodenkennwerteField == null)) {
                                this.BodenkennwerteField = XTypedList<BodenkennwerteType>.Initialize(this, LinqToXsdTypeManager.Instance, value, BodenkennwerteXName);
                            }
                            else {
                                XTypedServices.SetList<BodenkennwerteType>(this.BodenkennwerteField, value);
                            }
                        }
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
                    get {
                        return localElementDictionary;
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                System.Xml.Linq.XName IXMetaData.SchemaName {
                    get {
                        return xName;
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                SchemaOrigin IXMetaData.TypeOrigin {
                    get {
                        return SchemaOrigin.Fragment;
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                ILinqToXsdTypeManager IXMetaData.TypeManager {
                    get {
                        return LinqToXsdTypeManager.Instance;
                    }
                }
                
                public override XTypedElement Clone() {
                    return XTypedServices.CloneXTypedElement<BodenLocalType>(this);
                }
                
                private static void BuildElementDictionary() {
                    localElementDictionary.Add(BodenkennwerteXName, typeof(BodenkennwerteType));
                }
                
                ContentModelEntity IXMetaData.GetContentModel() {
                    return contentModel;
                }
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Dokumentname, Dateiname, Dokumentquelle, Kommentar?)
    /// </para>
    /// </summary>
    public partial class DokumenteType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName DokumentnameXName = System.Xml.Linq.XName.Get("Dokumentname", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName DateinameXName = System.Xml.Linq.XName.Get("Dateiname", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName DokumentquelleXName = System.Xml.Linq.XName.Get("Dokumentquelle", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName KommentarXName = System.Xml.Linq.XName.Get("Kommentar", "http://www.bfr-abwasser.de");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("DokumenteType", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator DokumenteType(XElement xe) { return XTypedServices.ToXTypedElement<DokumenteType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static DokumenteType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(DokumentnameXName), new NamedContentModelEntity(DateinameXName), new NamedContentModelEntity(DokumentquelleXName), new NamedContentModelEntity(KommentarXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Dokumentname, Dateiname, Dokumentquelle, Kommentar?)
        /// </para>
        /// </summary>
        public DokumenteType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (Dokumentname, Dateiname, Dokumentquelle, Kommentar?)
        /// </para>
        /// </summary>
        public virtual string Dokumentname {
            get {
                XElement x = this.GetElement(DokumentnameXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(DokumentnameXName, value, "Dokumentname", DokumentnameLocalType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (Dokumentname, Dateiname, Dokumentquelle, Kommentar?)
        /// </para>
        /// </summary>
        public virtual string Dateiname {
            get {
                XElement x = this.GetElement(DateinameXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(DateinameXName, value, "Dateiname", DateinameLocalType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (Dokumentname, Dateiname, Dokumentquelle, Kommentar?)
        /// </para>
        /// </summary>
        public virtual string Dokumentquelle {
            get {
                XElement x = this.GetElement(DokumentquelleXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(DokumentquelleXName, value, "Dokumentquelle", DokumentquelleLocalType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Dokumentname, Dateiname, Dokumentquelle, Kommentar?)
        /// </para>
        /// </summary>
        public virtual string Kommentar {
            get {
                XElement x = this.GetElement(KommentarXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
            set {
                this.SetElement(KommentarXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<DokumenteType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(DokumentnameXName, typeof(string));
            localElementDictionary.Add(DateinameXName, typeof(string));
            localElementDictionary.Add(DokumentquelleXName, typeof(string));
            localElementDictionary.Add(KommentarXName, typeof(string));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        private class DokumentnameLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(4)), null, 0, 0, null, null, 40, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
            
            private DokumentnameLocalType() {
            }
        }
        
        private class DateinameLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(4)), null, 0, 0, null, null, 255, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
            
            private DateinameLocalType() {
            }
        }
        
        private class DokumentquelleLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(4)), null, 0, 0, null, null, 40, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
            
            private DokumentquelleLocalType() {
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Bezeichnung, Erlaeuterung?, Erstellungsdatum?, Umfeld, Bodenkennwerte?, Standort?, NwPeilrohr?, HoeheROK?, Filterbeginn?, Filterende?, Endteufe?, Zyklus?, Messungen?, Dokumente?)
    /// </para>
    /// </summary>
    public partial class GWMessstelleType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName BezeichnungXName = System.Xml.Linq.XName.Get("Bezeichnung", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ErlaeuterungXName = System.Xml.Linq.XName.Get("Erlaeuterung", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ErstellungsdatumXName = System.Xml.Linq.XName.Get("Erstellungsdatum", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName UmfeldXName = System.Xml.Linq.XName.Get("Umfeld", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName BodenkennwerteXName = System.Xml.Linq.XName.Get("Bodenkennwerte", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName StandortXName = System.Xml.Linq.XName.Get("Standort", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName NwPeilrohrXName = System.Xml.Linq.XName.Get("NwPeilrohr", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName HoeheROKXName = System.Xml.Linq.XName.Get("HoeheROK", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName FilterbeginnXName = System.Xml.Linq.XName.Get("Filterbeginn", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName FilterendeXName = System.Xml.Linq.XName.Get("Filterende", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName EndteufeXName = System.Xml.Linq.XName.Get("Endteufe", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ZyklusXName = System.Xml.Linq.XName.Get("Zyklus", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName MessungenXName = System.Xml.Linq.XName.Get("Messungen", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName DokumenteXName = System.Xml.Linq.XName.Get("Dokumente", "http://www.bfr-abwasser.de");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("GWMessstelleType", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator GWMessstelleType(XElement xe) { return XTypedServices.ToXTypedElement<GWMessstelleType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static GWMessstelleType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(BezeichnungXName), new NamedContentModelEntity(ErlaeuterungXName), new NamedContentModelEntity(ErstellungsdatumXName), new NamedContentModelEntity(UmfeldXName), new NamedContentModelEntity(BodenkennwerteXName), new NamedContentModelEntity(StandortXName), new NamedContentModelEntity(NwPeilrohrXName), new NamedContentModelEntity(HoeheROKXName), new NamedContentModelEntity(FilterbeginnXName), new NamedContentModelEntity(FilterendeXName), new NamedContentModelEntity(EndteufeXName), new NamedContentModelEntity(ZyklusXName), new NamedContentModelEntity(MessungenXName), new NamedContentModelEntity(DokumenteXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Bezeichnung, Erlaeuterung?, Erstellungsdatum?, Umfeld, Bodenkennwerte?, Standort?, NwPeilrohr?, HoeheROK?, Filterbeginn?, Filterende?, Endteufe?, Zyklus?, Messungen?, Dokumente?)
        /// </para>
        /// </summary>
        public GWMessstelleType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (Bezeichnung, Erlaeuterung?, Erstellungsdatum?, Umfeld, Bodenkennwerte?, Standort?, NwPeilrohr?, HoeheROK?, Filterbeginn?, Filterende?, Endteufe?, Zyklus?, Messungen?, Dokumente?)
        /// </para>
        /// </summary>
        public virtual string Bezeichnung {
            get {
                XElement x = this.GetElement(BezeichnungXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(BezeichnungXName, value, "Bezeichnung", BezeichnungLocalType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Bezeichnung, Erlaeuterung?, Erstellungsdatum?, Umfeld, Bodenkennwerte?, Standort?, NwPeilrohr?, HoeheROK?, Filterbeginn?, Filterende?, Endteufe?, Zyklus?, Messungen?, Dokumente?)
        /// </para>
        /// </summary>
        public virtual string Erlaeuterung {
            get {
                XElement x = this.GetElement(ErlaeuterungXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
            set {
                this.SetElement(ErlaeuterungXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Bezeichnung, Erlaeuterung?, Erstellungsdatum?, Umfeld, Bodenkennwerte?, Standort?, NwPeilrohr?, HoeheROK?, Filterbeginn?, Filterende?, Endteufe?, Zyklus?, Messungen?, Dokumente?)
        /// </para>
        /// </summary>
        public virtual System.DateTime? Erstellungsdatum {
            get {
                XElement x = this.GetElement(ErstellungsdatumXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<System.DateTime>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date).Datatype);
            }
            set {
                this.SetElement(ErstellungsdatumXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (Bezeichnung, Erlaeuterung?, Erstellungsdatum?, Umfeld, Bodenkennwerte?, Standort?, NwPeilrohr?, HoeheROK?, Filterbeginn?, Filterende?, Endteufe?, Zyklus?, Messungen?, Dokumente?)
        /// </para>
        /// </summary>
        public virtual string Umfeld {
            get {
                XElement x = this.GetElement(UmfeldXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(UmfeldXName, value, "Umfeld", UmfeldLocalType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Bezeichnung, Erlaeuterung?, Erstellungsdatum?, Umfeld, Bodenkennwerte?, Standort?, NwPeilrohr?, HoeheROK?, Filterbeginn?, Filterende?, Endteufe?, Zyklus?, Messungen?, Dokumente?)
        /// </para>
        /// </summary>
        public virtual string Bodenkennwerte {
            get {
                XElement x = this.GetElement(BodenkennwerteXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(BodenkennwerteXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                else {
                    this.SetElementWithValidation(BodenkennwerteXName, value, "Bodenkennwerte", BodenkennwerteLocalType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Bezeichnung, Erlaeuterung?, Erstellungsdatum?, Umfeld, Bodenkennwerte?, Standort?, NwPeilrohr?, HoeheROK?, Filterbeginn?, Filterende?, Endteufe?, Zyklus?, Messungen?, Dokumente?)
        /// </para>
        /// </summary>
        public virtual StandortType Standort {
            get {
                XElement x = this.GetElement(StandortXName);
                return ((StandortType)(x));
            }
            set {
                this.SetElement(StandortXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Bezeichnung, Erlaeuterung?, Erstellungsdatum?, Umfeld, Bodenkennwerte?, Standort?, NwPeilrohr?, HoeheROK?, Filterbeginn?, Filterende?, Endteufe?, Zyklus?, Messungen?, Dokumente?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? NwPeilrohr {
            get {
                XElement x = this.GetElement(NwPeilrohrXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(NwPeilrohrXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                }
                else {
                    this.SetElementWithValidation(NwPeilrohrXName, value, "NwPeilrohr", NwPeilrohrLocalType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Bezeichnung, Erlaeuterung?, Erstellungsdatum?, Umfeld, Bodenkennwerte?, Standort?, NwPeilrohr?, HoeheROK?, Filterbeginn?, Filterende?, Endteufe?, Zyklus?, Messungen?, Dokumente?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? HoeheROK {
            get {
                XElement x = this.GetElement(HoeheROKXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(HoeheROKXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                }
                else {
                    this.SetElementWithValidation(HoeheROKXName, value, "HoeheROK", HoeheROKLocalType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Bezeichnung, Erlaeuterung?, Erstellungsdatum?, Umfeld, Bodenkennwerte?, Standort?, NwPeilrohr?, HoeheROK?, Filterbeginn?, Filterende?, Endteufe?, Zyklus?, Messungen?, Dokumente?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? Filterbeginn {
            get {
                XElement x = this.GetElement(FilterbeginnXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(FilterbeginnXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                }
                else {
                    this.SetElementWithValidation(FilterbeginnXName, value, "Filterbeginn", FilterbeginnLocalType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Bezeichnung, Erlaeuterung?, Erstellungsdatum?, Umfeld, Bodenkennwerte?, Standort?, NwPeilrohr?, HoeheROK?, Filterbeginn?, Filterende?, Endteufe?, Zyklus?, Messungen?, Dokumente?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? Filterende {
            get {
                XElement x = this.GetElement(FilterendeXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(FilterendeXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                }
                else {
                    this.SetElementWithValidation(FilterendeXName, value, "Filterende", FilterendeLocalType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Bezeichnung, Erlaeuterung?, Erstellungsdatum?, Umfeld, Bodenkennwerte?, Standort?, NwPeilrohr?, HoeheROK?, Filterbeginn?, Filterende?, Endteufe?, Zyklus?, Messungen?, Dokumente?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? Endteufe {
            get {
                XElement x = this.GetElement(EndteufeXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(EndteufeXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                }
                else {
                    this.SetElementWithValidation(EndteufeXName, value, "Endteufe", EndteufeLocalType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Bezeichnung, Erlaeuterung?, Erstellungsdatum?, Umfeld, Bodenkennwerte?, Standort?, NwPeilrohr?, HoeheROK?, Filterbeginn?, Filterende?, Endteufe?, Zyklus?, Messungen?, Dokumente?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? Zyklus {
            get {
                XElement x = this.GetElement(ZyklusXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(ZyklusXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                }
                else {
                    this.SetElementWithValidation(ZyklusXName, value, "Zyklus", global::www.bfr.abwasser.de.BeobachtungszyklusGWType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Bezeichnung, Erlaeuterung?, Erstellungsdatum?, Umfeld, Bodenkennwerte?, Standort?, NwPeilrohr?, HoeheROK?, Filterbeginn?, Filterende?, Endteufe?, Zyklus?, Messungen?, Dokumente?)
        /// </para>
        /// </summary>
        public virtual MessungenLocalType Messungen {
            get {
                XElement x = this.GetElement(MessungenXName);
                return ((MessungenLocalType)(x));
            }
            set {
                this.SetElement(MessungenXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Bezeichnung, Erlaeuterung?, Erstellungsdatum?, Umfeld, Bodenkennwerte?, Standort?, NwPeilrohr?, HoeheROK?, Filterbeginn?, Filterende?, Endteufe?, Zyklus?, Messungen?, Dokumente?)
        /// </para>
        /// </summary>
        public virtual DokumenteLocalType Dokumente {
            get {
                XElement x = this.GetElement(DokumenteXName);
                return ((DokumenteLocalType)(x));
            }
            set {
                this.SetElement(DokumenteXName, value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<GWMessstelleType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(BezeichnungXName, typeof(string));
            localElementDictionary.Add(ErlaeuterungXName, typeof(string));
            localElementDictionary.Add(ErstellungsdatumXName, typeof(System.DateTime));
            localElementDictionary.Add(UmfeldXName, typeof(string));
            localElementDictionary.Add(BodenkennwerteXName, typeof(string));
            localElementDictionary.Add(StandortXName, typeof(StandortType));
            localElementDictionary.Add(NwPeilrohrXName, typeof(decimal));
            localElementDictionary.Add(HoeheROKXName, typeof(decimal));
            localElementDictionary.Add(FilterbeginnXName, typeof(decimal));
            localElementDictionary.Add(FilterendeXName, typeof(decimal));
            localElementDictionary.Add(EndteufeXName, typeof(decimal));
            localElementDictionary.Add(ZyklusXName, typeof(decimal));
            localElementDictionary.Add(MessungenXName, typeof(MessungenLocalType));
            localElementDictionary.Add(DokumenteXName, typeof(DokumenteLocalType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        private class BezeichnungLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(4)), null, 0, 0, null, null, 30, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
            
            private BezeichnungLocalType() {
            }
        }
        
        private class UmfeldLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(4)), null, 0, 0, null, null, 30, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
            
            private UmfeldLocalType() {
            }
        }
        
        private class BodenkennwerteLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(4)), null, 0, 0, null, null, 30, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
            
            private BodenkennwerteLocalType() {
            }
        }
        
        private class NwPeilrohrLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(1024)), null, 0, 0, null, null, 0, null, null, 0, null, 3, XmlSchemaWhiteSpace.Collapse));
            
            private NwPeilrohrLocalType() {
            }
        }
        
        private class HoeheROKLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(3200)), null, 2, 0, 10000m, null, 0, null, null, 0, null, 6, XmlSchemaWhiteSpace.Collapse));
            
            private HoeheROKLocalType() {
            }
        }
        
        private class FilterbeginnLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(3200)), null, 2, 0, 100m, null, 0, null, null, 0, null, 4, XmlSchemaWhiteSpace.Collapse));
            
            private FilterbeginnLocalType() {
            }
        }
        
        private class FilterendeLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(3200)), null, 2, 0, 100m, null, 0, null, null, 0, null, 4, XmlSchemaWhiteSpace.Collapse));
            
            private FilterendeLocalType() {
            }
        }
        
        private class EndteufeLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(3200)), null, 2, 0, 100m, null, 0, null, null, 0, null, 4, XmlSchemaWhiteSpace.Collapse));
            
            private EndteufeLocalType() {
            }
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Messung+)
        /// </para>
        /// </summary>
        public partial class MessungenLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName MessungXName = System.Xml.Linq.XName.Get("Messung", "http://www.bfr-abwasser.de");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XTypedList<MessungType> MessungField;
            
            private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("Messungen", "http://www.bfr-abwasser.de");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;
            
		public static explicit operator MessungenLocalType(XElement xe) { return XTypedServices.ToXTypedElement<MessungenLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static MessungenLocalType() {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(MessungXName));
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (Messung+)
            /// </para>
            /// </summary>
            public MessungenLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required, repeating
            /// </para>
            /// <para>
            /// Regular expression: (Messung+)
            /// </para>
            /// </summary>
            public virtual IList<MessungType> Messung {
                get {
                    if ((this.MessungField == null)) {
                        this.MessungField = new XTypedList<MessungType>(this, LinqToXsdTypeManager.Instance, MessungXName);
                    }
                    return this.MessungField;
                }
                set {
                    if ((value == null)) {
                        this.MessungField = null;
                    }
                    else {
                        if ((this.MessungField == null)) {
                            this.MessungField = XTypedList<MessungType>.Initialize(this, LinqToXsdTypeManager.Instance, value, MessungXName);
                        }
                        else {
                            XTypedServices.SetList<MessungType>(this.MessungField, value);
                        }
                    }
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            System.Xml.Linq.XName IXMetaData.SchemaName {
                get {
                    return xName;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<MessungenLocalType>(this);
            }
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(MessungXName, typeof(MessungType));
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return contentModel;
            }
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Dokument+)
        /// </para>
        /// </summary>
        public partial class DokumenteLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName DokumentXName = System.Xml.Linq.XName.Get("Dokument", "http://www.bfr-abwasser.de");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XTypedList<DokumenteType> DokumentField;
            
            private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("Dokumente", "http://www.bfr-abwasser.de");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;
            
		public static explicit operator DokumenteLocalType(XElement xe) { return XTypedServices.ToXTypedElement<DokumenteLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static DokumenteLocalType() {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(DokumentXName));
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (Dokument+)
            /// </para>
            /// </summary>
            public DokumenteLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required, repeating
            /// </para>
            /// <para>
            /// Regular expression: (Dokument+)
            /// </para>
            /// </summary>
            public virtual IList<DokumenteType> Dokument {
                get {
                    if ((this.DokumentField == null)) {
                        this.DokumentField = new XTypedList<DokumenteType>(this, LinqToXsdTypeManager.Instance, DokumentXName);
                    }
                    return this.DokumentField;
                }
                set {
                    if ((value == null)) {
                        this.DokumentField = null;
                    }
                    else {
                        if ((this.DokumentField == null)) {
                            this.DokumentField = XTypedList<DokumenteType>.Initialize(this, LinqToXsdTypeManager.Instance, value, DokumentXName);
                        }
                        else {
                            XTypedServices.SetList<DokumenteType>(this.DokumentField, value);
                        }
                    }
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            System.Xml.Linq.XName IXMetaData.SchemaName {
                get {
                    return xName;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<DokumenteLocalType>(this);
            }
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(DokumentXName, typeof(DokumenteType));
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return contentModel;
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Ablesedatum?, Messwert, Kommentar?)
    /// </para>
    /// </summary>
    public partial class MessungType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName AblesedatumXName = System.Xml.Linq.XName.Get("Ablesedatum", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName MesswertXName = System.Xml.Linq.XName.Get("Messwert", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName KommentarXName = System.Xml.Linq.XName.Get("Kommentar", "http://www.bfr-abwasser.de");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("MessungType", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator MessungType(XElement xe) { return XTypedServices.ToXTypedElement<MessungType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static MessungType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(AblesedatumXName), new NamedContentModelEntity(MesswertXName), new NamedContentModelEntity(KommentarXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Ablesedatum?, Messwert, Kommentar?)
        /// </para>
        /// </summary>
        public MessungType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Ablesedatum?, Messwert, Kommentar?)
        /// </para>
        /// </summary>
        public virtual System.DateTime? Ablesedatum {
            get {
                XElement x = this.GetElement(AblesedatumXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<System.DateTime>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date).Datatype);
            }
            set {
                this.SetElement(AblesedatumXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (Ablesedatum?, Messwert, Kommentar?)
        /// </para>
        /// </summary>
        public virtual decimal Messwert {
            get {
                XElement x = this.GetElement(MesswertXName);
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
            set {
                this.SetElementWithValidation(MesswertXName, value, "Messwert", MesswertLocalType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Ablesedatum?, Messwert, Kommentar?)
        /// </para>
        /// </summary>
        public virtual string Kommentar {
            get {
                XElement x = this.GetElement(KommentarXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
            set {
                this.SetElement(KommentarXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<MessungType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(AblesedatumXName, typeof(System.DateTime));
            localElementDictionary.Add(MesswertXName, typeof(decimal));
            localElementDictionary.Add(KommentarXName, typeof(string));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        private class MesswertLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(3200)), null, 2, 0, 100m, null, 0, null, null, 0, null, 4, XmlSchemaWhiteSpace.Collapse));
            
            private MesswertLocalType() {
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Bezeichnung, Erlaeuterung?, Umfeld, Standort?, ArtUntersuchung?, GWFlurabstand?, massgBodenart?, massgKfWert?, Bodenschichten?, Dokumente?)
    /// </para>
    /// </summary>
    public partial class BodenkennwerteType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName BezeichnungXName = System.Xml.Linq.XName.Get("Bezeichnung", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ErlaeuterungXName = System.Xml.Linq.XName.Get("Erlaeuterung", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName UmfeldXName = System.Xml.Linq.XName.Get("Umfeld", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName StandortXName = System.Xml.Linq.XName.Get("Standort", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ArtUntersuchungXName = System.Xml.Linq.XName.Get("ArtUntersuchung", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName GWFlurabstandXName = System.Xml.Linq.XName.Get("GWFlurabstand", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName massgBodenartXName = System.Xml.Linq.XName.Get("massgBodenart", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName massgKfWertXName = System.Xml.Linq.XName.Get("massgKfWert", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName BodenschichtenXName = System.Xml.Linq.XName.Get("Bodenschichten", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName DokumenteXName = System.Xml.Linq.XName.Get("Dokumente", "http://www.bfr-abwasser.de");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("BodenkennwerteType", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator BodenkennwerteType(XElement xe) { return XTypedServices.ToXTypedElement<BodenkennwerteType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static BodenkennwerteType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(BezeichnungXName), new NamedContentModelEntity(ErlaeuterungXName), new NamedContentModelEntity(UmfeldXName), new NamedContentModelEntity(StandortXName), new NamedContentModelEntity(ArtUntersuchungXName), new NamedContentModelEntity(GWFlurabstandXName), new NamedContentModelEntity(massgBodenartXName), new NamedContentModelEntity(massgKfWertXName), new NamedContentModelEntity(BodenschichtenXName), new NamedContentModelEntity(DokumenteXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Bezeichnung, Erlaeuterung?, Umfeld, Standort?, ArtUntersuchung?, GWFlurabstand?, massgBodenart?, massgKfWert?, Bodenschichten?, Dokumente?)
        /// </para>
        /// </summary>
        public BodenkennwerteType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (Bezeichnung, Erlaeuterung?, Umfeld, Standort?, ArtUntersuchung?, GWFlurabstand?, massgBodenart?, massgKfWert?, Bodenschichten?, Dokumente?)
        /// </para>
        /// </summary>
        public virtual string Bezeichnung {
            get {
                XElement x = this.GetElement(BezeichnungXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(BezeichnungXName, value, "Bezeichnung", BezeichnungLocalType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Bezeichnung, Erlaeuterung?, Umfeld, Standort?, ArtUntersuchung?, GWFlurabstand?, massgBodenart?, massgKfWert?, Bodenschichten?, Dokumente?)
        /// </para>
        /// </summary>
        public virtual string Erlaeuterung {
            get {
                XElement x = this.GetElement(ErlaeuterungXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
            set {
                this.SetElement(ErlaeuterungXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (Bezeichnung, Erlaeuterung?, Umfeld, Standort?, ArtUntersuchung?, GWFlurabstand?, massgBodenart?, massgKfWert?, Bodenschichten?, Dokumente?)
        /// </para>
        /// </summary>
        public virtual string Umfeld {
            get {
                XElement x = this.GetElement(UmfeldXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(UmfeldXName, value, "Umfeld", UmfeldLocalType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Bezeichnung, Erlaeuterung?, Umfeld, Standort?, ArtUntersuchung?, GWFlurabstand?, massgBodenart?, massgKfWert?, Bodenschichten?, Dokumente?)
        /// </para>
        /// </summary>
        public virtual StandortType Standort {
            get {
                XElement x = this.GetElement(StandortXName);
                return ((StandortType)(x));
            }
            set {
                this.SetElement(StandortXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Bezeichnung, Erlaeuterung?, Umfeld, Standort?, ArtUntersuchung?, GWFlurabstand?, massgBodenart?, massgKfWert?, Bodenschichten?, Dokumente?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? ArtUntersuchung {
            get {
                XElement x = this.GetElement(ArtUntersuchungXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(ArtUntersuchungXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                }
                else {
                    this.SetElementWithValidation(ArtUntersuchungXName, value, "ArtUntersuchung", ArtUntersuchungLocalType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Bezeichnung, Erlaeuterung?, Umfeld, Standort?, ArtUntersuchung?, GWFlurabstand?, massgBodenart?, massgKfWert?, Bodenschichten?, Dokumente?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? GWFlurabstand {
            get {
                XElement x = this.GetElement(GWFlurabstandXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(GWFlurabstandXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                }
                else {
                    this.SetElementWithValidation(GWFlurabstandXName, value, "GWFlurabstand", GWFlurabstandLocalType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Bezeichnung, Erlaeuterung?, Umfeld, Standort?, ArtUntersuchung?, GWFlurabstand?, massgBodenart?, massgKfWert?, Bodenschichten?, Dokumente?)
        /// </para>
        /// </summary>
        public virtual string massgBodenart {
            get {
                XElement x = this.GetElement(massgBodenartXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(massgBodenartXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                else {
                    this.SetElementWithValidation(massgBodenartXName, value, "massgBodenart", massgBodenartLocalType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Bezeichnung, Erlaeuterung?, Umfeld, Standort?, ArtUntersuchung?, GWFlurabstand?, massgBodenart?, massgKfWert?, Bodenschichten?, Dokumente?)
        /// </para>
        /// </summary>
        public virtual System.Double? massgKfWert {
            get {
                XElement x = this.GetElement(massgKfWertXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetElement(massgKfWertXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Bezeichnung, Erlaeuterung?, Umfeld, Standort?, ArtUntersuchung?, GWFlurabstand?, massgBodenart?, massgKfWert?, Bodenschichten?, Dokumente?)
        /// </para>
        /// </summary>
        public virtual BodenschichtenLocalType Bodenschichten {
            get {
                XElement x = this.GetElement(BodenschichtenXName);
                return ((BodenschichtenLocalType)(x));
            }
            set {
                this.SetElement(BodenschichtenXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Bezeichnung, Erlaeuterung?, Umfeld, Standort?, ArtUntersuchung?, GWFlurabstand?, massgBodenart?, massgKfWert?, Bodenschichten?, Dokumente?)
        /// </para>
        /// </summary>
        public virtual DokumenteLocalType Dokumente {
            get {
                XElement x = this.GetElement(DokumenteXName);
                return ((DokumenteLocalType)(x));
            }
            set {
                this.SetElement(DokumenteXName, value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<BodenkennwerteType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(BezeichnungXName, typeof(string));
            localElementDictionary.Add(ErlaeuterungXName, typeof(string));
            localElementDictionary.Add(UmfeldXName, typeof(string));
            localElementDictionary.Add(StandortXName, typeof(StandortType));
            localElementDictionary.Add(ArtUntersuchungXName, typeof(decimal));
            localElementDictionary.Add(GWFlurabstandXName, typeof(decimal));
            localElementDictionary.Add(massgBodenartXName, typeof(string));
            localElementDictionary.Add(massgKfWertXName, typeof(double));
            localElementDictionary.Add(BodenschichtenXName, typeof(BodenschichtenLocalType));
            localElementDictionary.Add(DokumenteXName, typeof(DokumenteLocalType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        private class BezeichnungLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(4)), null, 0, 0, null, null, 30, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
            
            private BezeichnungLocalType() {
            }
        }
        
        private class UmfeldLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(4)), null, 0, 0, null, null, 30, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
            
            private UmfeldLocalType() {
            }
        }
        
        private class ArtUntersuchungLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(1040)), new object[] {
                            1m,
                            2m,
                            3m,
                            4m,
                            5m,
                            6m,
                            7m,
                            8m,
                            99m}, 0, 0, null, null, 0, null, null, 0, null, 2, XmlSchemaWhiteSpace.Collapse));
            
            private ArtUntersuchungLocalType() {
            }
        }
        
        private class GWFlurabstandLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(3200)), null, 2, 0, 1000m, null, 0, null, null, 0, null, 5, XmlSchemaWhiteSpace.Collapse));
            
            private GWFlurabstandLocalType() {
            }
        }
        
        private class massgBodenartLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(4)), null, 0, 0, null, null, 4, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
            
            private massgBodenartLocalType() {
            }
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Bodenschicht+)
        /// </para>
        /// </summary>
        public partial class BodenschichtenLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName BodenschichtXName = System.Xml.Linq.XName.Get("Bodenschicht", "http://www.bfr-abwasser.de");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XTypedList<BodenschichtType> BodenschichtField;
            
            private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("Bodenschichten", "http://www.bfr-abwasser.de");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;
            
		public static explicit operator BodenschichtenLocalType(XElement xe) { return XTypedServices.ToXTypedElement<BodenschichtenLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static BodenschichtenLocalType() {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(BodenschichtXName));
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (Bodenschicht+)
            /// </para>
            /// </summary>
            public BodenschichtenLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required, repeating
            /// </para>
            /// <para>
            /// Regular expression: (Bodenschicht+)
            /// </para>
            /// </summary>
            public virtual IList<BodenschichtType> Bodenschicht {
                get {
                    if ((this.BodenschichtField == null)) {
                        this.BodenschichtField = new XTypedList<BodenschichtType>(this, LinqToXsdTypeManager.Instance, BodenschichtXName);
                    }
                    return this.BodenschichtField;
                }
                set {
                    if ((value == null)) {
                        this.BodenschichtField = null;
                    }
                    else {
                        if ((this.BodenschichtField == null)) {
                            this.BodenschichtField = XTypedList<BodenschichtType>.Initialize(this, LinqToXsdTypeManager.Instance, value, BodenschichtXName);
                        }
                        else {
                            XTypedServices.SetList<BodenschichtType>(this.BodenschichtField, value);
                        }
                    }
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            System.Xml.Linq.XName IXMetaData.SchemaName {
                get {
                    return xName;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<BodenschichtenLocalType>(this);
            }
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(BodenschichtXName, typeof(BodenschichtType));
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return contentModel;
            }
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Dokument+)
        /// </para>
        /// </summary>
        public partial class DokumenteLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName DokumentXName = System.Xml.Linq.XName.Get("Dokument", "http://www.bfr-abwasser.de");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XTypedList<DokumenteType> DokumentField;
            
            private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("Dokumente", "http://www.bfr-abwasser.de");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;
            
		public static explicit operator DokumenteLocalType(XElement xe) { return XTypedServices.ToXTypedElement<DokumenteLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static DokumenteLocalType() {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(DokumentXName));
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (Dokument+)
            /// </para>
            /// </summary>
            public DokumenteLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required, repeating
            /// </para>
            /// <para>
            /// Regular expression: (Dokument+)
            /// </para>
            /// </summary>
            public virtual IList<DokumenteType> Dokument {
                get {
                    if ((this.DokumentField == null)) {
                        this.DokumentField = new XTypedList<DokumenteType>(this, LinqToXsdTypeManager.Instance, DokumentXName);
                    }
                    return this.DokumentField;
                }
                set {
                    if ((value == null)) {
                        this.DokumentField = null;
                    }
                    else {
                        if ((this.DokumentField == null)) {
                            this.DokumentField = XTypedList<DokumenteType>.Initialize(this, LinqToXsdTypeManager.Instance, value, DokumentXName);
                        }
                        else {
                            XTypedServices.SetList<DokumenteType>(this.DokumentField, value);
                        }
                    }
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            System.Xml.Linq.XName IXMetaData.SchemaName {
                get {
                    return xName;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<DokumenteLocalType>(this);
            }
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(DokumentXName, typeof(DokumenteType));
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return contentModel;
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (obereSchichtgrenze?, untereSchichtgrenze?, Bodenart?, KfWert?, Bestimmungsmethode?, Kommentar?)
    /// </para>
    /// </summary>
    public partial class BodenschichtType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName obereSchichtgrenzeXName = System.Xml.Linq.XName.Get("obereSchichtgrenze", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName untereSchichtgrenzeXName = System.Xml.Linq.XName.Get("untereSchichtgrenze", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName BodenartXName = System.Xml.Linq.XName.Get("Bodenart", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName KfWertXName = System.Xml.Linq.XName.Get("KfWert", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName BestimmungsmethodeXName = System.Xml.Linq.XName.Get("Bestimmungsmethode", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName KommentarXName = System.Xml.Linq.XName.Get("Kommentar", "http://www.bfr-abwasser.de");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("BodenschichtType", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator BodenschichtType(XElement xe) { return XTypedServices.ToXTypedElement<BodenschichtType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static BodenschichtType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(obereSchichtgrenzeXName), new NamedContentModelEntity(untereSchichtgrenzeXName), new NamedContentModelEntity(BodenartXName), new NamedContentModelEntity(KfWertXName), new NamedContentModelEntity(BestimmungsmethodeXName), new NamedContentModelEntity(KommentarXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (obereSchichtgrenze?, untereSchichtgrenze?, Bodenart?, KfWert?, Bestimmungsmethode?, Kommentar?)
        /// </para>
        /// </summary>
        public BodenschichtType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (obereSchichtgrenze?, untereSchichtgrenze?, Bodenart?, KfWert?, Bestimmungsmethode?, Kommentar?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? obereSchichtgrenze {
            get {
                XElement x = this.GetElement(obereSchichtgrenzeXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(obereSchichtgrenzeXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                }
                else {
                    this.SetElementWithValidation(obereSchichtgrenzeXName, value, "obereSchichtgrenze", obereSchichtgrenzeLocalType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (obereSchichtgrenze?, untereSchichtgrenze?, Bodenart?, KfWert?, Bestimmungsmethode?, Kommentar?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? untereSchichtgrenze {
            get {
                XElement x = this.GetElement(untereSchichtgrenzeXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(untereSchichtgrenzeXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
                }
                else {
                    this.SetElementWithValidation(untereSchichtgrenzeXName, value, "untereSchichtgrenze", untereSchichtgrenzeLocalType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (obereSchichtgrenze?, untereSchichtgrenze?, Bodenart?, KfWert?, Bestimmungsmethode?, Kommentar?)
        /// </para>
        /// </summary>
        public virtual string Bodenart {
            get {
                XElement x = this.GetElement(BodenartXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(BodenartXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                else {
                    this.SetElementWithValidation(BodenartXName, value, "Bodenart", BodenartLocalType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (obereSchichtgrenze?, untereSchichtgrenze?, Bodenart?, KfWert?, Bestimmungsmethode?, Kommentar?)
        /// </para>
        /// </summary>
        public virtual System.Double? KfWert {
            get {
                XElement x = this.GetElement(KfWertXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetElement(KfWertXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (obereSchichtgrenze?, untereSchichtgrenze?, Bodenart?, KfWert?, Bestimmungsmethode?, Kommentar?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? Bestimmungsmethode {
            get {
                XElement x = this.GetElement(BestimmungsmethodeXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(BestimmungsmethodeXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                }
                else {
                    this.SetElementWithValidation(BestimmungsmethodeXName, value, "Bestimmungsmethode", global::www.bfr.abwasser.de.BestimmungkfType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (obereSchichtgrenze?, untereSchichtgrenze?, Bodenart?, KfWert?, Bestimmungsmethode?, Kommentar?)
        /// </para>
        /// </summary>
        public virtual string Kommentar {
            get {
                XElement x = this.GetElement(KommentarXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
            set {
                this.SetElement(KommentarXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<BodenschichtType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(obereSchichtgrenzeXName, typeof(decimal));
            localElementDictionary.Add(untereSchichtgrenzeXName, typeof(decimal));
            localElementDictionary.Add(BodenartXName, typeof(string));
            localElementDictionary.Add(KfWertXName, typeof(double));
            localElementDictionary.Add(BestimmungsmethodeXName, typeof(decimal));
            localElementDictionary.Add(KommentarXName, typeof(string));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        private class obereSchichtgrenzeLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(3200)), null, 2, 0, 100m, null, 0, null, null, 0, null, 4, XmlSchemaWhiteSpace.Collapse));
            
            private obereSchichtgrenzeLocalType() {
            }
        }
        
        private class untereSchichtgrenzeLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(3200)), null, 2, 0, 100m, null, 0, null, null, 0, null, 4, XmlSchemaWhiteSpace.Collapse));
            
            private untereSchichtgrenzeLocalType() {
            }
        }
        
        private class BodenartLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(4)), null, 0, 0, null, null, 4, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
            
            private BodenartLocalType() {
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Rechtswert, Hochwert, HoeheGOK, Lagegenauigkeitsstufe)
    /// </para>
    /// </summary>
    public partial class StandortType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName RechtswertXName = System.Xml.Linq.XName.Get("Rechtswert", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName HochwertXName = System.Xml.Linq.XName.Get("Hochwert", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName HoeheGOKXName = System.Xml.Linq.XName.Get("HoeheGOK", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName LagegenauigkeitsstufeXName = System.Xml.Linq.XName.Get("Lagegenauigkeitsstufe", "http://www.bfr-abwasser.de");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("StandortType", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator StandortType(XElement xe) { return XTypedServices.ToXTypedElement<StandortType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static StandortType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(RechtswertXName), new NamedContentModelEntity(HochwertXName), new NamedContentModelEntity(HoeheGOKXName), new NamedContentModelEntity(LagegenauigkeitsstufeXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Rechtswert, Hochwert, HoeheGOK, Lagegenauigkeitsstufe)
        /// </para>
        /// </summary>
        public StandortType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (Rechtswert, Hochwert, HoeheGOK, Lagegenauigkeitsstufe)
        /// </para>
        /// </summary>
        public virtual decimal Rechtswert {
            get {
                XElement x = this.GetElement(RechtswertXName);
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
            set {
                this.SetElementWithValidation(RechtswertXName, value, "Rechtswert", RechtswertLocalType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (Rechtswert, Hochwert, HoeheGOK, Lagegenauigkeitsstufe)
        /// </para>
        /// </summary>
        public virtual decimal Hochwert {
            get {
                XElement x = this.GetElement(HochwertXName);
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
            set {
                this.SetElementWithValidation(HochwertXName, value, "Hochwert", HochwertLocalType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (Rechtswert, Hochwert, HoeheGOK, Lagegenauigkeitsstufe)
        /// </para>
        /// </summary>
        public virtual decimal HoeheGOK {
            get {
                XElement x = this.GetElement(HoeheGOKXName);
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
            set {
                this.SetElementWithValidation(HoeheGOKXName, value, "HoeheGOK", HoeheGOKLocalType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (Rechtswert, Hochwert, HoeheGOK, Lagegenauigkeitsstufe)
        /// </para>
        /// </summary>
        public virtual decimal Lagegenauigkeitsstufe {
            get {
                XElement x = this.GetElement(LagegenauigkeitsstufeXName);
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                this.SetElementWithValidation(LagegenauigkeitsstufeXName, value, "Lagegenauigkeitsstufe", LagegenauigkeitsstufeLocalType.TypeDefinition);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<StandortType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(RechtswertXName, typeof(decimal));
            localElementDictionary.Add(HochwertXName, typeof(decimal));
            localElementDictionary.Add(HoeheGOKXName, typeof(decimal));
            localElementDictionary.Add(LagegenauigkeitsstufeXName, typeof(decimal));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        private class RechtswertLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(3200)), null, 3, 0, 100000000m, null, 0, null, null, 0, null, 11, XmlSchemaWhiteSpace.Collapse));
            
            private RechtswertLocalType() {
            }
        }
        
        private class HochwertLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(3200)), null, 3, 0, 10000000m, null, 0, null, null, 0, null, 10, XmlSchemaWhiteSpace.Collapse));
            
            private HochwertLocalType() {
            }
        }
        
        private class HoeheGOKLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(3200)), null, 3, 0, 10000m, null, 0, null, null, 0, null, 7, XmlSchemaWhiteSpace.Collapse));
            
            private HoeheGOKLocalType() {
            }
        }
        
        private class LagegenauigkeitsstufeLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(1360)), new object[] {
                            0m,
                            1m,
                            2m,
                            3m,
                            4m,
                            5m,
                            6m,
                            7m,
                            8m,
                            9m}, 0, 0, null, 9m, 0, null, 0m, 0, null, 1, XmlSchemaWhiteSpace.Collapse));
            
            private LagegenauigkeitsstufeLocalType() {
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Kennung, Beschreibung?, MassstabszahlMin, MassstabszahlMax, Praesentationsobjekt+)
    /// </para>
    /// </summary>
    public partial class PraesentationsdatenType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName KennungXName = System.Xml.Linq.XName.Get("Kennung", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName BeschreibungXName = System.Xml.Linq.XName.Get("Beschreibung", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName MassstabszahlMinXName = System.Xml.Linq.XName.Get("MassstabszahlMin", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName MassstabszahlMaxXName = System.Xml.Linq.XName.Get("MassstabszahlMax", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName PraesentationsobjektXName = System.Xml.Linq.XName.Get("Praesentationsobjekt", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<PraesentationsobjektType> PraesentationsobjektField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("PraesentationsdatenType", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator PraesentationsdatenType(XElement xe) { return XTypedServices.ToXTypedElement<PraesentationsdatenType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static PraesentationsdatenType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(KennungXName), new NamedContentModelEntity(BeschreibungXName), new NamedContentModelEntity(MassstabszahlMinXName), new NamedContentModelEntity(MassstabszahlMaxXName), new NamedContentModelEntity(PraesentationsobjektXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Kennung, Beschreibung?, MassstabszahlMin, MassstabszahlMax, Praesentationsobjekt+)
        /// </para>
        /// </summary>
        public PraesentationsdatenType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (Kennung, Beschreibung?, MassstabszahlMin, MassstabszahlMax, Praesentationsobjekt+)
        /// </para>
        /// </summary>
        public virtual string Kennung {
            get {
                XElement x = this.GetElement(KennungXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(KennungXName, value, "Kennung", KennungLocalType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Kennung, Beschreibung?, MassstabszahlMin, MassstabszahlMax, Praesentationsobjekt+)
        /// </para>
        /// </summary>
        public virtual string Beschreibung {
            get {
                XElement x = this.GetElement(BeschreibungXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(BeschreibungXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                else {
                    this.SetElementWithValidation(BeschreibungXName, value, "Beschreibung", BeschreibungLocalType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (Kennung, Beschreibung?, MassstabszahlMin, MassstabszahlMax, Praesentationsobjekt+)
        /// </para>
        /// </summary>
        public virtual decimal MassstabszahlMin {
            get {
                XElement x = this.GetElement(MassstabszahlMinXName);
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                this.SetElementWithValidation(MassstabszahlMinXName, value, "MassstabszahlMin", MassstabszahlMinLocalType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (Kennung, Beschreibung?, MassstabszahlMin, MassstabszahlMax, Praesentationsobjekt+)
        /// </para>
        /// </summary>
        public virtual decimal MassstabszahlMax {
            get {
                XElement x = this.GetElement(MassstabszahlMaxXName);
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                this.SetElementWithValidation(MassstabszahlMaxXName, value, "MassstabszahlMax", MassstabszahlMaxLocalType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Kennung, Beschreibung?, MassstabszahlMin, MassstabszahlMax, Praesentationsobjekt+)
        /// </para>
        /// </summary>
        public virtual IList<PraesentationsobjektType> Praesentationsobjekt {
            get {
                if ((this.PraesentationsobjektField == null)) {
                    this.PraesentationsobjektField = new XTypedList<PraesentationsobjektType>(this, LinqToXsdTypeManager.Instance, PraesentationsobjektXName);
                }
                return this.PraesentationsobjektField;
            }
            set {
                if ((value == null)) {
                    this.PraesentationsobjektField = null;
                }
                else {
                    if ((this.PraesentationsobjektField == null)) {
                        this.PraesentationsobjektField = XTypedList<PraesentationsobjektType>.Initialize(this, LinqToXsdTypeManager.Instance, value, PraesentationsobjektXName);
                    }
                    else {
                        XTypedServices.SetList<PraesentationsobjektType>(this.PraesentationsobjektField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<PraesentationsdatenType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(KennungXName, typeof(string));
            localElementDictionary.Add(BeschreibungXName, typeof(string));
            localElementDictionary.Add(MassstabszahlMinXName, typeof(decimal));
            localElementDictionary.Add(MassstabszahlMaxXName, typeof(decimal));
            localElementDictionary.Add(PraesentationsobjektXName, typeof(PraesentationsobjektType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        private class KennungLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(6)), null, 0, 0, null, null, 5, null, null, 5, null, 0, XmlSchemaWhiteSpace.Preserve));
            
            private KennungLocalType() {
            }
        }
        
        private class BeschreibungLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(4)), null, 0, 0, null, null, 100, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
            
            private BeschreibungLocalType() {
            }
        }
        
        private class MassstabszahlMinLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(1024)), null, 0, 0, null, null, 0, null, null, 0, null, 7, XmlSchemaWhiteSpace.Collapse));
            
            private MassstabszahlMinLocalType() {
            }
        }
        
        private class MassstabszahlMaxLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(1024)), null, 0, 0, null, null, 0, null, null, 0, null, 7, XmlSchemaWhiteSpace.Collapse));
            
            private MassstabszahlMaxLocalType() {
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Objektbezeichnung, dientZurDarstellungVon, (Textobjekt | Symbolobjekt))
    /// </para>
    /// </summary>
    public partial class PraesentationsobjektType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ObjektbezeichnungXName = System.Xml.Linq.XName.Get("Objektbezeichnung", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName dientZurDarstellungVonXName = System.Xml.Linq.XName.Get("dientZurDarstellungVon", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TextobjektXName = System.Xml.Linq.XName.Get("Textobjekt", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName SymbolobjektXName = System.Xml.Linq.XName.Get("Symbolobjekt", "http://www.bfr-abwasser.de");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("PraesentationsobjektType", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator PraesentationsobjektType(XElement xe) { return XTypedServices.ToXTypedElement<PraesentationsobjektType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static PraesentationsobjektType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(ObjektbezeichnungXName), new NamedContentModelEntity(dientZurDarstellungVonXName), new ChoiceContentModelEntity(new NamedContentModelEntity(TextobjektXName), new NamedContentModelEntity(SymbolobjektXName)));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Objektbezeichnung, dientZurDarstellungVon, (Textobjekt | Symbolobjekt))
        /// </para>
        /// </summary>
        public PraesentationsobjektType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (Objektbezeichnung, dientZurDarstellungVon, (Textobjekt | Symbolobjekt))
        /// </para>
        /// </summary>
        public virtual string Objektbezeichnung {
            get {
                XElement x = this.GetElement(ObjektbezeichnungXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(ObjektbezeichnungXName, value, "Objektbezeichnung", ObjektbezeichnungLocalType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (Objektbezeichnung, dientZurDarstellungVon, (Textobjekt | Symbolobjekt))
        /// </para>
        /// </summary>
        public virtual ReferenzType dientZurDarstellungVon {
            get {
                XElement x = this.GetElement(dientZurDarstellungVonXName);
                return ((ReferenzType)(x));
            }
            set {
                this.SetElement(dientZurDarstellungVonXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (Objektbezeichnung, dientZurDarstellungVon, (Textobjekt | Symbolobjekt))
        /// </para>
        /// </summary>
        public virtual TextobjektType Textobjekt {
            get {
                XElement x = this.GetElement(TextobjektXName);
                return ((TextobjektType)(x));
            }
            set {
                this.SetElement(TextobjektXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (Objektbezeichnung, dientZurDarstellungVon, (Textobjekt | Symbolobjekt))
        /// </para>
        /// </summary>
        public virtual SymbolobjektType Symbolobjekt {
            get {
                XElement x = this.GetElement(SymbolobjektXName);
                return ((SymbolobjektType)(x));
            }
            set {
                this.SetElement(SymbolobjektXName, value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<PraesentationsobjektType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(ObjektbezeichnungXName, typeof(string));
            localElementDictionary.Add(dientZurDarstellungVonXName, typeof(ReferenzType));
            localElementDictionary.Add(TextobjektXName, typeof(TextobjektType));
            localElementDictionary.Add(SymbolobjektXName, typeof(SymbolobjektType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        private class ObjektbezeichnungLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(4)), null, 0, 0, null, null, 30, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
            
            private ObjektbezeichnungLocalType() {
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Kollektivkennung, Objektbezeichnung)
    /// </para>
    /// </summary>
    public abstract partial class ReferenzType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName KollektivkennungXName = System.Xml.Linq.XName.Get("Kollektivkennung", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ObjektbezeichnungXName = System.Xml.Linq.XName.Get("Objektbezeichnung", "http://www.bfr-abwasser.de");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("ReferenzType", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator ReferenzType(XElement xe) {  return (ReferenzType)XTypedServices.ToXTypedElement(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static ReferenzType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(KollektivkennungXName), new NamedContentModelEntity(ObjektbezeichnungXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Kollektivkennung, Objektbezeichnung)
        /// </para>
        /// </summary>
        public ReferenzType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (Kollektivkennung, Objektbezeichnung)
        /// </para>
        /// </summary>
        public virtual string Kollektivkennung {
            get {
                XElement x = this.GetElement(KollektivkennungXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(KollektivkennungXName, value, "Kollektivkennung", KollektivkennungLocalType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (Kollektivkennung, Objektbezeichnung)
        /// </para>
        /// </summary>
        public virtual string Objektbezeichnung {
            get {
                XElement x = this.GetElement(ObjektbezeichnungXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(ObjektbezeichnungXName, value, "Objektbezeichnung", ObjektbezeichnungLocalType.TypeDefinition);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(KollektivkennungXName, typeof(string));
            localElementDictionary.Add(ObjektbezeichnungXName, typeof(string));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        private class KollektivkennungLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(6)), null, 0, 0, null, null, 5, null, null, 5, null, 0, XmlSchemaWhiteSpace.Preserve));
            
            private KollektivkennungLocalType() {
            }
        }
        
        private class ObjektbezeichnungLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(4)), null, 0, 0, null, null, 30, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
            
            private ObjektbezeichnungLocalType() {
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Kollektivkennung, Objektbezeichnung, Objektart)
    /// </para>
    /// </summary>
    public partial class StammdatenReferenzType : global::www.bfr.abwasser.de.ReferenzType, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ObjektartXName = System.Xml.Linq.XName.Get("Objektart", "http://www.bfr-abwasser.de");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("StammdatenReferenzType", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator StammdatenReferenzType(XElement xe) { return XTypedServices.ToXTypedElement<StammdatenReferenzType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static StammdatenReferenzType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(KollektivkennungXName), new NamedContentModelEntity(ObjektbezeichnungXName), new NamedContentModelEntity(ObjektartXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Kollektivkennung, Objektbezeichnung, Objektart)
        /// </para>
        /// </summary>
        public StammdatenReferenzType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (Kollektivkennung, Objektbezeichnung, Objektart)
        /// </para>
        /// </summary>
        public virtual decimal Objektart {
            get {
                XElement x = this.GetElement(ObjektartXName);
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                this.SetElementWithValidation(ObjektartXName, value, "Objektart", global::www.bfr.abwasser.de.ObjektartType.TypeDefinition);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<StammdatenReferenzType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(KollektivkennungXName, typeof(string));
            localElementDictionary.Add(ObjektbezeichnungXName, typeof(string));
            localElementDictionary.Add(ObjektartXName, typeof(decimal));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Kollektivkennung, Objektbezeichnung, Objektart, BezeichnungMassnahme)
    /// </para>
    /// </summary>
    public partial class StammdatenMassnahmeReferenzType : global::www.bfr.abwasser.de.StammdatenReferenzType, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName BezeichnungMassnahmeXName = System.Xml.Linq.XName.Get("BezeichnungMassnahme", "http://www.bfr-abwasser.de");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("StammdatenMassnahmeReferenzType", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator StammdatenMassnahmeReferenzType(XElement xe) { return XTypedServices.ToXTypedElement<StammdatenMassnahmeReferenzType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static StammdatenMassnahmeReferenzType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(KollektivkennungXName), new NamedContentModelEntity(ObjektbezeichnungXName), new NamedContentModelEntity(ObjektartXName), new NamedContentModelEntity(BezeichnungMassnahmeXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Kollektivkennung, Objektbezeichnung, Objektart, BezeichnungMassnahme)
        /// </para>
        /// </summary>
        public StammdatenMassnahmeReferenzType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (Kollektivkennung, Objektbezeichnung, Objektart, BezeichnungMassnahme)
        /// </para>
        /// </summary>
        public virtual string BezeichnungMassnahme {
            get {
                XElement x = this.GetElement(BezeichnungMassnahmeXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(BezeichnungMassnahmeXName, value, "BezeichnungMassnahme", BezeichnungMassnahmeLocalType.TypeDefinition);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<StammdatenMassnahmeReferenzType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(KollektivkennungXName, typeof(string));
            localElementDictionary.Add(ObjektbezeichnungXName, typeof(string));
            localElementDictionary.Add(ObjektartXName, typeof(decimal));
            localElementDictionary.Add(BezeichnungMassnahmeXName, typeof(string));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        private class BezeichnungMassnahmeLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(4)), null, 0, 0, null, null, 5, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
            
            private BezeichnungMassnahmeLocalType() {
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Kollektivkennung, Objektbezeichnung, Objektart, Index)
    /// </para>
    /// </summary>
    public partial class DeckelReferenzType : global::www.bfr.abwasser.de.StammdatenReferenzType, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName IndexXName = System.Xml.Linq.XName.Get("Index", "http://www.bfr-abwasser.de");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("DeckelReferenzType", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator DeckelReferenzType(XElement xe) { return XTypedServices.ToXTypedElement<DeckelReferenzType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static DeckelReferenzType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(KollektivkennungXName), new NamedContentModelEntity(ObjektbezeichnungXName), new NamedContentModelEntity(ObjektartXName), new NamedContentModelEntity(IndexXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Kollektivkennung, Objektbezeichnung, Objektart, Index)
        /// </para>
        /// </summary>
        public DeckelReferenzType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (Kollektivkennung, Objektbezeichnung, Objektart, Index)
        /// </para>
        /// </summary>
        public virtual decimal Index {
            get {
                XElement x = this.GetElement(IndexXName);
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                this.SetElementWithValidation(IndexXName, value, "Index", IndexLocalType.TypeDefinition);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<DeckelReferenzType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(KollektivkennungXName, typeof(string));
            localElementDictionary.Add(ObjektbezeichnungXName, typeof(string));
            localElementDictionary.Add(ObjektartXName, typeof(decimal));
            localElementDictionary.Add(IndexXName, typeof(decimal));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        private class IndexLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(1024)), null, 0, 0, null, null, 0, null, null, 0, null, 2, XmlSchemaWhiteSpace.Collapse));
            
            private IndexLocalType() {
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Kollektivkennung, Objektbezeichnung, Anlagentyp, Inspektionsrichtung?)
    /// </para>
    /// </summary>
    public partial class ZustandsdatenReferenzType : global::www.bfr.abwasser.de.ReferenzType, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName AnlagentypXName = System.Xml.Linq.XName.Get("Anlagentyp", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName InspektionsrichtungXName = System.Xml.Linq.XName.Get("Inspektionsrichtung", "http://www.bfr-abwasser.de");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("ZustandsdatenReferenzType", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator ZustandsdatenReferenzType(XElement xe) { return XTypedServices.ToXTypedElement<ZustandsdatenReferenzType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static ZustandsdatenReferenzType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(KollektivkennungXName), new NamedContentModelEntity(ObjektbezeichnungXName), new NamedContentModelEntity(AnlagentypXName), new NamedContentModelEntity(InspektionsrichtungXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Kollektivkennung, Objektbezeichnung, Anlagentyp, Inspektionsrichtung?)
        /// </para>
        /// </summary>
        public ZustandsdatenReferenzType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (Kollektivkennung, Objektbezeichnung, Anlagentyp, Inspektionsrichtung?)
        /// </para>
        /// </summary>
        public virtual decimal Anlagentyp {
            get {
                XElement x = this.GetElement(AnlagentypXName);
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                this.SetElementWithValidation(AnlagentypXName, value, "Anlagentyp", global::www.bfr.abwasser.de.AnlagentypType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Kollektivkennung, Objektbezeichnung, Anlagentyp, Inspektionsrichtung?)
        /// </para>
        /// </summary>
        public virtual string Inspektionsrichtung {
            get {
                XElement x = this.GetElement(InspektionsrichtungXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(InspektionsrichtungXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                else {
                    this.SetElementWithValidation(InspektionsrichtungXName, value, "Inspektionsrichtung", global::www.bfr.abwasser.de.InspektionsrichtungType.TypeDefinition);
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ZustandsdatenReferenzType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(KollektivkennungXName, typeof(string));
            localElementDictionary.Add(ObjektbezeichnungXName, typeof(string));
            localElementDictionary.Add(AnlagentypXName, typeof(decimal));
            localElementDictionary.Add(InspektionsrichtungXName, typeof(string));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Kollektivkennung, Objektbezeichnung, Anlagentyp, Inspektionsrichtung?, Index)
    /// </para>
    /// </summary>
    public partial class InspektionsdatenReferenzType : global::www.bfr.abwasser.de.ZustandsdatenReferenzType, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName IndexXName = System.Xml.Linq.XName.Get("Index", "http://www.bfr-abwasser.de");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("InspektionsdatenReferenzType", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator InspektionsdatenReferenzType(XElement xe) { return XTypedServices.ToXTypedElement<InspektionsdatenReferenzType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static InspektionsdatenReferenzType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(KollektivkennungXName), new NamedContentModelEntity(ObjektbezeichnungXName), new NamedContentModelEntity(AnlagentypXName), new NamedContentModelEntity(InspektionsrichtungXName), new NamedContentModelEntity(IndexXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Kollektivkennung, Objektbezeichnung, Anlagentyp, Inspektionsrichtung?, Index)
        /// </para>
        /// </summary>
        public InspektionsdatenReferenzType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (Kollektivkennung, Objektbezeichnung, Anlagentyp, Inspektionsrichtung?, Index)
        /// </para>
        /// </summary>
        public virtual decimal Index {
            get {
                XElement x = this.GetElement(IndexXName);
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                this.SetElementWithValidation(IndexXName, value, "Index", IndexLocalType.TypeDefinition);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<InspektionsdatenReferenzType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(KollektivkennungXName, typeof(string));
            localElementDictionary.Add(ObjektbezeichnungXName, typeof(string));
            localElementDictionary.Add(AnlagentypXName, typeof(decimal));
            localElementDictionary.Add(InspektionsrichtungXName, typeof(string));
            localElementDictionary.Add(IndexXName, typeof(decimal));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        private class IndexLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(1024)), null, 0, 0, null, null, 0, null, null, 0, null, 2, XmlSchemaWhiteSpace.Collapse));
            
            private IndexLocalType() {
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Kollektivkennung, Objektbezeichnung, Rechenlaufkennung, HydObjektTyp)
    /// </para>
    /// </summary>
    public partial class BerechnungsergebnisReferenzType : global::www.bfr.abwasser.de.ReferenzType, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName RechenlaufkennungXName = System.Xml.Linq.XName.Get("Rechenlaufkennung", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName HydObjektTypXName = System.Xml.Linq.XName.Get("HydObjektTyp", "http://www.bfr-abwasser.de");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("BerechnungsergebnisReferenzType", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator BerechnungsergebnisReferenzType(XElement xe) { return XTypedServices.ToXTypedElement<BerechnungsergebnisReferenzType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static BerechnungsergebnisReferenzType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(KollektivkennungXName), new NamedContentModelEntity(ObjektbezeichnungXName), new NamedContentModelEntity(RechenlaufkennungXName), new NamedContentModelEntity(HydObjektTypXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Kollektivkennung, Objektbezeichnung, Rechenlaufkennung, HydObjektTyp)
        /// </para>
        /// </summary>
        public BerechnungsergebnisReferenzType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (Kollektivkennung, Objektbezeichnung, Rechenlaufkennung, HydObjektTyp)
        /// </para>
        /// </summary>
        public virtual string Rechenlaufkennung {
            get {
                XElement x = this.GetElement(RechenlaufkennungXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(RechenlaufkennungXName, value, "Rechenlaufkennung", RechenlaufkennungLocalType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (Kollektivkennung, Objektbezeichnung, Rechenlaufkennung, HydObjektTyp)
        /// </para>
        /// </summary>
        public virtual decimal HydObjektTyp {
            get {
                XElement x = this.GetElement(HydObjektTypXName);
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                this.SetElementWithValidation(HydObjektTypXName, value, "HydObjektTyp", global::www.bfr.abwasser.de.HydraulikObjektTypType.TypeDefinition);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<BerechnungsergebnisReferenzType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(KollektivkennungXName, typeof(string));
            localElementDictionary.Add(ObjektbezeichnungXName, typeof(string));
            localElementDictionary.Add(RechenlaufkennungXName, typeof(string));
            localElementDictionary.Add(HydObjektTypXName, typeof(decimal));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        private class RechenlaufkennungLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(4)), null, 0, 0, null, null, 30, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
            
            private RechenlaufkennungLocalType() {
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Kollektivkennung, Objektbezeichnung, Flaechennummer)
    /// </para>
    /// </summary>
    public partial class HydraulikflaecheReferenzType : global::www.bfr.abwasser.de.ReferenzType, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName FlaechennummerXName = System.Xml.Linq.XName.Get("Flaechennummer", "http://www.bfr-abwasser.de");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("HydraulikflaecheReferenzType", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator HydraulikflaecheReferenzType(XElement xe) { return XTypedServices.ToXTypedElement<HydraulikflaecheReferenzType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static HydraulikflaecheReferenzType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(KollektivkennungXName), new NamedContentModelEntity(ObjektbezeichnungXName), new NamedContentModelEntity(FlaechennummerXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Kollektivkennung, Objektbezeichnung, Flaechennummer)
        /// </para>
        /// </summary>
        public HydraulikflaecheReferenzType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (Kollektivkennung, Objektbezeichnung, Flaechennummer)
        /// </para>
        /// </summary>
        public virtual decimal Flaechennummer {
            get {
                XElement x = this.GetElement(FlaechennummerXName);
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                this.SetElementWithValidation(FlaechennummerXName, value, "Flaechennummer", FlaechennummerLocalType.TypeDefinition);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<HydraulikflaecheReferenzType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(KollektivkennungXName, typeof(string));
            localElementDictionary.Add(ObjektbezeichnungXName, typeof(string));
            localElementDictionary.Add(FlaechennummerXName, typeof(decimal));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        private class FlaechennummerLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(1024)), null, 0, 0, null, null, 0, null, null, 0, null, 10, XmlSchemaWhiteSpace.Collapse));
            
            private FlaechennummerLocalType() {
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Inhalt, Typ, Position, Drehwinkel, HorizontaleAusrichtung, VertikaleAusrichtung, Hoehe, Bezugslinie?)
    /// </para>
    /// </summary>
    public partial class TextobjektType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName InhaltXName = System.Xml.Linq.XName.Get("Inhalt", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TypXName = System.Xml.Linq.XName.Get("Typ", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName PositionXName = System.Xml.Linq.XName.Get("Position", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName DrehwinkelXName = System.Xml.Linq.XName.Get("Drehwinkel", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName HorizontaleAusrichtungXName = System.Xml.Linq.XName.Get("HorizontaleAusrichtung", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName VertikaleAusrichtungXName = System.Xml.Linq.XName.Get("VertikaleAusrichtung", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName HoeheXName = System.Xml.Linq.XName.Get("Hoehe", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName BezugslinieXName = System.Xml.Linq.XName.Get("Bezugslinie", "http://www.bfr-abwasser.de");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("TextobjektType", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator TextobjektType(XElement xe) { return XTypedServices.ToXTypedElement<TextobjektType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static TextobjektType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(InhaltXName), new NamedContentModelEntity(TypXName), new NamedContentModelEntity(PositionXName), new NamedContentModelEntity(DrehwinkelXName), new NamedContentModelEntity(HorizontaleAusrichtungXName), new NamedContentModelEntity(VertikaleAusrichtungXName), new NamedContentModelEntity(HoeheXName), new NamedContentModelEntity(BezugslinieXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Inhalt, Typ, Position, Drehwinkel, HorizontaleAusrichtung, VertikaleAusrichtung, Hoehe, Bezugslinie?)
        /// </para>
        /// </summary>
        public TextobjektType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (Inhalt, Typ, Position, Drehwinkel, HorizontaleAusrichtung, VertikaleAusrichtung, Hoehe, Bezugslinie?)
        /// </para>
        /// </summary>
        public virtual string Inhalt {
            get {
                XElement x = this.GetElement(InhaltXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElement(InhaltXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (Inhalt, Typ, Position, Drehwinkel, HorizontaleAusrichtung, VertikaleAusrichtung, Hoehe, Bezugslinie?)
        /// </para>
        /// </summary>
        public virtual string Typ {
            get {
                XElement x = this.GetElement(TypXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElement(TypXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (Inhalt, Typ, Position, Drehwinkel, HorizontaleAusrichtung, VertikaleAusrichtung, Hoehe, Bezugslinie?)
        /// </para>
        /// </summary>
        public virtual PositionType Position {
            get {
                XElement x = this.GetElement(PositionXName);
                return ((PositionType)(x));
            }
            set {
                this.SetElement(PositionXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (Inhalt, Typ, Position, Drehwinkel, HorizontaleAusrichtung, VertikaleAusrichtung, Hoehe, Bezugslinie?)
        /// </para>
        /// </summary>
        public virtual decimal Drehwinkel {
            get {
                XElement x = this.GetElement(DrehwinkelXName);
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
            set {
                this.SetElementWithValidation(DrehwinkelXName, value, "Drehwinkel", global::www.bfr.abwasser.de.Winkel.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (Inhalt, Typ, Position, Drehwinkel, HorizontaleAusrichtung, VertikaleAusrichtung, Hoehe, Bezugslinie?)
        /// </para>
        /// </summary>
        public virtual www.bfr.abwasser.de.TextausrichtungHorizontalType HorizontaleAusrichtung {
            get {
                XElement x = this.GetElement(HorizontaleAusrichtungXName);
                return ((www.bfr.abwasser.de.TextausrichtungHorizontalType)(Enum.Parse(typeof(www.bfr.abwasser.de.TextausrichtungHorizontalType), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetElementWithValidation(HorizontaleAusrichtungXName, value.ToString(), "HorizontaleAusrichtung", global::www.bfr.abwasser.de.TextausrichtungHorizontalTypeValidator.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (Inhalt, Typ, Position, Drehwinkel, HorizontaleAusrichtung, VertikaleAusrichtung, Hoehe, Bezugslinie?)
        /// </para>
        /// </summary>
        public virtual www.bfr.abwasser.de.TextausrichtungVertikalType VertikaleAusrichtung {
            get {
                XElement x = this.GetElement(VertikaleAusrichtungXName);
                return ((www.bfr.abwasser.de.TextausrichtungVertikalType)(Enum.Parse(typeof(www.bfr.abwasser.de.TextausrichtungVertikalType), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetElementWithValidation(VertikaleAusrichtungXName, value.ToString(), "VertikaleAusrichtung", global::www.bfr.abwasser.de.TextausrichtungVertikalTypeValidator.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (Inhalt, Typ, Position, Drehwinkel, HorizontaleAusrichtung, VertikaleAusrichtung, Hoehe, Bezugslinie?)
        /// </para>
        /// </summary>
        public virtual decimal Hoehe {
            get {
                XElement x = this.GetElement(HoeheXName);
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
            set {
                this.SetElementWithValidation(HoeheXName, value, "Hoehe", HoeheLocalType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Inhalt, Typ, Position, Drehwinkel, HorizontaleAusrichtung, VertikaleAusrichtung, Hoehe, Bezugslinie?)
        /// </para>
        /// </summary>
        public virtual System.Boolean? Bezugslinie {
            get {
                XElement x = this.GetElement(BezugslinieXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
            set {
                this.SetElement(BezugslinieXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<TextobjektType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(InhaltXName, typeof(string));
            localElementDictionary.Add(TypXName, typeof(string));
            localElementDictionary.Add(PositionXName, typeof(PositionType));
            localElementDictionary.Add(DrehwinkelXName, typeof(decimal));
            localElementDictionary.Add(HorizontaleAusrichtungXName, typeof(string));
            localElementDictionary.Add(VertikaleAusrichtungXName, typeof(string));
            localElementDictionary.Add(HoeheXName, typeof(decimal));
            localElementDictionary.Add(BezugslinieXName, typeof(bool));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        private class HoeheLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(3072)), null, 3, 0, null, null, 0, null, null, 0, null, 11, XmlSchemaWhiteSpace.Collapse));
            
            private HoeheLocalType() {
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Typ, Position, Drehwinkel)
    /// </para>
    /// </summary>
    public partial class SymbolobjektType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TypXName = System.Xml.Linq.XName.Get("Typ", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName PositionXName = System.Xml.Linq.XName.Get("Position", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName DrehwinkelXName = System.Xml.Linq.XName.Get("Drehwinkel", "http://www.bfr-abwasser.de");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("SymbolobjektType", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator SymbolobjektType(XElement xe) { return XTypedServices.ToXTypedElement<SymbolobjektType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static SymbolobjektType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(TypXName), new NamedContentModelEntity(PositionXName), new NamedContentModelEntity(DrehwinkelXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Typ, Position, Drehwinkel)
        /// </para>
        /// </summary>
        public SymbolobjektType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (Typ, Position, Drehwinkel)
        /// </para>
        /// </summary>
        public virtual string Typ {
            get {
                XElement x = this.GetElement(TypXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElement(TypXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (Typ, Position, Drehwinkel)
        /// </para>
        /// </summary>
        public virtual PositionType Position {
            get {
                XElement x = this.GetElement(PositionXName);
                return ((PositionType)(x));
            }
            set {
                this.SetElement(PositionXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (Typ, Position, Drehwinkel)
        /// </para>
        /// </summary>
        public virtual decimal Drehwinkel {
            get {
                XElement x = this.GetElement(DrehwinkelXName);
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
            set {
                this.SetElementWithValidation(DrehwinkelXName, value, "Drehwinkel", global::www.bfr.abwasser.de.Winkel.TypeDefinition);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<SymbolobjektType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(TypXName, typeof(string));
            localElementDictionary.Add(PositionXName, typeof(PositionType));
            localElementDictionary.Add(DrehwinkelXName, typeof(decimal));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Rechtswert, Hochwert)
    /// </para>
    /// </summary>
    public partial class PositionType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName RechtswertXName = System.Xml.Linq.XName.Get("Rechtswert", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName HochwertXName = System.Xml.Linq.XName.Get("Hochwert", "http://www.bfr-abwasser.de");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("PositionType", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator PositionType(XElement xe) { return XTypedServices.ToXTypedElement<PositionType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static PositionType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(RechtswertXName), new NamedContentModelEntity(HochwertXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Rechtswert, Hochwert)
        /// </para>
        /// </summary>
        public PositionType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (Rechtswert, Hochwert)
        /// </para>
        /// </summary>
        public virtual decimal Rechtswert {
            get {
                XElement x = this.GetElement(RechtswertXName);
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
            set {
                this.SetElementWithValidation(RechtswertXName, value, "Rechtswert", RechtswertLocalType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (Rechtswert, Hochwert)
        /// </para>
        /// </summary>
        public virtual decimal Hochwert {
            get {
                XElement x = this.GetElement(HochwertXName);
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
            set {
                this.SetElementWithValidation(HochwertXName, value, "Hochwert", HochwertLocalType.TypeDefinition);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<PositionType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(RechtswertXName, typeof(decimal));
            localElementDictionary.Add(HochwertXName, typeof(decimal));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        private class RechtswertLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(3200)), null, 3, 0, 100000000m, null, 0, null, null, 0, null, 11, XmlSchemaWhiteSpace.Collapse));
            
            private RechtswertLocalType() {
            }
        }
        
        private class HochwertLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(3200)), null, 3, 0, 10000000m, null, 0, null, null, 0, null, 10, XmlSchemaWhiteSpace.Collapse));
            
            private HochwertLocalType() {
            }
        }
    }
    
    public sealed class Winkel {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(3456)), null, 3, 0, 6.284m, null, 0, null, 0m, 0, null, 4, XmlSchemaWhiteSpace.Collapse));
        
        private Winkel() {
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Verwaltung?, Geometrie?, Dokumente?, Ordnungseinheiten?)
    /// </para>
    /// </summary>
    public partial class AdmindatenType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName VerwaltungXName = System.Xml.Linq.XName.Get("Verwaltung", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName GeometrieXName = System.Xml.Linq.XName.Get("Geometrie", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName DokumenteXName = System.Xml.Linq.XName.Get("Dokumente", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName OrdnungseinheitenXName = System.Xml.Linq.XName.Get("Ordnungseinheiten", "http://www.bfr-abwasser.de");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("AdmindatenType", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator AdmindatenType(XElement xe) { return XTypedServices.ToXTypedElement<AdmindatenType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static AdmindatenType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(VerwaltungXName), new NamedContentModelEntity(GeometrieXName), new NamedContentModelEntity(DokumenteXName), new NamedContentModelEntity(OrdnungseinheitenXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Verwaltung?, Geometrie?, Dokumente?, Ordnungseinheiten?)
        /// </para>
        /// </summary>
        public AdmindatenType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Verwaltung?, Geometrie?, Dokumente?, Ordnungseinheiten?)
        /// </para>
        /// </summary>
        public virtual VerwaltungType Verwaltung {
            get {
                XElement x = this.GetElement(VerwaltungXName);
                return ((VerwaltungType)(x));
            }
            set {
                this.SetElement(VerwaltungXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Verwaltung?, Geometrie?, Dokumente?, Ordnungseinheiten?)
        /// </para>
        /// </summary>
        public virtual AllgGeometrieType Geometrie {
            get {
                XElement x = this.GetElement(GeometrieXName);
                return ((AllgGeometrieType)(x));
            }
            set {
                this.SetElement(GeometrieXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Verwaltung?, Geometrie?, Dokumente?, Ordnungseinheiten?)
        /// </para>
        /// </summary>
        public virtual DokumenteLocalType Dokumente {
            get {
                XElement x = this.GetElement(DokumenteXName);
                return ((DokumenteLocalType)(x));
            }
            set {
                this.SetElement(DokumenteXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Verwaltung?, Geometrie?, Dokumente?, Ordnungseinheiten?)
        /// </para>
        /// </summary>
        public virtual OrdnungseinheitenLocalType Ordnungseinheiten {
            get {
                XElement x = this.GetElement(OrdnungseinheitenXName);
                return ((OrdnungseinheitenLocalType)(x));
            }
            set {
                this.SetElement(OrdnungseinheitenXName, value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<AdmindatenType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(VerwaltungXName, typeof(VerwaltungType));
            localElementDictionary.Add(GeometrieXName, typeof(AllgGeometrieType));
            localElementDictionary.Add(DokumenteXName, typeof(DokumenteLocalType));
            localElementDictionary.Add(OrdnungseinheitenXName, typeof(OrdnungseinheitenLocalType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Dokument+)
        /// </para>
        /// </summary>
        public partial class DokumenteLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName DokumentXName = System.Xml.Linq.XName.Get("Dokument", "http://www.bfr-abwasser.de");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XTypedList<MDokumentType> DokumentField;
            
            private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("Dokumente", "http://www.bfr-abwasser.de");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;
            
		public static explicit operator DokumenteLocalType(XElement xe) { return XTypedServices.ToXTypedElement<DokumenteLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static DokumenteLocalType() {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(DokumentXName));
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (Dokument+)
            /// </para>
            /// </summary>
            public DokumenteLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required, repeating
            /// </para>
            /// <para>
            /// Regular expression: (Dokument+)
            /// </para>
            /// </summary>
            public virtual IList<MDokumentType> Dokument {
                get {
                    if ((this.DokumentField == null)) {
                        this.DokumentField = new XTypedList<MDokumentType>(this, LinqToXsdTypeManager.Instance, DokumentXName);
                    }
                    return this.DokumentField;
                }
                set {
                    if ((value == null)) {
                        this.DokumentField = null;
                    }
                    else {
                        if ((this.DokumentField == null)) {
                            this.DokumentField = XTypedList<MDokumentType>.Initialize(this, LinqToXsdTypeManager.Instance, value, DokumentXName);
                        }
                        else {
                            XTypedServices.SetList<MDokumentType>(this.DokumentField, value);
                        }
                    }
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            System.Xml.Linq.XName IXMetaData.SchemaName {
                get {
                    return xName;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<DokumenteLocalType>(this);
            }
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(DokumentXName, typeof(MDokumentType));
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return contentModel;
            }
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Ordnungseinheit+)
        /// </para>
        /// </summary>
        public partial class OrdnungseinheitenLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName OrdnungseinheitXName = System.Xml.Linq.XName.Get("Ordnungseinheit", "http://www.bfr-abwasser.de");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XTypedList<OrdnungseinheitType> OrdnungseinheitField;
            
            private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("Ordnungseinheiten", "http://www.bfr-abwasser.de");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;
            
		public static explicit operator OrdnungseinheitenLocalType(XElement xe) { return XTypedServices.ToXTypedElement<OrdnungseinheitenLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static OrdnungseinheitenLocalType() {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(OrdnungseinheitXName));
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (Ordnungseinheit+)
            /// </para>
            /// </summary>
            public OrdnungseinheitenLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required, repeating
            /// </para>
            /// <para>
            /// Regular expression: (Ordnungseinheit+)
            /// </para>
            /// </summary>
            public virtual IList<OrdnungseinheitType> Ordnungseinheit {
                get {
                    if ((this.OrdnungseinheitField == null)) {
                        this.OrdnungseinheitField = new XTypedList<OrdnungseinheitType>(this, LinqToXsdTypeManager.Instance, OrdnungseinheitXName);
                    }
                    return this.OrdnungseinheitField;
                }
                set {
                    if ((value == null)) {
                        this.OrdnungseinheitField = null;
                    }
                    else {
                        if ((this.OrdnungseinheitField == null)) {
                            this.OrdnungseinheitField = XTypedList<OrdnungseinheitType>.Initialize(this, LinqToXsdTypeManager.Instance, value, OrdnungseinheitXName);
                        }
                        else {
                            XTypedServices.SetList<OrdnungseinheitType>(this.OrdnungseinheitField, value);
                        }
                    }
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            System.Xml.Linq.XName IXMetaData.SchemaName {
                get {
                    return xName;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<OrdnungseinheitenLocalType>(this);
            }
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(OrdnungseinheitXName, typeof(OrdnungseinheitType));
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return contentModel;
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Dokumentname, Dateiname, Dokumentquelle, Kommentar?)
    /// </para>
    /// </summary>
    public partial class MDokumentType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName DokumentnameXName = System.Xml.Linq.XName.Get("Dokumentname", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName DateinameXName = System.Xml.Linq.XName.Get("Dateiname", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName DokumentquelleXName = System.Xml.Linq.XName.Get("Dokumentquelle", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName KommentarXName = System.Xml.Linq.XName.Get("Kommentar", "http://www.bfr-abwasser.de");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("MDokumentType", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator MDokumentType(XElement xe) { return XTypedServices.ToXTypedElement<MDokumentType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static MDokumentType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(DokumentnameXName), new NamedContentModelEntity(DateinameXName), new NamedContentModelEntity(DokumentquelleXName), new NamedContentModelEntity(KommentarXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Dokumentname, Dateiname, Dokumentquelle, Kommentar?)
        /// </para>
        /// </summary>
        public MDokumentType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (Dokumentname, Dateiname, Dokumentquelle, Kommentar?)
        /// </para>
        /// </summary>
        public virtual string Dokumentname {
            get {
                XElement x = this.GetElement(DokumentnameXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(DokumentnameXName, value, "Dokumentname", DokumentnameLocalType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (Dokumentname, Dateiname, Dokumentquelle, Kommentar?)
        /// </para>
        /// </summary>
        public virtual string Dateiname {
            get {
                XElement x = this.GetElement(DateinameXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(DateinameXName, value, "Dateiname", DateinameLocalType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (Dokumentname, Dateiname, Dokumentquelle, Kommentar?)
        /// </para>
        /// </summary>
        public virtual string Dokumentquelle {
            get {
                XElement x = this.GetElement(DokumentquelleXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(DokumentquelleXName, value, "Dokumentquelle", DokumentquelleLocalType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Dokumentname, Dateiname, Dokumentquelle, Kommentar?)
        /// </para>
        /// </summary>
        public virtual string Kommentar {
            get {
                XElement x = this.GetElement(KommentarXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
            set {
                this.SetElement(KommentarXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<MDokumentType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(DokumentnameXName, typeof(string));
            localElementDictionary.Add(DateinameXName, typeof(string));
            localElementDictionary.Add(DokumentquelleXName, typeof(string));
            localElementDictionary.Add(KommentarXName, typeof(string));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        private class DokumentnameLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(4)), null, 0, 0, null, null, 40, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
            
            private DokumentnameLocalType() {
            }
        }
        
        private class DateinameLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(4)), null, 0, 0, null, null, 255, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
            
            private DateinameLocalType() {
            }
        }
        
        private class DokumentquelleLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(4)), null, 0, 0, null, null, 40, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
            
            private DokumentquelleLocalType() {
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Liegenschaftsnummer, Objektnummer?, Liegenschaftsstrasse?, LiegenschaftsPLZ?, Liegenschaftsort?, Liegenschaftsnutzung?)
    /// </para>
    /// </summary>
    public partial class LiegenschaftType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName LiegenschaftsnummerXName = System.Xml.Linq.XName.Get("Liegenschaftsnummer", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ObjektnummerXName = System.Xml.Linq.XName.Get("Objektnummer", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName LiegenschaftsstrasseXName = System.Xml.Linq.XName.Get("Liegenschaftsstrasse", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName LiegenschaftsPLZXName = System.Xml.Linq.XName.Get("LiegenschaftsPLZ", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName LiegenschaftsortXName = System.Xml.Linq.XName.Get("Liegenschaftsort", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName LiegenschaftsnutzungXName = System.Xml.Linq.XName.Get("Liegenschaftsnutzung", "http://www.bfr-abwasser.de");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("LiegenschaftType", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator LiegenschaftType(XElement xe) { return XTypedServices.ToXTypedElement<LiegenschaftType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static LiegenschaftType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(LiegenschaftsnummerXName), new NamedContentModelEntity(ObjektnummerXName), new NamedContentModelEntity(LiegenschaftsstrasseXName), new NamedContentModelEntity(LiegenschaftsPLZXName), new NamedContentModelEntity(LiegenschaftsortXName), new NamedContentModelEntity(LiegenschaftsnutzungXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Liegenschaftsnummer, Objektnummer?, Liegenschaftsstrasse?, LiegenschaftsPLZ?, Liegenschaftsort?, Liegenschaftsnutzung?)
        /// </para>
        /// </summary>
        public LiegenschaftType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (Liegenschaftsnummer, Objektnummer?, Liegenschaftsstrasse?, LiegenschaftsPLZ?, Liegenschaftsort?, Liegenschaftsnutzung?)
        /// </para>
        /// </summary>
        public virtual string Liegenschaftsnummer {
            get {
                XElement x = this.GetElement(LiegenschaftsnummerXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(LiegenschaftsnummerXName, value, "Liegenschaftsnummer", LiegenschaftsnummerLocalType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Liegenschaftsnummer, Objektnummer?, Liegenschaftsstrasse?, LiegenschaftsPLZ?, Liegenschaftsort?, Liegenschaftsnutzung?)
        /// </para>
        /// </summary>
        public virtual string Objektnummer {
            get {
                XElement x = this.GetElement(ObjektnummerXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(ObjektnummerXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                else {
                    this.SetElementWithValidation(ObjektnummerXName, value, "Objektnummer", ObjektnummerLocalType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Liegenschaftsnummer, Objektnummer?, Liegenschaftsstrasse?, LiegenschaftsPLZ?, Liegenschaftsort?, Liegenschaftsnutzung?)
        /// </para>
        /// </summary>
        public virtual string Liegenschaftsstrasse {
            get {
                XElement x = this.GetElement(LiegenschaftsstrasseXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(LiegenschaftsstrasseXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                else {
                    this.SetElementWithValidation(LiegenschaftsstrasseXName, value, "Liegenschaftsstrasse", LiegenschaftsstrasseLocalType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Liegenschaftsnummer, Objektnummer?, Liegenschaftsstrasse?, LiegenschaftsPLZ?, Liegenschaftsort?, Liegenschaftsnutzung?)
        /// </para>
        /// </summary>
        public virtual string LiegenschaftsPLZ {
            get {
                XElement x = this.GetElement(LiegenschaftsPLZXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(LiegenschaftsPLZXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                else {
                    this.SetElementWithValidation(LiegenschaftsPLZXName, value, "LiegenschaftsPLZ", LiegenschaftsPLZLocalType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Liegenschaftsnummer, Objektnummer?, Liegenschaftsstrasse?, LiegenschaftsPLZ?, Liegenschaftsort?, Liegenschaftsnutzung?)
        /// </para>
        /// </summary>
        public virtual string Liegenschaftsort {
            get {
                XElement x = this.GetElement(LiegenschaftsortXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(LiegenschaftsortXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                else {
                    this.SetElementWithValidation(LiegenschaftsortXName, value, "Liegenschaftsort", LiegenschaftsortLocalType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Liegenschaftsnummer, Objektnummer?, Liegenschaftsstrasse?, LiegenschaftsPLZ?, Liegenschaftsort?, Liegenschaftsnutzung?)
        /// </para>
        /// </summary>
        public virtual string Liegenschaftsnutzung {
            get {
                XElement x = this.GetElement(LiegenschaftsnutzungXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
            set {
                this.SetElement(LiegenschaftsnutzungXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<LiegenschaftType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(LiegenschaftsnummerXName, typeof(string));
            localElementDictionary.Add(ObjektnummerXName, typeof(string));
            localElementDictionary.Add(LiegenschaftsstrasseXName, typeof(string));
            localElementDictionary.Add(LiegenschaftsPLZXName, typeof(string));
            localElementDictionary.Add(LiegenschaftsortXName, typeof(string));
            localElementDictionary.Add(LiegenschaftsnutzungXName, typeof(string));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        private class LiegenschaftsnummerLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(4)), null, 0, 0, null, null, 20, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
            
            private LiegenschaftsnummerLocalType() {
            }
        }
        
        private class ObjektnummerLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(4)), null, 0, 0, null, null, 4, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
            
            private ObjektnummerLocalType() {
            }
        }
        
        private class LiegenschaftsstrasseLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(4)), null, 0, 0, null, null, 40, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
            
            private LiegenschaftsstrasseLocalType() {
            }
        }
        
        private class LiegenschaftsPLZLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(14)), null, 0, 0, null, null, 5, null, null, 5, new string[] {
                            "\\p{N}{5}"}, 0, XmlSchemaWhiteSpace.Preserve));
            
            private LiegenschaftsPLZLocalType() {
            }
        }
        
        private class LiegenschaftsortLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(4)), null, 0, 0, null, null, 40, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
            
            private LiegenschaftsortLocalType() {
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (WENummerDetail, WENummer)
    /// </para>
    /// </summary>
    public partial class WirtschaftseinheitType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName WENummerDetailXName = System.Xml.Linq.XName.Get("WENummerDetail", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName WENummerXName = System.Xml.Linq.XName.Get("WENummer", "http://www.bfr-abwasser.de");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("WirtschaftseinheitType", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator WirtschaftseinheitType(XElement xe) { return XTypedServices.ToXTypedElement<WirtschaftseinheitType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static WirtschaftseinheitType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(WENummerDetailXName), new NamedContentModelEntity(WENummerXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (WENummerDetail, WENummer)
        /// </para>
        /// </summary>
        public WirtschaftseinheitType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (WENummerDetail, WENummer)
        /// </para>
        /// </summary>
        public virtual decimal WENummerDetail {
            get {
                XElement x = this.GetElement(WENummerDetailXName);
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                this.SetElementWithValidation(WENummerDetailXName, value, "WENummerDetail", global::www.bfr.abwasser.de.WENummerDetailType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (WENummerDetail, WENummer)
        /// </para>
        /// </summary>
        public virtual string WENummer {
            get {
                XElement x = this.GetElement(WENummerXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(WENummerXName, value, "WENummer", WENummerLocalType.TypeDefinition);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<WirtschaftseinheitType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(WENummerDetailXName, typeof(decimal));
            localElementDictionary.Add(WENummerXName, typeof(string));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        private class WENummerLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(1)), null, 0, 10, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
            
            private WENummerLocalType() {
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Zustaendigkeit?, DienststelleVerwaltend?, DienststelleHausverwaltend?, DienststelleBauaufsicht?, DienststelleBaudurchfuehrung?, NummerDienststelleBaudurchfuehrung?, Zustaendigkeitsbereich?, Aktenzeichen?, Abwasserbeseitigungspflicht?, Wasserbehoerde?, AblaufEinleitungsgenehmigung?, Kommentar?)
    /// </para>
    /// </summary>
    public partial class VerwaltungType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ZustaendigkeitXName = System.Xml.Linq.XName.Get("Zustaendigkeit", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName DienststelleVerwaltendXName = System.Xml.Linq.XName.Get("DienststelleVerwaltend", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName DienststelleHausverwaltendXName = System.Xml.Linq.XName.Get("DienststelleHausverwaltend", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName DienststelleBauaufsichtXName = System.Xml.Linq.XName.Get("DienststelleBauaufsicht", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName DienststelleBaudurchfuehrungXName = System.Xml.Linq.XName.Get("DienststelleBaudurchfuehrung", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName NummerDienststelleBaudurchfuehrungXName = System.Xml.Linq.XName.Get("NummerDienststelleBaudurchfuehrung", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ZustaendigkeitsbereichXName = System.Xml.Linq.XName.Get("Zustaendigkeitsbereich", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName AktenzeichenXName = System.Xml.Linq.XName.Get("Aktenzeichen", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName AbwasserbeseitigungspflichtXName = System.Xml.Linq.XName.Get("Abwasserbeseitigungspflicht", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName WasserbehoerdeXName = System.Xml.Linq.XName.Get("Wasserbehoerde", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName AblaufEinleitungsgenehmigungXName = System.Xml.Linq.XName.Get("AblaufEinleitungsgenehmigung", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName KommentarXName = System.Xml.Linq.XName.Get("Kommentar", "http://www.bfr-abwasser.de");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("VerwaltungType", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator VerwaltungType(XElement xe) { return XTypedServices.ToXTypedElement<VerwaltungType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static VerwaltungType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(ZustaendigkeitXName), new NamedContentModelEntity(DienststelleVerwaltendXName), new NamedContentModelEntity(DienststelleHausverwaltendXName), new NamedContentModelEntity(DienststelleBauaufsichtXName), new NamedContentModelEntity(DienststelleBaudurchfuehrungXName), new NamedContentModelEntity(NummerDienststelleBaudurchfuehrungXName), new NamedContentModelEntity(ZustaendigkeitsbereichXName), new NamedContentModelEntity(AktenzeichenXName), new NamedContentModelEntity(AbwasserbeseitigungspflichtXName), new NamedContentModelEntity(WasserbehoerdeXName), new NamedContentModelEntity(AblaufEinleitungsgenehmigungXName), new NamedContentModelEntity(KommentarXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Zustaendigkeit?, DienststelleVerwaltend?, DienststelleHausverwaltend?, DienststelleBauaufsicht?, DienststelleBaudurchfuehrung?, NummerDienststelleBaudurchfuehrung?, Zustaendigkeitsbereich?, Aktenzeichen?, Abwasserbeseitigungspflicht?, Wasserbehoerde?, AblaufEinleitungsgenehmigung?, Kommentar?)
        /// </para>
        /// </summary>
        public VerwaltungType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Zustaendigkeit?, DienststelleVerwaltend?, DienststelleHausverwaltend?, DienststelleBauaufsicht?, DienststelleBaudurchfuehrung?, NummerDienststelleBaudurchfuehrung?, Zustaendigkeitsbereich?, Aktenzeichen?, Abwasserbeseitigungspflicht?, Wasserbehoerde?, AblaufEinleitungsgenehmigung?, Kommentar?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? Zustaendigkeit {
            get {
                XElement x = this.GetElement(ZustaendigkeitXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(ZustaendigkeitXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                }
                else {
                    this.SetElementWithValidation(ZustaendigkeitXName, value, "Zustaendigkeit", global::www.bfr.abwasser.de.ZustaendigkeitType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Zustaendigkeit?, DienststelleVerwaltend?, DienststelleHausverwaltend?, DienststelleBauaufsicht?, DienststelleBaudurchfuehrung?, NummerDienststelleBaudurchfuehrung?, Zustaendigkeitsbereich?, Aktenzeichen?, Abwasserbeseitigungspflicht?, Wasserbehoerde?, AblaufEinleitungsgenehmigung?, Kommentar?)
        /// </para>
        /// </summary>
        public virtual string DienststelleVerwaltend {
            get {
                XElement x = this.GetElement(DienststelleVerwaltendXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(DienststelleVerwaltendXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                else {
                    this.SetElementWithValidation(DienststelleVerwaltendXName, value, "DienststelleVerwaltend", DienststelleVerwaltendLocalType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Zustaendigkeit?, DienststelleVerwaltend?, DienststelleHausverwaltend?, DienststelleBauaufsicht?, DienststelleBaudurchfuehrung?, NummerDienststelleBaudurchfuehrung?, Zustaendigkeitsbereich?, Aktenzeichen?, Abwasserbeseitigungspflicht?, Wasserbehoerde?, AblaufEinleitungsgenehmigung?, Kommentar?)
        /// </para>
        /// </summary>
        public virtual string DienststelleHausverwaltend {
            get {
                XElement x = this.GetElement(DienststelleHausverwaltendXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(DienststelleHausverwaltendXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                else {
                    this.SetElementWithValidation(DienststelleHausverwaltendXName, value, "DienststelleHausverwaltend", DienststelleHausverwaltendLocalType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Zustaendigkeit?, DienststelleVerwaltend?, DienststelleHausverwaltend?, DienststelleBauaufsicht?, DienststelleBaudurchfuehrung?, NummerDienststelleBaudurchfuehrung?, Zustaendigkeitsbereich?, Aktenzeichen?, Abwasserbeseitigungspflicht?, Wasserbehoerde?, AblaufEinleitungsgenehmigung?, Kommentar?)
        /// </para>
        /// </summary>
        public virtual string DienststelleBauaufsicht {
            get {
                XElement x = this.GetElement(DienststelleBauaufsichtXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(DienststelleBauaufsichtXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                else {
                    this.SetElementWithValidation(DienststelleBauaufsichtXName, value, "DienststelleBauaufsicht", DienststelleBauaufsichtLocalType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Zustaendigkeit?, DienststelleVerwaltend?, DienststelleHausverwaltend?, DienststelleBauaufsicht?, DienststelleBaudurchfuehrung?, NummerDienststelleBaudurchfuehrung?, Zustaendigkeitsbereich?, Aktenzeichen?, Abwasserbeseitigungspflicht?, Wasserbehoerde?, AblaufEinleitungsgenehmigung?, Kommentar?)
        /// </para>
        /// </summary>
        public virtual string DienststelleBaudurchfuehrung {
            get {
                XElement x = this.GetElement(DienststelleBaudurchfuehrungXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(DienststelleBaudurchfuehrungXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                else {
                    this.SetElementWithValidation(DienststelleBaudurchfuehrungXName, value, "DienststelleBaudurchfuehrung", DienststelleBaudurchfuehrungLocalType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Zustaendigkeit?, DienststelleVerwaltend?, DienststelleHausverwaltend?, DienststelleBauaufsicht?, DienststelleBaudurchfuehrung?, NummerDienststelleBaudurchfuehrung?, Zustaendigkeitsbereich?, Aktenzeichen?, Abwasserbeseitigungspflicht?, Wasserbehoerde?, AblaufEinleitungsgenehmigung?, Kommentar?)
        /// </para>
        /// </summary>
        public virtual string NummerDienststelleBaudurchfuehrung {
            get {
                XElement x = this.GetElement(NummerDienststelleBaudurchfuehrungXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(NummerDienststelleBaudurchfuehrungXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                else {
                    this.SetElementWithValidation(NummerDienststelleBaudurchfuehrungXName, value, "NummerDienststelleBaudurchfuehrung", NummerDienststelleBaudurchfuehrungLocalType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Zustaendigkeit?, DienststelleVerwaltend?, DienststelleHausverwaltend?, DienststelleBauaufsicht?, DienststelleBaudurchfuehrung?, NummerDienststelleBaudurchfuehrung?, Zustaendigkeitsbereich?, Aktenzeichen?, Abwasserbeseitigungspflicht?, Wasserbehoerde?, AblaufEinleitungsgenehmigung?, Kommentar?)
        /// </para>
        /// </summary>
        public virtual string Zustaendigkeitsbereich {
            get {
                XElement x = this.GetElement(ZustaendigkeitsbereichXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(ZustaendigkeitsbereichXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                else {
                    this.SetElementWithValidation(ZustaendigkeitsbereichXName, value, "Zustaendigkeitsbereich", ZustaendigkeitsbereichLocalType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Zustaendigkeit?, DienststelleVerwaltend?, DienststelleHausverwaltend?, DienststelleBauaufsicht?, DienststelleBaudurchfuehrung?, NummerDienststelleBaudurchfuehrung?, Zustaendigkeitsbereich?, Aktenzeichen?, Abwasserbeseitigungspflicht?, Wasserbehoerde?, AblaufEinleitungsgenehmigung?, Kommentar?)
        /// </para>
        /// </summary>
        public virtual string Aktenzeichen {
            get {
                XElement x = this.GetElement(AktenzeichenXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(AktenzeichenXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                else {
                    this.SetElementWithValidation(AktenzeichenXName, value, "Aktenzeichen", AktenzeichenLocalType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Zustaendigkeit?, DienststelleVerwaltend?, DienststelleHausverwaltend?, DienststelleBauaufsicht?, DienststelleBaudurchfuehrung?, NummerDienststelleBaudurchfuehrung?, Zustaendigkeitsbereich?, Aktenzeichen?, Abwasserbeseitigungspflicht?, Wasserbehoerde?, AblaufEinleitungsgenehmigung?, Kommentar?)
        /// </para>
        /// </summary>
        public virtual System.Decimal? Abwasserbeseitigungspflicht {
            get {
                XElement x = this.GetElement(AbwasserbeseitigungspflichtXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(AbwasserbeseitigungspflichtXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
                }
                else {
                    this.SetElementWithValidation(AbwasserbeseitigungspflichtXName, value, "Abwasserbeseitigungspflicht", global::www.bfr.abwasser.de.AbwasserbeseitigungspflichtType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Zustaendigkeit?, DienststelleVerwaltend?, DienststelleHausverwaltend?, DienststelleBauaufsicht?, DienststelleBaudurchfuehrung?, NummerDienststelleBaudurchfuehrung?, Zustaendigkeitsbereich?, Aktenzeichen?, Abwasserbeseitigungspflicht?, Wasserbehoerde?, AblaufEinleitungsgenehmigung?, Kommentar?)
        /// </para>
        /// </summary>
        public virtual string Wasserbehoerde {
            get {
                XElement x = this.GetElement(WasserbehoerdeXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(WasserbehoerdeXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                else {
                    this.SetElementWithValidation(WasserbehoerdeXName, value, "Wasserbehoerde", WasserbehoerdeLocalType.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Zustaendigkeit?, DienststelleVerwaltend?, DienststelleHausverwaltend?, DienststelleBauaufsicht?, DienststelleBaudurchfuehrung?, NummerDienststelleBaudurchfuehrung?, Zustaendigkeitsbereich?, Aktenzeichen?, Abwasserbeseitigungspflicht?, Wasserbehoerde?, AblaufEinleitungsgenehmigung?, Kommentar?)
        /// </para>
        /// </summary>
        public virtual System.DateTime? AblaufEinleitungsgenehmigung {
            get {
                XElement x = this.GetElement(AblaufEinleitungsgenehmigungXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<System.DateTime>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date).Datatype);
            }
            set {
                this.SetElement(AblaufEinleitungsgenehmigungXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Zustaendigkeit?, DienststelleVerwaltend?, DienststelleHausverwaltend?, DienststelleBauaufsicht?, DienststelleBaudurchfuehrung?, NummerDienststelleBaudurchfuehrung?, Zustaendigkeitsbereich?, Aktenzeichen?, Abwasserbeseitigungspflicht?, Wasserbehoerde?, AblaufEinleitungsgenehmigung?, Kommentar?)
        /// </para>
        /// </summary>
        public virtual string Kommentar {
            get {
                XElement x = this.GetElement(KommentarXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
            set {
                this.SetElement(KommentarXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<VerwaltungType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(ZustaendigkeitXName, typeof(decimal));
            localElementDictionary.Add(DienststelleVerwaltendXName, typeof(string));
            localElementDictionary.Add(DienststelleHausverwaltendXName, typeof(string));
            localElementDictionary.Add(DienststelleBauaufsichtXName, typeof(string));
            localElementDictionary.Add(DienststelleBaudurchfuehrungXName, typeof(string));
            localElementDictionary.Add(NummerDienststelleBaudurchfuehrungXName, typeof(string));
            localElementDictionary.Add(ZustaendigkeitsbereichXName, typeof(string));
            localElementDictionary.Add(AktenzeichenXName, typeof(string));
            localElementDictionary.Add(AbwasserbeseitigungspflichtXName, typeof(decimal));
            localElementDictionary.Add(WasserbehoerdeXName, typeof(string));
            localElementDictionary.Add(AblaufEinleitungsgenehmigungXName, typeof(System.DateTime));
            localElementDictionary.Add(KommentarXName, typeof(string));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        private class DienststelleVerwaltendLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(4)), null, 0, 0, null, null, 40, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
            
            private DienststelleVerwaltendLocalType() {
            }
        }
        
        private class DienststelleHausverwaltendLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(4)), null, 0, 0, null, null, 40, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
            
            private DienststelleHausverwaltendLocalType() {
            }
        }
        
        private class DienststelleBauaufsichtLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(4)), null, 0, 0, null, null, 40, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
            
            private DienststelleBauaufsichtLocalType() {
            }
        }
        
        private class DienststelleBaudurchfuehrungLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(4)), null, 0, 0, null, null, 40, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
            
            private DienststelleBaudurchfuehrungLocalType() {
            }
        }
        
        private class NummerDienststelleBaudurchfuehrungLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(4)), null, 0, 0, null, null, 5, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
            
            private NummerDienststelleBaudurchfuehrungLocalType() {
            }
        }
        
        private class ZustaendigkeitsbereichLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(4)), null, 0, 0, null, null, 10, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
            
            private ZustaendigkeitsbereichLocalType() {
            }
        }
        
        private class AktenzeichenLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(4)), null, 0, 0, null, null, 15, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
            
            private AktenzeichenLocalType() {
            }
        }
        
        private class WasserbehoerdeLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(4)), null, 0, 0, null, null, 40, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
            
            private WasserbehoerdeLocalType() {
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (CRSHoehe)
    /// </para>
    /// </summary>
    public partial class AllgGeometrieType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName CRSHoeheXName = System.Xml.Linq.XName.Get("CRSHoehe", "http://www.bfr-abwasser.de");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("AllgGeometrieType", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator AllgGeometrieType(XElement xe) { return XTypedServices.ToXTypedElement<AllgGeometrieType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static AllgGeometrieType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(CRSHoeheXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (CRSHoehe)
        /// </para>
        /// </summary>
        public AllgGeometrieType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (CRSHoehe)
        /// </para>
        /// </summary>
        public virtual string CRSHoehe {
            get {
                XElement x = this.GetElement(CRSHoeheXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(CRSHoeheXName, value, "CRSHoehe", CRSHoeheLocalType.TypeDefinition);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<AllgGeometrieType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(CRSHoeheXName, typeof(string));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        private class CRSHoeheLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(4)), null, 0, 0, null, null, 20, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
            
            private CRSHoeheLocalType() {
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Datenstatus, Erstellungsdatum, Kommentar?, Kennungen, Stammdatenkollektiv*, Zustandsdatenkollektiv*, Hydraulikdatenkollektiv*, Betriebsdatenkollektiv*, Praesentationsdatenkollektiv*)
    /// </para>
    /// </summary>
    public partial class DatenkollektiveType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName DatenstatusXName = System.Xml.Linq.XName.Get("Datenstatus", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ErstellungsdatumXName = System.Xml.Linq.XName.Get("Erstellungsdatum", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName KommentarXName = System.Xml.Linq.XName.Get("Kommentar", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName KennungenXName = System.Xml.Linq.XName.Get("Kennungen", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName StammdatenkollektivXName = System.Xml.Linq.XName.Get("Stammdatenkollektiv", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<StammdatenType> StammdatenkollektivField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ZustandsdatenkollektivXName = System.Xml.Linq.XName.Get("Zustandsdatenkollektiv", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ZustandsdatenType> ZustandsdatenkollektivField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName HydraulikdatenkollektivXName = System.Xml.Linq.XName.Get("Hydraulikdatenkollektiv", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<HydraulikdatenType> HydraulikdatenkollektivField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName BetriebsdatenkollektivXName = System.Xml.Linq.XName.Get("Betriebsdatenkollektiv", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<BetriebsdatenType> BetriebsdatenkollektivField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName PraesentationsdatenkollektivXName = System.Xml.Linq.XName.Get("Praesentationsdatenkollektiv", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<PraesentationsdatenType> PraesentationsdatenkollektivField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("DatenkollektiveType", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator DatenkollektiveType(XElement xe) { return XTypedServices.ToXTypedElement<DatenkollektiveType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static DatenkollektiveType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(DatenstatusXName), new NamedContentModelEntity(ErstellungsdatumXName), new NamedContentModelEntity(KommentarXName), new NamedContentModelEntity(KennungenXName), new NamedContentModelEntity(StammdatenkollektivXName), new NamedContentModelEntity(ZustandsdatenkollektivXName), new NamedContentModelEntity(HydraulikdatenkollektivXName), new NamedContentModelEntity(BetriebsdatenkollektivXName), new NamedContentModelEntity(PraesentationsdatenkollektivXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Datenstatus, Erstellungsdatum, Kommentar?, Kennungen, Stammdatenkollektiv*, Zustandsdatenkollektiv*, Hydraulikdatenkollektiv*, Betriebsdatenkollektiv*, Praesentationsdatenkollektiv*)
        /// </para>
        /// </summary>
        public DatenkollektiveType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (Datenstatus, Erstellungsdatum, Kommentar?, Kennungen, Stammdatenkollektiv*, Zustandsdatenkollektiv*, Hydraulikdatenkollektiv*, Betriebsdatenkollektiv*, Praesentationsdatenkollektiv*)
        /// </para>
        /// </summary>
        public virtual decimal Datenstatus {
            get {
                XElement x = this.GetElement(DatenstatusXName);
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                this.SetElementWithValidation(DatenstatusXName, value, "Datenstatus", global::www.bfr.abwasser.de.DatenstatusType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (Datenstatus, Erstellungsdatum, Kommentar?, Kennungen, Stammdatenkollektiv*, Zustandsdatenkollektiv*, Hydraulikdatenkollektiv*, Betriebsdatenkollektiv*, Praesentationsdatenkollektiv*)
        /// </para>
        /// </summary>
        public virtual System.DateTime Erstellungsdatum {
            get {
                XElement x = this.GetElement(ErstellungsdatumXName);
                return XTypedServices.ParseValue<System.DateTime>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date).Datatype);
            }
            set {
                this.SetElement(ErstellungsdatumXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Datenstatus, Erstellungsdatum, Kommentar?, Kennungen, Stammdatenkollektiv*, Zustandsdatenkollektiv*, Hydraulikdatenkollektiv*, Betriebsdatenkollektiv*, Praesentationsdatenkollektiv*)
        /// </para>
        /// </summary>
        public virtual string Kommentar {
            get {
                XElement x = this.GetElement(KommentarXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
            set {
                this.SetElement(KommentarXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (Datenstatus, Erstellungsdatum, Kommentar?, Kennungen, Stammdatenkollektiv*, Zustandsdatenkollektiv*, Hydraulikdatenkollektiv*, Betriebsdatenkollektiv*, Praesentationsdatenkollektiv*)
        /// </para>
        /// </summary>
        public virtual KennungenLocalType Kennungen {
            get {
                XElement x = this.GetElement(KennungenXName);
                return ((KennungenLocalType)(x));
            }
            set {
                this.SetElement(KennungenXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Datenstatus, Erstellungsdatum, Kommentar?, Kennungen, Stammdatenkollektiv*, Zustandsdatenkollektiv*, Hydraulikdatenkollektiv*, Betriebsdatenkollektiv*, Praesentationsdatenkollektiv*)
        /// </para>
        /// </summary>
        public virtual IList<StammdatenType> Stammdatenkollektiv {
            get {
                if ((this.StammdatenkollektivField == null)) {
                    this.StammdatenkollektivField = new XTypedList<StammdatenType>(this, LinqToXsdTypeManager.Instance, StammdatenkollektivXName);
                }
                return this.StammdatenkollektivField;
            }
            set {
                if ((value == null)) {
                    this.StammdatenkollektivField = null;
                }
                else {
                    if ((this.StammdatenkollektivField == null)) {
                        this.StammdatenkollektivField = XTypedList<StammdatenType>.Initialize(this, LinqToXsdTypeManager.Instance, value, StammdatenkollektivXName);
                    }
                    else {
                        XTypedServices.SetList<StammdatenType>(this.StammdatenkollektivField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Datenstatus, Erstellungsdatum, Kommentar?, Kennungen, Stammdatenkollektiv*, Zustandsdatenkollektiv*, Hydraulikdatenkollektiv*, Betriebsdatenkollektiv*, Praesentationsdatenkollektiv*)
        /// </para>
        /// </summary>
        public virtual IList<ZustandsdatenType> Zustandsdatenkollektiv {
            get {
                if ((this.ZustandsdatenkollektivField == null)) {
                    this.ZustandsdatenkollektivField = new XTypedList<ZustandsdatenType>(this, LinqToXsdTypeManager.Instance, ZustandsdatenkollektivXName);
                }
                return this.ZustandsdatenkollektivField;
            }
            set {
                if ((value == null)) {
                    this.ZustandsdatenkollektivField = null;
                }
                else {
                    if ((this.ZustandsdatenkollektivField == null)) {
                        this.ZustandsdatenkollektivField = XTypedList<ZustandsdatenType>.Initialize(this, LinqToXsdTypeManager.Instance, value, ZustandsdatenkollektivXName);
                    }
                    else {
                        XTypedServices.SetList<ZustandsdatenType>(this.ZustandsdatenkollektivField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Datenstatus, Erstellungsdatum, Kommentar?, Kennungen, Stammdatenkollektiv*, Zustandsdatenkollektiv*, Hydraulikdatenkollektiv*, Betriebsdatenkollektiv*, Praesentationsdatenkollektiv*)
        /// </para>
        /// </summary>
        public virtual IList<HydraulikdatenType> Hydraulikdatenkollektiv {
            get {
                if ((this.HydraulikdatenkollektivField == null)) {
                    this.HydraulikdatenkollektivField = new XTypedList<HydraulikdatenType>(this, LinqToXsdTypeManager.Instance, HydraulikdatenkollektivXName);
                }
                return this.HydraulikdatenkollektivField;
            }
            set {
                if ((value == null)) {
                    this.HydraulikdatenkollektivField = null;
                }
                else {
                    if ((this.HydraulikdatenkollektivField == null)) {
                        this.HydraulikdatenkollektivField = XTypedList<HydraulikdatenType>.Initialize(this, LinqToXsdTypeManager.Instance, value, HydraulikdatenkollektivXName);
                    }
                    else {
                        XTypedServices.SetList<HydraulikdatenType>(this.HydraulikdatenkollektivField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Datenstatus, Erstellungsdatum, Kommentar?, Kennungen, Stammdatenkollektiv*, Zustandsdatenkollektiv*, Hydraulikdatenkollektiv*, Betriebsdatenkollektiv*, Praesentationsdatenkollektiv*)
        /// </para>
        /// </summary>
        public virtual IList<BetriebsdatenType> Betriebsdatenkollektiv {
            get {
                if ((this.BetriebsdatenkollektivField == null)) {
                    this.BetriebsdatenkollektivField = new XTypedList<BetriebsdatenType>(this, LinqToXsdTypeManager.Instance, BetriebsdatenkollektivXName);
                }
                return this.BetriebsdatenkollektivField;
            }
            set {
                if ((value == null)) {
                    this.BetriebsdatenkollektivField = null;
                }
                else {
                    if ((this.BetriebsdatenkollektivField == null)) {
                        this.BetriebsdatenkollektivField = XTypedList<BetriebsdatenType>.Initialize(this, LinqToXsdTypeManager.Instance, value, BetriebsdatenkollektivXName);
                    }
                    else {
                        XTypedServices.SetList<BetriebsdatenType>(this.BetriebsdatenkollektivField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Datenstatus, Erstellungsdatum, Kommentar?, Kennungen, Stammdatenkollektiv*, Zustandsdatenkollektiv*, Hydraulikdatenkollektiv*, Betriebsdatenkollektiv*, Praesentationsdatenkollektiv*)
        /// </para>
        /// </summary>
        public virtual IList<PraesentationsdatenType> Praesentationsdatenkollektiv {
            get {
                if ((this.PraesentationsdatenkollektivField == null)) {
                    this.PraesentationsdatenkollektivField = new XTypedList<PraesentationsdatenType>(this, LinqToXsdTypeManager.Instance, PraesentationsdatenkollektivXName);
                }
                return this.PraesentationsdatenkollektivField;
            }
            set {
                if ((value == null)) {
                    this.PraesentationsdatenkollektivField = null;
                }
                else {
                    if ((this.PraesentationsdatenkollektivField == null)) {
                        this.PraesentationsdatenkollektivField = XTypedList<PraesentationsdatenType>.Initialize(this, LinqToXsdTypeManager.Instance, value, PraesentationsdatenkollektivXName);
                    }
                    else {
                        XTypedServices.SetList<PraesentationsdatenType>(this.PraesentationsdatenkollektivField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<DatenkollektiveType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(DatenstatusXName, typeof(decimal));
            localElementDictionary.Add(ErstellungsdatumXName, typeof(System.DateTime));
            localElementDictionary.Add(KommentarXName, typeof(string));
            localElementDictionary.Add(KennungenXName, typeof(KennungenLocalType));
            localElementDictionary.Add(StammdatenkollektivXName, typeof(StammdatenType));
            localElementDictionary.Add(ZustandsdatenkollektivXName, typeof(ZustandsdatenType));
            localElementDictionary.Add(HydraulikdatenkollektivXName, typeof(HydraulikdatenType));
            localElementDictionary.Add(BetriebsdatenkollektivXName, typeof(BetriebsdatenType));
            localElementDictionary.Add(PraesentationsdatenkollektivXName, typeof(PraesentationsdatenType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Kollektiv+)
        /// </para>
        /// </summary>
        public partial class KennungenLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName KollektivXName = System.Xml.Linq.XName.Get("Kollektiv", "http://www.bfr-abwasser.de");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XTypedList<KollektivType> KollektivField;
            
            private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("Kennungen", "http://www.bfr-abwasser.de");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;
            
		public static explicit operator KennungenLocalType(XElement xe) { return XTypedServices.ToXTypedElement<KennungenLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static KennungenLocalType() {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(KollektivXName));
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (Kollektiv+)
            /// </para>
            /// </summary>
            public KennungenLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required, repeating
            /// </para>
            /// <para>
            /// Regular expression: (Kollektiv+)
            /// </para>
            /// </summary>
            public virtual IList<KollektivType> Kollektiv {
                get {
                    if ((this.KollektivField == null)) {
                        this.KollektivField = new XTypedList<KollektivType>(this, LinqToXsdTypeManager.Instance, KollektivXName);
                    }
                    return this.KollektivField;
                }
                set {
                    if ((value == null)) {
                        this.KollektivField = null;
                    }
                    else {
                        if ((this.KollektivField == null)) {
                            this.KollektivField = XTypedList<KollektivType>.Initialize(this, LinqToXsdTypeManager.Instance, value, KollektivXName);
                        }
                        else {
                            XTypedServices.SetList<KollektivType>(this.KollektivField, value);
                        }
                    }
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            System.Xml.Linq.XName IXMetaData.SchemaName {
                get {
                    return xName;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<KennungenLocalType>(this);
            }
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(KollektivXName, typeof(KollektivType));
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return contentModel;
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Kennung, Kollektivart, Kollektiveigenschaft, Regelwerk, Bearbeitungsstand, Kommentar?)
    /// </para>
    /// </summary>
    public partial class KollektivType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName KennungXName = System.Xml.Linq.XName.Get("Kennung", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName KollektivartXName = System.Xml.Linq.XName.Get("Kollektivart", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName KollektiveigenschaftXName = System.Xml.Linq.XName.Get("Kollektiveigenschaft", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName RegelwerkXName = System.Xml.Linq.XName.Get("Regelwerk", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName BearbeitungsstandXName = System.Xml.Linq.XName.Get("Bearbeitungsstand", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName KommentarXName = System.Xml.Linq.XName.Get("Kommentar", "http://www.bfr-abwasser.de");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("KollektivType", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator KollektivType(XElement xe) { return XTypedServices.ToXTypedElement<KollektivType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static KollektivType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(KennungXName), new NamedContentModelEntity(KollektivartXName), new NamedContentModelEntity(KollektiveigenschaftXName), new NamedContentModelEntity(RegelwerkXName), new NamedContentModelEntity(BearbeitungsstandXName), new NamedContentModelEntity(KommentarXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Kennung, Kollektivart, Kollektiveigenschaft, Regelwerk, Bearbeitungsstand, Kommentar?)
        /// </para>
        /// </summary>
        public KollektivType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (Kennung, Kollektivart, Kollektiveigenschaft, Regelwerk, Bearbeitungsstand, Kommentar?)
        /// </para>
        /// </summary>
        public virtual string Kennung {
            get {
                XElement x = this.GetElement(KennungXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(KennungXName, value, "Kennung", KennungLocalType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (Kennung, Kollektivart, Kollektiveigenschaft, Regelwerk, Bearbeitungsstand, Kommentar?)
        /// </para>
        /// </summary>
        public virtual decimal Kollektivart {
            get {
                XElement x = this.GetElement(KollektivartXName);
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                this.SetElementWithValidation(KollektivartXName, value, "Kollektivart", global::www.bfr.abwasser.de.KollektivartType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (Kennung, Kollektivart, Kollektiveigenschaft, Regelwerk, Bearbeitungsstand, Kommentar?)
        /// </para>
        /// </summary>
        public virtual KollektiveigenschaftLocalType Kollektiveigenschaft {
            get {
                XElement x = this.GetElement(KollektiveigenschaftXName);
                return ((KollektiveigenschaftLocalType)(x));
            }
            set {
                this.SetElement(KollektiveigenschaftXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (Kennung, Kollektivart, Kollektiveigenschaft, Regelwerk, Bearbeitungsstand, Kommentar?)
        /// </para>
        /// </summary>
        public virtual decimal Regelwerk {
            get {
                XElement x = this.GetElement(RegelwerkXName);
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                this.SetElementWithValidation(RegelwerkXName, value, "Regelwerk", global::www.bfr.abwasser.de.RegelwerkType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (Kennung, Kollektivart, Kollektiveigenschaft, Regelwerk, Bearbeitungsstand, Kommentar?)
        /// </para>
        /// </summary>
        public virtual System.DateTime Bearbeitungsstand {
            get {
                XElement x = this.GetElement(BearbeitungsstandXName);
                return XTypedServices.ParseValue<System.DateTime>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date).Datatype);
            }
            set {
                this.SetElement(BearbeitungsstandXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Kennung, Kollektivart, Kollektiveigenschaft, Regelwerk, Bearbeitungsstand, Kommentar?)
        /// </para>
        /// </summary>
        public virtual string Kommentar {
            get {
                XElement x = this.GetElement(KommentarXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
            set {
                this.SetElement(KommentarXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<KollektivType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(KennungXName, typeof(string));
            localElementDictionary.Add(KollektivartXName, typeof(decimal));
            localElementDictionary.Add(KollektiveigenschaftXName, typeof(KollektiveigenschaftLocalType));
            localElementDictionary.Add(RegelwerkXName, typeof(decimal));
            localElementDictionary.Add(BearbeitungsstandXName, typeof(System.DateTime));
            localElementDictionary.Add(KommentarXName, typeof(string));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        private class KennungLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(1)), null, 0, 5, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
            
            private KennungLocalType() {
            }
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Stammdaten | Zustandsdaten | Hydraulikdaten | Betriebsdaten | Praesentationsdaten)
        /// </para>
        /// </summary>
        public partial class KollektiveigenschaftLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName StammdatenXName = System.Xml.Linq.XName.Get("Stammdaten", "http://www.bfr-abwasser.de");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName ZustandsdatenXName = System.Xml.Linq.XName.Get("Zustandsdaten", "http://www.bfr-abwasser.de");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName HydraulikdatenXName = System.Xml.Linq.XName.Get("Hydraulikdaten", "http://www.bfr-abwasser.de");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName BetriebsdatenXName = System.Xml.Linq.XName.Get("Betriebsdaten", "http://www.bfr-abwasser.de");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName PraesentationsdatenXName = System.Xml.Linq.XName.Get("Praesentationsdaten", "http://www.bfr-abwasser.de");
            
            private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("Kollektiveigenschaft", "http://www.bfr-abwasser.de");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;
            
		public static explicit operator KollektiveigenschaftLocalType(XElement xe) { return XTypedServices.ToXTypedElement<KollektiveigenschaftLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static KollektiveigenschaftLocalType() {
                BuildElementDictionary();
                contentModel = new ChoiceContentModelEntity(new NamedContentModelEntity(StammdatenXName), new NamedContentModelEntity(ZustandsdatenXName), new NamedContentModelEntity(HydraulikdatenXName), new NamedContentModelEntity(BetriebsdatenXName), new NamedContentModelEntity(PraesentationsdatenXName));
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (Stammdaten | Zustandsdaten | Hydraulikdaten | Betriebsdaten | Praesentationsdaten)
            /// </para>
            /// </summary>
            public KollektiveigenschaftLocalType() {
            }
            
            public KollektiveigenschaftLocalType(StammType Stammdaten) {
                this.Stammdaten = Stammdaten;
            }
            
            public KollektiveigenschaftLocalType(ZustandType Zustandsdaten) {
                this.Zustandsdaten = Zustandsdaten;
            }
            
            public KollektiveigenschaftLocalType(HydraulikType Hydraulikdaten) {
                this.Hydraulikdaten = Hydraulikdaten;
            }
            
            public KollektiveigenschaftLocalType(BetriebType Betriebsdaten) {
                this.Betriebsdaten = Betriebsdaten;
            }
            
            public KollektiveigenschaftLocalType(PraesentationType Praesentationsdaten) {
                this.Praesentationsdaten = Praesentationsdaten;
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required, choice
            /// </para>
            /// <para>
            /// Regular expression: (Stammdaten | Zustandsdaten | Hydraulikdaten | Betriebsdaten | Praesentationsdaten)
            /// </para>
            /// </summary>
            public virtual StammType Stammdaten {
                get {
                    XElement x = this.GetElement(StammdatenXName);
                    return ((StammType)(x));
                }
                set {
                    this.SetElement(StammdatenXName, value);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required, choice
            /// </para>
            /// <para>
            /// Regular expression: (Stammdaten | Zustandsdaten | Hydraulikdaten | Betriebsdaten | Praesentationsdaten)
            /// </para>
            /// </summary>
            public virtual ZustandType Zustandsdaten {
                get {
                    XElement x = this.GetElement(ZustandsdatenXName);
                    return ((ZustandType)(x));
                }
                set {
                    this.SetElement(ZustandsdatenXName, value);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required, choice
            /// </para>
            /// <para>
            /// Regular expression: (Stammdaten | Zustandsdaten | Hydraulikdaten | Betriebsdaten | Praesentationsdaten)
            /// </para>
            /// </summary>
            public virtual HydraulikType Hydraulikdaten {
                get {
                    XElement x = this.GetElement(HydraulikdatenXName);
                    return ((HydraulikType)(x));
                }
                set {
                    this.SetElement(HydraulikdatenXName, value);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required, choice
            /// </para>
            /// <para>
            /// Regular expression: (Stammdaten | Zustandsdaten | Hydraulikdaten | Betriebsdaten | Praesentationsdaten)
            /// </para>
            /// </summary>
            public virtual BetriebType Betriebsdaten {
                get {
                    XElement x = this.GetElement(BetriebsdatenXName);
                    return ((BetriebType)(x));
                }
                set {
                    this.SetElement(BetriebsdatenXName, value);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: required, choice
            /// </para>
            /// <para>
            /// Regular expression: (Stammdaten | Zustandsdaten | Hydraulikdaten | Betriebsdaten | Praesentationsdaten)
            /// </para>
            /// </summary>
            public virtual PraesentationType Praesentationsdaten {
                get {
                    XElement x = this.GetElement(PraesentationsdatenXName);
                    return ((PraesentationType)(x));
                }
                set {
                    this.SetElement(PraesentationsdatenXName, value);
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            System.Xml.Linq.XName IXMetaData.SchemaName {
                get {
                    return xName;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<KollektiveigenschaftLocalType>(this);
            }
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(StammdatenXName, typeof(StammType));
                localElementDictionary.Add(ZustandsdatenXName, typeof(ZustandType));
                localElementDictionary.Add(HydraulikdatenXName, typeof(HydraulikType));
                localElementDictionary.Add(BetriebsdatenXName, typeof(BetriebType));
                localElementDictionary.Add(PraesentationsdatenXName, typeof(PraesentationType));
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return contentModel;
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Stammdatentyp, Bautechnik, Geometrie, Sanierung, Umfeld)
    /// </para>
    /// </summary>
    public partial class StammType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName StammdatentypXName = System.Xml.Linq.XName.Get("Stammdatentyp", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName BautechnikXName = System.Xml.Linq.XName.Get("Bautechnik", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName GeometrieXName = System.Xml.Linq.XName.Get("Geometrie", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName SanierungXName = System.Xml.Linq.XName.Get("Sanierung", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName UmfeldXName = System.Xml.Linq.XName.Get("Umfeld", "http://www.bfr-abwasser.de");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("StammType", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator StammType(XElement xe) { return XTypedServices.ToXTypedElement<StammType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static StammType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(StammdatentypXName), new NamedContentModelEntity(BautechnikXName), new NamedContentModelEntity(GeometrieXName), new NamedContentModelEntity(SanierungXName), new NamedContentModelEntity(UmfeldXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Stammdatentyp, Bautechnik, Geometrie, Sanierung, Umfeld)
        /// </para>
        /// </summary>
        public StammType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (Stammdatentyp, Bautechnik, Geometrie, Sanierung, Umfeld)
        /// </para>
        /// </summary>
        public virtual decimal Stammdatentyp {
            get {
                XElement x = this.GetElement(StammdatentypXName);
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                this.SetElementWithValidation(StammdatentypXName, value, "Stammdatentyp", StammdatentypLocalType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (Stammdatentyp, Bautechnik, Geometrie, Sanierung, Umfeld)
        /// </para>
        /// </summary>
        public virtual bool Bautechnik {
            get {
                XElement x = this.GetElement(BautechnikXName);
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
            set {
                this.SetElement(BautechnikXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (Stammdatentyp, Bautechnik, Geometrie, Sanierung, Umfeld)
        /// </para>
        /// </summary>
        public virtual bool Geometrie {
            get {
                XElement x = this.GetElement(GeometrieXName);
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
            set {
                this.SetElement(GeometrieXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (Stammdatentyp, Bautechnik, Geometrie, Sanierung, Umfeld)
        /// </para>
        /// </summary>
        public virtual bool Sanierung {
            get {
                XElement x = this.GetElement(SanierungXName);
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
            set {
                this.SetElement(SanierungXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (Stammdatentyp, Bautechnik, Geometrie, Sanierung, Umfeld)
        /// </para>
        /// </summary>
        public virtual bool Umfeld {
            get {
                XElement x = this.GetElement(UmfeldXName);
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
            set {
                this.SetElement(UmfeldXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<StammType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(StammdatentypXName, typeof(decimal));
            localElementDictionary.Add(BautechnikXName, typeof(bool));
            localElementDictionary.Add(GeometrieXName, typeof(bool));
            localElementDictionary.Add(SanierungXName, typeof(bool));
            localElementDictionary.Add(UmfeldXName, typeof(bool));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        private class StammdatentypLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(1360)), new object[] {
                            1m,
                            2m}, 0, 0, null, 2m, 0, null, 1m, 0, null, 1, XmlSchemaWhiteSpace.Collapse));
            
            private StammdatentypLocalType() {
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Praesentationsdatentyp, Thema?)
    /// </para>
    /// </summary>
    public partial class PraesentationType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName PraesentationsdatentypXName = System.Xml.Linq.XName.Get("Praesentationsdatentyp", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ThemaXName = System.Xml.Linq.XName.Get("Thema", "http://www.bfr-abwasser.de");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("PraesentationType", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator PraesentationType(XElement xe) { return XTypedServices.ToXTypedElement<PraesentationType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static PraesentationType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(PraesentationsdatentypXName), new NamedContentModelEntity(ThemaXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Praesentationsdatentyp, Thema?)
        /// </para>
        /// </summary>
        public PraesentationType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (Praesentationsdatentyp, Thema?)
        /// </para>
        /// </summary>
        public virtual decimal Praesentationsdatentyp {
            get {
                XElement x = this.GetElement(PraesentationsdatentypXName);
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                this.SetElementWithValidation(PraesentationsdatentypXName, value, "Praesentationsdatentyp", PraesentationsdatentypLocalType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Praesentationsdatentyp, Thema?)
        /// </para>
        /// </summary>
        public virtual string Thema {
            get {
                XElement x = this.GetElement(ThemaXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(ThemaXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
                }
                else {
                    this.SetElementWithValidation(ThemaXName, value, "Thema", ThemaLocalType.TypeDefinition);
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<PraesentationType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(PraesentationsdatentypXName, typeof(decimal));
            localElementDictionary.Add(ThemaXName, typeof(string));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        private class PraesentationsdatentypLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(1360)), new object[] {
                            1m,
                            2m,
                            3m,
                            4m,
                            5m,
                            6m,
                            7m,
                            8m,
                            9m,
                            10m,
                            11m,
                            12m,
                            13m}, 0, 0, null, 13m, 0, null, 1m, 0, null, 2, XmlSchemaWhiteSpace.Collapse));
            
            private PraesentationsdatentypLocalType() {
            }
        }
        
        private class ThemaLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(4)), null, 0, 0, null, null, 50, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
            
            private ThemaLocalType() {
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Inspektion, Dichtheit, Film)
    /// </para>
    /// </summary>
    public partial class ZustandType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName InspektionXName = System.Xml.Linq.XName.Get("Inspektion", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName DichtheitXName = System.Xml.Linq.XName.Get("Dichtheit", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName FilmXName = System.Xml.Linq.XName.Get("Film", "http://www.bfr-abwasser.de");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("ZustandType", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator ZustandType(XElement xe) { return XTypedServices.ToXTypedElement<ZustandType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static ZustandType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(InspektionXName), new NamedContentModelEntity(DichtheitXName), new NamedContentModelEntity(FilmXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Inspektion, Dichtheit, Film)
        /// </para>
        /// </summary>
        public ZustandType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (Inspektion, Dichtheit, Film)
        /// </para>
        /// </summary>
        public virtual bool Inspektion {
            get {
                XElement x = this.GetElement(InspektionXName);
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
            set {
                this.SetElement(InspektionXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (Inspektion, Dichtheit, Film)
        /// </para>
        /// </summary>
        public virtual bool Dichtheit {
            get {
                XElement x = this.GetElement(DichtheitXName);
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
            set {
                this.SetElement(DichtheitXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (Inspektion, Dichtheit, Film)
        /// </para>
        /// </summary>
        public virtual bool Film {
            get {
                XElement x = this.GetElement(FilmXName);
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
            set {
                this.SetElement(FilmXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ZustandType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(InspektionXName, typeof(bool));
            localElementDictionary.Add(DichtheitXName, typeof(bool));
            localElementDictionary.Add(FilmXName, typeof(bool));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Verfahren, Rechennetz, Gebiet, Flaechen, Belastung, Berechnung)
    /// </para>
    /// </summary>
    public partial class HydraulikType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName VerfahrenXName = System.Xml.Linq.XName.Get("Verfahren", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName RechennetzXName = System.Xml.Linq.XName.Get("Rechennetz", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName GebietXName = System.Xml.Linq.XName.Get("Gebiet", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName FlaechenXName = System.Xml.Linq.XName.Get("Flaechen", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName BelastungXName = System.Xml.Linq.XName.Get("Belastung", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName BerechnungXName = System.Xml.Linq.XName.Get("Berechnung", "http://www.bfr-abwasser.de");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("HydraulikType", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator HydraulikType(XElement xe) { return XTypedServices.ToXTypedElement<HydraulikType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static HydraulikType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(VerfahrenXName), new NamedContentModelEntity(RechennetzXName), new NamedContentModelEntity(GebietXName), new NamedContentModelEntity(FlaechenXName), new NamedContentModelEntity(BelastungXName), new NamedContentModelEntity(BerechnungXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Verfahren, Rechennetz, Gebiet, Flaechen, Belastung, Berechnung)
        /// </para>
        /// </summary>
        public HydraulikType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (Verfahren, Rechennetz, Gebiet, Flaechen, Belastung, Berechnung)
        /// </para>
        /// </summary>
        public virtual bool Verfahren {
            get {
                XElement x = this.GetElement(VerfahrenXName);
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
            set {
                this.SetElement(VerfahrenXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (Verfahren, Rechennetz, Gebiet, Flaechen, Belastung, Berechnung)
        /// </para>
        /// </summary>
        public virtual bool Rechennetz {
            get {
                XElement x = this.GetElement(RechennetzXName);
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
            set {
                this.SetElement(RechennetzXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (Verfahren, Rechennetz, Gebiet, Flaechen, Belastung, Berechnung)
        /// </para>
        /// </summary>
        public virtual bool Gebiet {
            get {
                XElement x = this.GetElement(GebietXName);
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
            set {
                this.SetElement(GebietXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (Verfahren, Rechennetz, Gebiet, Flaechen, Belastung, Berechnung)
        /// </para>
        /// </summary>
        public virtual bool Flaechen {
            get {
                XElement x = this.GetElement(FlaechenXName);
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
            set {
                this.SetElement(FlaechenXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (Verfahren, Rechennetz, Gebiet, Flaechen, Belastung, Berechnung)
        /// </para>
        /// </summary>
        public virtual bool Belastung {
            get {
                XElement x = this.GetElement(BelastungXName);
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
            set {
                this.SetElement(BelastungXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (Verfahren, Rechennetz, Gebiet, Flaechen, Belastung, Berechnung)
        /// </para>
        /// </summary>
        public virtual bool Berechnung {
            get {
                XElement x = this.GetElement(BerechnungXName);
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
            set {
                this.SetElement(BerechnungXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<HydraulikType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(VerfahrenXName, typeof(bool));
            localElementDictionary.Add(RechennetzXName, typeof(bool));
            localElementDictionary.Add(GebietXName, typeof(bool));
            localElementDictionary.Add(FlaechenXName, typeof(bool));
            localElementDictionary.Add(BelastungXName, typeof(bool));
            localElementDictionary.Add(BerechnungXName, typeof(bool));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Beobachtung)
    /// </para>
    /// </summary>
    public partial class BetriebType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName BeobachtungXName = System.Xml.Linq.XName.Get("Beobachtung", "http://www.bfr-abwasser.de");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("BetriebType", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator BetriebType(XElement xe) { return XTypedServices.ToXTypedElement<BetriebType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static BetriebType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(BeobachtungXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Beobachtung)
        /// </para>
        /// </summary>
        public BetriebType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (Beobachtung)
        /// </para>
        /// </summary>
        public virtual bool Beobachtung {
            get {
                XElement x = this.GetElement(BeobachtungXName);
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
            set {
                this.SetElement(BeobachtungXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<BetriebType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(BeobachtungXName, typeof(bool));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (KennungOrdnungseinheit, TypOrdnungseinheit, Bezeichnung, (Liegenschaft | Wirtschaftseinheit)?, Kommentar?)
    /// </para>
    /// </summary>
    public partial class OrdnungseinheitType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName KennungOrdnungseinheitXName = System.Xml.Linq.XName.Get("KennungOrdnungseinheit", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TypOrdnungseinheitXName = System.Xml.Linq.XName.Get("TypOrdnungseinheit", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName BezeichnungXName = System.Xml.Linq.XName.Get("Bezeichnung", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName LiegenschaftXName = System.Xml.Linq.XName.Get("Liegenschaft", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName WirtschaftseinheitXName = System.Xml.Linq.XName.Get("Wirtschaftseinheit", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName KommentarXName = System.Xml.Linq.XName.Get("Kommentar", "http://www.bfr-abwasser.de");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("OrdnungseinheitType", "http://www.bfr-abwasser.de");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator OrdnungseinheitType(XElement xe) { return XTypedServices.ToXTypedElement<OrdnungseinheitType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static OrdnungseinheitType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(KennungOrdnungseinheitXName), new NamedContentModelEntity(TypOrdnungseinheitXName), new NamedContentModelEntity(BezeichnungXName), new ChoiceContentModelEntity(new NamedContentModelEntity(LiegenschaftXName), new NamedContentModelEntity(WirtschaftseinheitXName)), new NamedContentModelEntity(KommentarXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (KennungOrdnungseinheit, TypOrdnungseinheit, Bezeichnung, (Liegenschaft | Wirtschaftseinheit)?, Kommentar?)
        /// </para>
        /// </summary>
        public OrdnungseinheitType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (KennungOrdnungseinheit, TypOrdnungseinheit, Bezeichnung, (Liegenschaft | Wirtschaftseinheit)?, Kommentar?)
        /// </para>
        /// </summary>
        public virtual string KennungOrdnungseinheit {
            get {
                XElement x = this.GetElement(KennungOrdnungseinheitXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(KennungOrdnungseinheitXName, value, "KennungOrdnungseinheit", KennungOrdnungseinheitLocalType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (KennungOrdnungseinheit, TypOrdnungseinheit, Bezeichnung, (Liegenschaft | Wirtschaftseinheit)?, Kommentar?)
        /// </para>
        /// </summary>
        public virtual decimal TypOrdnungseinheit {
            get {
                XElement x = this.GetElement(TypOrdnungseinheitXName);
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                this.SetElementWithValidation(TypOrdnungseinheitXName, value, "TypOrdnungseinheit", global::www.bfr.abwasser.de.TypOrdnungseinheitType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (KennungOrdnungseinheit, TypOrdnungseinheit, Bezeichnung, (Liegenschaft | Wirtschaftseinheit)?, Kommentar?)
        /// </para>
        /// </summary>
        public virtual string Bezeichnung {
            get {
                XElement x = this.GetElement(BezeichnungXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetElementWithValidation(BezeichnungXName, value, "Bezeichnung", BezeichnungLocalType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (KennungOrdnungseinheit, TypOrdnungseinheit, Bezeichnung, (Liegenschaft | Wirtschaftseinheit)?, Kommentar?)
        /// </para>
        /// </summary>
        public virtual LiegenschaftType Liegenschaft {
            get {
                XElement x = this.GetElement(LiegenschaftXName);
                return ((LiegenschaftType)(x));
            }
            set {
                this.SetElement(LiegenschaftXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (KennungOrdnungseinheit, TypOrdnungseinheit, Bezeichnung, (Liegenschaft | Wirtschaftseinheit)?, Kommentar?)
        /// </para>
        /// </summary>
        public virtual WirtschaftseinheitType Wirtschaftseinheit {
            get {
                XElement x = this.GetElement(WirtschaftseinheitXName);
                return ((WirtschaftseinheitType)(x));
            }
            set {
                this.SetElement(WirtschaftseinheitXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (KennungOrdnungseinheit, TypOrdnungseinheit, Bezeichnung, (Liegenschaft | Wirtschaftseinheit)?, Kommentar?)
        /// </para>
        /// </summary>
        public virtual string Kommentar {
            get {
                XElement x = this.GetElement(KommentarXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
            set {
                this.SetElement(KommentarXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Token).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<OrdnungseinheitType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(KennungOrdnungseinheitXName, typeof(string));
            localElementDictionary.Add(TypOrdnungseinheitXName, typeof(decimal));
            localElementDictionary.Add(BezeichnungXName, typeof(string));
            localElementDictionary.Add(LiegenschaftXName, typeof(LiegenschaftType));
            localElementDictionary.Add(WirtschaftseinheitXName, typeof(WirtschaftseinheitType));
            localElementDictionary.Add(KommentarXName, typeof(string));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        private class KennungOrdnungseinheitLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(1)), null, 0, 4, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
            
            private KennungOrdnungseinheitLocalType() {
            }
        }
        
        private class BezeichnungLocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(4)), null, 0, 0, null, null, 255, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
            
            private BezeichnungLocalType() {
            }
        }
    }
    
    public class LinqToXsdTypeManager : ILinqToXsdTypeManager {
        
        private static Dictionary<System.Xml.Linq.XName, System.Type> typeDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        private static Dictionary<System.Xml.Linq.XName, System.Type> elementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        private static XmlSchemaSet schemaSet;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static LinqToXsdTypeManager typeManagerSingleton = new LinqToXsdTypeManager();
        
        static LinqToXsdTypeManager() {
            BuildTypeDictionary();
            BuildElementDictionary();
        }
        
        private LinqToXsdTypeManager() {
        }
        
        XmlSchemaSet ILinqToXsdTypeManager.Schemas {
            get {
                if ((schemaSet == null)) {
                    XmlSchemaSet tempSet = new XmlSchemaSet();
                    System.Threading.Interlocked.CompareExchange(ref schemaSet, tempSet, null);
                }
                return schemaSet;
            }
            set {
                schemaSet = value;
            }
        }
        
        Dictionary<System.Xml.Linq.XName, System.Type> ILinqToXsdTypeManager.GlobalTypeDictionary {
            get {
                return typeDictionary;
            }
        }
        
        Dictionary<System.Xml.Linq.XName, System.Type> ILinqToXsdTypeManager.GlobalElementDictionary {
            get {
                return elementDictionary;
            }
        }
        
        Dictionary<System.Type, System.Type> ILinqToXsdTypeManager.RootContentTypeMapping {
            get {
                return XTypedServices.EmptyTypeMappingDictionary;
            }
        }
        
        public static LinqToXsdTypeManager Instance {
            get {
                return typeManagerSingleton;
            }
        }
        
        private static void BuildTypeDictionary() {
            typeDictionary.Add(System.Xml.Linq.XName.Get("StammdatenType", "http://www.bfr-abwasser.de"), typeof(global::www.bfr.abwasser.de.StammdatenType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("StammAuftragType", "http://www.bfr-abwasser.de"), typeof(global::www.bfr.abwasser.de.StammAuftragType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("DokumentType", "http://www.bfr-abwasser.de"), typeof(global::www.bfr.abwasser.de.DokumentType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("UmfeldType", "http://www.bfr-abwasser.de"), typeof(global::www.bfr.abwasser.de.UmfeldType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("KoordinateType", "http://www.bfr-abwasser.de"), typeof(global::www.bfr.abwasser.de.KoordinateType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("AbwassertechnischeAnlageType", "http://www.bfr-abwasser.de"), typeof(global::www.bfr.abwasser.de.AbwassertechnischeAnlageType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("StammKanteType", "http://www.bfr-abwasser.de"), typeof(global::www.bfr.abwasser.de.StammKanteType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("ProfilType", "http://www.bfr-abwasser.de"), typeof(global::www.bfr.abwasser.de.ProfilType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("KoordinatenType", "http://www.bfr-abwasser.de"), typeof(global::www.bfr.abwasser.de.KoordinatenType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("HaltungType", "http://www.bfr-abwasser.de"), typeof(global::www.bfr.abwasser.de.HaltungType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("LeitungType", "http://www.bfr-abwasser.de"), typeof(global::www.bfr.abwasser.de.LeitungType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("RinneType", "http://www.bfr-abwasser.de"), typeof(global::www.bfr.abwasser.de.RinneType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("GerinneType", "http://www.bfr-abwasser.de"), typeof(global::www.bfr.abwasser.de.GerinneType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("StammKnotenType", "http://www.bfr-abwasser.de"), typeof(global::www.bfr.abwasser.de.StammKnotenType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("SchachtType", "http://www.bfr-abwasser.de"), typeof(global::www.bfr.abwasser.de.SchachtType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("AufbauType", "http://www.bfr-abwasser.de"), typeof(global::www.bfr.abwasser.de.AufbauType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("UntereSchachtzoneType", "http://www.bfr-abwasser.de"), typeof(global::www.bfr.abwasser.de.UntereSchachtzoneType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("UnterteilType", "http://www.bfr-abwasser.de"), typeof(global::www.bfr.abwasser.de.UnterteilType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("AnschlusspunktType", "http://www.bfr-abwasser.de"), typeof(global::www.bfr.abwasser.de.AnschlusspunktType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("BauwerkType", "http://www.bfr-abwasser.de"), typeof(global::www.bfr.abwasser.de.BauwerkType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("PumpwerkType", "http://www.bfr-abwasser.de"), typeof(global::www.bfr.abwasser.de.PumpwerkType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("AuslaufbauwerkType", "http://www.bfr-abwasser.de"), typeof(global::www.bfr.abwasser.de.AuslaufbauwerkType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("BeckenType", "http://www.bfr-abwasser.de"), typeof(global::www.bfr.abwasser.de.BeckenType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("BehandlungsanlageType", "http://www.bfr-abwasser.de"), typeof(global::www.bfr.abwasser.de.BehandlungsanlageType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("AnlageType", "http://www.bfr-abwasser.de"), typeof(global::www.bfr.abwasser.de.AnlageType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("SchlammfangType", "http://www.bfr-abwasser.de"), typeof(global::www.bfr.abwasser.de.SchlammfangType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("LfAbscheiderType", "http://www.bfr-abwasser.de"), typeof(global::www.bfr.abwasser.de.LfAbscheiderType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("StaerkeabscheiderType", "http://www.bfr-abwasser.de"), typeof(global::www.bfr.abwasser.de.StaerkeabscheiderType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("FettabscheiderType", "http://www.bfr-abwasser.de"), typeof(global::www.bfr.abwasser.de.FettabscheiderType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("EmulsionsspaltanlageType", "http://www.bfr-abwasser.de"), typeof(global::www.bfr.abwasser.de.EmulsionsspaltanlageType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("NeutralisationsanlageType", "http://www.bfr-abwasser.de"), typeof(global::www.bfr.abwasser.de.NeutralisationsanlageType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("StapelbeckenType", "http://www.bfr-abwasser.de"), typeof(global::www.bfr.abwasser.de.StapelbeckenType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("RechenType", "http://www.bfr-abwasser.de"), typeof(global::www.bfr.abwasser.de.RechenType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("SiebType", "http://www.bfr-abwasser.de"), typeof(global::www.bfr.abwasser.de.SiebType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("KlaeranlageType", "http://www.bfr-abwasser.de"), typeof(global::www.bfr.abwasser.de.KlaeranlageType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("PumpeType", "http://www.bfr-abwasser.de"), typeof(global::www.bfr.abwasser.de.PumpeType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("WehrUeberlaufType", "http://www.bfr-abwasser.de"), typeof(global::www.bfr.abwasser.de.WehrUeberlaufType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("DrosselType", "http://www.bfr-abwasser.de"), typeof(global::www.bfr.abwasser.de.DrosselType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("SchieberType", "http://www.bfr-abwasser.de"), typeof(global::www.bfr.abwasser.de.SchieberType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("VersickerungsanlageType", "http://www.bfr-abwasser.de"), typeof(global::www.bfr.abwasser.de.VersickerungsanlageType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("MuldeTeichType", "http://www.bfr-abwasser.de"), typeof(global::www.bfr.abwasser.de.MuldeTeichType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("RohrRigoleType", "http://www.bfr-abwasser.de"), typeof(global::www.bfr.abwasser.de.RohrRigoleType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("VersickerungsschachtType", "http://www.bfr-abwasser.de"), typeof(global::www.bfr.abwasser.de.VersickerungsschachtType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("VersickerungsflaecheType", "http://www.bfr-abwasser.de"), typeof(global::www.bfr.abwasser.de.VersickerungsflaecheType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("ZisterneType", "http://www.bfr-abwasser.de"), typeof(global::www.bfr.abwasser.de.ZisterneType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("StammLageType", "http://www.bfr-abwasser.de"), typeof(global::www.bfr.abwasser.de.StammLageType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("SanierungType", "http://www.bfr-abwasser.de"), typeof(global::www.bfr.abwasser.de.SanierungType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("LagedatenType", "http://www.bfr-abwasser.de"), typeof(global::www.bfr.abwasser.de.LagedatenType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("MaterialkennwerteType", "http://www.bfr-abwasser.de"), typeof(global::www.bfr.abwasser.de.MaterialkennwerteType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("GeometrieType", "http://www.bfr-abwasser.de"), typeof(global::www.bfr.abwasser.de.GeometrieType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("KanteType", "http://www.bfr-abwasser.de"), typeof(global::www.bfr.abwasser.de.KanteType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("PunktType", "http://www.bfr-abwasser.de"), typeof(global::www.bfr.abwasser.de.PunktType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("UmweltparameterType", "http://www.bfr-abwasser.de"), typeof(global::www.bfr.abwasser.de.UmweltparameterType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("StammAnschlussType", "http://www.bfr-abwasser.de"), typeof(global::www.bfr.abwasser.de.StammAnschlussType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("SegmentType", "http://www.bfr-abwasser.de"), typeof(global::www.bfr.abwasser.de.SegmentType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("UebergeordneteAbwassertechnischeAnlageType", "http://www.bfr-abwasser.de"), typeof(global::www.bfr.abwasser.de.UebergeordneteAbwassertechnischeAnlageType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("DeckelType", "http://www.bfr-abwasser.de"), typeof(global::www.bfr.abwasser.de.DeckelType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("AuflageringType", "http://www.bfr-abwasser.de"), typeof(global::www.bfr.abwasser.de.AuflageringType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("EinlaufbauwerkType", "http://www.bfr-abwasser.de"), typeof(global::www.bfr.abwasser.de.EinlaufbauwerkType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("ZustandsdatenType", "http://www.bfr-abwasser.de"), typeof(global::www.bfr.abwasser.de.ZustandsdatenType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("InspizierteAbwassertechnischeAnlageType", "http://www.bfr-abwasser.de"), typeof(global::www.bfr.abwasser.de.InspizierteAbwassertechnischeAnlageType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("RohrType", "http://www.bfr-abwasser.de"), typeof(global::www.bfr.abwasser.de.RohrType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("KnotenType", "http://www.bfr-abwasser.de"), typeof(global::www.bfr.abwasser.de.KnotenType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("BauwerkeType", "http://www.bfr-abwasser.de"), typeof(global::www.bfr.abwasser.de.BauwerkeType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("AuftragType", "http://www.bfr-abwasser.de"), typeof(global::www.bfr.abwasser.de.AuftragType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("DokumentenType", "http://www.bfr-abwasser.de"), typeof(global::www.bfr.abwasser.de.DokumentenType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("OrtLageType", "http://www.bfr-abwasser.de"), typeof(global::www.bfr.abwasser.de.OrtLageType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("OptischeInspektionType", "http://www.bfr-abwasser.de"), typeof(global::www.bfr.abwasser.de.OptischeInspektionType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("DichtheitType", "http://www.bfr-abwasser.de"), typeof(global::www.bfr.abwasser.de.DichtheitType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("RGrunddatenType", "http://www.bfr-abwasser.de"), typeof(global::www.bfr.abwasser.de.RGrunddatenType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("KGrunddatenType", "http://www.bfr-abwasser.de"), typeof(global::www.bfr.abwasser.de.KGrunddatenType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("AnschlussType", "http://www.bfr-abwasser.de"), typeof(global::www.bfr.abwasser.de.AnschlussType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("RZustandType", "http://www.bfr-abwasser.de"), typeof(global::www.bfr.abwasser.de.RZustandType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("KZustandType", "http://www.bfr-abwasser.de"), typeof(global::www.bfr.abwasser.de.KZustandType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("BZustandType", "http://www.bfr-abwasser.de"), typeof(global::www.bfr.abwasser.de.BZustandType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("KlassifizierungType", "http://www.bfr-abwasser.de"), typeof(global::www.bfr.abwasser.de.KlassifizierungType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("KDichtheitType", "http://www.bfr-abwasser.de"), typeof(global::www.bfr.abwasser.de.KDichtheitType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("KStandsicherheitType", "http://www.bfr-abwasser.de"), typeof(global::www.bfr.abwasser.de.KStandsicherheitType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("KBetriebssicherheitType", "http://www.bfr-abwasser.de"), typeof(global::www.bfr.abwasser.de.KBetriebssicherheitType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("BewertungType", "http://www.bfr-abwasser.de"), typeof(global::www.bfr.abwasser.de.BewertungType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("PruefDeltaPType", "http://www.bfr-abwasser.de"), typeof(global::www.bfr.abwasser.de.PruefDeltaPType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("PruefDeltaVType", "http://www.bfr-abwasser.de"), typeof(global::www.bfr.abwasser.de.PruefDeltaVType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("PruefObjektType", "http://www.bfr-abwasser.de"), typeof(global::www.bfr.abwasser.de.PruefObjektType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("FilmType", "http://www.bfr-abwasser.de"), typeof(global::www.bfr.abwasser.de.FilmType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("FrameType", "http://www.bfr-abwasser.de"), typeof(global::www.bfr.abwasser.de.FrameType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("OffsetType", "http://www.bfr-abwasser.de"), typeof(global::www.bfr.abwasser.de.OffsetType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("FilmObjektType", "http://www.bfr-abwasser.de"), typeof(global::www.bfr.abwasser.de.FilmObjektType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("HydraulikdatenType", "http://www.bfr-abwasser.de"), typeof(global::www.bfr.abwasser.de.HydraulikdatenType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("RechennetzType", "http://www.bfr-abwasser.de"), typeof(global::www.bfr.abwasser.de.RechennetzType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("HydraulikObjektType", "http://www.bfr-abwasser.de"), typeof(global::www.bfr.abwasser.de.HydraulikObjektType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("GebietType", "http://www.bfr-abwasser.de"), typeof(global::www.bfr.abwasser.de.GebietType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("FlaecheType", "http://www.bfr-abwasser.de"), typeof(global::www.bfr.abwasser.de.FlaecheType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("FlaechengeometrieType", "http://www.bfr-abwasser.de"), typeof(global::www.bfr.abwasser.de.FlaechengeometrieType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("FlKanteType", "http://www.bfr-abwasser.de"), typeof(global::www.bfr.abwasser.de.FlKanteType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("FlPunktType", "http://www.bfr-abwasser.de"), typeof(global::www.bfr.abwasser.de.FlPunktType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("HydHaltungLeitungType", "http://www.bfr-abwasser.de"), typeof(global::www.bfr.abwasser.de.HydHaltungLeitungType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("HydGerinneType", "http://www.bfr-abwasser.de"), typeof(global::www.bfr.abwasser.de.HydGerinneType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("HydPumpeType", "http://www.bfr-abwasser.de"), typeof(global::www.bfr.abwasser.de.HydPumpeType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("PumpenKennlinieType", "http://www.bfr-abwasser.de"), typeof(global::www.bfr.abwasser.de.PumpenKennlinieType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("PumpenstufenType", "http://www.bfr-abwasser.de"), typeof(global::www.bfr.abwasser.de.PumpenstufenType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("HydWehrType", "http://www.bfr-abwasser.de"), typeof(global::www.bfr.abwasser.de.HydWehrType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("HydSchieberType", "http://www.bfr-abwasser.de"), typeof(global::www.bfr.abwasser.de.HydSchieberType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("HydSchachtType", "http://www.bfr-abwasser.de"), typeof(global::www.bfr.abwasser.de.HydSchachtType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("HydSpeicherbauwerkType", "http://www.bfr-abwasser.de"), typeof(global::www.bfr.abwasser.de.HydSpeicherbauwerkType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("VolumenkennlinieType", "http://www.bfr-abwasser.de"), typeof(global::www.bfr.abwasser.de.VolumenkennlinieType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("DrosselkennlinieType", "http://www.bfr-abwasser.de"), typeof(global::www.bfr.abwasser.de.DrosselkennlinieType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("DrosselabflussType", "http://www.bfr-abwasser.de"), typeof(global::www.bfr.abwasser.de.DrosselabflussType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("VersickerungskennlinieType", "http://www.bfr-abwasser.de"), typeof(global::www.bfr.abwasser.de.VersickerungskennlinieType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("HydGSAuslassType", "http://www.bfr-abwasser.de"), typeof(global::www.bfr.abwasser.de.HydGSAuslassType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("HydFreiAuslassType", "http://www.bfr-abwasser.de"), typeof(global::www.bfr.abwasser.de.HydFreiAuslassType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("HydDrosselType", "http://www.bfr-abwasser.de"), typeof(global::www.bfr.abwasser.de.HydDrosselType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("HydReglerType", "http://www.bfr-abwasser.de"), typeof(global::www.bfr.abwasser.de.HydReglerType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("Verfahrentype", "http://www.bfr-abwasser.de"), typeof(global::www.bfr.abwasser.de.Verfahrentype));
            typeDictionary.Add(System.Xml.Linq.XName.Get("ZielgroesseType", "http://www.bfr-abwasser.de"), typeof(global::www.bfr.abwasser.de.ZielgroesseType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("BerechnungType", "http://www.bfr-abwasser.de"), typeof(global::www.bfr.abwasser.de.BerechnungType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("BerechnungInfoType", "http://www.bfr-abwasser.de"), typeof(global::www.bfr.abwasser.de.BerechnungInfoType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("UeberregnungType", "http://www.bfr-abwasser.de"), typeof(global::www.bfr.abwasser.de.UeberregnungType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("SimulationType", "http://www.bfr-abwasser.de"), typeof(global::www.bfr.abwasser.de.SimulationType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("BerechnungObjektType", "http://www.bfr-abwasser.de"), typeof(global::www.bfr.abwasser.de.BerechnungObjektType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("ErgHaltungType", "http://www.bfr-abwasser.de"), typeof(global::www.bfr.abwasser.de.ErgHaltungType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("ErgLeitungType", "http://www.bfr-abwasser.de"), typeof(global::www.bfr.abwasser.de.ErgLeitungType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("ErgGerinneType", "http://www.bfr-abwasser.de"), typeof(global::www.bfr.abwasser.de.ErgGerinneType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("ErgPumpeType", "http://www.bfr-abwasser.de"), typeof(global::www.bfr.abwasser.de.ErgPumpeType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("ErgWehrType", "http://www.bfr-abwasser.de"), typeof(global::www.bfr.abwasser.de.ErgWehrType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("ErgSchieberType", "http://www.bfr-abwasser.de"), typeof(global::www.bfr.abwasser.de.ErgSchieberType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("ErgSchachtType", "http://www.bfr-abwasser.de"), typeof(global::www.bfr.abwasser.de.ErgSchachtType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("ErgSpeicherbauwerkType", "http://www.bfr-abwasser.de"), typeof(global::www.bfr.abwasser.de.ErgSpeicherbauwerkType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("ErgRRBType", "http://www.bfr-abwasser.de"), typeof(global::www.bfr.abwasser.de.ErgRRBType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("ErgRUEBType", "http://www.bfr-abwasser.de"), typeof(global::www.bfr.abwasser.de.ErgRUEBType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("ErgBFBType", "http://www.bfr-abwasser.de"), typeof(global::www.bfr.abwasser.de.ErgBFBType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("ErgVAType", "http://www.bfr-abwasser.de"), typeof(global::www.bfr.abwasser.de.ErgVAType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("ErgGSAuslassType", "http://www.bfr-abwasser.de"), typeof(global::www.bfr.abwasser.de.ErgGSAuslassType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("ErgFreiAuslassType", "http://www.bfr-abwasser.de"), typeof(global::www.bfr.abwasser.de.ErgFreiAuslassType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("NiederschlagType", "http://www.bfr-abwasser.de"), typeof(global::www.bfr.abwasser.de.NiederschlagType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("BlockregenType", "http://www.bfr-abwasser.de"), typeof(global::www.bfr.abwasser.de.BlockregenType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("ModellregenType", "http://www.bfr-abwasser.de"), typeof(global::www.bfr.abwasser.de.ModellregenType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("NaturregenType", "http://www.bfr-abwasser.de"), typeof(global::www.bfr.abwasser.de.NaturregenType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("KontinuumType", "http://www.bfr-abwasser.de"), typeof(global::www.bfr.abwasser.de.KontinuumType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("TrockenwetterType", "http://www.bfr-abwasser.de"), typeof(global::www.bfr.abwasser.de.TrockenwetterType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("Einleiterkollektiv", "http://www.bfr-abwasser.de"), typeof(global::www.bfr.abwasser.de.Einleiterkollektiv));
            typeDictionary.Add(System.Xml.Linq.XName.Get("EinzeleinleiterType", "http://www.bfr-abwasser.de"), typeof(global::www.bfr.abwasser.de.EinzeleinleiterType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("TrwEinleiterType", "http://www.bfr-abwasser.de"), typeof(global::www.bfr.abwasser.de.TrwEinleiterType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("TrwPauschalType", "http://www.bfr-abwasser.de"), typeof(global::www.bfr.abwasser.de.TrwPauschalType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("TrwEinzelwerteType", "http://www.bfr-abwasser.de"), typeof(global::www.bfr.abwasser.de.TrwEinzelwerteType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("SwEinleiterType", "http://www.bfr-abwasser.de"), typeof(global::www.bfr.abwasser.de.SwEinleiterType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("SwPauschalType", "http://www.bfr-abwasser.de"), typeof(global::www.bfr.abwasser.de.SwPauschalType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("SwEinzelwerteType", "http://www.bfr-abwasser.de"), typeof(global::www.bfr.abwasser.de.SwEinzelwerteType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("HDokumenteType", "http://www.bfr-abwasser.de"), typeof(global::www.bfr.abwasser.de.HDokumenteType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("BetriebsdatenType", "http://www.bfr-abwasser.de"), typeof(global::www.bfr.abwasser.de.BetriebsdatenType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("DokumenteType", "http://www.bfr-abwasser.de"), typeof(global::www.bfr.abwasser.de.DokumenteType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("GWMessstelleType", "http://www.bfr-abwasser.de"), typeof(global::www.bfr.abwasser.de.GWMessstelleType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("MessungType", "http://www.bfr-abwasser.de"), typeof(global::www.bfr.abwasser.de.MessungType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("BodenkennwerteType", "http://www.bfr-abwasser.de"), typeof(global::www.bfr.abwasser.de.BodenkennwerteType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("BodenschichtType", "http://www.bfr-abwasser.de"), typeof(global::www.bfr.abwasser.de.BodenschichtType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("StandortType", "http://www.bfr-abwasser.de"), typeof(global::www.bfr.abwasser.de.StandortType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("PraesentationsdatenType", "http://www.bfr-abwasser.de"), typeof(global::www.bfr.abwasser.de.PraesentationsdatenType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("PraesentationsobjektType", "http://www.bfr-abwasser.de"), typeof(global::www.bfr.abwasser.de.PraesentationsobjektType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("ReferenzType", "http://www.bfr-abwasser.de"), typeof(global::www.bfr.abwasser.de.ReferenzType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("StammdatenReferenzType", "http://www.bfr-abwasser.de"), typeof(global::www.bfr.abwasser.de.StammdatenReferenzType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("StammdatenMassnahmeReferenzType", "http://www.bfr-abwasser.de"), typeof(global::www.bfr.abwasser.de.StammdatenMassnahmeReferenzType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("DeckelReferenzType", "http://www.bfr-abwasser.de"), typeof(global::www.bfr.abwasser.de.DeckelReferenzType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("ZustandsdatenReferenzType", "http://www.bfr-abwasser.de"), typeof(global::www.bfr.abwasser.de.ZustandsdatenReferenzType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("InspektionsdatenReferenzType", "http://www.bfr-abwasser.de"), typeof(global::www.bfr.abwasser.de.InspektionsdatenReferenzType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("BerechnungsergebnisReferenzType", "http://www.bfr-abwasser.de"), typeof(global::www.bfr.abwasser.de.BerechnungsergebnisReferenzType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("HydraulikflaecheReferenzType", "http://www.bfr-abwasser.de"), typeof(global::www.bfr.abwasser.de.HydraulikflaecheReferenzType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("TextobjektType", "http://www.bfr-abwasser.de"), typeof(global::www.bfr.abwasser.de.TextobjektType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("SymbolobjektType", "http://www.bfr-abwasser.de"), typeof(global::www.bfr.abwasser.de.SymbolobjektType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("PositionType", "http://www.bfr-abwasser.de"), typeof(global::www.bfr.abwasser.de.PositionType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("AdmindatenType", "http://www.bfr-abwasser.de"), typeof(global::www.bfr.abwasser.de.AdmindatenType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("MDokumentType", "http://www.bfr-abwasser.de"), typeof(global::www.bfr.abwasser.de.MDokumentType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("LiegenschaftType", "http://www.bfr-abwasser.de"), typeof(global::www.bfr.abwasser.de.LiegenschaftType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("WirtschaftseinheitType", "http://www.bfr-abwasser.de"), typeof(global::www.bfr.abwasser.de.WirtschaftseinheitType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("VerwaltungType", "http://www.bfr-abwasser.de"), typeof(global::www.bfr.abwasser.de.VerwaltungType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("AllgGeometrieType", "http://www.bfr-abwasser.de"), typeof(global::www.bfr.abwasser.de.AllgGeometrieType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("DatenkollektiveType", "http://www.bfr-abwasser.de"), typeof(global::www.bfr.abwasser.de.DatenkollektiveType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("KollektivType", "http://www.bfr-abwasser.de"), typeof(global::www.bfr.abwasser.de.KollektivType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("StammType", "http://www.bfr-abwasser.de"), typeof(global::www.bfr.abwasser.de.StammType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("PraesentationType", "http://www.bfr-abwasser.de"), typeof(global::www.bfr.abwasser.de.PraesentationType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("ZustandType", "http://www.bfr-abwasser.de"), typeof(global::www.bfr.abwasser.de.ZustandType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("HydraulikType", "http://www.bfr-abwasser.de"), typeof(global::www.bfr.abwasser.de.HydraulikType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("BetriebType", "http://www.bfr-abwasser.de"), typeof(global::www.bfr.abwasser.de.BetriebType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("OrdnungseinheitType", "http://www.bfr-abwasser.de"), typeof(global::www.bfr.abwasser.de.OrdnungseinheitType));
        }
        
        private static void BuildElementDictionary() {
            elementDictionary.Add(System.Xml.Linq.XName.Get("Identifikation", "http://www.bfr-abwasser.de"), typeof(global::www.bfr.abwasser.de.Identifikation));
        }
        
        protected internal static void AddSchemas(XmlSchemaSet schemas) {
            schemas.Add(schemaSet);
        }
        
        public static System.Type GetRootType() {
            return elementDictionary[System.Xml.Linq.XName.Get("Identifikation", "http://www.bfr-abwasser.de")];
        }
    }
    
    public partial class XRootNamespace {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XDocument doc;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedElement rootObject;
        

		public Identifikation Identifikation {  get {return rootObject as Identifikation; } }
        
        private XRootNamespace() {
        }
        
        public XRootNamespace(Identifikation root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public virtual XDocument XDocument {
            get {
                return doc;
            }
        }
        
        public virtual XTypedElement Root {
            get {
                return rootObject;
            }
        }
        
        public static XRootNamespace Load(string xmlFile) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(xmlFile);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRootNamespace Load(string xmlFile, LoadOptions options) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(xmlFile, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRootNamespace Load(TextReader textReader) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(textReader);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRootNamespace Load(TextReader textReader, LoadOptions options) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(textReader, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRootNamespace Load(XmlReader xmlReader) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(xmlReader);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRootNamespace Parse(string text) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Parse(text);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRootNamespace Parse(string text, LoadOptions options) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Parse(text, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public virtual void Save(string fileName) {
            doc.Save(fileName);
        }
        
        public virtual void Save(TextWriter textWriter) {
            doc.Save(textWriter);
        }
        
        public virtual void Save(XmlWriter writer) {
            doc.Save(writer);
        }
        
        public virtual void Save(TextWriter textWriter, SaveOptions options) {
            doc.Save(textWriter, options);
        }
        
        public virtual void Save(string fileName, SaveOptions options) {
            doc.Save(fileName, options);
        }
    }
    
    public partial class XRoot {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XDocument doc;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedElement rootObject;
        

		public global::www.bfr.abwasser.de.Identifikation Identifikation {  get {return rootObject as global::www.bfr.abwasser.de.Identifikation; } }
        
        private XRoot() {
        }
        
        public XRoot(global::www.bfr.abwasser.de.Identifikation root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public virtual XDocument XDocument {
            get {
                return doc;
            }
        }
        
        public virtual XTypedElement Root {
            get {
                return rootObject;
            }
        }
        
        public static XRoot Load(string xmlFile) {
            XRoot root = new XRoot();
            root.doc = XDocument.Load(xmlFile);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRoot Load(string xmlFile, LoadOptions options) {
            XRoot root = new XRoot();
            root.doc = XDocument.Load(xmlFile, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRoot Load(TextReader textReader) {
            XRoot root = new XRoot();
            root.doc = XDocument.Load(textReader);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRoot Load(TextReader textReader, LoadOptions options) {
            XRoot root = new XRoot();
            root.doc = XDocument.Load(textReader, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRoot Load(XmlReader xmlReader) {
            XRoot root = new XRoot();
            root.doc = XDocument.Load(xmlReader);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRoot Parse(string text) {
            XRoot root = new XRoot();
            root.doc = XDocument.Parse(text);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRoot Parse(string text, LoadOptions options) {
            XRoot root = new XRoot();
            root.doc = XDocument.Parse(text, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public virtual void Save(string fileName) {
            doc.Save(fileName);
        }
        
        public virtual void Save(TextWriter textWriter) {
            doc.Save(textWriter);
        }
        
        public virtual void Save(XmlWriter writer) {
            doc.Save(writer);
        }
        
        public virtual void Save(TextWriter textWriter, SaveOptions options) {
            doc.Save(textWriter, options);
        }
        
        public virtual void Save(string fileName, SaveOptions options) {
            doc.Save(fileName, options);
        }
    }
}
