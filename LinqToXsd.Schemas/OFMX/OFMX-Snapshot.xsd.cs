//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace OFMX {
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.ComponentModel;
    using System.IO;
    using System.Linq;
    using System.Diagnostics;
    using System.Xml;
    using System.Xml.Schema;
    using System.Xml.Linq;
    using Xml.Schema.Linq;
    
    
    /// <summary>
    /// <para>
    /// Regular expression: (Aas | Abd | Acr | Adg | Aga | Agl | Aha | Ahc | Aho | Ahp | Ahs | Ahu | Ain | Als | Ana | Apg | Apn | Ase | Din | Dli | Dme | Dpn | Fao | Fto | Fcp | Fda | Fdd | Fdn | Fdo | Fds | Fls | Fpa | Fpg | Fqy | Ful | Gbr | Gsd | Hpe | Iap | Ils | Iue | Mgp | Mkr | Mls | Ndb | Nli | Nsc | Ntg | Oaa | Oae | Oas | Ogr | Obs | Ofa | Oil | Org | Oxg | Pfy | Plb | Plc | Rcp | Rda | Rdd | Rdn | Rdo | Rds | Rls | Rpa | Rpg | Rsg | Rsu | Rte | Rwy | Sae | Sah | Ser | Shp | Sia | Sid | Sip | Sns | Sny | Spa | Spd | Srs | Ssd | Sse | Ssr | Sue | Swy | Tcn | Tcp | Tfr | Thp | Tla | Tlg | Tli | Tls | Tly | Tsa | Tsg | Twy | Uac | Uas | Uni | Vli | Vor | Lbm | Aac | Dln | Nln | Tln | Vln)+
    /// </para>
    /// </summary>
    public partial class OFMXSnapshot : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName AasXName = System.Xml.Linq.XName.Get("Aas", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<AirspaceAssociationType> AasField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName AbdXName = System.Xml.Linq.XName.Get("Abd", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<AirspaceBorderType> AbdField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName AcrXName = System.Xml.Linq.XName.Get("Acr", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<AirspaceCorridorType> AcrField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName AdgXName = System.Xml.Linq.XName.Get("Adg", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<AirspaceDerivedGeometryType> AdgField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName AgaXName = System.Xml.Linq.XName.Get("Aga", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<GroundServiceAddressType> AgaField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName AglXName = System.Xml.Linq.XName.Get("Agl", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<AeronauticalGroundLightType> AglField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName AhaXName = System.Xml.Linq.XName.Get("Aha", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<AerodromeHeliportAddressType> AhaField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName AhcXName = System.Xml.Linq.XName.Get("Ahc", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<AerodromeHeliportCollocationType> AhcField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName AhoXName = System.Xml.Linq.XName.Get("Aho", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<AerodromeHeliportObstacleType> AhoField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName AhpXName = System.Xml.Linq.XName.Get("Ahp", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<AerodromeHeliportType> AhpField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName AhsXName = System.Xml.Linq.XName.Get("Ahs", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<GroundServiceType> AhsField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName AhuXName = System.Xml.Linq.XName.Get("Ahu", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<AerodromeHeliportUsageType> AhuField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName AinXName = System.Xml.Linq.XName.Get("Ain", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<NavaidAngularReferenceType> AinField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName AlsXName = System.Xml.Linq.XName.Get("Als", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ApronLightingSystemType> AlsField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName AnaXName = System.Xml.Linq.XName.Get("Ana", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<AerodromeHeliportNavaidType> AnaField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ApgXName = System.Xml.Linq.XName.Get("Apg", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ApronGeometryType> ApgField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ApnXName = System.Xml.Linq.XName.Get("Apn", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ApronType> ApnField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName AseXName = System.Xml.Linq.XName.Get("Ase", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<AirspaceType> AseField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName DinXName = System.Xml.Linq.XName.Get("Din", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<NavaidDistanceIndicationType> DinField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName DliXName = System.Xml.Linq.XName.Get("Dli", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<DmeUsageLimitationType> DliField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName DmeXName = System.Xml.Linq.XName.Get("Dme", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<DmeType> DmeField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName DpnXName = System.Xml.Linq.XName.Get("Dpn", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<DesignatedPointType> DpnField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName FaoXName = System.Xml.Linq.XName.Get("Fao", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<FatoOldType> FaoField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName FtoXName = System.Xml.Linq.XName.Get("Fto", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<FatoType> FtoField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName FcpXName = System.Xml.Linq.XName.Get("Fcp", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<FatoCentreLinePositionType> FcpField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName FdaXName = System.Xml.Linq.XName.Get("Fda", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<FatoDirectionApproachLightingType> FdaField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName FddXName = System.Xml.Linq.XName.Get("Fdd", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<FatoDirectionDeclaredDistanceType> FddField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName FdnXName = System.Xml.Linq.XName.Get("Fdn", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<FatoDirectionType> FdnField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName FdoXName = System.Xml.Linq.XName.Get("Fdo", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<FatoDirectionObstacleType> FdoField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName FdsXName = System.Xml.Linq.XName.Get("Fds", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<FatoDirectionStarType> FdsField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName FlsXName = System.Xml.Linq.XName.Get("Fls", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<FatoLightingSystemType> FlsField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName FpaXName = System.Xml.Linq.XName.Get("Fpa", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<FatoProtectionAreaType> FpaField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName FpgXName = System.Xml.Linq.XName.Get("Fpg", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<FatoProtectionAreaGeometryType> FpgField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName FqyXName = System.Xml.Linq.XName.Get("Fqy", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<FrequencyType> FqyField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName FulXName = System.Xml.Linq.XName.Get("Ful", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<FuelType> FulField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName GbrXName = System.Xml.Linq.XName.Get("Gbr", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<GeographicalBorderType> GbrField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName GsdXName = System.Xml.Linq.XName.Get("Gsd", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<GateStandType> GsdField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName HpeXName = System.Xml.Linq.XName.Get("Hpe", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<HoldingProcedureType> HpeField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName IapXName = System.Xml.Linq.XName.Get("Iap", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<InstrumentApproachType> IapField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName IlsXName = System.Xml.Linq.XName.Get("Ils", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<IlsType> IlsField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName IueXName = System.Xml.Linq.XName.Get("Iue", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<InstrumentApproachUsageConditionType> IueField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName MgpXName = System.Xml.Linq.XName.Get("Mgp", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<MsaGroupType> MgpField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName MkrXName = System.Xml.Linq.XName.Get("Mkr", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<MkrType> MkrField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName MlsXName = System.Xml.Linq.XName.Get("Mls", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<MlsType> MlsField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName NdbXName = System.Xml.Linq.XName.Get("Ndb", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<NdbType> NdbField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName NliXName = System.Xml.Linq.XName.Get("Nli", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<NdbUsageLimitationType> NliField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName NscXName = System.Xml.Linq.XName.Get("Nsc", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<CheckpointType> NscField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName NtgXName = System.Xml.Linq.XName.Get("Ntg", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<NitrogenType> NtgField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName OaaXName = System.Xml.Linq.XName.Get("Oaa", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<OrganisationAuthorityAddressType> OaaField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName OaeXName = System.Xml.Linq.XName.Get("Oae", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<AirspaceObstacleType> OaeField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName OasXName = System.Xml.Linq.XName.Get("Oas", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<OrganisationAuthorityAssociationType> OasField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName OgrXName = System.Xml.Linq.XName.Get("Ogr", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ObstacleGroupType> OgrField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ObsXName = System.Xml.Linq.XName.Get("Obs", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ObstacleType> ObsField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName OfaXName = System.Xml.Linq.XName.Get("Ofa", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<AirspaceAuthorityType> OfaField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName OilXName = System.Xml.Linq.XName.Get("Oil", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<OilType> OilField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName OrgXName = System.Xml.Linq.XName.Get("Org", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<OrganisationAuthorityType> OrgField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName OxgXName = System.Xml.Linq.XName.Get("Oxg", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<OxygenType> OxgField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName PfyXName = System.Xml.Linq.XName.Get("Pfy", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<PassengerFacilityType> PfyField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName PlbXName = System.Xml.Linq.XName.Get("Plb", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<CruisingLevelsTableType> PlbField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName PlcXName = System.Xml.Linq.XName.Get("Plc", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<CruisingLevelsColumnType> PlcField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName RcpXName = System.Xml.Linq.XName.Get("Rcp", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<RunwayCentreLinePositionType> RcpField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName RdaXName = System.Xml.Linq.XName.Get("Rda", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<RunwayDirectionApproachLightingSystemType> RdaField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName RddXName = System.Xml.Linq.XName.Get("Rdd", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<RunwayDirectionDeclaredDistanceType> RddField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName RdnXName = System.Xml.Linq.XName.Get("Rdn", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<RunwayDirectionType> RdnField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName RdoXName = System.Xml.Linq.XName.Get("Rdo", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<RunwayDirectionObstacleType> RdoField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName RdsXName = System.Xml.Linq.XName.Get("Rds", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<RunwayDirectionStarType> RdsField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName RlsXName = System.Xml.Linq.XName.Get("Rls", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<RunwayDirectionLightingSystemType> RlsField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName RpaXName = System.Xml.Linq.XName.Get("Rpa", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<RunwayProtectionAreaType> RpaField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName RpgXName = System.Xml.Linq.XName.Get("Rpg", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<RunwayProtectionAreaGeometryType> RpgField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName RsgXName = System.Xml.Linq.XName.Get("Rsg", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<RouteSegmentType> RsgField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName RsuXName = System.Xml.Linq.XName.Get("Rsu", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<RouteSegmentUsageType> RsuField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName RteXName = System.Xml.Linq.XName.Get("Rte", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<EnrouteRouteType> RteField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName RwyXName = System.Xml.Linq.XName.Get("Rwy", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<RunwayType> RwyField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName SaeXName = System.Xml.Linq.XName.Get("Sae", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<AirspaceServiceType> SaeField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName SahXName = System.Xml.Linq.XName.Get("Sah", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<AerodromeHeliportServiceType> SahField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName SerXName = System.Xml.Linq.XName.Get("Ser", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ServiceType> SerField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ShpXName = System.Xml.Linq.XName.Get("Shp", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<HoldingProcedureServiceType> ShpField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName SiaXName = System.Xml.Linq.XName.Get("Sia", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<StarType> SiaField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName SidXName = System.Xml.Linq.XName.Get("Sid", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<SidType> SidField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName SipXName = System.Xml.Linq.XName.Get("Sip", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<InstrumentApproachServiceType> SipField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName SnsXName = System.Xml.Linq.XName.Get("Sns", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<SpecialNavigationSystemStationType> SnsField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName SnyXName = System.Xml.Linq.XName.Get("Sny", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<SpecialNavigationSystemType> SnyField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName SpaXName = System.Xml.Linq.XName.Get("Spa", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<SignificantPointAirspaceType> SpaField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName SpdXName = System.Xml.Linq.XName.Get("Spd", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<SpecialDateType> SpdField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName SrsXName = System.Xml.Linq.XName.Get("Srs", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<RouteSegmentServiceType> SrsField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName SsdXName = System.Xml.Linq.XName.Get("Ssd", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<SidServiceType> SsdField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName SseXName = System.Xml.Linq.XName.Get("Sse", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<StarUsageType> SseField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName SsrXName = System.Xml.Linq.XName.Get("Ssr", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<StarServiceType> SsrField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName SueXName = System.Xml.Linq.XName.Get("Sue", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<SidUsageType> SueField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName SwyXName = System.Xml.Linq.XName.Get("Swy", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<StopwayType> SwyField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TcnXName = System.Xml.Linq.XName.Get("Tcn", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<TacanType> TcnField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TcpXName = System.Xml.Linq.XName.Get("Tcp", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<TaxiwayCentreLinePositionType> TcpField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TfrXName = System.Xml.Linq.XName.Get("Tfr", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<TrafficFlowRestrictionType> TfrField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ThpXName = System.Xml.Linq.XName.Get("Thp", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<TaxiwayHoldingPositionType> ThpField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TlaXName = System.Xml.Linq.XName.Get("Tla", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<TlofType> TlaField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TlgXName = System.Xml.Linq.XName.Get("Tlg", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<TlofGeometryType> TlgField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TliXName = System.Xml.Linq.XName.Get("Tli", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<TacanUsageLimitationType> TliField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TlsXName = System.Xml.Linq.XName.Get("Tls", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<TlofLightingSystemType> TlsField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TlyXName = System.Xml.Linq.XName.Get("Tly", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<TaxiwayLightingSystemType> TlyField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TsaXName = System.Xml.Linq.XName.Get("Tsa", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<TlofSafeAreaType> TsaField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TsgXName = System.Xml.Linq.XName.Get("Tsg", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<TlofSafeAreaGeometryType> TsgField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TwyXName = System.Xml.Linq.XName.Get("Twy", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<TaxiwayType> TwyField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName UacXName = System.Xml.Linq.XName.Get("Uac", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<UnitAssociationType> UacField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName UasXName = System.Xml.Linq.XName.Get("Uas", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<UnitContactAddressType> UasField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName UniXName = System.Xml.Linq.XName.Get("Uni", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<UnitType> UniField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName VliXName = System.Xml.Linq.XName.Get("Vli", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<VorUsageLimitationType> VliField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName VorXName = System.Xml.Linq.XName.Get("Vor", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<VorType> VorField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName LbmXName = System.Xml.Linq.XName.Get("Lbm", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<LabelMarkerType> LbmField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName AacXName = System.Xml.Linq.XName.Get("Aac", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<AirspaceAssocType> AacField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName DlnXName = System.Xml.Linq.XName.Get("Dln", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<DmeLimitationType> DlnField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName NlnXName = System.Xml.Linq.XName.Get("Nln", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<NdbLimitationType> NlnField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TlnXName = System.Xml.Linq.XName.Get("Tln", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<TacanLimitationType> TlnField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName VlnXName = System.Xml.Linq.XName.Get("Vln", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<VorLimitationType> VlnField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName versionXName = System.Xml.Linq.XName.Get("version", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName originXName = System.Xml.Linq.XName.Get("origin", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName @namespaceXName = System.Xml.Linq.XName.Get("namespace", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName regionsXName = System.Xml.Linq.XName.Get("regions", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName createdXName = System.Xml.Linq.XName.Get("created", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName effectiveXName = System.Xml.Linq.XName.Get("effective", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName expirationXName = System.Xml.Linq.XName.Get("expiration", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("OFMX-Snapshot", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator OFMXSnapshot(XElement xe) { return XTypedServices.ToXTypedElement<OFMXSnapshot>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static OFMXSnapshot() {
            BuildElementDictionary();
            contentModel = new ChoiceContentModelEntity(new NamedContentModelEntity(AasXName), new NamedContentModelEntity(AbdXName), new NamedContentModelEntity(AcrXName), new NamedContentModelEntity(AdgXName), new NamedContentModelEntity(AgaXName), new NamedContentModelEntity(AglXName), new NamedContentModelEntity(AhaXName), new NamedContentModelEntity(AhcXName), new NamedContentModelEntity(AhoXName), new NamedContentModelEntity(AhpXName), new NamedContentModelEntity(AhsXName), new NamedContentModelEntity(AhuXName), new NamedContentModelEntity(AinXName), new NamedContentModelEntity(AlsXName), new NamedContentModelEntity(AnaXName), new NamedContentModelEntity(ApgXName), new NamedContentModelEntity(ApnXName), new NamedContentModelEntity(AseXName), new NamedContentModelEntity(DinXName), new NamedContentModelEntity(DliXName), new NamedContentModelEntity(DmeXName), new NamedContentModelEntity(DpnXName), new NamedContentModelEntity(FaoXName), new NamedContentModelEntity(FtoXName), new NamedContentModelEntity(FcpXName), new NamedContentModelEntity(FdaXName), new NamedContentModelEntity(FddXName), new NamedContentModelEntity(FdnXName), new NamedContentModelEntity(FdoXName), new NamedContentModelEntity(FdsXName), new NamedContentModelEntity(FlsXName), new NamedContentModelEntity(FpaXName), new NamedContentModelEntity(FpgXName), new NamedContentModelEntity(FqyXName), new NamedContentModelEntity(FulXName), new NamedContentModelEntity(GbrXName), new NamedContentModelEntity(GsdXName), new NamedContentModelEntity(HpeXName), new NamedContentModelEntity(IapXName), new NamedContentModelEntity(IlsXName), new NamedContentModelEntity(IueXName), new NamedContentModelEntity(MgpXName), new NamedContentModelEntity(MkrXName), new NamedContentModelEntity(MlsXName), new NamedContentModelEntity(NdbXName), new NamedContentModelEntity(NliXName), new NamedContentModelEntity(NscXName), new NamedContentModelEntity(NtgXName), new NamedContentModelEntity(OaaXName), new NamedContentModelEntity(OaeXName), new NamedContentModelEntity(OasXName), new NamedContentModelEntity(OgrXName), new NamedContentModelEntity(ObsXName), new NamedContentModelEntity(OfaXName), new NamedContentModelEntity(OilXName), new NamedContentModelEntity(OrgXName), new NamedContentModelEntity(OxgXName), new NamedContentModelEntity(PfyXName), new NamedContentModelEntity(PlbXName), new NamedContentModelEntity(PlcXName), new NamedContentModelEntity(RcpXName), new NamedContentModelEntity(RdaXName), new NamedContentModelEntity(RddXName), new NamedContentModelEntity(RdnXName), new NamedContentModelEntity(RdoXName), new NamedContentModelEntity(RdsXName), new NamedContentModelEntity(RlsXName), new NamedContentModelEntity(RpaXName), new NamedContentModelEntity(RpgXName), new NamedContentModelEntity(RsgXName), new NamedContentModelEntity(RsuXName), new NamedContentModelEntity(RteXName), new NamedContentModelEntity(RwyXName), new NamedContentModelEntity(SaeXName), new NamedContentModelEntity(SahXName), new NamedContentModelEntity(SerXName), new NamedContentModelEntity(ShpXName), new NamedContentModelEntity(SiaXName), new NamedContentModelEntity(SidXName), new NamedContentModelEntity(SipXName), new NamedContentModelEntity(SnsXName), new NamedContentModelEntity(SnyXName), new NamedContentModelEntity(SpaXName), new NamedContentModelEntity(SpdXName), new NamedContentModelEntity(SrsXName), new NamedContentModelEntity(SsdXName), new NamedContentModelEntity(SseXName), new NamedContentModelEntity(SsrXName), new NamedContentModelEntity(SueXName), new NamedContentModelEntity(SwyXName), new NamedContentModelEntity(TcnXName), new NamedContentModelEntity(TcpXName), new NamedContentModelEntity(TfrXName), new NamedContentModelEntity(ThpXName), new NamedContentModelEntity(TlaXName), new NamedContentModelEntity(TlgXName), new NamedContentModelEntity(TliXName), new NamedContentModelEntity(TlsXName), new NamedContentModelEntity(TlyXName), new NamedContentModelEntity(TsaXName), new NamedContentModelEntity(TsgXName), new NamedContentModelEntity(TwyXName), new NamedContentModelEntity(UacXName), new NamedContentModelEntity(UasXName), new NamedContentModelEntity(UniXName), new NamedContentModelEntity(VliXName), new NamedContentModelEntity(VorXName), new NamedContentModelEntity(LbmXName), new NamedContentModelEntity(AacXName), new NamedContentModelEntity(DlnXName), new NamedContentModelEntity(NlnXName), new NamedContentModelEntity(TlnXName), new NamedContentModelEntity(VlnXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Aas | Abd | Acr | Adg | Aga | Agl | Aha | Ahc | Aho | Ahp | Ahs | Ahu | Ain | Als | Ana | Apg | Apn | Ase | Din | Dli | Dme | Dpn | Fao | Fto | Fcp | Fda | Fdd | Fdn | Fdo | Fds | Fls | Fpa | Fpg | Fqy | Ful | Gbr | Gsd | Hpe | Iap | Ils | Iue | Mgp | Mkr | Mls | Ndb | Nli | Nsc | Ntg | Oaa | Oae | Oas | Ogr | Obs | Ofa | Oil | Org | Oxg | Pfy | Plb | Plc | Rcp | Rda | Rdd | Rdn | Rdo | Rds | Rls | Rpa | Rpg | Rsg | Rsu | Rte | Rwy | Sae | Sah | Ser | Shp | Sia | Sid | Sip | Sns | Sny | Spa | Spd | Srs | Ssd | Sse | Ssr | Sue | Swy | Tcn | Tcp | Tfr | Thp | Tla | Tlg | Tli | Tls | Tly | Tsa | Tsg | Twy | Uac | Uas | Uni | Vli | Vor | Lbm | Aac | Dln | Nln | Tln | Vln)+
        /// </para>
        /// </summary>
        public OFMXSnapshot() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (Aas | Abd | Acr | Adg | Aga | Agl | Aha | Ahc | Aho | Ahp | Ahs | Ahu | Ain | Als | Ana | Apg | Apn | Ase | Din | Dli | Dme | Dpn | Fao | Fto | Fcp | Fda | Fdd | Fdn | Fdo | Fds | Fls | Fpa | Fpg | Fqy | Ful | Gbr | Gsd | Hpe | Iap | Ils | Iue | Mgp | Mkr | Mls | Ndb | Nli | Nsc | Ntg | Oaa | Oae | Oas | Ogr | Obs | Ofa | Oil | Org | Oxg | Pfy | Plb | Plc | Rcp | Rda | Rdd | Rdn | Rdo | Rds | Rls | Rpa | Rpg | Rsg | Rsu | Rte | Rwy | Sae | Sah | Ser | Shp | Sia | Sid | Sip | Sns | Sny | Spa | Spd | Srs | Ssd | Sse | Ssr | Sue | Swy | Tcn | Tcp | Tfr | Thp | Tla | Tlg | Tli | Tls | Tly | Tsa | Tsg | Twy | Uac | Uas | Uni | Vli | Vor | Lbm | Aac | Dln | Nln | Tln | Vln)+
        /// </para>
        /// </summary>
        public virtual IList<AirspaceAssociationType> Aas {
            get {
                if ((this.AasField == null)) {
                    this.AasField = new XTypedList<AirspaceAssociationType>(this, LinqToXsdTypeManager.Instance, AasXName);
                }
                return this.AasField;
            }
            set {
                if ((value == null)) {
                    this.AasField = null;
                }
                else {
                    if ((this.AasField == null)) {
                        this.AasField = XTypedList<AirspaceAssociationType>.Initialize(this, LinqToXsdTypeManager.Instance, value, AasXName);
                    }
                    else {
                        XTypedServices.SetList<AirspaceAssociationType>(this.AasField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (Aas | Abd | Acr | Adg | Aga | Agl | Aha | Ahc | Aho | Ahp | Ahs | Ahu | Ain | Als | Ana | Apg | Apn | Ase | Din | Dli | Dme | Dpn | Fao | Fto | Fcp | Fda | Fdd | Fdn | Fdo | Fds | Fls | Fpa | Fpg | Fqy | Ful | Gbr | Gsd | Hpe | Iap | Ils | Iue | Mgp | Mkr | Mls | Ndb | Nli | Nsc | Ntg | Oaa | Oae | Oas | Ogr | Obs | Ofa | Oil | Org | Oxg | Pfy | Plb | Plc | Rcp | Rda | Rdd | Rdn | Rdo | Rds | Rls | Rpa | Rpg | Rsg | Rsu | Rte | Rwy | Sae | Sah | Ser | Shp | Sia | Sid | Sip | Sns | Sny | Spa | Spd | Srs | Ssd | Sse | Ssr | Sue | Swy | Tcn | Tcp | Tfr | Thp | Tla | Tlg | Tli | Tls | Tly | Tsa | Tsg | Twy | Uac | Uas | Uni | Vli | Vor | Lbm | Aac | Dln | Nln | Tln | Vln)+
        /// </para>
        /// </summary>
        public virtual IList<AirspaceBorderType> Abd {
            get {
                if ((this.AbdField == null)) {
                    this.AbdField = new XTypedList<AirspaceBorderType>(this, LinqToXsdTypeManager.Instance, AbdXName);
                }
                return this.AbdField;
            }
            set {
                if ((value == null)) {
                    this.AbdField = null;
                }
                else {
                    if ((this.AbdField == null)) {
                        this.AbdField = XTypedList<AirspaceBorderType>.Initialize(this, LinqToXsdTypeManager.Instance, value, AbdXName);
                    }
                    else {
                        XTypedServices.SetList<AirspaceBorderType>(this.AbdField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (Aas | Abd | Acr | Adg | Aga | Agl | Aha | Ahc | Aho | Ahp | Ahs | Ahu | Ain | Als | Ana | Apg | Apn | Ase | Din | Dli | Dme | Dpn | Fao | Fto | Fcp | Fda | Fdd | Fdn | Fdo | Fds | Fls | Fpa | Fpg | Fqy | Ful | Gbr | Gsd | Hpe | Iap | Ils | Iue | Mgp | Mkr | Mls | Ndb | Nli | Nsc | Ntg | Oaa | Oae | Oas | Ogr | Obs | Ofa | Oil | Org | Oxg | Pfy | Plb | Plc | Rcp | Rda | Rdd | Rdn | Rdo | Rds | Rls | Rpa | Rpg | Rsg | Rsu | Rte | Rwy | Sae | Sah | Ser | Shp | Sia | Sid | Sip | Sns | Sny | Spa | Spd | Srs | Ssd | Sse | Ssr | Sue | Swy | Tcn | Tcp | Tfr | Thp | Tla | Tlg | Tli | Tls | Tly | Tsa | Tsg | Twy | Uac | Uas | Uni | Vli | Vor | Lbm | Aac | Dln | Nln | Tln | Vln)+
        /// </para>
        /// </summary>
        public virtual IList<AirspaceCorridorType> Acr {
            get {
                if ((this.AcrField == null)) {
                    this.AcrField = new XTypedList<AirspaceCorridorType>(this, LinqToXsdTypeManager.Instance, AcrXName);
                }
                return this.AcrField;
            }
            set {
                if ((value == null)) {
                    this.AcrField = null;
                }
                else {
                    if ((this.AcrField == null)) {
                        this.AcrField = XTypedList<AirspaceCorridorType>.Initialize(this, LinqToXsdTypeManager.Instance, value, AcrXName);
                    }
                    else {
                        XTypedServices.SetList<AirspaceCorridorType>(this.AcrField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (Aas | Abd | Acr | Adg | Aga | Agl | Aha | Ahc | Aho | Ahp | Ahs | Ahu | Ain | Als | Ana | Apg | Apn | Ase | Din | Dli | Dme | Dpn | Fao | Fto | Fcp | Fda | Fdd | Fdn | Fdo | Fds | Fls | Fpa | Fpg | Fqy | Ful | Gbr | Gsd | Hpe | Iap | Ils | Iue | Mgp | Mkr | Mls | Ndb | Nli | Nsc | Ntg | Oaa | Oae | Oas | Ogr | Obs | Ofa | Oil | Org | Oxg | Pfy | Plb | Plc | Rcp | Rda | Rdd | Rdn | Rdo | Rds | Rls | Rpa | Rpg | Rsg | Rsu | Rte | Rwy | Sae | Sah | Ser | Shp | Sia | Sid | Sip | Sns | Sny | Spa | Spd | Srs | Ssd | Sse | Ssr | Sue | Swy | Tcn | Tcp | Tfr | Thp | Tla | Tlg | Tli | Tls | Tly | Tsa | Tsg | Twy | Uac | Uas | Uni | Vli | Vor | Lbm | Aac | Dln | Nln | Tln | Vln)+
        /// </para>
        /// </summary>
        public virtual IList<AirspaceDerivedGeometryType> Adg {
            get {
                if ((this.AdgField == null)) {
                    this.AdgField = new XTypedList<AirspaceDerivedGeometryType>(this, LinqToXsdTypeManager.Instance, AdgXName);
                }
                return this.AdgField;
            }
            set {
                if ((value == null)) {
                    this.AdgField = null;
                }
                else {
                    if ((this.AdgField == null)) {
                        this.AdgField = XTypedList<AirspaceDerivedGeometryType>.Initialize(this, LinqToXsdTypeManager.Instance, value, AdgXName);
                    }
                    else {
                        XTypedServices.SetList<AirspaceDerivedGeometryType>(this.AdgField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (Aas | Abd | Acr | Adg | Aga | Agl | Aha | Ahc | Aho | Ahp | Ahs | Ahu | Ain | Als | Ana | Apg | Apn | Ase | Din | Dli | Dme | Dpn | Fao | Fto | Fcp | Fda | Fdd | Fdn | Fdo | Fds | Fls | Fpa | Fpg | Fqy | Ful | Gbr | Gsd | Hpe | Iap | Ils | Iue | Mgp | Mkr | Mls | Ndb | Nli | Nsc | Ntg | Oaa | Oae | Oas | Ogr | Obs | Ofa | Oil | Org | Oxg | Pfy | Plb | Plc | Rcp | Rda | Rdd | Rdn | Rdo | Rds | Rls | Rpa | Rpg | Rsg | Rsu | Rte | Rwy | Sae | Sah | Ser | Shp | Sia | Sid | Sip | Sns | Sny | Spa | Spd | Srs | Ssd | Sse | Ssr | Sue | Swy | Tcn | Tcp | Tfr | Thp | Tla | Tlg | Tli | Tls | Tly | Tsa | Tsg | Twy | Uac | Uas | Uni | Vli | Vor | Lbm | Aac | Dln | Nln | Tln | Vln)+
        /// </para>
        /// </summary>
        public virtual IList<GroundServiceAddressType> Aga {
            get {
                if ((this.AgaField == null)) {
                    this.AgaField = new XTypedList<GroundServiceAddressType>(this, LinqToXsdTypeManager.Instance, AgaXName);
                }
                return this.AgaField;
            }
            set {
                if ((value == null)) {
                    this.AgaField = null;
                }
                else {
                    if ((this.AgaField == null)) {
                        this.AgaField = XTypedList<GroundServiceAddressType>.Initialize(this, LinqToXsdTypeManager.Instance, value, AgaXName);
                    }
                    else {
                        XTypedServices.SetList<GroundServiceAddressType>(this.AgaField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (Aas | Abd | Acr | Adg | Aga | Agl | Aha | Ahc | Aho | Ahp | Ahs | Ahu | Ain | Als | Ana | Apg | Apn | Ase | Din | Dli | Dme | Dpn | Fao | Fto | Fcp | Fda | Fdd | Fdn | Fdo | Fds | Fls | Fpa | Fpg | Fqy | Ful | Gbr | Gsd | Hpe | Iap | Ils | Iue | Mgp | Mkr | Mls | Ndb | Nli | Nsc | Ntg | Oaa | Oae | Oas | Ogr | Obs | Ofa | Oil | Org | Oxg | Pfy | Plb | Plc | Rcp | Rda | Rdd | Rdn | Rdo | Rds | Rls | Rpa | Rpg | Rsg | Rsu | Rte | Rwy | Sae | Sah | Ser | Shp | Sia | Sid | Sip | Sns | Sny | Spa | Spd | Srs | Ssd | Sse | Ssr | Sue | Swy | Tcn | Tcp | Tfr | Thp | Tla | Tlg | Tli | Tls | Tly | Tsa | Tsg | Twy | Uac | Uas | Uni | Vli | Vor | Lbm | Aac | Dln | Nln | Tln | Vln)+
        /// </para>
        /// </summary>
        public virtual IList<AeronauticalGroundLightType> Agl {
            get {
                if ((this.AglField == null)) {
                    this.AglField = new XTypedList<AeronauticalGroundLightType>(this, LinqToXsdTypeManager.Instance, AglXName);
                }
                return this.AglField;
            }
            set {
                if ((value == null)) {
                    this.AglField = null;
                }
                else {
                    if ((this.AglField == null)) {
                        this.AglField = XTypedList<AeronauticalGroundLightType>.Initialize(this, LinqToXsdTypeManager.Instance, value, AglXName);
                    }
                    else {
                        XTypedServices.SetList<AeronauticalGroundLightType>(this.AglField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (Aas | Abd | Acr | Adg | Aga | Agl | Aha | Ahc | Aho | Ahp | Ahs | Ahu | Ain | Als | Ana | Apg | Apn | Ase | Din | Dli | Dme | Dpn | Fao | Fto | Fcp | Fda | Fdd | Fdn | Fdo | Fds | Fls | Fpa | Fpg | Fqy | Ful | Gbr | Gsd | Hpe | Iap | Ils | Iue | Mgp | Mkr | Mls | Ndb | Nli | Nsc | Ntg | Oaa | Oae | Oas | Ogr | Obs | Ofa | Oil | Org | Oxg | Pfy | Plb | Plc | Rcp | Rda | Rdd | Rdn | Rdo | Rds | Rls | Rpa | Rpg | Rsg | Rsu | Rte | Rwy | Sae | Sah | Ser | Shp | Sia | Sid | Sip | Sns | Sny | Spa | Spd | Srs | Ssd | Sse | Ssr | Sue | Swy | Tcn | Tcp | Tfr | Thp | Tla | Tlg | Tli | Tls | Tly | Tsa | Tsg | Twy | Uac | Uas | Uni | Vli | Vor | Lbm | Aac | Dln | Nln | Tln | Vln)+
        /// </para>
        /// </summary>
        public virtual IList<AerodromeHeliportAddressType> Aha {
            get {
                if ((this.AhaField == null)) {
                    this.AhaField = new XTypedList<AerodromeHeliportAddressType>(this, LinqToXsdTypeManager.Instance, AhaXName);
                }
                return this.AhaField;
            }
            set {
                if ((value == null)) {
                    this.AhaField = null;
                }
                else {
                    if ((this.AhaField == null)) {
                        this.AhaField = XTypedList<AerodromeHeliportAddressType>.Initialize(this, LinqToXsdTypeManager.Instance, value, AhaXName);
                    }
                    else {
                        XTypedServices.SetList<AerodromeHeliportAddressType>(this.AhaField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (Aas | Abd | Acr | Adg | Aga | Agl | Aha | Ahc | Aho | Ahp | Ahs | Ahu | Ain | Als | Ana | Apg | Apn | Ase | Din | Dli | Dme | Dpn | Fao | Fto | Fcp | Fda | Fdd | Fdn | Fdo | Fds | Fls | Fpa | Fpg | Fqy | Ful | Gbr | Gsd | Hpe | Iap | Ils | Iue | Mgp | Mkr | Mls | Ndb | Nli | Nsc | Ntg | Oaa | Oae | Oas | Ogr | Obs | Ofa | Oil | Org | Oxg | Pfy | Plb | Plc | Rcp | Rda | Rdd | Rdn | Rdo | Rds | Rls | Rpa | Rpg | Rsg | Rsu | Rte | Rwy | Sae | Sah | Ser | Shp | Sia | Sid | Sip | Sns | Sny | Spa | Spd | Srs | Ssd | Sse | Ssr | Sue | Swy | Tcn | Tcp | Tfr | Thp | Tla | Tlg | Tli | Tls | Tly | Tsa | Tsg | Twy | Uac | Uas | Uni | Vli | Vor | Lbm | Aac | Dln | Nln | Tln | Vln)+
        /// </para>
        /// </summary>
        public virtual IList<AerodromeHeliportCollocationType> Ahc {
            get {
                if ((this.AhcField == null)) {
                    this.AhcField = new XTypedList<AerodromeHeliportCollocationType>(this, LinqToXsdTypeManager.Instance, AhcXName);
                }
                return this.AhcField;
            }
            set {
                if ((value == null)) {
                    this.AhcField = null;
                }
                else {
                    if ((this.AhcField == null)) {
                        this.AhcField = XTypedList<AerodromeHeliportCollocationType>.Initialize(this, LinqToXsdTypeManager.Instance, value, AhcXName);
                    }
                    else {
                        XTypedServices.SetList<AerodromeHeliportCollocationType>(this.AhcField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (Aas | Abd | Acr | Adg | Aga | Agl | Aha | Ahc | Aho | Ahp | Ahs | Ahu | Ain | Als | Ana | Apg | Apn | Ase | Din | Dli | Dme | Dpn | Fao | Fto | Fcp | Fda | Fdd | Fdn | Fdo | Fds | Fls | Fpa | Fpg | Fqy | Ful | Gbr | Gsd | Hpe | Iap | Ils | Iue | Mgp | Mkr | Mls | Ndb | Nli | Nsc | Ntg | Oaa | Oae | Oas | Ogr | Obs | Ofa | Oil | Org | Oxg | Pfy | Plb | Plc | Rcp | Rda | Rdd | Rdn | Rdo | Rds | Rls | Rpa | Rpg | Rsg | Rsu | Rte | Rwy | Sae | Sah | Ser | Shp | Sia | Sid | Sip | Sns | Sny | Spa | Spd | Srs | Ssd | Sse | Ssr | Sue | Swy | Tcn | Tcp | Tfr | Thp | Tla | Tlg | Tli | Tls | Tly | Tsa | Tsg | Twy | Uac | Uas | Uni | Vli | Vor | Lbm | Aac | Dln | Nln | Tln | Vln)+
        /// </para>
        /// </summary>
        public virtual IList<AerodromeHeliportObstacleType> Aho {
            get {
                if ((this.AhoField == null)) {
                    this.AhoField = new XTypedList<AerodromeHeliportObstacleType>(this, LinqToXsdTypeManager.Instance, AhoXName);
                }
                return this.AhoField;
            }
            set {
                if ((value == null)) {
                    this.AhoField = null;
                }
                else {
                    if ((this.AhoField == null)) {
                        this.AhoField = XTypedList<AerodromeHeliportObstacleType>.Initialize(this, LinqToXsdTypeManager.Instance, value, AhoXName);
                    }
                    else {
                        XTypedServices.SetList<AerodromeHeliportObstacleType>(this.AhoField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (Aas | Abd | Acr | Adg | Aga | Agl | Aha | Ahc | Aho | Ahp | Ahs | Ahu | Ain | Als | Ana | Apg | Apn | Ase | Din | Dli | Dme | Dpn | Fao | Fto | Fcp | Fda | Fdd | Fdn | Fdo | Fds | Fls | Fpa | Fpg | Fqy | Ful | Gbr | Gsd | Hpe | Iap | Ils | Iue | Mgp | Mkr | Mls | Ndb | Nli | Nsc | Ntg | Oaa | Oae | Oas | Ogr | Obs | Ofa | Oil | Org | Oxg | Pfy | Plb | Plc | Rcp | Rda | Rdd | Rdn | Rdo | Rds | Rls | Rpa | Rpg | Rsg | Rsu | Rte | Rwy | Sae | Sah | Ser | Shp | Sia | Sid | Sip | Sns | Sny | Spa | Spd | Srs | Ssd | Sse | Ssr | Sue | Swy | Tcn | Tcp | Tfr | Thp | Tla | Tlg | Tli | Tls | Tly | Tsa | Tsg | Twy | Uac | Uas | Uni | Vli | Vor | Lbm | Aac | Dln | Nln | Tln | Vln)+
        /// </para>
        /// </summary>
        public virtual IList<AerodromeHeliportType> Ahp {
            get {
                if ((this.AhpField == null)) {
                    this.AhpField = new XTypedList<AerodromeHeliportType>(this, LinqToXsdTypeManager.Instance, AhpXName);
                }
                return this.AhpField;
            }
            set {
                if ((value == null)) {
                    this.AhpField = null;
                }
                else {
                    if ((this.AhpField == null)) {
                        this.AhpField = XTypedList<AerodromeHeliportType>.Initialize(this, LinqToXsdTypeManager.Instance, value, AhpXName);
                    }
                    else {
                        XTypedServices.SetList<AerodromeHeliportType>(this.AhpField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (Aas | Abd | Acr | Adg | Aga | Agl | Aha | Ahc | Aho | Ahp | Ahs | Ahu | Ain | Als | Ana | Apg | Apn | Ase | Din | Dli | Dme | Dpn | Fao | Fto | Fcp | Fda | Fdd | Fdn | Fdo | Fds | Fls | Fpa | Fpg | Fqy | Ful | Gbr | Gsd | Hpe | Iap | Ils | Iue | Mgp | Mkr | Mls | Ndb | Nli | Nsc | Ntg | Oaa | Oae | Oas | Ogr | Obs | Ofa | Oil | Org | Oxg | Pfy | Plb | Plc | Rcp | Rda | Rdd | Rdn | Rdo | Rds | Rls | Rpa | Rpg | Rsg | Rsu | Rte | Rwy | Sae | Sah | Ser | Shp | Sia | Sid | Sip | Sns | Sny | Spa | Spd | Srs | Ssd | Sse | Ssr | Sue | Swy | Tcn | Tcp | Tfr | Thp | Tla | Tlg | Tli | Tls | Tly | Tsa | Tsg | Twy | Uac | Uas | Uni | Vli | Vor | Lbm | Aac | Dln | Nln | Tln | Vln)+
        /// </para>
        /// </summary>
        public virtual IList<GroundServiceType> Ahs {
            get {
                if ((this.AhsField == null)) {
                    this.AhsField = new XTypedList<GroundServiceType>(this, LinqToXsdTypeManager.Instance, AhsXName);
                }
                return this.AhsField;
            }
            set {
                if ((value == null)) {
                    this.AhsField = null;
                }
                else {
                    if ((this.AhsField == null)) {
                        this.AhsField = XTypedList<GroundServiceType>.Initialize(this, LinqToXsdTypeManager.Instance, value, AhsXName);
                    }
                    else {
                        XTypedServices.SetList<GroundServiceType>(this.AhsField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (Aas | Abd | Acr | Adg | Aga | Agl | Aha | Ahc | Aho | Ahp | Ahs | Ahu | Ain | Als | Ana | Apg | Apn | Ase | Din | Dli | Dme | Dpn | Fao | Fto | Fcp | Fda | Fdd | Fdn | Fdo | Fds | Fls | Fpa | Fpg | Fqy | Ful | Gbr | Gsd | Hpe | Iap | Ils | Iue | Mgp | Mkr | Mls | Ndb | Nli | Nsc | Ntg | Oaa | Oae | Oas | Ogr | Obs | Ofa | Oil | Org | Oxg | Pfy | Plb | Plc | Rcp | Rda | Rdd | Rdn | Rdo | Rds | Rls | Rpa | Rpg | Rsg | Rsu | Rte | Rwy | Sae | Sah | Ser | Shp | Sia | Sid | Sip | Sns | Sny | Spa | Spd | Srs | Ssd | Sse | Ssr | Sue | Swy | Tcn | Tcp | Tfr | Thp | Tla | Tlg | Tli | Tls | Tly | Tsa | Tsg | Twy | Uac | Uas | Uni | Vli | Vor | Lbm | Aac | Dln | Nln | Tln | Vln)+
        /// </para>
        /// </summary>
        public virtual IList<AerodromeHeliportUsageType> Ahu {
            get {
                if ((this.AhuField == null)) {
                    this.AhuField = new XTypedList<AerodromeHeliportUsageType>(this, LinqToXsdTypeManager.Instance, AhuXName);
                }
                return this.AhuField;
            }
            set {
                if ((value == null)) {
                    this.AhuField = null;
                }
                else {
                    if ((this.AhuField == null)) {
                        this.AhuField = XTypedList<AerodromeHeliportUsageType>.Initialize(this, LinqToXsdTypeManager.Instance, value, AhuXName);
                    }
                    else {
                        XTypedServices.SetList<AerodromeHeliportUsageType>(this.AhuField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (Aas | Abd | Acr | Adg | Aga | Agl | Aha | Ahc | Aho | Ahp | Ahs | Ahu | Ain | Als | Ana | Apg | Apn | Ase | Din | Dli | Dme | Dpn | Fao | Fto | Fcp | Fda | Fdd | Fdn | Fdo | Fds | Fls | Fpa | Fpg | Fqy | Ful | Gbr | Gsd | Hpe | Iap | Ils | Iue | Mgp | Mkr | Mls | Ndb | Nli | Nsc | Ntg | Oaa | Oae | Oas | Ogr | Obs | Ofa | Oil | Org | Oxg | Pfy | Plb | Plc | Rcp | Rda | Rdd | Rdn | Rdo | Rds | Rls | Rpa | Rpg | Rsg | Rsu | Rte | Rwy | Sae | Sah | Ser | Shp | Sia | Sid | Sip | Sns | Sny | Spa | Spd | Srs | Ssd | Sse | Ssr | Sue | Swy | Tcn | Tcp | Tfr | Thp | Tla | Tlg | Tli | Tls | Tly | Tsa | Tsg | Twy | Uac | Uas | Uni | Vli | Vor | Lbm | Aac | Dln | Nln | Tln | Vln)+
        /// </para>
        /// </summary>
        public virtual IList<NavaidAngularReferenceType> Ain {
            get {
                if ((this.AinField == null)) {
                    this.AinField = new XTypedList<NavaidAngularReferenceType>(this, LinqToXsdTypeManager.Instance, AinXName);
                }
                return this.AinField;
            }
            set {
                if ((value == null)) {
                    this.AinField = null;
                }
                else {
                    if ((this.AinField == null)) {
                        this.AinField = XTypedList<NavaidAngularReferenceType>.Initialize(this, LinqToXsdTypeManager.Instance, value, AinXName);
                    }
                    else {
                        XTypedServices.SetList<NavaidAngularReferenceType>(this.AinField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (Aas | Abd | Acr | Adg | Aga | Agl | Aha | Ahc | Aho | Ahp | Ahs | Ahu | Ain | Als | Ana | Apg | Apn | Ase | Din | Dli | Dme | Dpn | Fao | Fto | Fcp | Fda | Fdd | Fdn | Fdo | Fds | Fls | Fpa | Fpg | Fqy | Ful | Gbr | Gsd | Hpe | Iap | Ils | Iue | Mgp | Mkr | Mls | Ndb | Nli | Nsc | Ntg | Oaa | Oae | Oas | Ogr | Obs | Ofa | Oil | Org | Oxg | Pfy | Plb | Plc | Rcp | Rda | Rdd | Rdn | Rdo | Rds | Rls | Rpa | Rpg | Rsg | Rsu | Rte | Rwy | Sae | Sah | Ser | Shp | Sia | Sid | Sip | Sns | Sny | Spa | Spd | Srs | Ssd | Sse | Ssr | Sue | Swy | Tcn | Tcp | Tfr | Thp | Tla | Tlg | Tli | Tls | Tly | Tsa | Tsg | Twy | Uac | Uas | Uni | Vli | Vor | Lbm | Aac | Dln | Nln | Tln | Vln)+
        /// </para>
        /// </summary>
        public virtual IList<ApronLightingSystemType> Als {
            get {
                if ((this.AlsField == null)) {
                    this.AlsField = new XTypedList<ApronLightingSystemType>(this, LinqToXsdTypeManager.Instance, AlsXName);
                }
                return this.AlsField;
            }
            set {
                if ((value == null)) {
                    this.AlsField = null;
                }
                else {
                    if ((this.AlsField == null)) {
                        this.AlsField = XTypedList<ApronLightingSystemType>.Initialize(this, LinqToXsdTypeManager.Instance, value, AlsXName);
                    }
                    else {
                        XTypedServices.SetList<ApronLightingSystemType>(this.AlsField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (Aas | Abd | Acr | Adg | Aga | Agl | Aha | Ahc | Aho | Ahp | Ahs | Ahu | Ain | Als | Ana | Apg | Apn | Ase | Din | Dli | Dme | Dpn | Fao | Fto | Fcp | Fda | Fdd | Fdn | Fdo | Fds | Fls | Fpa | Fpg | Fqy | Ful | Gbr | Gsd | Hpe | Iap | Ils | Iue | Mgp | Mkr | Mls | Ndb | Nli | Nsc | Ntg | Oaa | Oae | Oas | Ogr | Obs | Ofa | Oil | Org | Oxg | Pfy | Plb | Plc | Rcp | Rda | Rdd | Rdn | Rdo | Rds | Rls | Rpa | Rpg | Rsg | Rsu | Rte | Rwy | Sae | Sah | Ser | Shp | Sia | Sid | Sip | Sns | Sny | Spa | Spd | Srs | Ssd | Sse | Ssr | Sue | Swy | Tcn | Tcp | Tfr | Thp | Tla | Tlg | Tli | Tls | Tly | Tsa | Tsg | Twy | Uac | Uas | Uni | Vli | Vor | Lbm | Aac | Dln | Nln | Tln | Vln)+
        /// </para>
        /// </summary>
        public virtual IList<AerodromeHeliportNavaidType> Ana {
            get {
                if ((this.AnaField == null)) {
                    this.AnaField = new XTypedList<AerodromeHeliportNavaidType>(this, LinqToXsdTypeManager.Instance, AnaXName);
                }
                return this.AnaField;
            }
            set {
                if ((value == null)) {
                    this.AnaField = null;
                }
                else {
                    if ((this.AnaField == null)) {
                        this.AnaField = XTypedList<AerodromeHeliportNavaidType>.Initialize(this, LinqToXsdTypeManager.Instance, value, AnaXName);
                    }
                    else {
                        XTypedServices.SetList<AerodromeHeliportNavaidType>(this.AnaField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (Aas | Abd | Acr | Adg | Aga | Agl | Aha | Ahc | Aho | Ahp | Ahs | Ahu | Ain | Als | Ana | Apg | Apn | Ase | Din | Dli | Dme | Dpn | Fao | Fto | Fcp | Fda | Fdd | Fdn | Fdo | Fds | Fls | Fpa | Fpg | Fqy | Ful | Gbr | Gsd | Hpe | Iap | Ils | Iue | Mgp | Mkr | Mls | Ndb | Nli | Nsc | Ntg | Oaa | Oae | Oas | Ogr | Obs | Ofa | Oil | Org | Oxg | Pfy | Plb | Plc | Rcp | Rda | Rdd | Rdn | Rdo | Rds | Rls | Rpa | Rpg | Rsg | Rsu | Rte | Rwy | Sae | Sah | Ser | Shp | Sia | Sid | Sip | Sns | Sny | Spa | Spd | Srs | Ssd | Sse | Ssr | Sue | Swy | Tcn | Tcp | Tfr | Thp | Tla | Tlg | Tli | Tls | Tly | Tsa | Tsg | Twy | Uac | Uas | Uni | Vli | Vor | Lbm | Aac | Dln | Nln | Tln | Vln)+
        /// </para>
        /// </summary>
        public virtual IList<ApronGeometryType> Apg {
            get {
                if ((this.ApgField == null)) {
                    this.ApgField = new XTypedList<ApronGeometryType>(this, LinqToXsdTypeManager.Instance, ApgXName);
                }
                return this.ApgField;
            }
            set {
                if ((value == null)) {
                    this.ApgField = null;
                }
                else {
                    if ((this.ApgField == null)) {
                        this.ApgField = XTypedList<ApronGeometryType>.Initialize(this, LinqToXsdTypeManager.Instance, value, ApgXName);
                    }
                    else {
                        XTypedServices.SetList<ApronGeometryType>(this.ApgField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (Aas | Abd | Acr | Adg | Aga | Agl | Aha | Ahc | Aho | Ahp | Ahs | Ahu | Ain | Als | Ana | Apg | Apn | Ase | Din | Dli | Dme | Dpn | Fao | Fto | Fcp | Fda | Fdd | Fdn | Fdo | Fds | Fls | Fpa | Fpg | Fqy | Ful | Gbr | Gsd | Hpe | Iap | Ils | Iue | Mgp | Mkr | Mls | Ndb | Nli | Nsc | Ntg | Oaa | Oae | Oas | Ogr | Obs | Ofa | Oil | Org | Oxg | Pfy | Plb | Plc | Rcp | Rda | Rdd | Rdn | Rdo | Rds | Rls | Rpa | Rpg | Rsg | Rsu | Rte | Rwy | Sae | Sah | Ser | Shp | Sia | Sid | Sip | Sns | Sny | Spa | Spd | Srs | Ssd | Sse | Ssr | Sue | Swy | Tcn | Tcp | Tfr | Thp | Tla | Tlg | Tli | Tls | Tly | Tsa | Tsg | Twy | Uac | Uas | Uni | Vli | Vor | Lbm | Aac | Dln | Nln | Tln | Vln)+
        /// </para>
        /// </summary>
        public virtual IList<ApronType> Apn {
            get {
                if ((this.ApnField == null)) {
                    this.ApnField = new XTypedList<ApronType>(this, LinqToXsdTypeManager.Instance, ApnXName);
                }
                return this.ApnField;
            }
            set {
                if ((value == null)) {
                    this.ApnField = null;
                }
                else {
                    if ((this.ApnField == null)) {
                        this.ApnField = XTypedList<ApronType>.Initialize(this, LinqToXsdTypeManager.Instance, value, ApnXName);
                    }
                    else {
                        XTypedServices.SetList<ApronType>(this.ApnField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (Aas | Abd | Acr | Adg | Aga | Agl | Aha | Ahc | Aho | Ahp | Ahs | Ahu | Ain | Als | Ana | Apg | Apn | Ase | Din | Dli | Dme | Dpn | Fao | Fto | Fcp | Fda | Fdd | Fdn | Fdo | Fds | Fls | Fpa | Fpg | Fqy | Ful | Gbr | Gsd | Hpe | Iap | Ils | Iue | Mgp | Mkr | Mls | Ndb | Nli | Nsc | Ntg | Oaa | Oae | Oas | Ogr | Obs | Ofa | Oil | Org | Oxg | Pfy | Plb | Plc | Rcp | Rda | Rdd | Rdn | Rdo | Rds | Rls | Rpa | Rpg | Rsg | Rsu | Rte | Rwy | Sae | Sah | Ser | Shp | Sia | Sid | Sip | Sns | Sny | Spa | Spd | Srs | Ssd | Sse | Ssr | Sue | Swy | Tcn | Tcp | Tfr | Thp | Tla | Tlg | Tli | Tls | Tly | Tsa | Tsg | Twy | Uac | Uas | Uni | Vli | Vor | Lbm | Aac | Dln | Nln | Tln | Vln)+
        /// </para>
        /// </summary>
        public virtual IList<AirspaceType> Ase {
            get {
                if ((this.AseField == null)) {
                    this.AseField = new XTypedList<AirspaceType>(this, LinqToXsdTypeManager.Instance, AseXName);
                }
                return this.AseField;
            }
            set {
                if ((value == null)) {
                    this.AseField = null;
                }
                else {
                    if ((this.AseField == null)) {
                        this.AseField = XTypedList<AirspaceType>.Initialize(this, LinqToXsdTypeManager.Instance, value, AseXName);
                    }
                    else {
                        XTypedServices.SetList<AirspaceType>(this.AseField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (Aas | Abd | Acr | Adg | Aga | Agl | Aha | Ahc | Aho | Ahp | Ahs | Ahu | Ain | Als | Ana | Apg | Apn | Ase | Din | Dli | Dme | Dpn | Fao | Fto | Fcp | Fda | Fdd | Fdn | Fdo | Fds | Fls | Fpa | Fpg | Fqy | Ful | Gbr | Gsd | Hpe | Iap | Ils | Iue | Mgp | Mkr | Mls | Ndb | Nli | Nsc | Ntg | Oaa | Oae | Oas | Ogr | Obs | Ofa | Oil | Org | Oxg | Pfy | Plb | Plc | Rcp | Rda | Rdd | Rdn | Rdo | Rds | Rls | Rpa | Rpg | Rsg | Rsu | Rte | Rwy | Sae | Sah | Ser | Shp | Sia | Sid | Sip | Sns | Sny | Spa | Spd | Srs | Ssd | Sse | Ssr | Sue | Swy | Tcn | Tcp | Tfr | Thp | Tla | Tlg | Tli | Tls | Tly | Tsa | Tsg | Twy | Uac | Uas | Uni | Vli | Vor | Lbm | Aac | Dln | Nln | Tln | Vln)+
        /// </para>
        /// </summary>
        public virtual IList<NavaidDistanceIndicationType> Din {
            get {
                if ((this.DinField == null)) {
                    this.DinField = new XTypedList<NavaidDistanceIndicationType>(this, LinqToXsdTypeManager.Instance, DinXName);
                }
                return this.DinField;
            }
            set {
                if ((value == null)) {
                    this.DinField = null;
                }
                else {
                    if ((this.DinField == null)) {
                        this.DinField = XTypedList<NavaidDistanceIndicationType>.Initialize(this, LinqToXsdTypeManager.Instance, value, DinXName);
                    }
                    else {
                        XTypedServices.SetList<NavaidDistanceIndicationType>(this.DinField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (Aas | Abd | Acr | Adg | Aga | Agl | Aha | Ahc | Aho | Ahp | Ahs | Ahu | Ain | Als | Ana | Apg | Apn | Ase | Din | Dli | Dme | Dpn | Fao | Fto | Fcp | Fda | Fdd | Fdn | Fdo | Fds | Fls | Fpa | Fpg | Fqy | Ful | Gbr | Gsd | Hpe | Iap | Ils | Iue | Mgp | Mkr | Mls | Ndb | Nli | Nsc | Ntg | Oaa | Oae | Oas | Ogr | Obs | Ofa | Oil | Org | Oxg | Pfy | Plb | Plc | Rcp | Rda | Rdd | Rdn | Rdo | Rds | Rls | Rpa | Rpg | Rsg | Rsu | Rte | Rwy | Sae | Sah | Ser | Shp | Sia | Sid | Sip | Sns | Sny | Spa | Spd | Srs | Ssd | Sse | Ssr | Sue | Swy | Tcn | Tcp | Tfr | Thp | Tla | Tlg | Tli | Tls | Tly | Tsa | Tsg | Twy | Uac | Uas | Uni | Vli | Vor | Lbm | Aac | Dln | Nln | Tln | Vln)+
        /// </para>
        /// </summary>
        public virtual IList<DmeUsageLimitationType> Dli {
            get {
                if ((this.DliField == null)) {
                    this.DliField = new XTypedList<DmeUsageLimitationType>(this, LinqToXsdTypeManager.Instance, DliXName);
                }
                return this.DliField;
            }
            set {
                if ((value == null)) {
                    this.DliField = null;
                }
                else {
                    if ((this.DliField == null)) {
                        this.DliField = XTypedList<DmeUsageLimitationType>.Initialize(this, LinqToXsdTypeManager.Instance, value, DliXName);
                    }
                    else {
                        XTypedServices.SetList<DmeUsageLimitationType>(this.DliField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (Aas | Abd | Acr | Adg | Aga | Agl | Aha | Ahc | Aho | Ahp | Ahs | Ahu | Ain | Als | Ana | Apg | Apn | Ase | Din | Dli | Dme | Dpn | Fao | Fto | Fcp | Fda | Fdd | Fdn | Fdo | Fds | Fls | Fpa | Fpg | Fqy | Ful | Gbr | Gsd | Hpe | Iap | Ils | Iue | Mgp | Mkr | Mls | Ndb | Nli | Nsc | Ntg | Oaa | Oae | Oas | Ogr | Obs | Ofa | Oil | Org | Oxg | Pfy | Plb | Plc | Rcp | Rda | Rdd | Rdn | Rdo | Rds | Rls | Rpa | Rpg | Rsg | Rsu | Rte | Rwy | Sae | Sah | Ser | Shp | Sia | Sid | Sip | Sns | Sny | Spa | Spd | Srs | Ssd | Sse | Ssr | Sue | Swy | Tcn | Tcp | Tfr | Thp | Tla | Tlg | Tli | Tls | Tly | Tsa | Tsg | Twy | Uac | Uas | Uni | Vli | Vor | Lbm | Aac | Dln | Nln | Tln | Vln)+
        /// </para>
        /// </summary>
        public virtual IList<DmeType> Dme {
            get {
                if ((this.DmeField == null)) {
                    this.DmeField = new XTypedList<DmeType>(this, LinqToXsdTypeManager.Instance, DmeXName);
                }
                return this.DmeField;
            }
            set {
                if ((value == null)) {
                    this.DmeField = null;
                }
                else {
                    if ((this.DmeField == null)) {
                        this.DmeField = XTypedList<DmeType>.Initialize(this, LinqToXsdTypeManager.Instance, value, DmeXName);
                    }
                    else {
                        XTypedServices.SetList<DmeType>(this.DmeField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (Aas | Abd | Acr | Adg | Aga | Agl | Aha | Ahc | Aho | Ahp | Ahs | Ahu | Ain | Als | Ana | Apg | Apn | Ase | Din | Dli | Dme | Dpn | Fao | Fto | Fcp | Fda | Fdd | Fdn | Fdo | Fds | Fls | Fpa | Fpg | Fqy | Ful | Gbr | Gsd | Hpe | Iap | Ils | Iue | Mgp | Mkr | Mls | Ndb | Nli | Nsc | Ntg | Oaa | Oae | Oas | Ogr | Obs | Ofa | Oil | Org | Oxg | Pfy | Plb | Plc | Rcp | Rda | Rdd | Rdn | Rdo | Rds | Rls | Rpa | Rpg | Rsg | Rsu | Rte | Rwy | Sae | Sah | Ser | Shp | Sia | Sid | Sip | Sns | Sny | Spa | Spd | Srs | Ssd | Sse | Ssr | Sue | Swy | Tcn | Tcp | Tfr | Thp | Tla | Tlg | Tli | Tls | Tly | Tsa | Tsg | Twy | Uac | Uas | Uni | Vli | Vor | Lbm | Aac | Dln | Nln | Tln | Vln)+
        /// </para>
        /// </summary>
        public virtual IList<DesignatedPointType> Dpn {
            get {
                if ((this.DpnField == null)) {
                    this.DpnField = new XTypedList<DesignatedPointType>(this, LinqToXsdTypeManager.Instance, DpnXName);
                }
                return this.DpnField;
            }
            set {
                if ((value == null)) {
                    this.DpnField = null;
                }
                else {
                    if ((this.DpnField == null)) {
                        this.DpnField = XTypedList<DesignatedPointType>.Initialize(this, LinqToXsdTypeManager.Instance, value, DpnXName);
                    }
                    else {
                        XTypedServices.SetList<DesignatedPointType>(this.DpnField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// DEPRECATED-4.5
        /// </para>
        /// <para>
        /// [Deprecated]
        /// </para>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (Aas | Abd | Acr | Adg | Aga | Agl | Aha | Ahc | Aho | Ahp | Ahs | Ahu | Ain | Als | Ana | Apg | Apn | Ase | Din | Dli | Dme | Dpn | Fao | Fto | Fcp | Fda | Fdd | Fdn | Fdo | Fds | Fls | Fpa | Fpg | Fqy | Ful | Gbr | Gsd | Hpe | Iap | Ils | Iue | Mgp | Mkr | Mls | Ndb | Nli | Nsc | Ntg | Oaa | Oae | Oas | Ogr | Obs | Ofa | Oil | Org | Oxg | Pfy | Plb | Plc | Rcp | Rda | Rdd | Rdn | Rdo | Rds | Rls | Rpa | Rpg | Rsg | Rsu | Rte | Rwy | Sae | Sah | Ser | Shp | Sia | Sid | Sip | Sns | Sny | Spa | Spd | Srs | Ssd | Sse | Ssr | Sue | Swy | Tcn | Tcp | Tfr | Thp | Tla | Tlg | Tli | Tls | Tly | Tsa | Tsg | Twy | Uac | Uas | Uni | Vli | Vor | Lbm | Aac | Dln | Nln | Tln | Vln)+
        /// </para>
        /// </summary>
        public virtual IList<FatoOldType> Fao {
            get {
                if ((this.FaoField == null)) {
                    this.FaoField = new XTypedList<FatoOldType>(this, LinqToXsdTypeManager.Instance, FaoXName);
                }
                return this.FaoField;
            }
            set {
                if ((value == null)) {
                    this.FaoField = null;
                }
                else {
                    if ((this.FaoField == null)) {
                        this.FaoField = XTypedList<FatoOldType>.Initialize(this, LinqToXsdTypeManager.Instance, value, FaoXName);
                    }
                    else {
                        XTypedServices.SetList<FatoOldType>(this.FaoField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (Aas | Abd | Acr | Adg | Aga | Agl | Aha | Ahc | Aho | Ahp | Ahs | Ahu | Ain | Als | Ana | Apg | Apn | Ase | Din | Dli | Dme | Dpn | Fao | Fto | Fcp | Fda | Fdd | Fdn | Fdo | Fds | Fls | Fpa | Fpg | Fqy | Ful | Gbr | Gsd | Hpe | Iap | Ils | Iue | Mgp | Mkr | Mls | Ndb | Nli | Nsc | Ntg | Oaa | Oae | Oas | Ogr | Obs | Ofa | Oil | Org | Oxg | Pfy | Plb | Plc | Rcp | Rda | Rdd | Rdn | Rdo | Rds | Rls | Rpa | Rpg | Rsg | Rsu | Rte | Rwy | Sae | Sah | Ser | Shp | Sia | Sid | Sip | Sns | Sny | Spa | Spd | Srs | Ssd | Sse | Ssr | Sue | Swy | Tcn | Tcp | Tfr | Thp | Tla | Tlg | Tli | Tls | Tly | Tsa | Tsg | Twy | Uac | Uas | Uni | Vli | Vor | Lbm | Aac | Dln | Nln | Tln | Vln)+
        /// </para>
        /// </summary>
        public virtual IList<FatoType> Fto {
            get {
                if ((this.FtoField == null)) {
                    this.FtoField = new XTypedList<FatoType>(this, LinqToXsdTypeManager.Instance, FtoXName);
                }
                return this.FtoField;
            }
            set {
                if ((value == null)) {
                    this.FtoField = null;
                }
                else {
                    if ((this.FtoField == null)) {
                        this.FtoField = XTypedList<FatoType>.Initialize(this, LinqToXsdTypeManager.Instance, value, FtoXName);
                    }
                    else {
                        XTypedServices.SetList<FatoType>(this.FtoField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (Aas | Abd | Acr | Adg | Aga | Agl | Aha | Ahc | Aho | Ahp | Ahs | Ahu | Ain | Als | Ana | Apg | Apn | Ase | Din | Dli | Dme | Dpn | Fao | Fto | Fcp | Fda | Fdd | Fdn | Fdo | Fds | Fls | Fpa | Fpg | Fqy | Ful | Gbr | Gsd | Hpe | Iap | Ils | Iue | Mgp | Mkr | Mls | Ndb | Nli | Nsc | Ntg | Oaa | Oae | Oas | Ogr | Obs | Ofa | Oil | Org | Oxg | Pfy | Plb | Plc | Rcp | Rda | Rdd | Rdn | Rdo | Rds | Rls | Rpa | Rpg | Rsg | Rsu | Rte | Rwy | Sae | Sah | Ser | Shp | Sia | Sid | Sip | Sns | Sny | Spa | Spd | Srs | Ssd | Sse | Ssr | Sue | Swy | Tcn | Tcp | Tfr | Thp | Tla | Tlg | Tli | Tls | Tly | Tsa | Tsg | Twy | Uac | Uas | Uni | Vli | Vor | Lbm | Aac | Dln | Nln | Tln | Vln)+
        /// </para>
        /// </summary>
        public virtual IList<FatoCentreLinePositionType> Fcp {
            get {
                if ((this.FcpField == null)) {
                    this.FcpField = new XTypedList<FatoCentreLinePositionType>(this, LinqToXsdTypeManager.Instance, FcpXName);
                }
                return this.FcpField;
            }
            set {
                if ((value == null)) {
                    this.FcpField = null;
                }
                else {
                    if ((this.FcpField == null)) {
                        this.FcpField = XTypedList<FatoCentreLinePositionType>.Initialize(this, LinqToXsdTypeManager.Instance, value, FcpXName);
                    }
                    else {
                        XTypedServices.SetList<FatoCentreLinePositionType>(this.FcpField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (Aas | Abd | Acr | Adg | Aga | Agl | Aha | Ahc | Aho | Ahp | Ahs | Ahu | Ain | Als | Ana | Apg | Apn | Ase | Din | Dli | Dme | Dpn | Fao | Fto | Fcp | Fda | Fdd | Fdn | Fdo | Fds | Fls | Fpa | Fpg | Fqy | Ful | Gbr | Gsd | Hpe | Iap | Ils | Iue | Mgp | Mkr | Mls | Ndb | Nli | Nsc | Ntg | Oaa | Oae | Oas | Ogr | Obs | Ofa | Oil | Org | Oxg | Pfy | Plb | Plc | Rcp | Rda | Rdd | Rdn | Rdo | Rds | Rls | Rpa | Rpg | Rsg | Rsu | Rte | Rwy | Sae | Sah | Ser | Shp | Sia | Sid | Sip | Sns | Sny | Spa | Spd | Srs | Ssd | Sse | Ssr | Sue | Swy | Tcn | Tcp | Tfr | Thp | Tla | Tlg | Tli | Tls | Tly | Tsa | Tsg | Twy | Uac | Uas | Uni | Vli | Vor | Lbm | Aac | Dln | Nln | Tln | Vln)+
        /// </para>
        /// </summary>
        public virtual IList<FatoDirectionApproachLightingType> Fda {
            get {
                if ((this.FdaField == null)) {
                    this.FdaField = new XTypedList<FatoDirectionApproachLightingType>(this, LinqToXsdTypeManager.Instance, FdaXName);
                }
                return this.FdaField;
            }
            set {
                if ((value == null)) {
                    this.FdaField = null;
                }
                else {
                    if ((this.FdaField == null)) {
                        this.FdaField = XTypedList<FatoDirectionApproachLightingType>.Initialize(this, LinqToXsdTypeManager.Instance, value, FdaXName);
                    }
                    else {
                        XTypedServices.SetList<FatoDirectionApproachLightingType>(this.FdaField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (Aas | Abd | Acr | Adg | Aga | Agl | Aha | Ahc | Aho | Ahp | Ahs | Ahu | Ain | Als | Ana | Apg | Apn | Ase | Din | Dli | Dme | Dpn | Fao | Fto | Fcp | Fda | Fdd | Fdn | Fdo | Fds | Fls | Fpa | Fpg | Fqy | Ful | Gbr | Gsd | Hpe | Iap | Ils | Iue | Mgp | Mkr | Mls | Ndb | Nli | Nsc | Ntg | Oaa | Oae | Oas | Ogr | Obs | Ofa | Oil | Org | Oxg | Pfy | Plb | Plc | Rcp | Rda | Rdd | Rdn | Rdo | Rds | Rls | Rpa | Rpg | Rsg | Rsu | Rte | Rwy | Sae | Sah | Ser | Shp | Sia | Sid | Sip | Sns | Sny | Spa | Spd | Srs | Ssd | Sse | Ssr | Sue | Swy | Tcn | Tcp | Tfr | Thp | Tla | Tlg | Tli | Tls | Tly | Tsa | Tsg | Twy | Uac | Uas | Uni | Vli | Vor | Lbm | Aac | Dln | Nln | Tln | Vln)+
        /// </para>
        /// </summary>
        public virtual IList<FatoDirectionDeclaredDistanceType> Fdd {
            get {
                if ((this.FddField == null)) {
                    this.FddField = new XTypedList<FatoDirectionDeclaredDistanceType>(this, LinqToXsdTypeManager.Instance, FddXName);
                }
                return this.FddField;
            }
            set {
                if ((value == null)) {
                    this.FddField = null;
                }
                else {
                    if ((this.FddField == null)) {
                        this.FddField = XTypedList<FatoDirectionDeclaredDistanceType>.Initialize(this, LinqToXsdTypeManager.Instance, value, FddXName);
                    }
                    else {
                        XTypedServices.SetList<FatoDirectionDeclaredDistanceType>(this.FddField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (Aas | Abd | Acr | Adg | Aga | Agl | Aha | Ahc | Aho | Ahp | Ahs | Ahu | Ain | Als | Ana | Apg | Apn | Ase | Din | Dli | Dme | Dpn | Fao | Fto | Fcp | Fda | Fdd | Fdn | Fdo | Fds | Fls | Fpa | Fpg | Fqy | Ful | Gbr | Gsd | Hpe | Iap | Ils | Iue | Mgp | Mkr | Mls | Ndb | Nli | Nsc | Ntg | Oaa | Oae | Oas | Ogr | Obs | Ofa | Oil | Org | Oxg | Pfy | Plb | Plc | Rcp | Rda | Rdd | Rdn | Rdo | Rds | Rls | Rpa | Rpg | Rsg | Rsu | Rte | Rwy | Sae | Sah | Ser | Shp | Sia | Sid | Sip | Sns | Sny | Spa | Spd | Srs | Ssd | Sse | Ssr | Sue | Swy | Tcn | Tcp | Tfr | Thp | Tla | Tlg | Tli | Tls | Tly | Tsa | Tsg | Twy | Uac | Uas | Uni | Vli | Vor | Lbm | Aac | Dln | Nln | Tln | Vln)+
        /// </para>
        /// </summary>
        public virtual IList<FatoDirectionType> Fdn {
            get {
                if ((this.FdnField == null)) {
                    this.FdnField = new XTypedList<FatoDirectionType>(this, LinqToXsdTypeManager.Instance, FdnXName);
                }
                return this.FdnField;
            }
            set {
                if ((value == null)) {
                    this.FdnField = null;
                }
                else {
                    if ((this.FdnField == null)) {
                        this.FdnField = XTypedList<FatoDirectionType>.Initialize(this, LinqToXsdTypeManager.Instance, value, FdnXName);
                    }
                    else {
                        XTypedServices.SetList<FatoDirectionType>(this.FdnField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (Aas | Abd | Acr | Adg | Aga | Agl | Aha | Ahc | Aho | Ahp | Ahs | Ahu | Ain | Als | Ana | Apg | Apn | Ase | Din | Dli | Dme | Dpn | Fao | Fto | Fcp | Fda | Fdd | Fdn | Fdo | Fds | Fls | Fpa | Fpg | Fqy | Ful | Gbr | Gsd | Hpe | Iap | Ils | Iue | Mgp | Mkr | Mls | Ndb | Nli | Nsc | Ntg | Oaa | Oae | Oas | Ogr | Obs | Ofa | Oil | Org | Oxg | Pfy | Plb | Plc | Rcp | Rda | Rdd | Rdn | Rdo | Rds | Rls | Rpa | Rpg | Rsg | Rsu | Rte | Rwy | Sae | Sah | Ser | Shp | Sia | Sid | Sip | Sns | Sny | Spa | Spd | Srs | Ssd | Sse | Ssr | Sue | Swy | Tcn | Tcp | Tfr | Thp | Tla | Tlg | Tli | Tls | Tly | Tsa | Tsg | Twy | Uac | Uas | Uni | Vli | Vor | Lbm | Aac | Dln | Nln | Tln | Vln)+
        /// </para>
        /// </summary>
        public virtual IList<FatoDirectionObstacleType> Fdo {
            get {
                if ((this.FdoField == null)) {
                    this.FdoField = new XTypedList<FatoDirectionObstacleType>(this, LinqToXsdTypeManager.Instance, FdoXName);
                }
                return this.FdoField;
            }
            set {
                if ((value == null)) {
                    this.FdoField = null;
                }
                else {
                    if ((this.FdoField == null)) {
                        this.FdoField = XTypedList<FatoDirectionObstacleType>.Initialize(this, LinqToXsdTypeManager.Instance, value, FdoXName);
                    }
                    else {
                        XTypedServices.SetList<FatoDirectionObstacleType>(this.FdoField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (Aas | Abd | Acr | Adg | Aga | Agl | Aha | Ahc | Aho | Ahp | Ahs | Ahu | Ain | Als | Ana | Apg | Apn | Ase | Din | Dli | Dme | Dpn | Fao | Fto | Fcp | Fda | Fdd | Fdn | Fdo | Fds | Fls | Fpa | Fpg | Fqy | Ful | Gbr | Gsd | Hpe | Iap | Ils | Iue | Mgp | Mkr | Mls | Ndb | Nli | Nsc | Ntg | Oaa | Oae | Oas | Ogr | Obs | Ofa | Oil | Org | Oxg | Pfy | Plb | Plc | Rcp | Rda | Rdd | Rdn | Rdo | Rds | Rls | Rpa | Rpg | Rsg | Rsu | Rte | Rwy | Sae | Sah | Ser | Shp | Sia | Sid | Sip | Sns | Sny | Spa | Spd | Srs | Ssd | Sse | Ssr | Sue | Swy | Tcn | Tcp | Tfr | Thp | Tla | Tlg | Tli | Tls | Tly | Tsa | Tsg | Twy | Uac | Uas | Uni | Vli | Vor | Lbm | Aac | Dln | Nln | Tln | Vln)+
        /// </para>
        /// </summary>
        public virtual IList<FatoDirectionStarType> Fds {
            get {
                if ((this.FdsField == null)) {
                    this.FdsField = new XTypedList<FatoDirectionStarType>(this, LinqToXsdTypeManager.Instance, FdsXName);
                }
                return this.FdsField;
            }
            set {
                if ((value == null)) {
                    this.FdsField = null;
                }
                else {
                    if ((this.FdsField == null)) {
                        this.FdsField = XTypedList<FatoDirectionStarType>.Initialize(this, LinqToXsdTypeManager.Instance, value, FdsXName);
                    }
                    else {
                        XTypedServices.SetList<FatoDirectionStarType>(this.FdsField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (Aas | Abd | Acr | Adg | Aga | Agl | Aha | Ahc | Aho | Ahp | Ahs | Ahu | Ain | Als | Ana | Apg | Apn | Ase | Din | Dli | Dme | Dpn | Fao | Fto | Fcp | Fda | Fdd | Fdn | Fdo | Fds | Fls | Fpa | Fpg | Fqy | Ful | Gbr | Gsd | Hpe | Iap | Ils | Iue | Mgp | Mkr | Mls | Ndb | Nli | Nsc | Ntg | Oaa | Oae | Oas | Ogr | Obs | Ofa | Oil | Org | Oxg | Pfy | Plb | Plc | Rcp | Rda | Rdd | Rdn | Rdo | Rds | Rls | Rpa | Rpg | Rsg | Rsu | Rte | Rwy | Sae | Sah | Ser | Shp | Sia | Sid | Sip | Sns | Sny | Spa | Spd | Srs | Ssd | Sse | Ssr | Sue | Swy | Tcn | Tcp | Tfr | Thp | Tla | Tlg | Tli | Tls | Tly | Tsa | Tsg | Twy | Uac | Uas | Uni | Vli | Vor | Lbm | Aac | Dln | Nln | Tln | Vln)+
        /// </para>
        /// </summary>
        public virtual IList<FatoLightingSystemType> Fls {
            get {
                if ((this.FlsField == null)) {
                    this.FlsField = new XTypedList<FatoLightingSystemType>(this, LinqToXsdTypeManager.Instance, FlsXName);
                }
                return this.FlsField;
            }
            set {
                if ((value == null)) {
                    this.FlsField = null;
                }
                else {
                    if ((this.FlsField == null)) {
                        this.FlsField = XTypedList<FatoLightingSystemType>.Initialize(this, LinqToXsdTypeManager.Instance, value, FlsXName);
                    }
                    else {
                        XTypedServices.SetList<FatoLightingSystemType>(this.FlsField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (Aas | Abd | Acr | Adg | Aga | Agl | Aha | Ahc | Aho | Ahp | Ahs | Ahu | Ain | Als | Ana | Apg | Apn | Ase | Din | Dli | Dme | Dpn | Fao | Fto | Fcp | Fda | Fdd | Fdn | Fdo | Fds | Fls | Fpa | Fpg | Fqy | Ful | Gbr | Gsd | Hpe | Iap | Ils | Iue | Mgp | Mkr | Mls | Ndb | Nli | Nsc | Ntg | Oaa | Oae | Oas | Ogr | Obs | Ofa | Oil | Org | Oxg | Pfy | Plb | Plc | Rcp | Rda | Rdd | Rdn | Rdo | Rds | Rls | Rpa | Rpg | Rsg | Rsu | Rte | Rwy | Sae | Sah | Ser | Shp | Sia | Sid | Sip | Sns | Sny | Spa | Spd | Srs | Ssd | Sse | Ssr | Sue | Swy | Tcn | Tcp | Tfr | Thp | Tla | Tlg | Tli | Tls | Tly | Tsa | Tsg | Twy | Uac | Uas | Uni | Vli | Vor | Lbm | Aac | Dln | Nln | Tln | Vln)+
        /// </para>
        /// </summary>
        public virtual IList<FatoProtectionAreaType> Fpa {
            get {
                if ((this.FpaField == null)) {
                    this.FpaField = new XTypedList<FatoProtectionAreaType>(this, LinqToXsdTypeManager.Instance, FpaXName);
                }
                return this.FpaField;
            }
            set {
                if ((value == null)) {
                    this.FpaField = null;
                }
                else {
                    if ((this.FpaField == null)) {
                        this.FpaField = XTypedList<FatoProtectionAreaType>.Initialize(this, LinqToXsdTypeManager.Instance, value, FpaXName);
                    }
                    else {
                        XTypedServices.SetList<FatoProtectionAreaType>(this.FpaField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (Aas | Abd | Acr | Adg | Aga | Agl | Aha | Ahc | Aho | Ahp | Ahs | Ahu | Ain | Als | Ana | Apg | Apn | Ase | Din | Dli | Dme | Dpn | Fao | Fto | Fcp | Fda | Fdd | Fdn | Fdo | Fds | Fls | Fpa | Fpg | Fqy | Ful | Gbr | Gsd | Hpe | Iap | Ils | Iue | Mgp | Mkr | Mls | Ndb | Nli | Nsc | Ntg | Oaa | Oae | Oas | Ogr | Obs | Ofa | Oil | Org | Oxg | Pfy | Plb | Plc | Rcp | Rda | Rdd | Rdn | Rdo | Rds | Rls | Rpa | Rpg | Rsg | Rsu | Rte | Rwy | Sae | Sah | Ser | Shp | Sia | Sid | Sip | Sns | Sny | Spa | Spd | Srs | Ssd | Sse | Ssr | Sue | Swy | Tcn | Tcp | Tfr | Thp | Tla | Tlg | Tli | Tls | Tly | Tsa | Tsg | Twy | Uac | Uas | Uni | Vli | Vor | Lbm | Aac | Dln | Nln | Tln | Vln)+
        /// </para>
        /// </summary>
        public virtual IList<FatoProtectionAreaGeometryType> Fpg {
            get {
                if ((this.FpgField == null)) {
                    this.FpgField = new XTypedList<FatoProtectionAreaGeometryType>(this, LinqToXsdTypeManager.Instance, FpgXName);
                }
                return this.FpgField;
            }
            set {
                if ((value == null)) {
                    this.FpgField = null;
                }
                else {
                    if ((this.FpgField == null)) {
                        this.FpgField = XTypedList<FatoProtectionAreaGeometryType>.Initialize(this, LinqToXsdTypeManager.Instance, value, FpgXName);
                    }
                    else {
                        XTypedServices.SetList<FatoProtectionAreaGeometryType>(this.FpgField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (Aas | Abd | Acr | Adg | Aga | Agl | Aha | Ahc | Aho | Ahp | Ahs | Ahu | Ain | Als | Ana | Apg | Apn | Ase | Din | Dli | Dme | Dpn | Fao | Fto | Fcp | Fda | Fdd | Fdn | Fdo | Fds | Fls | Fpa | Fpg | Fqy | Ful | Gbr | Gsd | Hpe | Iap | Ils | Iue | Mgp | Mkr | Mls | Ndb | Nli | Nsc | Ntg | Oaa | Oae | Oas | Ogr | Obs | Ofa | Oil | Org | Oxg | Pfy | Plb | Plc | Rcp | Rda | Rdd | Rdn | Rdo | Rds | Rls | Rpa | Rpg | Rsg | Rsu | Rte | Rwy | Sae | Sah | Ser | Shp | Sia | Sid | Sip | Sns | Sny | Spa | Spd | Srs | Ssd | Sse | Ssr | Sue | Swy | Tcn | Tcp | Tfr | Thp | Tla | Tlg | Tli | Tls | Tly | Tsa | Tsg | Twy | Uac | Uas | Uni | Vli | Vor | Lbm | Aac | Dln | Nln | Tln | Vln)+
        /// </para>
        /// </summary>
        public virtual IList<FrequencyType> Fqy {
            get {
                if ((this.FqyField == null)) {
                    this.FqyField = new XTypedList<FrequencyType>(this, LinqToXsdTypeManager.Instance, FqyXName);
                }
                return this.FqyField;
            }
            set {
                if ((value == null)) {
                    this.FqyField = null;
                }
                else {
                    if ((this.FqyField == null)) {
                        this.FqyField = XTypedList<FrequencyType>.Initialize(this, LinqToXsdTypeManager.Instance, value, FqyXName);
                    }
                    else {
                        XTypedServices.SetList<FrequencyType>(this.FqyField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (Aas | Abd | Acr | Adg | Aga | Agl | Aha | Ahc | Aho | Ahp | Ahs | Ahu | Ain | Als | Ana | Apg | Apn | Ase | Din | Dli | Dme | Dpn | Fao | Fto | Fcp | Fda | Fdd | Fdn | Fdo | Fds | Fls | Fpa | Fpg | Fqy | Ful | Gbr | Gsd | Hpe | Iap | Ils | Iue | Mgp | Mkr | Mls | Ndb | Nli | Nsc | Ntg | Oaa | Oae | Oas | Ogr | Obs | Ofa | Oil | Org | Oxg | Pfy | Plb | Plc | Rcp | Rda | Rdd | Rdn | Rdo | Rds | Rls | Rpa | Rpg | Rsg | Rsu | Rte | Rwy | Sae | Sah | Ser | Shp | Sia | Sid | Sip | Sns | Sny | Spa | Spd | Srs | Ssd | Sse | Ssr | Sue | Swy | Tcn | Tcp | Tfr | Thp | Tla | Tlg | Tli | Tls | Tly | Tsa | Tsg | Twy | Uac | Uas | Uni | Vli | Vor | Lbm | Aac | Dln | Nln | Tln | Vln)+
        /// </para>
        /// </summary>
        public virtual IList<FuelType> Ful {
            get {
                if ((this.FulField == null)) {
                    this.FulField = new XTypedList<FuelType>(this, LinqToXsdTypeManager.Instance, FulXName);
                }
                return this.FulField;
            }
            set {
                if ((value == null)) {
                    this.FulField = null;
                }
                else {
                    if ((this.FulField == null)) {
                        this.FulField = XTypedList<FuelType>.Initialize(this, LinqToXsdTypeManager.Instance, value, FulXName);
                    }
                    else {
                        XTypedServices.SetList<FuelType>(this.FulField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (Aas | Abd | Acr | Adg | Aga | Agl | Aha | Ahc | Aho | Ahp | Ahs | Ahu | Ain | Als | Ana | Apg | Apn | Ase | Din | Dli | Dme | Dpn | Fao | Fto | Fcp | Fda | Fdd | Fdn | Fdo | Fds | Fls | Fpa | Fpg | Fqy | Ful | Gbr | Gsd | Hpe | Iap | Ils | Iue | Mgp | Mkr | Mls | Ndb | Nli | Nsc | Ntg | Oaa | Oae | Oas | Ogr | Obs | Ofa | Oil | Org | Oxg | Pfy | Plb | Plc | Rcp | Rda | Rdd | Rdn | Rdo | Rds | Rls | Rpa | Rpg | Rsg | Rsu | Rte | Rwy | Sae | Sah | Ser | Shp | Sia | Sid | Sip | Sns | Sny | Spa | Spd | Srs | Ssd | Sse | Ssr | Sue | Swy | Tcn | Tcp | Tfr | Thp | Tla | Tlg | Tli | Tls | Tly | Tsa | Tsg | Twy | Uac | Uas | Uni | Vli | Vor | Lbm | Aac | Dln | Nln | Tln | Vln)+
        /// </para>
        /// </summary>
        public virtual IList<GeographicalBorderType> Gbr {
            get {
                if ((this.GbrField == null)) {
                    this.GbrField = new XTypedList<GeographicalBorderType>(this, LinqToXsdTypeManager.Instance, GbrXName);
                }
                return this.GbrField;
            }
            set {
                if ((value == null)) {
                    this.GbrField = null;
                }
                else {
                    if ((this.GbrField == null)) {
                        this.GbrField = XTypedList<GeographicalBorderType>.Initialize(this, LinqToXsdTypeManager.Instance, value, GbrXName);
                    }
                    else {
                        XTypedServices.SetList<GeographicalBorderType>(this.GbrField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (Aas | Abd | Acr | Adg | Aga | Agl | Aha | Ahc | Aho | Ahp | Ahs | Ahu | Ain | Als | Ana | Apg | Apn | Ase | Din | Dli | Dme | Dpn | Fao | Fto | Fcp | Fda | Fdd | Fdn | Fdo | Fds | Fls | Fpa | Fpg | Fqy | Ful | Gbr | Gsd | Hpe | Iap | Ils | Iue | Mgp | Mkr | Mls | Ndb | Nli | Nsc | Ntg | Oaa | Oae | Oas | Ogr | Obs | Ofa | Oil | Org | Oxg | Pfy | Plb | Plc | Rcp | Rda | Rdd | Rdn | Rdo | Rds | Rls | Rpa | Rpg | Rsg | Rsu | Rte | Rwy | Sae | Sah | Ser | Shp | Sia | Sid | Sip | Sns | Sny | Spa | Spd | Srs | Ssd | Sse | Ssr | Sue | Swy | Tcn | Tcp | Tfr | Thp | Tla | Tlg | Tli | Tls | Tly | Tsa | Tsg | Twy | Uac | Uas | Uni | Vli | Vor | Lbm | Aac | Dln | Nln | Tln | Vln)+
        /// </para>
        /// </summary>
        public virtual IList<GateStandType> Gsd {
            get {
                if ((this.GsdField == null)) {
                    this.GsdField = new XTypedList<GateStandType>(this, LinqToXsdTypeManager.Instance, GsdXName);
                }
                return this.GsdField;
            }
            set {
                if ((value == null)) {
                    this.GsdField = null;
                }
                else {
                    if ((this.GsdField == null)) {
                        this.GsdField = XTypedList<GateStandType>.Initialize(this, LinqToXsdTypeManager.Instance, value, GsdXName);
                    }
                    else {
                        XTypedServices.SetList<GateStandType>(this.GsdField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (Aas | Abd | Acr | Adg | Aga | Agl | Aha | Ahc | Aho | Ahp | Ahs | Ahu | Ain | Als | Ana | Apg | Apn | Ase | Din | Dli | Dme | Dpn | Fao | Fto | Fcp | Fda | Fdd | Fdn | Fdo | Fds | Fls | Fpa | Fpg | Fqy | Ful | Gbr | Gsd | Hpe | Iap | Ils | Iue | Mgp | Mkr | Mls | Ndb | Nli | Nsc | Ntg | Oaa | Oae | Oas | Ogr | Obs | Ofa | Oil | Org | Oxg | Pfy | Plb | Plc | Rcp | Rda | Rdd | Rdn | Rdo | Rds | Rls | Rpa | Rpg | Rsg | Rsu | Rte | Rwy | Sae | Sah | Ser | Shp | Sia | Sid | Sip | Sns | Sny | Spa | Spd | Srs | Ssd | Sse | Ssr | Sue | Swy | Tcn | Tcp | Tfr | Thp | Tla | Tlg | Tli | Tls | Tly | Tsa | Tsg | Twy | Uac | Uas | Uni | Vli | Vor | Lbm | Aac | Dln | Nln | Tln | Vln)+
        /// </para>
        /// </summary>
        public virtual IList<HoldingProcedureType> Hpe {
            get {
                if ((this.HpeField == null)) {
                    this.HpeField = new XTypedList<HoldingProcedureType>(this, LinqToXsdTypeManager.Instance, HpeXName);
                }
                return this.HpeField;
            }
            set {
                if ((value == null)) {
                    this.HpeField = null;
                }
                else {
                    if ((this.HpeField == null)) {
                        this.HpeField = XTypedList<HoldingProcedureType>.Initialize(this, LinqToXsdTypeManager.Instance, value, HpeXName);
                    }
                    else {
                        XTypedServices.SetList<HoldingProcedureType>(this.HpeField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (Aas | Abd | Acr | Adg | Aga | Agl | Aha | Ahc | Aho | Ahp | Ahs | Ahu | Ain | Als | Ana | Apg | Apn | Ase | Din | Dli | Dme | Dpn | Fao | Fto | Fcp | Fda | Fdd | Fdn | Fdo | Fds | Fls | Fpa | Fpg | Fqy | Ful | Gbr | Gsd | Hpe | Iap | Ils | Iue | Mgp | Mkr | Mls | Ndb | Nli | Nsc | Ntg | Oaa | Oae | Oas | Ogr | Obs | Ofa | Oil | Org | Oxg | Pfy | Plb | Plc | Rcp | Rda | Rdd | Rdn | Rdo | Rds | Rls | Rpa | Rpg | Rsg | Rsu | Rte | Rwy | Sae | Sah | Ser | Shp | Sia | Sid | Sip | Sns | Sny | Spa | Spd | Srs | Ssd | Sse | Ssr | Sue | Swy | Tcn | Tcp | Tfr | Thp | Tla | Tlg | Tli | Tls | Tly | Tsa | Tsg | Twy | Uac | Uas | Uni | Vli | Vor | Lbm | Aac | Dln | Nln | Tln | Vln)+
        /// </para>
        /// </summary>
        public virtual IList<InstrumentApproachType> Iap {
            get {
                if ((this.IapField == null)) {
                    this.IapField = new XTypedList<InstrumentApproachType>(this, LinqToXsdTypeManager.Instance, IapXName);
                }
                return this.IapField;
            }
            set {
                if ((value == null)) {
                    this.IapField = null;
                }
                else {
                    if ((this.IapField == null)) {
                        this.IapField = XTypedList<InstrumentApproachType>.Initialize(this, LinqToXsdTypeManager.Instance, value, IapXName);
                    }
                    else {
                        XTypedServices.SetList<InstrumentApproachType>(this.IapField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (Aas | Abd | Acr | Adg | Aga | Agl | Aha | Ahc | Aho | Ahp | Ahs | Ahu | Ain | Als | Ana | Apg | Apn | Ase | Din | Dli | Dme | Dpn | Fao | Fto | Fcp | Fda | Fdd | Fdn | Fdo | Fds | Fls | Fpa | Fpg | Fqy | Ful | Gbr | Gsd | Hpe | Iap | Ils | Iue | Mgp | Mkr | Mls | Ndb | Nli | Nsc | Ntg | Oaa | Oae | Oas | Ogr | Obs | Ofa | Oil | Org | Oxg | Pfy | Plb | Plc | Rcp | Rda | Rdd | Rdn | Rdo | Rds | Rls | Rpa | Rpg | Rsg | Rsu | Rte | Rwy | Sae | Sah | Ser | Shp | Sia | Sid | Sip | Sns | Sny | Spa | Spd | Srs | Ssd | Sse | Ssr | Sue | Swy | Tcn | Tcp | Tfr | Thp | Tla | Tlg | Tli | Tls | Tly | Tsa | Tsg | Twy | Uac | Uas | Uni | Vli | Vor | Lbm | Aac | Dln | Nln | Tln | Vln)+
        /// </para>
        /// </summary>
        public virtual IList<IlsType> Ils {
            get {
                if ((this.IlsField == null)) {
                    this.IlsField = new XTypedList<IlsType>(this, LinqToXsdTypeManager.Instance, IlsXName);
                }
                return this.IlsField;
            }
            set {
                if ((value == null)) {
                    this.IlsField = null;
                }
                else {
                    if ((this.IlsField == null)) {
                        this.IlsField = XTypedList<IlsType>.Initialize(this, LinqToXsdTypeManager.Instance, value, IlsXName);
                    }
                    else {
                        XTypedServices.SetList<IlsType>(this.IlsField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (Aas | Abd | Acr | Adg | Aga | Agl | Aha | Ahc | Aho | Ahp | Ahs | Ahu | Ain | Als | Ana | Apg | Apn | Ase | Din | Dli | Dme | Dpn | Fao | Fto | Fcp | Fda | Fdd | Fdn | Fdo | Fds | Fls | Fpa | Fpg | Fqy | Ful | Gbr | Gsd | Hpe | Iap | Ils | Iue | Mgp | Mkr | Mls | Ndb | Nli | Nsc | Ntg | Oaa | Oae | Oas | Ogr | Obs | Ofa | Oil | Org | Oxg | Pfy | Plb | Plc | Rcp | Rda | Rdd | Rdn | Rdo | Rds | Rls | Rpa | Rpg | Rsg | Rsu | Rte | Rwy | Sae | Sah | Ser | Shp | Sia | Sid | Sip | Sns | Sny | Spa | Spd | Srs | Ssd | Sse | Ssr | Sue | Swy | Tcn | Tcp | Tfr | Thp | Tla | Tlg | Tli | Tls | Tly | Tsa | Tsg | Twy | Uac | Uas | Uni | Vli | Vor | Lbm | Aac | Dln | Nln | Tln | Vln)+
        /// </para>
        /// </summary>
        public virtual IList<InstrumentApproachUsageConditionType> Iue {
            get {
                if ((this.IueField == null)) {
                    this.IueField = new XTypedList<InstrumentApproachUsageConditionType>(this, LinqToXsdTypeManager.Instance, IueXName);
                }
                return this.IueField;
            }
            set {
                if ((value == null)) {
                    this.IueField = null;
                }
                else {
                    if ((this.IueField == null)) {
                        this.IueField = XTypedList<InstrumentApproachUsageConditionType>.Initialize(this, LinqToXsdTypeManager.Instance, value, IueXName);
                    }
                    else {
                        XTypedServices.SetList<InstrumentApproachUsageConditionType>(this.IueField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (Aas | Abd | Acr | Adg | Aga | Agl | Aha | Ahc | Aho | Ahp | Ahs | Ahu | Ain | Als | Ana | Apg | Apn | Ase | Din | Dli | Dme | Dpn | Fao | Fto | Fcp | Fda | Fdd | Fdn | Fdo | Fds | Fls | Fpa | Fpg | Fqy | Ful | Gbr | Gsd | Hpe | Iap | Ils | Iue | Mgp | Mkr | Mls | Ndb | Nli | Nsc | Ntg | Oaa | Oae | Oas | Ogr | Obs | Ofa | Oil | Org | Oxg | Pfy | Plb | Plc | Rcp | Rda | Rdd | Rdn | Rdo | Rds | Rls | Rpa | Rpg | Rsg | Rsu | Rte | Rwy | Sae | Sah | Ser | Shp | Sia | Sid | Sip | Sns | Sny | Spa | Spd | Srs | Ssd | Sse | Ssr | Sue | Swy | Tcn | Tcp | Tfr | Thp | Tla | Tlg | Tli | Tls | Tly | Tsa | Tsg | Twy | Uac | Uas | Uni | Vli | Vor | Lbm | Aac | Dln | Nln | Tln | Vln)+
        /// </para>
        /// </summary>
        public virtual IList<MsaGroupType> Mgp {
            get {
                if ((this.MgpField == null)) {
                    this.MgpField = new XTypedList<MsaGroupType>(this, LinqToXsdTypeManager.Instance, MgpXName);
                }
                return this.MgpField;
            }
            set {
                if ((value == null)) {
                    this.MgpField = null;
                }
                else {
                    if ((this.MgpField == null)) {
                        this.MgpField = XTypedList<MsaGroupType>.Initialize(this, LinqToXsdTypeManager.Instance, value, MgpXName);
                    }
                    else {
                        XTypedServices.SetList<MsaGroupType>(this.MgpField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (Aas | Abd | Acr | Adg | Aga | Agl | Aha | Ahc | Aho | Ahp | Ahs | Ahu | Ain | Als | Ana | Apg | Apn | Ase | Din | Dli | Dme | Dpn | Fao | Fto | Fcp | Fda | Fdd | Fdn | Fdo | Fds | Fls | Fpa | Fpg | Fqy | Ful | Gbr | Gsd | Hpe | Iap | Ils | Iue | Mgp | Mkr | Mls | Ndb | Nli | Nsc | Ntg | Oaa | Oae | Oas | Ogr | Obs | Ofa | Oil | Org | Oxg | Pfy | Plb | Plc | Rcp | Rda | Rdd | Rdn | Rdo | Rds | Rls | Rpa | Rpg | Rsg | Rsu | Rte | Rwy | Sae | Sah | Ser | Shp | Sia | Sid | Sip | Sns | Sny | Spa | Spd | Srs | Ssd | Sse | Ssr | Sue | Swy | Tcn | Tcp | Tfr | Thp | Tla | Tlg | Tli | Tls | Tly | Tsa | Tsg | Twy | Uac | Uas | Uni | Vli | Vor | Lbm | Aac | Dln | Nln | Tln | Vln)+
        /// </para>
        /// </summary>
        public virtual IList<MkrType> Mkr {
            get {
                if ((this.MkrField == null)) {
                    this.MkrField = new XTypedList<MkrType>(this, LinqToXsdTypeManager.Instance, MkrXName);
                }
                return this.MkrField;
            }
            set {
                if ((value == null)) {
                    this.MkrField = null;
                }
                else {
                    if ((this.MkrField == null)) {
                        this.MkrField = XTypedList<MkrType>.Initialize(this, LinqToXsdTypeManager.Instance, value, MkrXName);
                    }
                    else {
                        XTypedServices.SetList<MkrType>(this.MkrField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (Aas | Abd | Acr | Adg | Aga | Agl | Aha | Ahc | Aho | Ahp | Ahs | Ahu | Ain | Als | Ana | Apg | Apn | Ase | Din | Dli | Dme | Dpn | Fao | Fto | Fcp | Fda | Fdd | Fdn | Fdo | Fds | Fls | Fpa | Fpg | Fqy | Ful | Gbr | Gsd | Hpe | Iap | Ils | Iue | Mgp | Mkr | Mls | Ndb | Nli | Nsc | Ntg | Oaa | Oae | Oas | Ogr | Obs | Ofa | Oil | Org | Oxg | Pfy | Plb | Plc | Rcp | Rda | Rdd | Rdn | Rdo | Rds | Rls | Rpa | Rpg | Rsg | Rsu | Rte | Rwy | Sae | Sah | Ser | Shp | Sia | Sid | Sip | Sns | Sny | Spa | Spd | Srs | Ssd | Sse | Ssr | Sue | Swy | Tcn | Tcp | Tfr | Thp | Tla | Tlg | Tli | Tls | Tly | Tsa | Tsg | Twy | Uac | Uas | Uni | Vli | Vor | Lbm | Aac | Dln | Nln | Tln | Vln)+
        /// </para>
        /// </summary>
        public virtual IList<MlsType> Mls {
            get {
                if ((this.MlsField == null)) {
                    this.MlsField = new XTypedList<MlsType>(this, LinqToXsdTypeManager.Instance, MlsXName);
                }
                return this.MlsField;
            }
            set {
                if ((value == null)) {
                    this.MlsField = null;
                }
                else {
                    if ((this.MlsField == null)) {
                        this.MlsField = XTypedList<MlsType>.Initialize(this, LinqToXsdTypeManager.Instance, value, MlsXName);
                    }
                    else {
                        XTypedServices.SetList<MlsType>(this.MlsField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (Aas | Abd | Acr | Adg | Aga | Agl | Aha | Ahc | Aho | Ahp | Ahs | Ahu | Ain | Als | Ana | Apg | Apn | Ase | Din | Dli | Dme | Dpn | Fao | Fto | Fcp | Fda | Fdd | Fdn | Fdo | Fds | Fls | Fpa | Fpg | Fqy | Ful | Gbr | Gsd | Hpe | Iap | Ils | Iue | Mgp | Mkr | Mls | Ndb | Nli | Nsc | Ntg | Oaa | Oae | Oas | Ogr | Obs | Ofa | Oil | Org | Oxg | Pfy | Plb | Plc | Rcp | Rda | Rdd | Rdn | Rdo | Rds | Rls | Rpa | Rpg | Rsg | Rsu | Rte | Rwy | Sae | Sah | Ser | Shp | Sia | Sid | Sip | Sns | Sny | Spa | Spd | Srs | Ssd | Sse | Ssr | Sue | Swy | Tcn | Tcp | Tfr | Thp | Tla | Tlg | Tli | Tls | Tly | Tsa | Tsg | Twy | Uac | Uas | Uni | Vli | Vor | Lbm | Aac | Dln | Nln | Tln | Vln)+
        /// </para>
        /// </summary>
        public virtual IList<NdbType> Ndb {
            get {
                if ((this.NdbField == null)) {
                    this.NdbField = new XTypedList<NdbType>(this, LinqToXsdTypeManager.Instance, NdbXName);
                }
                return this.NdbField;
            }
            set {
                if ((value == null)) {
                    this.NdbField = null;
                }
                else {
                    if ((this.NdbField == null)) {
                        this.NdbField = XTypedList<NdbType>.Initialize(this, LinqToXsdTypeManager.Instance, value, NdbXName);
                    }
                    else {
                        XTypedServices.SetList<NdbType>(this.NdbField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (Aas | Abd | Acr | Adg | Aga | Agl | Aha | Ahc | Aho | Ahp | Ahs | Ahu | Ain | Als | Ana | Apg | Apn | Ase | Din | Dli | Dme | Dpn | Fao | Fto | Fcp | Fda | Fdd | Fdn | Fdo | Fds | Fls | Fpa | Fpg | Fqy | Ful | Gbr | Gsd | Hpe | Iap | Ils | Iue | Mgp | Mkr | Mls | Ndb | Nli | Nsc | Ntg | Oaa | Oae | Oas | Ogr | Obs | Ofa | Oil | Org | Oxg | Pfy | Plb | Plc | Rcp | Rda | Rdd | Rdn | Rdo | Rds | Rls | Rpa | Rpg | Rsg | Rsu | Rte | Rwy | Sae | Sah | Ser | Shp | Sia | Sid | Sip | Sns | Sny | Spa | Spd | Srs | Ssd | Sse | Ssr | Sue | Swy | Tcn | Tcp | Tfr | Thp | Tla | Tlg | Tli | Tls | Tly | Tsa | Tsg | Twy | Uac | Uas | Uni | Vli | Vor | Lbm | Aac | Dln | Nln | Tln | Vln)+
        /// </para>
        /// </summary>
        public virtual IList<NdbUsageLimitationType> Nli {
            get {
                if ((this.NliField == null)) {
                    this.NliField = new XTypedList<NdbUsageLimitationType>(this, LinqToXsdTypeManager.Instance, NliXName);
                }
                return this.NliField;
            }
            set {
                if ((value == null)) {
                    this.NliField = null;
                }
                else {
                    if ((this.NliField == null)) {
                        this.NliField = XTypedList<NdbUsageLimitationType>.Initialize(this, LinqToXsdTypeManager.Instance, value, NliXName);
                    }
                    else {
                        XTypedServices.SetList<NdbUsageLimitationType>(this.NliField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (Aas | Abd | Acr | Adg | Aga | Agl | Aha | Ahc | Aho | Ahp | Ahs | Ahu | Ain | Als | Ana | Apg | Apn | Ase | Din | Dli | Dme | Dpn | Fao | Fto | Fcp | Fda | Fdd | Fdn | Fdo | Fds | Fls | Fpa | Fpg | Fqy | Ful | Gbr | Gsd | Hpe | Iap | Ils | Iue | Mgp | Mkr | Mls | Ndb | Nli | Nsc | Ntg | Oaa | Oae | Oas | Ogr | Obs | Ofa | Oil | Org | Oxg | Pfy | Plb | Plc | Rcp | Rda | Rdd | Rdn | Rdo | Rds | Rls | Rpa | Rpg | Rsg | Rsu | Rte | Rwy | Sae | Sah | Ser | Shp | Sia | Sid | Sip | Sns | Sny | Spa | Spd | Srs | Ssd | Sse | Ssr | Sue | Swy | Tcn | Tcp | Tfr | Thp | Tla | Tlg | Tli | Tls | Tly | Tsa | Tsg | Twy | Uac | Uas | Uni | Vli | Vor | Lbm | Aac | Dln | Nln | Tln | Vln)+
        /// </para>
        /// </summary>
        public virtual IList<CheckpointType> Nsc {
            get {
                if ((this.NscField == null)) {
                    this.NscField = new XTypedList<CheckpointType>(this, LinqToXsdTypeManager.Instance, NscXName);
                }
                return this.NscField;
            }
            set {
                if ((value == null)) {
                    this.NscField = null;
                }
                else {
                    if ((this.NscField == null)) {
                        this.NscField = XTypedList<CheckpointType>.Initialize(this, LinqToXsdTypeManager.Instance, value, NscXName);
                    }
                    else {
                        XTypedServices.SetList<CheckpointType>(this.NscField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (Aas | Abd | Acr | Adg | Aga | Agl | Aha | Ahc | Aho | Ahp | Ahs | Ahu | Ain | Als | Ana | Apg | Apn | Ase | Din | Dli | Dme | Dpn | Fao | Fto | Fcp | Fda | Fdd | Fdn | Fdo | Fds | Fls | Fpa | Fpg | Fqy | Ful | Gbr | Gsd | Hpe | Iap | Ils | Iue | Mgp | Mkr | Mls | Ndb | Nli | Nsc | Ntg | Oaa | Oae | Oas | Ogr | Obs | Ofa | Oil | Org | Oxg | Pfy | Plb | Plc | Rcp | Rda | Rdd | Rdn | Rdo | Rds | Rls | Rpa | Rpg | Rsg | Rsu | Rte | Rwy | Sae | Sah | Ser | Shp | Sia | Sid | Sip | Sns | Sny | Spa | Spd | Srs | Ssd | Sse | Ssr | Sue | Swy | Tcn | Tcp | Tfr | Thp | Tla | Tlg | Tli | Tls | Tly | Tsa | Tsg | Twy | Uac | Uas | Uni | Vli | Vor | Lbm | Aac | Dln | Nln | Tln | Vln)+
        /// </para>
        /// </summary>
        public virtual IList<NitrogenType> Ntg {
            get {
                if ((this.NtgField == null)) {
                    this.NtgField = new XTypedList<NitrogenType>(this, LinqToXsdTypeManager.Instance, NtgXName);
                }
                return this.NtgField;
            }
            set {
                if ((value == null)) {
                    this.NtgField = null;
                }
                else {
                    if ((this.NtgField == null)) {
                        this.NtgField = XTypedList<NitrogenType>.Initialize(this, LinqToXsdTypeManager.Instance, value, NtgXName);
                    }
                    else {
                        XTypedServices.SetList<NitrogenType>(this.NtgField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (Aas | Abd | Acr | Adg | Aga | Agl | Aha | Ahc | Aho | Ahp | Ahs | Ahu | Ain | Als | Ana | Apg | Apn | Ase | Din | Dli | Dme | Dpn | Fao | Fto | Fcp | Fda | Fdd | Fdn | Fdo | Fds | Fls | Fpa | Fpg | Fqy | Ful | Gbr | Gsd | Hpe | Iap | Ils | Iue | Mgp | Mkr | Mls | Ndb | Nli | Nsc | Ntg | Oaa | Oae | Oas | Ogr | Obs | Ofa | Oil | Org | Oxg | Pfy | Plb | Plc | Rcp | Rda | Rdd | Rdn | Rdo | Rds | Rls | Rpa | Rpg | Rsg | Rsu | Rte | Rwy | Sae | Sah | Ser | Shp | Sia | Sid | Sip | Sns | Sny | Spa | Spd | Srs | Ssd | Sse | Ssr | Sue | Swy | Tcn | Tcp | Tfr | Thp | Tla | Tlg | Tli | Tls | Tly | Tsa | Tsg | Twy | Uac | Uas | Uni | Vli | Vor | Lbm | Aac | Dln | Nln | Tln | Vln)+
        /// </para>
        /// </summary>
        public virtual IList<OrganisationAuthorityAddressType> Oaa {
            get {
                if ((this.OaaField == null)) {
                    this.OaaField = new XTypedList<OrganisationAuthorityAddressType>(this, LinqToXsdTypeManager.Instance, OaaXName);
                }
                return this.OaaField;
            }
            set {
                if ((value == null)) {
                    this.OaaField = null;
                }
                else {
                    if ((this.OaaField == null)) {
                        this.OaaField = XTypedList<OrganisationAuthorityAddressType>.Initialize(this, LinqToXsdTypeManager.Instance, value, OaaXName);
                    }
                    else {
                        XTypedServices.SetList<OrganisationAuthorityAddressType>(this.OaaField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (Aas | Abd | Acr | Adg | Aga | Agl | Aha | Ahc | Aho | Ahp | Ahs | Ahu | Ain | Als | Ana | Apg | Apn | Ase | Din | Dli | Dme | Dpn | Fao | Fto | Fcp | Fda | Fdd | Fdn | Fdo | Fds | Fls | Fpa | Fpg | Fqy | Ful | Gbr | Gsd | Hpe | Iap | Ils | Iue | Mgp | Mkr | Mls | Ndb | Nli | Nsc | Ntg | Oaa | Oae | Oas | Ogr | Obs | Ofa | Oil | Org | Oxg | Pfy | Plb | Plc | Rcp | Rda | Rdd | Rdn | Rdo | Rds | Rls | Rpa | Rpg | Rsg | Rsu | Rte | Rwy | Sae | Sah | Ser | Shp | Sia | Sid | Sip | Sns | Sny | Spa | Spd | Srs | Ssd | Sse | Ssr | Sue | Swy | Tcn | Tcp | Tfr | Thp | Tla | Tlg | Tli | Tls | Tly | Tsa | Tsg | Twy | Uac | Uas | Uni | Vli | Vor | Lbm | Aac | Dln | Nln | Tln | Vln)+
        /// </para>
        /// </summary>
        public virtual IList<AirspaceObstacleType> Oae {
            get {
                if ((this.OaeField == null)) {
                    this.OaeField = new XTypedList<AirspaceObstacleType>(this, LinqToXsdTypeManager.Instance, OaeXName);
                }
                return this.OaeField;
            }
            set {
                if ((value == null)) {
                    this.OaeField = null;
                }
                else {
                    if ((this.OaeField == null)) {
                        this.OaeField = XTypedList<AirspaceObstacleType>.Initialize(this, LinqToXsdTypeManager.Instance, value, OaeXName);
                    }
                    else {
                        XTypedServices.SetList<AirspaceObstacleType>(this.OaeField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (Aas | Abd | Acr | Adg | Aga | Agl | Aha | Ahc | Aho | Ahp | Ahs | Ahu | Ain | Als | Ana | Apg | Apn | Ase | Din | Dli | Dme | Dpn | Fao | Fto | Fcp | Fda | Fdd | Fdn | Fdo | Fds | Fls | Fpa | Fpg | Fqy | Ful | Gbr | Gsd | Hpe | Iap | Ils | Iue | Mgp | Mkr | Mls | Ndb | Nli | Nsc | Ntg | Oaa | Oae | Oas | Ogr | Obs | Ofa | Oil | Org | Oxg | Pfy | Plb | Plc | Rcp | Rda | Rdd | Rdn | Rdo | Rds | Rls | Rpa | Rpg | Rsg | Rsu | Rte | Rwy | Sae | Sah | Ser | Shp | Sia | Sid | Sip | Sns | Sny | Spa | Spd | Srs | Ssd | Sse | Ssr | Sue | Swy | Tcn | Tcp | Tfr | Thp | Tla | Tlg | Tli | Tls | Tly | Tsa | Tsg | Twy | Uac | Uas | Uni | Vli | Vor | Lbm | Aac | Dln | Nln | Tln | Vln)+
        /// </para>
        /// </summary>
        public virtual IList<OrganisationAuthorityAssociationType> Oas {
            get {
                if ((this.OasField == null)) {
                    this.OasField = new XTypedList<OrganisationAuthorityAssociationType>(this, LinqToXsdTypeManager.Instance, OasXName);
                }
                return this.OasField;
            }
            set {
                if ((value == null)) {
                    this.OasField = null;
                }
                else {
                    if ((this.OasField == null)) {
                        this.OasField = XTypedList<OrganisationAuthorityAssociationType>.Initialize(this, LinqToXsdTypeManager.Instance, value, OasXName);
                    }
                    else {
                        XTypedServices.SetList<OrganisationAuthorityAssociationType>(this.OasField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (Aas | Abd | Acr | Adg | Aga | Agl | Aha | Ahc | Aho | Ahp | Ahs | Ahu | Ain | Als | Ana | Apg | Apn | Ase | Din | Dli | Dme | Dpn | Fao | Fto | Fcp | Fda | Fdd | Fdn | Fdo | Fds | Fls | Fpa | Fpg | Fqy | Ful | Gbr | Gsd | Hpe | Iap | Ils | Iue | Mgp | Mkr | Mls | Ndb | Nli | Nsc | Ntg | Oaa | Oae | Oas | Ogr | Obs | Ofa | Oil | Org | Oxg | Pfy | Plb | Plc | Rcp | Rda | Rdd | Rdn | Rdo | Rds | Rls | Rpa | Rpg | Rsg | Rsu | Rte | Rwy | Sae | Sah | Ser | Shp | Sia | Sid | Sip | Sns | Sny | Spa | Spd | Srs | Ssd | Sse | Ssr | Sue | Swy | Tcn | Tcp | Tfr | Thp | Tla | Tlg | Tli | Tls | Tly | Tsa | Tsg | Twy | Uac | Uas | Uni | Vli | Vor | Lbm | Aac | Dln | Nln | Tln | Vln)+
        /// </para>
        /// </summary>
        public virtual IList<ObstacleGroupType> Ogr {
            get {
                if ((this.OgrField == null)) {
                    this.OgrField = new XTypedList<ObstacleGroupType>(this, LinqToXsdTypeManager.Instance, OgrXName);
                }
                return this.OgrField;
            }
            set {
                if ((value == null)) {
                    this.OgrField = null;
                }
                else {
                    if ((this.OgrField == null)) {
                        this.OgrField = XTypedList<ObstacleGroupType>.Initialize(this, LinqToXsdTypeManager.Instance, value, OgrXName);
                    }
                    else {
                        XTypedServices.SetList<ObstacleGroupType>(this.OgrField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (Aas | Abd | Acr | Adg | Aga | Agl | Aha | Ahc | Aho | Ahp | Ahs | Ahu | Ain | Als | Ana | Apg | Apn | Ase | Din | Dli | Dme | Dpn | Fao | Fto | Fcp | Fda | Fdd | Fdn | Fdo | Fds | Fls | Fpa | Fpg | Fqy | Ful | Gbr | Gsd | Hpe | Iap | Ils | Iue | Mgp | Mkr | Mls | Ndb | Nli | Nsc | Ntg | Oaa | Oae | Oas | Ogr | Obs | Ofa | Oil | Org | Oxg | Pfy | Plb | Plc | Rcp | Rda | Rdd | Rdn | Rdo | Rds | Rls | Rpa | Rpg | Rsg | Rsu | Rte | Rwy | Sae | Sah | Ser | Shp | Sia | Sid | Sip | Sns | Sny | Spa | Spd | Srs | Ssd | Sse | Ssr | Sue | Swy | Tcn | Tcp | Tfr | Thp | Tla | Tlg | Tli | Tls | Tly | Tsa | Tsg | Twy | Uac | Uas | Uni | Vli | Vor | Lbm | Aac | Dln | Nln | Tln | Vln)+
        /// </para>
        /// </summary>
        public virtual IList<ObstacleType> Obs {
            get {
                if ((this.ObsField == null)) {
                    this.ObsField = new XTypedList<ObstacleType>(this, LinqToXsdTypeManager.Instance, ObsXName);
                }
                return this.ObsField;
            }
            set {
                if ((value == null)) {
                    this.ObsField = null;
                }
                else {
                    if ((this.ObsField == null)) {
                        this.ObsField = XTypedList<ObstacleType>.Initialize(this, LinqToXsdTypeManager.Instance, value, ObsXName);
                    }
                    else {
                        XTypedServices.SetList<ObstacleType>(this.ObsField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (Aas | Abd | Acr | Adg | Aga | Agl | Aha | Ahc | Aho | Ahp | Ahs | Ahu | Ain | Als | Ana | Apg | Apn | Ase | Din | Dli | Dme | Dpn | Fao | Fto | Fcp | Fda | Fdd | Fdn | Fdo | Fds | Fls | Fpa | Fpg | Fqy | Ful | Gbr | Gsd | Hpe | Iap | Ils | Iue | Mgp | Mkr | Mls | Ndb | Nli | Nsc | Ntg | Oaa | Oae | Oas | Ogr | Obs | Ofa | Oil | Org | Oxg | Pfy | Plb | Plc | Rcp | Rda | Rdd | Rdn | Rdo | Rds | Rls | Rpa | Rpg | Rsg | Rsu | Rte | Rwy | Sae | Sah | Ser | Shp | Sia | Sid | Sip | Sns | Sny | Spa | Spd | Srs | Ssd | Sse | Ssr | Sue | Swy | Tcn | Tcp | Tfr | Thp | Tla | Tlg | Tli | Tls | Tly | Tsa | Tsg | Twy | Uac | Uas | Uni | Vli | Vor | Lbm | Aac | Dln | Nln | Tln | Vln)+
        /// </para>
        /// </summary>
        public virtual IList<AirspaceAuthorityType> Ofa {
            get {
                if ((this.OfaField == null)) {
                    this.OfaField = new XTypedList<AirspaceAuthorityType>(this, LinqToXsdTypeManager.Instance, OfaXName);
                }
                return this.OfaField;
            }
            set {
                if ((value == null)) {
                    this.OfaField = null;
                }
                else {
                    if ((this.OfaField == null)) {
                        this.OfaField = XTypedList<AirspaceAuthorityType>.Initialize(this, LinqToXsdTypeManager.Instance, value, OfaXName);
                    }
                    else {
                        XTypedServices.SetList<AirspaceAuthorityType>(this.OfaField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (Aas | Abd | Acr | Adg | Aga | Agl | Aha | Ahc | Aho | Ahp | Ahs | Ahu | Ain | Als | Ana | Apg | Apn | Ase | Din | Dli | Dme | Dpn | Fao | Fto | Fcp | Fda | Fdd | Fdn | Fdo | Fds | Fls | Fpa | Fpg | Fqy | Ful | Gbr | Gsd | Hpe | Iap | Ils | Iue | Mgp | Mkr | Mls | Ndb | Nli | Nsc | Ntg | Oaa | Oae | Oas | Ogr | Obs | Ofa | Oil | Org | Oxg | Pfy | Plb | Plc | Rcp | Rda | Rdd | Rdn | Rdo | Rds | Rls | Rpa | Rpg | Rsg | Rsu | Rte | Rwy | Sae | Sah | Ser | Shp | Sia | Sid | Sip | Sns | Sny | Spa | Spd | Srs | Ssd | Sse | Ssr | Sue | Swy | Tcn | Tcp | Tfr | Thp | Tla | Tlg | Tli | Tls | Tly | Tsa | Tsg | Twy | Uac | Uas | Uni | Vli | Vor | Lbm | Aac | Dln | Nln | Tln | Vln)+
        /// </para>
        /// </summary>
        public virtual IList<OilType> Oil {
            get {
                if ((this.OilField == null)) {
                    this.OilField = new XTypedList<OilType>(this, LinqToXsdTypeManager.Instance, OilXName);
                }
                return this.OilField;
            }
            set {
                if ((value == null)) {
                    this.OilField = null;
                }
                else {
                    if ((this.OilField == null)) {
                        this.OilField = XTypedList<OilType>.Initialize(this, LinqToXsdTypeManager.Instance, value, OilXName);
                    }
                    else {
                        XTypedServices.SetList<OilType>(this.OilField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (Aas | Abd | Acr | Adg | Aga | Agl | Aha | Ahc | Aho | Ahp | Ahs | Ahu | Ain | Als | Ana | Apg | Apn | Ase | Din | Dli | Dme | Dpn | Fao | Fto | Fcp | Fda | Fdd | Fdn | Fdo | Fds | Fls | Fpa | Fpg | Fqy | Ful | Gbr | Gsd | Hpe | Iap | Ils | Iue | Mgp | Mkr | Mls | Ndb | Nli | Nsc | Ntg | Oaa | Oae | Oas | Ogr | Obs | Ofa | Oil | Org | Oxg | Pfy | Plb | Plc | Rcp | Rda | Rdd | Rdn | Rdo | Rds | Rls | Rpa | Rpg | Rsg | Rsu | Rte | Rwy | Sae | Sah | Ser | Shp | Sia | Sid | Sip | Sns | Sny | Spa | Spd | Srs | Ssd | Sse | Ssr | Sue | Swy | Tcn | Tcp | Tfr | Thp | Tla | Tlg | Tli | Tls | Tly | Tsa | Tsg | Twy | Uac | Uas | Uni | Vli | Vor | Lbm | Aac | Dln | Nln | Tln | Vln)+
        /// </para>
        /// </summary>
        public virtual IList<OrganisationAuthorityType> Org {
            get {
                if ((this.OrgField == null)) {
                    this.OrgField = new XTypedList<OrganisationAuthorityType>(this, LinqToXsdTypeManager.Instance, OrgXName);
                }
                return this.OrgField;
            }
            set {
                if ((value == null)) {
                    this.OrgField = null;
                }
                else {
                    if ((this.OrgField == null)) {
                        this.OrgField = XTypedList<OrganisationAuthorityType>.Initialize(this, LinqToXsdTypeManager.Instance, value, OrgXName);
                    }
                    else {
                        XTypedServices.SetList<OrganisationAuthorityType>(this.OrgField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (Aas | Abd | Acr | Adg | Aga | Agl | Aha | Ahc | Aho | Ahp | Ahs | Ahu | Ain | Als | Ana | Apg | Apn | Ase | Din | Dli | Dme | Dpn | Fao | Fto | Fcp | Fda | Fdd | Fdn | Fdo | Fds | Fls | Fpa | Fpg | Fqy | Ful | Gbr | Gsd | Hpe | Iap | Ils | Iue | Mgp | Mkr | Mls | Ndb | Nli | Nsc | Ntg | Oaa | Oae | Oas | Ogr | Obs | Ofa | Oil | Org | Oxg | Pfy | Plb | Plc | Rcp | Rda | Rdd | Rdn | Rdo | Rds | Rls | Rpa | Rpg | Rsg | Rsu | Rte | Rwy | Sae | Sah | Ser | Shp | Sia | Sid | Sip | Sns | Sny | Spa | Spd | Srs | Ssd | Sse | Ssr | Sue | Swy | Tcn | Tcp | Tfr | Thp | Tla | Tlg | Tli | Tls | Tly | Tsa | Tsg | Twy | Uac | Uas | Uni | Vli | Vor | Lbm | Aac | Dln | Nln | Tln | Vln)+
        /// </para>
        /// </summary>
        public virtual IList<OxygenType> Oxg {
            get {
                if ((this.OxgField == null)) {
                    this.OxgField = new XTypedList<OxygenType>(this, LinqToXsdTypeManager.Instance, OxgXName);
                }
                return this.OxgField;
            }
            set {
                if ((value == null)) {
                    this.OxgField = null;
                }
                else {
                    if ((this.OxgField == null)) {
                        this.OxgField = XTypedList<OxygenType>.Initialize(this, LinqToXsdTypeManager.Instance, value, OxgXName);
                    }
                    else {
                        XTypedServices.SetList<OxygenType>(this.OxgField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (Aas | Abd | Acr | Adg | Aga | Agl | Aha | Ahc | Aho | Ahp | Ahs | Ahu | Ain | Als | Ana | Apg | Apn | Ase | Din | Dli | Dme | Dpn | Fao | Fto | Fcp | Fda | Fdd | Fdn | Fdo | Fds | Fls | Fpa | Fpg | Fqy | Ful | Gbr | Gsd | Hpe | Iap | Ils | Iue | Mgp | Mkr | Mls | Ndb | Nli | Nsc | Ntg | Oaa | Oae | Oas | Ogr | Obs | Ofa | Oil | Org | Oxg | Pfy | Plb | Plc | Rcp | Rda | Rdd | Rdn | Rdo | Rds | Rls | Rpa | Rpg | Rsg | Rsu | Rte | Rwy | Sae | Sah | Ser | Shp | Sia | Sid | Sip | Sns | Sny | Spa | Spd | Srs | Ssd | Sse | Ssr | Sue | Swy | Tcn | Tcp | Tfr | Thp | Tla | Tlg | Tli | Tls | Tly | Tsa | Tsg | Twy | Uac | Uas | Uni | Vli | Vor | Lbm | Aac | Dln | Nln | Tln | Vln)+
        /// </para>
        /// </summary>
        public virtual IList<PassengerFacilityType> Pfy {
            get {
                if ((this.PfyField == null)) {
                    this.PfyField = new XTypedList<PassengerFacilityType>(this, LinqToXsdTypeManager.Instance, PfyXName);
                }
                return this.PfyField;
            }
            set {
                if ((value == null)) {
                    this.PfyField = null;
                }
                else {
                    if ((this.PfyField == null)) {
                        this.PfyField = XTypedList<PassengerFacilityType>.Initialize(this, LinqToXsdTypeManager.Instance, value, PfyXName);
                    }
                    else {
                        XTypedServices.SetList<PassengerFacilityType>(this.PfyField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (Aas | Abd | Acr | Adg | Aga | Agl | Aha | Ahc | Aho | Ahp | Ahs | Ahu | Ain | Als | Ana | Apg | Apn | Ase | Din | Dli | Dme | Dpn | Fao | Fto | Fcp | Fda | Fdd | Fdn | Fdo | Fds | Fls | Fpa | Fpg | Fqy | Ful | Gbr | Gsd | Hpe | Iap | Ils | Iue | Mgp | Mkr | Mls | Ndb | Nli | Nsc | Ntg | Oaa | Oae | Oas | Ogr | Obs | Ofa | Oil | Org | Oxg | Pfy | Plb | Plc | Rcp | Rda | Rdd | Rdn | Rdo | Rds | Rls | Rpa | Rpg | Rsg | Rsu | Rte | Rwy | Sae | Sah | Ser | Shp | Sia | Sid | Sip | Sns | Sny | Spa | Spd | Srs | Ssd | Sse | Ssr | Sue | Swy | Tcn | Tcp | Tfr | Thp | Tla | Tlg | Tli | Tls | Tly | Tsa | Tsg | Twy | Uac | Uas | Uni | Vli | Vor | Lbm | Aac | Dln | Nln | Tln | Vln)+
        /// </para>
        /// </summary>
        public virtual IList<CruisingLevelsTableType> Plb {
            get {
                if ((this.PlbField == null)) {
                    this.PlbField = new XTypedList<CruisingLevelsTableType>(this, LinqToXsdTypeManager.Instance, PlbXName);
                }
                return this.PlbField;
            }
            set {
                if ((value == null)) {
                    this.PlbField = null;
                }
                else {
                    if ((this.PlbField == null)) {
                        this.PlbField = XTypedList<CruisingLevelsTableType>.Initialize(this, LinqToXsdTypeManager.Instance, value, PlbXName);
                    }
                    else {
                        XTypedServices.SetList<CruisingLevelsTableType>(this.PlbField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (Aas | Abd | Acr | Adg | Aga | Agl | Aha | Ahc | Aho | Ahp | Ahs | Ahu | Ain | Als | Ana | Apg | Apn | Ase | Din | Dli | Dme | Dpn | Fao | Fto | Fcp | Fda | Fdd | Fdn | Fdo | Fds | Fls | Fpa | Fpg | Fqy | Ful | Gbr | Gsd | Hpe | Iap | Ils | Iue | Mgp | Mkr | Mls | Ndb | Nli | Nsc | Ntg | Oaa | Oae | Oas | Ogr | Obs | Ofa | Oil | Org | Oxg | Pfy | Plb | Plc | Rcp | Rda | Rdd | Rdn | Rdo | Rds | Rls | Rpa | Rpg | Rsg | Rsu | Rte | Rwy | Sae | Sah | Ser | Shp | Sia | Sid | Sip | Sns | Sny | Spa | Spd | Srs | Ssd | Sse | Ssr | Sue | Swy | Tcn | Tcp | Tfr | Thp | Tla | Tlg | Tli | Tls | Tly | Tsa | Tsg | Twy | Uac | Uas | Uni | Vli | Vor | Lbm | Aac | Dln | Nln | Tln | Vln)+
        /// </para>
        /// </summary>
        public virtual IList<CruisingLevelsColumnType> Plc {
            get {
                if ((this.PlcField == null)) {
                    this.PlcField = new XTypedList<CruisingLevelsColumnType>(this, LinqToXsdTypeManager.Instance, PlcXName);
                }
                return this.PlcField;
            }
            set {
                if ((value == null)) {
                    this.PlcField = null;
                }
                else {
                    if ((this.PlcField == null)) {
                        this.PlcField = XTypedList<CruisingLevelsColumnType>.Initialize(this, LinqToXsdTypeManager.Instance, value, PlcXName);
                    }
                    else {
                        XTypedServices.SetList<CruisingLevelsColumnType>(this.PlcField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (Aas | Abd | Acr | Adg | Aga | Agl | Aha | Ahc | Aho | Ahp | Ahs | Ahu | Ain | Als | Ana | Apg | Apn | Ase | Din | Dli | Dme | Dpn | Fao | Fto | Fcp | Fda | Fdd | Fdn | Fdo | Fds | Fls | Fpa | Fpg | Fqy | Ful | Gbr | Gsd | Hpe | Iap | Ils | Iue | Mgp | Mkr | Mls | Ndb | Nli | Nsc | Ntg | Oaa | Oae | Oas | Ogr | Obs | Ofa | Oil | Org | Oxg | Pfy | Plb | Plc | Rcp | Rda | Rdd | Rdn | Rdo | Rds | Rls | Rpa | Rpg | Rsg | Rsu | Rte | Rwy | Sae | Sah | Ser | Shp | Sia | Sid | Sip | Sns | Sny | Spa | Spd | Srs | Ssd | Sse | Ssr | Sue | Swy | Tcn | Tcp | Tfr | Thp | Tla | Tlg | Tli | Tls | Tly | Tsa | Tsg | Twy | Uac | Uas | Uni | Vli | Vor | Lbm | Aac | Dln | Nln | Tln | Vln)+
        /// </para>
        /// </summary>
        public virtual IList<RunwayCentreLinePositionType> Rcp {
            get {
                if ((this.RcpField == null)) {
                    this.RcpField = new XTypedList<RunwayCentreLinePositionType>(this, LinqToXsdTypeManager.Instance, RcpXName);
                }
                return this.RcpField;
            }
            set {
                if ((value == null)) {
                    this.RcpField = null;
                }
                else {
                    if ((this.RcpField == null)) {
                        this.RcpField = XTypedList<RunwayCentreLinePositionType>.Initialize(this, LinqToXsdTypeManager.Instance, value, RcpXName);
                    }
                    else {
                        XTypedServices.SetList<RunwayCentreLinePositionType>(this.RcpField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (Aas | Abd | Acr | Adg | Aga | Agl | Aha | Ahc | Aho | Ahp | Ahs | Ahu | Ain | Als | Ana | Apg | Apn | Ase | Din | Dli | Dme | Dpn | Fao | Fto | Fcp | Fda | Fdd | Fdn | Fdo | Fds | Fls | Fpa | Fpg | Fqy | Ful | Gbr | Gsd | Hpe | Iap | Ils | Iue | Mgp | Mkr | Mls | Ndb | Nli | Nsc | Ntg | Oaa | Oae | Oas | Ogr | Obs | Ofa | Oil | Org | Oxg | Pfy | Plb | Plc | Rcp | Rda | Rdd | Rdn | Rdo | Rds | Rls | Rpa | Rpg | Rsg | Rsu | Rte | Rwy | Sae | Sah | Ser | Shp | Sia | Sid | Sip | Sns | Sny | Spa | Spd | Srs | Ssd | Sse | Ssr | Sue | Swy | Tcn | Tcp | Tfr | Thp | Tla | Tlg | Tli | Tls | Tly | Tsa | Tsg | Twy | Uac | Uas | Uni | Vli | Vor | Lbm | Aac | Dln | Nln | Tln | Vln)+
        /// </para>
        /// </summary>
        public virtual IList<RunwayDirectionApproachLightingSystemType> Rda {
            get {
                if ((this.RdaField == null)) {
                    this.RdaField = new XTypedList<RunwayDirectionApproachLightingSystemType>(this, LinqToXsdTypeManager.Instance, RdaXName);
                }
                return this.RdaField;
            }
            set {
                if ((value == null)) {
                    this.RdaField = null;
                }
                else {
                    if ((this.RdaField == null)) {
                        this.RdaField = XTypedList<RunwayDirectionApproachLightingSystemType>.Initialize(this, LinqToXsdTypeManager.Instance, value, RdaXName);
                    }
                    else {
                        XTypedServices.SetList<RunwayDirectionApproachLightingSystemType>(this.RdaField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (Aas | Abd | Acr | Adg | Aga | Agl | Aha | Ahc | Aho | Ahp | Ahs | Ahu | Ain | Als | Ana | Apg | Apn | Ase | Din | Dli | Dme | Dpn | Fao | Fto | Fcp | Fda | Fdd | Fdn | Fdo | Fds | Fls | Fpa | Fpg | Fqy | Ful | Gbr | Gsd | Hpe | Iap | Ils | Iue | Mgp | Mkr | Mls | Ndb | Nli | Nsc | Ntg | Oaa | Oae | Oas | Ogr | Obs | Ofa | Oil | Org | Oxg | Pfy | Plb | Plc | Rcp | Rda | Rdd | Rdn | Rdo | Rds | Rls | Rpa | Rpg | Rsg | Rsu | Rte | Rwy | Sae | Sah | Ser | Shp | Sia | Sid | Sip | Sns | Sny | Spa | Spd | Srs | Ssd | Sse | Ssr | Sue | Swy | Tcn | Tcp | Tfr | Thp | Tla | Tlg | Tli | Tls | Tly | Tsa | Tsg | Twy | Uac | Uas | Uni | Vli | Vor | Lbm | Aac | Dln | Nln | Tln | Vln)+
        /// </para>
        /// </summary>
        public virtual IList<RunwayDirectionDeclaredDistanceType> Rdd {
            get {
                if ((this.RddField == null)) {
                    this.RddField = new XTypedList<RunwayDirectionDeclaredDistanceType>(this, LinqToXsdTypeManager.Instance, RddXName);
                }
                return this.RddField;
            }
            set {
                if ((value == null)) {
                    this.RddField = null;
                }
                else {
                    if ((this.RddField == null)) {
                        this.RddField = XTypedList<RunwayDirectionDeclaredDistanceType>.Initialize(this, LinqToXsdTypeManager.Instance, value, RddXName);
                    }
                    else {
                        XTypedServices.SetList<RunwayDirectionDeclaredDistanceType>(this.RddField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (Aas | Abd | Acr | Adg | Aga | Agl | Aha | Ahc | Aho | Ahp | Ahs | Ahu | Ain | Als | Ana | Apg | Apn | Ase | Din | Dli | Dme | Dpn | Fao | Fto | Fcp | Fda | Fdd | Fdn | Fdo | Fds | Fls | Fpa | Fpg | Fqy | Ful | Gbr | Gsd | Hpe | Iap | Ils | Iue | Mgp | Mkr | Mls | Ndb | Nli | Nsc | Ntg | Oaa | Oae | Oas | Ogr | Obs | Ofa | Oil | Org | Oxg | Pfy | Plb | Plc | Rcp | Rda | Rdd | Rdn | Rdo | Rds | Rls | Rpa | Rpg | Rsg | Rsu | Rte | Rwy | Sae | Sah | Ser | Shp | Sia | Sid | Sip | Sns | Sny | Spa | Spd | Srs | Ssd | Sse | Ssr | Sue | Swy | Tcn | Tcp | Tfr | Thp | Tla | Tlg | Tli | Tls | Tly | Tsa | Tsg | Twy | Uac | Uas | Uni | Vli | Vor | Lbm | Aac | Dln | Nln | Tln | Vln)+
        /// </para>
        /// </summary>
        public virtual IList<RunwayDirectionType> Rdn {
            get {
                if ((this.RdnField == null)) {
                    this.RdnField = new XTypedList<RunwayDirectionType>(this, LinqToXsdTypeManager.Instance, RdnXName);
                }
                return this.RdnField;
            }
            set {
                if ((value == null)) {
                    this.RdnField = null;
                }
                else {
                    if ((this.RdnField == null)) {
                        this.RdnField = XTypedList<RunwayDirectionType>.Initialize(this, LinqToXsdTypeManager.Instance, value, RdnXName);
                    }
                    else {
                        XTypedServices.SetList<RunwayDirectionType>(this.RdnField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (Aas | Abd | Acr | Adg | Aga | Agl | Aha | Ahc | Aho | Ahp | Ahs | Ahu | Ain | Als | Ana | Apg | Apn | Ase | Din | Dli | Dme | Dpn | Fao | Fto | Fcp | Fda | Fdd | Fdn | Fdo | Fds | Fls | Fpa | Fpg | Fqy | Ful | Gbr | Gsd | Hpe | Iap | Ils | Iue | Mgp | Mkr | Mls | Ndb | Nli | Nsc | Ntg | Oaa | Oae | Oas | Ogr | Obs | Ofa | Oil | Org | Oxg | Pfy | Plb | Plc | Rcp | Rda | Rdd | Rdn | Rdo | Rds | Rls | Rpa | Rpg | Rsg | Rsu | Rte | Rwy | Sae | Sah | Ser | Shp | Sia | Sid | Sip | Sns | Sny | Spa | Spd | Srs | Ssd | Sse | Ssr | Sue | Swy | Tcn | Tcp | Tfr | Thp | Tla | Tlg | Tli | Tls | Tly | Tsa | Tsg | Twy | Uac | Uas | Uni | Vli | Vor | Lbm | Aac | Dln | Nln | Tln | Vln)+
        /// </para>
        /// </summary>
        public virtual IList<RunwayDirectionObstacleType> Rdo {
            get {
                if ((this.RdoField == null)) {
                    this.RdoField = new XTypedList<RunwayDirectionObstacleType>(this, LinqToXsdTypeManager.Instance, RdoXName);
                }
                return this.RdoField;
            }
            set {
                if ((value == null)) {
                    this.RdoField = null;
                }
                else {
                    if ((this.RdoField == null)) {
                        this.RdoField = XTypedList<RunwayDirectionObstacleType>.Initialize(this, LinqToXsdTypeManager.Instance, value, RdoXName);
                    }
                    else {
                        XTypedServices.SetList<RunwayDirectionObstacleType>(this.RdoField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (Aas | Abd | Acr | Adg | Aga | Agl | Aha | Ahc | Aho | Ahp | Ahs | Ahu | Ain | Als | Ana | Apg | Apn | Ase | Din | Dli | Dme | Dpn | Fao | Fto | Fcp | Fda | Fdd | Fdn | Fdo | Fds | Fls | Fpa | Fpg | Fqy | Ful | Gbr | Gsd | Hpe | Iap | Ils | Iue | Mgp | Mkr | Mls | Ndb | Nli | Nsc | Ntg | Oaa | Oae | Oas | Ogr | Obs | Ofa | Oil | Org | Oxg | Pfy | Plb | Plc | Rcp | Rda | Rdd | Rdn | Rdo | Rds | Rls | Rpa | Rpg | Rsg | Rsu | Rte | Rwy | Sae | Sah | Ser | Shp | Sia | Sid | Sip | Sns | Sny | Spa | Spd | Srs | Ssd | Sse | Ssr | Sue | Swy | Tcn | Tcp | Tfr | Thp | Tla | Tlg | Tli | Tls | Tly | Tsa | Tsg | Twy | Uac | Uas | Uni | Vli | Vor | Lbm | Aac | Dln | Nln | Tln | Vln)+
        /// </para>
        /// </summary>
        public virtual IList<RunwayDirectionStarType> Rds {
            get {
                if ((this.RdsField == null)) {
                    this.RdsField = new XTypedList<RunwayDirectionStarType>(this, LinqToXsdTypeManager.Instance, RdsXName);
                }
                return this.RdsField;
            }
            set {
                if ((value == null)) {
                    this.RdsField = null;
                }
                else {
                    if ((this.RdsField == null)) {
                        this.RdsField = XTypedList<RunwayDirectionStarType>.Initialize(this, LinqToXsdTypeManager.Instance, value, RdsXName);
                    }
                    else {
                        XTypedServices.SetList<RunwayDirectionStarType>(this.RdsField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (Aas | Abd | Acr | Adg | Aga | Agl | Aha | Ahc | Aho | Ahp | Ahs | Ahu | Ain | Als | Ana | Apg | Apn | Ase | Din | Dli | Dme | Dpn | Fao | Fto | Fcp | Fda | Fdd | Fdn | Fdo | Fds | Fls | Fpa | Fpg | Fqy | Ful | Gbr | Gsd | Hpe | Iap | Ils | Iue | Mgp | Mkr | Mls | Ndb | Nli | Nsc | Ntg | Oaa | Oae | Oas | Ogr | Obs | Ofa | Oil | Org | Oxg | Pfy | Plb | Plc | Rcp | Rda | Rdd | Rdn | Rdo | Rds | Rls | Rpa | Rpg | Rsg | Rsu | Rte | Rwy | Sae | Sah | Ser | Shp | Sia | Sid | Sip | Sns | Sny | Spa | Spd | Srs | Ssd | Sse | Ssr | Sue | Swy | Tcn | Tcp | Tfr | Thp | Tla | Tlg | Tli | Tls | Tly | Tsa | Tsg | Twy | Uac | Uas | Uni | Vli | Vor | Lbm | Aac | Dln | Nln | Tln | Vln)+
        /// </para>
        /// </summary>
        public virtual IList<RunwayDirectionLightingSystemType> Rls {
            get {
                if ((this.RlsField == null)) {
                    this.RlsField = new XTypedList<RunwayDirectionLightingSystemType>(this, LinqToXsdTypeManager.Instance, RlsXName);
                }
                return this.RlsField;
            }
            set {
                if ((value == null)) {
                    this.RlsField = null;
                }
                else {
                    if ((this.RlsField == null)) {
                        this.RlsField = XTypedList<RunwayDirectionLightingSystemType>.Initialize(this, LinqToXsdTypeManager.Instance, value, RlsXName);
                    }
                    else {
                        XTypedServices.SetList<RunwayDirectionLightingSystemType>(this.RlsField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (Aas | Abd | Acr | Adg | Aga | Agl | Aha | Ahc | Aho | Ahp | Ahs | Ahu | Ain | Als | Ana | Apg | Apn | Ase | Din | Dli | Dme | Dpn | Fao | Fto | Fcp | Fda | Fdd | Fdn | Fdo | Fds | Fls | Fpa | Fpg | Fqy | Ful | Gbr | Gsd | Hpe | Iap | Ils | Iue | Mgp | Mkr | Mls | Ndb | Nli | Nsc | Ntg | Oaa | Oae | Oas | Ogr | Obs | Ofa | Oil | Org | Oxg | Pfy | Plb | Plc | Rcp | Rda | Rdd | Rdn | Rdo | Rds | Rls | Rpa | Rpg | Rsg | Rsu | Rte | Rwy | Sae | Sah | Ser | Shp | Sia | Sid | Sip | Sns | Sny | Spa | Spd | Srs | Ssd | Sse | Ssr | Sue | Swy | Tcn | Tcp | Tfr | Thp | Tla | Tlg | Tli | Tls | Tly | Tsa | Tsg | Twy | Uac | Uas | Uni | Vli | Vor | Lbm | Aac | Dln | Nln | Tln | Vln)+
        /// </para>
        /// </summary>
        public virtual IList<RunwayProtectionAreaType> Rpa {
            get {
                if ((this.RpaField == null)) {
                    this.RpaField = new XTypedList<RunwayProtectionAreaType>(this, LinqToXsdTypeManager.Instance, RpaXName);
                }
                return this.RpaField;
            }
            set {
                if ((value == null)) {
                    this.RpaField = null;
                }
                else {
                    if ((this.RpaField == null)) {
                        this.RpaField = XTypedList<RunwayProtectionAreaType>.Initialize(this, LinqToXsdTypeManager.Instance, value, RpaXName);
                    }
                    else {
                        XTypedServices.SetList<RunwayProtectionAreaType>(this.RpaField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (Aas | Abd | Acr | Adg | Aga | Agl | Aha | Ahc | Aho | Ahp | Ahs | Ahu | Ain | Als | Ana | Apg | Apn | Ase | Din | Dli | Dme | Dpn | Fao | Fto | Fcp | Fda | Fdd | Fdn | Fdo | Fds | Fls | Fpa | Fpg | Fqy | Ful | Gbr | Gsd | Hpe | Iap | Ils | Iue | Mgp | Mkr | Mls | Ndb | Nli | Nsc | Ntg | Oaa | Oae | Oas | Ogr | Obs | Ofa | Oil | Org | Oxg | Pfy | Plb | Plc | Rcp | Rda | Rdd | Rdn | Rdo | Rds | Rls | Rpa | Rpg | Rsg | Rsu | Rte | Rwy | Sae | Sah | Ser | Shp | Sia | Sid | Sip | Sns | Sny | Spa | Spd | Srs | Ssd | Sse | Ssr | Sue | Swy | Tcn | Tcp | Tfr | Thp | Tla | Tlg | Tli | Tls | Tly | Tsa | Tsg | Twy | Uac | Uas | Uni | Vli | Vor | Lbm | Aac | Dln | Nln | Tln | Vln)+
        /// </para>
        /// </summary>
        public virtual IList<RunwayProtectionAreaGeometryType> Rpg {
            get {
                if ((this.RpgField == null)) {
                    this.RpgField = new XTypedList<RunwayProtectionAreaGeometryType>(this, LinqToXsdTypeManager.Instance, RpgXName);
                }
                return this.RpgField;
            }
            set {
                if ((value == null)) {
                    this.RpgField = null;
                }
                else {
                    if ((this.RpgField == null)) {
                        this.RpgField = XTypedList<RunwayProtectionAreaGeometryType>.Initialize(this, LinqToXsdTypeManager.Instance, value, RpgXName);
                    }
                    else {
                        XTypedServices.SetList<RunwayProtectionAreaGeometryType>(this.RpgField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (Aas | Abd | Acr | Adg | Aga | Agl | Aha | Ahc | Aho | Ahp | Ahs | Ahu | Ain | Als | Ana | Apg | Apn | Ase | Din | Dli | Dme | Dpn | Fao | Fto | Fcp | Fda | Fdd | Fdn | Fdo | Fds | Fls | Fpa | Fpg | Fqy | Ful | Gbr | Gsd | Hpe | Iap | Ils | Iue | Mgp | Mkr | Mls | Ndb | Nli | Nsc | Ntg | Oaa | Oae | Oas | Ogr | Obs | Ofa | Oil | Org | Oxg | Pfy | Plb | Plc | Rcp | Rda | Rdd | Rdn | Rdo | Rds | Rls | Rpa | Rpg | Rsg | Rsu | Rte | Rwy | Sae | Sah | Ser | Shp | Sia | Sid | Sip | Sns | Sny | Spa | Spd | Srs | Ssd | Sse | Ssr | Sue | Swy | Tcn | Tcp | Tfr | Thp | Tla | Tlg | Tli | Tls | Tly | Tsa | Tsg | Twy | Uac | Uas | Uni | Vli | Vor | Lbm | Aac | Dln | Nln | Tln | Vln)+
        /// </para>
        /// </summary>
        public virtual IList<RouteSegmentType> Rsg {
            get {
                if ((this.RsgField == null)) {
                    this.RsgField = new XTypedList<RouteSegmentType>(this, LinqToXsdTypeManager.Instance, RsgXName);
                }
                return this.RsgField;
            }
            set {
                if ((value == null)) {
                    this.RsgField = null;
                }
                else {
                    if ((this.RsgField == null)) {
                        this.RsgField = XTypedList<RouteSegmentType>.Initialize(this, LinqToXsdTypeManager.Instance, value, RsgXName);
                    }
                    else {
                        XTypedServices.SetList<RouteSegmentType>(this.RsgField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (Aas | Abd | Acr | Adg | Aga | Agl | Aha | Ahc | Aho | Ahp | Ahs | Ahu | Ain | Als | Ana | Apg | Apn | Ase | Din | Dli | Dme | Dpn | Fao | Fto | Fcp | Fda | Fdd | Fdn | Fdo | Fds | Fls | Fpa | Fpg | Fqy | Ful | Gbr | Gsd | Hpe | Iap | Ils | Iue | Mgp | Mkr | Mls | Ndb | Nli | Nsc | Ntg | Oaa | Oae | Oas | Ogr | Obs | Ofa | Oil | Org | Oxg | Pfy | Plb | Plc | Rcp | Rda | Rdd | Rdn | Rdo | Rds | Rls | Rpa | Rpg | Rsg | Rsu | Rte | Rwy | Sae | Sah | Ser | Shp | Sia | Sid | Sip | Sns | Sny | Spa | Spd | Srs | Ssd | Sse | Ssr | Sue | Swy | Tcn | Tcp | Tfr | Thp | Tla | Tlg | Tli | Tls | Tly | Tsa | Tsg | Twy | Uac | Uas | Uni | Vli | Vor | Lbm | Aac | Dln | Nln | Tln | Vln)+
        /// </para>
        /// </summary>
        public virtual IList<RouteSegmentUsageType> Rsu {
            get {
                if ((this.RsuField == null)) {
                    this.RsuField = new XTypedList<RouteSegmentUsageType>(this, LinqToXsdTypeManager.Instance, RsuXName);
                }
                return this.RsuField;
            }
            set {
                if ((value == null)) {
                    this.RsuField = null;
                }
                else {
                    if ((this.RsuField == null)) {
                        this.RsuField = XTypedList<RouteSegmentUsageType>.Initialize(this, LinqToXsdTypeManager.Instance, value, RsuXName);
                    }
                    else {
                        XTypedServices.SetList<RouteSegmentUsageType>(this.RsuField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (Aas | Abd | Acr | Adg | Aga | Agl | Aha | Ahc | Aho | Ahp | Ahs | Ahu | Ain | Als | Ana | Apg | Apn | Ase | Din | Dli | Dme | Dpn | Fao | Fto | Fcp | Fda | Fdd | Fdn | Fdo | Fds | Fls | Fpa | Fpg | Fqy | Ful | Gbr | Gsd | Hpe | Iap | Ils | Iue | Mgp | Mkr | Mls | Ndb | Nli | Nsc | Ntg | Oaa | Oae | Oas | Ogr | Obs | Ofa | Oil | Org | Oxg | Pfy | Plb | Plc | Rcp | Rda | Rdd | Rdn | Rdo | Rds | Rls | Rpa | Rpg | Rsg | Rsu | Rte | Rwy | Sae | Sah | Ser | Shp | Sia | Sid | Sip | Sns | Sny | Spa | Spd | Srs | Ssd | Sse | Ssr | Sue | Swy | Tcn | Tcp | Tfr | Thp | Tla | Tlg | Tli | Tls | Tly | Tsa | Tsg | Twy | Uac | Uas | Uni | Vli | Vor | Lbm | Aac | Dln | Nln | Tln | Vln)+
        /// </para>
        /// </summary>
        public virtual IList<EnrouteRouteType> Rte {
            get {
                if ((this.RteField == null)) {
                    this.RteField = new XTypedList<EnrouteRouteType>(this, LinqToXsdTypeManager.Instance, RteXName);
                }
                return this.RteField;
            }
            set {
                if ((value == null)) {
                    this.RteField = null;
                }
                else {
                    if ((this.RteField == null)) {
                        this.RteField = XTypedList<EnrouteRouteType>.Initialize(this, LinqToXsdTypeManager.Instance, value, RteXName);
                    }
                    else {
                        XTypedServices.SetList<EnrouteRouteType>(this.RteField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (Aas | Abd | Acr | Adg | Aga | Agl | Aha | Ahc | Aho | Ahp | Ahs | Ahu | Ain | Als | Ana | Apg | Apn | Ase | Din | Dli | Dme | Dpn | Fao | Fto | Fcp | Fda | Fdd | Fdn | Fdo | Fds | Fls | Fpa | Fpg | Fqy | Ful | Gbr | Gsd | Hpe | Iap | Ils | Iue | Mgp | Mkr | Mls | Ndb | Nli | Nsc | Ntg | Oaa | Oae | Oas | Ogr | Obs | Ofa | Oil | Org | Oxg | Pfy | Plb | Plc | Rcp | Rda | Rdd | Rdn | Rdo | Rds | Rls | Rpa | Rpg | Rsg | Rsu | Rte | Rwy | Sae | Sah | Ser | Shp | Sia | Sid | Sip | Sns | Sny | Spa | Spd | Srs | Ssd | Sse | Ssr | Sue | Swy | Tcn | Tcp | Tfr | Thp | Tla | Tlg | Tli | Tls | Tly | Tsa | Tsg | Twy | Uac | Uas | Uni | Vli | Vor | Lbm | Aac | Dln | Nln | Tln | Vln)+
        /// </para>
        /// </summary>
        public virtual IList<RunwayType> Rwy {
            get {
                if ((this.RwyField == null)) {
                    this.RwyField = new XTypedList<RunwayType>(this, LinqToXsdTypeManager.Instance, RwyXName);
                }
                return this.RwyField;
            }
            set {
                if ((value == null)) {
                    this.RwyField = null;
                }
                else {
                    if ((this.RwyField == null)) {
                        this.RwyField = XTypedList<RunwayType>.Initialize(this, LinqToXsdTypeManager.Instance, value, RwyXName);
                    }
                    else {
                        XTypedServices.SetList<RunwayType>(this.RwyField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (Aas | Abd | Acr | Adg | Aga | Agl | Aha | Ahc | Aho | Ahp | Ahs | Ahu | Ain | Als | Ana | Apg | Apn | Ase | Din | Dli | Dme | Dpn | Fao | Fto | Fcp | Fda | Fdd | Fdn | Fdo | Fds | Fls | Fpa | Fpg | Fqy | Ful | Gbr | Gsd | Hpe | Iap | Ils | Iue | Mgp | Mkr | Mls | Ndb | Nli | Nsc | Ntg | Oaa | Oae | Oas | Ogr | Obs | Ofa | Oil | Org | Oxg | Pfy | Plb | Plc | Rcp | Rda | Rdd | Rdn | Rdo | Rds | Rls | Rpa | Rpg | Rsg | Rsu | Rte | Rwy | Sae | Sah | Ser | Shp | Sia | Sid | Sip | Sns | Sny | Spa | Spd | Srs | Ssd | Sse | Ssr | Sue | Swy | Tcn | Tcp | Tfr | Thp | Tla | Tlg | Tli | Tls | Tly | Tsa | Tsg | Twy | Uac | Uas | Uni | Vli | Vor | Lbm | Aac | Dln | Nln | Tln | Vln)+
        /// </para>
        /// </summary>
        public virtual IList<AirspaceServiceType> Sae {
            get {
                if ((this.SaeField == null)) {
                    this.SaeField = new XTypedList<AirspaceServiceType>(this, LinqToXsdTypeManager.Instance, SaeXName);
                }
                return this.SaeField;
            }
            set {
                if ((value == null)) {
                    this.SaeField = null;
                }
                else {
                    if ((this.SaeField == null)) {
                        this.SaeField = XTypedList<AirspaceServiceType>.Initialize(this, LinqToXsdTypeManager.Instance, value, SaeXName);
                    }
                    else {
                        XTypedServices.SetList<AirspaceServiceType>(this.SaeField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (Aas | Abd | Acr | Adg | Aga | Agl | Aha | Ahc | Aho | Ahp | Ahs | Ahu | Ain | Als | Ana | Apg | Apn | Ase | Din | Dli | Dme | Dpn | Fao | Fto | Fcp | Fda | Fdd | Fdn | Fdo | Fds | Fls | Fpa | Fpg | Fqy | Ful | Gbr | Gsd | Hpe | Iap | Ils | Iue | Mgp | Mkr | Mls | Ndb | Nli | Nsc | Ntg | Oaa | Oae | Oas | Ogr | Obs | Ofa | Oil | Org | Oxg | Pfy | Plb | Plc | Rcp | Rda | Rdd | Rdn | Rdo | Rds | Rls | Rpa | Rpg | Rsg | Rsu | Rte | Rwy | Sae | Sah | Ser | Shp | Sia | Sid | Sip | Sns | Sny | Spa | Spd | Srs | Ssd | Sse | Ssr | Sue | Swy | Tcn | Tcp | Tfr | Thp | Tla | Tlg | Tli | Tls | Tly | Tsa | Tsg | Twy | Uac | Uas | Uni | Vli | Vor | Lbm | Aac | Dln | Nln | Tln | Vln)+
        /// </para>
        /// </summary>
        public virtual IList<AerodromeHeliportServiceType> Sah {
            get {
                if ((this.SahField == null)) {
                    this.SahField = new XTypedList<AerodromeHeliportServiceType>(this, LinqToXsdTypeManager.Instance, SahXName);
                }
                return this.SahField;
            }
            set {
                if ((value == null)) {
                    this.SahField = null;
                }
                else {
                    if ((this.SahField == null)) {
                        this.SahField = XTypedList<AerodromeHeliportServiceType>.Initialize(this, LinqToXsdTypeManager.Instance, value, SahXName);
                    }
                    else {
                        XTypedServices.SetList<AerodromeHeliportServiceType>(this.SahField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (Aas | Abd | Acr | Adg | Aga | Agl | Aha | Ahc | Aho | Ahp | Ahs | Ahu | Ain | Als | Ana | Apg | Apn | Ase | Din | Dli | Dme | Dpn | Fao | Fto | Fcp | Fda | Fdd | Fdn | Fdo | Fds | Fls | Fpa | Fpg | Fqy | Ful | Gbr | Gsd | Hpe | Iap | Ils | Iue | Mgp | Mkr | Mls | Ndb | Nli | Nsc | Ntg | Oaa | Oae | Oas | Ogr | Obs | Ofa | Oil | Org | Oxg | Pfy | Plb | Plc | Rcp | Rda | Rdd | Rdn | Rdo | Rds | Rls | Rpa | Rpg | Rsg | Rsu | Rte | Rwy | Sae | Sah | Ser | Shp | Sia | Sid | Sip | Sns | Sny | Spa | Spd | Srs | Ssd | Sse | Ssr | Sue | Swy | Tcn | Tcp | Tfr | Thp | Tla | Tlg | Tli | Tls | Tly | Tsa | Tsg | Twy | Uac | Uas | Uni | Vli | Vor | Lbm | Aac | Dln | Nln | Tln | Vln)+
        /// </para>
        /// </summary>
        public virtual IList<ServiceType> Ser {
            get {
                if ((this.SerField == null)) {
                    this.SerField = new XTypedList<ServiceType>(this, LinqToXsdTypeManager.Instance, SerXName);
                }
                return this.SerField;
            }
            set {
                if ((value == null)) {
                    this.SerField = null;
                }
                else {
                    if ((this.SerField == null)) {
                        this.SerField = XTypedList<ServiceType>.Initialize(this, LinqToXsdTypeManager.Instance, value, SerXName);
                    }
                    else {
                        XTypedServices.SetList<ServiceType>(this.SerField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (Aas | Abd | Acr | Adg | Aga | Agl | Aha | Ahc | Aho | Ahp | Ahs | Ahu | Ain | Als | Ana | Apg | Apn | Ase | Din | Dli | Dme | Dpn | Fao | Fto | Fcp | Fda | Fdd | Fdn | Fdo | Fds | Fls | Fpa | Fpg | Fqy | Ful | Gbr | Gsd | Hpe | Iap | Ils | Iue | Mgp | Mkr | Mls | Ndb | Nli | Nsc | Ntg | Oaa | Oae | Oas | Ogr | Obs | Ofa | Oil | Org | Oxg | Pfy | Plb | Plc | Rcp | Rda | Rdd | Rdn | Rdo | Rds | Rls | Rpa | Rpg | Rsg | Rsu | Rte | Rwy | Sae | Sah | Ser | Shp | Sia | Sid | Sip | Sns | Sny | Spa | Spd | Srs | Ssd | Sse | Ssr | Sue | Swy | Tcn | Tcp | Tfr | Thp | Tla | Tlg | Tli | Tls | Tly | Tsa | Tsg | Twy | Uac | Uas | Uni | Vli | Vor | Lbm | Aac | Dln | Nln | Tln | Vln)+
        /// </para>
        /// </summary>
        public virtual IList<HoldingProcedureServiceType> Shp {
            get {
                if ((this.ShpField == null)) {
                    this.ShpField = new XTypedList<HoldingProcedureServiceType>(this, LinqToXsdTypeManager.Instance, ShpXName);
                }
                return this.ShpField;
            }
            set {
                if ((value == null)) {
                    this.ShpField = null;
                }
                else {
                    if ((this.ShpField == null)) {
                        this.ShpField = XTypedList<HoldingProcedureServiceType>.Initialize(this, LinqToXsdTypeManager.Instance, value, ShpXName);
                    }
                    else {
                        XTypedServices.SetList<HoldingProcedureServiceType>(this.ShpField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (Aas | Abd | Acr | Adg | Aga | Agl | Aha | Ahc | Aho | Ahp | Ahs | Ahu | Ain | Als | Ana | Apg | Apn | Ase | Din | Dli | Dme | Dpn | Fao | Fto | Fcp | Fda | Fdd | Fdn | Fdo | Fds | Fls | Fpa | Fpg | Fqy | Ful | Gbr | Gsd | Hpe | Iap | Ils | Iue | Mgp | Mkr | Mls | Ndb | Nli | Nsc | Ntg | Oaa | Oae | Oas | Ogr | Obs | Ofa | Oil | Org | Oxg | Pfy | Plb | Plc | Rcp | Rda | Rdd | Rdn | Rdo | Rds | Rls | Rpa | Rpg | Rsg | Rsu | Rte | Rwy | Sae | Sah | Ser | Shp | Sia | Sid | Sip | Sns | Sny | Spa | Spd | Srs | Ssd | Sse | Ssr | Sue | Swy | Tcn | Tcp | Tfr | Thp | Tla | Tlg | Tli | Tls | Tly | Tsa | Tsg | Twy | Uac | Uas | Uni | Vli | Vor | Lbm | Aac | Dln | Nln | Tln | Vln)+
        /// </para>
        /// </summary>
        public virtual IList<StarType> Sia {
            get {
                if ((this.SiaField == null)) {
                    this.SiaField = new XTypedList<StarType>(this, LinqToXsdTypeManager.Instance, SiaXName);
                }
                return this.SiaField;
            }
            set {
                if ((value == null)) {
                    this.SiaField = null;
                }
                else {
                    if ((this.SiaField == null)) {
                        this.SiaField = XTypedList<StarType>.Initialize(this, LinqToXsdTypeManager.Instance, value, SiaXName);
                    }
                    else {
                        XTypedServices.SetList<StarType>(this.SiaField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (Aas | Abd | Acr | Adg | Aga | Agl | Aha | Ahc | Aho | Ahp | Ahs | Ahu | Ain | Als | Ana | Apg | Apn | Ase | Din | Dli | Dme | Dpn | Fao | Fto | Fcp | Fda | Fdd | Fdn | Fdo | Fds | Fls | Fpa | Fpg | Fqy | Ful | Gbr | Gsd | Hpe | Iap | Ils | Iue | Mgp | Mkr | Mls | Ndb | Nli | Nsc | Ntg | Oaa | Oae | Oas | Ogr | Obs | Ofa | Oil | Org | Oxg | Pfy | Plb | Plc | Rcp | Rda | Rdd | Rdn | Rdo | Rds | Rls | Rpa | Rpg | Rsg | Rsu | Rte | Rwy | Sae | Sah | Ser | Shp | Sia | Sid | Sip | Sns | Sny | Spa | Spd | Srs | Ssd | Sse | Ssr | Sue | Swy | Tcn | Tcp | Tfr | Thp | Tla | Tlg | Tli | Tls | Tly | Tsa | Tsg | Twy | Uac | Uas | Uni | Vli | Vor | Lbm | Aac | Dln | Nln | Tln | Vln)+
        /// </para>
        /// </summary>
        public virtual IList<SidType> Sid {
            get {
                if ((this.SidField == null)) {
                    this.SidField = new XTypedList<SidType>(this, LinqToXsdTypeManager.Instance, SidXName);
                }
                return this.SidField;
            }
            set {
                if ((value == null)) {
                    this.SidField = null;
                }
                else {
                    if ((this.SidField == null)) {
                        this.SidField = XTypedList<SidType>.Initialize(this, LinqToXsdTypeManager.Instance, value, SidXName);
                    }
                    else {
                        XTypedServices.SetList<SidType>(this.SidField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (Aas | Abd | Acr | Adg | Aga | Agl | Aha | Ahc | Aho | Ahp | Ahs | Ahu | Ain | Als | Ana | Apg | Apn | Ase | Din | Dli | Dme | Dpn | Fao | Fto | Fcp | Fda | Fdd | Fdn | Fdo | Fds | Fls | Fpa | Fpg | Fqy | Ful | Gbr | Gsd | Hpe | Iap | Ils | Iue | Mgp | Mkr | Mls | Ndb | Nli | Nsc | Ntg | Oaa | Oae | Oas | Ogr | Obs | Ofa | Oil | Org | Oxg | Pfy | Plb | Plc | Rcp | Rda | Rdd | Rdn | Rdo | Rds | Rls | Rpa | Rpg | Rsg | Rsu | Rte | Rwy | Sae | Sah | Ser | Shp | Sia | Sid | Sip | Sns | Sny | Spa | Spd | Srs | Ssd | Sse | Ssr | Sue | Swy | Tcn | Tcp | Tfr | Thp | Tla | Tlg | Tli | Tls | Tly | Tsa | Tsg | Twy | Uac | Uas | Uni | Vli | Vor | Lbm | Aac | Dln | Nln | Tln | Vln)+
        /// </para>
        /// </summary>
        public virtual IList<InstrumentApproachServiceType> Sip {
            get {
                if ((this.SipField == null)) {
                    this.SipField = new XTypedList<InstrumentApproachServiceType>(this, LinqToXsdTypeManager.Instance, SipXName);
                }
                return this.SipField;
            }
            set {
                if ((value == null)) {
                    this.SipField = null;
                }
                else {
                    if ((this.SipField == null)) {
                        this.SipField = XTypedList<InstrumentApproachServiceType>.Initialize(this, LinqToXsdTypeManager.Instance, value, SipXName);
                    }
                    else {
                        XTypedServices.SetList<InstrumentApproachServiceType>(this.SipField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (Aas | Abd | Acr | Adg | Aga | Agl | Aha | Ahc | Aho | Ahp | Ahs | Ahu | Ain | Als | Ana | Apg | Apn | Ase | Din | Dli | Dme | Dpn | Fao | Fto | Fcp | Fda | Fdd | Fdn | Fdo | Fds | Fls | Fpa | Fpg | Fqy | Ful | Gbr | Gsd | Hpe | Iap | Ils | Iue | Mgp | Mkr | Mls | Ndb | Nli | Nsc | Ntg | Oaa | Oae | Oas | Ogr | Obs | Ofa | Oil | Org | Oxg | Pfy | Plb | Plc | Rcp | Rda | Rdd | Rdn | Rdo | Rds | Rls | Rpa | Rpg | Rsg | Rsu | Rte | Rwy | Sae | Sah | Ser | Shp | Sia | Sid | Sip | Sns | Sny | Spa | Spd | Srs | Ssd | Sse | Ssr | Sue | Swy | Tcn | Tcp | Tfr | Thp | Tla | Tlg | Tli | Tls | Tly | Tsa | Tsg | Twy | Uac | Uas | Uni | Vli | Vor | Lbm | Aac | Dln | Nln | Tln | Vln)+
        /// </para>
        /// </summary>
        public virtual IList<SpecialNavigationSystemStationType> Sns {
            get {
                if ((this.SnsField == null)) {
                    this.SnsField = new XTypedList<SpecialNavigationSystemStationType>(this, LinqToXsdTypeManager.Instance, SnsXName);
                }
                return this.SnsField;
            }
            set {
                if ((value == null)) {
                    this.SnsField = null;
                }
                else {
                    if ((this.SnsField == null)) {
                        this.SnsField = XTypedList<SpecialNavigationSystemStationType>.Initialize(this, LinqToXsdTypeManager.Instance, value, SnsXName);
                    }
                    else {
                        XTypedServices.SetList<SpecialNavigationSystemStationType>(this.SnsField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (Aas | Abd | Acr | Adg | Aga | Agl | Aha | Ahc | Aho | Ahp | Ahs | Ahu | Ain | Als | Ana | Apg | Apn | Ase | Din | Dli | Dme | Dpn | Fao | Fto | Fcp | Fda | Fdd | Fdn | Fdo | Fds | Fls | Fpa | Fpg | Fqy | Ful | Gbr | Gsd | Hpe | Iap | Ils | Iue | Mgp | Mkr | Mls | Ndb | Nli | Nsc | Ntg | Oaa | Oae | Oas | Ogr | Obs | Ofa | Oil | Org | Oxg | Pfy | Plb | Plc | Rcp | Rda | Rdd | Rdn | Rdo | Rds | Rls | Rpa | Rpg | Rsg | Rsu | Rte | Rwy | Sae | Sah | Ser | Shp | Sia | Sid | Sip | Sns | Sny | Spa | Spd | Srs | Ssd | Sse | Ssr | Sue | Swy | Tcn | Tcp | Tfr | Thp | Tla | Tlg | Tli | Tls | Tly | Tsa | Tsg | Twy | Uac | Uas | Uni | Vli | Vor | Lbm | Aac | Dln | Nln | Tln | Vln)+
        /// </para>
        /// </summary>
        public virtual IList<SpecialNavigationSystemType> Sny {
            get {
                if ((this.SnyField == null)) {
                    this.SnyField = new XTypedList<SpecialNavigationSystemType>(this, LinqToXsdTypeManager.Instance, SnyXName);
                }
                return this.SnyField;
            }
            set {
                if ((value == null)) {
                    this.SnyField = null;
                }
                else {
                    if ((this.SnyField == null)) {
                        this.SnyField = XTypedList<SpecialNavigationSystemType>.Initialize(this, LinqToXsdTypeManager.Instance, value, SnyXName);
                    }
                    else {
                        XTypedServices.SetList<SpecialNavigationSystemType>(this.SnyField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (Aas | Abd | Acr | Adg | Aga | Agl | Aha | Ahc | Aho | Ahp | Ahs | Ahu | Ain | Als | Ana | Apg | Apn | Ase | Din | Dli | Dme | Dpn | Fao | Fto | Fcp | Fda | Fdd | Fdn | Fdo | Fds | Fls | Fpa | Fpg | Fqy | Ful | Gbr | Gsd | Hpe | Iap | Ils | Iue | Mgp | Mkr | Mls | Ndb | Nli | Nsc | Ntg | Oaa | Oae | Oas | Ogr | Obs | Ofa | Oil | Org | Oxg | Pfy | Plb | Plc | Rcp | Rda | Rdd | Rdn | Rdo | Rds | Rls | Rpa | Rpg | Rsg | Rsu | Rte | Rwy | Sae | Sah | Ser | Shp | Sia | Sid | Sip | Sns | Sny | Spa | Spd | Srs | Ssd | Sse | Ssr | Sue | Swy | Tcn | Tcp | Tfr | Thp | Tla | Tlg | Tli | Tls | Tly | Tsa | Tsg | Twy | Uac | Uas | Uni | Vli | Vor | Lbm | Aac | Dln | Nln | Tln | Vln)+
        /// </para>
        /// </summary>
        public virtual IList<SignificantPointAirspaceType> Spa {
            get {
                if ((this.SpaField == null)) {
                    this.SpaField = new XTypedList<SignificantPointAirspaceType>(this, LinqToXsdTypeManager.Instance, SpaXName);
                }
                return this.SpaField;
            }
            set {
                if ((value == null)) {
                    this.SpaField = null;
                }
                else {
                    if ((this.SpaField == null)) {
                        this.SpaField = XTypedList<SignificantPointAirspaceType>.Initialize(this, LinqToXsdTypeManager.Instance, value, SpaXName);
                    }
                    else {
                        XTypedServices.SetList<SignificantPointAirspaceType>(this.SpaField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (Aas | Abd | Acr | Adg | Aga | Agl | Aha | Ahc | Aho | Ahp | Ahs | Ahu | Ain | Als | Ana | Apg | Apn | Ase | Din | Dli | Dme | Dpn | Fao | Fto | Fcp | Fda | Fdd | Fdn | Fdo | Fds | Fls | Fpa | Fpg | Fqy | Ful | Gbr | Gsd | Hpe | Iap | Ils | Iue | Mgp | Mkr | Mls | Ndb | Nli | Nsc | Ntg | Oaa | Oae | Oas | Ogr | Obs | Ofa | Oil | Org | Oxg | Pfy | Plb | Plc | Rcp | Rda | Rdd | Rdn | Rdo | Rds | Rls | Rpa | Rpg | Rsg | Rsu | Rte | Rwy | Sae | Sah | Ser | Shp | Sia | Sid | Sip | Sns | Sny | Spa | Spd | Srs | Ssd | Sse | Ssr | Sue | Swy | Tcn | Tcp | Tfr | Thp | Tla | Tlg | Tli | Tls | Tly | Tsa | Tsg | Twy | Uac | Uas | Uni | Vli | Vor | Lbm | Aac | Dln | Nln | Tln | Vln)+
        /// </para>
        /// </summary>
        public virtual IList<SpecialDateType> Spd {
            get {
                if ((this.SpdField == null)) {
                    this.SpdField = new XTypedList<SpecialDateType>(this, LinqToXsdTypeManager.Instance, SpdXName);
                }
                return this.SpdField;
            }
            set {
                if ((value == null)) {
                    this.SpdField = null;
                }
                else {
                    if ((this.SpdField == null)) {
                        this.SpdField = XTypedList<SpecialDateType>.Initialize(this, LinqToXsdTypeManager.Instance, value, SpdXName);
                    }
                    else {
                        XTypedServices.SetList<SpecialDateType>(this.SpdField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (Aas | Abd | Acr | Adg | Aga | Agl | Aha | Ahc | Aho | Ahp | Ahs | Ahu | Ain | Als | Ana | Apg | Apn | Ase | Din | Dli | Dme | Dpn | Fao | Fto | Fcp | Fda | Fdd | Fdn | Fdo | Fds | Fls | Fpa | Fpg | Fqy | Ful | Gbr | Gsd | Hpe | Iap | Ils | Iue | Mgp | Mkr | Mls | Ndb | Nli | Nsc | Ntg | Oaa | Oae | Oas | Ogr | Obs | Ofa | Oil | Org | Oxg | Pfy | Plb | Plc | Rcp | Rda | Rdd | Rdn | Rdo | Rds | Rls | Rpa | Rpg | Rsg | Rsu | Rte | Rwy | Sae | Sah | Ser | Shp | Sia | Sid | Sip | Sns | Sny | Spa | Spd | Srs | Ssd | Sse | Ssr | Sue | Swy | Tcn | Tcp | Tfr | Thp | Tla | Tlg | Tli | Tls | Tly | Tsa | Tsg | Twy | Uac | Uas | Uni | Vli | Vor | Lbm | Aac | Dln | Nln | Tln | Vln)+
        /// </para>
        /// </summary>
        public virtual IList<RouteSegmentServiceType> Srs {
            get {
                if ((this.SrsField == null)) {
                    this.SrsField = new XTypedList<RouteSegmentServiceType>(this, LinqToXsdTypeManager.Instance, SrsXName);
                }
                return this.SrsField;
            }
            set {
                if ((value == null)) {
                    this.SrsField = null;
                }
                else {
                    if ((this.SrsField == null)) {
                        this.SrsField = XTypedList<RouteSegmentServiceType>.Initialize(this, LinqToXsdTypeManager.Instance, value, SrsXName);
                    }
                    else {
                        XTypedServices.SetList<RouteSegmentServiceType>(this.SrsField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (Aas | Abd | Acr | Adg | Aga | Agl | Aha | Ahc | Aho | Ahp | Ahs | Ahu | Ain | Als | Ana | Apg | Apn | Ase | Din | Dli | Dme | Dpn | Fao | Fto | Fcp | Fda | Fdd | Fdn | Fdo | Fds | Fls | Fpa | Fpg | Fqy | Ful | Gbr | Gsd | Hpe | Iap | Ils | Iue | Mgp | Mkr | Mls | Ndb | Nli | Nsc | Ntg | Oaa | Oae | Oas | Ogr | Obs | Ofa | Oil | Org | Oxg | Pfy | Plb | Plc | Rcp | Rda | Rdd | Rdn | Rdo | Rds | Rls | Rpa | Rpg | Rsg | Rsu | Rte | Rwy | Sae | Sah | Ser | Shp | Sia | Sid | Sip | Sns | Sny | Spa | Spd | Srs | Ssd | Sse | Ssr | Sue | Swy | Tcn | Tcp | Tfr | Thp | Tla | Tlg | Tli | Tls | Tly | Tsa | Tsg | Twy | Uac | Uas | Uni | Vli | Vor | Lbm | Aac | Dln | Nln | Tln | Vln)+
        /// </para>
        /// </summary>
        public virtual IList<SidServiceType> Ssd {
            get {
                if ((this.SsdField == null)) {
                    this.SsdField = new XTypedList<SidServiceType>(this, LinqToXsdTypeManager.Instance, SsdXName);
                }
                return this.SsdField;
            }
            set {
                if ((value == null)) {
                    this.SsdField = null;
                }
                else {
                    if ((this.SsdField == null)) {
                        this.SsdField = XTypedList<SidServiceType>.Initialize(this, LinqToXsdTypeManager.Instance, value, SsdXName);
                    }
                    else {
                        XTypedServices.SetList<SidServiceType>(this.SsdField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (Aas | Abd | Acr | Adg | Aga | Agl | Aha | Ahc | Aho | Ahp | Ahs | Ahu | Ain | Als | Ana | Apg | Apn | Ase | Din | Dli | Dme | Dpn | Fao | Fto | Fcp | Fda | Fdd | Fdn | Fdo | Fds | Fls | Fpa | Fpg | Fqy | Ful | Gbr | Gsd | Hpe | Iap | Ils | Iue | Mgp | Mkr | Mls | Ndb | Nli | Nsc | Ntg | Oaa | Oae | Oas | Ogr | Obs | Ofa | Oil | Org | Oxg | Pfy | Plb | Plc | Rcp | Rda | Rdd | Rdn | Rdo | Rds | Rls | Rpa | Rpg | Rsg | Rsu | Rte | Rwy | Sae | Sah | Ser | Shp | Sia | Sid | Sip | Sns | Sny | Spa | Spd | Srs | Ssd | Sse | Ssr | Sue | Swy | Tcn | Tcp | Tfr | Thp | Tla | Tlg | Tli | Tls | Tly | Tsa | Tsg | Twy | Uac | Uas | Uni | Vli | Vor | Lbm | Aac | Dln | Nln | Tln | Vln)+
        /// </para>
        /// </summary>
        public virtual IList<StarUsageType> Sse {
            get {
                if ((this.SseField == null)) {
                    this.SseField = new XTypedList<StarUsageType>(this, LinqToXsdTypeManager.Instance, SseXName);
                }
                return this.SseField;
            }
            set {
                if ((value == null)) {
                    this.SseField = null;
                }
                else {
                    if ((this.SseField == null)) {
                        this.SseField = XTypedList<StarUsageType>.Initialize(this, LinqToXsdTypeManager.Instance, value, SseXName);
                    }
                    else {
                        XTypedServices.SetList<StarUsageType>(this.SseField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (Aas | Abd | Acr | Adg | Aga | Agl | Aha | Ahc | Aho | Ahp | Ahs | Ahu | Ain | Als | Ana | Apg | Apn | Ase | Din | Dli | Dme | Dpn | Fao | Fto | Fcp | Fda | Fdd | Fdn | Fdo | Fds | Fls | Fpa | Fpg | Fqy | Ful | Gbr | Gsd | Hpe | Iap | Ils | Iue | Mgp | Mkr | Mls | Ndb | Nli | Nsc | Ntg | Oaa | Oae | Oas | Ogr | Obs | Ofa | Oil | Org | Oxg | Pfy | Plb | Plc | Rcp | Rda | Rdd | Rdn | Rdo | Rds | Rls | Rpa | Rpg | Rsg | Rsu | Rte | Rwy | Sae | Sah | Ser | Shp | Sia | Sid | Sip | Sns | Sny | Spa | Spd | Srs | Ssd | Sse | Ssr | Sue | Swy | Tcn | Tcp | Tfr | Thp | Tla | Tlg | Tli | Tls | Tly | Tsa | Tsg | Twy | Uac | Uas | Uni | Vli | Vor | Lbm | Aac | Dln | Nln | Tln | Vln)+
        /// </para>
        /// </summary>
        public virtual IList<StarServiceType> Ssr {
            get {
                if ((this.SsrField == null)) {
                    this.SsrField = new XTypedList<StarServiceType>(this, LinqToXsdTypeManager.Instance, SsrXName);
                }
                return this.SsrField;
            }
            set {
                if ((value == null)) {
                    this.SsrField = null;
                }
                else {
                    if ((this.SsrField == null)) {
                        this.SsrField = XTypedList<StarServiceType>.Initialize(this, LinqToXsdTypeManager.Instance, value, SsrXName);
                    }
                    else {
                        XTypedServices.SetList<StarServiceType>(this.SsrField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (Aas | Abd | Acr | Adg | Aga | Agl | Aha | Ahc | Aho | Ahp | Ahs | Ahu | Ain | Als | Ana | Apg | Apn | Ase | Din | Dli | Dme | Dpn | Fao | Fto | Fcp | Fda | Fdd | Fdn | Fdo | Fds | Fls | Fpa | Fpg | Fqy | Ful | Gbr | Gsd | Hpe | Iap | Ils | Iue | Mgp | Mkr | Mls | Ndb | Nli | Nsc | Ntg | Oaa | Oae | Oas | Ogr | Obs | Ofa | Oil | Org | Oxg | Pfy | Plb | Plc | Rcp | Rda | Rdd | Rdn | Rdo | Rds | Rls | Rpa | Rpg | Rsg | Rsu | Rte | Rwy | Sae | Sah | Ser | Shp | Sia | Sid | Sip | Sns | Sny | Spa | Spd | Srs | Ssd | Sse | Ssr | Sue | Swy | Tcn | Tcp | Tfr | Thp | Tla | Tlg | Tli | Tls | Tly | Tsa | Tsg | Twy | Uac | Uas | Uni | Vli | Vor | Lbm | Aac | Dln | Nln | Tln | Vln)+
        /// </para>
        /// </summary>
        public virtual IList<SidUsageType> Sue {
            get {
                if ((this.SueField == null)) {
                    this.SueField = new XTypedList<SidUsageType>(this, LinqToXsdTypeManager.Instance, SueXName);
                }
                return this.SueField;
            }
            set {
                if ((value == null)) {
                    this.SueField = null;
                }
                else {
                    if ((this.SueField == null)) {
                        this.SueField = XTypedList<SidUsageType>.Initialize(this, LinqToXsdTypeManager.Instance, value, SueXName);
                    }
                    else {
                        XTypedServices.SetList<SidUsageType>(this.SueField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (Aas | Abd | Acr | Adg | Aga | Agl | Aha | Ahc | Aho | Ahp | Ahs | Ahu | Ain | Als | Ana | Apg | Apn | Ase | Din | Dli | Dme | Dpn | Fao | Fto | Fcp | Fda | Fdd | Fdn | Fdo | Fds | Fls | Fpa | Fpg | Fqy | Ful | Gbr | Gsd | Hpe | Iap | Ils | Iue | Mgp | Mkr | Mls | Ndb | Nli | Nsc | Ntg | Oaa | Oae | Oas | Ogr | Obs | Ofa | Oil | Org | Oxg | Pfy | Plb | Plc | Rcp | Rda | Rdd | Rdn | Rdo | Rds | Rls | Rpa | Rpg | Rsg | Rsu | Rte | Rwy | Sae | Sah | Ser | Shp | Sia | Sid | Sip | Sns | Sny | Spa | Spd | Srs | Ssd | Sse | Ssr | Sue | Swy | Tcn | Tcp | Tfr | Thp | Tla | Tlg | Tli | Tls | Tly | Tsa | Tsg | Twy | Uac | Uas | Uni | Vli | Vor | Lbm | Aac | Dln | Nln | Tln | Vln)+
        /// </para>
        /// </summary>
        public virtual IList<StopwayType> Swy {
            get {
                if ((this.SwyField == null)) {
                    this.SwyField = new XTypedList<StopwayType>(this, LinqToXsdTypeManager.Instance, SwyXName);
                }
                return this.SwyField;
            }
            set {
                if ((value == null)) {
                    this.SwyField = null;
                }
                else {
                    if ((this.SwyField == null)) {
                        this.SwyField = XTypedList<StopwayType>.Initialize(this, LinqToXsdTypeManager.Instance, value, SwyXName);
                    }
                    else {
                        XTypedServices.SetList<StopwayType>(this.SwyField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (Aas | Abd | Acr | Adg | Aga | Agl | Aha | Ahc | Aho | Ahp | Ahs | Ahu | Ain | Als | Ana | Apg | Apn | Ase | Din | Dli | Dme | Dpn | Fao | Fto | Fcp | Fda | Fdd | Fdn | Fdo | Fds | Fls | Fpa | Fpg | Fqy | Ful | Gbr | Gsd | Hpe | Iap | Ils | Iue | Mgp | Mkr | Mls | Ndb | Nli | Nsc | Ntg | Oaa | Oae | Oas | Ogr | Obs | Ofa | Oil | Org | Oxg | Pfy | Plb | Plc | Rcp | Rda | Rdd | Rdn | Rdo | Rds | Rls | Rpa | Rpg | Rsg | Rsu | Rte | Rwy | Sae | Sah | Ser | Shp | Sia | Sid | Sip | Sns | Sny | Spa | Spd | Srs | Ssd | Sse | Ssr | Sue | Swy | Tcn | Tcp | Tfr | Thp | Tla | Tlg | Tli | Tls | Tly | Tsa | Tsg | Twy | Uac | Uas | Uni | Vli | Vor | Lbm | Aac | Dln | Nln | Tln | Vln)+
        /// </para>
        /// </summary>
        public virtual IList<TacanType> Tcn {
            get {
                if ((this.TcnField == null)) {
                    this.TcnField = new XTypedList<TacanType>(this, LinqToXsdTypeManager.Instance, TcnXName);
                }
                return this.TcnField;
            }
            set {
                if ((value == null)) {
                    this.TcnField = null;
                }
                else {
                    if ((this.TcnField == null)) {
                        this.TcnField = XTypedList<TacanType>.Initialize(this, LinqToXsdTypeManager.Instance, value, TcnXName);
                    }
                    else {
                        XTypedServices.SetList<TacanType>(this.TcnField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (Aas | Abd | Acr | Adg | Aga | Agl | Aha | Ahc | Aho | Ahp | Ahs | Ahu | Ain | Als | Ana | Apg | Apn | Ase | Din | Dli | Dme | Dpn | Fao | Fto | Fcp | Fda | Fdd | Fdn | Fdo | Fds | Fls | Fpa | Fpg | Fqy | Ful | Gbr | Gsd | Hpe | Iap | Ils | Iue | Mgp | Mkr | Mls | Ndb | Nli | Nsc | Ntg | Oaa | Oae | Oas | Ogr | Obs | Ofa | Oil | Org | Oxg | Pfy | Plb | Plc | Rcp | Rda | Rdd | Rdn | Rdo | Rds | Rls | Rpa | Rpg | Rsg | Rsu | Rte | Rwy | Sae | Sah | Ser | Shp | Sia | Sid | Sip | Sns | Sny | Spa | Spd | Srs | Ssd | Sse | Ssr | Sue | Swy | Tcn | Tcp | Tfr | Thp | Tla | Tlg | Tli | Tls | Tly | Tsa | Tsg | Twy | Uac | Uas | Uni | Vli | Vor | Lbm | Aac | Dln | Nln | Tln | Vln)+
        /// </para>
        /// </summary>
        public virtual IList<TaxiwayCentreLinePositionType> Tcp {
            get {
                if ((this.TcpField == null)) {
                    this.TcpField = new XTypedList<TaxiwayCentreLinePositionType>(this, LinqToXsdTypeManager.Instance, TcpXName);
                }
                return this.TcpField;
            }
            set {
                if ((value == null)) {
                    this.TcpField = null;
                }
                else {
                    if ((this.TcpField == null)) {
                        this.TcpField = XTypedList<TaxiwayCentreLinePositionType>.Initialize(this, LinqToXsdTypeManager.Instance, value, TcpXName);
                    }
                    else {
                        XTypedServices.SetList<TaxiwayCentreLinePositionType>(this.TcpField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (Aas | Abd | Acr | Adg | Aga | Agl | Aha | Ahc | Aho | Ahp | Ahs | Ahu | Ain | Als | Ana | Apg | Apn | Ase | Din | Dli | Dme | Dpn | Fao | Fto | Fcp | Fda | Fdd | Fdn | Fdo | Fds | Fls | Fpa | Fpg | Fqy | Ful | Gbr | Gsd | Hpe | Iap | Ils | Iue | Mgp | Mkr | Mls | Ndb | Nli | Nsc | Ntg | Oaa | Oae | Oas | Ogr | Obs | Ofa | Oil | Org | Oxg | Pfy | Plb | Plc | Rcp | Rda | Rdd | Rdn | Rdo | Rds | Rls | Rpa | Rpg | Rsg | Rsu | Rte | Rwy | Sae | Sah | Ser | Shp | Sia | Sid | Sip | Sns | Sny | Spa | Spd | Srs | Ssd | Sse | Ssr | Sue | Swy | Tcn | Tcp | Tfr | Thp | Tla | Tlg | Tli | Tls | Tly | Tsa | Tsg | Twy | Uac | Uas | Uni | Vli | Vor | Lbm | Aac | Dln | Nln | Tln | Vln)+
        /// </para>
        /// </summary>
        public virtual IList<TrafficFlowRestrictionType> Tfr {
            get {
                if ((this.TfrField == null)) {
                    this.TfrField = new XTypedList<TrafficFlowRestrictionType>(this, LinqToXsdTypeManager.Instance, TfrXName);
                }
                return this.TfrField;
            }
            set {
                if ((value == null)) {
                    this.TfrField = null;
                }
                else {
                    if ((this.TfrField == null)) {
                        this.TfrField = XTypedList<TrafficFlowRestrictionType>.Initialize(this, LinqToXsdTypeManager.Instance, value, TfrXName);
                    }
                    else {
                        XTypedServices.SetList<TrafficFlowRestrictionType>(this.TfrField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (Aas | Abd | Acr | Adg | Aga | Agl | Aha | Ahc | Aho | Ahp | Ahs | Ahu | Ain | Als | Ana | Apg | Apn | Ase | Din | Dli | Dme | Dpn | Fao | Fto | Fcp | Fda | Fdd | Fdn | Fdo | Fds | Fls | Fpa | Fpg | Fqy | Ful | Gbr | Gsd | Hpe | Iap | Ils | Iue | Mgp | Mkr | Mls | Ndb | Nli | Nsc | Ntg | Oaa | Oae | Oas | Ogr | Obs | Ofa | Oil | Org | Oxg | Pfy | Plb | Plc | Rcp | Rda | Rdd | Rdn | Rdo | Rds | Rls | Rpa | Rpg | Rsg | Rsu | Rte | Rwy | Sae | Sah | Ser | Shp | Sia | Sid | Sip | Sns | Sny | Spa | Spd | Srs | Ssd | Sse | Ssr | Sue | Swy | Tcn | Tcp | Tfr | Thp | Tla | Tlg | Tli | Tls | Tly | Tsa | Tsg | Twy | Uac | Uas | Uni | Vli | Vor | Lbm | Aac | Dln | Nln | Tln | Vln)+
        /// </para>
        /// </summary>
        public virtual IList<TaxiwayHoldingPositionType> Thp {
            get {
                if ((this.ThpField == null)) {
                    this.ThpField = new XTypedList<TaxiwayHoldingPositionType>(this, LinqToXsdTypeManager.Instance, ThpXName);
                }
                return this.ThpField;
            }
            set {
                if ((value == null)) {
                    this.ThpField = null;
                }
                else {
                    if ((this.ThpField == null)) {
                        this.ThpField = XTypedList<TaxiwayHoldingPositionType>.Initialize(this, LinqToXsdTypeManager.Instance, value, ThpXName);
                    }
                    else {
                        XTypedServices.SetList<TaxiwayHoldingPositionType>(this.ThpField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (Aas | Abd | Acr | Adg | Aga | Agl | Aha | Ahc | Aho | Ahp | Ahs | Ahu | Ain | Als | Ana | Apg | Apn | Ase | Din | Dli | Dme | Dpn | Fao | Fto | Fcp | Fda | Fdd | Fdn | Fdo | Fds | Fls | Fpa | Fpg | Fqy | Ful | Gbr | Gsd | Hpe | Iap | Ils | Iue | Mgp | Mkr | Mls | Ndb | Nli | Nsc | Ntg | Oaa | Oae | Oas | Ogr | Obs | Ofa | Oil | Org | Oxg | Pfy | Plb | Plc | Rcp | Rda | Rdd | Rdn | Rdo | Rds | Rls | Rpa | Rpg | Rsg | Rsu | Rte | Rwy | Sae | Sah | Ser | Shp | Sia | Sid | Sip | Sns | Sny | Spa | Spd | Srs | Ssd | Sse | Ssr | Sue | Swy | Tcn | Tcp | Tfr | Thp | Tla | Tlg | Tli | Tls | Tly | Tsa | Tsg | Twy | Uac | Uas | Uni | Vli | Vor | Lbm | Aac | Dln | Nln | Tln | Vln)+
        /// </para>
        /// </summary>
        public virtual IList<TlofType> Tla {
            get {
                if ((this.TlaField == null)) {
                    this.TlaField = new XTypedList<TlofType>(this, LinqToXsdTypeManager.Instance, TlaXName);
                }
                return this.TlaField;
            }
            set {
                if ((value == null)) {
                    this.TlaField = null;
                }
                else {
                    if ((this.TlaField == null)) {
                        this.TlaField = XTypedList<TlofType>.Initialize(this, LinqToXsdTypeManager.Instance, value, TlaXName);
                    }
                    else {
                        XTypedServices.SetList<TlofType>(this.TlaField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (Aas | Abd | Acr | Adg | Aga | Agl | Aha | Ahc | Aho | Ahp | Ahs | Ahu | Ain | Als | Ana | Apg | Apn | Ase | Din | Dli | Dme | Dpn | Fao | Fto | Fcp | Fda | Fdd | Fdn | Fdo | Fds | Fls | Fpa | Fpg | Fqy | Ful | Gbr | Gsd | Hpe | Iap | Ils | Iue | Mgp | Mkr | Mls | Ndb | Nli | Nsc | Ntg | Oaa | Oae | Oas | Ogr | Obs | Ofa | Oil | Org | Oxg | Pfy | Plb | Plc | Rcp | Rda | Rdd | Rdn | Rdo | Rds | Rls | Rpa | Rpg | Rsg | Rsu | Rte | Rwy | Sae | Sah | Ser | Shp | Sia | Sid | Sip | Sns | Sny | Spa | Spd | Srs | Ssd | Sse | Ssr | Sue | Swy | Tcn | Tcp | Tfr | Thp | Tla | Tlg | Tli | Tls | Tly | Tsa | Tsg | Twy | Uac | Uas | Uni | Vli | Vor | Lbm | Aac | Dln | Nln | Tln | Vln)+
        /// </para>
        /// </summary>
        public virtual IList<TlofGeometryType> Tlg {
            get {
                if ((this.TlgField == null)) {
                    this.TlgField = new XTypedList<TlofGeometryType>(this, LinqToXsdTypeManager.Instance, TlgXName);
                }
                return this.TlgField;
            }
            set {
                if ((value == null)) {
                    this.TlgField = null;
                }
                else {
                    if ((this.TlgField == null)) {
                        this.TlgField = XTypedList<TlofGeometryType>.Initialize(this, LinqToXsdTypeManager.Instance, value, TlgXName);
                    }
                    else {
                        XTypedServices.SetList<TlofGeometryType>(this.TlgField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (Aas | Abd | Acr | Adg | Aga | Agl | Aha | Ahc | Aho | Ahp | Ahs | Ahu | Ain | Als | Ana | Apg | Apn | Ase | Din | Dli | Dme | Dpn | Fao | Fto | Fcp | Fda | Fdd | Fdn | Fdo | Fds | Fls | Fpa | Fpg | Fqy | Ful | Gbr | Gsd | Hpe | Iap | Ils | Iue | Mgp | Mkr | Mls | Ndb | Nli | Nsc | Ntg | Oaa | Oae | Oas | Ogr | Obs | Ofa | Oil | Org | Oxg | Pfy | Plb | Plc | Rcp | Rda | Rdd | Rdn | Rdo | Rds | Rls | Rpa | Rpg | Rsg | Rsu | Rte | Rwy | Sae | Sah | Ser | Shp | Sia | Sid | Sip | Sns | Sny | Spa | Spd | Srs | Ssd | Sse | Ssr | Sue | Swy | Tcn | Tcp | Tfr | Thp | Tla | Tlg | Tli | Tls | Tly | Tsa | Tsg | Twy | Uac | Uas | Uni | Vli | Vor | Lbm | Aac | Dln | Nln | Tln | Vln)+
        /// </para>
        /// </summary>
        public virtual IList<TacanUsageLimitationType> Tli {
            get {
                if ((this.TliField == null)) {
                    this.TliField = new XTypedList<TacanUsageLimitationType>(this, LinqToXsdTypeManager.Instance, TliXName);
                }
                return this.TliField;
            }
            set {
                if ((value == null)) {
                    this.TliField = null;
                }
                else {
                    if ((this.TliField == null)) {
                        this.TliField = XTypedList<TacanUsageLimitationType>.Initialize(this, LinqToXsdTypeManager.Instance, value, TliXName);
                    }
                    else {
                        XTypedServices.SetList<TacanUsageLimitationType>(this.TliField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (Aas | Abd | Acr | Adg | Aga | Agl | Aha | Ahc | Aho | Ahp | Ahs | Ahu | Ain | Als | Ana | Apg | Apn | Ase | Din | Dli | Dme | Dpn | Fao | Fto | Fcp | Fda | Fdd | Fdn | Fdo | Fds | Fls | Fpa | Fpg | Fqy | Ful | Gbr | Gsd | Hpe | Iap | Ils | Iue | Mgp | Mkr | Mls | Ndb | Nli | Nsc | Ntg | Oaa | Oae | Oas | Ogr | Obs | Ofa | Oil | Org | Oxg | Pfy | Plb | Plc | Rcp | Rda | Rdd | Rdn | Rdo | Rds | Rls | Rpa | Rpg | Rsg | Rsu | Rte | Rwy | Sae | Sah | Ser | Shp | Sia | Sid | Sip | Sns | Sny | Spa | Spd | Srs | Ssd | Sse | Ssr | Sue | Swy | Tcn | Tcp | Tfr | Thp | Tla | Tlg | Tli | Tls | Tly | Tsa | Tsg | Twy | Uac | Uas | Uni | Vli | Vor | Lbm | Aac | Dln | Nln | Tln | Vln)+
        /// </para>
        /// </summary>
        public virtual IList<TlofLightingSystemType> Tls {
            get {
                if ((this.TlsField == null)) {
                    this.TlsField = new XTypedList<TlofLightingSystemType>(this, LinqToXsdTypeManager.Instance, TlsXName);
                }
                return this.TlsField;
            }
            set {
                if ((value == null)) {
                    this.TlsField = null;
                }
                else {
                    if ((this.TlsField == null)) {
                        this.TlsField = XTypedList<TlofLightingSystemType>.Initialize(this, LinqToXsdTypeManager.Instance, value, TlsXName);
                    }
                    else {
                        XTypedServices.SetList<TlofLightingSystemType>(this.TlsField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (Aas | Abd | Acr | Adg | Aga | Agl | Aha | Ahc | Aho | Ahp | Ahs | Ahu | Ain | Als | Ana | Apg | Apn | Ase | Din | Dli | Dme | Dpn | Fao | Fto | Fcp | Fda | Fdd | Fdn | Fdo | Fds | Fls | Fpa | Fpg | Fqy | Ful | Gbr | Gsd | Hpe | Iap | Ils | Iue | Mgp | Mkr | Mls | Ndb | Nli | Nsc | Ntg | Oaa | Oae | Oas | Ogr | Obs | Ofa | Oil | Org | Oxg | Pfy | Plb | Plc | Rcp | Rda | Rdd | Rdn | Rdo | Rds | Rls | Rpa | Rpg | Rsg | Rsu | Rte | Rwy | Sae | Sah | Ser | Shp | Sia | Sid | Sip | Sns | Sny | Spa | Spd | Srs | Ssd | Sse | Ssr | Sue | Swy | Tcn | Tcp | Tfr | Thp | Tla | Tlg | Tli | Tls | Tly | Tsa | Tsg | Twy | Uac | Uas | Uni | Vli | Vor | Lbm | Aac | Dln | Nln | Tln | Vln)+
        /// </para>
        /// </summary>
        public virtual IList<TaxiwayLightingSystemType> Tly {
            get {
                if ((this.TlyField == null)) {
                    this.TlyField = new XTypedList<TaxiwayLightingSystemType>(this, LinqToXsdTypeManager.Instance, TlyXName);
                }
                return this.TlyField;
            }
            set {
                if ((value == null)) {
                    this.TlyField = null;
                }
                else {
                    if ((this.TlyField == null)) {
                        this.TlyField = XTypedList<TaxiwayLightingSystemType>.Initialize(this, LinqToXsdTypeManager.Instance, value, TlyXName);
                    }
                    else {
                        XTypedServices.SetList<TaxiwayLightingSystemType>(this.TlyField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (Aas | Abd | Acr | Adg | Aga | Agl | Aha | Ahc | Aho | Ahp | Ahs | Ahu | Ain | Als | Ana | Apg | Apn | Ase | Din | Dli | Dme | Dpn | Fao | Fto | Fcp | Fda | Fdd | Fdn | Fdo | Fds | Fls | Fpa | Fpg | Fqy | Ful | Gbr | Gsd | Hpe | Iap | Ils | Iue | Mgp | Mkr | Mls | Ndb | Nli | Nsc | Ntg | Oaa | Oae | Oas | Ogr | Obs | Ofa | Oil | Org | Oxg | Pfy | Plb | Plc | Rcp | Rda | Rdd | Rdn | Rdo | Rds | Rls | Rpa | Rpg | Rsg | Rsu | Rte | Rwy | Sae | Sah | Ser | Shp | Sia | Sid | Sip | Sns | Sny | Spa | Spd | Srs | Ssd | Sse | Ssr | Sue | Swy | Tcn | Tcp | Tfr | Thp | Tla | Tlg | Tli | Tls | Tly | Tsa | Tsg | Twy | Uac | Uas | Uni | Vli | Vor | Lbm | Aac | Dln | Nln | Tln | Vln)+
        /// </para>
        /// </summary>
        public virtual IList<TlofSafeAreaType> Tsa {
            get {
                if ((this.TsaField == null)) {
                    this.TsaField = new XTypedList<TlofSafeAreaType>(this, LinqToXsdTypeManager.Instance, TsaXName);
                }
                return this.TsaField;
            }
            set {
                if ((value == null)) {
                    this.TsaField = null;
                }
                else {
                    if ((this.TsaField == null)) {
                        this.TsaField = XTypedList<TlofSafeAreaType>.Initialize(this, LinqToXsdTypeManager.Instance, value, TsaXName);
                    }
                    else {
                        XTypedServices.SetList<TlofSafeAreaType>(this.TsaField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (Aas | Abd | Acr | Adg | Aga | Agl | Aha | Ahc | Aho | Ahp | Ahs | Ahu | Ain | Als | Ana | Apg | Apn | Ase | Din | Dli | Dme | Dpn | Fao | Fto | Fcp | Fda | Fdd | Fdn | Fdo | Fds | Fls | Fpa | Fpg | Fqy | Ful | Gbr | Gsd | Hpe | Iap | Ils | Iue | Mgp | Mkr | Mls | Ndb | Nli | Nsc | Ntg | Oaa | Oae | Oas | Ogr | Obs | Ofa | Oil | Org | Oxg | Pfy | Plb | Plc | Rcp | Rda | Rdd | Rdn | Rdo | Rds | Rls | Rpa | Rpg | Rsg | Rsu | Rte | Rwy | Sae | Sah | Ser | Shp | Sia | Sid | Sip | Sns | Sny | Spa | Spd | Srs | Ssd | Sse | Ssr | Sue | Swy | Tcn | Tcp | Tfr | Thp | Tla | Tlg | Tli | Tls | Tly | Tsa | Tsg | Twy | Uac | Uas | Uni | Vli | Vor | Lbm | Aac | Dln | Nln | Tln | Vln)+
        /// </para>
        /// </summary>
        public virtual IList<TlofSafeAreaGeometryType> Tsg {
            get {
                if ((this.TsgField == null)) {
                    this.TsgField = new XTypedList<TlofSafeAreaGeometryType>(this, LinqToXsdTypeManager.Instance, TsgXName);
                }
                return this.TsgField;
            }
            set {
                if ((value == null)) {
                    this.TsgField = null;
                }
                else {
                    if ((this.TsgField == null)) {
                        this.TsgField = XTypedList<TlofSafeAreaGeometryType>.Initialize(this, LinqToXsdTypeManager.Instance, value, TsgXName);
                    }
                    else {
                        XTypedServices.SetList<TlofSafeAreaGeometryType>(this.TsgField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (Aas | Abd | Acr | Adg | Aga | Agl | Aha | Ahc | Aho | Ahp | Ahs | Ahu | Ain | Als | Ana | Apg | Apn | Ase | Din | Dli | Dme | Dpn | Fao | Fto | Fcp | Fda | Fdd | Fdn | Fdo | Fds | Fls | Fpa | Fpg | Fqy | Ful | Gbr | Gsd | Hpe | Iap | Ils | Iue | Mgp | Mkr | Mls | Ndb | Nli | Nsc | Ntg | Oaa | Oae | Oas | Ogr | Obs | Ofa | Oil | Org | Oxg | Pfy | Plb | Plc | Rcp | Rda | Rdd | Rdn | Rdo | Rds | Rls | Rpa | Rpg | Rsg | Rsu | Rte | Rwy | Sae | Sah | Ser | Shp | Sia | Sid | Sip | Sns | Sny | Spa | Spd | Srs | Ssd | Sse | Ssr | Sue | Swy | Tcn | Tcp | Tfr | Thp | Tla | Tlg | Tli | Tls | Tly | Tsa | Tsg | Twy | Uac | Uas | Uni | Vli | Vor | Lbm | Aac | Dln | Nln | Tln | Vln)+
        /// </para>
        /// </summary>
        public virtual IList<TaxiwayType> Twy {
            get {
                if ((this.TwyField == null)) {
                    this.TwyField = new XTypedList<TaxiwayType>(this, LinqToXsdTypeManager.Instance, TwyXName);
                }
                return this.TwyField;
            }
            set {
                if ((value == null)) {
                    this.TwyField = null;
                }
                else {
                    if ((this.TwyField == null)) {
                        this.TwyField = XTypedList<TaxiwayType>.Initialize(this, LinqToXsdTypeManager.Instance, value, TwyXName);
                    }
                    else {
                        XTypedServices.SetList<TaxiwayType>(this.TwyField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (Aas | Abd | Acr | Adg | Aga | Agl | Aha | Ahc | Aho | Ahp | Ahs | Ahu | Ain | Als | Ana | Apg | Apn | Ase | Din | Dli | Dme | Dpn | Fao | Fto | Fcp | Fda | Fdd | Fdn | Fdo | Fds | Fls | Fpa | Fpg | Fqy | Ful | Gbr | Gsd | Hpe | Iap | Ils | Iue | Mgp | Mkr | Mls | Ndb | Nli | Nsc | Ntg | Oaa | Oae | Oas | Ogr | Obs | Ofa | Oil | Org | Oxg | Pfy | Plb | Plc | Rcp | Rda | Rdd | Rdn | Rdo | Rds | Rls | Rpa | Rpg | Rsg | Rsu | Rte | Rwy | Sae | Sah | Ser | Shp | Sia | Sid | Sip | Sns | Sny | Spa | Spd | Srs | Ssd | Sse | Ssr | Sue | Swy | Tcn | Tcp | Tfr | Thp | Tla | Tlg | Tli | Tls | Tly | Tsa | Tsg | Twy | Uac | Uas | Uni | Vli | Vor | Lbm | Aac | Dln | Nln | Tln | Vln)+
        /// </para>
        /// </summary>
        public virtual IList<UnitAssociationType> Uac {
            get {
                if ((this.UacField == null)) {
                    this.UacField = new XTypedList<UnitAssociationType>(this, LinqToXsdTypeManager.Instance, UacXName);
                }
                return this.UacField;
            }
            set {
                if ((value == null)) {
                    this.UacField = null;
                }
                else {
                    if ((this.UacField == null)) {
                        this.UacField = XTypedList<UnitAssociationType>.Initialize(this, LinqToXsdTypeManager.Instance, value, UacXName);
                    }
                    else {
                        XTypedServices.SetList<UnitAssociationType>(this.UacField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (Aas | Abd | Acr | Adg | Aga | Agl | Aha | Ahc | Aho | Ahp | Ahs | Ahu | Ain | Als | Ana | Apg | Apn | Ase | Din | Dli | Dme | Dpn | Fao | Fto | Fcp | Fda | Fdd | Fdn | Fdo | Fds | Fls | Fpa | Fpg | Fqy | Ful | Gbr | Gsd | Hpe | Iap | Ils | Iue | Mgp | Mkr | Mls | Ndb | Nli | Nsc | Ntg | Oaa | Oae | Oas | Ogr | Obs | Ofa | Oil | Org | Oxg | Pfy | Plb | Plc | Rcp | Rda | Rdd | Rdn | Rdo | Rds | Rls | Rpa | Rpg | Rsg | Rsu | Rte | Rwy | Sae | Sah | Ser | Shp | Sia | Sid | Sip | Sns | Sny | Spa | Spd | Srs | Ssd | Sse | Ssr | Sue | Swy | Tcn | Tcp | Tfr | Thp | Tla | Tlg | Tli | Tls | Tly | Tsa | Tsg | Twy | Uac | Uas | Uni | Vli | Vor | Lbm | Aac | Dln | Nln | Tln | Vln)+
        /// </para>
        /// </summary>
        public virtual IList<UnitContactAddressType> Uas {
            get {
                if ((this.UasField == null)) {
                    this.UasField = new XTypedList<UnitContactAddressType>(this, LinqToXsdTypeManager.Instance, UasXName);
                }
                return this.UasField;
            }
            set {
                if ((value == null)) {
                    this.UasField = null;
                }
                else {
                    if ((this.UasField == null)) {
                        this.UasField = XTypedList<UnitContactAddressType>.Initialize(this, LinqToXsdTypeManager.Instance, value, UasXName);
                    }
                    else {
                        XTypedServices.SetList<UnitContactAddressType>(this.UasField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (Aas | Abd | Acr | Adg | Aga | Agl | Aha | Ahc | Aho | Ahp | Ahs | Ahu | Ain | Als | Ana | Apg | Apn | Ase | Din | Dli | Dme | Dpn | Fao | Fto | Fcp | Fda | Fdd | Fdn | Fdo | Fds | Fls | Fpa | Fpg | Fqy | Ful | Gbr | Gsd | Hpe | Iap | Ils | Iue | Mgp | Mkr | Mls | Ndb | Nli | Nsc | Ntg | Oaa | Oae | Oas | Ogr | Obs | Ofa | Oil | Org | Oxg | Pfy | Plb | Plc | Rcp | Rda | Rdd | Rdn | Rdo | Rds | Rls | Rpa | Rpg | Rsg | Rsu | Rte | Rwy | Sae | Sah | Ser | Shp | Sia | Sid | Sip | Sns | Sny | Spa | Spd | Srs | Ssd | Sse | Ssr | Sue | Swy | Tcn | Tcp | Tfr | Thp | Tla | Tlg | Tli | Tls | Tly | Tsa | Tsg | Twy | Uac | Uas | Uni | Vli | Vor | Lbm | Aac | Dln | Nln | Tln | Vln)+
        /// </para>
        /// </summary>
        public virtual IList<UnitType> Uni {
            get {
                if ((this.UniField == null)) {
                    this.UniField = new XTypedList<UnitType>(this, LinqToXsdTypeManager.Instance, UniXName);
                }
                return this.UniField;
            }
            set {
                if ((value == null)) {
                    this.UniField = null;
                }
                else {
                    if ((this.UniField == null)) {
                        this.UniField = XTypedList<UnitType>.Initialize(this, LinqToXsdTypeManager.Instance, value, UniXName);
                    }
                    else {
                        XTypedServices.SetList<UnitType>(this.UniField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (Aas | Abd | Acr | Adg | Aga | Agl | Aha | Ahc | Aho | Ahp | Ahs | Ahu | Ain | Als | Ana | Apg | Apn | Ase | Din | Dli | Dme | Dpn | Fao | Fto | Fcp | Fda | Fdd | Fdn | Fdo | Fds | Fls | Fpa | Fpg | Fqy | Ful | Gbr | Gsd | Hpe | Iap | Ils | Iue | Mgp | Mkr | Mls | Ndb | Nli | Nsc | Ntg | Oaa | Oae | Oas | Ogr | Obs | Ofa | Oil | Org | Oxg | Pfy | Plb | Plc | Rcp | Rda | Rdd | Rdn | Rdo | Rds | Rls | Rpa | Rpg | Rsg | Rsu | Rte | Rwy | Sae | Sah | Ser | Shp | Sia | Sid | Sip | Sns | Sny | Spa | Spd | Srs | Ssd | Sse | Ssr | Sue | Swy | Tcn | Tcp | Tfr | Thp | Tla | Tlg | Tli | Tls | Tly | Tsa | Tsg | Twy | Uac | Uas | Uni | Vli | Vor | Lbm | Aac | Dln | Nln | Tln | Vln)+
        /// </para>
        /// </summary>
        public virtual IList<VorUsageLimitationType> Vli {
            get {
                if ((this.VliField == null)) {
                    this.VliField = new XTypedList<VorUsageLimitationType>(this, LinqToXsdTypeManager.Instance, VliXName);
                }
                return this.VliField;
            }
            set {
                if ((value == null)) {
                    this.VliField = null;
                }
                else {
                    if ((this.VliField == null)) {
                        this.VliField = XTypedList<VorUsageLimitationType>.Initialize(this, LinqToXsdTypeManager.Instance, value, VliXName);
                    }
                    else {
                        XTypedServices.SetList<VorUsageLimitationType>(this.VliField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (Aas | Abd | Acr | Adg | Aga | Agl | Aha | Ahc | Aho | Ahp | Ahs | Ahu | Ain | Als | Ana | Apg | Apn | Ase | Din | Dli | Dme | Dpn | Fao | Fto | Fcp | Fda | Fdd | Fdn | Fdo | Fds | Fls | Fpa | Fpg | Fqy | Ful | Gbr | Gsd | Hpe | Iap | Ils | Iue | Mgp | Mkr | Mls | Ndb | Nli | Nsc | Ntg | Oaa | Oae | Oas | Ogr | Obs | Ofa | Oil | Org | Oxg | Pfy | Plb | Plc | Rcp | Rda | Rdd | Rdn | Rdo | Rds | Rls | Rpa | Rpg | Rsg | Rsu | Rte | Rwy | Sae | Sah | Ser | Shp | Sia | Sid | Sip | Sns | Sny | Spa | Spd | Srs | Ssd | Sse | Ssr | Sue | Swy | Tcn | Tcp | Tfr | Thp | Tla | Tlg | Tli | Tls | Tly | Tsa | Tsg | Twy | Uac | Uas | Uni | Vli | Vor | Lbm | Aac | Dln | Nln | Tln | Vln)+
        /// </para>
        /// </summary>
        public virtual IList<VorType> Vor {
            get {
                if ((this.VorField == null)) {
                    this.VorField = new XTypedList<VorType>(this, LinqToXsdTypeManager.Instance, VorXName);
                }
                return this.VorField;
            }
            set {
                if ((value == null)) {
                    this.VorField = null;
                }
                else {
                    if ((this.VorField == null)) {
                        this.VorField = XTypedList<VorType>.Initialize(this, LinqToXsdTypeManager.Instance, value, VorXName);
                    }
                    else {
                        XTypedServices.SetList<VorType>(this.VorField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (Aas | Abd | Acr | Adg | Aga | Agl | Aha | Ahc | Aho | Ahp | Ahs | Ahu | Ain | Als | Ana | Apg | Apn | Ase | Din | Dli | Dme | Dpn | Fao | Fto | Fcp | Fda | Fdd | Fdn | Fdo | Fds | Fls | Fpa | Fpg | Fqy | Ful | Gbr | Gsd | Hpe | Iap | Ils | Iue | Mgp | Mkr | Mls | Ndb | Nli | Nsc | Ntg | Oaa | Oae | Oas | Ogr | Obs | Ofa | Oil | Org | Oxg | Pfy | Plb | Plc | Rcp | Rda | Rdd | Rdn | Rdo | Rds | Rls | Rpa | Rpg | Rsg | Rsu | Rte | Rwy | Sae | Sah | Ser | Shp | Sia | Sid | Sip | Sns | Sny | Spa | Spd | Srs | Ssd | Sse | Ssr | Sue | Swy | Tcn | Tcp | Tfr | Thp | Tla | Tlg | Tli | Tls | Tly | Tsa | Tsg | Twy | Uac | Uas | Uni | Vli | Vor | Lbm | Aac | Dln | Nln | Tln | Vln)+
        /// </para>
        /// </summary>
        public virtual IList<LabelMarkerType> Lbm {
            get {
                if ((this.LbmField == null)) {
                    this.LbmField = new XTypedList<LabelMarkerType>(this, LinqToXsdTypeManager.Instance, LbmXName);
                }
                return this.LbmField;
            }
            set {
                if ((value == null)) {
                    this.LbmField = null;
                }
                else {
                    if ((this.LbmField == null)) {
                        this.LbmField = XTypedList<LabelMarkerType>.Initialize(this, LinqToXsdTypeManager.Instance, value, LbmXName);
                    }
                    else {
                        XTypedServices.SetList<LabelMarkerType>(this.LbmField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// DEPRECATED-4.0
        /// </para>
        /// <para>
        /// [Deprecated]
        /// </para>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (Aas | Abd | Acr | Adg | Aga | Agl | Aha | Ahc | Aho | Ahp | Ahs | Ahu | Ain | Als | Ana | Apg | Apn | Ase | Din | Dli | Dme | Dpn | Fao | Fto | Fcp | Fda | Fdd | Fdn | Fdo | Fds | Fls | Fpa | Fpg | Fqy | Ful | Gbr | Gsd | Hpe | Iap | Ils | Iue | Mgp | Mkr | Mls | Ndb | Nli | Nsc | Ntg | Oaa | Oae | Oas | Ogr | Obs | Ofa | Oil | Org | Oxg | Pfy | Plb | Plc | Rcp | Rda | Rdd | Rdn | Rdo | Rds | Rls | Rpa | Rpg | Rsg | Rsu | Rte | Rwy | Sae | Sah | Ser | Shp | Sia | Sid | Sip | Sns | Sny | Spa | Spd | Srs | Ssd | Sse | Ssr | Sue | Swy | Tcn | Tcp | Tfr | Thp | Tla | Tlg | Tli | Tls | Tly | Tsa | Tsg | Twy | Uac | Uas | Uni | Vli | Vor | Lbm | Aac | Dln | Nln | Tln | Vln)+
        /// </para>
        /// </summary>
        public virtual IList<AirspaceAssocType> Aac {
            get {
                if ((this.AacField == null)) {
                    this.AacField = new XTypedList<AirspaceAssocType>(this, LinqToXsdTypeManager.Instance, AacXName);
                }
                return this.AacField;
            }
            set {
                if ((value == null)) {
                    this.AacField = null;
                }
                else {
                    if ((this.AacField == null)) {
                        this.AacField = XTypedList<AirspaceAssocType>.Initialize(this, LinqToXsdTypeManager.Instance, value, AacXName);
                    }
                    else {
                        XTypedServices.SetList<AirspaceAssocType>(this.AacField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// DEPRECATED-4.0
        /// </para>
        /// <para>
        /// [Deprecated]
        /// </para>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (Aas | Abd | Acr | Adg | Aga | Agl | Aha | Ahc | Aho | Ahp | Ahs | Ahu | Ain | Als | Ana | Apg | Apn | Ase | Din | Dli | Dme | Dpn | Fao | Fto | Fcp | Fda | Fdd | Fdn | Fdo | Fds | Fls | Fpa | Fpg | Fqy | Ful | Gbr | Gsd | Hpe | Iap | Ils | Iue | Mgp | Mkr | Mls | Ndb | Nli | Nsc | Ntg | Oaa | Oae | Oas | Ogr | Obs | Ofa | Oil | Org | Oxg | Pfy | Plb | Plc | Rcp | Rda | Rdd | Rdn | Rdo | Rds | Rls | Rpa | Rpg | Rsg | Rsu | Rte | Rwy | Sae | Sah | Ser | Shp | Sia | Sid | Sip | Sns | Sny | Spa | Spd | Srs | Ssd | Sse | Ssr | Sue | Swy | Tcn | Tcp | Tfr | Thp | Tla | Tlg | Tli | Tls | Tly | Tsa | Tsg | Twy | Uac | Uas | Uni | Vli | Vor | Lbm | Aac | Dln | Nln | Tln | Vln)+
        /// </para>
        /// </summary>
        public virtual IList<DmeLimitationType> Dln {
            get {
                if ((this.DlnField == null)) {
                    this.DlnField = new XTypedList<DmeLimitationType>(this, LinqToXsdTypeManager.Instance, DlnXName);
                }
                return this.DlnField;
            }
            set {
                if ((value == null)) {
                    this.DlnField = null;
                }
                else {
                    if ((this.DlnField == null)) {
                        this.DlnField = XTypedList<DmeLimitationType>.Initialize(this, LinqToXsdTypeManager.Instance, value, DlnXName);
                    }
                    else {
                        XTypedServices.SetList<DmeLimitationType>(this.DlnField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// DEPRECATED-4.0
        /// </para>
        /// <para>
        /// [Deprecated]
        /// </para>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (Aas | Abd | Acr | Adg | Aga | Agl | Aha | Ahc | Aho | Ahp | Ahs | Ahu | Ain | Als | Ana | Apg | Apn | Ase | Din | Dli | Dme | Dpn | Fao | Fto | Fcp | Fda | Fdd | Fdn | Fdo | Fds | Fls | Fpa | Fpg | Fqy | Ful | Gbr | Gsd | Hpe | Iap | Ils | Iue | Mgp | Mkr | Mls | Ndb | Nli | Nsc | Ntg | Oaa | Oae | Oas | Ogr | Obs | Ofa | Oil | Org | Oxg | Pfy | Plb | Plc | Rcp | Rda | Rdd | Rdn | Rdo | Rds | Rls | Rpa | Rpg | Rsg | Rsu | Rte | Rwy | Sae | Sah | Ser | Shp | Sia | Sid | Sip | Sns | Sny | Spa | Spd | Srs | Ssd | Sse | Ssr | Sue | Swy | Tcn | Tcp | Tfr | Thp | Tla | Tlg | Tli | Tls | Tly | Tsa | Tsg | Twy | Uac | Uas | Uni | Vli | Vor | Lbm | Aac | Dln | Nln | Tln | Vln)+
        /// </para>
        /// </summary>
        public virtual IList<NdbLimitationType> Nln {
            get {
                if ((this.NlnField == null)) {
                    this.NlnField = new XTypedList<NdbLimitationType>(this, LinqToXsdTypeManager.Instance, NlnXName);
                }
                return this.NlnField;
            }
            set {
                if ((value == null)) {
                    this.NlnField = null;
                }
                else {
                    if ((this.NlnField == null)) {
                        this.NlnField = XTypedList<NdbLimitationType>.Initialize(this, LinqToXsdTypeManager.Instance, value, NlnXName);
                    }
                    else {
                        XTypedServices.SetList<NdbLimitationType>(this.NlnField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// DEPRECATED-4.0
        /// </para>
        /// <para>
        /// [Deprecated]
        /// </para>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (Aas | Abd | Acr | Adg | Aga | Agl | Aha | Ahc | Aho | Ahp | Ahs | Ahu | Ain | Als | Ana | Apg | Apn | Ase | Din | Dli | Dme | Dpn | Fao | Fto | Fcp | Fda | Fdd | Fdn | Fdo | Fds | Fls | Fpa | Fpg | Fqy | Ful | Gbr | Gsd | Hpe | Iap | Ils | Iue | Mgp | Mkr | Mls | Ndb | Nli | Nsc | Ntg | Oaa | Oae | Oas | Ogr | Obs | Ofa | Oil | Org | Oxg | Pfy | Plb | Plc | Rcp | Rda | Rdd | Rdn | Rdo | Rds | Rls | Rpa | Rpg | Rsg | Rsu | Rte | Rwy | Sae | Sah | Ser | Shp | Sia | Sid | Sip | Sns | Sny | Spa | Spd | Srs | Ssd | Sse | Ssr | Sue | Swy | Tcn | Tcp | Tfr | Thp | Tla | Tlg | Tli | Tls | Tly | Tsa | Tsg | Twy | Uac | Uas | Uni | Vli | Vor | Lbm | Aac | Dln | Nln | Tln | Vln)+
        /// </para>
        /// </summary>
        public virtual IList<TacanLimitationType> Tln {
            get {
                if ((this.TlnField == null)) {
                    this.TlnField = new XTypedList<TacanLimitationType>(this, LinqToXsdTypeManager.Instance, TlnXName);
                }
                return this.TlnField;
            }
            set {
                if ((value == null)) {
                    this.TlnField = null;
                }
                else {
                    if ((this.TlnField == null)) {
                        this.TlnField = XTypedList<TacanLimitationType>.Initialize(this, LinqToXsdTypeManager.Instance, value, TlnXName);
                    }
                    else {
                        XTypedServices.SetList<TacanLimitationType>(this.TlnField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// DEPRECATED-4.0
        /// </para>
        /// <para>
        /// [Deprecated]
        /// </para>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (Aas | Abd | Acr | Adg | Aga | Agl | Aha | Ahc | Aho | Ahp | Ahs | Ahu | Ain | Als | Ana | Apg | Apn | Ase | Din | Dli | Dme | Dpn | Fao | Fto | Fcp | Fda | Fdd | Fdn | Fdo | Fds | Fls | Fpa | Fpg | Fqy | Ful | Gbr | Gsd | Hpe | Iap | Ils | Iue | Mgp | Mkr | Mls | Ndb | Nli | Nsc | Ntg | Oaa | Oae | Oas | Ogr | Obs | Ofa | Oil | Org | Oxg | Pfy | Plb | Plc | Rcp | Rda | Rdd | Rdn | Rdo | Rds | Rls | Rpa | Rpg | Rsg | Rsu | Rte | Rwy | Sae | Sah | Ser | Shp | Sia | Sid | Sip | Sns | Sny | Spa | Spd | Srs | Ssd | Sse | Ssr | Sue | Swy | Tcn | Tcp | Tfr | Thp | Tla | Tlg | Tli | Tls | Tly | Tsa | Tsg | Twy | Uac | Uas | Uni | Vli | Vor | Lbm | Aac | Dln | Nln | Tln | Vln)+
        /// </para>
        /// </summary>
        public virtual IList<VorLimitationType> Vln {
            get {
                if ((this.VlnField == null)) {
                    this.VlnField = new XTypedList<VorLimitationType>(this, LinqToXsdTypeManager.Instance, VlnXName);
                }
                return this.VlnField;
            }
            set {
                if ((value == null)) {
                    this.VlnField = null;
                }
                else {
                    if ((this.VlnField == null)) {
                        this.VlnField = XTypedList<VorLimitationType>.Initialize(this, LinqToXsdTypeManager.Instance, value, VlnXName);
                    }
                    else {
                        XTypedServices.SetList<VorLimitationType>(this.VlnField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// The version of the OFMX-Snapshot.xsd schema to which the message conforms
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual string version {
            get {
                XAttribute x = this.Attribute(versionXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(versionXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// The originator (source) of the message
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual string origin {
            get {
                XAttribute x = this.Attribute(originXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(originXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// The originator (source) namespace of the message
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual string @namespace {
            get {
                XAttribute x = this.Attribute(@namespaceXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(@namespaceXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Regions used throughout this document
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual IList<string> regions {
            get {
                XAttribute x = this.Attribute(regionsXName);
                return XTypedServices.ParseListValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetListAttribute(regionsXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// The date and time when the message was created
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual System.DateTime created {
            get {
                XAttribute x = this.Attribute(createdXName);
                return XTypedServices.ParseValue<System.DateTime>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.DateTime).Datatype);
            }
            set {
                this.SetAttribute(createdXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.DateTime).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// The beginning date and time used as criteria to select valid versions included in the message
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual System.DateTime effective {
            get {
                XAttribute x = this.Attribute(effectiveXName);
                return XTypedServices.ParseValue<System.DateTime>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.DateTime).Datatype);
            }
            set {
                this.SetAttribute(effectiveXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.DateTime).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// The optional end date and time used as criteria to select valid versions included in the message
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.DateTime? expiration {
            get {
                XAttribute x = this.Attribute(expirationXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<System.DateTime>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.DateTime).Datatype);
            }
            set {
                this.SetAttribute(expirationXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.DateTime).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static OFMXSnapshot Load(string xmlFile) {
            return XTypedServices.Load<OFMXSnapshot>(xmlFile);
        }
        
        public static OFMXSnapshot Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<OFMXSnapshot>(xmlFile);
        }
        
        public static OFMXSnapshot Parse(string xml) {
            return XTypedServices.Parse<OFMXSnapshot>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<OFMXSnapshot>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(AasXName, typeof(AirspaceAssociationType));
            localElementDictionary.Add(AbdXName, typeof(AirspaceBorderType));
            localElementDictionary.Add(AcrXName, typeof(AirspaceCorridorType));
            localElementDictionary.Add(AdgXName, typeof(AirspaceDerivedGeometryType));
            localElementDictionary.Add(AgaXName, typeof(GroundServiceAddressType));
            localElementDictionary.Add(AglXName, typeof(AeronauticalGroundLightType));
            localElementDictionary.Add(AhaXName, typeof(AerodromeHeliportAddressType));
            localElementDictionary.Add(AhcXName, typeof(AerodromeHeliportCollocationType));
            localElementDictionary.Add(AhoXName, typeof(AerodromeHeliportObstacleType));
            localElementDictionary.Add(AhpXName, typeof(AerodromeHeliportType));
            localElementDictionary.Add(AhsXName, typeof(GroundServiceType));
            localElementDictionary.Add(AhuXName, typeof(AerodromeHeliportUsageType));
            localElementDictionary.Add(AinXName, typeof(NavaidAngularReferenceType));
            localElementDictionary.Add(AlsXName, typeof(ApronLightingSystemType));
            localElementDictionary.Add(AnaXName, typeof(AerodromeHeliportNavaidType));
            localElementDictionary.Add(ApgXName, typeof(ApronGeometryType));
            localElementDictionary.Add(ApnXName, typeof(ApronType));
            localElementDictionary.Add(AseXName, typeof(AirspaceType));
            localElementDictionary.Add(DinXName, typeof(NavaidDistanceIndicationType));
            localElementDictionary.Add(DliXName, typeof(DmeUsageLimitationType));
            localElementDictionary.Add(DmeXName, typeof(DmeType));
            localElementDictionary.Add(DpnXName, typeof(DesignatedPointType));
            localElementDictionary.Add(FaoXName, typeof(FatoOldType));
            localElementDictionary.Add(FtoXName, typeof(FatoType));
            localElementDictionary.Add(FcpXName, typeof(FatoCentreLinePositionType));
            localElementDictionary.Add(FdaXName, typeof(FatoDirectionApproachLightingType));
            localElementDictionary.Add(FddXName, typeof(FatoDirectionDeclaredDistanceType));
            localElementDictionary.Add(FdnXName, typeof(FatoDirectionType));
            localElementDictionary.Add(FdoXName, typeof(FatoDirectionObstacleType));
            localElementDictionary.Add(FdsXName, typeof(FatoDirectionStarType));
            localElementDictionary.Add(FlsXName, typeof(FatoLightingSystemType));
            localElementDictionary.Add(FpaXName, typeof(FatoProtectionAreaType));
            localElementDictionary.Add(FpgXName, typeof(FatoProtectionAreaGeometryType));
            localElementDictionary.Add(FqyXName, typeof(FrequencyType));
            localElementDictionary.Add(FulXName, typeof(FuelType));
            localElementDictionary.Add(GbrXName, typeof(GeographicalBorderType));
            localElementDictionary.Add(GsdXName, typeof(GateStandType));
            localElementDictionary.Add(HpeXName, typeof(HoldingProcedureType));
            localElementDictionary.Add(IapXName, typeof(InstrumentApproachType));
            localElementDictionary.Add(IlsXName, typeof(IlsType));
            localElementDictionary.Add(IueXName, typeof(InstrumentApproachUsageConditionType));
            localElementDictionary.Add(MgpXName, typeof(MsaGroupType));
            localElementDictionary.Add(MkrXName, typeof(MkrType));
            localElementDictionary.Add(MlsXName, typeof(MlsType));
            localElementDictionary.Add(NdbXName, typeof(NdbType));
            localElementDictionary.Add(NliXName, typeof(NdbUsageLimitationType));
            localElementDictionary.Add(NscXName, typeof(CheckpointType));
            localElementDictionary.Add(NtgXName, typeof(NitrogenType));
            localElementDictionary.Add(OaaXName, typeof(OrganisationAuthorityAddressType));
            localElementDictionary.Add(OaeXName, typeof(AirspaceObstacleType));
            localElementDictionary.Add(OasXName, typeof(OrganisationAuthorityAssociationType));
            localElementDictionary.Add(OgrXName, typeof(ObstacleGroupType));
            localElementDictionary.Add(ObsXName, typeof(ObstacleType));
            localElementDictionary.Add(OfaXName, typeof(AirspaceAuthorityType));
            localElementDictionary.Add(OilXName, typeof(OilType));
            localElementDictionary.Add(OrgXName, typeof(OrganisationAuthorityType));
            localElementDictionary.Add(OxgXName, typeof(OxygenType));
            localElementDictionary.Add(PfyXName, typeof(PassengerFacilityType));
            localElementDictionary.Add(PlbXName, typeof(CruisingLevelsTableType));
            localElementDictionary.Add(PlcXName, typeof(CruisingLevelsColumnType));
            localElementDictionary.Add(RcpXName, typeof(RunwayCentreLinePositionType));
            localElementDictionary.Add(RdaXName, typeof(RunwayDirectionApproachLightingSystemType));
            localElementDictionary.Add(RddXName, typeof(RunwayDirectionDeclaredDistanceType));
            localElementDictionary.Add(RdnXName, typeof(RunwayDirectionType));
            localElementDictionary.Add(RdoXName, typeof(RunwayDirectionObstacleType));
            localElementDictionary.Add(RdsXName, typeof(RunwayDirectionStarType));
            localElementDictionary.Add(RlsXName, typeof(RunwayDirectionLightingSystemType));
            localElementDictionary.Add(RpaXName, typeof(RunwayProtectionAreaType));
            localElementDictionary.Add(RpgXName, typeof(RunwayProtectionAreaGeometryType));
            localElementDictionary.Add(RsgXName, typeof(RouteSegmentType));
            localElementDictionary.Add(RsuXName, typeof(RouteSegmentUsageType));
            localElementDictionary.Add(RteXName, typeof(EnrouteRouteType));
            localElementDictionary.Add(RwyXName, typeof(RunwayType));
            localElementDictionary.Add(SaeXName, typeof(AirspaceServiceType));
            localElementDictionary.Add(SahXName, typeof(AerodromeHeliportServiceType));
            localElementDictionary.Add(SerXName, typeof(ServiceType));
            localElementDictionary.Add(ShpXName, typeof(HoldingProcedureServiceType));
            localElementDictionary.Add(SiaXName, typeof(StarType));
            localElementDictionary.Add(SidXName, typeof(SidType));
            localElementDictionary.Add(SipXName, typeof(InstrumentApproachServiceType));
            localElementDictionary.Add(SnsXName, typeof(SpecialNavigationSystemStationType));
            localElementDictionary.Add(SnyXName, typeof(SpecialNavigationSystemType));
            localElementDictionary.Add(SpaXName, typeof(SignificantPointAirspaceType));
            localElementDictionary.Add(SpdXName, typeof(SpecialDateType));
            localElementDictionary.Add(SrsXName, typeof(RouteSegmentServiceType));
            localElementDictionary.Add(SsdXName, typeof(SidServiceType));
            localElementDictionary.Add(SseXName, typeof(StarUsageType));
            localElementDictionary.Add(SsrXName, typeof(StarServiceType));
            localElementDictionary.Add(SueXName, typeof(SidUsageType));
            localElementDictionary.Add(SwyXName, typeof(StopwayType));
            localElementDictionary.Add(TcnXName, typeof(TacanType));
            localElementDictionary.Add(TcpXName, typeof(TaxiwayCentreLinePositionType));
            localElementDictionary.Add(TfrXName, typeof(TrafficFlowRestrictionType));
            localElementDictionary.Add(ThpXName, typeof(TaxiwayHoldingPositionType));
            localElementDictionary.Add(TlaXName, typeof(TlofType));
            localElementDictionary.Add(TlgXName, typeof(TlofGeometryType));
            localElementDictionary.Add(TliXName, typeof(TacanUsageLimitationType));
            localElementDictionary.Add(TlsXName, typeof(TlofLightingSystemType));
            localElementDictionary.Add(TlyXName, typeof(TaxiwayLightingSystemType));
            localElementDictionary.Add(TsaXName, typeof(TlofSafeAreaType));
            localElementDictionary.Add(TsgXName, typeof(TlofSafeAreaGeometryType));
            localElementDictionary.Add(TwyXName, typeof(TaxiwayType));
            localElementDictionary.Add(UacXName, typeof(UnitAssociationType));
            localElementDictionary.Add(UasXName, typeof(UnitContactAddressType));
            localElementDictionary.Add(UniXName, typeof(UnitType));
            localElementDictionary.Add(VliXName, typeof(VorUsageLimitationType));
            localElementDictionary.Add(VorXName, typeof(VorType));
            localElementDictionary.Add(LbmXName, typeof(LabelMarkerType));
            localElementDictionary.Add(AacXName, typeof(AirspaceAssocType));
            localElementDictionary.Add(DlnXName, typeof(DmeLimitationType));
            localElementDictionary.Add(NlnXName, typeof(NdbLimitationType));
            localElementDictionary.Add(TlnXName, typeof(TacanLimitationType));
            localElementDictionary.Add(VlnXName, typeof(VorLimitationType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    public sealed class alpha {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(8)), null, 0, 0, null, null, 0, null, null, 0, new string[] {
                        "[A-Z]*"}, 0, XmlSchemaWhiteSpace.Preserve));
        
        private alpha() {
        }
    }
    
    public sealed class alphanumeric {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(8)), null, 0, 0, null, null, 0, null, null, 0, new string[] {
                        "([A-Z]|\\d)*"}, 0, XmlSchemaWhiteSpace.Preserve));
        
        private alphanumeric() {
        }
    }
    
    public sealed class character1 {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(8)), null, 0, 0, null, null, 0, null, null, 0, new string[] {
                        "([A-Z]|[0-9])+([ \\+\\-/]*([A-Z]|[0-9])+)*"}, 0, XmlSchemaWhiteSpace.Preserve));
        
        private character1() {
        }
    }
    
    public sealed class character2 {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), null);
        
        private character2() {
        }
    }
    
    public sealed class character3 {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(8)), null, 0, 0, null, null, 0, null, null, 0, new string[] {
                        "([A-Z]|[0-9]|[, !\"&#$%\'\\(\\)\\*\\+\\-\\./:;<=>\\?@\\[\\\\\\]\\^_\\|\\{\\}])*"}, 0, XmlSchemaWhiteSpace.Preserve));
        
        private character3() {
        }
    }
    
    public sealed class counter {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(256)), null, 0, 0, null, null, 0, null, 1m, 0, null, 0, XmlSchemaWhiteSpace.Collapse));
        
        private counter() {
        }
    }
    
    public sealed class uuid {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(8)), null, 0, 0, null, null, 0, null, null, 0, new string[] {
                        "[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}"}, 0, XmlSchemaWhiteSpace.Preserve));
        
        private uuid() {
        }
    }
    
    /// <summary>
    /// <para>
    /// The two to four letter coded region.
    /// </para>
    /// </summary>
    public sealed class codeRegion {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(14)), null, 0, 0, null, null, 4, null, null, 2, new string[] {
                        "[A-Z]*"}, 0, XmlSchemaWhiteSpace.Preserve));
        
        private codeRegion() {
        }
    }
    
    /// <summary>
    /// <para>
    /// White space separated list of two to four letter coded regions.
    /// </para>
    /// </summary>
    public sealed class listRegions {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.ListSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), null, OFMX.codeRegion.TypeDefinition);
        
        private listRegions() {
        }
    }
    
    /// <summary>
    /// <para>
    /// Reference to the source AIP document.
    /// </para>
    /// </summary>
    public sealed class codeSource {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(8)), null, 0, 0, null, null, 0, null, null, 0, new string[] {
                        "[A-Z]{2,4}\\|(GEN|ENR|AD|AIRAC|VAC|OTHER)\\|.+\\|[\\d-]+\\|\\d+"}, 0, XmlSchemaWhiteSpace.Preserve));
        
        private codeSource() {
        }
    }
    
    public sealed class codeAcftEngineNoBase {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "1",
                        "2",
                        "3",
                        "4",
                        "6",
                        "8",
                        "C",
                        "OTHER"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private codeAcftEngineNoBase() {
        }
    }
    
    /// <summary>
    /// <para>
    /// A coded indication for the number of engines of an aircraft.
    /// </para>
    /// </summary>
    public partial class codeAcftEngineNo : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TypedValueXName = System.Xml.Linq.XName.Get("TypedValue", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("codeAcftEngineNo", "");
        
		public static explicit operator codeAcftEngineNo(XElement xe) { return XTypedServices.ToXTypedElement<codeAcftEngineNo>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// A coded indication for the number of engines of an aircraft.
        /// </para>
        /// </summary>
        public codeAcftEngineNo() {
        }
        
        public virtual string TypedValue {
            get {
                XElement x = this.Untyped;
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetValueWithValidation(value, "TypedValue", global::OFMX.codeAcftEngineNoBase.TypeDefinition);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<codeAcftEngineNo>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public sealed class codeActivityBase {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "TFC-AD",
                        "TFC-HELI",
                        "TRG",
                        "ACROBAT",
                        "AIRSHOW",
                        "SPORT",
                        "ULM",
                        "GLIDER",
                        "PARAGLIDER",
                        "HANGGLIDER",
                        "PARACHUTE",
                        "DROP",
                        "BALLOON",
                        "ASCENT",
                        "SPACEFLT",
                        "UAV",
                        "WORK",
                        "DUSTING",
                        "FIRE",
                        "MILOPS",
                        "REFUEL",
                        "JETCLIMB",
                        "EXERCISE",
                        "TOWING",
                        "NAVAL",
                        "MISSILES",
                        "AIRGUN",
                        "ARTILERY",
                        "SHOOT",
                        "BLAST",
                        "WATERBLAST",
                        "ANTIHAIL",
                        "BIRD",
                        "BIRD-MGR",
                        "FIREWORK",
                        "HI-RADIO",
                        "HI-LIGHT",
                        "LASER",
                        "NATURE",
                        "FAUNA",
                        "NO-NOISE",
                        "ACCIDENT",
                        "POPULATION",
                        "VIP",
                        "VIP-PRES",
                        "VIP-VICE",
                        "OIL",
                        "GAZ",
                        "IND-OIL",
                        "IND-CHEM",
                        "IND-NUCLEAR",
                        "TECHNICAL",
                        "ATS",
                        "EQUIPMENT",
                        "EQUIPMENT-RVSM",
                        "EQUIPMENT-RNAV",
                        "EQUIPMENT-833",
                        "PROCEDURE",
                        "AIRMODEL",
                        "WINCH",
                        "OTHER"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private codeActivityBase() {
        }
    }
    
    /// <summary>
    /// <para>
    /// code indicating the primary activity taking place in the airspace or the reason for its establishment
    /// </para>
    /// </summary>
    public partial class codeActivity : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TypedValueXName = System.Xml.Linq.XName.Get("TypedValue", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("codeActivity", "");
        
		public static explicit operator codeActivity(XElement xe) { return XTypedServices.ToXTypedElement<codeActivity>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// code indicating the primary activity taking place in the airspace or the reason for its establishment
        /// </para>
        /// </summary>
        public codeActivity() {
        }
        
        public virtual string TypedValue {
            get {
                XElement x = this.Untyped;
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetValueWithValidation(value, "TypedValue", global::OFMX.codeActivityBase.TypeDefinition);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<codeActivity>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public enum codeCatAcftBase {
        
        A,
        
        A20,
        
        B,
        
        A30,
        
        A35,
        
        C,
        
        D,
        
        E,
        
        AB,
        
        CD,
        
        CDE,
        
        BCD,
        
        ABCD,
        
        DE,
        
        ABC,
        
        H,
        
        OTHER,
    }
    
    public sealed class codeCatAcftBaseValidator {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "A",
                        "A20",
                        "B",
                        "A30",
                        "A35",
                        "C",
                        "D",
                        "E",
                        "AB",
                        "CD",
                        "CDE",
                        "BCD",
                        "ABCD",
                        "DE",
                        "ABC",
                        "H",
                        "OTHER"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private codeCatAcftBaseValidator() {
        }
    }
    
    /// <summary>
    /// <para>
    /// Classification of aircraft based on 1.3 times stall speed in landing configuration at maximum certified landing mass.    Category A: - less than 169 km/h (91 kt) IAS  Category B: - 169 km/h (91 kt) or more but less than 224 km/h (121 kt) IAS  Category C: - 224 km/h (121 kt) or more but less than 261 km/h (141 kt) IAS  Category D: - 261 km/h (141 kt) or more but less than 307 km/h (166 kt) IAS  Category E: - 307 km/h (166 kt) or more but less than 391 km/h (211 kt) IAS  Category E: - helicopter (the stall speed method of calculating aircraft category does not apply)  Category H: - helicopter (the stall speed method of calculating aircraft category does not apply)    (IAS = indicated air speed)
    /// </para>
    /// </summary>
    public partial class codeCatAcft : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TypedValueXName = System.Xml.Linq.XName.Get("TypedValue", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("codeCatAcft", "");
        
		public static explicit operator codeCatAcft(XElement xe) { return XTypedServices.ToXTypedElement<codeCatAcft>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// Classification of aircraft based on 1.3 times stall speed in landing configuration at maximum certified landing mass.    Category A: - less than 169 km/h (91 kt) IAS  Category B: - 169 km/h (91 kt) or more but less than 224 km/h (121 kt) IAS  Category C: - 224 km/h (121 kt) or more but less than 261 km/h (141 kt) IAS  Category D: - 261 km/h (141 kt) or more but less than 307 km/h (166 kt) IAS  Category E: - 307 km/h (166 kt) or more but less than 391 km/h (211 kt) IAS  Category E: - helicopter (the stall speed method of calculating aircraft category does not apply)  Category H: - helicopter (the stall speed method of calculating aircraft category does not apply)    (IAS = indicated air speed)
        /// </para>
        /// </summary>
        public codeCatAcft() {
        }
        
        public virtual OFMX.codeCatAcftBase TypedValue {
            get {
                XElement x = this.Untyped;
                return ((OFMX.codeCatAcftBase)(Enum.Parse(typeof(OFMX.codeCatAcftBase), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetValueWithValidation(value.ToString(), "TypedValue", global::OFMX.codeCatAcftBaseValidator.TypeDefinition);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<codeCatAcft>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public enum codeCatFireAdBase {
        
        H1,
        
        H2,
        
        H3,
        
        A1,
        
        A2,
        
        A3,
        
        A4,
        
        A5,
        
        A6,
        
        A7,
        
        A8,
        
        A9,
        
        A10,
        
        OTHER,
    }
    
    public sealed class codeCatFireAdBaseValidator {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "H1",
                        "H2",
                        "H3",
                        "A1",
                        "A2",
                        "A3",
                        "A4",
                        "A5",
                        "A6",
                        "A7",
                        "A8",
                        "A9",
                        "A10",
                        "OTHER"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private codeCatFireAdBaseValidator() {
        }
    }
    
    /// <summary>
    /// <para>
    /// A code indicating the category of the fire fighting service provided at the aerodrome/heliport.
    /// </para>
    /// </summary>
    public partial class codeCatFireAd : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TypedValueXName = System.Xml.Linq.XName.Get("TypedValue", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("codeCatFireAd", "");
        
		public static explicit operator codeCatFireAd(XElement xe) { return XTypedServices.ToXTypedElement<codeCatFireAd>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// A code indicating the category of the fire fighting service provided at the aerodrome/heliport.
        /// </para>
        /// </summary>
        public codeCatFireAd() {
        }
        
        public virtual OFMX.codeCatFireAdBase TypedValue {
            get {
                XElement x = this.Untyped;
                return ((OFMX.codeCatFireAdBase)(Enum.Parse(typeof(OFMX.codeCatFireAdBase), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetValueWithValidation(value.ToString(), "TypedValue", global::OFMX.codeCatFireAdBaseValidator.TypeDefinition);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<codeCatFireAd>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public sealed class codeCatFuelBase {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "AVGAS",
                        "AVGAS-LL",
                        "OCT73",
                        "OCT80",
                        "OCT82UL",
                        "OCT80-87",
                        "OCT91-98",
                        "OCT100-130",
                        "OCT108-135",
                        "OCT115-145",
                        "MOGAS",
                        "JET",
                        "A",
                        "A1",
                        "A1+",
                        "B",
                        "JP1",
                        "JP2",
                        "JP3",
                        "JP4",
                        "JP5",
                        "JP6",
                        "JPTS",
                        "JP7",
                        "JP8",
                        "JP8+100",
                        "JP9",
                        "JP10",
                        "F-18",
                        "F-18",
                        "F-34",
                        "F-35",
                        "F-40",
                        "F-44",
                        "TR0",
                        "TR4",
                        "TS-1",
                        "RT",
                        "DIESEL",
                        "OCT100",
                        "ALL",
                        "OTHER"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private codeCatFuelBase() {
        }
    }
    
    /// <summary>
    /// <para>
    /// A code indicating the category of fuel available at an aerodrome/heliport.
    /// </para>
    /// </summary>
    public partial class codeCatFuel : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TypedValueXName = System.Xml.Linq.XName.Get("TypedValue", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("codeCatFuel", "");
        
		public static explicit operator codeCatFuel(XElement xe) { return XTypedServices.ToXTypedElement<codeCatFuel>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// A code indicating the category of fuel available at an aerodrome/heliport.
        /// </para>
        /// </summary>
        public codeCatFuel() {
        }
        
        public virtual string TypedValue {
            get {
                XElement x = this.Untyped;
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetValueWithValidation(value, "TypedValue", global::OFMX.codeCatFuelBase.TypeDefinition);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<codeCatFuel>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public enum codeCatLdgAidBase {
        
        I,
        
        II,
        
        III,
        
        IIIA,
        
        IIIB,
        
        IIIC,
        
        NOCAT,
    }
    
    public sealed class codeCatLdgAidBaseValidator {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "I",
                        "II",
                        "III",
                        "IIIA",
                        "IIIB",
                        "IIIC",
                        "NOCAT"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private codeCatLdgAidBaseValidator() {
        }
    }
    
    /// <summary>
    /// <para>
    /// A code indicating the category of a landing aid.
    /// </para>
    /// </summary>
    public partial class codeCatLdgAid : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TypedValueXName = System.Xml.Linq.XName.Get("TypedValue", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("codeCatLdgAid", "");
        
		public static explicit operator codeCatLdgAid(XElement xe) { return XTypedServices.ToXTypedElement<codeCatLdgAid>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// A code indicating the category of a landing aid.
        /// </para>
        /// </summary>
        public codeCatLdgAid() {
        }
        
        public virtual OFMX.codeCatLdgAidBase TypedValue {
            get {
                XElement x = this.Untyped;
                return ((OFMX.codeCatLdgAidBase)(Enum.Parse(typeof(OFMX.codeCatLdgAidBase), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetValueWithValidation(value.ToString(), "TypedValue", global::OFMX.codeCatLdgAidBaseValidator.TypeDefinition);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<codeCatLdgAid>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public enum codeCatOilBase {
        
        AVIA,
        
        PISTON,
        
        TURBO,
        
        HYD,
        
        OTHER,
    }
    
    public sealed class codeCatOilBaseValidator {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "AVIA",
                        "PISTON",
                        "TURBO",
                        "HYD",
                        "OTHER"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private codeCatOilBaseValidator() {
        }
    }
    
    /// <summary>
    /// <para>
    /// A code indicating the category of oil available at an aerodrome/heliport.
    /// </para>
    /// </summary>
    public partial class codeCatOil : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TypedValueXName = System.Xml.Linq.XName.Get("TypedValue", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("codeCatOil", "");
        
		public static explicit operator codeCatOil(XElement xe) { return XTypedServices.ToXTypedElement<codeCatOil>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// A code indicating the category of oil available at an aerodrome/heliport.
        /// </para>
        /// </summary>
        public codeCatOil() {
        }
        
        public virtual OFMX.codeCatOilBase TypedValue {
            get {
                XElement x = this.Untyped;
                return ((OFMX.codeCatOilBase)(Enum.Parse(typeof(OFMX.codeCatOilBase), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetValueWithValidation(value.ToString(), "TypedValue", global::OFMX.codeCatOilBaseValidator.TypeDefinition);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<codeCatOil>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public sealed class codeChannelDmeBase {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "1X",
                        "1Y",
                        "2X",
                        "2Y",
                        "3X",
                        "3Y",
                        "4X",
                        "4Y",
                        "5X",
                        "5Y",
                        "6X",
                        "6Y",
                        "7X",
                        "7Y",
                        "8X",
                        "8Y",
                        "9X",
                        "9Y",
                        "10X",
                        "10Y",
                        "11X",
                        "11Y",
                        "12X",
                        "12Y",
                        "13X",
                        "13Y",
                        "14X",
                        "14Y",
                        "15X",
                        "15Y",
                        "16X",
                        "16Y",
                        "17X",
                        "17Y",
                        "17Z",
                        "18X",
                        "18W",
                        "18Y",
                        "18Z",
                        "19X",
                        "19Y",
                        "19Z",
                        "20X",
                        "20W",
                        "20Y",
                        "20Z",
                        "21X",
                        "21Y",
                        "21Z",
                        "22X",
                        "22W",
                        "22Y",
                        "22Z",
                        "23X",
                        "23Y",
                        "23Z",
                        "24X",
                        "24W",
                        "24Y",
                        "24Z",
                        "25X",
                        "25Y",
                        "25Z",
                        "26X",
                        "26W",
                        "26Y",
                        "26Z",
                        "27X",
                        "27Y",
                        "27Z",
                        "28X",
                        "28W",
                        "28Y",
                        "28Z",
                        "29X",
                        "29Y",
                        "29Z",
                        "30X",
                        "30W",
                        "30Y",
                        "30Z",
                        "31X",
                        "31Y",
                        "31Z",
                        "32X",
                        "32W",
                        "32Y",
                        "32Z",
                        "33X",
                        "33Y",
                        "33Z",
                        "34X",
                        "34W",
                        "34Y",
                        "34Z",
                        "35X",
                        "35Y",
                        "35Z",
                        "36X",
                        "36W",
                        "36Y",
                        "36Z",
                        "37X",
                        "37Y",
                        "37Z",
                        "38X",
                        "38W",
                        "38Y",
                        "38Z",
                        "39X",
                        "39Y",
                        "39Z",
                        "40X",
                        "40W",
                        "40Y",
                        "40Z",
                        "41X",
                        "41Y",
                        "41Z",
                        "42X",
                        "42W",
                        "42Y",
                        "42Z",
                        "43X",
                        "43Y",
                        "43Z",
                        "44X",
                        "44W",
                        "44Y",
                        "44Z",
                        "45X",
                        "45Y",
                        "45Z",
                        "46X",
                        "46W",
                        "46Y",
                        "46Z",
                        "47X",
                        "47Y",
                        "47Z",
                        "48X",
                        "48W",
                        "48Y",
                        "48Z",
                        "49X",
                        "49Y",
                        "49Z",
                        "50X",
                        "50W",
                        "50Y",
                        "50Z",
                        "51X",
                        "51Y",
                        "51Z",
                        "52X",
                        "52W",
                        "52Y",
                        "52Z",
                        "53X",
                        "53Y",
                        "53Z",
                        "54X",
                        "54W",
                        "54Y",
                        "54Z",
                        "55X",
                        "55Y",
                        "55Z",
                        "56X",
                        "56W",
                        "56Y",
                        "56Z",
                        "57X",
                        "57Y",
                        "58X",
                        "58Y",
                        "59X",
                        "59Y",
                        "60X",
                        "60Y",
                        "61X",
                        "61Y",
                        "62X",
                        "62Y",
                        "63X",
                        "63Y",
                        "64X",
                        "64Y",
                        "65X",
                        "65Y",
                        "66X",
                        "66Y",
                        "67X",
                        "67Y",
                        "68X",
                        "68Y",
                        "69X",
                        "69Y",
                        "70X",
                        "70Y",
                        "71X",
                        "71Y",
                        "72X",
                        "72Y",
                        "73X",
                        "73Y",
                        "74X",
                        "74Y",
                        "75X",
                        "75Y",
                        "76X",
                        "76Y",
                        "77X",
                        "77Y",
                        "78X",
                        "78Y",
                        "79X",
                        "79Y",
                        "80X",
                        "80Y",
                        "80Z",
                        "81X",
                        "81Y",
                        "81Z",
                        "82X",
                        "82Y",
                        "82Z",
                        "83X",
                        "83Y",
                        "83Z",
                        "84X",
                        "84Y",
                        "84Z",
                        "85X",
                        "85Y",
                        "85Z",
                        "86X",
                        "86Y",
                        "86Z",
                        "87X",
                        "87Y",
                        "87Z",
                        "88X",
                        "88Y",
                        "88Z",
                        "89X",
                        "89Y",
                        "89Z",
                        "90X",
                        "90Y",
                        "90Z",
                        "91X",
                        "91Y",
                        "91Z",
                        "92X",
                        "92Y",
                        "92Z",
                        "93X",
                        "93Y",
                        "93Z",
                        "94X",
                        "94Y",
                        "94Z",
                        "95X",
                        "95Y",
                        "95Z",
                        "96X",
                        "96Y",
                        "96Z",
                        "97X",
                        "97Y",
                        "97Z",
                        "98X",
                        "98Y",
                        "98Z",
                        "99X",
                        "99Y",
                        "99Z",
                        "100X",
                        "100Y",
                        "100Z",
                        "101X",
                        "101Y",
                        "101Z",
                        "102X",
                        "102Y",
                        "102Z",
                        "103X",
                        "103Y",
                        "103Z",
                        "104X",
                        "104Y",
                        "104Z",
                        "105X",
                        "105Y",
                        "105Z",
                        "106X",
                        "106Y",
                        "106Z",
                        "107X",
                        "107Y",
                        "107Z",
                        "108X",
                        "108Y",
                        "108Z",
                        "109X",
                        "109Y",
                        "109Z",
                        "110X",
                        "110Y",
                        "110Z",
                        "111X",
                        "111Y",
                        "111Z",
                        "112X",
                        "112Y",
                        "112Z",
                        "113X",
                        "113Y",
                        "113Z",
                        "114X",
                        "114Y",
                        "114Z",
                        "115X",
                        "115Y",
                        "115Z",
                        "116X",
                        "116Y",
                        "116Z",
                        "117X",
                        "117Y",
                        "117Z",
                        "118X",
                        "118Y",
                        "118Z",
                        "119X",
                        "119Y",
                        "119Z",
                        "120X",
                        "120Y",
                        "121X",
                        "121Y",
                        "122X",
                        "122Y",
                        "123X",
                        "123Y",
                        "124X",
                        "124Y",
                        "125X",
                        "125Y",
                        "126X",
                        "126Y",
                        "OTHER"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private codeChannelDmeBase() {
        }
    }
    
    /// <summary>
    /// <para>
    /// A code indicating the channel of an MLS.  
    /// </para>
    /// </summary>
    public partial class codeChannelDme : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TypedValueXName = System.Xml.Linq.XName.Get("TypedValue", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("codeChannelDme", "");
        
		public static explicit operator codeChannelDme(XElement xe) { return XTypedServices.ToXTypedElement<codeChannelDme>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// A code indicating the channel of an MLS.  
        /// </para>
        /// </summary>
        public codeChannelDme() {
        }
        
        public virtual string TypedValue {
            get {
                XElement x = this.Untyped;
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetValueWithValidation(value, "TypedValue", global::OFMX.codeChannelDmeBase.TypeDefinition);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<codeChannelDme>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public sealed class codeChannelMlsBase {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "500",
                        "501",
                        "502",
                        "503",
                        "504",
                        "505",
                        "506",
                        "507",
                        "508",
                        "509",
                        "510",
                        "511",
                        "512",
                        "513",
                        "514",
                        "515",
                        "516",
                        "517",
                        "518",
                        "519",
                        "520",
                        "521",
                        "522",
                        "523",
                        "524",
                        "525",
                        "526",
                        "527",
                        "528",
                        "529",
                        "530",
                        "531",
                        "532",
                        "533",
                        "534",
                        "535",
                        "536",
                        "537",
                        "538",
                        "539",
                        "540",
                        "541",
                        "542",
                        "543",
                        "544",
                        "545",
                        "546",
                        "547",
                        "548",
                        "549",
                        "550",
                        "551",
                        "552",
                        "553",
                        "554",
                        "555",
                        "556",
                        "557",
                        "558",
                        "559",
                        "560",
                        "561",
                        "562",
                        "563",
                        "564",
                        "565",
                        "566",
                        "567",
                        "568",
                        "569",
                        "570",
                        "571",
                        "572",
                        "573",
                        "574",
                        "575",
                        "576",
                        "577",
                        "578",
                        "579",
                        "580",
                        "581",
                        "582",
                        "583",
                        "584",
                        "585",
                        "586",
                        "587",
                        "588",
                        "589",
                        "590",
                        "591",
                        "592",
                        "593",
                        "594",
                        "595",
                        "596",
                        "597",
                        "598",
                        "599",
                        "600",
                        "601",
                        "602",
                        "603",
                        "604",
                        "605",
                        "606",
                        "607",
                        "608",
                        "609",
                        "610",
                        "611",
                        "612",
                        "613",
                        "614",
                        "615",
                        "616",
                        "617",
                        "618",
                        "619",
                        "620",
                        "621",
                        "622",
                        "623",
                        "624",
                        "625",
                        "626",
                        "627",
                        "628",
                        "629",
                        "630",
                        "631",
                        "632",
                        "633",
                        "634",
                        "635",
                        "636",
                        "637",
                        "638",
                        "639",
                        "640",
                        "641",
                        "642",
                        "643",
                        "644",
                        "645",
                        "646",
                        "647",
                        "648",
                        "649",
                        "650",
                        "651",
                        "652",
                        "653",
                        "654",
                        "655",
                        "656",
                        "657",
                        "658",
                        "659",
                        "660",
                        "661",
                        "662",
                        "663",
                        "664",
                        "665",
                        "666",
                        "667",
                        "668",
                        "669",
                        "670",
                        "671",
                        "672",
                        "673",
                        "674",
                        "675",
                        "676",
                        "677",
                        "678",
                        "679",
                        "680",
                        "681",
                        "682",
                        "683",
                        "684",
                        "685",
                        "686",
                        "687",
                        "688",
                        "689",
                        "690",
                        "691",
                        "692",
                        "693",
                        "694",
                        "695",
                        "696",
                        "697",
                        "698",
                        "699",
                        "OTHER"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private codeChannelMlsBase() {
        }
    }
    
    /// <summary>
    /// <para>
    /// A code indicating the channel of an MLS.  
    /// </para>
    /// </summary>
    public partial class codeChannelMls : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TypedValueXName = System.Xml.Linq.XName.Get("TypedValue", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("codeChannelMls", "");
        
		public static explicit operator codeChannelMls(XElement xe) { return XTypedServices.ToXTypedElement<codeChannelMls>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// A code indicating the channel of an MLS.  
        /// </para>
        /// </summary>
        public codeChannelMls() {
        }
        
        public virtual string TypedValue {
            get {
                XElement x = this.Untyped;
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetValueWithValidation(value, "TypedValue", global::OFMX.codeChannelMlsBase.TypeDefinition);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<codeChannelMls>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public sealed class codeChannelTacanBase {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "1X",
                        "1Y",
                        "2X",
                        "2Y",
                        "3X",
                        "3Y",
                        "4X",
                        "4Y",
                        "5X",
                        "5Y",
                        "6X",
                        "6Y",
                        "7X",
                        "7Y",
                        "8X",
                        "8Y",
                        "9X",
                        "9Y",
                        "10X",
                        "10Y",
                        "11X",
                        "11Y",
                        "12X",
                        "12Y",
                        "13X",
                        "13Y",
                        "14X",
                        "14Y",
                        "15X",
                        "15Y",
                        "16X",
                        "16Y",
                        "17X",
                        "17Y",
                        "17Z",
                        "18X",
                        "18W",
                        "18Y",
                        "18Z",
                        "19X",
                        "19Y",
                        "19Z",
                        "20X",
                        "20W",
                        "20Y",
                        "20Z",
                        "21X",
                        "21Y",
                        "21Z",
                        "22X",
                        "22W",
                        "22Y",
                        "22Z",
                        "23X",
                        "23Y",
                        "23Z",
                        "24X",
                        "24W",
                        "24Y",
                        "24Z",
                        "25X",
                        "25Y",
                        "25Z",
                        "26X",
                        "26W",
                        "26Y",
                        "26Z",
                        "27X",
                        "27Y",
                        "27Z",
                        "28X",
                        "28W",
                        "28Y",
                        "28Z",
                        "29X",
                        "29Y",
                        "29Z",
                        "30X",
                        "30W",
                        "30Y",
                        "30Z",
                        "31X",
                        "31Y",
                        "31Z",
                        "32X",
                        "32W",
                        "32Y",
                        "32Z",
                        "33X",
                        "33Y",
                        "33Z",
                        "34X",
                        "34W",
                        "34Y",
                        "34Z",
                        "35X",
                        "35Y",
                        "35Z",
                        "36X",
                        "36W",
                        "36Y",
                        "36Z",
                        "37X",
                        "37Y",
                        "37Z",
                        "38X",
                        "38W",
                        "38Y",
                        "38Z",
                        "39X",
                        "39Y",
                        "39Z",
                        "40X",
                        "40W",
                        "40Y",
                        "40Z",
                        "41X",
                        "41Y",
                        "41Z",
                        "42X",
                        "42W",
                        "42Y",
                        "42Z",
                        "43X",
                        "43Y",
                        "43Z",
                        "44X",
                        "44W",
                        "44Y",
                        "44Z",
                        "45X",
                        "45Y",
                        "45Z",
                        "46X",
                        "46W",
                        "46Y",
                        "46Z",
                        "47X",
                        "47Y",
                        "47Z",
                        "48X",
                        "48W",
                        "48Y",
                        "48Z",
                        "49X",
                        "49Y",
                        "49Z",
                        "50X",
                        "50W",
                        "50Y",
                        "50Z",
                        "51X",
                        "51Y",
                        "51Z",
                        "52X",
                        "52W",
                        "52Y",
                        "52Z",
                        "53X",
                        "53Y",
                        "53Z",
                        "54X",
                        "54W",
                        "54Y",
                        "54Z",
                        "55X",
                        "55Y",
                        "55Z",
                        "56X",
                        "56W",
                        "56Y",
                        "56Z",
                        "57X",
                        "57Y",
                        "58X",
                        "58Y",
                        "59X",
                        "59Y",
                        "60X",
                        "60Y",
                        "61X",
                        "61Y",
                        "62X",
                        "62Y",
                        "63X",
                        "63Y",
                        "64X",
                        "64Y",
                        "65X",
                        "65Y",
                        "66X",
                        "66Y",
                        "67X",
                        "67Y",
                        "68X",
                        "68Y",
                        "69X",
                        "69Y",
                        "70X",
                        "70Y",
                        "71X",
                        "71Y",
                        "72X",
                        "72Y",
                        "73X",
                        "73Y",
                        "74X",
                        "74Y",
                        "75X",
                        "75Y",
                        "76X",
                        "76Y",
                        "77X",
                        "77Y",
                        "78X",
                        "78Y",
                        "79X",
                        "79Y",
                        "80X",
                        "80Y",
                        "80Z",
                        "81X",
                        "81Y",
                        "81Z",
                        "82X",
                        "82Y",
                        "82Z",
                        "83X",
                        "83Y",
                        "83Z",
                        "84X",
                        "84Y",
                        "84Z",
                        "85X",
                        "85Y",
                        "85Z",
                        "86X",
                        "86Y",
                        "86Z",
                        "87X",
                        "87Y",
                        "87Z",
                        "88X",
                        "88Y",
                        "88Z",
                        "89X",
                        "89Y",
                        "89Z",
                        "90X",
                        "90Y",
                        "90Z",
                        "91X",
                        "91Y",
                        "91Z",
                        "92X",
                        "92Y",
                        "92Z",
                        "93X",
                        "93Y",
                        "93Z",
                        "94X",
                        "94Y",
                        "94Z",
                        "95X",
                        "95Y",
                        "95Z",
                        "96X",
                        "96Y",
                        "96Z",
                        "97X",
                        "97Y",
                        "97Z",
                        "98X",
                        "98Y",
                        "98Z",
                        "99X",
                        "99Y",
                        "99Z",
                        "100X",
                        "100Y",
                        "100Z",
                        "101X",
                        "101Y",
                        "101Z",
                        "102X",
                        "102Y",
                        "102Z",
                        "103X",
                        "103Y",
                        "103Z",
                        "104X",
                        "104Y",
                        "104Z",
                        "105X",
                        "105Y",
                        "105Z",
                        "106X",
                        "106Y",
                        "106Z",
                        "107X",
                        "107Y",
                        "107Z",
                        "108X",
                        "108Y",
                        "108Z",
                        "109X",
                        "109Y",
                        "109Z",
                        "110X",
                        "110Y",
                        "110Z",
                        "111X",
                        "111Y",
                        "111Z",
                        "112X",
                        "112Y",
                        "112Z",
                        "113X",
                        "113Y",
                        "113Z",
                        "114X",
                        "114Y",
                        "114Z",
                        "115X",
                        "115Y",
                        "115Z",
                        "116X",
                        "116Y",
                        "116Z",
                        "117X",
                        "117Y",
                        "117Z",
                        "118X",
                        "118Y",
                        "118Z",
                        "119X",
                        "119Y",
                        "119Z",
                        "120X",
                        "120Y",
                        "121X",
                        "121Y",
                        "122X",
                        "122Y",
                        "123X",
                        "123Y",
                        "124X",
                        "124Y",
                        "125X",
                        "125Y",
                        "126X",
                        "126Y",
                        "OTHER"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private codeChannelTacanBase() {
        }
    }
    
    /// <summary>
    /// <para>
    /// A code indicating the channel of a TACAN.  
    /// </para>
    /// </summary>
    public partial class codeChannelTacan : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TypedValueXName = System.Xml.Linq.XName.Get("TypedValue", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("codeChannelTacan", "");
        
		public static explicit operator codeChannelTacan(XElement xe) { return XTypedServices.ToXTypedElement<codeChannelTacan>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// A code indicating the channel of a TACAN.  
        /// </para>
        /// </summary>
        public codeChannelTacan() {
        }
        
        public virtual string TypedValue {
            get {
                XElement x = this.Untyped;
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetValueWithValidation(value, "TypedValue", global::OFMX.codeChannelTacanBase.TypeDefinition);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<codeChannelTacan>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public enum codeCivRteBase {
        
        C,
        
        M,
        
        B,
        
        OTHER,
    }
    
    public sealed class codeCivRteBaseValidator {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "C",
                        "M",
                        "B",
                        "OTHER"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private codeCivRteBaseValidator() {
        }
    }
    
    /// <summary>
    /// <para>
    /// Code indicating if a route is available for civil aviation or not.
    /// </para>
    /// </summary>
    public partial class codeCivRte : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TypedValueXName = System.Xml.Linq.XName.Get("TypedValue", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("codeCivRte", "");
        
		public static explicit operator codeCivRte(XElement xe) { return XTypedServices.ToXTypedElement<codeCivRte>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// Code indicating if a route is available for civil aviation or not.
        /// </para>
        /// </summary>
        public codeCivRte() {
        }
        
        public virtual OFMX.codeCivRteBase TypedValue {
            get {
                XElement x = this.Untyped;
                return ((OFMX.codeCivRteBase)(Enum.Parse(typeof(OFMX.codeCivRteBase), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetValueWithValidation(value.ToString(), "TypedValue", global::OFMX.codeCivRteBaseValidator.TypeDefinition);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<codeCivRte>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public enum codeClassAcftBase {
        
        J,
        
        P,
        
        H,
        
        HP,
        
        ALL,
        
        JP,
        
        OTHER,
    }
    
    public sealed class codeClassAcftBaseValidator {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "J",
                        "P",
                        "H",
                        "HP",
                        "ALL",
                        "JP",
                        "OTHER"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private codeClassAcftBaseValidator() {
        }
    }
    
    /// <summary>
    /// <para>
    /// Code of the class of aircraft that may use the route (e.g., jet, heli, prop).
    /// </para>
    /// </summary>
    public partial class codeClassAcft : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TypedValueXName = System.Xml.Linq.XName.Get("TypedValue", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("codeClassAcft", "");
        
		public static explicit operator codeClassAcft(XElement xe) { return XTypedServices.ToXTypedElement<codeClassAcft>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// Code of the class of aircraft that may use the route (e.g., jet, heli, prop).
        /// </para>
        /// </summary>
        public codeClassAcft() {
        }
        
        public virtual OFMX.codeClassAcftBase TypedValue {
            get {
                XElement x = this.Untyped;
                return ((OFMX.codeClassAcftBase)(Enum.Parse(typeof(OFMX.codeClassAcftBase), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetValueWithValidation(value.ToString(), "TypedValue", global::OFMX.codeClassAcftBaseValidator.TypeDefinition);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<codeClassAcft>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public enum codeClassAsBase {
        
        A,
        
        B,
        
        C,
        
        D,
        
        E,
        
        F,
        
        G,
        
        OTHER,
    }
    
    public sealed class codeClassAsBaseValidator {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "A",
                        "B",
                        "C",
                        "D",
                        "E",
                        "F",
                        "G",
                        "OTHER"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private codeClassAsBaseValidator() {
        }
    }
    
    /// <summary>
    /// <para>
    /// One letter code for the type of airspace according to Annex 11, Appendix 4.
    /// </para>
    /// </summary>
    public partial class codeClassAs : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TypedValueXName = System.Xml.Linq.XName.Get("TypedValue", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("codeClassAs", "");
        
		public static explicit operator codeClassAs(XElement xe) { return XTypedServices.ToXTypedElement<codeClassAs>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// One letter code for the type of airspace according to Annex 11, Appendix 4.
        /// </para>
        /// </summary>
        public codeClassAs() {
        }
        
        public virtual OFMX.codeClassAsBase TypedValue {
            get {
                XElement x = this.Untyped;
                return ((OFMX.codeClassAsBase)(Enum.Parse(typeof(OFMX.codeClassAsBase), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetValueWithValidation(value.ToString(), "TypedValue", global::OFMX.codeClassAsBaseValidator.TypeDefinition);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<codeClassAs>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public sealed class codeClassHelBase {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "1",
                        "2",
                        "3",
                        "OTHER"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private codeClassHelBase() {
        }
    }
    
    /// <summary>
    /// <para>
    /// A code indicating the performance class of a helicopter.
    /// </para>
    /// </summary>
    public partial class codeClassHel : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TypedValueXName = System.Xml.Linq.XName.Get("TypedValue", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("codeClassHel", "");
        
		public static explicit operator codeClassHel(XElement xe) { return XTypedServices.ToXTypedElement<codeClassHel>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// A code indicating the performance class of a helicopter.
        /// </para>
        /// </summary>
        public codeClassHel() {
        }
        
        public virtual string TypedValue {
            get {
                XElement x = this.Untyped;
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetValueWithValidation(value, "TypedValue", global::OFMX.codeClassHelBase.TypeDefinition);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<codeClassHel>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public enum codeClassMkrBase {
        
        FM,
        
        LFM,
        
        Z,
        
        OTHER,
    }
    
    public sealed class codeClassMkrBaseValidator {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "FM",
                        "LFM",
                        "Z",
                        "OTHER"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private codeClassMkrBaseValidator() {
        }
    }
    
    /// <summary>
    /// <para>
    /// A code indicating the class of a radio marker.
    /// </para>
    /// </summary>
    public partial class codeClassMkr : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TypedValueXName = System.Xml.Linq.XName.Get("TypedValue", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("codeClassMkr", "");
        
		public static explicit operator codeClassMkr(XElement xe) { return XTypedServices.ToXTypedElement<codeClassMkr>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// A code indicating the class of a radio marker.
        /// </para>
        /// </summary>
        public codeClassMkr() {
        }
        
        public virtual OFMX.codeClassMkrBase TypedValue {
            get {
                XElement x = this.Untyped;
                return ((OFMX.codeClassMkrBase)(Enum.Parse(typeof(OFMX.codeClassMkrBase), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetValueWithValidation(value.ToString(), "TypedValue", global::OFMX.codeClassMkrBaseValidator.TypeDefinition);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<codeClassMkr>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public enum codeClassNdbBase {
        
        B,
        
        L,
        
        M,
        
        OTHER,
    }
    
    public sealed class codeClassNdbBaseValidator {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "B",
                        "L",
                        "M",
                        "OTHER"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private codeClassNdbBaseValidator() {
        }
    }
    
    /// <summary>
    /// <para>
    /// A code indicating the class of an NDB.
    /// </para>
    /// </summary>
    public partial class codeClassNdb : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TypedValueXName = System.Xml.Linq.XName.Get("TypedValue", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("codeClassNdb", "");
        
		public static explicit operator codeClassNdb(XElement xe) { return XTypedServices.ToXTypedElement<codeClassNdb>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// A code indicating the class of an NDB.
        /// </para>
        /// </summary>
        public codeClassNdb() {
        }
        
        public virtual OFMX.codeClassNdbBase TypedValue {
            get {
                XElement x = this.Untyped;
                return ((OFMX.codeClassNdbBase)(Enum.Parse(typeof(OFMX.codeClassNdbBase), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetValueWithValidation(value.ToString(), "TypedValue", global::OFMX.codeClassNdbBaseValidator.TypeDefinition);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<codeClassNdb>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public enum codeClassUnitBase {
        
        ICAO,
        
        OTHER,
    }
    
    public sealed class codeClassUnitBaseValidator {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "ICAO",
                        "OTHER"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private codeClassUnitBaseValidator() {
        }
    }
    
    /// <summary>
    /// <para>
    /// A code indicating a class of unit (depending on the service  provided).
    /// </para>
    /// </summary>
    public partial class codeClassUnit : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TypedValueXName = System.Xml.Linq.XName.Get("TypedValue", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("codeClassUnit", "");
        
		public static explicit operator codeClassUnit(XElement xe) { return XTypedServices.ToXTypedElement<codeClassUnit>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// A code indicating a class of unit (depending on the service  provided).
        /// </para>
        /// </summary>
        public codeClassUnit() {
        }
        
        public virtual OFMX.codeClassUnitBase TypedValue {
            get {
                XElement x = this.Untyped;
                return ((OFMX.codeClassUnitBase)(Enum.Parse(typeof(OFMX.codeClassUnitBase), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetValueWithValidation(value.ToString(), "TypedValue", global::OFMX.codeClassUnitBaseValidator.TypeDefinition);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<codeClassUnit>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public enum codeColourBase {
        
        YEL,
        
        RED,
        
        WHI,
        
        BLU,
        
        GRN,
        
        PRP,
        
        OTHER,
    }
    
    public sealed class codeColourBaseValidator {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "YEL",
                        "RED",
                        "WHI",
                        "BLU",
                        "GRN",
                        "PRP",
                        "OTHER"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private codeColourBaseValidator() {
        }
    }
    
    /// <summary>
    /// <para>
    /// A code indicating a colour. The list of allowable values comprises 'named' colours, not colours being only describable using the RGB or the CYMK or another colour system combination.
    /// </para>
    /// </summary>
    public partial class codeColour : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TypedValueXName = System.Xml.Linq.XName.Get("TypedValue", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("codeColour", "");
        
		public static explicit operator codeColour(XElement xe) { return XTypedServices.ToXTypedElement<codeColour>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// A code indicating a colour. The list of allowable values comprises 'named' colours, not colours being only describable using the RGB or the CYMK or another colour system combination.
        /// </para>
        /// </summary>
        public codeColour() {
        }
        
        public virtual OFMX.codeColourBase TypedValue {
            get {
                XElement x = this.Untyped;
                return ((OFMX.codeColourBase)(Enum.Parse(typeof(OFMX.codeColourBase), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetValueWithValidation(value.ToString(), "TypedValue", global::OFMX.codeColourBaseValidator.TypeDefinition);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<codeColour>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public enum codeCombTimeEventBase {
        
        E,
        
        L,
    }
    
    public sealed class codeCombTimeEventBaseValidator {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "E",
                        "L"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private codeCombTimeEventBaseValidator() {
        }
    }
    
    /// <summary>
    /// <para>
    /// A code indicating which event in a list of events in time should be given precedence over the others. E.g. the earliest or the latest.
    /// </para>
    /// </summary>
    public partial class codeCombTimeEvent : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TypedValueXName = System.Xml.Linq.XName.Get("TypedValue", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("codeCombTimeEvent", "");
        
		public static explicit operator codeCombTimeEvent(XElement xe) { return XTypedServices.ToXTypedElement<codeCombTimeEvent>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// A code indicating which event in a list of events in time should be given precedence over the others. E.g. the earliest or the latest.
        /// </para>
        /// </summary>
        public codeCombTimeEvent() {
        }
        
        public virtual OFMX.codeCombTimeEventBase TypedValue {
            get {
                XElement x = this.Untyped;
                return ((OFMX.codeCombTimeEventBase)(Enum.Parse(typeof(OFMX.codeCombTimeEventBase), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetValueWithValidation(value.ToString(), "TypedValue", global::OFMX.codeCombTimeEventBaseValidator.TypeDefinition);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<codeCombTimeEvent>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public enum codeComparisonBase {
        
        L,
        
        LE,
        
        E,
        
        GE,
        
        G,
    }
    
    public sealed class codeComparisonBaseValidator {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "L",
                        "LE",
                        "E",
                        "GE",
                        "G"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private codeComparisonBaseValidator() {
        }
    }
    
    /// <summary>
    /// <para>
    /// A list of comparison operators.
    /// </para>
    /// </summary>
    public partial class codeComparison : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TypedValueXName = System.Xml.Linq.XName.Get("TypedValue", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("codeComparison", "");
        
		public static explicit operator codeComparison(XElement xe) { return XTypedServices.ToXTypedElement<codeComparison>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// A list of comparison operators.
        /// </para>
        /// </summary>
        public codeComparison() {
        }
        
        public virtual OFMX.codeComparisonBase TypedValue {
            get {
                XElement x = this.Untyped;
                return ((OFMX.codeComparisonBase)(Enum.Parse(typeof(OFMX.codeComparisonBase), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetValueWithValidation(value.ToString(), "TypedValue", global::OFMX.codeComparisonBaseValidator.TypeDefinition);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<codeComparison>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public enum codeComponentTacanBase {
        
        DIST,
        
        AZMT,
    }
    
    public sealed class codeComponentTacanBaseValidator {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "DIST",
                        "AZMT"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private codeComponentTacanBaseValidator() {
        }
    }
    
    /// <summary>
    /// <para>
    /// A code indicating one of the two components of a TACAN facility.
    /// </para>
    /// </summary>
    public partial class codeComponentTacan : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TypedValueXName = System.Xml.Linq.XName.Get("TypedValue", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("codeComponentTacan", "");
        
		public static explicit operator codeComponentTacan(XElement xe) { return XTypedServices.ToXTypedElement<codeComponentTacan>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// A code indicating one of the two components of a TACAN facility.
        /// </para>
        /// </summary>
        public codeComponentTacan() {
        }
        
        public virtual OFMX.codeComponentTacanBase TypedValue {
            get {
                XElement x = this.Untyped;
                return ((OFMX.codeComponentTacanBase)(Enum.Parse(typeof(OFMX.codeComponentTacanBase), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetValueWithValidation(value.ToString(), "TypedValue", global::OFMX.codeComponentTacanBaseValidator.TypeDefinition);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<codeComponentTacan>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public sealed class codeCompositionSfcBase {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "ASPH",
                        "ASP+GRS",
                        "CONC",
                        "CONC+ASPH",
                        "CONC+GRS",
                        "GRASS",
                        "SAND",
                        "WATER",
                        "BITUM",
                        "BRICK",
                        "MACADAM",
                        "STONE",
                        "CORAL",
                        "CLAY",
                        "LATERITE",
                        "GRADE",
                        "GRAVE",
                        "ICE",
                        "SNOW",
                        "MEMBRANE",
                        "METAL",
                        "MATS",
                        "PSP",
                        "WOOD",
                        "OTHER"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private codeCompositionSfcBase() {
        }
    }
    
    /// <summary>
    /// <para>
    /// A code indicating the composition of a surface.  Eg. asphalt, concrete etc..
    /// </para>
    /// </summary>
    public partial class codeCompositionSfc : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TypedValueXName = System.Xml.Linq.XName.Get("TypedValue", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("codeCompositionSfc", "");
        
		public static explicit operator codeCompositionSfc(XElement xe) { return XTypedServices.ToXTypedElement<codeCompositionSfc>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// A code indicating the composition of a surface.  Eg. asphalt, concrete etc..
        /// </para>
        /// </summary>
        public codeCompositionSfc() {
        }
        
        public virtual string TypedValue {
            get {
                XElement x = this.Untyped;
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetValueWithValidation(value, "TypedValue", global::OFMX.codeCompositionSfcBase.TypeDefinition);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<codeCompositionSfc>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public enum codeCondSfcBase {
        
        GOOD,
        
        FAIR,
        
        POOR,
        
        OTHER,
    }
    
    public sealed class codeCondSfcBaseValidator {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "GOOD",
                        "FAIR",
                        "POOR",
                        "OTHER"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private codeCondSfcBaseValidator() {
        }
    }
    
    /// <summary>
    /// <para>
    /// A code indicating the condition of a RWY, TWY, SWY, FATO, TLOF or APRON surface.
    /// </para>
    /// </summary>
    public partial class codeCondSfc : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TypedValueXName = System.Xml.Linq.XName.Get("TypedValue", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("codeCondSfc", "");
        
		public static explicit operator codeCondSfc(XElement xe) { return XTypedServices.ToXTypedElement<codeCondSfc>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// A code indicating the condition of a RWY, TWY, SWY, FATO, TLOF or APRON surface.
        /// </para>
        /// </summary>
        public codeCondSfc() {
        }
        
        public virtual OFMX.codeCondSfcBase TypedValue {
            get {
                XElement x = this.Untyped;
                return ((OFMX.codeCondSfcBase)(Enum.Parse(typeof(OFMX.codeCondSfcBase), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetValueWithValidation(value.ToString(), "TypedValue", global::OFMX.codeCondSfcBaseValidator.TypeDefinition);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<codeCondSfc>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public enum codeDatumBase {
        
        WGE,
        
        WGC,
        
        EUS,
        
        EUT,
        
        ANS,
        
        BEL,
        
        BRN,
        
        CHI,
        
        DGI,
        
        IGF,
        
        POT,
        
        GRK,
        
        HJO,
        
        IRL,
        
        ROM,
        
        IGL,
        
        NTH,
        
        OGB,
        
        DLX,
        
        PRD,
        
        RNB,
        
        STO,
        
        NAS,
        
        NAW,
        
        U,
    }
    
    public sealed class codeDatumBaseValidator {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "WGE",
                        "WGC",
                        "EUS",
                        "EUT",
                        "ANS",
                        "BEL",
                        "BRN",
                        "CHI",
                        "DGI",
                        "IGF",
                        "POT",
                        "GRK",
                        "HJO",
                        "IRL",
                        "ROM",
                        "IGL",
                        "NTH",
                        "OGB",
                        "DLX",
                        "PRD",
                        "RNB",
                        "STO",
                        "NAS",
                        "NAW",
                        "U"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private codeDatumBaseValidator() {
        }
    }
    
    /// <summary>
    /// <para>
    /// A code indicating the geodetic datum in which the geographical co-ordinates are expressed (list of allowable based on the ICAO WGS-84 Manual; abbreviations based on ARINC 424, Attachment 2).
    /// </para>
    /// </summary>
    public partial class codeDatum : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TypedValueXName = System.Xml.Linq.XName.Get("TypedValue", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("codeDatum", "");
        
		public static explicit operator codeDatum(XElement xe) { return XTypedServices.ToXTypedElement<codeDatum>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// A code indicating the geodetic datum in which the geographical co-ordinates are expressed (list of allowable based on the ICAO WGS-84 Manual; abbreviations based on ARINC 424, Attachment 2).
        /// </para>
        /// </summary>
        public codeDatum() {
        }
        
        public virtual OFMX.codeDatumBase TypedValue {
            get {
                XElement x = this.Untyped;
                return ((OFMX.codeDatumBase)(Enum.Parse(typeof(OFMX.codeDatumBase), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetValueWithValidation(value.ToString(), "TypedValue", global::OFMX.codeDatumBaseValidator.TypeDefinition);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<codeDatum>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public enum codeDayBase {
        
        MON,
        
        TUE,
        
        WED,
        
        THU,
        
        FRI,
        
        SAT,
        
        SUN,
        
        MOFRI,
        
        WD,
        
        PWD,
        
        AWD,
        
        LH,
        
        PLH,
        
        ALH,
        
        ANY,
    }
    
    public sealed class codeDayBaseValidator {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "MON",
                        "TUE",
                        "WED",
                        "THU",
                        "FRI",
                        "SAT",
                        "SUN",
                        "MOFRI",
                        "WD",
                        "PWD",
                        "AWD",
                        "LH",
                        "PLH",
                        "ALH",
                        "ANY"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private codeDayBaseValidator() {
        }
    }
    
    /// <summary>
    /// <para>
    /// A code indicating a particular day.  E.g. : Monday, Tuesday, Wednesday, Thursday, Friday, Saturday, Sunday, the day preceding a holiday, a legal holiday, the day following a holiday, the day preceding a working day, a working day, the day following a working day.
    /// </para>
    /// </summary>
    public partial class codeDay : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TypedValueXName = System.Xml.Linq.XName.Get("TypedValue", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("codeDay", "");
        
		public static explicit operator codeDay(XElement xe) { return XTypedServices.ToXTypedElement<codeDay>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// A code indicating a particular day.  E.g. : Monday, Tuesday, Wednesday, Thursday, Friday, Saturday, Sunday, the day preceding a holiday, a legal holiday, the day following a holiday, the day preceding a working day, a working day, the day following a working day.
        /// </para>
        /// </summary>
        public codeDay() {
        }
        
        public virtual OFMX.codeDayBase TypedValue {
            get {
                XElement x = this.Untyped;
                return ((OFMX.codeDayBase)(Enum.Parse(typeof(OFMX.codeDayBase), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetValueWithValidation(value.ToString(), "TypedValue", global::OFMX.codeDayBaseValidator.TypeDefinition);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<codeDay>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public enum codeDayPeriodBase {
        
        D,
        
        N,
        
        A,
        
        OTHER,
    }
    
    public sealed class codeDayPeriodBaseValidator {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "D",
                        "N",
                        "A",
                        "OTHER"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private codeDayPeriodBaseValidator() {
        }
    }
    
    /// <summary>
    /// <para>
    /// A code indicating a time period within a day.  E.g. day or night.
    /// </para>
    /// </summary>
    public partial class codeDayPeriod : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TypedValueXName = System.Xml.Linq.XName.Get("TypedValue", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("codeDayPeriod", "");
        
		public static explicit operator codeDayPeriod(XElement xe) { return XTypedServices.ToXTypedElement<codeDayPeriod>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// A code indicating a time period within a day.  E.g. day or night.
        /// </para>
        /// </summary>
        public codeDayPeriod() {
        }
        
        public virtual OFMX.codeDayPeriodBase TypedValue {
            get {
                XElement x = this.Untyped;
                return ((OFMX.codeDayPeriodBase)(Enum.Parse(typeof(OFMX.codeDayPeriodBase), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetValueWithValidation(value.ToString(), "TypedValue", global::OFMX.codeDayPeriodBaseValidator.TypeDefinition);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<codeDayPeriod>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public enum codeDescrDistVerBase {
        
        LA,
        
        BH,
        
        L,
        
        B,
        
        OTHER,
    }
    
    public sealed class codeDescrDistVerBaseValidator {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "LA",
                        "BH",
                        "L",
                        "B",
                        "OTHER"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private codeDescrDistVerBaseValidator() {
        }
    }
    
    /// <summary>
    /// <para>
    /// A code indicating if a waypoint should be crossed 'at', 'at or above', 'at or below' a specific altitude or 'between' two specified altitudes.
    /// </para>
    /// </summary>
    public partial class codeDescrDistVer : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TypedValueXName = System.Xml.Linq.XName.Get("TypedValue", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("codeDescrDistVer", "");
        
		public static explicit operator codeDescrDistVer(XElement xe) { return XTypedServices.ToXTypedElement<codeDescrDistVer>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// A code indicating if a waypoint should be crossed 'at', 'at or above', 'at or below' a specific altitude or 'between' two specified altitudes.
        /// </para>
        /// </summary>
        public codeDescrDistVer() {
        }
        
        public virtual OFMX.codeDescrDistVerBase TypedValue {
            get {
                XElement x = this.Untyped;
                return ((OFMX.codeDescrDistVerBase)(Enum.Parse(typeof(OFMX.codeDescrDistVerBase), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetValueWithValidation(value.ToString(), "TypedValue", global::OFMX.codeDescrDistVerBaseValidator.TypeDefinition);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<codeDescrDistVer>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public enum codeDirBase {
        
        F,
        
        B,
    }
    
    public sealed class codeDirBaseValidator {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "F",
                        "B"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private codeDirBaseValidator() {
        }
    }
    
    /// <summary>
    /// <para>
    /// A code indicating a 1-dimensional direction, e.g. forward or backward.
    /// </para>
    /// </summary>
    public partial class codeDir : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TypedValueXName = System.Xml.Linq.XName.Get("TypedValue", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("codeDir", "");
        
		public static explicit operator codeDir(XElement xe) { return XTypedServices.ToXTypedElement<codeDir>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// A code indicating a 1-dimensional direction, e.g. forward or backward.
        /// </para>
        /// </summary>
        public codeDir() {
        }
        
        public virtual OFMX.codeDirBase TypedValue {
            get {
                XElement x = this.Untyped;
                return ((OFMX.codeDirBase)(Enum.Parse(typeof(OFMX.codeDirBase), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetValueWithValidation(value.ToString(), "TypedValue", global::OFMX.codeDirBaseValidator.TypeDefinition);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<codeDir>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public enum codeDirRefBase {
        
        TO,
        
        FROM,
    }
    
    public sealed class codeDirRefBaseValidator {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "TO",
                        "FROM"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private codeDirRefBaseValidator() {
        }
    }
    
    /// <summary>
    /// <para>
    /// A code indicating a direction with regard to a reference point, e.g. to or from.
    /// </para>
    /// </summary>
    public partial class codeDirRef : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TypedValueXName = System.Xml.Linq.XName.Get("TypedValue", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("codeDirRef", "");
        
		public static explicit operator codeDirRef(XElement xe) { return XTypedServices.ToXTypedElement<codeDirRef>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// A code indicating a direction with regard to a reference point, e.g. to or from.
        /// </para>
        /// </summary>
        public codeDirRef() {
        }
        
        public virtual OFMX.codeDirRefBase TypedValue {
            get {
                XElement x = this.Untyped;
                return ((OFMX.codeDirRefBase)(Enum.Parse(typeof(OFMX.codeDirRefBase), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetValueWithValidation(value.ToString(), "TypedValue", global::OFMX.codeDirRefBaseValidator.TypeDefinition);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<codeDirRef>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public enum codeDirTurnBase {
        
        L,
        
        R,
        
        E,
    }
    
    public sealed class codeDirTurnBaseValidator {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "L",
                        "R",
                        "E"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private codeDirTurnBaseValidator() {
        }
    }
    
    /// <summary>
    /// <para>
    /// A code indicating the direction of a turn.
    /// </para>
    /// </summary>
    public partial class codeDirTurn : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TypedValueXName = System.Xml.Linq.XName.Get("TypedValue", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("codeDirTurn", "");
        
		public static explicit operator codeDirTurn(XElement xe) { return XTypedServices.ToXTypedElement<codeDirTurn>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// A code indicating the direction of a turn.
        /// </para>
        /// </summary>
        public codeDirTurn() {
        }
        
        public virtual OFMX.codeDirTurnBase TypedValue {
            get {
                XElement x = this.Untyped;
                return ((OFMX.codeDirTurnBase)(Enum.Parse(typeof(OFMX.codeDirTurnBase), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetValueWithValidation(value.ToString(), "TypedValue", global::OFMX.codeDirTurnBaseValidator.TypeDefinition);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<codeDirTurn>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public enum codeDistVerBase {
        
        HEI,
        
        ALT,
        
        W84,
        
        QFE,
        
        QNH,
        
        STD,
        
        OTHER,
    }
    
    public sealed class codeDistVerBaseValidator {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "HEI",
                        "ALT",
                        "W84",
                        "QFE",
                        "QNH",
                        "STD",
                        "OTHER"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private codeDistVerBaseValidator() {
        }
    }
    
    /// <summary>
    /// <para>
    /// A code indicating the reference for a vertical distance.  Two series of values exist:  1) real distance:  from GND, from the MSL, from the WGS-84 ellipsoid  2) pressure  distance: QFE, QNH, STD.
    /// </para>
    /// </summary>
    public partial class codeDistVer : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TypedValueXName = System.Xml.Linq.XName.Get("TypedValue", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("codeDistVer", "");
        
		public static explicit operator codeDistVer(XElement xe) { return XTypedServices.ToXTypedElement<codeDistVer>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// A code indicating the reference for a vertical distance.  Two series of values exist:  1) real distance:  from GND, from the MSL, from the WGS-84 ellipsoid  2) pressure  distance: QFE, QNH, STD.
        /// </para>
        /// </summary>
        public codeDistVer() {
        }
        
        public virtual OFMX.codeDistVerBase TypedValue {
            get {
                XElement x = this.Untyped;
                return ((OFMX.codeDistVerBase)(Enum.Parse(typeof(OFMX.codeDistVerBase), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetValueWithValidation(value.ToString(), "TypedValue", global::OFMX.codeDistVerBaseValidator.TypeDefinition);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<codeDistVer>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public enum codeEmRdoBase {
        
        A2,
        
        A3A,
        
        A3B,
        
        A3E,
        
        A3H,
        
        A3J,
        
        A3L,
        
        A3U,
        
        J3E,
        
        NONA1A,
        
        NONA2A,
        
        PON,
        
        A8W,
        
        A9W,
        
        NOX,
        
        G1D,
        
        OTHER,
    }
    
    public sealed class codeEmRdoBaseValidator {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "A2",
                        "A3A",
                        "A3B",
                        "A3E",
                        "A3H",
                        "A3J",
                        "A3L",
                        "A3U",
                        "J3E",
                        "NONA1A",
                        "NONA2A",
                        "PON",
                        "A8W",
                        "A9W",
                        "NOX",
                        "G1D",
                        "OTHER"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private codeEmRdoBaseValidator() {
        }
    }
    
    /// <summary>
    /// <para>
    /// A code indicating the type of emission, as defined at the 1979 ITU World Administrative Radio Conference.  E.G. : A3E, NONA2a, G1D.
    /// </para>
    /// </summary>
    public partial class codeEmRdo : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TypedValueXName = System.Xml.Linq.XName.Get("TypedValue", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("codeEmRdo", "");
        
		public static explicit operator codeEmRdo(XElement xe) { return XTypedServices.ToXTypedElement<codeEmRdo>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// A code indicating the type of emission, as defined at the 1979 ITU World Administrative Radio Conference.  E.G. : A3E, NONA2a, G1D.
        /// </para>
        /// </summary>
        public codeEmRdo() {
        }
        
        public virtual OFMX.codeEmRdoBase TypedValue {
            get {
                XElement x = this.Untyped;
                return ((OFMX.codeEmRdoBase)(Enum.Parse(typeof(OFMX.codeEmRdoBase), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetValueWithValidation(value.ToString(), "TypedValue", global::OFMX.codeEmRdoBaseValidator.TypeDefinition);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<codeEmRdo>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// A coded value used to indicate a type of operation combining an elementary flow condition or a previously defined combination of flow conditions with another elementary flow condition or previously defined combination.
    /// </para>
    /// </summary>
    public enum codeFlowCondOpr {
        
        AND,
        
        ANDNOT,
        
        OR,
        
        SEQ,
        
        NONE,
    }
    
    /// <summary>
    /// <para>
    /// A coded value used to indicate a type of operation combining an elementary flow condition or a previously defined combination of flow conditions with another elementary flow condition or previously defined combination.
    /// </para>
    /// </summary>
    public sealed class codeFlowCondOprValidator {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "AND",
                        "ANDNOT",
                        "OR",
                        "SEQ",
                        "NONE"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private codeFlowCondOprValidator() {
        }
    }
    
    public enum codeFltStatusBase {
        
        HEAD,
        
        STATE,
        
        HUM,
        
        HOSP,
        
        SAR,
        
        OTHER,
    }
    
    public sealed class codeFltStatusBaseValidator {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "HEAD",
                        "STATE",
                        "HUM",
                        "HOSP",
                        "SAR",
                        "OTHER"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private codeFltStatusBaseValidator() {
        }
    }
    
    /// <summary>
    /// <para>
    /// A code indicating status of a  flight.
    /// </para>
    /// </summary>
    public partial class codeFltStatus : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TypedValueXName = System.Xml.Linq.XName.Get("TypedValue", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("codeFltStatus", "");
        
		public static explicit operator codeFltStatus(XElement xe) { return XTypedServices.ToXTypedElement<codeFltStatus>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// A code indicating status of a  flight.
        /// </para>
        /// </summary>
        public codeFltStatus() {
        }
        
        public virtual OFMX.codeFltStatusBase TypedValue {
            get {
                XElement x = this.Untyped;
                return ((OFMX.codeFltStatusBase)(Enum.Parse(typeof(OFMX.codeFltStatusBase), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetValueWithValidation(value.ToString(), "TypedValue", global::OFMX.codeFltStatusBaseValidator.TypeDefinition);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<codeFltStatus>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public enum codeFltTypeBase {
        
        OAT,
        
        GAT,
        
        OTHER,
    }
    
    public sealed class codeFltTypeBaseValidator {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "OAT",
                        "GAT",
                        "OTHER"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private codeFltTypeBaseValidator() {
        }
    }
    
    /// <summary>
    /// <para>
    /// A code indicating the type of a flight.
    /// </para>
    /// </summary>
    public partial class codeFltType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TypedValueXName = System.Xml.Linq.XName.Get("TypedValue", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("codeFltType", "");
        
		public static explicit operator codeFltType(XElement xe) { return XTypedServices.ToXTypedElement<codeFltType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// A code indicating the type of a flight.
        /// </para>
        /// </summary>
        public codeFltType() {
        }
        
        public virtual OFMX.codeFltTypeBase TypedValue {
            get {
                XElement x = this.Untyped;
                return ((OFMX.codeFltTypeBase)(Enum.Parse(typeof(OFMX.codeFltTypeBase), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetValueWithValidation(value.ToString(), "TypedValue", global::OFMX.codeFltTypeBaseValidator.TypeDefinition);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<codeFltType>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public enum codeIapFixBase {
        
        IAF,
        
        IF,
        
        FAF,
        
        MAPT,
        
        OTHER,
    }
    
    public sealed class codeIapFixBaseValidator {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "IAF",
                        "IF",
                        "FAF",
                        "MAPT",
                        "OTHER"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private codeIapFixBaseValidator() {
        }
    }
    
    /// <summary>
    /// <para>
    /// A code indicating the role of a fix within an instrument approach procedure. Examples: initial approach fix, final approach fix, missed approach point, etc.
    /// </para>
    /// </summary>
    public partial class codeIapFix : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TypedValueXName = System.Xml.Linq.XName.Get("TypedValue", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("codeIapFix", "");
        
		public static explicit operator codeIapFix(XElement xe) { return XTypedServices.ToXTypedElement<codeIapFix>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// A code indicating the role of a fix within an instrument approach procedure. Examples: initial approach fix, final approach fix, missed approach point, etc.
        /// </para>
        /// </summary>
        public codeIapFix() {
        }
        
        public virtual OFMX.codeIapFixBase TypedValue {
            get {
                XElement x = this.Untyped;
                return ((OFMX.codeIapFixBase)(Enum.Parse(typeof(OFMX.codeIapFixBase), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetValueWithValidation(value.ToString(), "TypedValue", global::OFMX.codeIapFixBaseValidator.TypeDefinition);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<codeIapFix>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public sealed class codeIcaoAircraftTypeBase {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(14)), null, 0, 0, null, null, 4, null, null, 1, new string[] {
                        "([A-Z]|\\d)*"}, 0, XmlSchemaWhiteSpace.Preserve));
        
        private codeIcaoAircraftTypeBase() {
        }
    }
    
    /// <summary>
    /// <para>
    /// A coded aircraft type designator assigned by ICAO to all aircraft heavier than micro-/ultra-light and published in ICAO DOC 8643.
    /// </para>
    /// </summary>
    public partial class codeIcaoAircraftType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TypedValueXName = System.Xml.Linq.XName.Get("TypedValue", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("codeIcaoAircraftType", "");
        
		public static explicit operator codeIcaoAircraftType(XElement xe) { return XTypedServices.ToXTypedElement<codeIcaoAircraftType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// A coded aircraft type designator assigned by ICAO to all aircraft heavier than micro-/ultra-light and published in ICAO DOC 8643.
        /// </para>
        /// </summary>
        public codeIcaoAircraftType() {
        }
        
        public virtual string TypedValue {
            get {
                XElement x = this.Untyped;
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetValueWithValidation(value, "TypedValue", global::OFMX.codeIcaoAircraftTypeBase.TypeDefinition);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<codeIcaoAircraftType>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public sealed class codeIdAdHpBase {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(10)), null, 0, 0, null, null, 0, null, null, 3, new string[] {
                        "([A-Z]{3,4}|[A-Z]{2}[A-Z\\d]{4,})",
                        "([A-Z]|\\d)*"}, 0, XmlSchemaWhiteSpace.Preserve));
        
        private codeIdAdHpBase() {
        }
    }
    
    /// <summary>
    /// <para>
    /// A coded identifier for an Aerodrome/Heliport.   The rules according to which this identifier should be formed are as follows:  1) If the AD/HP has an ICAO four letter location indicator, this will become the CODE_ID for the Aerodrome/Heliport;  2) If the AD/HP does not have an ICAO four letter location indicator but has an IATA three letter code, then this will become the CODE_ID for the Aerodrome/Heliport;  3) If the AD/HP does not have either an ICAO four letter location indicator or an IATA three letter code, an artificially generated code will be used. This will contain a group of letters and a number. The group of letters could be the 2 letter code of the State responsible for the Aerodrome/Heliport (or one of these, if there are more than one, like ED and ET for Germany) and the number could  be an integer between 0001 and 9999;  4) As an alternative to 3, it is also possible use the 2 letter code of the State responsible for the Aerodrome/Heliport and add at least four letters and/or numbers to it.
    /// </para>
    /// </summary>
    public partial class codeIdAdHp : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TypedValueXName = System.Xml.Linq.XName.Get("TypedValue", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("codeIdAdHp", "");
        
		public static explicit operator codeIdAdHp(XElement xe) { return XTypedServices.ToXTypedElement<codeIdAdHp>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// A coded identifier for an Aerodrome/Heliport.   The rules according to which this identifier should be formed are as follows:  1) If the AD/HP has an ICAO four letter location indicator, this will become the CODE_ID for the Aerodrome/Heliport;  2) If the AD/HP does not have an ICAO four letter location indicator but has an IATA three letter code, then this will become the CODE_ID for the Aerodrome/Heliport;  3) If the AD/HP does not have either an ICAO four letter location indicator or an IATA three letter code, an artificially generated code will be used. This will contain a group of letters and a number. The group of letters could be the 2 letter code of the State responsible for the Aerodrome/Heliport (or one of these, if there are more than one, like ED and ET for Germany) and the number could  be an integer between 0001 and 9999;  4) As an alternative to 3, it is also possible use the 2 letter code of the State responsible for the Aerodrome/Heliport and add at least four letters and/or numbers to it.
        /// </para>
        /// </summary>
        public codeIdAdHp() {
        }
        
        public virtual string TypedValue {
            get {
                XElement x = this.Untyped;
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetValueWithValidation(value, "TypedValue", global::OFMX.codeIdAdHpBase.TypeDefinition);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<codeIdAdHp>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public sealed class codeIdAsBase {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(14)), null, 0, 0, null, null, 10, null, null, 1, new string[] {
                        "([A-Z]|[0-9]|[, !\"&#$%\'\\(\\)\\*\\+\\-\\./:;<=>\\?@\\[\\\\\\]\\^_\\|\\{\\}])*"}, 0, XmlSchemaWhiteSpace.Preserve));
        
        private codeIdAsBase() {
        }
    }
    
    /// <summary>
    /// <para>
    /// A coded value allowing the unique identification of the airspace in question. 
    /// </para>
    /// </summary>
    public partial class codeIdAs : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TypedValueXName = System.Xml.Linq.XName.Get("TypedValue", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("codeIdAs", "");
        
		public static explicit operator codeIdAs(XElement xe) { return XTypedServices.ToXTypedElement<codeIdAs>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// A coded value allowing the unique identification of the airspace in question. 
        /// </para>
        /// </summary>
        public codeIdAs() {
        }
        
        public virtual string TypedValue {
            get {
                XElement x = this.Untyped;
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetValueWithValidation(value, "TypedValue", global::OFMX.codeIdAsBase.TypeDefinition);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<codeIdAs>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public sealed class codeIdChainSpecNavBase {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(14)), null, 0, 0, null, null, 4, null, null, 1, new string[] {
                        "([A-Z]|\\d)*"}, 0, XmlSchemaWhiteSpace.Preserve));
        
        private codeIdChainSpecNavBase() {
        }
    }
    
    /// <summary>
    /// <para>
    /// The coded identifier of a special navigation system chain.
    /// </para>
    /// </summary>
    public partial class codeIdChainSpecNav : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TypedValueXName = System.Xml.Linq.XName.Get("TypedValue", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("codeIdChainSpecNav", "");
        
		public static explicit operator codeIdChainSpecNav(XElement xe) { return XTypedServices.ToXTypedElement<codeIdChainSpecNav>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// The coded identifier of a special navigation system chain.
        /// </para>
        /// </summary>
        public codeIdChainSpecNav() {
        }
        
        public virtual string TypedValue {
            get {
                XElement x = this.Untyped;
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetValueWithValidation(value, "TypedValue", global::OFMX.codeIdChainSpecNavBase.TypeDefinition);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<codeIdChainSpecNav>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public sealed class codeIdDesigPtBase {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(14)), null, 0, 0, null, null, 10, null, null, 1, new string[] {
                        "([A-Z]|\\d)*"}, 0, XmlSchemaWhiteSpace.Preserve));
        
        private codeIdDesigPtBase() {
        }
    }
    
    /// <summary>
    /// <para>
    /// The coded identifier of a designated point.
    /// </para>
    /// </summary>
    public partial class codeIdDesigPt : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TypedValueXName = System.Xml.Linq.XName.Get("TypedValue", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("codeIdDesigPt", "");
        
		public static explicit operator codeIdDesigPt(XElement xe) { return XTypedServices.ToXTypedElement<codeIdDesigPt>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// The coded identifier of a designated point.
        /// </para>
        /// </summary>
        public codeIdDesigPt() {
        }
        
        public virtual string TypedValue {
            get {
                XElement x = this.Untyped;
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetValueWithValidation(value, "TypedValue", global::OFMX.codeIdDesigPtBase.TypeDefinition);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<codeIdDesigPt>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public sealed class codeIdIlsMlsBase {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(14)), null, 0, 0, null, null, 4, null, null, 1, new string[] {
                        "([A-Z]|\\d)*"}, 0, XmlSchemaWhiteSpace.Preserve));
        
        private codeIdIlsMlsBase() {
        }
    }
    
    /// <summary>
    /// <para>
    /// The coded identifier of an ILS or MLS.
    /// </para>
    /// </summary>
    public partial class codeIdIlsMls : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TypedValueXName = System.Xml.Linq.XName.Get("TypedValue", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("codeIdIlsMls", "");
        
		public static explicit operator codeIdIlsMls(XElement xe) { return XTypedServices.ToXTypedElement<codeIdIlsMls>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// The coded identifier of an ILS or MLS.
        /// </para>
        /// </summary>
        public codeIdIlsMls() {
        }
        
        public virtual string TypedValue {
            get {
                XElement x = this.Untyped;
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetValueWithValidation(value, "TypedValue", global::OFMX.codeIdIlsMlsBase.TypeDefinition);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<codeIdIlsMls>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public enum codeIdLvlClmnBase {
        
        E,
        
        W,
    }
    
    public sealed class codeIdLvlClmnBaseValidator {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "E",
                        "W"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private codeIdLvlClmnBaseValidator() {
        }
    }
    
    /// <summary>
    /// <para>
    /// A code identifying the column within a table of discreet cruising levels.  E.g. east (000 to 179 degrees) or west (180 to 359 degrees) even.
    /// </para>
    /// </summary>
    public partial class codeIdLvlClmn : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TypedValueXName = System.Xml.Linq.XName.Get("TypedValue", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("codeIdLvlClmn", "");
        
		public static explicit operator codeIdLvlClmn(XElement xe) { return XTypedServices.ToXTypedElement<codeIdLvlClmn>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// A code identifying the column within a table of discreet cruising levels.  E.g. east (000 to 179 degrees) or west (180 to 359 degrees) even.
        /// </para>
        /// </summary>
        public codeIdLvlClmn() {
        }
        
        public virtual OFMX.codeIdLvlClmnBase TypedValue {
            get {
                XElement x = this.Untyped;
                return ((OFMX.codeIdLvlClmnBase)(Enum.Parse(typeof(OFMX.codeIdLvlClmnBase), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetValueWithValidation(value.ToString(), "TypedValue", global::OFMX.codeIdLvlClmnBaseValidator.TypeDefinition);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<codeIdLvlClmn>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public enum codeIdLvlTblBase {
        
        I,
        
        IM,
        
        V,
        
        VM,
        
        IR,
        
        IRM,
        
        VR,
        
        VRM,
    }
    
    public sealed class codeIdLvlTblBaseValidator {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "I",
                        "IM",
                        "V",
                        "VM",
                        "IR",
                        "IRM",
                        "VR",
                        "VRM"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private codeIdLvlTblBaseValidator() {
        }
    }
    
    /// <summary>
    /// <para>
    /// A code identifying the table of discreet cruising levels.  Ex: ICAO IFR, ICAO VFR, ICAO RVSM, etc..
    /// </para>
    /// </summary>
    public partial class codeIdLvlTbl : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TypedValueXName = System.Xml.Linq.XName.Get("TypedValue", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("codeIdLvlTbl", "");
        
		public static explicit operator codeIdLvlTbl(XElement xe) { return XTypedServices.ToXTypedElement<codeIdLvlTbl>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// A code identifying the table of discreet cruising levels.  Ex: ICAO IFR, ICAO VFR, ICAO RVSM, etc..
        /// </para>
        /// </summary>
        public codeIdLvlTbl() {
        }
        
        public virtual OFMX.codeIdLvlTblBase TypedValue {
            get {
                XElement x = this.Untyped;
                return ((OFMX.codeIdLvlTblBase)(Enum.Parse(typeof(OFMX.codeIdLvlTblBase), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetValueWithValidation(value.ToString(), "TypedValue", global::OFMX.codeIdLvlTblBaseValidator.TypeDefinition);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<codeIdLvlTbl>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public sealed class codeIdMkrBase {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(14)), null, 0, 0, null, null, 4, null, null, 1, new string[] {
                        "(\\.|\\-)+",
                        "([A-Z]|[0-9]|[, !\"&#$%\'\\(\\)\\*\\+\\-\\./:;<=>\\?@\\[\\\\\\]\\^_\\|\\{\\}])*"}, 0, XmlSchemaWhiteSpace.Preserve));
        
        private codeIdMkrBase() {
        }
    }
    
    /// <summary>
    /// <para>
    /// The coded identifier of a marker.  Ex: Dots, Dashes, Dot/Dash.
    /// </para>
    /// </summary>
    public partial class codeIdMkr : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TypedValueXName = System.Xml.Linq.XName.Get("TypedValue", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("codeIdMkr", "");
        
		public static explicit operator codeIdMkr(XElement xe) { return XTypedServices.ToXTypedElement<codeIdMkr>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// The coded identifier of a marker.  Ex: Dots, Dashes, Dot/Dash.
        /// </para>
        /// </summary>
        public codeIdMkr() {
        }
        
        public virtual string TypedValue {
            get {
                XElement x = this.Untyped;
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetValueWithValidation(value, "TypedValue", global::OFMX.codeIdMkrBase.TypeDefinition);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<codeIdMkr>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public sealed class codeIdNavAidBase {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(14)), null, 0, 0, null, null, 4, null, null, 1, new string[] {
                        "([A-Z]|\\d)*"}, 0, XmlSchemaWhiteSpace.Preserve));
        
        private codeIdNavAidBase() {
        }
    }
    
    /// <summary>
    /// <para>
    /// The coded identifier of a radio navigation aid.
    /// </para>
    /// </summary>
    public partial class codeIdNavAid : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TypedValueXName = System.Xml.Linq.XName.Get("TypedValue", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("codeIdNavAid", "");
        
		public static explicit operator codeIdNavAid(XElement xe) { return XTypedServices.ToXTypedElement<codeIdNavAid>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// The coded identifier of a radio navigation aid.
        /// </para>
        /// </summary>
        public codeIdNavAid() {
        }
        
        public virtual string TypedValue {
            get {
                XElement x = this.Untyped;
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetValueWithValidation(value, "TypedValue", global::OFMX.codeIdNavAidBase.TypeDefinition);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<codeIdNavAid>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public sealed class codeIdOrgBase {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(14)), null, 0, 0, null, null, 12, null, null, 1, new string[] {
                        "([A-Z]|[0-9])+([ \\+\\-/]*([A-Z]|[0-9])+)*"}, 0, XmlSchemaWhiteSpace.Preserve));
        
        private codeIdOrgBase() {
        }
    }
    
    /// <summary>
    /// <para>
    /// The coded identifier of the organisation, authority, agency or unit.
    /// </para>
    /// </summary>
    public partial class codeIdOrg : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TypedValueXName = System.Xml.Linq.XName.Get("TypedValue", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("codeIdOrg", "");
        
		public static explicit operator codeIdOrg(XElement xe) { return XTypedServices.ToXTypedElement<codeIdOrg>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// The coded identifier of the organisation, authority, agency or unit.
        /// </para>
        /// </summary>
        public codeIdOrg() {
        }
        
        public virtual string TypedValue {
            get {
                XElement x = this.Untyped;
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetValueWithValidation(value, "TypedValue", global::OFMX.codeIdOrgBase.TypeDefinition);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<codeIdOrg>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public sealed class codeIdRestrBase {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(14)), null, 0, 0, null, null, 16, null, null, 1, new string[] {
                        "([A-Z]|[0-9])+([ \\+\\-/]*([A-Z]|[0-9])+)*"}, 0, XmlSchemaWhiteSpace.Preserve));
        
        private codeIdRestrBase() {
        }
    }
    
    /// <summary>
    /// <para>
    /// A coded value which uniquely identifies a traffic flow restriction.
    /// </para>
    /// </summary>
    public partial class codeIdRestr : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TypedValueXName = System.Xml.Linq.XName.Get("TypedValue", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("codeIdRestr", "");
        
		public static explicit operator codeIdRestr(XElement xe) { return XTypedServices.ToXTypedElement<codeIdRestr>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// A coded value which uniquely identifies a traffic flow restriction.
        /// </para>
        /// </summary>
        public codeIdRestr() {
        }
        
        public virtual string TypedValue {
            get {
                XElement x = this.Untyped;
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetValueWithValidation(value, "TypedValue", global::OFMX.codeIdRestrBase.TypeDefinition);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<codeIdRestr>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public enum codeIntlRteBase {
        
        I,
        
        D,
        
        OTHER,
    }
    
    public sealed class codeIntlRteBaseValidator {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "I",
                        "D",
                        "OTHER"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private codeIntlRteBaseValidator() {
        }
    }
    
    /// <summary>
    /// <para>
    /// Code indicating  if a route is international or domestic.
    /// </para>
    /// </summary>
    public partial class codeIntlRte : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TypedValueXName = System.Xml.Linq.XName.Get("TypedValue", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("codeIntlRte", "");
        
		public static explicit operator codeIntlRte(XElement xe) { return XTypedServices.ToXTypedElement<codeIntlRte>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// Code indicating  if a route is international or domestic.
        /// </para>
        /// </summary>
        public codeIntlRte() {
        }
        
        public virtual OFMX.codeIntlRteBase TypedValue {
            get {
                XElement x = this.Untyped;
                return ((OFMX.codeIntlRteBase)(Enum.Parse(typeof(OFMX.codeIntlRteBase), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetValueWithValidation(value.ToString(), "TypedValue", global::OFMX.codeIntlRteBaseValidator.TypeDefinition);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<codeIntlRte>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public enum codeIntstLgtBase {
        
        LIL,
        
        LIM,
        
        LIH,
        
        OTHER,
    }
    
    public sealed class codeIntstLgtBaseValidator {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "LIL",
                        "LIM",
                        "LIH",
                        "OTHER"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private codeIntstLgtBaseValidator() {
        }
    }
    
    /// <summary>
    /// <para>
    /// A code indicating the light intensity.  Eg: LIL, LIM, LIH, etc.
    /// </para>
    /// </summary>
    public partial class codeIntstLgt : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TypedValueXName = System.Xml.Linq.XName.Get("TypedValue", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("codeIntstLgt", "");
        
		public static explicit operator codeIntstLgt(XElement xe) { return XTypedServices.ToXTypedElement<codeIntstLgt>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// A code indicating the light intensity.  Eg: LIL, LIM, LIH, etc.
        /// </para>
        /// </summary>
        public codeIntstLgt() {
        }
        
        public virtual OFMX.codeIntstLgtBase TypedValue {
            get {
                XElement x = this.Untyped;
                return ((OFMX.codeIntstLgtBase)(Enum.Parse(typeof(OFMX.codeIntstLgtBase), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetValueWithValidation(value.ToString(), "TypedValue", global::OFMX.codeIntstLgtBaseValidator.TypeDefinition);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<codeIntstLgt>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public enum codeLangBase {
        
        AF,
        
        AR,
        
        BG,
        
        CH,
        
        CZ,
        
        DA,
        
        EN,
        
        ES,
        
        FI,
        
        FR,
        
        GE,
        
        GR,
        
        HE,
        
        HO,
        
        HU,
        
        IT,
        
        JA,
        
        KO,
        
        MA,
        
        NO,
        
        PE,
        
        PL,
        
        PT,
        
        RO,
        
        RU,
        
        SC,
        
        SU,
        
        TU,
        
        XX,
    }
    
    public sealed class codeLangBaseValidator {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "AF",
                        "AR",
                        "BG",
                        "CH",
                        "CZ",
                        "DA",
                        "EN",
                        "ES",
                        "FI",
                        "FR",
                        "GE",
                        "GR",
                        "HE",
                        "HO",
                        "HU",
                        "IT",
                        "JA",
                        "KO",
                        "MA",
                        "NO",
                        "PE",
                        "PL",
                        "PT",
                        "RO",
                        "RU",
                        "SC",
                        "SU",
                        "TU",
                        "XX"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private codeLangBaseValidator() {
        }
    }
    
    /// <summary>
    /// <para>
    /// A code indicating a language (according to ISO 639).
    /// </para>
    /// </summary>
    public partial class codeLang : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TypedValueXName = System.Xml.Linq.XName.Get("TypedValue", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("codeLang", "");
        
		public static explicit operator codeLang(XElement xe) { return XTypedServices.ToXTypedElement<codeLang>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// A code indicating a language (according to ISO 639).
        /// </para>
        /// </summary>
        public codeLang() {
        }
        
        public virtual OFMX.codeLangBase TypedValue {
            get {
                XElement x = this.Untyped;
                return ((OFMX.codeLangBase)(Enum.Parse(typeof(OFMX.codeLangBase), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetValueWithValidation(value.ToString(), "TypedValue", global::OFMX.codeLangBaseValidator.TypeDefinition);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<codeLang>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public sealed class codeLocIndIataBase {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(14)), null, 0, 0, null, null, 3, null, null, 3, new string[] {
                        "[A-Z]*"}, 0, XmlSchemaWhiteSpace.Preserve));
        
        private codeLocIndIataBase() {
        }
    }
    
    /// <summary>
    /// <para>
    /// The three letter coded location identifier of an aerodrome/heliport according to the IATA Resolution 763.
    /// </para>
    /// </summary>
    public partial class codeLocIndIata : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TypedValueXName = System.Xml.Linq.XName.Get("TypedValue", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("codeLocIndIata", "");
        
		public static explicit operator codeLocIndIata(XElement xe) { return XTypedServices.ToXTypedElement<codeLocIndIata>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// The three letter coded location identifier of an aerodrome/heliport according to the IATA Resolution 763.
        /// </para>
        /// </summary>
        public codeLocIndIata() {
        }
        
        public virtual string TypedValue {
            get {
                XElement x = this.Untyped;
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetValueWithValidation(value, "TypedValue", global::OFMX.codeLocIndIataBase.TypeDefinition);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<codeLocIndIata>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public sealed class codeLocIndIcaoBase {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(14)), null, 0, 0, null, null, 4, null, null, 4, new string[] {
                        "[A-Z]*"}, 0, XmlSchemaWhiteSpace.Preserve));
        
        private codeLocIndIcaoBase() {
        }
    }
    
    /// <summary>
    /// <para>
    /// The four letter coded location identifier of an aerodrome/heliport based on the ICAO DOC 7910/78 - Location Indicators.
    /// </para>
    /// </summary>
    public partial class codeLocIndIcao : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TypedValueXName = System.Xml.Linq.XName.Get("TypedValue", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("codeLocIndIcao", "");
        
		public static explicit operator codeLocIndIcao(XElement xe) { return XTypedServices.ToXTypedElement<codeLocIndIcao>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// The four letter coded location identifier of an aerodrome/heliport based on the ICAO DOC 7910/78 - Location Indicators.
        /// </para>
        /// </summary>
        public codeLocIndIcao() {
        }
        
        public virtual string TypedValue {
            get {
                XElement x = this.Untyped;
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetValueWithValidation(value, "TypedValue", global::OFMX.codeLocIndIcaoBase.TypeDefinition);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<codeLocIndIcao>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public sealed class codeLocIndGpsBase {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(6)), null, 0, 0, null, null, 20, null, null, 3, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private codeLocIndGpsBase() {
        }
    }
    
    /// <summary>
    /// <para>
    /// The three to twenty characters GPS location identifier as defined by the aerodrome/heliport operator.
    /// </para>
    /// </summary>
    public partial class codeLocIndGps : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TypedValueXName = System.Xml.Linq.XName.Get("TypedValue", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("codeLocIndGps", "");
        
		public static explicit operator codeLocIndGps(XElement xe) { return XTypedServices.ToXTypedElement<codeLocIndGps>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// The three to twenty characters GPS location identifier as defined by the aerodrome/heliport operator.
        /// </para>
        /// </summary>
        public codeLocIndGps() {
        }
        
        public virtual string TypedValue {
            get {
                XElement x = this.Untyped;
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetValueWithValidation(value, "TypedValue", global::OFMX.codeLocIndGpsBase.TypeDefinition);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<codeLocIndGps>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public enum codeLovReferenceBase {
        
        ICAO,
        
        IATA,
        
        NATO,
        
        FAA,
        
        OTHER,
    }
    
    public sealed class codeLovReferenceBaseValidator {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "ICAO",
                        "IATA",
                        "NATO",
                        "FAA",
                        "OTHER"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private codeLovReferenceBaseValidator() {
        }
    }
    
    /// <summary>
    /// <para>
    /// A code indicating the standard referred to by a list of values, in case where different aviation authorities use different categorisation criteria.
    /// </para>
    /// </summary>
    public partial class codeLovReference : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TypedValueXName = System.Xml.Linq.XName.Get("TypedValue", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("codeLovReference", "");
        
		public static explicit operator codeLovReference(XElement xe) { return XTypedServices.ToXTypedElement<codeLovReference>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// A code indicating the standard referred to by a list of values, in case where different aviation authorities use different categorisation criteria.
        /// </para>
        /// </summary>
        public codeLovReference() {
        }
        
        public virtual OFMX.codeLovReferenceBase TypedValue {
            get {
                XElement x = this.Untyped;
                return ((OFMX.codeLovReferenceBase)(Enum.Parse(typeof(OFMX.codeLovReferenceBase), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetValueWithValidation(value.ToString(), "TypedValue", global::OFMX.codeLovReferenceBaseValidator.TypeDefinition);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<codeLovReference>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public enum codeLvlBase {
        
        U,
        
        L,
        
        B,
    }
    
    public sealed class codeLvlBaseValidator {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "U",
                        "L",
                        "B"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private codeLvlBaseValidator() {
        }
    }
    
    /// <summary>
    /// <para>
    /// A code indicating the level: upper airspace, lower airspace or both.
    /// </para>
    /// </summary>
    public partial class codeLvl : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TypedValueXName = System.Xml.Linq.XName.Get("TypedValue", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("codeLvl", "");
        
		public static explicit operator codeLvl(XElement xe) { return XTypedServices.ToXTypedElement<codeLvl>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// A code indicating the level: upper airspace, lower airspace or both.
        /// </para>
        /// </summary>
        public codeLvl() {
        }
        
        public virtual OFMX.codeLvlBase TypedValue {
            get {
                XElement x = this.Untyped;
                return ((OFMX.codeLvlBase)(Enum.Parse(typeof(OFMX.codeLvlBase), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetValueWithValidation(value.ToString(), "TypedValue", global::OFMX.codeLvlBaseValidator.TypeDefinition);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<codeLvl>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public enum codeMilBase {
        
        MIL,
        
        CIVIL,
        
        OTHER,
    }
    
    public sealed class codeMilBaseValidator {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "MIL",
                        "CIVIL",
                        "OTHER"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private codeMilBaseValidator() {
        }
    }
    
    /// <summary>
    /// <para>
    /// A code distinguishing between military and civil status.
    /// </para>
    /// </summary>
    public partial class codeMil : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TypedValueXName = System.Xml.Linq.XName.Get("TypedValue", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("codeMil", "");
        
		public static explicit operator codeMil(XElement xe) { return XTypedServices.ToXTypedElement<codeMil>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// A code distinguishing between military and civil status.
        /// </para>
        /// </summary>
        public codeMil() {
        }
        
        public virtual OFMX.codeMilBase TypedValue {
            get {
                XElement x = this.Untyped;
                return ((OFMX.codeMilBase)(Enum.Parse(typeof(OFMX.codeMilBase), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetValueWithValidation(value.ToString(), "TypedValue", global::OFMX.codeMilBaseValidator.TypeDefinition);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<codeMil>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// DEPRECATED-4.0
    /// </para>
    /// </summary>
    public enum codeOprBase {
        
        BASE,
        
        UNION,
        
        INTERS,
        
        SUBTR,
    }
    
    /// <summary>
    /// <para>
    /// DEPRECATED-4.0
    /// </para>
    /// </summary>
    public sealed class codeOprBaseValidator {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "BASE",
                        "UNION",
                        "INTERS",
                        "SUBTR"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private codeOprBaseValidator() {
        }
    }
    
    /// <summary>
    /// <para>
    /// DEPRECATED-4.0
    /// </para>
    /// <para>
    /// An 'operator' in coded form according to which two 'operants' will be 'associated' in order to produce a result.
    /// </para>
    /// </summary>
    public partial class codeOpr : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TypedValueXName = System.Xml.Linq.XName.Get("TypedValue", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("codeOpr", "");
        
		public static explicit operator codeOpr(XElement xe) { return XTypedServices.ToXTypedElement<codeOpr>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// DEPRECATED-4.0
        /// </para>
        /// <para>
        /// An 'operator' in coded form according to which two 'operants' will be 'associated' in order to produce a result.
        /// </para>
        /// </summary>
        public codeOpr() {
        }
        
        public virtual OFMX.codeOprBase TypedValue {
            get {
                XElement x = this.Untyped;
                return ((OFMX.codeOprBase)(Enum.Parse(typeof(OFMX.codeOprBase), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetValueWithValidation(value.ToString(), "TypedValue", global::OFMX.codeOprBaseValidator.TypeDefinition);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<codeOpr>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public enum codeOprAsBase {
        
        UNION,
        
        INTERS,
        
        SUBTR,
    }
    
    public sealed class codeOprAsBaseValidator {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "UNION",
                        "INTERS",
                        "SUBTR"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private codeOprAsBaseValidator() {
        }
    }
    
    /// <summary>
    /// <para>
    /// An 'operator' in coded form according to which the geometry of an airspace will contribute to the geometry of an aggregated airspace.
    /// </para>
    /// </summary>
    public partial class codeOprAs : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TypedValueXName = System.Xml.Linq.XName.Get("TypedValue", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("codeOprAs", "");
        
		public static explicit operator codeOprAs(XElement xe) { return XTypedServices.ToXTypedElement<codeOprAs>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// An 'operator' in coded form according to which the geometry of an airspace will contribute to the geometry of an aggregated airspace.
        /// </para>
        /// </summary>
        public codeOprAs() {
        }
        
        public virtual OFMX.codeOprAsBase TypedValue {
            get {
                XElement x = this.Untyped;
                return ((OFMX.codeOprAsBase)(Enum.Parse(typeof(OFMX.codeOprAsBase), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetValueWithValidation(value.ToString(), "TypedValue", global::OFMX.codeOprAsBaseValidator.TypeDefinition);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<codeOprAs>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public enum codeOriginBase {
        
        NTL,
        
        INTL,
        
        ANY,
        
        OTHER,
    }
    
    public sealed class codeOriginBaseValidator {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "NTL",
                        "INTL",
                        "ANY",
                        "OTHER"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private codeOriginBaseValidator() {
        }
    }
    
    /// <summary>
    /// <para>
    /// A code indicating the origin with regard to international borders.
    /// </para>
    /// </summary>
    public partial class codeOrigin : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TypedValueXName = System.Xml.Linq.XName.Get("TypedValue", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("codeOrigin", "");
        
		public static explicit operator codeOrigin(XElement xe) { return XTypedServices.ToXTypedElement<codeOrigin>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// A code indicating the origin with regard to international borders.
        /// </para>
        /// </summary>
        public codeOrigin() {
        }
        
        public virtual OFMX.codeOriginBase TypedValue {
            get {
                XElement x = this.Untyped;
                return ((OFMX.codeOriginBase)(Enum.Parse(typeof(OFMX.codeOriginBase), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetValueWithValidation(value.ToString(), "TypedValue", global::OFMX.codeOriginBaseValidator.TypeDefinition);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<codeOrigin>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public enum codePcnEvalMethodBase {
        
        T,
        
        U,
    }
    
    public sealed class codePcnEvalMethodBaseValidator {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "T",
                        "U"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private codePcnEvalMethodBaseValidator() {
        }
    }
    
    /// <summary>
    /// <para>
    /// A code indicating the method used in the evaluation of a PCN number.
    /// </para>
    /// </summary>
    public partial class codePcnEvalMethod : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TypedValueXName = System.Xml.Linq.XName.Get("TypedValue", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("codePcnEvalMethod", "");
        
		public static explicit operator codePcnEvalMethod(XElement xe) { return XTypedServices.ToXTypedElement<codePcnEvalMethod>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// A code indicating the method used in the evaluation of a PCN number.
        /// </para>
        /// </summary>
        public codePcnEvalMethod() {
        }
        
        public virtual OFMX.codePcnEvalMethodBase TypedValue {
            get {
                XElement x = this.Untyped;
                return ((OFMX.codePcnEvalMethodBase)(Enum.Parse(typeof(OFMX.codePcnEvalMethodBase), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetValueWithValidation(value.ToString(), "TypedValue", global::OFMX.codePcnEvalMethodBaseValidator.TypeDefinition);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<codePcnEvalMethod>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public enum codePcnPavementTypeBase {
        
        R,
        
        F,
    }
    
    public sealed class codePcnPavementTypeBaseValidator {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "R",
                        "F"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private codePcnPavementTypeBaseValidator() {
        }
    }
    
    /// <summary>
    /// <para>
    /// A code indicating the pavement behaviour (rigid or flexible) used for the PCN determination.
    /// </para>
    /// </summary>
    public partial class codePcnPavementType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TypedValueXName = System.Xml.Linq.XName.Get("TypedValue", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("codePcnPavementType", "");
        
		public static explicit operator codePcnPavementType(XElement xe) { return XTypedServices.ToXTypedElement<codePcnPavementType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// A code indicating the pavement behaviour (rigid or flexible) used for the PCN determination.
        /// </para>
        /// </summary>
        public codePcnPavementType() {
        }
        
        public virtual OFMX.codePcnPavementTypeBase TypedValue {
            get {
                XElement x = this.Untyped;
                return ((OFMX.codePcnPavementTypeBase)(Enum.Parse(typeof(OFMX.codePcnPavementTypeBase), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetValueWithValidation(value.ToString(), "TypedValue", global::OFMX.codePcnPavementTypeBaseValidator.TypeDefinition);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<codePcnPavementType>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public enum codePcnPavementSubgradeBase {
        
        A,
        
        B,
        
        C,
        
        D,
    }
    
    public sealed class codePcnPavementSubgradeBaseValidator {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "A",
                        "B",
                        "C",
                        "D"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private codePcnPavementSubgradeBaseValidator() {
        }
    }
    
    /// <summary>
    /// <para>
    /// A code indicating the subgrade strength category related to a PCN number.
    /// </para>
    /// </summary>
    public partial class codePcnPavementSubgrade : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TypedValueXName = System.Xml.Linq.XName.Get("TypedValue", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("codePcnPavementSubgrade", "");
        
		public static explicit operator codePcnPavementSubgrade(XElement xe) { return XTypedServices.ToXTypedElement<codePcnPavementSubgrade>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// A code indicating the subgrade strength category related to a PCN number.
        /// </para>
        /// </summary>
        public codePcnPavementSubgrade() {
        }
        
        public virtual OFMX.codePcnPavementSubgradeBase TypedValue {
            get {
                XElement x = this.Untyped;
                return ((OFMX.codePcnPavementSubgradeBase)(Enum.Parse(typeof(OFMX.codePcnPavementSubgradeBase), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetValueWithValidation(value.ToString(), "TypedValue", global::OFMX.codePcnPavementSubgradeBaseValidator.TypeDefinition);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<codePcnPavementSubgrade>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public enum codePcnMaxTirePressureBase {
        
        W,
        
        X,
        
        Y,
        
        Z,
    }
    
    public sealed class codePcnMaxTirePressureBaseValidator {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "W",
                        "X",
                        "Y",
                        "Z"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private codePcnMaxTirePressureBaseValidator() {
        }
    }
    
    /// <summary>
    /// <para>
    /// A code indicating the maximum allowable tire pressure categoryrelated to a PCN number.
    /// </para>
    /// </summary>
    public partial class codePcnMaxTirePressure : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TypedValueXName = System.Xml.Linq.XName.Get("TypedValue", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("codePcnMaxTirePressure", "");
        
		public static explicit operator codePcnMaxTirePressure(XElement xe) { return XTypedServices.ToXTypedElement<codePcnMaxTirePressure>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// A code indicating the maximum allowable tire pressure categoryrelated to a PCN number.
        /// </para>
        /// </summary>
        public codePcnMaxTirePressure() {
        }
        
        public virtual OFMX.codePcnMaxTirePressureBase TypedValue {
            get {
                XElement x = this.Untyped;
                return ((OFMX.codePcnMaxTirePressureBase)(Enum.Parse(typeof(OFMX.codePcnMaxTirePressureBase), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetValueWithValidation(value.ToString(), "TypedValue", global::OFMX.codePcnMaxTirePressureBaseValidator.TypeDefinition);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<codePcnMaxTirePressure>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public sealed class codePhaseProcBase {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "0",
                        "1",
                        "2",
                        "3",
                        "4",
                        "5",
                        "6",
                        "7",
                        "8",
                        "9",
                        "F",
                        "M",
                        "S",
                        "T",
                        "V",
                        "A",
                        "Z",
                        "P",
                        "R",
                        "OTHER"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private codePhaseProcBase() {
        }
    }
    
    /// <summary>
    /// <para>
    /// A code indicating a phase of a SID, STAR or IAP.  Note: Some of the values apply only for a SID, other apply  only for a STAR and other apply only for an IAP (the 'A' value).
    /// </para>
    /// </summary>
    public partial class codePhaseProc : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TypedValueXName = System.Xml.Linq.XName.Get("TypedValue", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("codePhaseProc", "");
        
		public static explicit operator codePhaseProc(XElement xe) { return XTypedServices.ToXTypedElement<codePhaseProc>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// A code indicating a phase of a SID, STAR or IAP.  Note: Some of the values apply only for a SID, other apply  only for a STAR and other apply only for an IAP (the 'A' value).
        /// </para>
        /// </summary>
        public codePhaseProc() {
        }
        
        public virtual string TypedValue {
            get {
                XElement x = this.Untyped;
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetValueWithValidation(value, "TypedValue", global::OFMX.codePhaseProcBase.TypeDefinition);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<codePhaseProc>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public enum codePreparationSfcBase {
        
        NATURAL,
        
        ROLLED,
        
        GRADED,
        
        GROOVED,
        
        OILED,
        
        PAVED,
        
        PFC,
        
        AFSC,
        
        RFSC,
        
        OTHER,
    }
    
    public sealed class codePreparationSfcBaseValidator {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "NATURAL",
                        "ROLLED",
                        "GRADED",
                        "GROOVED",
                        "OILED",
                        "PAVED",
                        "PFC",
                        "AFSC",
                        "RFSC",
                        "OTHER"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private codePreparationSfcBaseValidator() {
        }
    }
    
    /// <summary>
    /// <para>
    /// A code indicating the preparation technique for a surface area.
    /// </para>
    /// </summary>
    public partial class codePreparationSfc : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TypedValueXName = System.Xml.Linq.XName.Get("TypedValue", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("codePreparationSfc", "");
        
		public static explicit operator codePreparationSfc(XElement xe) { return XTypedServices.ToXTypedElement<codePreparationSfc>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// A code indicating the preparation technique for a surface area.
        /// </para>
        /// </summary>
        public codePreparationSfc() {
        }
        
        public virtual OFMX.codePreparationSfcBase TypedValue {
            get {
                XElement x = this.Untyped;
                return ((OFMX.codePreparationSfcBase)(Enum.Parse(typeof(OFMX.codePreparationSfcBase), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetValueWithValidation(value.ToString(), "TypedValue", global::OFMX.codePreparationSfcBaseValidator.TypeDefinition);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<codePreparationSfc>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public enum codePsnApronBase {
        
        EDGE,
        
        OTHER,
    }
    
    public sealed class codePsnApronBaseValidator {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "EDGE",
                        "OTHER"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private codePsnApronBaseValidator() {
        }
    }
    
    /// <summary>
    /// <para>
    /// A code indicating a location on the surface of an apron.
    /// </para>
    /// </summary>
    public partial class codePsnApron : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TypedValueXName = System.Xml.Linq.XName.Get("TypedValue", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("codePsnApron", "");
        
		public static explicit operator codePsnApron(XElement xe) { return XTypedServices.ToXTypedElement<codePsnApron>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// A code indicating a location on the surface of an apron.
        /// </para>
        /// </summary>
        public codePsnApron() {
        }
        
        public virtual OFMX.codePsnApronBase TypedValue {
            get {
                XElement x = this.Untyped;
                return ((OFMX.codePsnApronBase)(Enum.Parse(typeof(OFMX.codePsnApronBase), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetValueWithValidation(value.ToString(), "TypedValue", global::OFMX.codePsnApronBaseValidator.TypeDefinition);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<codePsnApron>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public enum codePsnIlsBase {
        
        O,
        
        M,
        
        I,
        
        C,
        
        OTHER,
    }
    
    public sealed class codePsnIlsBaseValidator {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "O",
                        "M",
                        "I",
                        "C",
                        "OTHER"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private codePsnIlsBaseValidator() {
        }
    }
    
    /// <summary>
    /// <para>
    /// A code indicating a position in the ILS system.  E.g. outer, middle, inner, backcourse.
    /// </para>
    /// </summary>
    public partial class codePsnIls : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TypedValueXName = System.Xml.Linq.XName.Get("TypedValue", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("codePsnIls", "");
        
		public static explicit operator codePsnIls(XElement xe) { return XTypedServices.ToXTypedElement<codePsnIls>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// A code indicating a position in the ILS system.  E.g. outer, middle, inner, backcourse.
        /// </para>
        /// </summary>
        public codePsnIls() {
        }
        
        public virtual OFMX.codePsnIlsBase TypedValue {
            get {
                XElement x = this.Untyped;
                return ((OFMX.codePsnIlsBase)(Enum.Parse(typeof(OFMX.codePsnIlsBase), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetValueWithValidation(value.ToString(), "TypedValue", global::OFMX.codePsnIlsBaseValidator.TypeDefinition);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<codePsnIls>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public enum codePsnRelAxisBase {
        
        LEFT,
        
        RIGHT,
        
        BOTH,
        
        OTHER,
    }
    
    public sealed class codePsnRelAxisBaseValidator {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "LEFT",
                        "RIGHT",
                        "BOTH",
                        "OTHER"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private codePsnRelAxisBaseValidator() {
        }
    }
    
    /// <summary>
    /// <para>
    /// A code indicating a position, relative to the an axis. For example: left/right of a runway centreline.
    /// </para>
    /// </summary>
    public partial class codePsnRelAxis : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TypedValueXName = System.Xml.Linq.XName.Get("TypedValue", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("codePsnRelAxis", "");
        
		public static explicit operator codePsnRelAxis(XElement xe) { return XTypedServices.ToXTypedElement<codePsnRelAxis>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// A code indicating a position, relative to the an axis. For example: left/right of a runway centreline.
        /// </para>
        /// </summary>
        public codePsnRelAxis() {
        }
        
        public virtual OFMX.codePsnRelAxisBase TypedValue {
            get {
                XElement x = this.Untyped;
                return ((OFMX.codePsnRelAxisBase)(Enum.Parse(typeof(OFMX.codePsnRelAxisBase), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetValueWithValidation(value.ToString(), "TypedValue", global::OFMX.codePsnRelAxisBaseValidator.TypeDefinition);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<codePsnRelAxis>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public enum codePsnRwyBase {
        
        TDZ,
        
        AIM,
        
        CL,
        
        EDGE,
        
        THR,
        
        SWYEDGE,
        
        DESIG,
        
        AFTTHR,
        
        DISPTHR,
        
        SWYCL,
        
        END,
        
        SWYEND,
        
        TWYINT,
        
        HOLDBAY,
        
        RTWYINT,
        
        OTHER,
    }
    
    public sealed class codePsnRwyBaseValidator {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "TDZ",
                        "AIM",
                        "CL",
                        "EDGE",
                        "THR",
                        "SWYEDGE",
                        "DESIG",
                        "AFTTHR",
                        "DISPTHR",
                        "SWYCL",
                        "END",
                        "SWYEND",
                        "TWYINT",
                        "HOLDBAY",
                        "RTWYINT",
                        "OTHER"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private codePsnRwyBaseValidator() {
        }
    }
    
    /// <summary>
    /// <para>
    /// A code indicating the position of an item on a surface of a runway.  Eg: THR, runway end, runway centre line, TDZ, etc.
    /// </para>
    /// </summary>
    public partial class codePsnRwy : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TypedValueXName = System.Xml.Linq.XName.Get("TypedValue", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("codePsnRwy", "");
        
		public static explicit operator codePsnRwy(XElement xe) { return XTypedServices.ToXTypedElement<codePsnRwy>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// A code indicating the position of an item on a surface of a runway.  Eg: THR, runway end, runway centre line, TDZ, etc.
        /// </para>
        /// </summary>
        public codePsnRwy() {
        }
        
        public virtual OFMX.codePsnRwyBase TypedValue {
            get {
                XElement x = this.Untyped;
                return ((OFMX.codePsnRwyBase)(Enum.Parse(typeof(OFMX.codePsnRwyBase), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetValueWithValidation(value.ToString(), "TypedValue", global::OFMX.codePsnRwyBaseValidator.TypeDefinition);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<codePsnRwy>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public enum codePsnTlofBase {
        
        AIM,
        
        EDGE,
        
        OTHER,
    }
    
    public sealed class codePsnTlofBaseValidator {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "AIM",
                        "EDGE",
                        "OTHER"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private codePsnTlofBaseValidator() {
        }
    }
    
    /// <summary>
    /// <para>
    /// A code indicating the position of an item on the surface of a Touch Down and Lift-off Area.
    /// </para>
    /// </summary>
    public partial class codePsnTlof : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TypedValueXName = System.Xml.Linq.XName.Get("TypedValue", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("codePsnTlof", "");
        
		public static explicit operator codePsnTlof(XElement xe) { return XTypedServices.ToXTypedElement<codePsnTlof>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// A code indicating the position of an item on the surface of a Touch Down and Lift-off Area.
        /// </para>
        /// </summary>
        public codePsnTlof() {
        }
        
        public virtual OFMX.codePsnTlofBase TypedValue {
            get {
                XElement x = this.Untyped;
                return ((OFMX.codePsnTlofBase)(Enum.Parse(typeof(OFMX.codePsnTlofBase), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetValueWithValidation(value.ToString(), "TypedValue", global::OFMX.codePsnTlofBaseValidator.TypeDefinition);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<codePsnTlof>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public enum codePsnTwyBase {
        
        CL,
        
        EDGE,
        
        END,
        
        RWY,
        
        HOLD,
        
        OTHER,
    }
    
    public sealed class codePsnTwyBaseValidator {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "CL",
                        "EDGE",
                        "END",
                        "RWY",
                        "HOLD",
                        "OTHER"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private codePsnTwyBaseValidator() {
        }
    }
    
    /// <summary>
    /// <para>
    /// A code indicating the position of an item on the surface of a taxiway.
    /// </para>
    /// </summary>
    public partial class codePsnTwy : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TypedValueXName = System.Xml.Linq.XName.Get("TypedValue", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("codePsnTwy", "");
        
		public static explicit operator codePsnTwy(XElement xe) { return XTypedServices.ToXTypedElement<codePsnTwy>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// A code indicating the position of an item on the surface of a taxiway.
        /// </para>
        /// </summary>
        public codePsnTwy() {
        }
        
        public virtual OFMX.codePsnTwyBase TypedValue {
            get {
                XElement x = this.Untyped;
                return ((OFMX.codePsnTwyBase)(Enum.Parse(typeof(OFMX.codePsnTwyBase), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetValueWithValidation(value.ToString(), "TypedValue", global::OFMX.codePsnTwyBaseValidator.TypeDefinition);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<codePsnTwy>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public enum codePurposeBase {
        
        S,
        
        NS,
        
        P,
        
        TRG,
        
        WORK,
        
        OTHER,
    }
    
    public sealed class codePurposeBaseValidator {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "S",
                        "NS",
                        "P",
                        "TRG",
                        "WORK",
                        "OTHER"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private codePurposeBaseValidator() {
        }
    }
    
    /// <summary>
    /// <para>
    /// A code indicating the purpose of a flight.
    /// </para>
    /// </summary>
    public partial class codePurpose : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TypedValueXName = System.Xml.Linq.XName.Get("TypedValue", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("codePurpose", "");
        
		public static explicit operator codePurpose(XElement xe) { return XTypedServices.ToXTypedElement<codePurpose>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// A code indicating the purpose of a flight.
        /// </para>
        /// </summary>
        public codePurpose() {
        }
        
        public virtual OFMX.codePurposeBase TypedValue {
            get {
                XElement x = this.Untyped;
                return ((OFMX.codePurposeBase)(Enum.Parse(typeof(OFMX.codePurposeBase), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetValueWithValidation(value.ToString(), "TypedValue", global::OFMX.codePurposeBaseValidator.TypeDefinition);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<codePurpose>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public enum codeRefOchBase {
        
        ARP,
        
        THR,
        
        OTHER,
    }
    
    public sealed class codeRefOchBaseValidator {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "ARP",
                        "THR",
                        "OTHER"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private codeRefOchBaseValidator() {
        }
    }
    
    /// <summary>
    /// <para>
    /// A code indicating the reference position for the obstacle clearance height.
    /// </para>
    /// </summary>
    public partial class codeRefOch : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TypedValueXName = System.Xml.Linq.XName.Get("TypedValue", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("codeRefOch", "");
        
		public static explicit operator codeRefOch(XElement xe) { return XTypedServices.ToXTypedElement<codeRefOch>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// A code indicating the reference position for the obstacle clearance height.
        /// </para>
        /// </summary>
        public codeRefOch() {
        }
        
        public virtual OFMX.codeRefOchBase TypedValue {
            get {
                XElement x = this.Untyped;
                return ((OFMX.codeRefOchBase)(Enum.Parse(typeof(OFMX.codeRefOchBase), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetValueWithValidation(value.ToString(), "TypedValue", global::OFMX.codeRefOchBaseValidator.TypeDefinition);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<codeRefOch>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// A code qualifying a location (such as an airspace, aerodrome, point, etc.) when used as FLOW_CONDITION_ELEMENT, e.g. departing from that location, crossing the location, activation hours of the location are used as condition, etc..
    /// </para>
    /// </summary>
    public enum codeRelWithLoc {
        
        DEP,
        
        XNG,
        
        ARR,
        
        ACT,
        
        AVB,
    }
    
    /// <summary>
    /// <para>
    /// A code qualifying a location (such as an airspace, aerodrome, point, etc.) when used as FLOW_CONDITION_ELEMENT, e.g. departing from that location, crossing the location, activation hours of the location are used as condition, etc..
    /// </para>
    /// </summary>
    public sealed class codeRelWithLocValidator {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "DEP",
                        "XNG",
                        "ARR",
                        "ACT",
                        "AVB"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private codeRelWithLocValidator() {
        }
    }
    
    public enum codeRepAtcBase {
        
        C,
        
        R,
        
        N,
        
        OTHER,
    }
    
    public sealed class codeRepAtcBaseValidator {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "C",
                        "R",
                        "N",
                        "OTHER"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private codeRepAtcBaseValidator() {
        }
    }
    
    /// <summary>
    /// <para>
    /// A code indicating the type of position report required by an ATC Unit.  Eg.: compulsory or on request.
    /// </para>
    /// </summary>
    public partial class codeRepAtc : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TypedValueXName = System.Xml.Linq.XName.Get("TypedValue", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("codeRepAtc", "");
        
		public static explicit operator codeRepAtc(XElement xe) { return XTypedServices.ToXTypedElement<codeRepAtc>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// A code indicating the type of position report required by an ATC Unit.  Eg.: compulsory or on request.
        /// </para>
        /// </summary>
        public codeRepAtc() {
        }
        
        public virtual OFMX.codeRepAtcBase TypedValue {
            get {
                XElement x = this.Untyped;
                return ((OFMX.codeRepAtcBase)(Enum.Parse(typeof(OFMX.codeRepAtcBase), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetValueWithValidation(value.ToString(), "TypedValue", global::OFMX.codeRepAtcBaseValidator.TypeDefinition);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<codeRepAtc>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public sealed class codeRnpBase {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(8)), null, 0, 0, null, null, 0, null, null, 0, new string[] {
                        "\\d{1,2}(\\.\\d{1}){0,1}"}, 0, XmlSchemaWhiteSpace.Collapse));
        
        private codeRnpBase() {
        }
    }
    
    /// <summary>
    /// <para>
    /// A code indicating the value of the required navigation performance.
    /// </para>
    /// </summary>
    public partial class codeRnp : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TypedValueXName = System.Xml.Linq.XName.Get("TypedValue", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("codeRnp", "");
        
		public static explicit operator codeRnp(XElement xe) { return XTypedServices.ToXTypedElement<codeRnp>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// A code indicating the value of the required navigation performance.
        /// </para>
        /// </summary>
        public codeRnp() {
        }
        
        public virtual decimal TypedValue {
            get {
                XElement x = this.Untyped;
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
            set {
                this.SetValueWithValidation(value, "TypedValue", global::OFMX.codeRnpBase.TypeDefinition);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<codeRnp>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public enum codeRteAvblBase {
        
        NONFUA,
        
        CDR1,
        
        CDR2,
        
        CDR3,
        
        SPEC,
        
        CLSD,
    }
    
    public sealed class codeRteAvblBaseValidator {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "NONFUA",
                        "CDR1",
                        "CDR2",
                        "CDR3",
                        "SPEC",
                        "CLSD"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private codeRteAvblBaseValidator() {
        }
    }
    
    /// <summary>
    /// <para>
    /// A code indicating the route segment availability whether within the Flexible Use of Airspace concept or not.
    /// </para>
    /// </summary>
    public partial class codeRteAvbl : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TypedValueXName = System.Xml.Linq.XName.Get("TypedValue", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("codeRteAvbl", "");
        
		public static explicit operator codeRteAvbl(XElement xe) { return XTypedServices.ToXTypedElement<codeRteAvbl>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// A code indicating the route segment availability whether within the Flexible Use of Airspace concept or not.
        /// </para>
        /// </summary>
        public codeRteAvbl() {
        }
        
        public virtual OFMX.codeRteAvblBase TypedValue {
            get {
                XElement x = this.Untyped;
                return ((OFMX.codeRteAvblBase)(Enum.Parse(typeof(OFMX.codeRteAvblBase), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetValueWithValidation(value.ToString(), "TypedValue", global::OFMX.codeRteAvblBaseValidator.TypeDefinition);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<codeRteAvbl>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public enum codeRvsmPointBase {
        
        IN,
        
        OUT,
        
        INOUT,
        
        OTHER,
    }
    
    public sealed class codeRvsmPointBaseValidator {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "IN",
                        "OUT",
                        "INOUT",
                        "OTHER"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private codeRvsmPointBaseValidator() {
        }
    }
    
    /// <summary>
    /// <para>
    /// A code indicating that the point has a specific role in the RVSM context.
    /// </para>
    /// </summary>
    public partial class codeRvsmPoint : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TypedValueXName = System.Xml.Linq.XName.Get("TypedValue", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("codeRvsmPoint", "");
        
		public static explicit operator codeRvsmPoint(XElement xe) { return XTypedServices.ToXTypedElement<codeRvsmPoint>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// A code indicating that the point has a specific role in the RVSM context.
        /// </para>
        /// </summary>
        public codeRvsmPoint() {
        }
        
        public virtual OFMX.codeRvsmPointBase TypedValue {
            get {
                XElement x = this.Untyped;
                return ((OFMX.codeRvsmPointBase)(Enum.Parse(typeof(OFMX.codeRvsmPointBase), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetValueWithValidation(value.ToString(), "TypedValue", global::OFMX.codeRvsmPointBaseValidator.TypeDefinition);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<codeRvsmPoint>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public enum codeSourceSerBase {
        
        ICAO,
        
        STATE,
        
        FAA,
        
        OTHER,
    }
    
    public sealed class codeSourceSerBaseValidator {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "ICAO",
                        "STATE",
                        "FAA",
                        "OTHER"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private codeSourceSerBaseValidator() {
        }
    }
    
    /// <summary>
    /// <para>
    /// A code indicating the source of the service type. The list of allowable values is open-ended.
    /// </para>
    /// </summary>
    public partial class codeSourceSer : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TypedValueXName = System.Xml.Linq.XName.Get("TypedValue", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("codeSourceSer", "");
        
		public static explicit operator codeSourceSer(XElement xe) { return XTypedServices.ToXTypedElement<codeSourceSer>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// A code indicating the source of the service type. The list of allowable values is open-ended.
        /// </para>
        /// </summary>
        public codeSourceSer() {
        }
        
        public virtual OFMX.codeSourceSerBase TypedValue {
            get {
                XElement x = this.Untyped;
                return ((OFMX.codeSourceSerBase)(Enum.Parse(typeof(OFMX.codeSourceSerBase), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetValueWithValidation(value.ToString(), "TypedValue", global::OFMX.codeSourceSerBaseValidator.TypeDefinition);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<codeSourceSer>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public enum codeSpecialDateBase {
        
        HOL,
        
        BFRI,
        
        OTHER,
    }
    
    public sealed class codeSpecialDateBaseValidator {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "HOL",
                        "BFRI",
                        "OTHER"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private codeSpecialDateBaseValidator() {
        }
    }
    
    /// <summary>
    /// <para>
    /// A code indicating the type of a special date, such as 'holiday', 'busy Friday', etc.
    /// </para>
    /// </summary>
    public partial class codeSpecialDate : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TypedValueXName = System.Xml.Linq.XName.Get("TypedValue", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("codeSpecialDate", "");
        
		public static explicit operator codeSpecialDate(XElement xe) { return XTypedServices.ToXTypedElement<codeSpecialDate>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// A code indicating the type of a special date, such as 'holiday', 'busy Friday', etc.
        /// </para>
        /// </summary>
        public codeSpecialDate() {
        }
        
        public virtual OFMX.codeSpecialDateBase TypedValue {
            get {
                XElement x = this.Untyped;
                return ((OFMX.codeSpecialDateBase)(Enum.Parse(typeof(OFMX.codeSpecialDateBase), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetValueWithValidation(value.ToString(), "TypedValue", global::OFMX.codeSpecialDateBaseValidator.TypeDefinition);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<codeSpecialDate>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public enum codeSpeedRefBase {
        
        IAS,
        
        TAS,
        
        GS,
        
        OTHER,
    }
    
    public sealed class codeSpeedRefBaseValidator {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "IAS",
                        "TAS",
                        "GS",
                        "OTHER"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private codeSpeedRefBaseValidator() {
        }
    }
    
    /// <summary>
    /// <para>
    /// A code indicating the reference system for a speed value.
    /// </para>
    /// </summary>
    public partial class codeSpeedRef : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TypedValueXName = System.Xml.Linq.XName.Get("TypedValue", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("codeSpeedRef", "");
        
		public static explicit operator codeSpeedRef(XElement xe) { return XTypedServices.ToXTypedElement<codeSpeedRef>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// A code indicating the reference system for a speed value.
        /// </para>
        /// </summary>
        public codeSpeedRef() {
        }
        
        public virtual OFMX.codeSpeedRefBase TypedValue {
            get {
                XElement x = this.Untyped;
                return ((OFMX.codeSpeedRefBase)(Enum.Parse(typeof(OFMX.codeSpeedRefBase), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetValueWithValidation(value.ToString(), "TypedValue", global::OFMX.codeSpeedRefBaseValidator.TypeDefinition);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<codeSpeedRef>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// DEPRECATED-4.0
    /// </para>
    /// </summary>
    public enum codeStrengthSfcBase {
        
        SIWL,
        
        PCN,
        
        LCN,
    }
    
    /// <summary>
    /// <para>
    /// DEPRECATED-4.0
    /// </para>
    /// </summary>
    public sealed class codeStrengthSfcBaseValidator {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "SIWL",
                        "PCN",
                        "LCN"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private codeStrengthSfcBaseValidator() {
        }
    }
    
    /// <summary>
    /// <para>
    /// [Deprecated] A code indicating the convention used to measure the strength of a surface. Eg: PCN, SIWL, etc..
    /// </para>
    /// <para>
    /// DEPRECATED-4.5
    /// </para>
    /// </summary>
    public partial class codeStrengthSfc : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TypedValueXName = System.Xml.Linq.XName.Get("TypedValue", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("codeStrengthSfc", "");
        
		public static explicit operator codeStrengthSfc(XElement xe) { return XTypedServices.ToXTypedElement<codeStrengthSfc>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// [Deprecated] A code indicating the convention used to measure the strength of a surface. Eg: PCN, SIWL, etc..
        /// </para>
        /// <para>
        /// DEPRECATED-4.5
        /// </para>
        /// </summary>
        public codeStrengthSfc() {
        }
        
        public virtual OFMX.codeStrengthSfcBase TypedValue {
            get {
                XElement x = this.Untyped;
                return ((OFMX.codeStrengthSfcBase)(Enum.Parse(typeof(OFMX.codeStrengthSfcBase), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetValueWithValidation(value.ToString(), "TypedValue", global::OFMX.codeStrengthSfcBaseValidator.TypeDefinition);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<codeStrengthSfc>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public enum codeStsSfcBase {
        
        WIP,
        
        PARKED,
        
        CLSD,
        
        FAILAID,
        
        SPOWER,
        
        OTHER,
    }
    
    public sealed class codeStsSfcBaseValidator {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "WIP",
                        "PARKED",
                        "CLSD",
                        "FAILAID",
                        "SPOWER",
                        "OTHER"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private codeStsSfcBaseValidator() {
        }
    }
    
    /// <summary>
    /// <para>
    /// A code indicating the operational status of a runway, taxiway, gate, parking position, FATO etc..  Eg: serviceable, unserviceable, closed, work in progress, etc..
    /// </para>
    /// </summary>
    public partial class codeStsSfc : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TypedValueXName = System.Xml.Linq.XName.Get("TypedValue", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("codeStsSfc", "");
        
		public static explicit operator codeStsSfc(XElement xe) { return XTypedServices.ToXTypedElement<codeStsSfc>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// A code indicating the operational status of a runway, taxiway, gate, parking position, FATO etc..  Eg: serviceable, unserviceable, closed, work in progress, etc..
        /// </para>
        /// </summary>
        public codeStsSfc() {
        }
        
        public virtual OFMX.codeStsSfcBase TypedValue {
            get {
                XElement x = this.Untyped;
                return ((OFMX.codeStsSfcBase)(Enum.Parse(typeof(OFMX.codeStsSfcBase), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetValueWithValidation(value.ToString(), "TypedValue", global::OFMX.codeStsSfcBaseValidator.TypeDefinition);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<codeStsSfc>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public enum codeTimeEventBase {
        
        SR,
        
        SS,
    }
    
    public sealed class codeTimeEventBaseValidator {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "SR",
                        "SS"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private codeTimeEventBaseValidator() {
        }
    }
    
    /// <summary>
    /// <para>
    /// A code indicating an event occurrence during any day.  Ex: sunrise, sunset.
    /// </para>
    /// </summary>
    public partial class codeTimeEvent : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TypedValueXName = System.Xml.Linq.XName.Get("TypedValue", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("codeTimeEvent", "");
        
		public static explicit operator codeTimeEvent(XElement xe) { return XTypedServices.ToXTypedElement<codeTimeEvent>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// A code indicating an event occurrence during any day.  Ex: sunrise, sunset.
        /// </para>
        /// </summary>
        public codeTimeEvent() {
        }
        
        public virtual OFMX.codeTimeEventBase TypedValue {
            get {
                XElement x = this.Untyped;
                return ((OFMX.codeTimeEventBase)(Enum.Parse(typeof(OFMX.codeTimeEventBase), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetValueWithValidation(value.ToString(), "TypedValue", global::OFMX.codeTimeEventBaseValidator.TypeDefinition);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<codeTimeEvent>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public enum codeTimeRefBase {
        
        UTC,
        
        UTCW,
    }
    
    public sealed class codeTimeRefBaseValidator {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "UTC",
                        "UTCW"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private codeTimeRefBaseValidator() {
        }
    }
    
    /// <summary>
    /// <para>
    /// A code indicating the time reference system: UTC or 'UTC adjustable for summer time'(the specified time is applicable during winter; during the summer time - daylight saving time - the value must be decreased by one hour).
    /// </para>
    /// </summary>
    public partial class codeTimeRef : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TypedValueXName = System.Xml.Linq.XName.Get("TypedValue", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("codeTimeRef", "");
        
		public static explicit operator codeTimeRef(XElement xe) { return XTypedServices.ToXTypedElement<codeTimeRef>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// A code indicating the time reference system: UTC or 'UTC adjustable for summer time'(the specified time is applicable during winter; during the summer time - daylight saving time - the value must be decreased by one hour).
        /// </para>
        /// </summary>
        public codeTimeRef() {
        }
        
        public virtual OFMX.codeTimeRefBase TypedValue {
            get {
                XElement x = this.Untyped;
                return ((OFMX.codeTimeRefBase)(Enum.Parse(typeof(OFMX.codeTimeRefBase), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetValueWithValidation(value.ToString(), "TypedValue", global::OFMX.codeTimeRefBaseValidator.TypeDefinition);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<codeTimeRef>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public enum codeTypeAcftBase {
        
        L,
        
        S,
        
        A,
        
        H,
        
        G,
        
        T,
        
        R,
        
        E,
        
        N,
        
        P,
        
        U,
        
        B,
        
        D,
        
        OTHER,
    }
    
    public sealed class codeTypeAcftBaseValidator {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "L",
                        "S",
                        "A",
                        "H",
                        "G",
                        "T",
                        "R",
                        "E",
                        "N",
                        "P",
                        "U",
                        "B",
                        "D",
                        "OTHER"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private codeTypeAcftBaseValidator() {
        }
    }
    
    /// <summary>
    /// <para>
    /// A code indicating the type of an aircraft
    /// </para>
    /// </summary>
    public partial class codeTypeAcft : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TypedValueXName = System.Xml.Linq.XName.Get("TypedValue", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("codeTypeAcft", "");
        
		public static explicit operator codeTypeAcft(XElement xe) { return XTypedServices.ToXTypedElement<codeTypeAcft>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// A code indicating the type of an aircraft
        /// </para>
        /// </summary>
        public codeTypeAcft() {
        }
        
        public virtual OFMX.codeTypeAcftBase TypedValue {
            get {
                XElement x = this.Untyped;
                return ((OFMX.codeTypeAcftBase)(Enum.Parse(typeof(OFMX.codeTypeAcftBase), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetValueWithValidation(value.ToString(), "TypedValue", global::OFMX.codeTypeAcftBaseValidator.TypeDefinition);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<codeTypeAcft>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public sealed class codeTypeAcftCapBase {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "RVSM",
                        "RNAV",
                        "TCAS",
                        "8.33",
                        "OTHER"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private codeTypeAcftCapBase() {
        }
    }
    
    /// <summary>
    /// <para>
    /// A code indicating the type of equipment and certification of an aircraft for a specified capability;  i.e.: RNAV, RVSM, etc.
    /// </para>
    /// </summary>
    public partial class codeTypeAcftCap : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TypedValueXName = System.Xml.Linq.XName.Get("TypedValue", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("codeTypeAcftCap", "");
        
		public static explicit operator codeTypeAcftCap(XElement xe) { return XTypedServices.ToXTypedElement<codeTypeAcftCap>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// A code indicating the type of equipment and certification of an aircraft for a specified capability;  i.e.: RNAV, RVSM, etc.
        /// </para>
        /// </summary>
        public codeTypeAcftCap() {
        }
        
        public virtual string TypedValue {
            get {
                XElement x = this.Untyped;
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetValueWithValidation(value, "TypedValue", global::OFMX.codeTypeAcftCapBase.TypeDefinition);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<codeTypeAcftCap>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public enum codeTypeAcftEngineBase {
        
        J,
        
        P,
        
        T,
        
        OTHER,
    }
    
    public sealed class codeTypeAcftEngineBaseValidator {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "J",
                        "P",
                        "T",
                        "OTHER"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private codeTypeAcftEngineBaseValidator() {
        }
    }
    
    /// <summary>
    /// <para>
    /// A code indicating the type of aircarft engine (e.g., jet, piston, turbo).
    /// </para>
    /// </summary>
    public partial class codeTypeAcftEngine : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TypedValueXName = System.Xml.Linq.XName.Get("TypedValue", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("codeTypeAcftEngine", "");
        
		public static explicit operator codeTypeAcftEngine(XElement xe) { return XTypedServices.ToXTypedElement<codeTypeAcftEngine>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// A code indicating the type of aircarft engine (e.g., jet, piston, turbo).
        /// </para>
        /// </summary>
        public codeTypeAcftEngine() {
        }
        
        public virtual OFMX.codeTypeAcftEngineBase TypedValue {
            get {
                XElement x = this.Untyped;
                return ((OFMX.codeTypeAcftEngineBase)(Enum.Parse(typeof(OFMX.codeTypeAcftEngineBase), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetValueWithValidation(value.ToString(), "TypedValue", global::OFMX.codeTypeAcftEngineBaseValidator.TypeDefinition);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<codeTypeAcftEngine>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public sealed class codeTypeAddressBase {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "POST",
                        "PHONE",
                        "PHONE-MET",
                        "FAX",
                        "TLX",
                        "SITA",
                        "AFS",
                        "EMAIL",
                        "URL",
                        "URL-CAM",
                        "URL-MET",
                        "RADIO",
                        "OTHER"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private codeTypeAddressBase() {
        }
    }
    
    /// <summary>
    /// <para>
    /// A code indicating the address type.  Ex: postal address, phone number, fax number, AFS address, E-mail address, telex number, etc..
    /// </para>
    /// </summary>
    public partial class codeTypeAddress : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TypedValueXName = System.Xml.Linq.XName.Get("TypedValue", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("codeTypeAddress", "");
        
		public static explicit operator codeTypeAddress(XElement xe) { return XTypedServices.ToXTypedElement<codeTypeAddress>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// A code indicating the address type.  Ex: postal address, phone number, fax number, AFS address, E-mail address, telex number, etc..
        /// </para>
        /// </summary>
        public codeTypeAddress() {
        }
        
        public virtual string TypedValue {
            get {
                XElement x = this.Untyped;
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetValueWithValidation(value, "TypedValue", global::OFMX.codeTypeAddressBase.TypeDefinition);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<codeTypeAddress>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public enum codeTypeAdHpBase {
        
        AD,
        
        AH,
        
        HP,
        
        LS,
    }
    
    public sealed class codeTypeAdHpBaseValidator {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "AD",
                        "AH",
                        "HP",
                        "LS"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private codeTypeAdHpBaseValidator() {
        }
    }
    
    /// <summary>
    /// <para>
    /// A code specifying whether a particular entity occurrence is an Aerodrome or a Heliport.
    /// </para>
    /// </summary>
    public partial class codeTypeAdHp : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TypedValueXName = System.Xml.Linq.XName.Get("TypedValue", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("codeTypeAdHp", "");
        
		public static explicit operator codeTypeAdHp(XElement xe) { return XTypedServices.ToXTypedElement<codeTypeAdHp>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// A code specifying whether a particular entity occurrence is an Aerodrome or a Heliport.
        /// </para>
        /// </summary>
        public codeTypeAdHp() {
        }
        
        public virtual OFMX.codeTypeAdHpBase TypedValue {
            get {
                XElement x = this.Untyped;
                return ((OFMX.codeTypeAdHpBase)(Enum.Parse(typeof(OFMX.codeTypeAdHpBase), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetValueWithValidation(value.ToString(), "TypedValue", global::OFMX.codeTypeAdHpBaseValidator.TypeDefinition);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<codeTypeAdHp>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public enum codeTypeAdHpClcBase {
        
        F,
        
        R,
        
        P,
        
        U,
        
        S,
        
        OTHER,
    }
    
    public sealed class codeTypeAdHpClcBaseValidator {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "F",
                        "R",
                        "P",
                        "U",
                        "S",
                        "OTHER"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private codeTypeAdHpClcBaseValidator() {
        }
    }
    
    /// <summary>
    /// <para>
    /// A code indicating the extent of collocation between an aerodrome and a heliport.
    /// </para>
    /// </summary>
    public partial class codeTypeAdHpClc : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TypedValueXName = System.Xml.Linq.XName.Get("TypedValue", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("codeTypeAdHpClc", "");
        
		public static explicit operator codeTypeAdHpClc(XElement xe) { return XTypedServices.ToXTypedElement<codeTypeAdHpClc>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// A code indicating the extent of collocation between an aerodrome and a heliport.
        /// </para>
        /// </summary>
        public codeTypeAdHpClc() {
        }
        
        public virtual OFMX.codeTypeAdHpClcBase TypedValue {
            get {
                XElement x = this.Untyped;
                return ((OFMX.codeTypeAdHpClcBase)(Enum.Parse(typeof(OFMX.codeTypeAdHpClcBase), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetValueWithValidation(value.ToString(), "TypedValue", global::OFMX.codeTypeAdHpClcBaseValidator.TypeDefinition);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<codeTypeAdHpClc>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public enum codeTypeAeroLgtBase {
        
        BCN,
        
        IBN,
        
        HBCN,
        
        ABN,
        
        MARINE,
        
        RSP,
        
        SIG,
        
        OTHER,
    }
    
    public sealed class codeTypeAeroLgtBaseValidator {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "BCN",
                        "IBN",
                        "HBCN",
                        "ABN",
                        "MARINE",
                        "RSP",
                        "SIG",
                        "OTHER"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private codeTypeAeroLgtBaseValidator() {
        }
    }
    
    /// <summary>
    /// <para>
    /// A code indicating a type of aeronautical ground light.  Eg: Marine, RWY BCN, ABN, IBN, etc.
    /// </para>
    /// </summary>
    public partial class codeTypeAeroLgt : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TypedValueXName = System.Xml.Linq.XName.Get("TypedValue", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("codeTypeAeroLgt", "");
        
		public static explicit operator codeTypeAeroLgt(XElement xe) { return XTypedServices.ToXTypedElement<codeTypeAeroLgt>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// A code indicating a type of aeronautical ground light.  Eg: Marine, RWY BCN, ABN, IBN, etc.
        /// </para>
        /// </summary>
        public codeTypeAeroLgt() {
        }
        
        public virtual OFMX.codeTypeAeroLgtBase TypedValue {
            get {
                XElement x = this.Untyped;
                return ((OFMX.codeTypeAeroLgtBase)(Enum.Parse(typeof(OFMX.codeTypeAeroLgtBase), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetValueWithValidation(value.ToString(), "TypedValue", global::OFMX.codeTypeAeroLgtBaseValidator.TypeDefinition);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<codeTypeAeroLgt>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public enum codeTypeAirspaceVertexBase {
        
        ABE,
        
        CIR,
        
        GRC,
        
        RHL,
        
        CCA,
        
        CWA,
        
        FNT,
        
        OTHER,
    }
    
    public sealed class codeTypeAirspaceVertexBaseValidator {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "ABE",
                        "CIR",
                        "GRC",
                        "RHL",
                        "CCA",
                        "CWA",
                        "FNT",
                        "OTHER"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private codeTypeAirspaceVertexBaseValidator() {
        }
    }
    
    /// <summary>
    /// <para>
    /// A code indicating the type of path to the next point of an airspace vertex, which is always a closed path. E.g. great circle, rhumbline, geoidal line, clockwise arc, counter clockwise arc, etc.
    /// </para>
    /// </summary>
    public partial class codeTypeAirspaceVertex : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TypedValueXName = System.Xml.Linq.XName.Get("TypedValue", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("codeTypeAirspaceVertex", "");
        
		public static explicit operator codeTypeAirspaceVertex(XElement xe) { return XTypedServices.ToXTypedElement<codeTypeAirspaceVertex>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// A code indicating the type of path to the next point of an airspace vertex, which is always a closed path. E.g. great circle, rhumbline, geoidal line, clockwise arc, counter clockwise arc, etc.
        /// </para>
        /// </summary>
        public codeTypeAirspaceVertex() {
        }
        
        public virtual OFMX.codeTypeAirspaceVertexBase TypedValue {
            get {
                XElement x = this.Untyped;
                return ((OFMX.codeTypeAirspaceVertexBase)(Enum.Parse(typeof(OFMX.codeTypeAirspaceVertexBase), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetValueWithValidation(value.ToString(), "TypedValue", global::OFMX.codeTypeAirspaceVertexBaseValidator.TypeDefinition);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<codeTypeAirspaceVertex>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public enum codeTypeAlsFatoBase {
        
        A,
        
        B,
        
        C,
        
        D,
        
        E,
        
        F,
        
        G,
        
        H,
        
        ALSAF,
        
        MALS,
        
        MALSR,
        
        SALS,
        
        SSALS,
        
        SSALR,
        
        LDIN,
        
        ODALS,
        
        AFOVRN,
        
        MILOVRN,
        
        OTHER,
    }
    
    public sealed class codeTypeAlsFatoBaseValidator {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "A",
                        "B",
                        "C",
                        "D",
                        "E",
                        "F",
                        "G",
                        "H",
                        "ALSAF",
                        "MALS",
                        "MALSR",
                        "SALS",
                        "SSALS",
                        "SSALR",
                        "LDIN",
                        "ODALS",
                        "AFOVRN",
                        "MILOVRN",
                        "OTHER"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private codeTypeAlsFatoBaseValidator() {
        }
    }
    
    /// <summary>
    /// <para>
    /// A code indicating the type of approach lighting system of a FATO direction.  Eg: ICAO CAT I, ICAO CAT II, simple approach lighting system.
    /// </para>
    /// </summary>
    public partial class codeTypeAlsFato : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TypedValueXName = System.Xml.Linq.XName.Get("TypedValue", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("codeTypeAlsFato", "");
        
		public static explicit operator codeTypeAlsFato(XElement xe) { return XTypedServices.ToXTypedElement<codeTypeAlsFato>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// A code indicating the type of approach lighting system of a FATO direction.  Eg: ICAO CAT I, ICAO CAT II, simple approach lighting system.
        /// </para>
        /// </summary>
        public codeTypeAlsFato() {
        }
        
        public virtual OFMX.codeTypeAlsFatoBase TypedValue {
            get {
                XElement x = this.Untyped;
                return ((OFMX.codeTypeAlsFatoBase)(Enum.Parse(typeof(OFMX.codeTypeAlsFatoBase), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetValueWithValidation(value.ToString(), "TypedValue", global::OFMX.codeTypeAlsFatoBaseValidator.TypeDefinition);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<codeTypeAlsFato>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public enum codeTypeAlsRwyBase {
        
        A,
        
        B,
        
        C,
        
        D,
        
        E,
        
        F,
        
        G,
        
        ALSAF,
        
        MALS,
        
        MALSR,
        
        SALS,
        
        SSALS,
        
        SSALR,
        
        LDIN,
        
        ODALS,
        
        AFOVRN,
        
        MILOVRN,
        
        OTHER,
    }
    
    public sealed class codeTypeAlsRwyBaseValidator {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "A",
                        "B",
                        "C",
                        "D",
                        "E",
                        "F",
                        "G",
                        "ALSAF",
                        "MALS",
                        "MALSR",
                        "SALS",
                        "SSALS",
                        "SSALR",
                        "LDIN",
                        "ODALS",
                        "AFOVRN",
                        "MILOVRN",
                        "OTHER"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private codeTypeAlsRwyBaseValidator() {
        }
    }
    
    /// <summary>
    /// <para>
    /// A code indicating the type of approach lighting system of a runway direction.  Eg: ICAO CAT I, ICAO CAT II, simple approach lighting system.
    /// </para>
    /// </summary>
    public partial class codeTypeAlsRwy : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TypedValueXName = System.Xml.Linq.XName.Get("TypedValue", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("codeTypeAlsRwy", "");
        
		public static explicit operator codeTypeAlsRwy(XElement xe) { return XTypedServices.ToXTypedElement<codeTypeAlsRwy>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// A code indicating the type of approach lighting system of a runway direction.  Eg: ICAO CAT I, ICAO CAT II, simple approach lighting system.
        /// </para>
        /// </summary>
        public codeTypeAlsRwy() {
        }
        
        public virtual OFMX.codeTypeAlsRwyBase TypedValue {
            get {
                XElement x = this.Untyped;
                return ((OFMX.codeTypeAlsRwyBase)(Enum.Parse(typeof(OFMX.codeTypeAlsRwyBase), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetValueWithValidation(value.ToString(), "TypedValue", global::OFMX.codeTypeAlsRwyBaseValidator.TypeDefinition);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<codeTypeAlsRwy>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public enum codeTypeAngleBrgBase {
        
        TRUE,
        
        MAG,
        
        RAD,
        
        OTHER,
    }
    
    public sealed class codeTypeAngleBrgBaseValidator {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "TRUE",
                        "MAG",
                        "RAD",
                        "OTHER"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private codeTypeAngleBrgBaseValidator() {
        }
    }
    
    /// <summary>
    /// <para>
    /// A code indicating the type of angle: magnetic, bearing, VOR radial.
    /// </para>
    /// </summary>
    public partial class codeTypeAngleBrg : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TypedValueXName = System.Xml.Linq.XName.Get("TypedValue", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("codeTypeAngleBrg", "");
        
		public static explicit operator codeTypeAngleBrg(XElement xe) { return XTypedServices.ToXTypedElement<codeTypeAngleBrg>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// A code indicating the type of angle: magnetic, bearing, VOR radial.
        /// </para>
        /// </summary>
        public codeTypeAngleBrg() {
        }
        
        public virtual OFMX.codeTypeAngleBrgBase TypedValue {
            get {
                XElement x = this.Untyped;
                return ((OFMX.codeTypeAngleBrgBase)(Enum.Parse(typeof(OFMX.codeTypeAngleBrgBase), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetValueWithValidation(value.ToString(), "TypedValue", global::OFMX.codeTypeAngleBrgBaseValidator.TypeDefinition);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<codeTypeAngleBrg>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public enum codeTypeApchProcBase {
        
        STA,
        
        STA1,
        
        STA2,
        
        STA3A,
        
        STA3B,
        
        STA3C,
        
        CA,
        
        OTHER,
    }
    
    public sealed class codeTypeApchProcBaseValidator {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "STA",
                        "STA1",
                        "STA2",
                        "STA3A",
                        "STA3B",
                        "STA3C",
                        "CA",
                        "OTHER"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private codeTypeApchProcBaseValidator() {
        }
    }
    
    /// <summary>
    /// <para>
    /// A code indicating a type of approach procedure.  Eg: straight-in, circling, straight-in CAT I, etc..
    /// </para>
    /// </summary>
    public partial class codeTypeApchProc : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TypedValueXName = System.Xml.Linq.XName.Get("TypedValue", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("codeTypeApchProc", "");
        
		public static explicit operator codeTypeApchProc(XElement xe) { return XTypedServices.ToXTypedElement<codeTypeApchProc>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// A code indicating a type of approach procedure.  Eg: straight-in, circling, straight-in CAT I, etc..
        /// </para>
        /// </summary>
        public codeTypeApchProc() {
        }
        
        public virtual OFMX.codeTypeApchProcBase TypedValue {
            get {
                XElement x = this.Untyped;
                return ((OFMX.codeTypeApchProcBase)(Enum.Parse(typeof(OFMX.codeTypeApchProcBase), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetValueWithValidation(value.ToString(), "TypedValue", global::OFMX.codeTypeApchProcBaseValidator.TypeDefinition);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<codeTypeApchProc>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public sealed class codeTypeAsBase {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "ICAO",
                        "ECAC",
                        "CFMU",
                        "IFPS",
                        "TACT",
                        "NAS",
                        "NAS-P",
                        "FIR",
                        "FIR-P",
                        "UIR",
                        "UIR-P",
                        "CTA",
                        "CTA-P",
                        "OCA-P",
                        "OCA",
                        "UTA",
                        "UTA-P",
                        "TMA",
                        "TMA-P",
                        "CTR",
                        "CTR-P",
                        "ATZ",
                        "ATZ-P",
                        "MNPSA",
                        "MNPSA-P",
                        "OTA",
                        "SECTOR",
                        "SECTOR-C",
                        "TSA",
                        "CBA",
                        "RCA",
                        "RAS",
                        "CDA",
                        "AWY",
                        "RTECL",
                        "P",
                        "R",
                        "D",
                        "R-AMC",
                        "D-AMC",
                        "MIL",
                        "ADIZ",
                        "HTZ",
                        "OIL",
                        "BIRD",
                        "SPORT",
                        "LMA",
                        "NO-FIR",
                        "PART",
                        "CLASS",
                        "POLITICAL",
                        "D-OTHER",
                        "TRA",
                        "A",
                        "W",
                        "PROTECT",
                        "AMA",
                        "ASR"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private codeTypeAsBase() {
        }
    }
    
    /// <summary>
    /// <para>
    /// Allowed types of Airspace.
    /// </para>
    /// </summary>
    public partial class codeTypeAs : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TypedValueXName = System.Xml.Linq.XName.Get("TypedValue", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("codeTypeAs", "");
        
		public static explicit operator codeTypeAs(XElement xe) { return XTypedServices.ToXTypedElement<codeTypeAs>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// Allowed types of Airspace.
        /// </para>
        /// </summary>
        public codeTypeAs() {
        }
        
        public virtual string TypedValue {
            get {
                XElement x = this.Untyped;
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetValueWithValidation(value, "TypedValue", global::OFMX.codeTypeAsBase.TypeDefinition);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<codeTypeAs>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// DEPRECATED-4.0
    /// </para>
    /// </summary>
    public sealed class codeTypeAssocAsBase {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "BOM",
                        "ABOVE-BELOW",
                        "TIME-DIST"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private codeTypeAssocAsBase() {
        }
    }
    
    /// <summary>
    /// <para>
    /// DEPRECATED-4.0
    /// </para>
    /// <para>
    /// The values indicating the type of association between two airspaces.
    /// </para>
    /// </summary>
    public partial class codeTypeAssocAs : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TypedValueXName = System.Xml.Linq.XName.Get("TypedValue", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("codeTypeAssocAs", "");
        
		public static explicit operator codeTypeAssocAs(XElement xe) { return XTypedServices.ToXTypedElement<codeTypeAssocAs>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// DEPRECATED-4.0
        /// </para>
        /// <para>
        /// The values indicating the type of association between two airspaces.
        /// </para>
        /// </summary>
        public codeTypeAssocAs() {
        }
        
        public virtual string TypedValue {
            get {
                XElement x = this.Untyped;
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetValueWithValidation(value, "TypedValue", global::OFMX.codeTypeAssocAsBase.TypeDefinition);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<codeTypeAssocAs>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public enum codeTypeAssocOrgBase {
        
        OWN,
        
        MBR,
        
        OTHER,
    }
    
    public sealed class codeTypeAssocOrgBaseValidator {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "OWN",
                        "MBR",
                        "OTHER"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private codeTypeAssocOrgBaseValidator() {
        }
    }
    
    /// <summary>
    /// <para>
    /// The values indicating the type of association between two organisations/authorities.
    /// </para>
    /// </summary>
    public partial class codeTypeAssocOrg : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TypedValueXName = System.Xml.Linq.XName.Get("TypedValue", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("codeTypeAssocOrg", "");
        
		public static explicit operator codeTypeAssocOrg(XElement xe) { return XTypedServices.ToXTypedElement<codeTypeAssocOrg>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// The values indicating the type of association between two organisations/authorities.
        /// </para>
        /// </summary>
        public codeTypeAssocOrg() {
        }
        
        public virtual OFMX.codeTypeAssocOrgBase TypedValue {
            get {
                XElement x = this.Untyped;
                return ((OFMX.codeTypeAssocOrgBase)(Enum.Parse(typeof(OFMX.codeTypeAssocOrgBase), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetValueWithValidation(value.ToString(), "TypedValue", global::OFMX.codeTypeAssocOrgBaseValidator.TypeDefinition);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<codeTypeAssocOrg>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public enum codeTypeAssocUnitBase {
        
        CL,
        
        SER,
        
        SUB,
        
        OTHER,
    }
    
    public sealed class codeTypeAssocUnitBaseValidator {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "CL",
                        "SER",
                        "SUB",
                        "OTHER"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private codeTypeAssocUnitBaseValidator() {
        }
    }
    
    /// <summary>
    /// <para>
    /// The values indicating the type of association between two units.
    /// </para>
    /// </summary>
    public partial class codeTypeAssocUnit : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TypedValueXName = System.Xml.Linq.XName.Get("TypedValue", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("codeTypeAssocUnit", "");
        
		public static explicit operator codeTypeAssocUnit(XElement xe) { return XTypedServices.ToXTypedElement<codeTypeAssocUnit>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// The values indicating the type of association between two units.
        /// </para>
        /// </summary>
        public codeTypeAssocUnit() {
        }
        
        public virtual OFMX.codeTypeAssocUnitBase TypedValue {
            get {
                XElement x = this.Untyped;
                return ((OFMX.codeTypeAssocUnitBase)(Enum.Parse(typeof(OFMX.codeTypeAssocUnitBase), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetValueWithValidation(value.ToString(), "TypedValue", global::OFMX.codeTypeAssocUnitBaseValidator.TypeDefinition);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<codeTypeAssocUnit>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public enum codeTypeAsAuthBase {
        
        OWN,
        
        DLGT,
        
        AIS,
        
        OTHER,
    }
    
    public sealed class codeTypeAsAuthBaseValidator {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "OWN",
                        "DLGT",
                        "AIS",
                        "OTHER"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private codeTypeAsAuthBaseValidator() {
        }
    }
    
    /// <summary>
    /// <para>
    /// A code indicating the type of the responsability that one organisation/authority has for an airspace.  Ex: The airspace is under the jurisdiction of Organization/Authority or the airspace is delegated to the Organization/Authority for the provision of air traffic services.
    /// </para>
    /// </summary>
    public partial class codeTypeAsAuth : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TypedValueXName = System.Xml.Linq.XName.Get("TypedValue", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("codeTypeAsAuth", "");
        
		public static explicit operator codeTypeAsAuth(XElement xe) { return XTypedServices.ToXTypedElement<codeTypeAsAuth>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// A code indicating the type of the responsability that one organisation/authority has for an airspace.  Ex: The airspace is under the jurisdiction of Organization/Authority or the airspace is delegated to the Organization/Authority for the provision of air traffic services.
        /// </para>
        /// </summary>
        public codeTypeAsAuth() {
        }
        
        public virtual OFMX.codeTypeAsAuthBase TypedValue {
            get {
                XElement x = this.Untyped;
                return ((OFMX.codeTypeAsAuthBase)(Enum.Parse(typeof(OFMX.codeTypeAsAuthBase), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetValueWithValidation(value.ToString(), "TypedValue", global::OFMX.codeTypeAsAuthBaseValidator.TypeDefinition);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<codeTypeAsAuth>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public enum codeTypeAsSignpntBase {
        
        EN,
        
        EX,
        
        EE,
        
        IN,
        
        B,
        
        OTHER,
    }
    
    public sealed class codeTypeAsSignpntBaseValidator {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "EN",
                        "EX",
                        "EE",
                        "IN",
                        "B",
                        "OTHER"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private codeTypeAsSignpntBaseValidator() {
        }
    }
    
    /// <summary>
    /// <para>
    /// A code indicating the type of association between a significant point and an airspace.   E.g. entry point, exit point, etc..
    /// </para>
    /// </summary>
    public partial class codeTypeAsSignpnt : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TypedValueXName = System.Xml.Linq.XName.Get("TypedValue", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("codeTypeAsSignpnt", "");
        
		public static explicit operator codeTypeAsSignpnt(XElement xe) { return XTypedServices.ToXTypedElement<codeTypeAsSignpnt>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// A code indicating the type of association between a significant point and an airspace.   E.g. entry point, exit point, etc..
        /// </para>
        /// </summary>
        public codeTypeAsSignpnt() {
        }
        
        public virtual OFMX.codeTypeAsSignpntBase TypedValue {
            get {
                XElement x = this.Untyped;
                return ((OFMX.codeTypeAsSignpntBase)(Enum.Parse(typeof(OFMX.codeTypeAsSignpntBase), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetValueWithValidation(value.ToString(), "TypedValue", global::OFMX.codeTypeAsSignpntBaseValidator.TypeDefinition);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<codeTypeAsSignpnt>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public enum codeTypeAzmBase {
        
        F,
        
        B,
        
        OTHER,
    }
    
    public sealed class codeTypeAzmBaseValidator {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "F",
                        "B",
                        "OTHER"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private codeTypeAzmBaseValidator() {
        }
    }
    
    /// <summary>
    /// <para>
    /// A code indicating the type of azimuth equipment: normal or backward.
    /// </para>
    /// </summary>
    public partial class codeTypeAzm : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TypedValueXName = System.Xml.Linq.XName.Get("TypedValue", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("codeTypeAzm", "");
        
		public static explicit operator codeTypeAzm(XElement xe) { return XTypedServices.ToXTypedElement<codeTypeAzm>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// A code indicating the type of azimuth equipment: normal or backward.
        /// </para>
        /// </summary>
        public codeTypeAzm() {
        }
        
        public virtual OFMX.codeTypeAzmBase TypedValue {
            get {
                XElement x = this.Untyped;
                return ((OFMX.codeTypeAzmBase)(Enum.Parse(typeof(OFMX.codeTypeAzmBase), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetValueWithValidation(value.ToString(), "TypedValue", global::OFMX.codeTypeAzmBaseValidator.TypeDefinition);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<codeTypeAzm>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public enum codeTypeBorderVertexBase {
        
        GRC,
        
        END,
        
        OTHER,
    }
    
    public sealed class codeTypeBorderVertexBaseValidator {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "GRC",
                        "END",
                        "OTHER"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private codeTypeBorderVertexBaseValidator() {
        }
    }
    
    /// <summary>
    /// <para>
    /// A code indicating the type of path to the next point of a geographical border vertex (open polyline).
    /// </para>
    /// </summary>
    public partial class codeTypeBorderVertex : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TypedValueXName = System.Xml.Linq.XName.Get("TypedValue", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("codeTypeBorderVertex", "");
        
		public static explicit operator codeTypeBorderVertex(XElement xe) { return XTypedServices.ToXTypedElement<codeTypeBorderVertex>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// A code indicating the type of path to the next point of a geographical border vertex (open polyline).
        /// </para>
        /// </summary>
        public codeTypeBorderVertex() {
        }
        
        public virtual OFMX.codeTypeBorderVertexBase TypedValue {
            get {
                XElement x = this.Untyped;
                return ((OFMX.codeTypeBorderVertexBase)(Enum.Parse(typeof(OFMX.codeTypeBorderVertexBase), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetValueWithValidation(value.ToString(), "TypedValue", global::OFMX.codeTypeBorderVertexBaseValidator.TypeDefinition);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<codeTypeBorderVertex>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public enum codeTypeClineVertexBase {
        
        GRC,
        
        RHL,
        
        CWA,
        
        CCA,
        
        ABE,
        
        END,
        
        OTHER,
    }
    
    public sealed class codeTypeClineVertexBaseValidator {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "GRC",
                        "RHL",
                        "CWA",
                        "CCA",
                        "ABE",
                        "END",
                        "OTHER"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private codeTypeClineVertexBaseValidator() {
        }
    }
    
    /// <summary>
    /// <para>
    /// A code indicating the type of path to the next point of a centreline, such as great circle or rhumbline.
    /// </para>
    /// </summary>
    public partial class codeTypeClineVertex : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TypedValueXName = System.Xml.Linq.XName.Get("TypedValue", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("codeTypeClineVertex", "");
        
		public static explicit operator codeTypeClineVertex(XElement xe) { return XTypedServices.ToXTypedElement<codeTypeClineVertex>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// A code indicating the type of path to the next point of a centreline, such as great circle or rhumbline.
        /// </para>
        /// </summary>
        public codeTypeClineVertex() {
        }
        
        public virtual OFMX.codeTypeClineVertexBase TypedValue {
            get {
                XElement x = this.Untyped;
                return ((OFMX.codeTypeClineVertexBase)(Enum.Parse(typeof(OFMX.codeTypeClineVertexBase), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetValueWithValidation(value.ToString(), "TypedValue", global::OFMX.codeTypeClineVertexBaseValidator.TypeDefinition);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<codeTypeClineVertex>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public enum codeTypeCourseBase {
        
        TT,
        
        MT,
        
        TBRG,
        
        MBRG,
        
        HDG,
        
        RAD,
        
        OTHER,
    }
    
    public sealed class codeTypeCourseBaseValidator {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "TT",
                        "MT",
                        "TBRG",
                        "MBRG",
                        "HDG",
                        "RAD",
                        "OTHER"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private codeTypeCourseBaseValidator() {
        }
    }
    
    /// <summary>
    /// <para>
    /// A code indicating the type of course to be observed.  E.g. true track, magnetic track, heading, VOR radial, true bearing, magnetic bearing.
    /// </para>
    /// </summary>
    public partial class codeTypeCourse : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TypedValueXName = System.Xml.Linq.XName.Get("TypedValue", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("codeTypeCourse", "");
        
		public static explicit operator codeTypeCourse(XElement xe) { return XTypedServices.ToXTypedElement<codeTypeCourse>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// A code indicating the type of course to be observed.  E.g. true track, magnetic track, heading, VOR radial, true bearing, magnetic bearing.
        /// </para>
        /// </summary>
        public codeTypeCourse() {
        }
        
        public virtual OFMX.codeTypeCourseBase TypedValue {
            get {
                XElement x = this.Untyped;
                return ((OFMX.codeTypeCourseBase)(Enum.Parse(typeof(OFMX.codeTypeCourseBase), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetValueWithValidation(value.ToString(), "TypedValue", global::OFMX.codeTypeCourseBaseValidator.TypeDefinition);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<codeTypeCourse>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public enum codeTypeDeclDistFatoBase {
        
        TODAH,
        
        RTODAH,
        
        LDAH,
        
        OTHER,
    }
    
    public sealed class codeTypeDeclDistFatoBaseValidator {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "TODAH",
                        "RTODAH",
                        "LDAH",
                        "OTHER"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private codeTypeDeclDistFatoBaseValidator() {
        }
    }
    
    /// <summary>
    /// <para>
    /// A code indicating the type of conventional declared distance for a Final Approach and Take-Off Direction.  Eg:  LDAH, RTODAH, etc..
    /// </para>
    /// </summary>
    public partial class codeTypeDeclDistFato : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TypedValueXName = System.Xml.Linq.XName.Get("TypedValue", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("codeTypeDeclDistFato", "");
        
		public static explicit operator codeTypeDeclDistFato(XElement xe) { return XTypedServices.ToXTypedElement<codeTypeDeclDistFato>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// A code indicating the type of conventional declared distance for a Final Approach and Take-Off Direction.  Eg:  LDAH, RTODAH, etc..
        /// </para>
        /// </summary>
        public codeTypeDeclDistFato() {
        }
        
        public virtual OFMX.codeTypeDeclDistFatoBase TypedValue {
            get {
                XElement x = this.Untyped;
                return ((OFMX.codeTypeDeclDistFatoBase)(Enum.Parse(typeof(OFMX.codeTypeDeclDistFatoBase), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetValueWithValidation(value.ToString(), "TypedValue", global::OFMX.codeTypeDeclDistFatoBaseValidator.TypeDefinition);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<codeTypeDeclDistFato>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public enum codeTypeDeclDistRwyBase {
        
        LDA,
        
        TORA,
        
        TODA,
        
        ASDA,
        
        DPLM,
        
        OTHER,
    }
    
    public sealed class codeTypeDeclDistRwyBaseValidator {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "LDA",
                        "TORA",
                        "TODA",
                        "ASDA",
                        "DPLM",
                        "OTHER"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private codeTypeDeclDistRwyBaseValidator() {
        }
    }
    
    /// <summary>
    /// <para>
    /// A code indicating the type of conventional declared distance for a runway.    Eg: TORA, TODA, LDA, etc..
    /// </para>
    /// </summary>
    public partial class codeTypeDeclDistRwy : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TypedValueXName = System.Xml.Linq.XName.Get("TypedValue", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("codeTypeDeclDistRwy", "");
        
		public static explicit operator codeTypeDeclDistRwy(XElement xe) { return XTypedServices.ToXTypedElement<codeTypeDeclDistRwy>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// A code indicating the type of conventional declared distance for a runway.    Eg: TORA, TODA, LDA, etc..
        /// </para>
        /// </summary>
        public codeTypeDeclDistRwy() {
        }
        
        public virtual OFMX.codeTypeDeclDistRwyBase TypedValue {
            get {
                XElement x = this.Untyped;
                return ((OFMX.codeTypeDeclDistRwyBase)(Enum.Parse(typeof(OFMX.codeTypeDeclDistRwyBase), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetValueWithValidation(value.ToString(), "TypedValue", global::OFMX.codeTypeDeclDistRwyBaseValidator.TypeDefinition);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<codeTypeDeclDistRwy>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public sealed class codeTypeDesigPtBase {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "ICAO",
                        "ADHP",
                        "COORD",
                        "VFR-RP",
                        "VFR-MRP",
                        "VFR-ENR",
                        "VFR-GLDR",
                        "VFR-HELI",
                        "TOWN",
                        "MOUNTAIN-TOP",
                        "MOUNTAIN-PASS",
                        "OTHER"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private codeTypeDesigPtBase() {
        }
    }
    
    /// <summary>
    /// <para>
    /// A code indicating a specific type of designated point whether published by the State, published by ICAO or created by another agency for convenience of identification.
    /// </para>
    /// </summary>
    public partial class codeTypeDesigPt : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TypedValueXName = System.Xml.Linq.XName.Get("TypedValue", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("codeTypeDesigPt", "");
        
		public static explicit operator codeTypeDesigPt(XElement xe) { return XTypedServices.ToXTypedElement<codeTypeDesigPt>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// A code indicating a specific type of designated point whether published by the State, published by ICAO or created by another agency for convenience of identification.
        /// </para>
        /// </summary>
        public codeTypeDesigPt() {
        }
        
        public virtual string TypedValue {
            get {
                XElement x = this.Untyped;
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetValueWithValidation(value, "TypedValue", global::OFMX.codeTypeDesigPtBase.TypeDefinition);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<codeTypeDesigPt>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public enum codeTypeDmeBase {
        
        N,
        
        P,
        
        W,
        
        OTHER,
    }
    
    public sealed class codeTypeDmeBaseValidator {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "N",
                        "P",
                        "W",
                        "OTHER"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private codeTypeDmeBaseValidator() {
        }
    }
    
    /// <summary>
    /// <para>
    /// A code indicating the type of UHF distance measuring equipment.
    /// </para>
    /// </summary>
    public partial class codeTypeDme : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TypedValueXName = System.Xml.Linq.XName.Get("TypedValue", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("codeTypeDme", "");
        
		public static explicit operator codeTypeDme(XElement xe) { return XTypedServices.ToXTypedElement<codeTypeDme>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// A code indicating the type of UHF distance measuring equipment.
        /// </para>
        /// </summary>
        public codeTypeDme() {
        }
        
        public virtual OFMX.codeTypeDmeBase TypedValue {
            get {
                XElement x = this.Untyped;
                return ((OFMX.codeTypeDmeBase)(Enum.Parse(typeof(OFMX.codeTypeDmeBase), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetValueWithValidation(value.ToString(), "TypedValue", global::OFMX.codeTypeDmeBaseValidator.TypeDefinition);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<codeTypeDme>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public enum codeTypeFltRuleBase {
        
        I,
        
        V,
        
        IV,
    }
    
    public sealed class codeTypeFltRuleBaseValidator {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "I",
                        "V",
                        "IV"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private codeTypeFltRuleBaseValidator() {
        }
    }
    
    /// <summary>
    /// <para>
    /// Flight rules to be observed by aircraft.  E.g. VFR and/or IFR.
    /// </para>
    /// </summary>
    public partial class codeTypeFltRule : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TypedValueXName = System.Xml.Linq.XName.Get("TypedValue", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("codeTypeFltRule", "");
        
		public static explicit operator codeTypeFltRule(XElement xe) { return XTypedServices.ToXTypedElement<codeTypeFltRule>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// Flight rules to be observed by aircraft.  E.g. VFR and/or IFR.
        /// </para>
        /// </summary>
        public codeTypeFltRule() {
        }
        
        public virtual OFMX.codeTypeFltRuleBase TypedValue {
            get {
                XElement x = this.Untyped;
                return ((OFMX.codeTypeFltRuleBase)(Enum.Parse(typeof(OFMX.codeTypeFltRuleBase), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetValueWithValidation(value.ToString(), "TypedValue", global::OFMX.codeTypeFltRuleBaseValidator.TypeDefinition);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<codeTypeFltRule>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public enum codeTypeFreqBase {
        
        STD,
        
        ALT,
        
        EMRG,
        
        GUARD,
        
        MIL,
        
        CIV,
        
        OTHER,
    }
    
    public sealed class codeTypeFreqBaseValidator {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "STD",
                        "ALT",
                        "EMRG",
                        "GUARD",
                        "MIL",
                        "CIV",
                        "OTHER"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private codeTypeFreqBaseValidator() {
        }
    }
    
    /// <summary>
    /// <para>
    /// Type of special frequency used by a service.
    /// </para>
    /// </summary>
    public partial class codeTypeFreq : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TypedValueXName = System.Xml.Linq.XName.Get("TypedValue", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("codeTypeFreq", "");
        
		public static explicit operator codeTypeFreq(XElement xe) { return XTypedServices.ToXTypedElement<codeTypeFreq>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// Type of special frequency used by a service.
        /// </para>
        /// </summary>
        public codeTypeFreq() {
        }
        
        public virtual OFMX.codeTypeFreqBase TypedValue {
            get {
                XElement x = this.Untyped;
                return ((OFMX.codeTypeFreqBase)(Enum.Parse(typeof(OFMX.codeTypeFreqBase), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetValueWithValidation(value.ToString(), "TypedValue", global::OFMX.codeTypeFreqBaseValidator.TypeDefinition);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<codeTypeFreq>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public enum codeTypeGeoBdrBase {
        
        ST,
        
        TW,
        
        CS,
        
        RW,
        
        RB,
        
        OTHER,
    }
    
    public sealed class codeTypeGeoBdrBaseValidator {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "ST",
                        "TW",
                        "CS",
                        "RW",
                        "RB",
                        "OTHER"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private codeTypeGeoBdrBaseValidator() {
        }
    }
    
    /// <summary>
    /// <para>
    /// The type of geograpfical border. The most common situation is the border between two countries.
    /// </para>
    /// </summary>
    public partial class codeTypeGeoBdr : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TypedValueXName = System.Xml.Linq.XName.Get("TypedValue", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("codeTypeGeoBdr", "");
        
		public static explicit operator codeTypeGeoBdr(XElement xe) { return XTypedServices.ToXTypedElement<codeTypeGeoBdr>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// The type of geograpfical border. The most common situation is the border between two countries.
        /// </para>
        /// </summary>
        public codeTypeGeoBdr() {
        }
        
        public virtual OFMX.codeTypeGeoBdrBase TypedValue {
            get {
                XElement x = this.Untyped;
                return ((OFMX.codeTypeGeoBdrBase)(Enum.Parse(typeof(OFMX.codeTypeGeoBdrBase), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetValueWithValidation(value.ToString(), "TypedValue", global::OFMX.codeTypeGeoBdrBaseValidator.TypeDefinition);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<codeTypeGeoBdr>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public enum codeTypeHoldProcBase {
        
        ENR,
        
        TER,
        
        OTHER,
    }
    
    public sealed class codeTypeHoldProcBaseValidator {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "ENR",
                        "TER",
                        "OTHER"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private codeTypeHoldProcBaseValidator() {
        }
    }
    
    /// <summary>
    /// <para>
    /// A code indicating the type of holding procedure.  E.g. en-route holding, terminal area holding.
    /// </para>
    /// </summary>
    public partial class codeTypeHoldProc : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TypedValueXName = System.Xml.Linq.XName.Get("TypedValue", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("codeTypeHoldProc", "");
        
		public static explicit operator codeTypeHoldProc(XElement xe) { return XTypedServices.ToXTypedElement<codeTypeHoldProc>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// A code indicating the type of holding procedure.  E.g. en-route holding, terminal area holding.
        /// </para>
        /// </summary>
        public codeTypeHoldProc() {
        }
        
        public virtual OFMX.codeTypeHoldProcBase TypedValue {
            get {
                XElement x = this.Untyped;
                return ((OFMX.codeTypeHoldProcBase)(Enum.Parse(typeof(OFMX.codeTypeHoldProcBase), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetValueWithValidation(value.ToString(), "TypedValue", global::OFMX.codeTypeHoldProcBaseValidator.TypeDefinition);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<codeTypeHoldProc>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public enum codeTypeHrNavAidBase {
        
        WORK,
        
        UNMO,
    }
    
    public sealed class codeTypeHrNavAidBaseValidator {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "WORK",
                        "UNMO"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private codeTypeHrNavAidBaseValidator() {
        }
    }
    
    /// <summary>
    /// <para>
    /// A code indicating the type of schedule a timesheet is describing.  E.g. working hours, un-monitored hours.
    /// </para>
    /// </summary>
    public partial class codeTypeHrNavAid : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TypedValueXName = System.Xml.Linq.XName.Get("TypedValue", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("codeTypeHrNavAid", "");
        
		public static explicit operator codeTypeHrNavAid(XElement xe) { return XTypedServices.ToXTypedElement<codeTypeHrNavAid>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// A code indicating the type of schedule a timesheet is describing.  E.g. working hours, un-monitored hours.
        /// </para>
        /// </summary>
        public codeTypeHrNavAid() {
        }
        
        public virtual OFMX.codeTypeHrNavAidBase TypedValue {
            get {
                XElement x = this.Untyped;
                return ((OFMX.codeTypeHrNavAidBase)(Enum.Parse(typeof(OFMX.codeTypeHrNavAidBase), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetValueWithValidation(value.ToString(), "TypedValue", global::OFMX.codeTypeHrNavAidBaseValidator.TypeDefinition);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<codeTypeHrNavAid>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public enum codeTypeIapBase {
        
        B,
        
        E,
        
        F,
        
        G,
        
        H,
        
        I,
        
        J,
        
        K,
        
        L,
        
        M,
        
        N,
        
        P,
        
        R,
        
        T,
        
        U,
        
        V,
        
        W,
        
        Y,
        
        OTHER,
    }
    
    public sealed class codeTypeIapBaseValidator {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "B",
                        "E",
                        "F",
                        "G",
                        "H",
                        "I",
                        "J",
                        "K",
                        "L",
                        "M",
                        "N",
                        "P",
                        "R",
                        "T",
                        "U",
                        "V",
                        "W",
                        "Y",
                        "OTHER"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private codeTypeIapBaseValidator() {
        }
    }
    
    /// <summary>
    /// <para>
    /// A code indicating the type of the Instrument Approach Procedure.  E.g. Approach Transition, VOR/DME Approach, Instrument Landing System (ILS), NDB Approach, GPS Approach.
    /// </para>
    /// </summary>
    public partial class codeTypeIap : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TypedValueXName = System.Xml.Linq.XName.Get("TypedValue", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("codeTypeIap", "");
        
		public static explicit operator codeTypeIap(XElement xe) { return XTypedServices.ToXTypedElement<codeTypeIap>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// A code indicating the type of the Instrument Approach Procedure.  E.g. Approach Transition, VOR/DME Approach, Instrument Landing System (ILS), NDB Approach, GPS Approach.
        /// </para>
        /// </summary>
        public codeTypeIap() {
        }
        
        public virtual OFMX.codeTypeIapBase TypedValue {
            get {
                XElement x = this.Untyped;
                return ((OFMX.codeTypeIapBase)(Enum.Parse(typeof(OFMX.codeTypeIapBase), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetValueWithValidation(value.ToString(), "TypedValue", global::OFMX.codeTypeIapBaseValidator.TypeDefinition);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<codeTypeIap>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public enum codeTypeLightBase {
        
        FLOOD,
        
        STROBE,
        
        OTHER,
    }
    
    public sealed class codeTypeLightBaseValidator {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "FLOOD",
                        "STROBE",
                        "OTHER"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private codeTypeLightBaseValidator() {
        }
    }
    
    /// <summary>
    /// <para>
    /// A code indicating a type of light source, such as strobe or flood.
    /// </para>
    /// </summary>
    public partial class codeTypeLight : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TypedValueXName = System.Xml.Linq.XName.Get("TypedValue", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("codeTypeLight", "");
        
		public static explicit operator codeTypeLight(XElement xe) { return XTypedServices.ToXTypedElement<codeTypeLight>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// A code indicating a type of light source, such as strobe or flood.
        /// </para>
        /// </summary>
        public codeTypeLight() {
        }
        
        public virtual OFMX.codeTypeLightBase TypedValue {
            get {
                XElement x = this.Untyped;
                return ((OFMX.codeTypeLightBase)(Enum.Parse(typeof(OFMX.codeTypeLightBase), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetValueWithValidation(value.ToString(), "TypedValue", global::OFMX.codeTypeLightBaseValidator.TypeDefinition);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<codeTypeLight>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// DEPRECATED-4.0
    /// </para>
    /// </summary>
    public enum codeTypeMilOpsBase {
        
        CIV,
        
        JOINT,
        
        MILEXT,
        
        MIL,
    }
    
    /// <summary>
    /// <para>
    /// DEPRECATED-4.0
    /// </para>
    /// </summary>
    public sealed class codeTypeMilOpsBaseValidator {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "CIV",
                        "JOINT",
                        "MILEXT",
                        "MIL"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private codeTypeMilOpsBaseValidator() {
        }
    }
    
    /// <summary>
    /// <para>
    /// A code indicating if a facility is to be used for military, civil or both types of operations.
    /// </para>
    /// <para>
    /// DEPRECATED-4.0
    /// </para>
    /// </summary>
    public partial class codeTypeMilOps : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TypedValueXName = System.Xml.Linq.XName.Get("TypedValue", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("codeTypeMilOps", "");
        
		public static explicit operator codeTypeMilOps(XElement xe) { return XTypedServices.ToXTypedElement<codeTypeMilOps>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// A code indicating if a facility is to be used for military, civil or both types of operations.
        /// </para>
        /// <para>
        /// DEPRECATED-4.0
        /// </para>
        /// </summary>
        public codeTypeMilOps() {
        }
        
        public virtual OFMX.codeTypeMilOpsBase TypedValue {
            get {
                XElement x = this.Untyped;
                return ((OFMX.codeTypeMilOpsBase)(Enum.Parse(typeof(OFMX.codeTypeMilOpsBase), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetValueWithValidation(value.ToString(), "TypedValue", global::OFMX.codeTypeMilOpsBaseValidator.TypeDefinition);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<codeTypeMilOps>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public enum codeTypeNavAidLimitBase {
        
        CVR,
        
        TCVR,
        
        SCL,
        
        RHG,
        
        UNL,
        
        RES,
        
        UUS,
        
        OUT,
        
        OTHER,
    }
    
    public sealed class codeTypeNavAidLimitBaseValidator {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "CVR",
                        "TCVR",
                        "SCL",
                        "RHG",
                        "UNL",
                        "RES",
                        "UUS",
                        "OUT",
                        "OTHER"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private codeTypeNavAidLimitBaseValidator() {
        }
    }
    
    /// <summary>
    /// <para>
    /// A code indicating the type of radio navigation aid limitation.
    /// </para>
    /// </summary>
    public partial class codeTypeNavAidLimit : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TypedValueXName = System.Xml.Linq.XName.Get("TypedValue", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("codeTypeNavAidLimit", "");
        
		public static explicit operator codeTypeNavAidLimit(XElement xe) { return XTypedServices.ToXTypedElement<codeTypeNavAidLimit>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// A code indicating the type of radio navigation aid limitation.
        /// </para>
        /// </summary>
        public codeTypeNavAidLimit() {
        }
        
        public virtual OFMX.codeTypeNavAidLimitBase TypedValue {
            get {
                XElement x = this.Untyped;
                return ((OFMX.codeTypeNavAidLimitBase)(Enum.Parse(typeof(OFMX.codeTypeNavAidLimitBase), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetValueWithValidation(value.ToString(), "TypedValue", global::OFMX.codeTypeNavAidLimitBaseValidator.TypeDefinition);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<codeTypeNavAidLimit>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public enum codeTypeNavCkPtBase {
        
        INS,
        
        GNSS,
        
        VOR,
        
        DME,
        
        TACAN,
        
        NDB,
        
        OTHER,
    }
    
    public sealed class codeTypeNavCkPtBaseValidator {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "INS",
                        "GNSS",
                        "VOR",
                        "DME",
                        "TACAN",
                        "NDB",
                        "OTHER"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private codeTypeNavCkPtBaseValidator() {
        }
    }
    
    /// <summary>
    /// <para>
    /// A code indicating the type of navigation system for which the checkpoint has been established.  E.g. INS, VOR, GNSS, etc..
    /// </para>
    /// </summary>
    public partial class codeTypeNavCkPt : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TypedValueXName = System.Xml.Linq.XName.Get("TypedValue", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("codeTypeNavCkPt", "");
        
		public static explicit operator codeTypeNavCkPt(XElement xe) { return XTypedServices.ToXTypedElement<codeTypeNavCkPt>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// A code indicating the type of navigation system for which the checkpoint has been established.  E.g. INS, VOR, GNSS, etc..
        /// </para>
        /// </summary>
        public codeTypeNavCkPt() {
        }
        
        public virtual OFMX.codeTypeNavCkPtBase TypedValue {
            get {
                XElement x = this.Untyped;
                return ((OFMX.codeTypeNavCkPtBase)(Enum.Parse(typeof(OFMX.codeTypeNavCkPtBase), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetValueWithValidation(value.ToString(), "TypedValue", global::OFMX.codeTypeNavCkPtBaseValidator.TypeDefinition);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<codeTypeNavCkPt>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public enum codeTypeNitrogenBase {
        
        LPNG,
        
        HPNG,
        
        LHNG,
        
        LNG,
        
        NGRB,
        
        HNGRB,
        
        LNGRB,
        
        NG,
        
        OTHER,
    }
    
    public sealed class codeTypeNitrogenBaseValidator {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "LPNG",
                        "HPNG",
                        "LHNG",
                        "LNG",
                        "NGRB",
                        "HNGRB",
                        "LNGRB",
                        "NG",
                        "OTHER"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private codeTypeNitrogenBaseValidator() {
        }
    }
    
    /// <summary>
    /// <para>
    /// A code describing the type of nitrogen supplies for aviation usage.
    /// </para>
    /// </summary>
    public partial class codeTypeNitrogen : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TypedValueXName = System.Xml.Linq.XName.Get("TypedValue", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("codeTypeNitrogen", "");
        
		public static explicit operator codeTypeNitrogen(XElement xe) { return XTypedServices.ToXTypedElement<codeTypeNitrogen>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// A code describing the type of nitrogen supplies for aviation usage.
        /// </para>
        /// </summary>
        public codeTypeNitrogen() {
        }
        
        public virtual OFMX.codeTypeNitrogenBase TypedValue {
            get {
                XElement x = this.Untyped;
                return ((OFMX.codeTypeNitrogenBase)(Enum.Parse(typeof(OFMX.codeTypeNitrogenBase), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetValueWithValidation(value.ToString(), "TypedValue", global::OFMX.codeTypeNitrogenBaseValidator.TypeDefinition);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<codeTypeNitrogen>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public enum codeTypeNorthBase {
        
        TRUE,
        
        MAG,
        
        GRID,
        
        OTHER,
    }
    
    public sealed class codeTypeNorthBaseValidator {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "TRUE",
                        "MAG",
                        "GRID",
                        "OTHER"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private codeTypeNorthBaseValidator() {
        }
    }
    
    /// <summary>
    /// <para>
    /// A code indicating the type of the North reference used.
    /// </para>
    /// </summary>
    public partial class codeTypeNorth : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TypedValueXName = System.Xml.Linq.XName.Get("TypedValue", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("codeTypeNorth", "");
        
		public static explicit operator codeTypeNorth(XElement xe) { return XTypedServices.ToXTypedElement<codeTypeNorth>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// A code indicating the type of the North reference used.
        /// </para>
        /// </summary>
        public codeTypeNorth() {
        }
        
        public virtual OFMX.codeTypeNorthBase TypedValue {
            get {
                XElement x = this.Untyped;
                return ((OFMX.codeTypeNorthBase)(Enum.Parse(typeof(OFMX.codeTypeNorthBase), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetValueWithValidation(value.ToString(), "TypedValue", global::OFMX.codeTypeNorthBaseValidator.TypeDefinition);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<codeTypeNorth>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public enum codeTypeObstacleBase {
        
        ANTENNA,
        
        BUILDING,
        
        CHIMNEY,
        
        CRANE,
        
        MAST,
        
        TOWER,
        
        TREE,
        
        WINDTURBINE,
        
        OTHER,
    }
    
    public sealed class codeTypeObstacleBaseValidator {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "ANTENNA",
                        "BUILDING",
                        "CHIMNEY",
                        "CRANE",
                        "MAST",
                        "TOWER",
                        "TREE",
                        "WINDTURBINE",
                        "OTHER"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private codeTypeObstacleBaseValidator() {
        }
    }
    
    /// <summary>
    /// <para>
    /// A code indicating the type of the obstacle.
    /// </para>
    /// </summary>
    public partial class codeTypeObstacle : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TypedValueXName = System.Xml.Linq.XName.Get("TypedValue", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("codeTypeObstacle", "");
        
		public static explicit operator codeTypeObstacle(XElement xe) { return XTypedServices.ToXTypedElement<codeTypeObstacle>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// A code indicating the type of the obstacle.
        /// </para>
        /// </summary>
        public codeTypeObstacle() {
        }
        
        public virtual OFMX.codeTypeObstacleBase TypedValue {
            get {
                XElement x = this.Untyped;
                return ((OFMX.codeTypeObstacleBase)(Enum.Parse(typeof(OFMX.codeTypeObstacleBase), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetValueWithValidation(value.ToString(), "TypedValue", global::OFMX.codeTypeObstacleBaseValidator.TypeDefinition);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<codeTypeObstacle>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public enum codeTypeObstacleLinkBase {
        
        CABLE,
        
        SOLID,
        
        OTHER,
    }
    
    public sealed class codeTypeObstacleLinkBaseValidator {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "CABLE",
                        "SOLID",
                        "OTHER"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private codeTypeObstacleLinkBaseValidator() {
        }
    }
    
    /// <summary>
    /// <para>
    /// A code indicating the type of link between two obstacles.
    /// </para>
    /// </summary>
    public partial class codeTypeObstacleLink : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TypedValueXName = System.Xml.Linq.XName.Get("TypedValue", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("codeTypeObstacleLink", "");
        
		public static explicit operator codeTypeObstacleLink(XElement xe) { return XTypedServices.ToXTypedElement<codeTypeObstacleLink>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// A code indicating the type of link between two obstacles.
        /// </para>
        /// </summary>
        public codeTypeObstacleLink() {
        }
        
        public virtual OFMX.codeTypeObstacleLinkBase TypedValue {
            get {
                XElement x = this.Untyped;
                return ((OFMX.codeTypeObstacleLinkBase)(Enum.Parse(typeof(OFMX.codeTypeObstacleLinkBase), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetValueWithValidation(value.ToString(), "TypedValue", global::OFMX.codeTypeObstacleLinkBaseValidator.TypeDefinition);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<codeTypeObstacleLink>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public enum codeTypeOpsRwyBase {
        
        APCH,
        
        TKOF,
        
        OTHER,
    }
    
    public sealed class codeTypeOpsRwyBaseValidator {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "APCH",
                        "TKOF",
                        "OTHER"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private codeTypeOpsRwyBaseValidator() {
        }
    }
    
    /// <summary>
    /// <para>
    /// A code indicating the type of operation performed using a runway direction.   E.g. approach or take-off.
    /// </para>
    /// </summary>
    public partial class codeTypeOpsRwy : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TypedValueXName = System.Xml.Linq.XName.Get("TypedValue", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("codeTypeOpsRwy", "");
        
		public static explicit operator codeTypeOpsRwy(XElement xe) { return XTypedServices.ToXTypedElement<codeTypeOpsRwy>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// A code indicating the type of operation performed using a runway direction.   E.g. approach or take-off.
        /// </para>
        /// </summary>
        public codeTypeOpsRwy() {
        }
        
        public virtual OFMX.codeTypeOpsRwyBase TypedValue {
            get {
                XElement x = this.Untyped;
                return ((OFMX.codeTypeOpsRwyBase)(Enum.Parse(typeof(OFMX.codeTypeOpsRwyBase), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetValueWithValidation(value.ToString(), "TypedValue", global::OFMX.codeTypeOpsRwyBaseValidator.TypeDefinition);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<codeTypeOpsRwy>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public enum codeTypeOrgBase {
        
        S,
        
        GS,
        
        O,
        
        IO,
        
        AOA,
        
        HA,
        
        A,
        
        ATS,
        
        OTHER,
    }
    
    public sealed class codeTypeOrgBaseValidator {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "S",
                        "GS",
                        "O",
                        "IO",
                        "AOA",
                        "HA",
                        "A",
                        "ATS",
                        "OTHER"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private codeTypeOrgBaseValidator() {
        }
    }
    
    /// <summary>
    /// <para>
    /// A code indicating the type of an Organisation/Authority.  Ex: State, Association of States, International Organisation, etc..
    /// </para>
    /// </summary>
    public partial class codeTypeOrg : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TypedValueXName = System.Xml.Linq.XName.Get("TypedValue", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("codeTypeOrg", "");
        
		public static explicit operator codeTypeOrg(XElement xe) { return XTypedServices.ToXTypedElement<codeTypeOrg>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// A code indicating the type of an Organisation/Authority.  Ex: State, Association of States, International Organisation, etc..
        /// </para>
        /// </summary>
        public codeTypeOrg() {
        }
        
        public virtual OFMX.codeTypeOrgBase TypedValue {
            get {
                XElement x = this.Untyped;
                return ((OFMX.codeTypeOrgBase)(Enum.Parse(typeof(OFMX.codeTypeOrgBase), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetValueWithValidation(value.ToString(), "TypedValue", global::OFMX.codeTypeOrgBaseValidator.TypeDefinition);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<codeTypeOrg>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public enum codeTypeOxygenBase {
        
        LPOX,
        
        HPOX,
        
        LHOX,
        
        LOX,
        
        OXRB,
        
        HOXRB,
        
        LOXRB,
        
        OX,
        
        OTHER,
    }
    
    public sealed class codeTypeOxygenBaseValidator {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "LPOX",
                        "HPOX",
                        "LHOX",
                        "LOX",
                        "OXRB",
                        "HOXRB",
                        "LOXRB",
                        "OX",
                        "OTHER"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private codeTypeOxygenBaseValidator() {
        }
    }
    
    /// <summary>
    /// <para>
    /// A code describing the type of oxygen supplies for aviation usage.
    /// </para>
    /// </summary>
    public partial class codeTypeOxygen : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TypedValueXName = System.Xml.Linq.XName.Get("TypedValue", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("codeTypeOxygen", "");
        
		public static explicit operator codeTypeOxygen(XElement xe) { return XTypedServices.ToXTypedElement<codeTypeOxygen>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// A code describing the type of oxygen supplies for aviation usage.
        /// </para>
        /// </summary>
        public codeTypeOxygen() {
        }
        
        public virtual OFMX.codeTypeOxygenBase TypedValue {
            get {
                XElement x = this.Untyped;
                return ((OFMX.codeTypeOxygenBase)(Enum.Parse(typeof(OFMX.codeTypeOxygenBase), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetValueWithValidation(value.ToString(), "TypedValue", global::OFMX.codeTypeOxygenBaseValidator.TypeDefinition);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<codeTypeOxygen>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public enum codeTypePaxFacBase {
        
        HOTEL,
        
        TRANS,
        
        REST,
        
        INFO,
        
        BANK,
        
        POST,
        
        MEDIC,
        
        OTHER,
    }
    
    public sealed class codeTypePaxFacBaseValidator {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "HOTEL",
                        "TRANS",
                        "REST",
                        "INFO",
                        "BANK",
                        "POST",
                        "MEDIC",
                        "OTHER"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private codeTypePaxFacBaseValidator() {
        }
    }
    
    /// <summary>
    /// <para>
    /// A code indicating a type of passenger facility available.  E.g. hotels, restaurants, transportation, medical service, etc.
    /// </para>
    /// </summary>
    public partial class codeTypePaxFac : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TypedValueXName = System.Xml.Linq.XName.Get("TypedValue", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("codeTypePaxFac", "");
        
		public static explicit operator codeTypePaxFac(XElement xe) { return XTypedServices.ToXTypedElement<codeTypePaxFac>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// A code indicating a type of passenger facility available.  E.g. hotels, restaurants, transportation, medical service, etc.
        /// </para>
        /// </summary>
        public codeTypePaxFac() {
        }
        
        public virtual OFMX.codeTypePaxFacBase TypedValue {
            get {
                XElement x = this.Untyped;
                return ((OFMX.codeTypePaxFacBase)(Enum.Parse(typeof(OFMX.codeTypePaxFacBase), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetValueWithValidation(value.ToString(), "TypedValue", global::OFMX.codeTypePaxFacBaseValidator.TypeDefinition);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<codeTypePaxFac>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public enum codeTypeProcPathBase {
        
        AF,
        
        HF,
        
        HA,
        
        HM,
        
        IF,
        
        PI,
        
        PT,
        
        TF,
        
        CA,
        
        CD,
        
        CI,
        
        CR,
        
        CF,
        
        DF,
        
        FA,
        
        FC,
        
        FT,
        
        FM,
        
        VM,
        
        FD,
        
        VR,
        
        VD,
        
        VI,
        
        VA,
        
        RF,
        
        OTHER,
    }
    
    public sealed class codeTypeProcPathBaseValidator {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "AF",
                        "HF",
                        "HA",
                        "HM",
                        "IF",
                        "PI",
                        "PT",
                        "TF",
                        "CA",
                        "CD",
                        "CI",
                        "CR",
                        "CF",
                        "DF",
                        "FA",
                        "FC",
                        "FT",
                        "FM",
                        "VM",
                        "FD",
                        "VR",
                        "VD",
                        "VI",
                        "VA",
                        "RF",
                        "OTHER"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private codeTypeProcPathBaseValidator() {
        }
    }
    
    /// <summary>
    /// <para>
    /// A code that defines a specific type of flight path and a specific type of termination of that flight path.  Although we agree with the ARINC idea that procedures should be designed with the aim to permit FMS equipped aircraft to fly tracks instead of procedural headings, for the time being we must allow all representation of these procedures (especially reversal procedures) as they are published by the States. This is the explanation of the differences between the allowable values for attributes in this domain and the ARINC leg types.
    /// </para>
    /// </summary>
    public partial class codeTypeProcPath : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TypedValueXName = System.Xml.Linq.XName.Get("TypedValue", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("codeTypeProcPath", "");
        
		public static explicit operator codeTypeProcPath(XElement xe) { return XTypedServices.ToXTypedElement<codeTypeProcPath>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// A code that defines a specific type of flight path and a specific type of termination of that flight path.  Although we agree with the ARINC idea that procedures should be designed with the aim to permit FMS equipped aircraft to fly tracks instead of procedural headings, for the time being we must allow all representation of these procedures (especially reversal procedures) as they are published by the States. This is the explanation of the differences between the allowable values for attributes in this domain and the ARINC leg types.
        /// </para>
        /// </summary>
        public codeTypeProcPath() {
        }
        
        public virtual OFMX.codeTypeProcPathBase TypedValue {
            get {
                XElement x = this.Untyped;
                return ((OFMX.codeTypeProcPathBase)(Enum.Parse(typeof(OFMX.codeTypeProcPathBase), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetValueWithValidation(value.ToString(), "TypedValue", global::OFMX.codeTypeProcPathBaseValidator.TypeDefinition);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<codeTypeProcPath>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public enum codeTypeProtectAreaFatoBase {
        
        CWY,
        
        SAFE,
        
        ILS,
        
        OTHER,
    }
    
    public sealed class codeTypeProtectAreaFatoBaseValidator {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "CWY",
                        "SAFE",
                        "ILS",
                        "OTHER"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private codeTypeProtectAreaFatoBaseValidator() {
        }
    }
    
    /// <summary>
    /// <para>
    /// A code indicating the type of protection area for a FATO.  E.g. clearway, ILS protection area, safety area, etc..
    /// </para>
    /// </summary>
    public partial class codeTypeProtectAreaFato : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TypedValueXName = System.Xml.Linq.XName.Get("TypedValue", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("codeTypeProtectAreaFato", "");
        
		public static explicit operator codeTypeProtectAreaFato(XElement xe) { return XTypedServices.ToXTypedElement<codeTypeProtectAreaFato>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// A code indicating the type of protection area for a FATO.  E.g. clearway, ILS protection area, safety area, etc..
        /// </para>
        /// </summary>
        public codeTypeProtectAreaFato() {
        }
        
        public virtual OFMX.codeTypeProtectAreaFatoBase TypedValue {
            get {
                XElement x = this.Untyped;
                return ((OFMX.codeTypeProtectAreaFatoBase)(Enum.Parse(typeof(OFMX.codeTypeProtectAreaFatoBase), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetValueWithValidation(value.ToString(), "TypedValue", global::OFMX.codeTypeProtectAreaFatoBaseValidator.TypeDefinition);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<codeTypeProtectAreaFato>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public enum codeTypeProtectAreaRwyBase {
        
        CWY,
        
        SAFE,
        
        OFZ,
        
        OFS,
        
        ILS,
        
        OTHER,
    }
    
    public sealed class codeTypeProtectAreaRwyBaseValidator {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "CWY",
                        "SAFE",
                        "OFZ",
                        "OFS",
                        "ILS",
                        "OTHER"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private codeTypeProtectAreaRwyBaseValidator() {
        }
    }
    
    /// <summary>
    /// <para>
    /// A code indicating the type of protection area for a runway  E.g. clearway, obstacle free zone, ILS protection area, etc..
    /// </para>
    /// </summary>
    public partial class codeTypeProtectAreaRwy : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TypedValueXName = System.Xml.Linq.XName.Get("TypedValue", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("codeTypeProtectAreaRwy", "");
        
		public static explicit operator codeTypeProtectAreaRwy(XElement xe) { return XTypedServices.ToXTypedElement<codeTypeProtectAreaRwy>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// A code indicating the type of protection area for a runway  E.g. clearway, obstacle free zone, ILS protection area, etc..
        /// </para>
        /// </summary>
        public codeTypeProtectAreaRwy() {
        }
        
        public virtual OFMX.codeTypeProtectAreaRwyBase TypedValue {
            get {
                XElement x = this.Untyped;
                return ((OFMX.codeTypeProtectAreaRwyBase)(Enum.Parse(typeof(OFMX.codeTypeProtectAreaRwyBase), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetValueWithValidation(value.ToString(), "TypedValue", global::OFMX.codeTypeProtectAreaRwyBaseValidator.TypeDefinition);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<codeTypeProtectAreaRwy>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public sealed class codeTypeRelAsBase {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "TIME-DIST",
                        "OTHER"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private codeTypeRelAsBase() {
        }
    }
    
    /// <summary>
    /// <para>
    /// A code indicating how the two airspace are associated together.
    /// </para>
    /// </summary>
    public partial class codeTypeRelAs : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TypedValueXName = System.Xml.Linq.XName.Get("TypedValue", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("codeTypeRelAs", "");
        
		public static explicit operator codeTypeRelAs(XElement xe) { return XTypedServices.ToXTypedElement<codeTypeRelAs>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// A code indicating how the two airspace are associated together.
        /// </para>
        /// </summary>
        public codeTypeRelAs() {
        }
        
        public virtual string TypedValue {
            get {
                XElement x = this.Untyped;
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetValueWithValidation(value, "TypedValue", global::OFMX.codeTypeRelAsBase.TypeDefinition);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<codeTypeRelAs>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public enum codeTypeRestrBase {
        
        F,
        
        M,
        
        C,
    }
    
    public sealed class codeTypeRestrBaseValidator {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "F",
                        "M",
                        "C"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private codeTypeRestrBaseValidator() {
        }
    }
    
    /// <summary>
    /// <para>
    /// A code indicating if the restriction is an interdiction or a mandatory routing.
    /// </para>
    /// </summary>
    public partial class codeTypeRestr : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TypedValueXName = System.Xml.Linq.XName.Get("TypedValue", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("codeTypeRestr", "");
        
		public static explicit operator codeTypeRestr(XElement xe) { return XTypedServices.ToXTypedElement<codeTypeRestr>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// A code indicating if the restriction is an interdiction or a mandatory routing.
        /// </para>
        /// </summary>
        public codeTypeRestr() {
        }
        
        public virtual OFMX.codeTypeRestrBase TypedValue {
            get {
                XElement x = this.Untyped;
                return ((OFMX.codeTypeRestrBase)(Enum.Parse(typeof(OFMX.codeTypeRestrBase), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetValueWithValidation(value.ToString(), "TypedValue", global::OFMX.codeTypeRestrBaseValidator.TypeDefinition);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<codeTypeRestr>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public enum codeTypeRteBase {
        
        CONV,
        
        RNAV,
        
        DCTATS,
        
        TRUNK,
        
        POLAR,
        
        SSN,
        
        TACAN,
        
        ADV,
        
        OTHER,
    }
    
    public sealed class codeTypeRteBaseValidator {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "CONV",
                        "RNAV",
                        "DCTATS",
                        "TRUNK",
                        "POLAR",
                        "SSN",
                        "TACAN",
                        "ADV",
                        "OTHER"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private codeTypeRteBaseValidator() {
        }
    }
    
    /// <summary>
    /// <para>
    /// The type of the route  from the navigation point of view.  E.g. conventional, RNAV, etc..
    /// </para>
    /// </summary>
    public partial class codeTypeRte : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TypedValueXName = System.Xml.Linq.XName.Get("TypedValue", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("codeTypeRte", "");
        
		public static explicit operator codeTypeRte(XElement xe) { return XTypedServices.ToXTypedElement<codeTypeRte>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// The type of the route  from the navigation point of view.  E.g. conventional, RNAV, etc..
        /// </para>
        /// </summary>
        public codeTypeRte() {
        }
        
        public virtual OFMX.codeTypeRteBase TypedValue {
            get {
                XElement x = this.Untyped;
                return ((OFMX.codeTypeRteBase)(Enum.Parse(typeof(OFMX.codeTypeRteBase), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetValueWithValidation(value.ToString(), "TypedValue", global::OFMX.codeTypeRteBaseValidator.TypeDefinition);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<codeTypeRte>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public enum codeTypeSegPathBase {
        
        GRC,
        
        RHL,
        
        GDS,
        
        OTHER,
    }
    
    public sealed class codeTypeSegPathBaseValidator {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "GRC",
                        "RHL",
                        "GDS",
                        "OTHER"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private codeTypeSegPathBaseValidator() {
        }
    }
    
    /// <summary>
    /// <para>
    /// A code indicating the type of segment path.
    /// </para>
    /// </summary>
    public partial class codeTypeSegPath : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TypedValueXName = System.Xml.Linq.XName.Get("TypedValue", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("codeTypeSegPath", "");
        
		public static explicit operator codeTypeSegPath(XElement xe) { return XTypedServices.ToXTypedElement<codeTypeSegPath>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// A code indicating the type of segment path.
        /// </para>
        /// </summary>
        public codeTypeSegPath() {
        }
        
        public virtual OFMX.codeTypeSegPathBase TypedValue {
            get {
                XElement x = this.Untyped;
                return ((OFMX.codeTypeSegPathBase)(Enum.Parse(typeof(OFMX.codeTypeSegPathBase), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetValueWithValidation(value.ToString(), "TypedValue", global::OFMX.codeTypeSegPathBaseValidator.TypeDefinition);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<codeTypeSegPath>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public sealed class codeTypeSerBase {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "ACS",
                        "ADS",
                        "ADVS",
                        "AFIS",
                        "AFS",
                        "AIS",
                        "ALRS",
                        "AMS",
                        "AMSS",
                        "APP",
                        "APP-ARR",
                        "APP-DEP",
                        "ARTCC",
                        "ATC",
                        "ATFM",
                        "ATIS",
                        "ATIS-ARR",
                        "ATIS-DEP",
                        "ATM",
                        "ATS",
                        "BOF",
                        "BS",
                        "COM",
                        "CTAF",
                        "DVDF",
                        "EFAS",
                        "FCST",
                        "FIS",
                        "FISA",
                        "FSS",
                        "GCA",
                        "OAC",
                        "NOF",
                        "MET",
                        "PAR",
                        "RAC",
                        "RADAR",
                        "RAF",
                        "RCC",
                        "SAR",
                        "SIGMET",
                        "SMC",
                        "SMR",
                        "SRA",
                        "SSR",
                        "TAR",
                        "TWEB",
                        "TWR",
                        "UAC",
                        "UDF",
                        "VDF",
                        "VOLMET",
                        "VOT",
                        "OVERFLT",
                        "ENTRY",
                        "EXIT",
                        "INFO",
                        "OTHER"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private codeTypeSerBase() {
        }
    }
    
    /// <summary>
    /// <para>
    /// Type of a service such as Flight Information etc.
    /// </para>
    /// </summary>
    public partial class codeTypeSer : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TypedValueXName = System.Xml.Linq.XName.Get("TypedValue", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("codeTypeSer", "");
        
		public static explicit operator codeTypeSer(XElement xe) { return XTypedServices.ToXTypedElement<codeTypeSer>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// Type of a service such as Flight Information etc.
        /// </para>
        /// </summary>
        public codeTypeSer() {
        }
        
        public virtual string TypedValue {
            get {
                XElement x = this.Untyped;
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetValueWithValidation(value, "TypedValue", global::OFMX.codeTypeSerBase.TypeDefinition);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<codeTypeSer>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public enum codeTypeSerAdBase {
        
        FIRE,
        
        CUST,
        
        SAN,
        
        FUEL,
        
        HAND,
        
        CLEAR,
        
        SECUR,
        
        DEICE,
        
        HANGAR,
        
        REPAIR,
        
        VET,
        
        OTHER,
    }
    
    public sealed class codeTypeSerAdBaseValidator {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "FIRE",
                        "CUST",
                        "SAN",
                        "FUEL",
                        "HAND",
                        "CLEAR",
                        "SECUR",
                        "DEICE",
                        "HANGAR",
                        "REPAIR",
                        "VET",
                        "OTHER"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private codeTypeSerAdBaseValidator() {
        }
    }
    
    /// <summary>
    /// <para>
    /// A code indicating the type of ground service at an aerodrome/heliport.  E.g. customs, immigration, health and sanitation, handling, security, de-icing, hangaring, repairing, rescue, disabled aircraft removal, fire fighting, clearing, fuelling. 
    /// </para>
    /// </summary>
    public partial class codeTypeSerAd : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TypedValueXName = System.Xml.Linq.XName.Get("TypedValue", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("codeTypeSerAd", "");
        
		public static explicit operator codeTypeSerAd(XElement xe) { return XTypedServices.ToXTypedElement<codeTypeSerAd>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// A code indicating the type of ground service at an aerodrome/heliport.  E.g. customs, immigration, health and sanitation, handling, security, de-icing, hangaring, repairing, rescue, disabled aircraft removal, fire fighting, clearing, fuelling. 
        /// </para>
        /// </summary>
        public codeTypeSerAd() {
        }
        
        public virtual OFMX.codeTypeSerAdBase TypedValue {
            get {
                XElement x = this.Untyped;
                return ((OFMX.codeTypeSerAdBase)(Enum.Parse(typeof(OFMX.codeTypeSerAdBase), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetValueWithValidation(value.ToString(), "TypedValue", global::OFMX.codeTypeSerAdBaseValidator.TypeDefinition);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<codeTypeSerAd>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public enum codeTypeSerSpecNavBase {
        
        M,
        
        S,
        
        RS,
        
        GS,
        
        PS,
        
        OTHER,
    }
    
    public sealed class codeTypeSerSpecNavBaseValidator {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "M",
                        "S",
                        "RS",
                        "GS",
                        "PS",
                        "OTHER"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private codeTypeSerSpecNavBaseValidator() {
        }
    }
    
    /// <summary>
    /// <para>
    /// A code indicating the type of service provided by a station in a special navigation system chain, depending on the type of the system.
    /// </para>
    /// </summary>
    public partial class codeTypeSerSpecNav : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TypedValueXName = System.Xml.Linq.XName.Get("TypedValue", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("codeTypeSerSpecNav", "");
        
		public static explicit operator codeTypeSerSpecNav(XElement xe) { return XTypedServices.ToXTypedElement<codeTypeSerSpecNav>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// A code indicating the type of service provided by a station in a special navigation system chain, depending on the type of the system.
        /// </para>
        /// </summary>
        public codeTypeSerSpecNav() {
        }
        
        public virtual OFMX.codeTypeSerSpecNavBase TypedValue {
            get {
                XElement x = this.Untyped;
                return ((OFMX.codeTypeSerSpecNavBase)(Enum.Parse(typeof(OFMX.codeTypeSerSpecNavBase), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetValueWithValidation(value.ToString(), "TypedValue", global::OFMX.codeTypeSerSpecNavBaseValidator.TypeDefinition);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<codeTypeSerSpecNav>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public enum codeTypeSidBase {
        
        O,
        
        C,
        
        R,
        
        F,
        
        OTHER,
    }
    
    public sealed class codeTypeSidBaseValidator {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "O",
                        "C",
                        "R",
                        "F",
                        "OTHER"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private codeTypeSidBaseValidator() {
        }
    }
    
    /// <summary>
    /// <para>
    /// A code indicating a type of Standard Instrument Departure (SID).  E.g. SID, RNAV SID, Engine out SID or FMS SID.
    /// </para>
    /// </summary>
    public partial class codeTypeSid : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TypedValueXName = System.Xml.Linq.XName.Get("TypedValue", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("codeTypeSid", "");
        
		public static explicit operator codeTypeSid(XElement xe) { return XTypedServices.ToXTypedElement<codeTypeSid>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// A code indicating a type of Standard Instrument Departure (SID).  E.g. SID, RNAV SID, Engine out SID or FMS SID.
        /// </para>
        /// </summary>
        public codeTypeSid() {
        }
        
        public virtual OFMX.codeTypeSidBase TypedValue {
            get {
                XElement x = this.Untyped;
                return ((OFMX.codeTypeSidBase)(Enum.Parse(typeof(OFMX.codeTypeSidBase), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetValueWithValidation(value.ToString(), "TypedValue", global::OFMX.codeTypeSidBaseValidator.TypeDefinition);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<codeTypeSid>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public enum codeTypeSpecNavSysBase {
        
        LORANA,
        
        LORANC,
        
        LORAND,
        
        DECCA,
        
        GNSS,
        
        OTHER,
    }
    
    public sealed class codeTypeSpecNavSysBaseValidator {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "LORANA",
                        "LORANC",
                        "LORAND",
                        "DECCA",
                        "GNSS",
                        "OTHER"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private codeTypeSpecNavSysBaseValidator() {
        }
    }
    
    /// <summary>
    /// <para>
    /// A code indicating a type of special navigation system.  E.g. LORAN, DECCA, GNSS, etc.
    /// </para>
    /// </summary>
    public partial class codeTypeSpecNavSys : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TypedValueXName = System.Xml.Linq.XName.Get("TypedValue", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("codeTypeSpecNavSys", "");
        
		public static explicit operator codeTypeSpecNavSys(XElement xe) { return XTypedServices.ToXTypedElement<codeTypeSpecNavSys>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// A code indicating a type of special navigation system.  E.g. LORAN, DECCA, GNSS, etc.
        /// </para>
        /// </summary>
        public codeTypeSpecNavSys() {
        }
        
        public virtual OFMX.codeTypeSpecNavSysBase TypedValue {
            get {
                XElement x = this.Untyped;
                return ((OFMX.codeTypeSpecNavSysBase)(Enum.Parse(typeof(OFMX.codeTypeSpecNavSysBase), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetValueWithValidation(value.ToString(), "TypedValue", global::OFMX.codeTypeSpecNavSysBaseValidator.TypeDefinition);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<codeTypeSpecNavSys>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public sealed class codeTypeStandBase {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "NI",
                        "ANG-NI",
                        "ANG-NO",
                        "PAR",
                        "RMT",
                        "ISOL",
                        "UKN",
                        "OTHER"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private codeTypeStandBase() {
        }
    }
    
    /// <summary>
    /// <para>
    /// A code indicating the type of stand.  E.g. parking position on the apron, isolated aircraft stand, terminal building gate, etc..
    /// </para>
    /// </summary>
    public partial class codeTypeStand : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TypedValueXName = System.Xml.Linq.XName.Get("TypedValue", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("codeTypeStand", "");
        
		public static explicit operator codeTypeStand(XElement xe) { return XTypedServices.ToXTypedElement<codeTypeStand>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// A code indicating the type of stand.  E.g. parking position on the apron, isolated aircraft stand, terminal building gate, etc..
        /// </para>
        /// </summary>
        public codeTypeStand() {
        }
        
        public virtual string TypedValue {
            get {
                XElement x = this.Untyped;
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetValueWithValidation(value, "TypedValue", global::OFMX.codeTypeStandBase.TypeDefinition);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<codeTypeStand>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public enum codeTypeStarBase {
        
        C,
        
        R,
        
        F,
        
        OTHER,
    }
    
    public sealed class codeTypeStarBaseValidator {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "C",
                        "R",
                        "F",
                        "OTHER"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private codeTypeStarBaseValidator() {
        }
    }
    
    /// <summary>
    /// <para>
    /// A code indicating a type of Standard Arival Route (STAR): convetional, RNAV, FMS.
    /// </para>
    /// </summary>
    public partial class codeTypeStar : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TypedValueXName = System.Xml.Linq.XName.Get("TypedValue", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("codeTypeStar", "");
        
		public static explicit operator codeTypeStar(XElement xe) { return XTypedServices.ToXTypedElement<codeTypeStar>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// A code indicating a type of Standard Arival Route (STAR): convetional, RNAV, FMS.
        /// </para>
        /// </summary>
        public codeTypeStar() {
        }
        
        public virtual OFMX.codeTypeStarBase TypedValue {
            get {
                XElement x = this.Untyped;
                return ((OFMX.codeTypeStarBase)(Enum.Parse(typeof(OFMX.codeTypeStarBase), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetValueWithValidation(value.ToString(), "TypedValue", global::OFMX.codeTypeStarBaseValidator.TypeDefinition);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<codeTypeStar>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public enum codeTypeTimetableBase {
        
        H24,
        
        HJ,
        
        HN,
        
        HX,
        
        HO,
        
        NOTAM,
        
        TIMSH,
        
        OTHER,
    }
    
    public sealed class codeTypeTimetableBaseValidator {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "H24",
                        "HJ",
                        "HN",
                        "HX",
                        "HO",
                        "NOTAM",
                        "TIMSH",
                        "OTHER"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private codeTypeTimetableBaseValidator() {
        }
    }
    
    /// <summary>
    /// <para>
    /// A code indicating the type of timetable (working hours, activation hours) associated with a specific activity.
    /// </para>
    /// </summary>
    public partial class codeTypeTimetable : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TypedValueXName = System.Xml.Linq.XName.Get("TypedValue", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("codeTypeTimetable", "");
        
		public static explicit operator codeTypeTimetable(XElement xe) { return XTypedServices.ToXTypedElement<codeTypeTimetable>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// A code indicating the type of timetable (working hours, activation hours) associated with a specific activity.
        /// </para>
        /// </summary>
        public codeTypeTimetable() {
        }
        
        public virtual OFMX.codeTypeTimetableBase TypedValue {
            get {
                XElement x = this.Untyped;
                return ((OFMX.codeTypeTimetableBase)(Enum.Parse(typeof(OFMX.codeTypeTimetableBase), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetValueWithValidation(value.ToString(), "TypedValue", global::OFMX.codeTypeTimetableBaseValidator.TypeDefinition);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<codeTypeTimetable>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public enum codeTypeTlofVertexBase {
        
        ABE,
        
        GRC,
        
        CCA,
        
        CWA,
        
        CIR,
        
        OTHER,
    }
    
    public sealed class codeTypeTlofVertexBaseValidator {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "ABE",
                        "GRC",
                        "CCA",
                        "CWA",
                        "CIR",
                        "OTHER"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private codeTypeTlofVertexBaseValidator() {
        }
    }
    
    /// <summary>
    /// <para>
    /// A code indicating the type of path to the next point of a TLOF related area.  E.g. line, circle, clockwise arc, counter clockwise arc, etc.
    /// </para>
    /// </summary>
    public partial class codeTypeTlofVertex : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TypedValueXName = System.Xml.Linq.XName.Get("TypedValue", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("codeTypeTlofVertex", "");
        
		public static explicit operator codeTypeTlofVertex(XElement xe) { return XTypedServices.ToXTypedElement<codeTypeTlofVertex>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// A code indicating the type of path to the next point of a TLOF related area.  E.g. line, circle, clockwise arc, counter clockwise arc, etc.
        /// </para>
        /// </summary>
        public codeTypeTlofVertex() {
        }
        
        public virtual OFMX.codeTypeTlofVertexBase TypedValue {
            get {
                XElement x = this.Untyped;
                return ((OFMX.codeTypeTlofVertexBase)(Enum.Parse(typeof(OFMX.codeTypeTlofVertexBase), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetValueWithValidation(value.ToString(), "TypedValue", global::OFMX.codeTypeTlofVertexBaseValidator.TypeDefinition);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<codeTypeTlofVertex>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public sealed class codeTypeTwyBase {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "AIRTWY",
                        "GNDTWY",
                        "EXIT",
                        "FASTEXIT",
                        "STUB",
                        "T-AROUND",
                        "PAR",
                        "BYPASS",
                        "APRON",
                        "S-TLANE",
                        "LI-TLANE",
                        "LO-TLANE",
                        "OTHER"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private codeTypeTwyBase() {
        }
    }
    
    /// <summary>
    /// <para>
    /// A code indicating a type of taxiway.  E.g. normal taxiway, apron taxiway, air taxiway, etc..
    /// </para>
    /// </summary>
    public partial class codeTypeTwy : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TypedValueXName = System.Xml.Linq.XName.Get("TypedValue", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("codeTypeTwy", "");
        
		public static explicit operator codeTypeTwy(XElement xe) { return XTypedServices.ToXTypedElement<codeTypeTwy>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// A code indicating a type of taxiway.  E.g. normal taxiway, apron taxiway, air taxiway, etc..
        /// </para>
        /// </summary>
        public codeTypeTwy() {
        }
        
        public virtual string TypedValue {
            get {
                XElement x = this.Untyped;
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetValueWithValidation(value, "TypedValue", global::OFMX.codeTypeTwyBase.TypeDefinition);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<codeTypeTwy>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public sealed class codeTypeUnitBase {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "ACC",
                        "ADSU",
                        "ADVC",
                        "ALPS",
                        "AOF",
                        "APP",
                        "APP-ARR",
                        "APP-DEP",
                        "ARO",
                        "ATCC",
                        "ATFMU",
                        "ATMU",
                        "ATSU",
                        "BOF",
                        "BS",
                        "COM",
                        "FCST",
                        "FIC",
                        "GCA",
                        "MET",
                        "MWO",
                        "NOF",
                        "OAC",
                        "PAR",
                        "RAD",
                        "RAFC",
                        "RCC",
                        "RSC",
                        "SAR",
                        "SMC",
                        "SMR",
                        "SRA",
                        "SSR",
                        "TAR",
                        "TWR",
                        "UAC",
                        "UDF",
                        "UIC",
                        "VDF",
                        "WAFC",
                        "ARTCC",
                        "FSS",
                        "TRACON",
                        "MIL",
                        "MILOPS",
                        "OTHER"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private codeTypeUnitBase() {
        }
    }
    
    /// <summary>
    /// <para>
    /// A unit providing particular ATS services.
    /// </para>
    /// </summary>
    public partial class codeTypeUnit : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TypedValueXName = System.Xml.Linq.XName.Get("TypedValue", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("codeTypeUnit", "");
        
		public static explicit operator codeTypeUnit(XElement xe) { return XTypedServices.ToXTypedElement<codeTypeUnit>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// A unit providing particular ATS services.
        /// </para>
        /// </summary>
        public codeTypeUnit() {
        }
        
        public virtual string TypedValue {
            get {
                XElement x = this.Untyped;
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetValueWithValidation(value, "TypedValue", global::OFMX.codeTypeUnitBase.TypeDefinition);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<codeTypeUnit>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public enum codeTypeUseBackIlsBase {
        
        Y,
        
        N,
        
        R,
    }
    
    public sealed class codeTypeUseBackIlsBaseValidator {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "Y",
                        "N",
                        "R"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private codeTypeUseBackIlsBaseValidator() {
        }
    }
    
    /// <summary>
    /// <para>
    /// A code indicating the usability of the localizer signal in the back-course sector.
    /// </para>
    /// </summary>
    public partial class codeTypeUseBackIls : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TypedValueXName = System.Xml.Linq.XName.Get("TypedValue", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("codeTypeUseBackIls", "");
        
		public static explicit operator codeTypeUseBackIls(XElement xe) { return XTypedServices.ToXTypedElement<codeTypeUseBackIls>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// A code indicating the usability of the localizer signal in the back-course sector.
        /// </para>
        /// </summary>
        public codeTypeUseBackIls() {
        }
        
        public virtual OFMX.codeTypeUseBackIlsBase TypedValue {
            get {
                XElement x = this.Untyped;
                return ((OFMX.codeTypeUseBackIlsBase)(Enum.Parse(typeof(OFMX.codeTypeUseBackIlsBase), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetValueWithValidation(value.ToString(), "TypedValue", global::OFMX.codeTypeUseBackIlsBaseValidator.TypeDefinition);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<codeTypeUseBackIls>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public sealed class codeTypeVasisBase {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "PAPI",
                        "APAPI",
                        "HAPI",
                        "VASIS",
                        "AVASIS",
                        "TVASIS",
                        "ATVASIS",
                        "3B-VASIS",
                        "3B-AVASIS",
                        "3B-ATVASIS",
                        "PVASI",
                        "TRCV",
                        "PNI",
                        "ILU",
                        "OLS",
                        "LCVASI",
                        "OTHER"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private codeTypeVasisBase() {
        }
    }
    
    /// <summary>
    /// <para>
    /// A code indicating a type of visual approach slope indicator system.  Eg: VASIS, AVASIS, 3-BAR VASIS, PAPI, APAPI, etc..
    /// </para>
    /// </summary>
    public partial class codeTypeVasis : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TypedValueXName = System.Xml.Linq.XName.Get("TypedValue", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("codeTypeVasis", "");
        
		public static explicit operator codeTypeVasis(XElement xe) { return XTypedServices.ToXTypedElement<codeTypeVasis>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// A code indicating a type of visual approach slope indicator system.  Eg: VASIS, AVASIS, 3-BAR VASIS, PAPI, APAPI, etc..
        /// </para>
        /// </summary>
        public codeTypeVasis() {
        }
        
        public virtual string TypedValue {
            get {
                XElement x = this.Untyped;
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetValueWithValidation(value, "TypedValue", global::OFMX.codeTypeVasisBase.TypeDefinition);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<codeTypeVasis>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public enum codeTypeVertexBase {
        
        ABE,
        
        GRC,
        
        CCA,
        
        CWA,
        
        OTHER,
    }
    
    public sealed class codeTypeVertexBaseValidator {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "ABE",
                        "GRC",
                        "CCA",
                        "CWA",
                        "OTHER"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private codeTypeVertexBaseValidator() {
        }
    }
    
    /// <summary>
    /// <para>
    /// A code indicating the type of path to the next point.  E.g. great circle, rhumbline, geoidal line, clockwise arc, counter clockwise arc, etc.
    /// </para>
    /// </summary>
    public partial class codeTypeVertex : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TypedValueXName = System.Xml.Linq.XName.Get("TypedValue", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("codeTypeVertex", "");
        
		public static explicit operator codeTypeVertex(XElement xe) { return XTypedServices.ToXTypedElement<codeTypeVertex>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// A code indicating the type of path to the next point.  E.g. great circle, rhumbline, geoidal line, clockwise arc, counter clockwise arc, etc.
        /// </para>
        /// </summary>
        public codeTypeVertex() {
        }
        
        public virtual OFMX.codeTypeVertexBase TypedValue {
            get {
                XElement x = this.Untyped;
                return ((OFMX.codeTypeVertexBase)(Enum.Parse(typeof(OFMX.codeTypeVertexBase), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetValueWithValidation(value.ToString(), "TypedValue", global::OFMX.codeTypeVertexBaseValidator.TypeDefinition);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<codeTypeVertex>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public enum codeTypeVorBase {
        
        VOR,
        
        DVOR,
        
        OTHER,
    }
    
    public sealed class codeTypeVorBaseValidator {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "VOR",
                        "DVOR",
                        "OTHER"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private codeTypeVorBaseValidator() {
        }
    }
    
    /// <summary>
    /// <para>
    /// A code indicating the type of VOR, e.g. conventional VOR or Doppler VOR.
    /// </para>
    /// </summary>
    public partial class codeTypeVor : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TypedValueXName = System.Xml.Linq.XName.Get("TypedValue", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("codeTypeVor", "");
        
		public static explicit operator codeTypeVor(XElement xe) { return XTypedServices.ToXTypedElement<codeTypeVor>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// A code indicating the type of VOR, e.g. conventional VOR or Doppler VOR.
        /// </para>
        /// </summary>
        public codeTypeVor() {
        }
        
        public virtual OFMX.codeTypeVorBase TypedValue {
            get {
                XElement x = this.Untyped;
                return ((OFMX.codeTypeVorBase)(Enum.Parse(typeof(OFMX.codeTypeVorBase), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetValueWithValidation(value.ToString(), "TypedValue", global::OFMX.codeTypeVorBaseValidator.TypeDefinition);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<codeTypeVor>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public sealed class codeTypeLabelMarkerBase {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "TEXT",
                        "FIS-INFO"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private codeTypeLabelMarkerBase() {
        }
    }
    
    /// <summary>
    /// <para>
    /// A code indicating the type of label marker.
    /// </para>
    /// </summary>
    public partial class codeTypeLabelMarker : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TypedValueXName = System.Xml.Linq.XName.Get("TypedValue", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("codeTypeLabelMarker", "");
        
		public static explicit operator codeTypeLabelMarker(XElement xe) { return XTypedServices.ToXTypedElement<codeTypeLabelMarker>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// A code indicating the type of label marker.
        /// </para>
        /// </summary>
        public codeTypeLabelMarker() {
        }
        
        public virtual string TypedValue {
            get {
                XElement x = this.Untyped;
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetValueWithValidation(value, "TypedValue", global::OFMX.codeTypeLabelMarkerBase.TypeDefinition);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<codeTypeLabelMarker>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public sealed class valZoomLevelBase {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(320)), null, 0, 0, null, 7m, 0, null, 1m, 0, null, 0, XmlSchemaWhiteSpace.Collapse));
        
        private valZoomLevelBase() {
        }
    }
    
    /// <summary>
    /// <para>
    /// Zoom level of rendered map.
    /// </para>
    /// </summary>
    public partial class valZoomLevel : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TypedValueXName = System.Xml.Linq.XName.Get("TypedValue", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("valZoomLevel", "");
        
		public static explicit operator valZoomLevel(XElement xe) { return XTypedServices.ToXTypedElement<valZoomLevel>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// Zoom level of rendered map.
        /// </para>
        /// </summary>
        public valZoomLevel() {
        }
        
        public virtual decimal TypedValue {
            get {
                XElement x = this.Untyped;
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                this.SetValueWithValidation(value, "TypedValue", global::OFMX.valZoomLevelBase.TypeDefinition);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<valZoomLevel>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public enum codeUsageLimitationBase {
        
        PERMIT,
        
        FORBID,
        
        RESERV,
        
        OTHER,
    }
    
    public sealed class codeUsageLimitationBaseValidator {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "PERMIT",
                        "FORBID",
                        "RESERV",
                        "OTHER"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private codeUsageLimitationBaseValidator() {
        }
    }
    
    /// <summary>
    /// <para>
    /// A code indicating whether a limitation is of type permission, interdiction or exclusive usage
    /// </para>
    /// </summary>
    public partial class codeUsageLimitation : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TypedValueXName = System.Xml.Linq.XName.Get("TypedValue", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("codeUsageLimitation", "");
        
		public static explicit operator codeUsageLimitation(XElement xe) { return XTypedServices.ToXTypedElement<codeUsageLimitation>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// A code indicating whether a limitation is of type permission, interdiction or exclusive usage
        /// </para>
        /// </summary>
        public codeUsageLimitation() {
        }
        
        public virtual OFMX.codeUsageLimitationBase TypedValue {
            get {
                XElement x = this.Untyped;
                return ((OFMX.codeUsageLimitationBase)(Enum.Parse(typeof(OFMX.codeUsageLimitationBase), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetValueWithValidation(value.ToString(), "TypedValue", global::OFMX.codeUsageLimitationBaseValidator.TypeDefinition);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<codeUsageLimitation>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public enum codeYesNoBase {
        
        Y,
        
        N,
    }
    
    public sealed class codeYesNoBaseValidator {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "Y",
                        "N"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private codeYesNoBaseValidator() {
        }
    }
    
    /// <summary>
    /// <para>
    /// A code for a logical value: Yes or No.
    /// </para>
    /// </summary>
    public partial class codeYesNo : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TypedValueXName = System.Xml.Linq.XName.Get("TypedValue", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("codeYesNo", "");
        
		public static explicit operator codeYesNo(XElement xe) { return XTypedServices.ToXTypedElement<codeYesNo>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// A code for a logical value: Yes or No.
        /// </para>
        /// </summary>
        public codeYesNo() {
        }
        
        public virtual OFMX.codeYesNoBase TypedValue {
            get {
                XElement x = this.Untyped;
                return ((OFMX.codeYesNoBase)(Enum.Parse(typeof(OFMX.codeYesNoBase), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetValueWithValidation(value.ToString(), "TypedValue", global::OFMX.codeYesNoBaseValidator.TypeDefinition);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<codeYesNo>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public enum codeCodingModeBase {
        
        CONST,
        
        PARA,
    }
    
    public sealed class codeCodingModeBaseValidator {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "CONST",
                        "PARA"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private codeCodingModeBaseValidator() {
        }
    }
    
    /// <summary>
    /// <para>
    /// A code for coding mode: Constant or Parametrized.
    /// </para>
    /// </summary>
    public partial class codeCodingMode : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TypedValueXName = System.Xml.Linq.XName.Get("TypedValue", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("codeCodingMode", "");
        
		public static explicit operator codeCodingMode(XElement xe) { return XTypedServices.ToXTypedElement<codeCodingMode>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// A code for coding mode: Constant or Parametrized.
        /// </para>
        /// </summary>
        public codeCodingMode() {
        }
        
        public virtual OFMX.codeCodingModeBase TypedValue {
            get {
                XElement x = this.Untyped;
                return ((OFMX.codeCodingModeBase)(Enum.Parse(typeof(OFMX.codeCodingModeBase), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetValueWithValidation(value.ToString(), "TypedValue", global::OFMX.codeCodingModeBaseValidator.TypeDefinition);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<codeCodingMode>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public sealed class dateMonthDayBase {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(8)), null, 0, 0, null, null, 0, null, null, 0, new string[] {
                        "(((0[1-9])|(1[0-9])|(2[0-9]))\\-((0[1-9])|10|11|12))|(30\\-(01|03|04|05|06|07|08|09" +
                            "|10|11|12))|(31\\-(01|03|05|07|08|10|12))|SDLST|EDLST"}, 0, XmlSchemaWhiteSpace.Preserve));
        
        private dateMonthDayBase() {
        }
    }
    
    /// <summary>
    /// <para>
    /// A date value without year indication. Same each year.  E.g. 15-02, 29-04.
    /// </para>
    /// </summary>
    public partial class dateMonthDay : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TypedValueXName = System.Xml.Linq.XName.Get("TypedValue", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("dateMonthDay", "");
        
		public static explicit operator dateMonthDay(XElement xe) { return XTypedServices.ToXTypedElement<dateMonthDay>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// A date value without year indication. Same each year.  E.g. 15-02, 29-04.
        /// </para>
        /// </summary>
        public dateMonthDay() {
        }
        
        public virtual string TypedValue {
            get {
                XElement x = this.Untyped;
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetValueWithValidation(value, "TypedValue", global::OFMX.dateMonthDayBase.TypeDefinition);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<dateMonthDay>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// A xsd:dateTime expressed as UTC.
    /// </para>
    /// </summary>
    public sealed class dateTimeZulu {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.DateTime), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(8)), null, 0, 0, null, null, 0, null, null, 0, new string[] {
                        ".*(Z|[+-]00:00)"}, 0, XmlSchemaWhiteSpace.Collapse));
        
        private dateTimeZulu() {
        }
    }
    
    public sealed class dateYearBase {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(8)), null, 0, 0, null, null, 0, null, null, 0, new string[] {
                        "\\d\\d\\d\\d"}, 0, XmlSchemaWhiteSpace.Preserve));
        
        private dateYearBase() {
        }
    }
    
    /// <summary>
    /// <para>
    /// A date for which only the year value is significant.
    /// </para>
    /// </summary>
    public partial class dateYear : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TypedValueXName = System.Xml.Linq.XName.Get("TypedValue", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("dateYear", "");
        
		public static explicit operator dateYear(XElement xe) { return XTypedServices.ToXTypedElement<dateYear>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// A date for which only the year value is significant.
        /// </para>
        /// </summary>
        public dateYear() {
        }
        
        public virtual string TypedValue {
            get {
                XElement x = this.Untyped;
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetValueWithValidation(value, "TypedValue", global::OFMX.dateYearBase.TypeDefinition);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<dateYear>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public sealed class geoLatBase {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(8)), null, 0, 0, null, null, 0, null, null, 0, new string[] {
                        "(([0-8][0-9](\\.\\d{1,8}){0,1}(N|S))|(90(\\.0{1,8}){0,1}(N|S)))"}, 0, XmlSchemaWhiteSpace.Preserve));
        
        private geoLatBase() {
        }
    }
    
    /// <summary>
    /// <para>
    /// A geographical latitude.
    /// </para>
    /// </summary>
    public partial class geoLat : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TypedValueXName = System.Xml.Linq.XName.Get("TypedValue", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("geoLat", "");
        
		public static explicit operator geoLat(XElement xe) { return XTypedServices.ToXTypedElement<geoLat>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// A geographical latitude.
        /// </para>
        /// </summary>
        public geoLat() {
        }
        
        public virtual string TypedValue {
            get {
                XElement x = this.Untyped;
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetValueWithValidation(value, "TypedValue", global::OFMX.geoLatBase.TypeDefinition);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<geoLat>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public sealed class geoLongBase {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(8)), null, 0, 0, null, null, 0, null, null, 0, new string[] {
                        "((((0[0-9])|(1[0-7]))[0-9](\\.\\d{1,8}){0,1}(E|W))|(180(\\.0{1,8}){0,1}(E|W)))"}, 0, XmlSchemaWhiteSpace.Preserve));
        
        private geoLongBase() {
        }
    }
    
    /// <summary>
    /// <para>
    /// A geographical longitude.
    /// </para>
    /// </summary>
    public partial class geoLong : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TypedValueXName = System.Xml.Linq.XName.Get("TypedValue", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("geoLong", "");
        
		public static explicit operator geoLong(XElement xe) { return XTypedServices.ToXTypedElement<geoLong>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// A geographical longitude.
        /// </para>
        /// </summary>
        public geoLong() {
        }
        
        public virtual string TypedValue {
            get {
                XElement x = this.Untyped;
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetValueWithValidation(value, "TypedValue", global::OFMX.geoLongBase.TypeDefinition);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<geoLong>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public sealed class lineBase {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(8)), null, 0, 0, null, null, 0, null, null, 0, new string[] {
                        "-?((0\\d|1[0-7])\\d\\.\\d{8}|180\\.0{8}),-?([0-8]\\d\\.\\d{8}|90\\.0{8})( -?((0\\d|1[0-7])\\" +
                            "d\\.\\d{8}|180\\.0{8}),-?([0-8]\\d\\.\\d{8}|90\\.0{8}))+"}, 0, XmlSchemaWhiteSpace.Preserve));
        
        private lineBase() {
        }
    }
    
    /// <summary>
    /// <para>
    /// A line or polygon.
    /// </para>
    /// </summary>
    public partial class line : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TypedValueXName = System.Xml.Linq.XName.Get("TypedValue", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("line", "");
        
		public static explicit operator line(XElement xe) { return XTypedServices.ToXTypedElement<line>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// A line or polygon.
        /// </para>
        /// </summary>
        public line() {
        }
        
        public virtual string TypedValue {
            get {
                XElement x = this.Untyped;
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetValueWithValidation(value, "TypedValue", global::OFMX.lineBase.TypeDefinition);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<line>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public sealed class bezierCurveBase {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(8)), null, 0, 0, null, null, 0, null, null, 0, new string[] {
                        "-?((0\\d|1[0-7])\\d\\.\\d{8}|180\\.0{8}),-?([0-8]\\d\\.\\d{8}|90\\.0{8})(( -?((0\\d|1[0-7])" +
                            "\\d\\.\\d{8}|180\\.0{8}),-?([0-8]\\d\\.\\d{8}|90\\.0{8})){3})+"}, 0, XmlSchemaWhiteSpace.Preserve));
        
        private bezierCurveBase() {
        }
    }
    
    /// <summary>
    /// <para>
    /// An open or closed Bézier curve.
    /// </para>
    /// </summary>
    public partial class bezierCurve : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TypedValueXName = System.Xml.Linq.XName.Get("TypedValue", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("bezierCurve", "");
        
		public static explicit operator bezierCurve(XElement xe) { return XTypedServices.ToXTypedElement<bezierCurve>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// An open or closed Bézier curve.
        /// </para>
        /// </summary>
        public bezierCurve() {
        }
        
        public virtual string TypedValue {
            get {
                XElement x = this.Untyped;
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetValueWithValidation(value, "TypedValue", global::OFMX.bezierCurveBase.TypeDefinition);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<bezierCurve>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public sealed class noNumberBase {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(8)), null, 0, 0, null, null, 0, null, null, 0, new string[] {
                        "\\d{1,4}"}, 0, XmlSchemaWhiteSpace.Collapse));
        
        private noNumberBase() {
        }
    }
    
    /// <summary>
    /// <para>
    /// A (positive) number of similar items.
    /// </para>
    /// </summary>
    public partial class noNumber : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TypedValueXName = System.Xml.Linq.XName.Get("TypedValue", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("noNumber", "");
        
		public static explicit operator noNumber(XElement xe) { return XTypedServices.ToXTypedElement<noNumber>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// A (positive) number of similar items.
        /// </para>
        /// </summary>
        public noNumber() {
        }
        
        public virtual decimal TypedValue {
            get {
                XElement x = this.Untyped;
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
            set {
                this.SetValueWithValidation(value, "TypedValue", global::OFMX.noNumberBase.TypeDefinition);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<noNumber>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public sealed class noSeqBase {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(8)), null, 0, 0, null, null, 0, null, null, 0, new string[] {
                        "\\d{1,4}"}, 0, XmlSchemaWhiteSpace.Collapse));
        
        private noSeqBase() {
        }
    }
    
    /// <summary>
    /// <para>
    /// A sequence number
    /// </para>
    /// </summary>
    public partial class noSeq : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TypedValueXName = System.Xml.Linq.XName.Get("TypedValue", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("noSeq", "");
        
		public static explicit operator noSeq(XElement xe) { return XTypedServices.ToXTypedElement<noSeq>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// A sequence number
        /// </para>
        /// </summary>
        public noSeq() {
        }
        
        public virtual decimal TypedValue {
            get {
                XElement x = this.Untyped;
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
            set {
                this.SetValueWithValidation(value, "TypedValue", global::OFMX.noSeqBase.TypeDefinition);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<noSeq>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public sealed class timeBase {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(8)), null, 0, 0, null, null, 0, null, null, 0, new string[] {
                        "(([0-1][0-9]|2[0-3]):[0-5][0-9])|(24:00)"}, 0, XmlSchemaWhiteSpace.Preserve));
        
        private timeBase() {
        }
    }
    
    /// <summary>
    /// <para>
    /// A time (hours and minutes) value with a resolution of 1 minute.   E.g.: 12:45, 14:30, 00:00.
    /// </para>
    /// </summary>
    public partial class time : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TypedValueXName = System.Xml.Linq.XName.Get("TypedValue", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("time", "");
        
		public static explicit operator time(XElement xe) { return XTypedServices.ToXTypedElement<time>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// A time (hours and minutes) value with a resolution of 1 minute.   E.g.: 12:45, 14:30, 00:00.
        /// </para>
        /// </summary>
        public time() {
        }
        
        public virtual string TypedValue {
            get {
                XElement x = this.Untyped;
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetValueWithValidation(value, "TypedValue", global::OFMX.timeBase.TypeDefinition);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<time>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public sealed class timeLapBase {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(8)), null, 0, 0, null, null, 0, null, null, 0, new string[] {
                        "(\\+|\\-){0,1}\\d{1,4}"}, 0, XmlSchemaWhiteSpace.Collapse));
        
        private timeLapBase() {
        }
    }
    
    /// <summary>
    /// <para>
    /// A  lapse (length or portion)  of time expressed in number of minutes. It may be positive or negative.  E.g. 10 min, 300 min, -20 minutes.
    /// </para>
    /// </summary>
    public partial class timeLap : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TypedValueXName = System.Xml.Linq.XName.Get("TypedValue", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("timeLap", "");
        
		public static explicit operator timeLap(XElement xe) { return XTypedServices.ToXTypedElement<timeLap>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// A  lapse (length or portion)  of time expressed in number of minutes. It may be positive or negative.  E.g. 10 min, 300 min, -20 minutes.
        /// </para>
        /// </summary>
        public timeLap() {
        }
        
        public virtual decimal TypedValue {
            get {
                XElement x = this.Untyped;
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
            set {
                this.SetValueWithValidation(value, "TypedValue", global::OFMX.timeLapBase.TypeDefinition);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<timeLap>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public sealed class txtAddressBase {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(6)), null, 0, 0, null, null, 500, null, null, 1, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private txtAddressBase() {
        }
    }
    
    /// <summary>
    /// <para>
    /// A full free text address.  E.g. +32(2)-729 3326, edgr@eurocontrol.be, LABBYOYX, etc..
    /// </para>
    /// </summary>
    public partial class txtAddress : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TypedValueXName = System.Xml.Linq.XName.Get("TypedValue", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("txtAddress", "");
        
		public static explicit operator txtAddress(XElement xe) { return XTypedServices.ToXTypedElement<txtAddress>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// A full free text address.  E.g. +32(2)-729 3326, edgr@eurocontrol.be, LABBYOYX, etc..
        /// </para>
        /// </summary>
        public txtAddress() {
        }
        
        public virtual string TypedValue {
            get {
                XElement x = this.Untyped;
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetValueWithValidation(value, "TypedValue", global::OFMX.txtAddressBase.TypeDefinition);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<txtAddress>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public sealed class txtDescrBase {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(6)), null, 0, 0, null, null, 10000, null, null, 1, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private txtDescrBase() {
        }
    }
    
    /// <summary>
    /// <para>
    /// A textual description.
    /// </para>
    /// </summary>
    public partial class txtDescr : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TypedValueXName = System.Xml.Linq.XName.Get("TypedValue", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("txtDescr", "");
        
		public static explicit operator txtDescr(XElement xe) { return XTypedServices.ToXTypedElement<txtDescr>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// A textual description.
        /// </para>
        /// </summary>
        public txtDescr() {
        }
        
        public virtual string TypedValue {
            get {
                XElement x = this.Untyped;
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetValueWithValidation(value, "TypedValue", global::OFMX.txtDescrBase.TypeDefinition);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<txtDescr>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public sealed class txtDesigBase {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(14)), null, 0, 0, null, null, 16, null, null, 1, new string[] {
                        "([A-Z]|[0-9])+([ \\+\\-/]*([A-Z]|[0-9])+)*"}, 0, XmlSchemaWhiteSpace.Preserve));
        
        private txtDesigBase() {
        }
    }
    
    /// <summary>
    /// <para>
    /// A textual designator.
    /// </para>
    /// </summary>
    public partial class txtDesig : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TypedValueXName = System.Xml.Linq.XName.Get("TypedValue", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("txtDesig", "");
        
		public static explicit operator txtDesig(XElement xe) { return XTypedServices.ToXTypedElement<txtDesig>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// A textual designator.
        /// </para>
        /// </summary>
        public txtDesig() {
        }
        
        public virtual string TypedValue {
            get {
                XElement x = this.Untyped;
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetValueWithValidation(value, "TypedValue", global::OFMX.txtDesigBase.TypeDefinition);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<txtDesig>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public sealed class txtDesigIapBase {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(14)), null, 0, 0, null, null, 7, null, null, 1, new string[] {
                        "([A-Z]|[0-9])+([ \\+\\-/]*([A-Z]|[0-9])+)*"}, 0, XmlSchemaWhiteSpace.Preserve));
        
        private txtDesigIapBase() {
        }
    }
    
    /// <summary>
    /// <para>
    /// The textual designator of a SID, STAR or IAP (instrument approach procedure).
    /// </para>
    /// </summary>
    public partial class txtDesigIap : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TypedValueXName = System.Xml.Linq.XName.Get("TypedValue", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("txtDesigIap", "");
        
		public static explicit operator txtDesigIap(XElement xe) { return XTypedServices.ToXTypedElement<txtDesigIap>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// The textual designator of a SID, STAR or IAP (instrument approach procedure).
        /// </para>
        /// </summary>
        public txtDesigIap() {
        }
        
        public virtual string TypedValue {
            get {
                XElement x = this.Untyped;
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetValueWithValidation(value, "TypedValue", global::OFMX.txtDesigIapBase.TypeDefinition);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<txtDesigIap>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public sealed class txtDesigRteBase {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(14)), null, 0, 0, null, null, 6, null, null, 1, new string[] {
                        "([A-Z]|[0-9])+([ \\+\\-/]*([A-Z]|[0-9])+)*"}, 0, XmlSchemaWhiteSpace.Preserve));
        
        private txtDesigRteBase() {
        }
    }
    
    /// <summary>
    /// <para>
    /// The textual designator of an en-route route.
    /// </para>
    /// </summary>
    public partial class txtDesigRte : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TypedValueXName = System.Xml.Linq.XName.Get("TypedValue", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("txtDesigRte", "");
        
		public static explicit operator txtDesigRte(XElement xe) { return XTypedServices.ToXTypedElement<txtDesigRte>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// The textual designator of an en-route route.
        /// </para>
        /// </summary>
        public txtDesigRte() {
        }
        
        public virtual string TypedValue {
            get {
                XElement x = this.Untyped;
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetValueWithValidation(value, "TypedValue", global::OFMX.txtDesigRteBase.TypeDefinition);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<txtDesigRte>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public sealed class txtGroupNameBase {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(6)), null, 0, 0, null, null, 100, null, null, 1, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private txtGroupNameBase() {
        }
    }
    
    /// <summary>
    /// <para>
    /// Name or short description of an obstacle group.
    /// </para>
    /// </summary>
    public partial class txtGroupName : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TypedValueXName = System.Xml.Linq.XName.Get("TypedValue", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("txtGroupName", "");
        
		public static explicit operator txtGroupName(XElement xe) { return XTypedServices.ToXTypedElement<txtGroupName>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// Name or short description of an obstacle group.
        /// </para>
        /// </summary>
        public txtGroupName() {
        }
        
        public virtual string TypedValue {
            get {
                XElement x = this.Untyped;
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetValueWithValidation(value, "TypedValue", global::OFMX.txtGroupNameBase.TypeDefinition);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<txtGroupName>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public sealed class txtNameBase {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(14)), null, 0, 0, null, null, 60, null, null, 1, new string[] {
                        "([A-Z]|[0-9]|[, !\"&#$%\'\\(\\)\\*\\+\\-\\./:;<=>\\?@\\[\\\\\\]\\^_\\|\\{\\}])*"}, 0, XmlSchemaWhiteSpace.Preserve));
        
        private txtNameBase() {
        }
    }
    
    /// <summary>
    /// <para>
    /// The official name of a State, an aerodrome, a unit, etc..
    /// </para>
    /// </summary>
    public partial class txtName : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TypedValueXName = System.Xml.Linq.XName.Get("TypedValue", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("txtName", "");
        
		public static explicit operator txtName(XElement xe) { return XTypedServices.ToXTypedElement<txtName>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// The official name of a State, an aerodrome, a unit, etc..
        /// </para>
        /// </summary>
        public txtName() {
        }
        
        public virtual string TypedValue {
            get {
                XElement x = this.Untyped;
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetValueWithValidation(value, "TypedValue", global::OFMX.txtNameBase.TypeDefinition);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<txtName>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public sealed class txtRmkBase {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(6)), null, 0, 0, null, null, 5000, null, null, 1, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private txtRmkBase() {
        }
    }
    
    /// <summary>
    /// <para>
    /// Free text remarks.
    /// </para>
    /// </summary>
    public partial class txtRmk : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TypedValueXName = System.Xml.Linq.XName.Get("TypedValue", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("txtRmk", "");
        
		public static explicit operator txtRmk(XElement xe) { return XTypedServices.ToXTypedElement<txtRmk>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// Free text remarks.
        /// </para>
        /// </summary>
        public txtRmk() {
        }
        
        public virtual string TypedValue {
            get {
                XElement x = this.Untyped;
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetValueWithValidation(value, "TypedValue", global::OFMX.txtRmkBase.TypeDefinition);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<txtRmk>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public enum uomDistHorzBase {
        
        NM,
        
        KM,
        
        M,
        
        FT,
    }
    
    public sealed class uomDistHorzBaseValidator {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "NM",
                        "KM",
                        "M",
                        "FT"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private uomDistHorzBaseValidator() {
        }
    }
    
    /// <summary>
    /// <para>
    /// A unit of measurement for a horizontal distance.  E.g. metres, feet, nautical miles, kilometres, etc. .
    /// </para>
    /// </summary>
    public partial class uomDistHorz : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TypedValueXName = System.Xml.Linq.XName.Get("TypedValue", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("uomDistHorz", "");
        
		public static explicit operator uomDistHorz(XElement xe) { return XTypedServices.ToXTypedElement<uomDistHorz>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// A unit of measurement for a horizontal distance.  E.g. metres, feet, nautical miles, kilometres, etc. .
        /// </para>
        /// </summary>
        public uomDistHorz() {
        }
        
        public virtual OFMX.uomDistHorzBase TypedValue {
            get {
                XElement x = this.Untyped;
                return ((OFMX.uomDistHorzBase)(Enum.Parse(typeof(OFMX.uomDistHorzBase), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetValueWithValidation(value.ToString(), "TypedValue", global::OFMX.uomDistHorzBaseValidator.TypeDefinition);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<uomDistHorz>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public enum uomDistVerBase {
        
        FT,
        
        M,
        
        FL,
        
        SM,
    }
    
    public sealed class uomDistVerBaseValidator {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "FT",
                        "M",
                        "FL",
                        "SM"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private uomDistVerBaseValidator() {
        }
    }
    
    /// <summary>
    /// <para>
    /// A unit of measurement for a vertical distance.  E.g. Flight Level, metres, feet.
    /// </para>
    /// </summary>
    public partial class uomDistVer : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TypedValueXName = System.Xml.Linq.XName.Get("TypedValue", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("uomDistVer", "");
        
		public static explicit operator uomDistVer(XElement xe) { return XTypedServices.ToXTypedElement<uomDistVer>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// A unit of measurement for a vertical distance.  E.g. Flight Level, metres, feet.
        /// </para>
        /// </summary>
        public uomDistVer() {
        }
        
        public virtual OFMX.uomDistVerBase TypedValue {
            get {
                XElement x = this.Untyped;
                return ((OFMX.uomDistVerBase)(Enum.Parse(typeof(OFMX.uomDistVerBase), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetValueWithValidation(value.ToString(), "TypedValue", global::OFMX.uomDistVerBaseValidator.TypeDefinition);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<uomDistVer>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public enum uomDurBase {
        
        H,
        
        M,
        
        S,
    }
    
    public sealed class uomDurBaseValidator {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "H",
                        "M",
                        "S"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private uomDurBaseValidator() {
        }
    }
    
    /// <summary>
    /// <para>
    /// A unit of measurement for time.   E.g. seconds, minutes, hours.
    /// </para>
    /// </summary>
    public partial class uomDur : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TypedValueXName = System.Xml.Linq.XName.Get("TypedValue", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("uomDur", "");
        
		public static explicit operator uomDur(XElement xe) { return XTypedServices.ToXTypedElement<uomDur>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// A unit of measurement for time.   E.g. seconds, minutes, hours.
        /// </para>
        /// </summary>
        public uomDur() {
        }
        
        public virtual OFMX.uomDurBase TypedValue {
            get {
                XElement x = this.Untyped;
                return ((OFMX.uomDurBase)(Enum.Parse(typeof(OFMX.uomDurBase), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetValueWithValidation(value.ToString(), "TypedValue", global::OFMX.uomDurBaseValidator.TypeDefinition);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<uomDur>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public enum uomElevBase {
        
        FT,
        
        M,
    }
    
    public sealed class uomElevBaseValidator {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "FT",
                        "M"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private uomElevBaseValidator() {
        }
    }
    
    /// <summary>
    /// <para>
    /// A unit of measurement for an elevation.  E.g. metres or  feet.
    /// </para>
    /// </summary>
    public partial class uomElev : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TypedValueXName = System.Xml.Linq.XName.Get("TypedValue", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("uomElev", "");
        
		public static explicit operator uomElev(XElement xe) { return XTypedServices.ToXTypedElement<uomElev>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// A unit of measurement for an elevation.  E.g. metres or  feet.
        /// </para>
        /// </summary>
        public uomElev() {
        }
        
        public virtual OFMX.uomElevBase TypedValue {
            get {
                XElement x = this.Untyped;
                return ((OFMX.uomElevBase)(Enum.Parse(typeof(OFMX.uomElevBase), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetValueWithValidation(value.ToString(), "TypedValue", global::OFMX.uomElevBaseValidator.TypeDefinition);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<uomElev>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public enum uomFreqBase {
        
        HZ,
        
        KHZ,
        
        MHZ,
        
        GHZ,
    }
    
    public sealed class uomFreqBaseValidator {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "HZ",
                        "KHZ",
                        "MHZ",
                        "GHZ"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private uomFreqBaseValidator() {
        }
    }
    
    /// <summary>
    /// <para>
    /// A unit of measurement for a frequency.  E.g. Hz, kHz, MHz,GHz.
    /// </para>
    /// </summary>
    public partial class uomFreq : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TypedValueXName = System.Xml.Linq.XName.Get("TypedValue", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("uomFreq", "");
        
		public static explicit operator uomFreq(XElement xe) { return XTypedServices.ToXTypedElement<uomFreq>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// A unit of measurement for a frequency.  E.g. Hz, kHz, MHz,GHz.
        /// </para>
        /// </summary>
        public uomFreq() {
        }
        
        public virtual OFMX.uomFreqBase TypedValue {
            get {
                XElement x = this.Untyped;
                return ((OFMX.uomFreqBase)(Enum.Parse(typeof(OFMX.uomFreqBase), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetValueWithValidation(value.ToString(), "TypedValue", global::OFMX.uomFreqBaseValidator.TypeDefinition);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<uomFreq>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public enum uomPressureBase {
        
        P,
        
        MPA,
        
        PSI,
        
        BAR,
        
        TORR,
    }
    
    public sealed class uomPressureBaseValidator {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "P",
                        "MPA",
                        "PSI",
                        "BAR",
                        "TORR"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private uomPressureBaseValidator() {
        }
    }
    
    /// <summary>
    /// <para>
    /// A unit of measurement for pressure values.
    /// </para>
    /// </summary>
    public partial class uomPressure : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TypedValueXName = System.Xml.Linq.XName.Get("TypedValue", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("uomPressure", "");
        
		public static explicit operator uomPressure(XElement xe) { return XTypedServices.ToXTypedElement<uomPressure>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// A unit of measurement for pressure values.
        /// </para>
        /// </summary>
        public uomPressure() {
        }
        
        public virtual OFMX.uomPressureBase TypedValue {
            get {
                XElement x = this.Untyped;
                return ((OFMX.uomPressureBase)(Enum.Parse(typeof(OFMX.uomPressureBase), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetValueWithValidation(value.ToString(), "TypedValue", global::OFMX.uomPressureBaseValidator.TypeDefinition);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<uomPressure>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public sealed class uomSpeedBase {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "KM/H",
                        "KT",
                        "MACH",
                        "M/MIN",
                        "FT/MIN",
                        "M/SEC",
                        "FT/SEC"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private uomSpeedBase() {
        }
    }
    
    /// <summary>
    /// <para>
    /// A unit of measurement for speed.
    /// </para>
    /// </summary>
    public partial class uomSpeed : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TypedValueXName = System.Xml.Linq.XName.Get("TypedValue", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("uomSpeed", "");
        
		public static explicit operator uomSpeed(XElement xe) { return XTypedServices.ToXTypedElement<uomSpeed>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// A unit of measurement for speed.
        /// </para>
        /// </summary>
        public uomSpeed() {
        }
        
        public virtual string TypedValue {
            get {
                XElement x = this.Untyped;
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetValueWithValidation(value, "TypedValue", global::OFMX.uomSpeedBase.TypeDefinition);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<uomSpeed>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public enum uomTBase {
        
        C,
        
        F,
    }
    
    public sealed class uomTBaseValidator {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "C",
                        "F"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private uomTBaseValidator() {
        }
    }
    
    /// <summary>
    /// <para>
    /// A unit of measurement for temperature.
    /// </para>
    /// </summary>
    public partial class uomT : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TypedValueXName = System.Xml.Linq.XName.Get("TypedValue", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("uomT", "");
        
		public static explicit operator uomT(XElement xe) { return XTypedServices.ToXTypedElement<uomT>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// A unit of measurement for temperature.
        /// </para>
        /// </summary>
        public uomT() {
        }
        
        public virtual OFMX.uomTBase TypedValue {
            get {
                XElement x = this.Untyped;
                return ((OFMX.uomTBase)(Enum.Parse(typeof(OFMX.uomTBase), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetValueWithValidation(value.ToString(), "TypedValue", global::OFMX.uomTBaseValidator.TypeDefinition);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<uomT>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public enum uomWeightBase {
        
        KG,
        
        T,
        
        LB,
        
        TON,
    }
    
    public sealed class uomWeightBaseValidator {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "KG",
                        "T",
                        "LB",
                        "TON"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private uomWeightBaseValidator() {
        }
    }
    
    /// <summary>
    /// <para>
    /// A unit of measurement for weight values.
    /// </para>
    /// </summary>
    public partial class uomWeight : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TypedValueXName = System.Xml.Linq.XName.Get("TypedValue", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("uomWeight", "");
        
		public static explicit operator uomWeight(XElement xe) { return XTypedServices.ToXTypedElement<uomWeight>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// A unit of measurement for weight values.
        /// </para>
        /// </summary>
        public uomWeight() {
        }
        
        public virtual OFMX.uomWeightBase TypedValue {
            get {
                XElement x = this.Untyped;
                return ((OFMX.uomWeightBase)(Enum.Parse(typeof(OFMX.uomWeightBase), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetValueWithValidation(value.ToString(), "TypedValue", global::OFMX.uomWeightBaseValidator.TypeDefinition);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<uomWeight>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public sealed class valAngleBase {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(328)), null, 0, 0, null, 180m, 0, null, -180m, 0, new string[] {
                        "(\\+|\\-){0,1}\\d{1,3}(\\.\\d{1,4}){0,1}"}, 0, XmlSchemaWhiteSpace.Collapse));
        
        private valAngleBase() {
        }
    }
    
    /// <summary>
    /// <para>
    /// The value of an angle.
    /// </para>
    /// </summary>
    public partial class valAngle : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TypedValueXName = System.Xml.Linq.XName.Get("TypedValue", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("valAngle", "");
        
		public static explicit operator valAngle(XElement xe) { return XTypedServices.ToXTypedElement<valAngle>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// The value of an angle.
        /// </para>
        /// </summary>
        public valAngle() {
        }
        
        public virtual decimal TypedValue {
            get {
                XElement x = this.Untyped;
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
            set {
                this.SetValueWithValidation(value, "TypedValue", global::OFMX.valAngleBase.TypeDefinition);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<valAngle>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public sealed class valAngleBrgBase {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(328)), null, 0, 0, null, 360m, 0, null, 0m, 0, new string[] {
                        "\\d{3}(\\.\\d{1,4}){0,1}"}, 0, XmlSchemaWhiteSpace.Collapse));
        
        private valAngleBrgBase() {
        }
    }
    
    /// <summary>
    /// <para>
    /// The value of a bearing indication (at a given point) measured as the angle between the direction and either True North or Magnetic North (this should appear explicitly or implicitly). The angle is measured clockwise from 0 degrees up to and including 360 degrees. The value can also be a VOR radial. For example, “westward” is expressed as 270.
    /// </para>
    /// </summary>
    public partial class valAngleBrg : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TypedValueXName = System.Xml.Linq.XName.Get("TypedValue", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("valAngleBrg", "");
        
		public static explicit operator valAngleBrg(XElement xe) { return XTypedServices.ToXTypedElement<valAngleBrg>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// The value of a bearing indication (at a given point) measured as the angle between the direction and either True North or Magnetic North (this should appear explicitly or implicitly). The angle is measured clockwise from 0 degrees up to and including 360 degrees. The value can also be a VOR radial. For example, “westward” is expressed as 270.
        /// </para>
        /// </summary>
        public valAngleBrg() {
        }
        
        public virtual decimal TypedValue {
            get {
                XElement x = this.Untyped;
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
            set {
                this.SetValueWithValidation(value, "TypedValue", global::OFMX.valAngleBrgBase.TypeDefinition);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<valAngleBrg>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public sealed class valAngleMagVarBase {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(328)), null, 0, 0, null, 180m, 0, null, -180m, 0, new string[] {
                        "(\\+|\\-){0,1}\\d{1,3}(\\.\\d{1,4}){0,1}"}, 0, XmlSchemaWhiteSpace.Collapse));
        
        private valAngleMagVarBase() {
        }
    }
    
    /// <summary>
    /// <para>
    /// The value of an angle (at a given point) between the direction of Magnetic North and the direction of Geographical North.   A positive value indicates that Magnetic North is East of Geographical North.   A negative value indicates that Magnetic North is West of Geographical North.
    /// </para>
    /// </summary>
    public partial class valAngleMagVar : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TypedValueXName = System.Xml.Linq.XName.Get("TypedValue", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("valAngleMagVar", "");
        
		public static explicit operator valAngleMagVar(XElement xe) { return XTypedServices.ToXTypedElement<valAngleMagVar>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// The value of an angle (at a given point) between the direction of Magnetic North and the direction of Geographical North.   A positive value indicates that Magnetic North is East of Geographical North.   A negative value indicates that Magnetic North is West of Geographical North.
        /// </para>
        /// </summary>
        public valAngleMagVar() {
        }
        
        public virtual decimal TypedValue {
            get {
                XElement x = this.Untyped;
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
            set {
                this.SetValueWithValidation(value, "TypedValue", global::OFMX.valAngleMagVarBase.TypeDefinition);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<valAngleMagVar>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public sealed class valAngleMagVarChgBase {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(328)), null, 0, 0, null, 180m, 0, null, -180m, 0, new string[] {
                        "(\\+|\\-){0,1}\\d{1,3}(\\.\\d{1,4}){0,1}"}, 0, XmlSchemaWhiteSpace.Collapse));
        
        private valAngleMagVarChgBase() {
        }
    }
    
    /// <summary>
    /// <para>
    /// The value of the annual rate of change of the magnetic variation. The unit of measurement would be degrees/year and can be positive or negative, i.e qualified by EAST (E) or WEST (W).
    /// </para>
    /// </summary>
    public partial class valAngleMagVarChg : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TypedValueXName = System.Xml.Linq.XName.Get("TypedValue", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("valAngleMagVarChg", "");
        
		public static explicit operator valAngleMagVarChg(XElement xe) { return XTypedServices.ToXTypedElement<valAngleMagVarChg>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// The value of the annual rate of change of the magnetic variation. The unit of measurement would be degrees/year and can be positive or negative, i.e qualified by EAST (E) or WEST (W).
        /// </para>
        /// </summary>
        public valAngleMagVarChg() {
        }
        
        public virtual decimal TypedValue {
            get {
                XElement x = this.Untyped;
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
            set {
                this.SetValueWithValidation(value, "TypedValue", global::OFMX.valAngleMagVarChgBase.TypeDefinition);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<valAngleMagVarChg>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public sealed class valDistHorzBase {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(8)), null, 0, 0, null, null, 0, null, null, 0, new string[] {
                        "\\d{1,8}(\\.\\d{1,4}){0,1}"}, 0, XmlSchemaWhiteSpace.Collapse));
        
        private valDistHorzBase() {
        }
    }
    
    /// <summary>
    /// <para>
    /// A horizontal distance.
    /// </para>
    /// </summary>
    public partial class valDistHorz : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TypedValueXName = System.Xml.Linq.XName.Get("TypedValue", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("valDistHorz", "");
        
		public static explicit operator valDistHorz(XElement xe) { return XTypedServices.ToXTypedElement<valDistHorz>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// A horizontal distance.
        /// </para>
        /// </summary>
        public valDistHorz() {
        }
        
        public virtual decimal TypedValue {
            get {
                XElement x = this.Untyped;
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
            set {
                this.SetValueWithValidation(value, "TypedValue", global::OFMX.valDistHorzBase.TypeDefinition);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<valDistHorz>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public sealed class valDistVerBase {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(8)), null, 0, 0, null, null, 0, null, null, 0, new string[] {
                        "(\\+|\\-){0,1}\\d{1,8}(\\.\\d{1,4}){0,1}"}, 0, XmlSchemaWhiteSpace.Collapse));
        
        private valDistVerBase() {
        }
    }
    
    /// <summary>
    /// <para>
    /// A vertical distance value.  E.g.: Upper and lower limis of an airspace, an ATS route, FL100, 600M, 300 FT, etc..
    /// </para>
    /// </summary>
    public partial class valDistVer : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TypedValueXName = System.Xml.Linq.XName.Get("TypedValue", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("valDistVer", "");
        
		public static explicit operator valDistVer(XElement xe) { return XTypedServices.ToXTypedElement<valDistVer>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// A vertical distance value.  E.g.: Upper and lower limis of an airspace, an ATS route, FL100, 600M, 300 FT, etc..
        /// </para>
        /// </summary>
        public valDistVer() {
        }
        
        public virtual decimal TypedValue {
            get {
                XElement x = this.Untyped;
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
            set {
                this.SetValueWithValidation(value, "TypedValue", global::OFMX.valDistVerBase.TypeDefinition);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<valDistVer>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public sealed class valDurBase {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(8)), null, 0, 0, null, null, 0, null, null, 0, new string[] {
                        "\\d{1,8}(\\.\\d{1,2}){0,1}"}, 0, XmlSchemaWhiteSpace.Collapse));
        
        private valDurBase() {
        }
    }
    
    /// <summary>
    /// <para>
    /// A duration value or elapsed time period.  E.g. 5 minutes, 200 seconds, etc..
    /// </para>
    /// </summary>
    public partial class valDur : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TypedValueXName = System.Xml.Linq.XName.Get("TypedValue", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("valDur", "");
        
		public static explicit operator valDur(XElement xe) { return XTypedServices.ToXTypedElement<valDur>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// A duration value or elapsed time period.  E.g. 5 minutes, 200 seconds, etc..
        /// </para>
        /// </summary>
        public valDur() {
        }
        
        public virtual decimal TypedValue {
            get {
                XElement x = this.Untyped;
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
            set {
                this.SetValueWithValidation(value, "TypedValue", global::OFMX.valDurBase.TypeDefinition);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<valDur>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public sealed class valFlBase {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(8)), null, 0, 0, null, null, 0, null, null, 0, new string[] {
                        "\\d{3,3}"}, 0, XmlSchemaWhiteSpace.Collapse));
        
        private valFlBase() {
        }
    }
    
    /// <summary>
    /// <para>
    /// A value expressed in flight levels (FL).
    /// </para>
    /// </summary>
    public partial class valFl : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TypedValueXName = System.Xml.Linq.XName.Get("TypedValue", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("valFl", "");
        
		public static explicit operator valFl(XElement xe) { return XTypedServices.ToXTypedElement<valFl>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// A value expressed in flight levels (FL).
        /// </para>
        /// </summary>
        public valFl() {
        }
        
        public virtual decimal TypedValue {
            get {
                XElement x = this.Untyped;
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
            set {
                this.SetValueWithValidation(value, "TypedValue", global::OFMX.valFlBase.TypeDefinition);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<valFl>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public sealed class valFreqBase {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(8)), null, 0, 0, null, null, 0, null, null, 0, new string[] {
                        "\\d{1,8}(\\.\\d{1,4}){0,1}"}, 0, XmlSchemaWhiteSpace.Collapse));
        
        private valFreqBase() {
        }
    }
    
    /// <summary>
    /// <para>
    /// The frequency value of a navigation system.
    /// </para>
    /// </summary>
    public partial class valFreq : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TypedValueXName = System.Xml.Linq.XName.Get("TypedValue", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("valFreq", "");
        
		public static explicit operator valFreq(XElement xe) { return XTypedServices.ToXTypedElement<valFreq>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// The frequency value of a navigation system.
        /// </para>
        /// </summary>
        public valFreq() {
        }
        
        public virtual decimal TypedValue {
            get {
                XElement x = this.Untyped;
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
            set {
                this.SetValueWithValidation(value, "TypedValue", global::OFMX.valFreqBase.TypeDefinition);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<valFreq>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public sealed class valHexBase {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(8)), null, 0, 0, null, null, 0, null, null, 0, new string[] {
                        "([A-F]|[0-9]){8}"}, 0, XmlSchemaWhiteSpace.Preserve));
        
        private valHexBase() {
        }
    }
    
    /// <summary>
    /// <para>
    /// A hexadecimal value  x ('00000000' LE x LE 'FFFFFFFF').
    /// </para>
    /// </summary>
    public partial class valHex : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TypedValueXName = System.Xml.Linq.XName.Get("TypedValue", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("valHex", "");
        
		public static explicit operator valHex(XElement xe) { return XTypedServices.ToXTypedElement<valHex>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// A hexadecimal value  x ('00000000' LE x LE 'FFFFFFFF').
        /// </para>
        /// </summary>
        public valHex() {
        }
        
        public virtual string TypedValue {
            get {
                XElement x = this.Untyped;
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetValueWithValidation(value, "TypedValue", global::OFMX.valHexBase.TypeDefinition);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<valHex>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public sealed class valLcnClassBase {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(8)), null, 0, 0, null, null, 0, null, null, 0, new string[] {
                        "\\d{1,3}"}, 0, XmlSchemaWhiteSpace.Collapse));
        
        private valLcnClassBase() {
        }
    }
    
    /// <summary>
    /// <para>
    /// The value of a load classification number (LCN) for a surface
    /// </para>
    /// </summary>
    public partial class valLcnClass : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TypedValueXName = System.Xml.Linq.XName.Get("TypedValue", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("valLcnClass", "");
        
		public static explicit operator valLcnClass(XElement xe) { return XTypedServices.ToXTypedElement<valLcnClass>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// The value of a load classification number (LCN) for a surface
        /// </para>
        /// </summary>
        public valLcnClass() {
        }
        
        public virtual decimal TypedValue {
            get {
                XElement x = this.Untyped;
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
            set {
                this.SetValueWithValidation(value, "TypedValue", global::OFMX.valLcnClassBase.TypeDefinition);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<valLcnClass>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public sealed class valOffsetBase {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(8)), null, 0, 0, null, null, 0, null, null, 0, new string[] {
                        "(\\+|\\-){0,1}\\d{1,8}(\\.\\d{1,4}){0,1}"}, 0, XmlSchemaWhiteSpace.Collapse));
        
        private valOffsetBase() {
        }
    }
    
    /// <summary>
    /// <para>
    /// A positive or negative distance value
    /// </para>
    /// </summary>
    public partial class valOffset : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TypedValueXName = System.Xml.Linq.XName.Get("TypedValue", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("valOffset", "");
        
		public static explicit operator valOffset(XElement xe) { return XTypedServices.ToXTypedElement<valOffset>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// A positive or negative distance value
        /// </para>
        /// </summary>
        public valOffset() {
        }
        
        public virtual decimal TypedValue {
            get {
                XElement x = this.Untyped;
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
            set {
                this.SetValueWithValidation(value, "TypedValue", global::OFMX.valOffsetBase.TypeDefinition);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<valOffset>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public sealed class valPcnClassBase {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(8)), null, 0, 0, null, null, 0, null, null, 0, new string[] {
                        "\\d{1,3}(\\.\\d){0,1}"}, 0, XmlSchemaWhiteSpace.Collapse));
        
        private valPcnClassBase() {
        }
    }
    
    /// <summary>
    /// <para>
    /// The value of a pavement classification number (PCN) for a surface
    /// </para>
    /// </summary>
    public partial class valPcnClass : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TypedValueXName = System.Xml.Linq.XName.Get("TypedValue", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("valPcnClass", "");
        
		public static explicit operator valPcnClass(XElement xe) { return XTypedServices.ToXTypedElement<valPcnClass>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// The value of a pavement classification number (PCN) for a surface
        /// </para>
        /// </summary>
        public valPcnClass() {
        }
        
        public virtual decimal TypedValue {
            get {
                XElement x = this.Untyped;
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
            set {
                this.SetValueWithValidation(value, "TypedValue", global::OFMX.valPcnClassBase.TypeDefinition);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<valPcnClass>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public sealed class valPressurePcnTireBase {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(8)), null, 0, 0, null, null, 0, null, null, 0, new string[] {
                        "\\d{1,2}(\\.\\d{1,2}){0,1}"}, 0, XmlSchemaWhiteSpace.Collapse));
        
        private valPressurePcnTireBase() {
        }
    }
    
    /// <summary>
    /// <para>
    /// The value of the maximum allowable tire pressure related to a PCN number, expressed in MPa (Mega Pascal).
    /// </para>
    /// </summary>
    public partial class valPressurePcnTire : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TypedValueXName = System.Xml.Linq.XName.Get("TypedValue", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("valPressurePcnTire", "");
        
		public static explicit operator valPressurePcnTire(XElement xe) { return XTypedServices.ToXTypedElement<valPressurePcnTire>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// The value of the maximum allowable tire pressure related to a PCN number, expressed in MPa (Mega Pascal).
        /// </para>
        /// </summary>
        public valPressurePcnTire() {
        }
        
        public virtual decimal TypedValue {
            get {
                XElement x = this.Untyped;
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
            set {
                this.SetValueWithValidation(value, "TypedValue", global::OFMX.valPressurePcnTireBase.TypeDefinition);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<valPressurePcnTire>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public sealed class valSlopeBase {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(8)), null, 0, 0, null, null, 0, null, null, 0, new string[] {
                        "(\\+|\\-){0,1}\\d{1,4}(\\.\\d{1,2}){0,1}"}, 0, XmlSchemaWhiteSpace.Collapse));
        
        private valSlopeBase() {
        }
    }
    
    /// <summary>
    /// <para>
    /// The value of a profile sequence slope that is always expressed as a percentage.
    /// </para>
    /// </summary>
    public partial class valSlope : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TypedValueXName = System.Xml.Linq.XName.Get("TypedValue", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("valSlope", "");
        
		public static explicit operator valSlope(XElement xe) { return XTypedServices.ToXTypedElement<valSlope>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// The value of a profile sequence slope that is always expressed as a percentage.
        /// </para>
        /// </summary>
        public valSlope() {
        }
        
        public virtual decimal TypedValue {
            get {
                XElement x = this.Untyped;
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
            set {
                this.SetValueWithValidation(value, "TypedValue", global::OFMX.valSlopeBase.TypeDefinition);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<valSlope>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public sealed class valPressureBase {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(8)), null, 0, 0, null, null, 0, null, null, 0, new string[] {
                        "\\d{1,8}(\\.\\d{1,4}){0,1}"}, 0, XmlSchemaWhiteSpace.Collapse));
        
        private valPressureBase() {
        }
    }
    
    /// <summary>
    /// <para>
    /// The value of a pressure.
    /// </para>
    /// </summary>
    public partial class valPressure : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TypedValueXName = System.Xml.Linq.XName.Get("TypedValue", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("valPressure", "");
        
		public static explicit operator valPressure(XElement xe) { return XTypedServices.ToXTypedElement<valPressure>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// The value of a pressure.
        /// </para>
        /// </summary>
        public valPressure() {
        }
        
        public virtual decimal TypedValue {
            get {
                XElement x = this.Untyped;
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
            set {
                this.SetValueWithValidation(value, "TypedValue", global::OFMX.valPressureBase.TypeDefinition);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<valPressure>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public sealed class valSpeedBase {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(8)), null, 0, 0, null, null, 0, null, null, 0, new string[] {
                        "\\d{1,8}(\\.\\d{1,2}){0,1}"}, 0, XmlSchemaWhiteSpace.Collapse));
        
        private valSpeedBase() {
        }
    }
    
    /// <summary>
    /// <para>
    /// The value of a speed.
    /// </para>
    /// </summary>
    public partial class valSpeed : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TypedValueXName = System.Xml.Linq.XName.Get("TypedValue", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("valSpeed", "");
        
		public static explicit operator valSpeed(XElement xe) { return XTypedServices.ToXTypedElement<valSpeed>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// The value of a speed.
        /// </para>
        /// </summary>
        public valSpeed() {
        }
        
        public virtual decimal TypedValue {
            get {
                XElement x = this.Untyped;
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
            set {
                this.SetValueWithValidation(value, "TypedValue", global::OFMX.valSpeedBase.TypeDefinition);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<valSpeed>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public sealed class valTBase {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(8)), null, 0, 0, null, null, 0, null, null, 0, new string[] {
                        "(\\+|\\-){0,1}\\d{1,8}(\\.\\d{1,2}){0,1}"}, 0, XmlSchemaWhiteSpace.Collapse));
        
        private valTBase() {
        }
    }
    
    /// <summary>
    /// <para>
    /// The value of a temperature.
    /// </para>
    /// </summary>
    public partial class valT : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TypedValueXName = System.Xml.Linq.XName.Get("TypedValue", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("valT", "");
        
		public static explicit operator valT(XElement xe) { return XTypedServices.ToXTypedElement<valT>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// The value of a temperature.
        /// </para>
        /// </summary>
        public valT() {
        }
        
        public virtual decimal TypedValue {
            get {
                XElement x = this.Untyped;
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
            set {
                this.SetValueWithValidation(value, "TypedValue", global::OFMX.valTBase.TypeDefinition);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<valT>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public sealed class valWeightBase {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(8)), null, 0, 0, null, null, 0, null, null, 0, new string[] {
                        "\\d{1,8}(\\.\\d{1,4}){0,1}"}, 0, XmlSchemaWhiteSpace.Collapse));
        
        private valWeightBase() {
        }
    }
    
    /// <summary>
    /// <para>
    /// The value of a weight.
    /// </para>
    /// </summary>
    public partial class valWeight : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TypedValueXName = System.Xml.Linq.XName.Get("TypedValue", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("valWeight", "");
        
		public static explicit operator valWeight(XElement xe) { return XTypedServices.ToXTypedElement<valWeight>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// The value of a weight.
        /// </para>
        /// </summary>
        public valWeight() {
        }
        
        public virtual decimal TypedValue {
            get {
                XElement x = this.Untyped;
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Decimal).Datatype);
            }
            set {
                this.SetValueWithValidation(value, "TypedValue", global::OFMX.valWeightBase.TypeDefinition);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<valWeight>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Aerodrome / Heliport Address
    /// </para>
    /// <para>
    /// Regular expression: (AhaUid, txtAddress, txtRmk?)
    /// </para>
    /// </summary>
    public partial class AerodromeHeliportAddressType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName AhaUidXName = System.Xml.Linq.XName.Get("AhaUid", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName txtAddressXName = System.Xml.Linq.XName.Get("txtAddress", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName txtRmkXName = System.Xml.Linq.XName.Get("txtRmk", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName sourceXName = System.Xml.Linq.XName.Get("source", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("AerodromeHeliportAddressType", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator AerodromeHeliportAddressType(XElement xe) { return XTypedServices.ToXTypedElement<AerodromeHeliportAddressType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static AerodromeHeliportAddressType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(AhaUidXName), new NamedContentModelEntity(txtAddressXName), new NamedContentModelEntity(txtRmkXName));
        }
        
        /// <summary>
        /// <para>
        /// Aerodrome / Heliport Address
        /// </para>
        /// <para>
        /// Regular expression: (AhaUid, txtAddress, txtRmk?)
        /// </para>
        /// </summary>
        public AerodromeHeliportAddressType() {
        }
        
        /// <summary>
        /// <para>
        /// a version of Aerodrome / Heliport - Address
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (AhaUid, txtAddress, txtRmk?)
        /// </para>
        /// </summary>
        public virtual AerodromeHeliportAddressUidType AhaUid {
            get {
                XElement x = this.GetElement(AhaUidXName);
                return ((AerodromeHeliportAddressUidType)(x));
            }
            set {
                this.SetElement(AhaUidXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Full address
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (AhaUid, txtAddress, txtRmk?)
        /// </para>
        /// </summary>
        public virtual txtAddress txtAddress {
            get {
                XElement x = this.GetElement(txtAddressXName);
                return ((txtAddress)(x));
            }
            set {
                this.SetElement(txtAddressXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Remark
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (AhaUid, txtAddress, txtRmk?)
        /// </para>
        /// </summary>
        public virtual txtRmk txtRmk {
            get {
                XElement x = this.GetElement(txtRmkXName);
                return ((txtRmk)(x));
            }
            set {
                this.SetElement(txtRmkXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string source {
            get {
                XAttribute x = this.Attribute(sourceXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(sourceXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<AerodromeHeliportAddressType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(AhaUidXName, typeof(AerodromeHeliportAddressUidType));
            localElementDictionary.Add(txtAddressXName, typeof(txtAddress));
            localElementDictionary.Add(txtRmkXName, typeof(txtRmk));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Aerodrome / Heliport - Address - UID
    /// </para>
    /// <para>
    /// Regular expression: (AhpUid, codeType, noSeq)
    /// </para>
    /// </summary>
    public partial class AerodromeHeliportAddressUidType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName AhpUidXName = System.Xml.Linq.XName.Get("AhpUid", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName codeTypeXName = System.Xml.Linq.XName.Get("codeType", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName noSeqXName = System.Xml.Linq.XName.Get("noSeq", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName midXName = System.Xml.Linq.XName.Get("mid", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("AerodromeHeliportAddressUidType", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator AerodromeHeliportAddressUidType(XElement xe) { return XTypedServices.ToXTypedElement<AerodromeHeliportAddressUidType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static AerodromeHeliportAddressUidType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(AhpUidXName), new NamedContentModelEntity(codeTypeXName), new NamedContentModelEntity(noSeqXName));
        }
        
        /// <summary>
        /// <para>
        /// Aerodrome / Heliport - Address - UID
        /// </para>
        /// <para>
        /// Regular expression: (AhpUid, codeType, noSeq)
        /// </para>
        /// </summary>
        public AerodromeHeliportAddressUidType() {
        }
        
        /// <summary>
        /// <para>
        /// Aerodrome / Heliport - Address is for Aerodrome / Heliport
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (AhpUid, codeType, noSeq)
        /// </para>
        /// </summary>
        public virtual AerodromeHeliportUidType AhpUid {
            get {
                XElement x = this.GetElement(AhpUidXName);
                return ((AerodromeHeliportUidType)(x));
            }
            set {
                this.SetElement(AhpUidXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Type
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (AhpUid, codeType, noSeq)
        /// </para>
        /// </summary>
        public virtual codeTypeAddress codeType {
            get {
                XElement x = this.GetElement(codeTypeXName);
                return ((codeTypeAddress)(x));
            }
            set {
                this.SetElement(codeTypeXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Sequence number
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (AhpUid, codeType, noSeq)
        /// </para>
        /// </summary>
        public virtual noSeq noSeq {
            get {
                XElement x = this.GetElement(noSeqXName);
                return ((noSeq)(x));
            }
            set {
                this.SetElement(noSeqXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string mid {
            get {
                XAttribute x = this.Attribute(midXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(midXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<AerodromeHeliportAddressUidType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(AhpUidXName, typeof(AerodromeHeliportUidType));
            localElementDictionary.Add(codeTypeXName, typeof(codeTypeAddress));
            localElementDictionary.Add(noSeqXName, typeof(noSeq));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Aerodrome / Heliport - Co-location
    /// </para>
    /// <para>
    /// Regular expression: (AhcUid, codeType, txtDescr?, txtRmk?)
    /// </para>
    /// </summary>
    public partial class AerodromeHeliportCollocationType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName AhcUidXName = System.Xml.Linq.XName.Get("AhcUid", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName codeTypeXName = System.Xml.Linq.XName.Get("codeType", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName txtDescrXName = System.Xml.Linq.XName.Get("txtDescr", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName txtRmkXName = System.Xml.Linq.XName.Get("txtRmk", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName sourceXName = System.Xml.Linq.XName.Get("source", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("AerodromeHeliportCollocationType", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator AerodromeHeliportCollocationType(XElement xe) { return XTypedServices.ToXTypedElement<AerodromeHeliportCollocationType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static AerodromeHeliportCollocationType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(AhcUidXName), new NamedContentModelEntity(codeTypeXName), new NamedContentModelEntity(txtDescrXName), new NamedContentModelEntity(txtRmkXName));
        }
        
        /// <summary>
        /// <para>
        /// Aerodrome / Heliport - Co-location
        /// </para>
        /// <para>
        /// Regular expression: (AhcUid, codeType, txtDescr?, txtRmk?)
        /// </para>
        /// </summary>
        public AerodromeHeliportCollocationType() {
        }
        
        /// <summary>
        /// <para>
        /// a version of Aerodrome / Heliport - Co-location
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (AhcUid, codeType, txtDescr?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual AerodromeHeliportCollocationUidType AhcUid {
            get {
                XElement x = this.GetElement(AhcUidXName);
                return ((AerodromeHeliportCollocationUidType)(x));
            }
            set {
                this.SetElement(AhcUidXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Type
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (AhcUid, codeType, txtDescr?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual codeTypeAdHpClc codeType {
            get {
                XElement x = this.GetElement(codeTypeXName);
                return ((codeTypeAdHpClc)(x));
            }
            set {
                this.SetElement(codeTypeXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Description
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (AhcUid, codeType, txtDescr?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual txtDescr txtDescr {
            get {
                XElement x = this.GetElement(txtDescrXName);
                return ((txtDescr)(x));
            }
            set {
                this.SetElement(txtDescrXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Remark
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (AhcUid, codeType, txtDescr?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual txtRmk txtRmk {
            get {
                XElement x = this.GetElement(txtRmkXName);
                return ((txtRmk)(x));
            }
            set {
                this.SetElement(txtRmkXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string source {
            get {
                XAttribute x = this.Attribute(sourceXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(sourceXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<AerodromeHeliportCollocationType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(AhcUidXName, typeof(AerodromeHeliportCollocationUidType));
            localElementDictionary.Add(codeTypeXName, typeof(codeTypeAdHpClc));
            localElementDictionary.Add(txtDescrXName, typeof(txtDescr));
            localElementDictionary.Add(txtRmkXName, typeof(txtRmk));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Aerodrome / Heliport - Co-location - UID
    /// </para>
    /// <para>
    /// Regular expression: (AhpUid1, AhpUid2)
    /// </para>
    /// </summary>
    public partial class AerodromeHeliportCollocationUidType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName AhpUid1XName = System.Xml.Linq.XName.Get("AhpUid1", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName AhpUid2XName = System.Xml.Linq.XName.Get("AhpUid2", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName midXName = System.Xml.Linq.XName.Get("mid", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("AerodromeHeliportCollocationUidType", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator AerodromeHeliportCollocationUidType(XElement xe) { return XTypedServices.ToXTypedElement<AerodromeHeliportCollocationUidType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static AerodromeHeliportCollocationUidType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(AhpUid1XName), new NamedContentModelEntity(AhpUid2XName));
        }
        
        /// <summary>
        /// <para>
        /// Aerodrome / Heliport - Co-location - UID
        /// </para>
        /// <para>
        /// Regular expression: (AhpUid1, AhpUid2)
        /// </para>
        /// </summary>
        public AerodromeHeliportCollocationUidType() {
        }
        
        /// <summary>
        /// <para>
        /// Aerodrome / Heliport - Co-location is having as 1st Aerodrome / Heliport
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (AhpUid1, AhpUid2)
        /// </para>
        /// </summary>
        public virtual AerodromeHeliportUidType AhpUid1 {
            get {
                XElement x = this.GetElement(AhpUid1XName);
                return ((AerodromeHeliportUidType)(x));
            }
            set {
                this.SetElement(AhpUid1XName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Aerodrome / Heliport - Co-location is having as 2nd Aerodrome / Heliport
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (AhpUid1, AhpUid2)
        /// </para>
        /// </summary>
        public virtual AerodromeHeliportUidType AhpUid2 {
            get {
                XElement x = this.GetElement(AhpUid2XName);
                return ((AerodromeHeliportUidType)(x));
            }
            set {
                this.SetElement(AhpUid2XName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string mid {
            get {
                XAttribute x = this.Attribute(midXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(midXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<AerodromeHeliportCollocationUidType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(AhpUid1XName, typeof(AerodromeHeliportUidType));
            localElementDictionary.Add(AhpUid2XName, typeof(AerodromeHeliportUidType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Radio navigation aid at Aerodrome / Heliport
    /// </para>
    /// <para>
    /// Regular expression: (AnaUid, txtRmk?)
    /// </para>
    /// </summary>
    public partial class AerodromeHeliportNavaidType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName AnaUidXName = System.Xml.Linq.XName.Get("AnaUid", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName txtRmkXName = System.Xml.Linq.XName.Get("txtRmk", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName sourceXName = System.Xml.Linq.XName.Get("source", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("AerodromeHeliportNavaidType", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator AerodromeHeliportNavaidType(XElement xe) { return XTypedServices.ToXTypedElement<AerodromeHeliportNavaidType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static AerodromeHeliportNavaidType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(AnaUidXName), new NamedContentModelEntity(txtRmkXName));
        }
        
        /// <summary>
        /// <para>
        /// Radio navigation aid at Aerodrome / Heliport
        /// </para>
        /// <para>
        /// Regular expression: (AnaUid, txtRmk?)
        /// </para>
        /// </summary>
        public AerodromeHeliportNavaidType() {
        }
        
        /// <summary>
        /// <para>
        /// a version of Radio navigation aid at Aerodrome / Heliport
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (AnaUid, txtRmk?)
        /// </para>
        /// </summary>
        public virtual AerodromeHeliportNavaidUidType AnaUid {
            get {
                XElement x = this.GetElement(AnaUidXName);
                return ((AerodromeHeliportNavaidUidType)(x));
            }
            set {
                this.SetElement(AnaUidXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Remark
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (AnaUid, txtRmk?)
        /// </para>
        /// </summary>
        public virtual txtRmk txtRmk {
            get {
                XElement x = this.GetElement(txtRmkXName);
                return ((txtRmk)(x));
            }
            set {
                this.SetElement(txtRmkXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string source {
            get {
                XAttribute x = this.Attribute(sourceXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(sourceXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<AerodromeHeliportNavaidType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(AnaUidXName, typeof(AerodromeHeliportNavaidUidType));
            localElementDictionary.Add(txtRmkXName, typeof(txtRmk));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Radio navigation aid at Aerodrome / Heliport - UID
    /// </para>
    /// <para>
    /// Regular expression: (AhpUid, (TcnUid | VorUid | NdbUid | DmeUid | MkrUid))
    /// </para>
    /// </summary>
    public partial class AerodromeHeliportNavaidUidType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName AhpUidXName = System.Xml.Linq.XName.Get("AhpUid", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TcnUidXName = System.Xml.Linq.XName.Get("TcnUid", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName VorUidXName = System.Xml.Linq.XName.Get("VorUid", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName NdbUidXName = System.Xml.Linq.XName.Get("NdbUid", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName DmeUidXName = System.Xml.Linq.XName.Get("DmeUid", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName MkrUidXName = System.Xml.Linq.XName.Get("MkrUid", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName midXName = System.Xml.Linq.XName.Get("mid", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("AerodromeHeliportNavaidUidType", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator AerodromeHeliportNavaidUidType(XElement xe) { return XTypedServices.ToXTypedElement<AerodromeHeliportNavaidUidType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static AerodromeHeliportNavaidUidType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(AhpUidXName), new ChoiceContentModelEntity(new NamedContentModelEntity(TcnUidXName), new NamedContentModelEntity(VorUidXName), new NamedContentModelEntity(NdbUidXName), new NamedContentModelEntity(DmeUidXName), new NamedContentModelEntity(MkrUidXName)));
        }
        
        /// <summary>
        /// <para>
        /// Radio navigation aid at Aerodrome / Heliport - UID
        /// </para>
        /// <para>
        /// Regular expression: (AhpUid, (TcnUid | VorUid | NdbUid | DmeUid | MkrUid))
        /// </para>
        /// </summary>
        public AerodromeHeliportNavaidUidType() {
        }
        
        /// <summary>
        /// <para>
        /// Radio navigation aid at Aerodrome / Heliport is associated with Aerodrome / Heliport
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (AhpUid, (TcnUid | VorUid | NdbUid | DmeUid | MkrUid))
        /// </para>
        /// </summary>
        public virtual AerodromeHeliportUidType AhpUid {
            get {
                XElement x = this.GetElement(AhpUidXName);
                return ((AerodromeHeliportUidType)(x));
            }
            set {
                this.SetElement(AhpUidXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Radio navigation aid at Aerodrome / Heliport is also Tactical air navigation beacon [TACAN]
        /// </para>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (AhpUid, (TcnUid | VorUid | NdbUid | DmeUid | MkrUid))
        /// </para>
        /// </summary>
        public virtual TacanUidType TcnUid {
            get {
                XElement x = this.GetElement(TcnUidXName);
                return ((TacanUidType)(x));
            }
            set {
                this.SetElement(TcnUidXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Radio navigation aid at Aerodrome / Heliport is also VHF omnidirectional radio range beacon [VOR]
        /// </para>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (AhpUid, (TcnUid | VorUid | NdbUid | DmeUid | MkrUid))
        /// </para>
        /// </summary>
        public virtual VorUidType VorUid {
            get {
                XElement x = this.GetElement(VorUidXName);
                return ((VorUidType)(x));
            }
            set {
                this.SetElement(VorUidXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Radio navigation aid at Aerodrome / Heliport is also Non-directional radio beacon [NDB]
        /// </para>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (AhpUid, (TcnUid | VorUid | NdbUid | DmeUid | MkrUid))
        /// </para>
        /// </summary>
        public virtual NdbUidType NdbUid {
            get {
                XElement x = this.GetElement(NdbUidXName);
                return ((NdbUidType)(x));
            }
            set {
                this.SetElement(NdbUidXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Radio navigation aid at Aerodrome / Heliport is also Distance measuring equipment [DME]
        /// </para>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (AhpUid, (TcnUid | VorUid | NdbUid | DmeUid | MkrUid))
        /// </para>
        /// </summary>
        public virtual DmeUidType DmeUid {
            get {
                XElement x = this.GetElement(DmeUidXName);
                return ((DmeUidType)(x));
            }
            set {
                this.SetElement(DmeUidXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Radio navigation aid at Aerodrome / Heliport is also Marker [MKR]
        /// </para>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (AhpUid, (TcnUid | VorUid | NdbUid | DmeUid | MkrUid))
        /// </para>
        /// </summary>
        public virtual MkrUidType MkrUid {
            get {
                XElement x = this.GetElement(MkrUidXName);
                return ((MkrUidType)(x));
            }
            set {
                this.SetElement(MkrUidXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string mid {
            get {
                XAttribute x = this.Attribute(midXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(midXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<AerodromeHeliportNavaidUidType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(AhpUidXName, typeof(AerodromeHeliportUidType));
            localElementDictionary.Add(TcnUidXName, typeof(TacanUidType));
            localElementDictionary.Add(VorUidXName, typeof(VorUidType));
            localElementDictionary.Add(NdbUidXName, typeof(NdbUidType));
            localElementDictionary.Add(DmeUidXName, typeof(DmeUidType));
            localElementDictionary.Add(MkrUidXName, typeof(MkrUidType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Obstacle at Aerodrome / Heliport
    /// </para>
    /// <para>
    /// Regular expression: (AhoUid, txtRmk?)
    /// </para>
    /// </summary>
    public partial class AerodromeHeliportObstacleType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName AhoUidXName = System.Xml.Linq.XName.Get("AhoUid", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName txtRmkXName = System.Xml.Linq.XName.Get("txtRmk", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName sourceXName = System.Xml.Linq.XName.Get("source", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("AerodromeHeliportObstacleType", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator AerodromeHeliportObstacleType(XElement xe) { return XTypedServices.ToXTypedElement<AerodromeHeliportObstacleType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static AerodromeHeliportObstacleType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(AhoUidXName), new NamedContentModelEntity(txtRmkXName));
        }
        
        /// <summary>
        /// <para>
        /// Obstacle at Aerodrome / Heliport
        /// </para>
        /// <para>
        /// Regular expression: (AhoUid, txtRmk?)
        /// </para>
        /// </summary>
        public AerodromeHeliportObstacleType() {
        }
        
        /// <summary>
        /// <para>
        /// a version of Obstacle at Aerodrome / Heliport
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (AhoUid, txtRmk?)
        /// </para>
        /// </summary>
        public virtual AerodromeHeliportObstacleUidType AhoUid {
            get {
                XElement x = this.GetElement(AhoUidXName);
                return ((AerodromeHeliportObstacleUidType)(x));
            }
            set {
                this.SetElement(AhoUidXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Remark
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (AhoUid, txtRmk?)
        /// </para>
        /// </summary>
        public virtual txtRmk txtRmk {
            get {
                XElement x = this.GetElement(txtRmkXName);
                return ((txtRmk)(x));
            }
            set {
                this.SetElement(txtRmkXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string source {
            get {
                XAttribute x = this.Attribute(sourceXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(sourceXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<AerodromeHeliportObstacleType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(AhoUidXName, typeof(AerodromeHeliportObstacleUidType));
            localElementDictionary.Add(txtRmkXName, typeof(txtRmk));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Obstacle at Aerodrome / Heliport - UID
    /// </para>
    /// <para>
    /// Regular expression: (ObsUid, AhpUid)
    /// </para>
    /// </summary>
    public partial class AerodromeHeliportObstacleUidType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ObsUidXName = System.Xml.Linq.XName.Get("ObsUid", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName AhpUidXName = System.Xml.Linq.XName.Get("AhpUid", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName midXName = System.Xml.Linq.XName.Get("mid", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("AerodromeHeliportObstacleUidType", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator AerodromeHeliportObstacleUidType(XElement xe) { return XTypedServices.ToXTypedElement<AerodromeHeliportObstacleUidType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static AerodromeHeliportObstacleUidType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(ObsUidXName), new NamedContentModelEntity(AhpUidXName));
        }
        
        /// <summary>
        /// <para>
        /// Obstacle at Aerodrome / Heliport - UID
        /// </para>
        /// <para>
        /// Regular expression: (ObsUid, AhpUid)
        /// </para>
        /// </summary>
        public AerodromeHeliportObstacleUidType() {
        }
        
        /// <summary>
        /// <para>
        /// Obstacle at Aerodrome / Heliport is also Obstacle
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (ObsUid, AhpUid)
        /// </para>
        /// </summary>
        public virtual ObstacleUidType ObsUid {
            get {
                XElement x = this.GetElement(ObsUidXName);
                return ((ObstacleUidType)(x));
            }
            set {
                this.SetElement(ObsUidXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Obstacle at Aerodrome / Heliport is affecting Aerodrome / Heliport
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (ObsUid, AhpUid)
        /// </para>
        /// </summary>
        public virtual AerodromeHeliportUidType AhpUid {
            get {
                XElement x = this.GetElement(AhpUidXName);
                return ((AerodromeHeliportUidType)(x));
            }
            set {
                this.SetElement(AhpUidXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string mid {
            get {
                XAttribute x = this.Attribute(midXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(midXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<AerodromeHeliportObstacleUidType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(ObsUidXName, typeof(ObstacleUidType));
            localElementDictionary.Add(AhpUidXName, typeof(AerodromeHeliportUidType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Service provided at an aerodrome/heliport
    /// </para>
    /// <para>
    /// Regular expression: (SahUid, txtRmk?)
    /// </para>
    /// </summary>
    public partial class AerodromeHeliportServiceType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName SahUidXName = System.Xml.Linq.XName.Get("SahUid", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName txtRmkXName = System.Xml.Linq.XName.Get("txtRmk", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName sourceXName = System.Xml.Linq.XName.Get("source", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("AerodromeHeliportServiceType", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator AerodromeHeliportServiceType(XElement xe) { return XTypedServices.ToXTypedElement<AerodromeHeliportServiceType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static AerodromeHeliportServiceType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(SahUidXName), new NamedContentModelEntity(txtRmkXName));
        }
        
        /// <summary>
        /// <para>
        /// Service provided at an aerodrome/heliport
        /// </para>
        /// <para>
        /// Regular expression: (SahUid, txtRmk?)
        /// </para>
        /// </summary>
        public AerodromeHeliportServiceType() {
        }
        
        /// <summary>
        /// <para>
        /// a version of Service provided at an aerodrome/heliport
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (SahUid, txtRmk?)
        /// </para>
        /// </summary>
        public virtual AerodromeHeliportServiceUidType SahUid {
            get {
                XElement x = this.GetElement(SahUidXName);
                return ((AerodromeHeliportServiceUidType)(x));
            }
            set {
                this.SetElement(SahUidXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Remark
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (SahUid, txtRmk?)
        /// </para>
        /// </summary>
        public virtual txtRmk txtRmk {
            get {
                XElement x = this.GetElement(txtRmkXName);
                return ((txtRmk)(x));
            }
            set {
                this.SetElement(txtRmkXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string source {
            get {
                XAttribute x = this.Attribute(sourceXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(sourceXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<AerodromeHeliportServiceType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(SahUidXName, typeof(AerodromeHeliportServiceUidType));
            localElementDictionary.Add(txtRmkXName, typeof(txtRmk));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Service provided at an aerodrome/heliport - UID
    /// </para>
    /// <para>
    /// Regular expression: (AhpUid, SerUid)
    /// </para>
    /// </summary>
    public partial class AerodromeHeliportServiceUidType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName AhpUidXName = System.Xml.Linq.XName.Get("AhpUid", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName SerUidXName = System.Xml.Linq.XName.Get("SerUid", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName midXName = System.Xml.Linq.XName.Get("mid", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("AerodromeHeliportServiceUidType", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator AerodromeHeliportServiceUidType(XElement xe) { return XTypedServices.ToXTypedElement<AerodromeHeliportServiceUidType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static AerodromeHeliportServiceUidType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(AhpUidXName), new NamedContentModelEntity(SerUidXName));
        }
        
        /// <summary>
        /// <para>
        /// Service provided at an aerodrome/heliport - UID
        /// </para>
        /// <para>
        /// Regular expression: (AhpUid, SerUid)
        /// </para>
        /// </summary>
        public AerodromeHeliportServiceUidType() {
        }
        
        /// <summary>
        /// <para>
        /// Service provided at an aerodrome/heliport is furnished for Aerodrome / Heliport
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (AhpUid, SerUid)
        /// </para>
        /// </summary>
        public virtual AerodromeHeliportUidType AhpUid {
            get {
                XElement x = this.GetElement(AhpUidXName);
                return ((AerodromeHeliportUidType)(x));
            }
            set {
                this.SetElement(AhpUidXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Service provided at an aerodrome/heliport is also Service
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (AhpUid, SerUid)
        /// </para>
        /// </summary>
        public virtual ServiceUidType SerUid {
            get {
                XElement x = this.GetElement(SerUidXName);
                return ((ServiceUidType)(x));
            }
            set {
                this.SetElement(SerUidXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string mid {
            get {
                XAttribute x = this.Attribute(midXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(midXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<AerodromeHeliportServiceUidType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(AhpUidXName, typeof(AerodromeHeliportUidType));
            localElementDictionary.Add(SerUidXName, typeof(ServiceUidType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Aerodrome / Heliport
    /// </para>
    /// <para>
    /// Regular expression: (AhpUid, OrgUid, txtName, codeIcao?, codeIata?, codeGps?, codeType, codeTypeMilOps?, codeNationalTfc?, codeIntlTfc?, codeSked?, codeNonSked?, codePriv?, codeVfr?, codeIfr?, txtDescrRefPt?, geoLat, geoLong, codeDatum?, valGeoAccuracy?, uomGeoAccuracy?, valElev?, valElevAccuracy?, valGeoidUndulation?, uomDistVer?, valCrc?, txtVerDatum?, txtNameCitySer?, txtDescrSite?, valMagVar?, dateMagVar?, valMagVarChg?, valRefT?, uomRefT?, txtNameAdmin?, txtDescrAcl?, txtDescrSryPwr?, txtDescrWdi?, txtDescrLdi?, valTransitionAlt?, uomTransitionAlt?, Aht?, txtRmk?)
    /// </para>
    /// </summary>
    public partial class AerodromeHeliportType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName AhpUidXName = System.Xml.Linq.XName.Get("AhpUid", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName OrgUidXName = System.Xml.Linq.XName.Get("OrgUid", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName txtNameXName = System.Xml.Linq.XName.Get("txtName", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName codeIcaoXName = System.Xml.Linq.XName.Get("codeIcao", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName codeIataXName = System.Xml.Linq.XName.Get("codeIata", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName codeGpsXName = System.Xml.Linq.XName.Get("codeGps", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName codeTypeXName = System.Xml.Linq.XName.Get("codeType", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName codeTypeMilOpsXName = System.Xml.Linq.XName.Get("codeTypeMilOps", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName codeNationalTfcXName = System.Xml.Linq.XName.Get("codeNationalTfc", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName codeIntlTfcXName = System.Xml.Linq.XName.Get("codeIntlTfc", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName codeSkedXName = System.Xml.Linq.XName.Get("codeSked", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName codeNonSkedXName = System.Xml.Linq.XName.Get("codeNonSked", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName codePrivXName = System.Xml.Linq.XName.Get("codePriv", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName codeVfrXName = System.Xml.Linq.XName.Get("codeVfr", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName codeIfrXName = System.Xml.Linq.XName.Get("codeIfr", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName txtDescrRefPtXName = System.Xml.Linq.XName.Get("txtDescrRefPt", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName geoLatXName = System.Xml.Linq.XName.Get("geoLat", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName geoLongXName = System.Xml.Linq.XName.Get("geoLong", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName codeDatumXName = System.Xml.Linq.XName.Get("codeDatum", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName valGeoAccuracyXName = System.Xml.Linq.XName.Get("valGeoAccuracy", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName uomGeoAccuracyXName = System.Xml.Linq.XName.Get("uomGeoAccuracy", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName valElevXName = System.Xml.Linq.XName.Get("valElev", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName valElevAccuracyXName = System.Xml.Linq.XName.Get("valElevAccuracy", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName valGeoidUndulationXName = System.Xml.Linq.XName.Get("valGeoidUndulation", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName uomDistVerXName = System.Xml.Linq.XName.Get("uomDistVer", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName valCrcXName = System.Xml.Linq.XName.Get("valCrc", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName txtVerDatumXName = System.Xml.Linq.XName.Get("txtVerDatum", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName txtNameCitySerXName = System.Xml.Linq.XName.Get("txtNameCitySer", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName txtDescrSiteXName = System.Xml.Linq.XName.Get("txtDescrSite", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName valMagVarXName = System.Xml.Linq.XName.Get("valMagVar", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName dateMagVarXName = System.Xml.Linq.XName.Get("dateMagVar", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName valMagVarChgXName = System.Xml.Linq.XName.Get("valMagVarChg", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName valRefTXName = System.Xml.Linq.XName.Get("valRefT", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName uomRefTXName = System.Xml.Linq.XName.Get("uomRefT", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName txtNameAdminXName = System.Xml.Linq.XName.Get("txtNameAdmin", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName txtDescrAclXName = System.Xml.Linq.XName.Get("txtDescrAcl", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName txtDescrSryPwrXName = System.Xml.Linq.XName.Get("txtDescrSryPwr", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName txtDescrWdiXName = System.Xml.Linq.XName.Get("txtDescrWdi", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName txtDescrLdiXName = System.Xml.Linq.XName.Get("txtDescrLdi", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName valTransitionAltXName = System.Xml.Linq.XName.Get("valTransitionAlt", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName uomTransitionAltXName = System.Xml.Linq.XName.Get("uomTransitionAlt", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName AhtXName = System.Xml.Linq.XName.Get("Aht", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName txtRmkXName = System.Xml.Linq.XName.Get("txtRmk", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName sourceXName = System.Xml.Linq.XName.Get("source", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("AerodromeHeliportType", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator AerodromeHeliportType(XElement xe) { return XTypedServices.ToXTypedElement<AerodromeHeliportType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static AerodromeHeliportType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(AhpUidXName), new NamedContentModelEntity(OrgUidXName), new NamedContentModelEntity(txtNameXName), new NamedContentModelEntity(codeIcaoXName), new NamedContentModelEntity(codeIataXName), new NamedContentModelEntity(codeGpsXName), new NamedContentModelEntity(codeTypeXName), new NamedContentModelEntity(codeTypeMilOpsXName), new NamedContentModelEntity(codeNationalTfcXName), new NamedContentModelEntity(codeIntlTfcXName), new NamedContentModelEntity(codeSkedXName), new NamedContentModelEntity(codeNonSkedXName), new NamedContentModelEntity(codePrivXName), new NamedContentModelEntity(codeVfrXName), new NamedContentModelEntity(codeIfrXName), new NamedContentModelEntity(txtDescrRefPtXName), new NamedContentModelEntity(geoLatXName), new NamedContentModelEntity(geoLongXName), new NamedContentModelEntity(codeDatumXName), new NamedContentModelEntity(valGeoAccuracyXName), new NamedContentModelEntity(uomGeoAccuracyXName), new NamedContentModelEntity(valElevXName), new NamedContentModelEntity(valElevAccuracyXName), new NamedContentModelEntity(valGeoidUndulationXName), new NamedContentModelEntity(uomDistVerXName), new NamedContentModelEntity(valCrcXName), new NamedContentModelEntity(txtVerDatumXName), new NamedContentModelEntity(txtNameCitySerXName), new NamedContentModelEntity(txtDescrSiteXName), new NamedContentModelEntity(valMagVarXName), new NamedContentModelEntity(dateMagVarXName), new NamedContentModelEntity(valMagVarChgXName), new NamedContentModelEntity(valRefTXName), new NamedContentModelEntity(uomRefTXName), new NamedContentModelEntity(txtNameAdminXName), new NamedContentModelEntity(txtDescrAclXName), new NamedContentModelEntity(txtDescrSryPwrXName), new NamedContentModelEntity(txtDescrWdiXName), new NamedContentModelEntity(txtDescrLdiXName), new NamedContentModelEntity(valTransitionAltXName), new NamedContentModelEntity(uomTransitionAltXName), new NamedContentModelEntity(AhtXName), new NamedContentModelEntity(txtRmkXName));
        }
        
        /// <summary>
        /// <para>
        /// Aerodrome / Heliport
        /// </para>
        /// <para>
        /// Regular expression: (AhpUid, OrgUid, txtName, codeIcao?, codeIata?, codeGps?, codeType, codeTypeMilOps?, codeNationalTfc?, codeIntlTfc?, codeSked?, codeNonSked?, codePriv?, codeVfr?, codeIfr?, txtDescrRefPt?, geoLat, geoLong, codeDatum?, valGeoAccuracy?, uomGeoAccuracy?, valElev?, valElevAccuracy?, valGeoidUndulation?, uomDistVer?, valCrc?, txtVerDatum?, txtNameCitySer?, txtDescrSite?, valMagVar?, dateMagVar?, valMagVarChg?, valRefT?, uomRefT?, txtNameAdmin?, txtDescrAcl?, txtDescrSryPwr?, txtDescrWdi?, txtDescrLdi?, valTransitionAlt?, uomTransitionAlt?, Aht?, txtRmk?)
        /// </para>
        /// </summary>
        public AerodromeHeliportType() {
        }
        
        /// <summary>
        /// <para>
        /// a version of Aerodrome / Heliport
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (AhpUid, OrgUid, txtName, codeIcao?, codeIata?, codeGps?, codeType, codeTypeMilOps?, codeNationalTfc?, codeIntlTfc?, codeSked?, codeNonSked?, codePriv?, codeVfr?, codeIfr?, txtDescrRefPt?, geoLat, geoLong, codeDatum?, valGeoAccuracy?, uomGeoAccuracy?, valElev?, valElevAccuracy?, valGeoidUndulation?, uomDistVer?, valCrc?, txtVerDatum?, txtNameCitySer?, txtDescrSite?, valMagVar?, dateMagVar?, valMagVarChg?, valRefT?, uomRefT?, txtNameAdmin?, txtDescrAcl?, txtDescrSryPwr?, txtDescrWdi?, txtDescrLdi?, valTransitionAlt?, uomTransitionAlt?, Aht?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual AerodromeHeliportUidType AhpUid {
            get {
                XElement x = this.GetElement(AhpUidXName);
                return ((AerodromeHeliportUidType)(x));
            }
            set {
                this.SetElement(AhpUidXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Aerodrome / Heliport is under the responsibility of Organisaton or authority
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (AhpUid, OrgUid, txtName, codeIcao?, codeIata?, codeGps?, codeType, codeTypeMilOps?, codeNationalTfc?, codeIntlTfc?, codeSked?, codeNonSked?, codePriv?, codeVfr?, codeIfr?, txtDescrRefPt?, geoLat, geoLong, codeDatum?, valGeoAccuracy?, uomGeoAccuracy?, valElev?, valElevAccuracy?, valGeoidUndulation?, uomDistVer?, valCrc?, txtVerDatum?, txtNameCitySer?, txtDescrSite?, valMagVar?, dateMagVar?, valMagVarChg?, valRefT?, uomRefT?, txtNameAdmin?, txtDescrAcl?, txtDescrSryPwr?, txtDescrWdi?, txtDescrLdi?, valTransitionAlt?, uomTransitionAlt?, Aht?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual OrganisationAuthorityUidType OrgUid {
            get {
                XElement x = this.GetElement(OrgUidXName);
                return ((OrganisationAuthorityUidType)(x));
            }
            set {
                this.SetElement(OrgUidXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Name
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (AhpUid, OrgUid, txtName, codeIcao?, codeIata?, codeGps?, codeType, codeTypeMilOps?, codeNationalTfc?, codeIntlTfc?, codeSked?, codeNonSked?, codePriv?, codeVfr?, codeIfr?, txtDescrRefPt?, geoLat, geoLong, codeDatum?, valGeoAccuracy?, uomGeoAccuracy?, valElev?, valElevAccuracy?, valGeoidUndulation?, uomDistVer?, valCrc?, txtVerDatum?, txtNameCitySer?, txtDescrSite?, valMagVar?, dateMagVar?, valMagVarChg?, valRefT?, uomRefT?, txtNameAdmin?, txtDescrAcl?, txtDescrSryPwr?, txtDescrWdi?, txtDescrLdi?, valTransitionAlt?, uomTransitionAlt?, Aht?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual txtName txtName {
            get {
                XElement x = this.GetElement(txtNameXName);
                return ((txtName)(x));
            }
            set {
                this.SetElement(txtNameXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// ICAO Code
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (AhpUid, OrgUid, txtName, codeIcao?, codeIata?, codeGps?, codeType, codeTypeMilOps?, codeNationalTfc?, codeIntlTfc?, codeSked?, codeNonSked?, codePriv?, codeVfr?, codeIfr?, txtDescrRefPt?, geoLat, geoLong, codeDatum?, valGeoAccuracy?, uomGeoAccuracy?, valElev?, valElevAccuracy?, valGeoidUndulation?, uomDistVer?, valCrc?, txtVerDatum?, txtNameCitySer?, txtDescrSite?, valMagVar?, dateMagVar?, valMagVarChg?, valRefT?, uomRefT?, txtNameAdmin?, txtDescrAcl?, txtDescrSryPwr?, txtDescrWdi?, txtDescrLdi?, valTransitionAlt?, uomTransitionAlt?, Aht?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual codeLocIndIcao codeIcao {
            get {
                XElement x = this.GetElement(codeIcaoXName);
                return ((codeLocIndIcao)(x));
            }
            set {
                this.SetElement(codeIcaoXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// IATA Code
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (AhpUid, OrgUid, txtName, codeIcao?, codeIata?, codeGps?, codeType, codeTypeMilOps?, codeNationalTfc?, codeIntlTfc?, codeSked?, codeNonSked?, codePriv?, codeVfr?, codeIfr?, txtDescrRefPt?, geoLat, geoLong, codeDatum?, valGeoAccuracy?, uomGeoAccuracy?, valElev?, valElevAccuracy?, valGeoidUndulation?, uomDistVer?, valCrc?, txtVerDatum?, txtNameCitySer?, txtDescrSite?, valMagVar?, dateMagVar?, valMagVarChg?, valRefT?, uomRefT?, txtNameAdmin?, txtDescrAcl?, txtDescrSryPwr?, txtDescrWdi?, txtDescrLdi?, valTransitionAlt?, uomTransitionAlt?, Aht?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual codeLocIndIata codeIata {
            get {
                XElement x = this.GetElement(codeIataXName);
                return ((codeLocIndIata)(x));
            }
            set {
                this.SetElement(codeIataXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// GPS Code
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (AhpUid, OrgUid, txtName, codeIcao?, codeIata?, codeGps?, codeType, codeTypeMilOps?, codeNationalTfc?, codeIntlTfc?, codeSked?, codeNonSked?, codePriv?, codeVfr?, codeIfr?, txtDescrRefPt?, geoLat, geoLong, codeDatum?, valGeoAccuracy?, uomGeoAccuracy?, valElev?, valElevAccuracy?, valGeoidUndulation?, uomDistVer?, valCrc?, txtVerDatum?, txtNameCitySer?, txtDescrSite?, valMagVar?, dateMagVar?, valMagVarChg?, valRefT?, uomRefT?, txtNameAdmin?, txtDescrAcl?, txtDescrSryPwr?, txtDescrWdi?, txtDescrLdi?, valTransitionAlt?, uomTransitionAlt?, Aht?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual codeLocIndGps codeGps {
            get {
                XElement x = this.GetElement(codeGpsXName);
                return ((codeLocIndGps)(x));
            }
            set {
                this.SetElement(codeGpsXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Type
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (AhpUid, OrgUid, txtName, codeIcao?, codeIata?, codeGps?, codeType, codeTypeMilOps?, codeNationalTfc?, codeIntlTfc?, codeSked?, codeNonSked?, codePriv?, codeVfr?, codeIfr?, txtDescrRefPt?, geoLat, geoLong, codeDatum?, valGeoAccuracy?, uomGeoAccuracy?, valElev?, valElevAccuracy?, valGeoidUndulation?, uomDistVer?, valCrc?, txtVerDatum?, txtNameCitySer?, txtDescrSite?, valMagVar?, dateMagVar?, valMagVarChg?, valRefT?, uomRefT?, txtNameAdmin?, txtDescrAcl?, txtDescrSryPwr?, txtDescrWdi?, txtDescrLdi?, valTransitionAlt?, uomTransitionAlt?, Aht?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual codeTypeAdHp codeType {
            get {
                XElement x = this.GetElement(codeTypeXName);
                return ((codeTypeAdHp)(x));
            }
            set {
                this.SetElement(codeTypeXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// [Deprecated] Operation code
        /// </para>
        /// <para>
        /// DEPRECATED-4.0
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (AhpUid, OrgUid, txtName, codeIcao?, codeIata?, codeGps?, codeType, codeTypeMilOps?, codeNationalTfc?, codeIntlTfc?, codeSked?, codeNonSked?, codePriv?, codeVfr?, codeIfr?, txtDescrRefPt?, geoLat, geoLong, codeDatum?, valGeoAccuracy?, uomGeoAccuracy?, valElev?, valElevAccuracy?, valGeoidUndulation?, uomDistVer?, valCrc?, txtVerDatum?, txtNameCitySer?, txtDescrSite?, valMagVar?, dateMagVar?, valMagVarChg?, valRefT?, uomRefT?, txtNameAdmin?, txtDescrAcl?, txtDescrSryPwr?, txtDescrWdi?, txtDescrLdi?, valTransitionAlt?, uomTransitionAlt?, Aht?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual codeTypeMilOps codeTypeMilOps {
            get {
                XElement x = this.GetElement(codeTypeMilOpsXName);
                return ((codeTypeMilOps)(x));
            }
            set {
                this.SetElement(codeTypeMilOpsXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// [Deprecated] National traffic
        /// </para>
        /// <para>
        /// DEPRECATED-4.0
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (AhpUid, OrgUid, txtName, codeIcao?, codeIata?, codeGps?, codeType, codeTypeMilOps?, codeNationalTfc?, codeIntlTfc?, codeSked?, codeNonSked?, codePriv?, codeVfr?, codeIfr?, txtDescrRefPt?, geoLat, geoLong, codeDatum?, valGeoAccuracy?, uomGeoAccuracy?, valElev?, valElevAccuracy?, valGeoidUndulation?, uomDistVer?, valCrc?, txtVerDatum?, txtNameCitySer?, txtDescrSite?, valMagVar?, dateMagVar?, valMagVarChg?, valRefT?, uomRefT?, txtNameAdmin?, txtDescrAcl?, txtDescrSryPwr?, txtDescrWdi?, txtDescrLdi?, valTransitionAlt?, uomTransitionAlt?, Aht?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual codeYesNo codeNationalTfc {
            get {
                XElement x = this.GetElement(codeNationalTfcXName);
                return ((codeYesNo)(x));
            }
            set {
                this.SetElement(codeNationalTfcXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// [Deprecated] International traffic
        /// </para>
        /// <para>
        /// DEPRECATED-4.0
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (AhpUid, OrgUid, txtName, codeIcao?, codeIata?, codeGps?, codeType, codeTypeMilOps?, codeNationalTfc?, codeIntlTfc?, codeSked?, codeNonSked?, codePriv?, codeVfr?, codeIfr?, txtDescrRefPt?, geoLat, geoLong, codeDatum?, valGeoAccuracy?, uomGeoAccuracy?, valElev?, valElevAccuracy?, valGeoidUndulation?, uomDistVer?, valCrc?, txtVerDatum?, txtNameCitySer?, txtDescrSite?, valMagVar?, dateMagVar?, valMagVarChg?, valRefT?, uomRefT?, txtNameAdmin?, txtDescrAcl?, txtDescrSryPwr?, txtDescrWdi?, txtDescrLdi?, valTransitionAlt?, uomTransitionAlt?, Aht?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual codeYesNo codeIntlTfc {
            get {
                XElement x = this.GetElement(codeIntlTfcXName);
                return ((codeYesNo)(x));
            }
            set {
                this.SetElement(codeIntlTfcXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// [Deprecated] Scheduled flight
        /// </para>
        /// <para>
        /// DEPRECATED-4.0
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (AhpUid, OrgUid, txtName, codeIcao?, codeIata?, codeGps?, codeType, codeTypeMilOps?, codeNationalTfc?, codeIntlTfc?, codeSked?, codeNonSked?, codePriv?, codeVfr?, codeIfr?, txtDescrRefPt?, geoLat, geoLong, codeDatum?, valGeoAccuracy?, uomGeoAccuracy?, valElev?, valElevAccuracy?, valGeoidUndulation?, uomDistVer?, valCrc?, txtVerDatum?, txtNameCitySer?, txtDescrSite?, valMagVar?, dateMagVar?, valMagVarChg?, valRefT?, uomRefT?, txtNameAdmin?, txtDescrAcl?, txtDescrSryPwr?, txtDescrWdi?, txtDescrLdi?, valTransitionAlt?, uomTransitionAlt?, Aht?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual codeYesNo codeSked {
            get {
                XElement x = this.GetElement(codeSkedXName);
                return ((codeYesNo)(x));
            }
            set {
                this.SetElement(codeSkedXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// [Deprecated] Non scheduled flight
        /// </para>
        /// <para>
        /// DEPRECATED-4.0
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (AhpUid, OrgUid, txtName, codeIcao?, codeIata?, codeGps?, codeType, codeTypeMilOps?, codeNationalTfc?, codeIntlTfc?, codeSked?, codeNonSked?, codePriv?, codeVfr?, codeIfr?, txtDescrRefPt?, geoLat, geoLong, codeDatum?, valGeoAccuracy?, uomGeoAccuracy?, valElev?, valElevAccuracy?, valGeoidUndulation?, uomDistVer?, valCrc?, txtVerDatum?, txtNameCitySer?, txtDescrSite?, valMagVar?, dateMagVar?, valMagVarChg?, valRefT?, uomRefT?, txtNameAdmin?, txtDescrAcl?, txtDescrSryPwr?, txtDescrWdi?, txtDescrLdi?, valTransitionAlt?, uomTransitionAlt?, Aht?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual codeYesNo codeNonSked {
            get {
                XElement x = this.GetElement(codeNonSkedXName);
                return ((codeYesNo)(x));
            }
            set {
                this.SetElement(codeNonSkedXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// [Deprecated] Private flight
        /// </para>
        /// <para>
        /// DEPRECATED-4.0
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (AhpUid, OrgUid, txtName, codeIcao?, codeIata?, codeGps?, codeType, codeTypeMilOps?, codeNationalTfc?, codeIntlTfc?, codeSked?, codeNonSked?, codePriv?, codeVfr?, codeIfr?, txtDescrRefPt?, geoLat, geoLong, codeDatum?, valGeoAccuracy?, uomGeoAccuracy?, valElev?, valElevAccuracy?, valGeoidUndulation?, uomDistVer?, valCrc?, txtVerDatum?, txtNameCitySer?, txtDescrSite?, valMagVar?, dateMagVar?, valMagVarChg?, valRefT?, uomRefT?, txtNameAdmin?, txtDescrAcl?, txtDescrSryPwr?, txtDescrWdi?, txtDescrLdi?, valTransitionAlt?, uomTransitionAlt?, Aht?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual codeYesNo codePriv {
            get {
                XElement x = this.GetElement(codePrivXName);
                return ((codeYesNo)(x));
            }
            set {
                this.SetElement(codePrivXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// [Deprecated] Observe VFR
        /// </para>
        /// <para>
        /// DEPRECATED-4.0
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (AhpUid, OrgUid, txtName, codeIcao?, codeIata?, codeGps?, codeType, codeTypeMilOps?, codeNationalTfc?, codeIntlTfc?, codeSked?, codeNonSked?, codePriv?, codeVfr?, codeIfr?, txtDescrRefPt?, geoLat, geoLong, codeDatum?, valGeoAccuracy?, uomGeoAccuracy?, valElev?, valElevAccuracy?, valGeoidUndulation?, uomDistVer?, valCrc?, txtVerDatum?, txtNameCitySer?, txtDescrSite?, valMagVar?, dateMagVar?, valMagVarChg?, valRefT?, uomRefT?, txtNameAdmin?, txtDescrAcl?, txtDescrSryPwr?, txtDescrWdi?, txtDescrLdi?, valTransitionAlt?, uomTransitionAlt?, Aht?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual codeYesNo codeVfr {
            get {
                XElement x = this.GetElement(codeVfrXName);
                return ((codeYesNo)(x));
            }
            set {
                this.SetElement(codeVfrXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// [Deprecated] Observe IFR
        /// </para>
        /// <para>
        /// DEPRECATED-4.0
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (AhpUid, OrgUid, txtName, codeIcao?, codeIata?, codeGps?, codeType, codeTypeMilOps?, codeNationalTfc?, codeIntlTfc?, codeSked?, codeNonSked?, codePriv?, codeVfr?, codeIfr?, txtDescrRefPt?, geoLat, geoLong, codeDatum?, valGeoAccuracy?, uomGeoAccuracy?, valElev?, valElevAccuracy?, valGeoidUndulation?, uomDistVer?, valCrc?, txtVerDatum?, txtNameCitySer?, txtDescrSite?, valMagVar?, dateMagVar?, valMagVarChg?, valRefT?, uomRefT?, txtNameAdmin?, txtDescrAcl?, txtDescrSryPwr?, txtDescrWdi?, txtDescrLdi?, valTransitionAlt?, uomTransitionAlt?, Aht?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual codeYesNo codeIfr {
            get {
                XElement x = this.GetElement(codeIfrXName);
                return ((codeYesNo)(x));
            }
            set {
                this.SetElement(codeIfrXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Reference point description
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (AhpUid, OrgUid, txtName, codeIcao?, codeIata?, codeGps?, codeType, codeTypeMilOps?, codeNationalTfc?, codeIntlTfc?, codeSked?, codeNonSked?, codePriv?, codeVfr?, codeIfr?, txtDescrRefPt?, geoLat, geoLong, codeDatum?, valGeoAccuracy?, uomGeoAccuracy?, valElev?, valElevAccuracy?, valGeoidUndulation?, uomDistVer?, valCrc?, txtVerDatum?, txtNameCitySer?, txtDescrSite?, valMagVar?, dateMagVar?, valMagVarChg?, valRefT?, uomRefT?, txtNameAdmin?, txtDescrAcl?, txtDescrSryPwr?, txtDescrWdi?, txtDescrLdi?, valTransitionAlt?, uomTransitionAlt?, Aht?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual txtDescr txtDescrRefPt {
            get {
                XElement x = this.GetElement(txtDescrRefPtXName);
                return ((txtDescr)(x));
            }
            set {
                this.SetElement(txtDescrRefPtXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Latitude
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (AhpUid, OrgUid, txtName, codeIcao?, codeIata?, codeGps?, codeType, codeTypeMilOps?, codeNationalTfc?, codeIntlTfc?, codeSked?, codeNonSked?, codePriv?, codeVfr?, codeIfr?, txtDescrRefPt?, geoLat, geoLong, codeDatum?, valGeoAccuracy?, uomGeoAccuracy?, valElev?, valElevAccuracy?, valGeoidUndulation?, uomDistVer?, valCrc?, txtVerDatum?, txtNameCitySer?, txtDescrSite?, valMagVar?, dateMagVar?, valMagVarChg?, valRefT?, uomRefT?, txtNameAdmin?, txtDescrAcl?, txtDescrSryPwr?, txtDescrWdi?, txtDescrLdi?, valTransitionAlt?, uomTransitionAlt?, Aht?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual geoLat geoLat {
            get {
                XElement x = this.GetElement(geoLatXName);
                return ((geoLat)(x));
            }
            set {
                this.SetElement(geoLatXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Longitude
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (AhpUid, OrgUid, txtName, codeIcao?, codeIata?, codeGps?, codeType, codeTypeMilOps?, codeNationalTfc?, codeIntlTfc?, codeSked?, codeNonSked?, codePriv?, codeVfr?, codeIfr?, txtDescrRefPt?, geoLat, geoLong, codeDatum?, valGeoAccuracy?, uomGeoAccuracy?, valElev?, valElevAccuracy?, valGeoidUndulation?, uomDistVer?, valCrc?, txtVerDatum?, txtNameCitySer?, txtDescrSite?, valMagVar?, dateMagVar?, valMagVarChg?, valRefT?, uomRefT?, txtNameAdmin?, txtDescrAcl?, txtDescrSryPwr?, txtDescrWdi?, txtDescrLdi?, valTransitionAlt?, uomTransitionAlt?, Aht?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual geoLong geoLong {
            get {
                XElement x = this.GetElement(geoLongXName);
                return ((geoLong)(x));
            }
            set {
                this.SetElement(geoLongXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Datum
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (AhpUid, OrgUid, txtName, codeIcao?, codeIata?, codeGps?, codeType, codeTypeMilOps?, codeNationalTfc?, codeIntlTfc?, codeSked?, codeNonSked?, codePriv?, codeVfr?, codeIfr?, txtDescrRefPt?, geoLat, geoLong, codeDatum?, valGeoAccuracy?, uomGeoAccuracy?, valElev?, valElevAccuracy?, valGeoidUndulation?, uomDistVer?, valCrc?, txtVerDatum?, txtNameCitySer?, txtDescrSite?, valMagVar?, dateMagVar?, valMagVarChg?, valRefT?, uomRefT?, txtNameAdmin?, txtDescrAcl?, txtDescrSryPwr?, txtDescrWdi?, txtDescrLdi?, valTransitionAlt?, uomTransitionAlt?, Aht?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual codeDatum codeDatum {
            get {
                XElement x = this.GetElement(codeDatumXName);
                return ((codeDatum)(x));
            }
            set {
                this.SetElement(codeDatumXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Geographical accuracy
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (AhpUid, OrgUid, txtName, codeIcao?, codeIata?, codeGps?, codeType, codeTypeMilOps?, codeNationalTfc?, codeIntlTfc?, codeSked?, codeNonSked?, codePriv?, codeVfr?, codeIfr?, txtDescrRefPt?, geoLat, geoLong, codeDatum?, valGeoAccuracy?, uomGeoAccuracy?, valElev?, valElevAccuracy?, valGeoidUndulation?, uomDistVer?, valCrc?, txtVerDatum?, txtNameCitySer?, txtDescrSite?, valMagVar?, dateMagVar?, valMagVarChg?, valRefT?, uomRefT?, txtNameAdmin?, txtDescrAcl?, txtDescrSryPwr?, txtDescrWdi?, txtDescrLdi?, valTransitionAlt?, uomTransitionAlt?, Aht?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual valDistHorz valGeoAccuracy {
            get {
                XElement x = this.GetElement(valGeoAccuracyXName);
                return ((valDistHorz)(x));
            }
            set {
                this.SetElement(valGeoAccuracyXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Unit of measurement [geographical accuracy]
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (AhpUid, OrgUid, txtName, codeIcao?, codeIata?, codeGps?, codeType, codeTypeMilOps?, codeNationalTfc?, codeIntlTfc?, codeSked?, codeNonSked?, codePriv?, codeVfr?, codeIfr?, txtDescrRefPt?, geoLat, geoLong, codeDatum?, valGeoAccuracy?, uomGeoAccuracy?, valElev?, valElevAccuracy?, valGeoidUndulation?, uomDistVer?, valCrc?, txtVerDatum?, txtNameCitySer?, txtDescrSite?, valMagVar?, dateMagVar?, valMagVarChg?, valRefT?, uomRefT?, txtNameAdmin?, txtDescrAcl?, txtDescrSryPwr?, txtDescrWdi?, txtDescrLdi?, valTransitionAlt?, uomTransitionAlt?, Aht?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual uomDistHorz uomGeoAccuracy {
            get {
                XElement x = this.GetElement(uomGeoAccuracyXName);
                return ((uomDistHorz)(x));
            }
            set {
                this.SetElement(uomGeoAccuracyXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Elevation
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (AhpUid, OrgUid, txtName, codeIcao?, codeIata?, codeGps?, codeType, codeTypeMilOps?, codeNationalTfc?, codeIntlTfc?, codeSked?, codeNonSked?, codePriv?, codeVfr?, codeIfr?, txtDescrRefPt?, geoLat, geoLong, codeDatum?, valGeoAccuracy?, uomGeoAccuracy?, valElev?, valElevAccuracy?, valGeoidUndulation?, uomDistVer?, valCrc?, txtVerDatum?, txtNameCitySer?, txtDescrSite?, valMagVar?, dateMagVar?, valMagVarChg?, valRefT?, uomRefT?, txtNameAdmin?, txtDescrAcl?, txtDescrSryPwr?, txtDescrWdi?, txtDescrLdi?, valTransitionAlt?, uomTransitionAlt?, Aht?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual valDistVer valElev {
            get {
                XElement x = this.GetElement(valElevXName);
                return ((valDistVer)(x));
            }
            set {
                this.SetElement(valElevXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Elevation accuracy
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (AhpUid, OrgUid, txtName, codeIcao?, codeIata?, codeGps?, codeType, codeTypeMilOps?, codeNationalTfc?, codeIntlTfc?, codeSked?, codeNonSked?, codePriv?, codeVfr?, codeIfr?, txtDescrRefPt?, geoLat, geoLong, codeDatum?, valGeoAccuracy?, uomGeoAccuracy?, valElev?, valElevAccuracy?, valGeoidUndulation?, uomDistVer?, valCrc?, txtVerDatum?, txtNameCitySer?, txtDescrSite?, valMagVar?, dateMagVar?, valMagVarChg?, valRefT?, uomRefT?, txtNameAdmin?, txtDescrAcl?, txtDescrSryPwr?, txtDescrWdi?, txtDescrLdi?, valTransitionAlt?, uomTransitionAlt?, Aht?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual valDistVer valElevAccuracy {
            get {
                XElement x = this.GetElement(valElevAccuracyXName);
                return ((valDistVer)(x));
            }
            set {
                this.SetElement(valElevAccuracyXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Geoid undulation
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (AhpUid, OrgUid, txtName, codeIcao?, codeIata?, codeGps?, codeType, codeTypeMilOps?, codeNationalTfc?, codeIntlTfc?, codeSked?, codeNonSked?, codePriv?, codeVfr?, codeIfr?, txtDescrRefPt?, geoLat, geoLong, codeDatum?, valGeoAccuracy?, uomGeoAccuracy?, valElev?, valElevAccuracy?, valGeoidUndulation?, uomDistVer?, valCrc?, txtVerDatum?, txtNameCitySer?, txtDescrSite?, valMagVar?, dateMagVar?, valMagVarChg?, valRefT?, uomRefT?, txtNameAdmin?, txtDescrAcl?, txtDescrSryPwr?, txtDescrWdi?, txtDescrLdi?, valTransitionAlt?, uomTransitionAlt?, Aht?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual valDistVer valGeoidUndulation {
            get {
                XElement x = this.GetElement(valGeoidUndulationXName);
                return ((valDistVer)(x));
            }
            set {
                this.SetElement(valGeoidUndulationXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Unit of measurement [vertical distance]
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (AhpUid, OrgUid, txtName, codeIcao?, codeIata?, codeGps?, codeType, codeTypeMilOps?, codeNationalTfc?, codeIntlTfc?, codeSked?, codeNonSked?, codePriv?, codeVfr?, codeIfr?, txtDescrRefPt?, geoLat, geoLong, codeDatum?, valGeoAccuracy?, uomGeoAccuracy?, valElev?, valElevAccuracy?, valGeoidUndulation?, uomDistVer?, valCrc?, txtVerDatum?, txtNameCitySer?, txtDescrSite?, valMagVar?, dateMagVar?, valMagVarChg?, valRefT?, uomRefT?, txtNameAdmin?, txtDescrAcl?, txtDescrSryPwr?, txtDescrWdi?, txtDescrLdi?, valTransitionAlt?, uomTransitionAlt?, Aht?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual uomElev uomDistVer {
            get {
                XElement x = this.GetElement(uomDistVerXName);
                return ((uomElev)(x));
            }
            set {
                this.SetElement(uomDistVerXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Cyclic redundancy check
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (AhpUid, OrgUid, txtName, codeIcao?, codeIata?, codeGps?, codeType, codeTypeMilOps?, codeNationalTfc?, codeIntlTfc?, codeSked?, codeNonSked?, codePriv?, codeVfr?, codeIfr?, txtDescrRefPt?, geoLat, geoLong, codeDatum?, valGeoAccuracy?, uomGeoAccuracy?, valElev?, valElevAccuracy?, valGeoidUndulation?, uomDistVer?, valCrc?, txtVerDatum?, txtNameCitySer?, txtDescrSite?, valMagVar?, dateMagVar?, valMagVarChg?, valRefT?, uomRefT?, txtNameAdmin?, txtDescrAcl?, txtDescrSryPwr?, txtDescrWdi?, txtDescrLdi?, valTransitionAlt?, uomTransitionAlt?, Aht?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual valHex valCrc {
            get {
                XElement x = this.GetElement(valCrcXName);
                return ((valHex)(x));
            }
            set {
                this.SetElement(valCrcXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Vertical Datum
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (AhpUid, OrgUid, txtName, codeIcao?, codeIata?, codeGps?, codeType, codeTypeMilOps?, codeNationalTfc?, codeIntlTfc?, codeSked?, codeNonSked?, codePriv?, codeVfr?, codeIfr?, txtDescrRefPt?, geoLat, geoLong, codeDatum?, valGeoAccuracy?, uomGeoAccuracy?, valElev?, valElevAccuracy?, valGeoidUndulation?, uomDistVer?, valCrc?, txtVerDatum?, txtNameCitySer?, txtDescrSite?, valMagVar?, dateMagVar?, valMagVarChg?, valRefT?, uomRefT?, txtNameAdmin?, txtDescrAcl?, txtDescrSryPwr?, txtDescrWdi?, txtDescrLdi?, valTransitionAlt?, uomTransitionAlt?, Aht?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual txtDescr txtVerDatum {
            get {
                XElement x = this.GetElement(txtVerDatumXName);
                return ((txtDescr)(x));
            }
            set {
                this.SetElement(txtVerDatumXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Served city
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (AhpUid, OrgUid, txtName, codeIcao?, codeIata?, codeGps?, codeType, codeTypeMilOps?, codeNationalTfc?, codeIntlTfc?, codeSked?, codeNonSked?, codePriv?, codeVfr?, codeIfr?, txtDescrRefPt?, geoLat, geoLong, codeDatum?, valGeoAccuracy?, uomGeoAccuracy?, valElev?, valElevAccuracy?, valGeoidUndulation?, uomDistVer?, valCrc?, txtVerDatum?, txtNameCitySer?, txtDescrSite?, valMagVar?, dateMagVar?, valMagVarChg?, valRefT?, uomRefT?, txtNameAdmin?, txtDescrAcl?, txtDescrSryPwr?, txtDescrWdi?, txtDescrLdi?, valTransitionAlt?, uomTransitionAlt?, Aht?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual txtName txtNameCitySer {
            get {
                XElement x = this.GetElement(txtNameCitySerXName);
                return ((txtName)(x));
            }
            set {
                this.SetElement(txtNameCitySerXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Site description
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (AhpUid, OrgUid, txtName, codeIcao?, codeIata?, codeGps?, codeType, codeTypeMilOps?, codeNationalTfc?, codeIntlTfc?, codeSked?, codeNonSked?, codePriv?, codeVfr?, codeIfr?, txtDescrRefPt?, geoLat, geoLong, codeDatum?, valGeoAccuracy?, uomGeoAccuracy?, valElev?, valElevAccuracy?, valGeoidUndulation?, uomDistVer?, valCrc?, txtVerDatum?, txtNameCitySer?, txtDescrSite?, valMagVar?, dateMagVar?, valMagVarChg?, valRefT?, uomRefT?, txtNameAdmin?, txtDescrAcl?, txtDescrSryPwr?, txtDescrWdi?, txtDescrLdi?, valTransitionAlt?, uomTransitionAlt?, Aht?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual txtDescr txtDescrSite {
            get {
                XElement x = this.GetElement(txtDescrSiteXName);
                return ((txtDescr)(x));
            }
            set {
                this.SetElement(txtDescrSiteXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Magnetic variation
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (AhpUid, OrgUid, txtName, codeIcao?, codeIata?, codeGps?, codeType, codeTypeMilOps?, codeNationalTfc?, codeIntlTfc?, codeSked?, codeNonSked?, codePriv?, codeVfr?, codeIfr?, txtDescrRefPt?, geoLat, geoLong, codeDatum?, valGeoAccuracy?, uomGeoAccuracy?, valElev?, valElevAccuracy?, valGeoidUndulation?, uomDistVer?, valCrc?, txtVerDatum?, txtNameCitySer?, txtDescrSite?, valMagVar?, dateMagVar?, valMagVarChg?, valRefT?, uomRefT?, txtNameAdmin?, txtDescrAcl?, txtDescrSryPwr?, txtDescrWdi?, txtDescrLdi?, valTransitionAlt?, uomTransitionAlt?, Aht?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual valAngleMagVar valMagVar {
            get {
                XElement x = this.GetElement(valMagVarXName);
                return ((valAngleMagVar)(x));
            }
            set {
                this.SetElement(valMagVarXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Magnetic variation date
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (AhpUid, OrgUid, txtName, codeIcao?, codeIata?, codeGps?, codeType, codeTypeMilOps?, codeNationalTfc?, codeIntlTfc?, codeSked?, codeNonSked?, codePriv?, codeVfr?, codeIfr?, txtDescrRefPt?, geoLat, geoLong, codeDatum?, valGeoAccuracy?, uomGeoAccuracy?, valElev?, valElevAccuracy?, valGeoidUndulation?, uomDistVer?, valCrc?, txtVerDatum?, txtNameCitySer?, txtDescrSite?, valMagVar?, dateMagVar?, valMagVarChg?, valRefT?, uomRefT?, txtNameAdmin?, txtDescrAcl?, txtDescrSryPwr?, txtDescrWdi?, txtDescrLdi?, valTransitionAlt?, uomTransitionAlt?, Aht?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual dateYear dateMagVar {
            get {
                XElement x = this.GetElement(dateMagVarXName);
                return ((dateYear)(x));
            }
            set {
                this.SetElement(dateMagVarXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Annual rate of change of magnetic variation
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (AhpUid, OrgUid, txtName, codeIcao?, codeIata?, codeGps?, codeType, codeTypeMilOps?, codeNationalTfc?, codeIntlTfc?, codeSked?, codeNonSked?, codePriv?, codeVfr?, codeIfr?, txtDescrRefPt?, geoLat, geoLong, codeDatum?, valGeoAccuracy?, uomGeoAccuracy?, valElev?, valElevAccuracy?, valGeoidUndulation?, uomDistVer?, valCrc?, txtVerDatum?, txtNameCitySer?, txtDescrSite?, valMagVar?, dateMagVar?, valMagVarChg?, valRefT?, uomRefT?, txtNameAdmin?, txtDescrAcl?, txtDescrSryPwr?, txtDescrWdi?, txtDescrLdi?, valTransitionAlt?, uomTransitionAlt?, Aht?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual valAngleMagVarChg valMagVarChg {
            get {
                XElement x = this.GetElement(valMagVarChgXName);
                return ((valAngleMagVarChg)(x));
            }
            set {
                this.SetElement(valMagVarChgXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Reference temperature
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (AhpUid, OrgUid, txtName, codeIcao?, codeIata?, codeGps?, codeType, codeTypeMilOps?, codeNationalTfc?, codeIntlTfc?, codeSked?, codeNonSked?, codePriv?, codeVfr?, codeIfr?, txtDescrRefPt?, geoLat, geoLong, codeDatum?, valGeoAccuracy?, uomGeoAccuracy?, valElev?, valElevAccuracy?, valGeoidUndulation?, uomDistVer?, valCrc?, txtVerDatum?, txtNameCitySer?, txtDescrSite?, valMagVar?, dateMagVar?, valMagVarChg?, valRefT?, uomRefT?, txtNameAdmin?, txtDescrAcl?, txtDescrSryPwr?, txtDescrWdi?, txtDescrLdi?, valTransitionAlt?, uomTransitionAlt?, Aht?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual valT valRefT {
            get {
                XElement x = this.GetElement(valRefTXName);
                return ((valT)(x));
            }
            set {
                this.SetElement(valRefTXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Unit of measurement [temperature]
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (AhpUid, OrgUid, txtName, codeIcao?, codeIata?, codeGps?, codeType, codeTypeMilOps?, codeNationalTfc?, codeIntlTfc?, codeSked?, codeNonSked?, codePriv?, codeVfr?, codeIfr?, txtDescrRefPt?, geoLat, geoLong, codeDatum?, valGeoAccuracy?, uomGeoAccuracy?, valElev?, valElevAccuracy?, valGeoidUndulation?, uomDistVer?, valCrc?, txtVerDatum?, txtNameCitySer?, txtDescrSite?, valMagVar?, dateMagVar?, valMagVarChg?, valRefT?, uomRefT?, txtNameAdmin?, txtDescrAcl?, txtDescrSryPwr?, txtDescrWdi?, txtDescrLdi?, valTransitionAlt?, uomTransitionAlt?, Aht?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual uomT uomRefT {
            get {
                XElement x = this.GetElement(uomRefTXName);
                return ((uomT)(x));
            }
            set {
                this.SetElement(uomRefTXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Organisation in charge
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (AhpUid, OrgUid, txtName, codeIcao?, codeIata?, codeGps?, codeType, codeTypeMilOps?, codeNationalTfc?, codeIntlTfc?, codeSked?, codeNonSked?, codePriv?, codeVfr?, codeIfr?, txtDescrRefPt?, geoLat, geoLong, codeDatum?, valGeoAccuracy?, uomGeoAccuracy?, valElev?, valElevAccuracy?, valGeoidUndulation?, uomDistVer?, valCrc?, txtVerDatum?, txtNameCitySer?, txtDescrSite?, valMagVar?, dateMagVar?, valMagVarChg?, valRefT?, uomRefT?, txtNameAdmin?, txtDescrAcl?, txtDescrSryPwr?, txtDescrWdi?, txtDescrLdi?, valTransitionAlt?, uomTransitionAlt?, Aht?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual txtName txtNameAdmin {
            get {
                XElement x = this.GetElement(txtNameAdminXName);
                return ((txtName)(x));
            }
            set {
                this.SetElement(txtNameAdminXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Altimeter check location description
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (AhpUid, OrgUid, txtName, codeIcao?, codeIata?, codeGps?, codeType, codeTypeMilOps?, codeNationalTfc?, codeIntlTfc?, codeSked?, codeNonSked?, codePriv?, codeVfr?, codeIfr?, txtDescrRefPt?, geoLat, geoLong, codeDatum?, valGeoAccuracy?, uomGeoAccuracy?, valElev?, valElevAccuracy?, valGeoidUndulation?, uomDistVer?, valCrc?, txtVerDatum?, txtNameCitySer?, txtDescrSite?, valMagVar?, dateMagVar?, valMagVarChg?, valRefT?, uomRefT?, txtNameAdmin?, txtDescrAcl?, txtDescrSryPwr?, txtDescrWdi?, txtDescrLdi?, valTransitionAlt?, uomTransitionAlt?, Aht?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual txtDescr txtDescrAcl {
            get {
                XElement x = this.GetElement(txtDescrAclXName);
                return ((txtDescr)(x));
            }
            set {
                this.SetElement(txtDescrAclXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Secondary power supply description
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (AhpUid, OrgUid, txtName, codeIcao?, codeIata?, codeGps?, codeType, codeTypeMilOps?, codeNationalTfc?, codeIntlTfc?, codeSked?, codeNonSked?, codePriv?, codeVfr?, codeIfr?, txtDescrRefPt?, geoLat, geoLong, codeDatum?, valGeoAccuracy?, uomGeoAccuracy?, valElev?, valElevAccuracy?, valGeoidUndulation?, uomDistVer?, valCrc?, txtVerDatum?, txtNameCitySer?, txtDescrSite?, valMagVar?, dateMagVar?, valMagVarChg?, valRefT?, uomRefT?, txtNameAdmin?, txtDescrAcl?, txtDescrSryPwr?, txtDescrWdi?, txtDescrLdi?, valTransitionAlt?, uomTransitionAlt?, Aht?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual txtDescr txtDescrSryPwr {
            get {
                XElement x = this.GetElement(txtDescrSryPwrXName);
                return ((txtDescr)(x));
            }
            set {
                this.SetElement(txtDescrSryPwrXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Wind direction indicator description
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (AhpUid, OrgUid, txtName, codeIcao?, codeIata?, codeGps?, codeType, codeTypeMilOps?, codeNationalTfc?, codeIntlTfc?, codeSked?, codeNonSked?, codePriv?, codeVfr?, codeIfr?, txtDescrRefPt?, geoLat, geoLong, codeDatum?, valGeoAccuracy?, uomGeoAccuracy?, valElev?, valElevAccuracy?, valGeoidUndulation?, uomDistVer?, valCrc?, txtVerDatum?, txtNameCitySer?, txtDescrSite?, valMagVar?, dateMagVar?, valMagVarChg?, valRefT?, uomRefT?, txtNameAdmin?, txtDescrAcl?, txtDescrSryPwr?, txtDescrWdi?, txtDescrLdi?, valTransitionAlt?, uomTransitionAlt?, Aht?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual txtDescr txtDescrWdi {
            get {
                XElement x = this.GetElement(txtDescrWdiXName);
                return ((txtDescr)(x));
            }
            set {
                this.SetElement(txtDescrWdiXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Landing direction indicator description
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (AhpUid, OrgUid, txtName, codeIcao?, codeIata?, codeGps?, codeType, codeTypeMilOps?, codeNationalTfc?, codeIntlTfc?, codeSked?, codeNonSked?, codePriv?, codeVfr?, codeIfr?, txtDescrRefPt?, geoLat, geoLong, codeDatum?, valGeoAccuracy?, uomGeoAccuracy?, valElev?, valElevAccuracy?, valGeoidUndulation?, uomDistVer?, valCrc?, txtVerDatum?, txtNameCitySer?, txtDescrSite?, valMagVar?, dateMagVar?, valMagVarChg?, valRefT?, uomRefT?, txtNameAdmin?, txtDescrAcl?, txtDescrSryPwr?, txtDescrWdi?, txtDescrLdi?, valTransitionAlt?, uomTransitionAlt?, Aht?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual txtDescr txtDescrLdi {
            get {
                XElement x = this.GetElement(txtDescrLdiXName);
                return ((txtDescr)(x));
            }
            set {
                this.SetElement(txtDescrLdiXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Transition altitude
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (AhpUid, OrgUid, txtName, codeIcao?, codeIata?, codeGps?, codeType, codeTypeMilOps?, codeNationalTfc?, codeIntlTfc?, codeSked?, codeNonSked?, codePriv?, codeVfr?, codeIfr?, txtDescrRefPt?, geoLat, geoLong, codeDatum?, valGeoAccuracy?, uomGeoAccuracy?, valElev?, valElevAccuracy?, valGeoidUndulation?, uomDistVer?, valCrc?, txtVerDatum?, txtNameCitySer?, txtDescrSite?, valMagVar?, dateMagVar?, valMagVarChg?, valRefT?, uomRefT?, txtNameAdmin?, txtDescrAcl?, txtDescrSryPwr?, txtDescrWdi?, txtDescrLdi?, valTransitionAlt?, uomTransitionAlt?, Aht?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual valDistVer valTransitionAlt {
            get {
                XElement x = this.GetElement(valTransitionAltXName);
                return ((valDistVer)(x));
            }
            set {
                this.SetElement(valTransitionAltXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Unit of measurement [transition altitude]
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (AhpUid, OrgUid, txtName, codeIcao?, codeIata?, codeGps?, codeType, codeTypeMilOps?, codeNationalTfc?, codeIntlTfc?, codeSked?, codeNonSked?, codePriv?, codeVfr?, codeIfr?, txtDescrRefPt?, geoLat, geoLong, codeDatum?, valGeoAccuracy?, uomGeoAccuracy?, valElev?, valElevAccuracy?, valGeoidUndulation?, uomDistVer?, valCrc?, txtVerDatum?, txtNameCitySer?, txtDescrSite?, valMagVar?, dateMagVar?, valMagVarChg?, valRefT?, uomRefT?, txtNameAdmin?, txtDescrAcl?, txtDescrSryPwr?, txtDescrWdi?, txtDescrLdi?, valTransitionAlt?, uomTransitionAlt?, Aht?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual uomElev uomTransitionAlt {
            get {
                XElement x = this.GetElement(uomTransitionAltXName);
                return ((uomElev)(x));
            }
            set {
                this.SetElement(uomTransitionAltXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Aerodrome / Heliport is operating acording to Aerodrome / Heliport - Timetable
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (AhpUid, OrgUid, txtName, codeIcao?, codeIata?, codeGps?, codeType, codeTypeMilOps?, codeNationalTfc?, codeIntlTfc?, codeSked?, codeNonSked?, codePriv?, codeVfr?, codeIfr?, txtDescrRefPt?, geoLat, geoLong, codeDatum?, valGeoAccuracy?, uomGeoAccuracy?, valElev?, valElevAccuracy?, valGeoidUndulation?, uomDistVer?, valCrc?, txtVerDatum?, txtNameCitySer?, txtDescrSite?, valMagVar?, dateMagVar?, valMagVarChg?, valRefT?, uomRefT?, txtNameAdmin?, txtDescrAcl?, txtDescrSryPwr?, txtDescrWdi?, txtDescrLdi?, valTransitionAlt?, uomTransitionAlt?, Aht?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual TimetableType Aht {
            get {
                XElement x = this.GetElement(AhtXName);
                return ((TimetableType)(x));
            }
            set {
                this.SetElement(AhtXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Remark
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (AhpUid, OrgUid, txtName, codeIcao?, codeIata?, codeGps?, codeType, codeTypeMilOps?, codeNationalTfc?, codeIntlTfc?, codeSked?, codeNonSked?, codePriv?, codeVfr?, codeIfr?, txtDescrRefPt?, geoLat, geoLong, codeDatum?, valGeoAccuracy?, uomGeoAccuracy?, valElev?, valElevAccuracy?, valGeoidUndulation?, uomDistVer?, valCrc?, txtVerDatum?, txtNameCitySer?, txtDescrSite?, valMagVar?, dateMagVar?, valMagVarChg?, valRefT?, uomRefT?, txtNameAdmin?, txtDescrAcl?, txtDescrSryPwr?, txtDescrWdi?, txtDescrLdi?, valTransitionAlt?, uomTransitionAlt?, Aht?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual txtRmk txtRmk {
            get {
                XElement x = this.GetElement(txtRmkXName);
                return ((txtRmk)(x));
            }
            set {
                this.SetElement(txtRmkXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string source {
            get {
                XAttribute x = this.Attribute(sourceXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(sourceXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<AerodromeHeliportType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(AhpUidXName, typeof(AerodromeHeliportUidType));
            localElementDictionary.Add(OrgUidXName, typeof(OrganisationAuthorityUidType));
            localElementDictionary.Add(txtNameXName, typeof(txtName));
            localElementDictionary.Add(codeIcaoXName, typeof(codeLocIndIcao));
            localElementDictionary.Add(codeIataXName, typeof(codeLocIndIata));
            localElementDictionary.Add(codeGpsXName, typeof(codeLocIndGps));
            localElementDictionary.Add(codeTypeXName, typeof(codeTypeAdHp));
            localElementDictionary.Add(codeTypeMilOpsXName, typeof(codeTypeMilOps));
            localElementDictionary.Add(codeNationalTfcXName, typeof(codeYesNo));
            localElementDictionary.Add(codeIntlTfcXName, typeof(codeYesNo));
            localElementDictionary.Add(codeSkedXName, typeof(codeYesNo));
            localElementDictionary.Add(codeNonSkedXName, typeof(codeYesNo));
            localElementDictionary.Add(codePrivXName, typeof(codeYesNo));
            localElementDictionary.Add(codeVfrXName, typeof(codeYesNo));
            localElementDictionary.Add(codeIfrXName, typeof(codeYesNo));
            localElementDictionary.Add(txtDescrRefPtXName, typeof(txtDescr));
            localElementDictionary.Add(geoLatXName, typeof(geoLat));
            localElementDictionary.Add(geoLongXName, typeof(geoLong));
            localElementDictionary.Add(codeDatumXName, typeof(codeDatum));
            localElementDictionary.Add(valGeoAccuracyXName, typeof(valDistHorz));
            localElementDictionary.Add(uomGeoAccuracyXName, typeof(uomDistHorz));
            localElementDictionary.Add(valElevXName, typeof(valDistVer));
            localElementDictionary.Add(valElevAccuracyXName, typeof(valDistVer));
            localElementDictionary.Add(valGeoidUndulationXName, typeof(valDistVer));
            localElementDictionary.Add(uomDistVerXName, typeof(uomElev));
            localElementDictionary.Add(valCrcXName, typeof(valHex));
            localElementDictionary.Add(txtVerDatumXName, typeof(txtDescr));
            localElementDictionary.Add(txtNameCitySerXName, typeof(txtName));
            localElementDictionary.Add(txtDescrSiteXName, typeof(txtDescr));
            localElementDictionary.Add(valMagVarXName, typeof(valAngleMagVar));
            localElementDictionary.Add(dateMagVarXName, typeof(dateYear));
            localElementDictionary.Add(valMagVarChgXName, typeof(valAngleMagVarChg));
            localElementDictionary.Add(valRefTXName, typeof(valT));
            localElementDictionary.Add(uomRefTXName, typeof(uomT));
            localElementDictionary.Add(txtNameAdminXName, typeof(txtName));
            localElementDictionary.Add(txtDescrAclXName, typeof(txtDescr));
            localElementDictionary.Add(txtDescrSryPwrXName, typeof(txtDescr));
            localElementDictionary.Add(txtDescrWdiXName, typeof(txtDescr));
            localElementDictionary.Add(txtDescrLdiXName, typeof(txtDescr));
            localElementDictionary.Add(valTransitionAltXName, typeof(valDistVer));
            localElementDictionary.Add(uomTransitionAltXName, typeof(uomElev));
            localElementDictionary.Add(AhtXName, typeof(TimetableType));
            localElementDictionary.Add(txtRmkXName, typeof(txtRmk));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Aerodrome / Heliport - UID
    /// </para>
    /// <para>
    /// Regular expression: (codeId)
    /// </para>
    /// </summary>
    public partial class AerodromeHeliportUidType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName codeIdXName = System.Xml.Linq.XName.Get("codeId", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName midXName = System.Xml.Linq.XName.Get("mid", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName regionXName = System.Xml.Linq.XName.Get("region", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("AerodromeHeliportUidType", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator AerodromeHeliportUidType(XElement xe) { return XTypedServices.ToXTypedElement<AerodromeHeliportUidType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static AerodromeHeliportUidType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(codeIdXName));
        }
        
        /// <summary>
        /// <para>
        /// Aerodrome / Heliport - UID
        /// </para>
        /// <para>
        /// Regular expression: (codeId)
        /// </para>
        /// </summary>
        public AerodromeHeliportUidType() {
        }
        
        /// <summary>
        /// <para>
        /// Identification
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (codeId)
        /// </para>
        /// </summary>
        public virtual codeIdAdHp codeId {
            get {
                XElement x = this.GetElement(codeIdXName);
                return ((codeIdAdHp)(x));
            }
            set {
                this.SetElement(codeIdXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string mid {
            get {
                XAttribute x = this.Attribute(midXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(midXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual string region {
            get {
                XAttribute x = this.Attribute(regionXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(regionXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<AerodromeHeliportUidType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(codeIdXName, typeof(codeIdAdHp));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Aerodrome / Heliport Usage
    /// </para>
    /// <para>
    /// Regular expression: (AhuUid, UsageLimitation+)
    /// </para>
    /// </summary>
    public partial class AerodromeHeliportUsageType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName AhuUidXName = System.Xml.Linq.XName.Get("AhuUid", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName UsageLimitationXName = System.Xml.Linq.XName.Get("UsageLimitation", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<UsageLimitationLocalType> UsageLimitationField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName sourceXName = System.Xml.Linq.XName.Get("source", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("AerodromeHeliportUsageType", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator AerodromeHeliportUsageType(XElement xe) { return XTypedServices.ToXTypedElement<AerodromeHeliportUsageType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static AerodromeHeliportUsageType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(AhuUidXName), new NamedContentModelEntity(UsageLimitationXName));
        }
        
        /// <summary>
        /// <para>
        /// Aerodrome / Heliport Usage
        /// </para>
        /// <para>
        /// Regular expression: (AhuUid, UsageLimitation+)
        /// </para>
        /// </summary>
        public AerodromeHeliportUsageType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (AhuUid, UsageLimitation+)
        /// </para>
        /// </summary>
        public virtual AerodromeHeliportUsageUidType AhuUid {
            get {
                XElement x = this.GetElement(AhuUidXName);
                return ((AerodromeHeliportUsageUidType)(x));
            }
            set {
                this.SetElement(AhuUidXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Aerodrome / Heliport Usage Limitation
        /// </para>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (AhuUid, UsageLimitation+)
        /// </para>
        /// </summary>
        public virtual IList<OFMX.AerodromeHeliportUsageType.UsageLimitationLocalType> UsageLimitation {
            get {
                if ((this.UsageLimitationField == null)) {
                    this.UsageLimitationField = new XTypedList<UsageLimitationLocalType>(this, LinqToXsdTypeManager.Instance, UsageLimitationXName);
                }
                return this.UsageLimitationField;
            }
            set {
                if ((value == null)) {
                    this.UsageLimitationField = null;
                }
                else {
                    if ((this.UsageLimitationField == null)) {
                        this.UsageLimitationField = XTypedList<UsageLimitationLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, UsageLimitationXName);
                    }
                    else {
                        XTypedServices.SetList<UsageLimitationLocalType>(this.UsageLimitationField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string source {
            get {
                XAttribute x = this.Attribute(sourceXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(sourceXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<AerodromeHeliportUsageType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(AhuUidXName, typeof(AerodromeHeliportUsageUidType));
            localElementDictionary.Add(UsageLimitationXName, typeof(UsageLimitationLocalType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (codeUsageLimitation, UsageCondition*, Timetable?, txtRmk?)
        /// </para>
        /// </summary>
        public partial class UsageLimitationLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName codeUsageLimitationXName = System.Xml.Linq.XName.Get("codeUsageLimitation", "");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName UsageConditionXName = System.Xml.Linq.XName.Get("UsageCondition", "");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private XTypedList<UsageConditionLocalType> UsageConditionField;
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName TimetableXName = System.Xml.Linq.XName.Get("Timetable", "");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName txtRmkXName = System.Xml.Linq.XName.Get("txtRmk", "");
            
            private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("UsageLimitation", "");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;
            
		public static explicit operator UsageLimitationLocalType(XElement xe) { return XTypedServices.ToXTypedElement<UsageLimitationLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static UsageLimitationLocalType() {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(codeUsageLimitationXName), new NamedContentModelEntity(UsageConditionXName), new NamedContentModelEntity(TimetableXName), new NamedContentModelEntity(txtRmkXName));
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (codeUsageLimitation, UsageCondition*, Timetable?, txtRmk?)
            /// </para>
            /// </summary>
            public UsageLimitationLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// A code indicating whether the limitation is a permission, an interdiction or an exclusive usage.
            /// </para>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (codeUsageLimitation, UsageCondition*, Timetable?, txtRmk?)
            /// </para>
            /// </summary>
            public virtual codeUsageLimitation codeUsageLimitation {
                get {
                    XElement x = this.GetElement(codeUsageLimitationXName);
                    return ((codeUsageLimitation)(x));
                }
                set {
                    this.SetElement(codeUsageLimitationXName, value);
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional, repeating
            /// </para>
            /// <para>
            /// Regular expression: (codeUsageLimitation, UsageCondition*, Timetable?, txtRmk?)
            /// </para>
            /// </summary>
            public virtual IList<OFMX.AerodromeHeliportUsageType.UsageLimitationLocalType.UsageConditionLocalType> UsageCondition {
                get {
                    if ((this.UsageConditionField == null)) {
                        this.UsageConditionField = new XTypedList<UsageConditionLocalType>(this, LinqToXsdTypeManager.Instance, UsageConditionXName);
                    }
                    return this.UsageConditionField;
                }
                set {
                    if ((value == null)) {
                        this.UsageConditionField = null;
                    }
                    else {
                        if ((this.UsageConditionField == null)) {
                            this.UsageConditionField = XTypedList<UsageConditionLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, UsageConditionXName);
                        }
                        else {
                            XTypedServices.SetList<UsageConditionLocalType>(this.UsageConditionField, value);
                        }
                    }
                }
            }
            
            /// <summary>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (codeUsageLimitation, UsageCondition*, Timetable?, txtRmk?)
            /// </para>
            /// </summary>
            public virtual TimetableType Timetable {
                get {
                    XElement x = this.GetElement(TimetableXName);
                    return ((TimetableType)(x));
                }
                set {
                    this.SetElement(TimetableXName, value);
                }
            }
            
            /// <summary>
            /// <para>
            /// Remark
            /// </para>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (codeUsageLimitation, UsageCondition*, Timetable?, txtRmk?)
            /// </para>
            /// </summary>
            public virtual txtRmk txtRmk {
                get {
                    XElement x = this.GetElement(txtRmkXName);
                    return ((txtRmk)(x));
                }
                set {
                    this.SetElement(txtRmkXName, value);
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            System.Xml.Linq.XName IXMetaData.SchemaName {
                get {
                    return xName;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<UsageLimitationLocalType>(this);
            }
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(codeUsageLimitationXName, typeof(codeUsageLimitation));
                localElementDictionary.Add(UsageConditionXName, typeof(UsageConditionLocalType));
                localElementDictionary.Add(TimetableXName, typeof(TimetableType));
                localElementDictionary.Add(txtRmkXName, typeof(txtRmk));
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return contentModel;
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (AircraftClass?, FlightClass?)
            /// </para>
            /// </summary>
            public partial class UsageConditionLocalType : XTypedElement, IXMetaData {
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName AircraftClassXName = System.Xml.Linq.XName.Get("AircraftClass", "");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                [EditorBrowsable(EditorBrowsableState.Never)]
                internal static readonly System.Xml.Linq.XName FlightClassXName = System.Xml.Linq.XName.Get("FlightClass", "");
                
                private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("UsageCondition", "");
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                private static ContentModelEntity contentModel;
                
		public static explicit operator UsageConditionLocalType(XElement xe) { return XTypedServices.ToXTypedElement<UsageConditionLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
                
                static UsageConditionLocalType() {
                    BuildElementDictionary();
                    contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(AircraftClassXName), new NamedContentModelEntity(FlightClassXName));
                }
                
                /// <summary>
                /// <para>
                /// Regular expression: (AircraftClass?, FlightClass?)
                /// </para>
                /// </summary>
                public UsageConditionLocalType() {
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (AircraftClass?, FlightClass?)
                /// </para>
                /// </summary>
                public virtual AircraftClassType AircraftClass {
                    get {
                        XElement x = this.GetElement(AircraftClassXName);
                        return ((AircraftClassType)(x));
                    }
                    set {
                        this.SetElement(AircraftClassXName, value);
                    }
                }
                
                /// <summary>
                /// <para>
                /// Occurrence: optional
                /// </para>
                /// <para>
                /// Regular expression: (AircraftClass?, FlightClass?)
                /// </para>
                /// </summary>
                public virtual FlightClassType FlightClass {
                    get {
                        XElement x = this.GetElement(FlightClassXName);
                        return ((FlightClassType)(x));
                    }
                    set {
                        this.SetElement(FlightClassXName, value);
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
                    get {
                        return localElementDictionary;
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                System.Xml.Linq.XName IXMetaData.SchemaName {
                    get {
                        return xName;
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                SchemaOrigin IXMetaData.TypeOrigin {
                    get {
                        return SchemaOrigin.Fragment;
                    }
                }
                
                [DebuggerBrowsable(DebuggerBrowsableState.Never)]
                ILinqToXsdTypeManager IXMetaData.TypeManager {
                    get {
                        return LinqToXsdTypeManager.Instance;
                    }
                }
                
                public override XTypedElement Clone() {
                    return XTypedServices.CloneXTypedElement<UsageConditionLocalType>(this);
                }
                
                private static void BuildElementDictionary() {
                    localElementDictionary.Add(AircraftClassXName, typeof(AircraftClassType));
                    localElementDictionary.Add(FlightClassXName, typeof(FlightClassType));
                }
                
                ContentModelEntity IXMetaData.GetContentModel() {
                    return contentModel;
                }
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Aerodrome / Heliport Usage
    /// </para>
    /// <para>
    /// Regular expression: (AhpUid)
    /// </para>
    /// </summary>
    public partial class AerodromeHeliportUsageUidType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName AhpUidXName = System.Xml.Linq.XName.Get("AhpUid", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName midXName = System.Xml.Linq.XName.Get("mid", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("AerodromeHeliportUsageUidType", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator AerodromeHeliportUsageUidType(XElement xe) { return XTypedServices.ToXTypedElement<AerodromeHeliportUsageUidType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static AerodromeHeliportUsageUidType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(AhpUidXName));
        }
        
        /// <summary>
        /// <para>
        /// Aerodrome / Heliport Usage
        /// </para>
        /// <para>
        /// Regular expression: (AhpUid)
        /// </para>
        /// </summary>
        public AerodromeHeliportUsageUidType() {
        }
        
        /// <summary>
        /// <para>
        /// Aerodrome / Heliport Usage is defining the usage of Aerodrome / Heliport
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (AhpUid)
        /// </para>
        /// </summary>
        public virtual AerodromeHeliportUidType AhpUid {
            get {
                XElement x = this.GetElement(AhpUidXName);
                return ((AerodromeHeliportUidType)(x));
            }
            set {
                this.SetElement(AhpUidXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string mid {
            get {
                XAttribute x = this.Attribute(midXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(midXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<AerodromeHeliportUsageUidType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(AhpUidXName, typeof(AerodromeHeliportUidType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Aeronautical ground light
    /// </para>
    /// <para>
    /// Regular expression: (AglUid, AhpUid?, txtDescrCharact?, geoLat, geoLong, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, valElev?, valElevAccuracy?, valGeoidUndulation?, uomDistVer?, Agt?, txtRmk?)
    /// </para>
    /// </summary>
    public partial class AeronauticalGroundLightType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName AglUidXName = System.Xml.Linq.XName.Get("AglUid", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName AhpUidXName = System.Xml.Linq.XName.Get("AhpUid", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName txtDescrCharactXName = System.Xml.Linq.XName.Get("txtDescrCharact", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName geoLatXName = System.Xml.Linq.XName.Get("geoLat", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName geoLongXName = System.Xml.Linq.XName.Get("geoLong", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName codeDatumXName = System.Xml.Linq.XName.Get("codeDatum", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName valGeoAccuracyXName = System.Xml.Linq.XName.Get("valGeoAccuracy", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName uomGeoAccuracyXName = System.Xml.Linq.XName.Get("uomGeoAccuracy", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName valElevXName = System.Xml.Linq.XName.Get("valElev", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName valElevAccuracyXName = System.Xml.Linq.XName.Get("valElevAccuracy", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName valGeoidUndulationXName = System.Xml.Linq.XName.Get("valGeoidUndulation", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName uomDistVerXName = System.Xml.Linq.XName.Get("uomDistVer", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName AgtXName = System.Xml.Linq.XName.Get("Agt", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName txtRmkXName = System.Xml.Linq.XName.Get("txtRmk", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName sourceXName = System.Xml.Linq.XName.Get("source", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("AeronauticalGroundLightType", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator AeronauticalGroundLightType(XElement xe) { return XTypedServices.ToXTypedElement<AeronauticalGroundLightType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static AeronauticalGroundLightType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(AglUidXName), new NamedContentModelEntity(AhpUidXName), new NamedContentModelEntity(txtDescrCharactXName), new NamedContentModelEntity(geoLatXName), new NamedContentModelEntity(geoLongXName), new NamedContentModelEntity(codeDatumXName), new NamedContentModelEntity(valGeoAccuracyXName), new NamedContentModelEntity(uomGeoAccuracyXName), new NamedContentModelEntity(valElevXName), new NamedContentModelEntity(valElevAccuracyXName), new NamedContentModelEntity(valGeoidUndulationXName), new NamedContentModelEntity(uomDistVerXName), new NamedContentModelEntity(AgtXName), new NamedContentModelEntity(txtRmkXName));
        }
        
        /// <summary>
        /// <para>
        /// Aeronautical ground light
        /// </para>
        /// <para>
        /// Regular expression: (AglUid, AhpUid?, txtDescrCharact?, geoLat, geoLong, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, valElev?, valElevAccuracy?, valGeoidUndulation?, uomDistVer?, Agt?, txtRmk?)
        /// </para>
        /// </summary>
        public AeronauticalGroundLightType() {
        }
        
        /// <summary>
        /// <para>
        /// a version of Aeronautical ground light
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (AglUid, AhpUid?, txtDescrCharact?, geoLat, geoLong, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, valElev?, valElevAccuracy?, valGeoidUndulation?, uomDistVer?, Agt?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual AeronauticalGroundLightUidType AglUid {
            get {
                XElement x = this.GetElement(AglUidXName);
                return ((AeronauticalGroundLightUidType)(x));
            }
            set {
                this.SetElement(AglUidXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Aeronautical ground light is marking the site of Aerodrome / Heliport
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (AglUid, AhpUid?, txtDescrCharact?, geoLat, geoLong, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, valElev?, valElevAccuracy?, valGeoidUndulation?, uomDistVer?, Agt?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual AerodromeHeliportUidType AhpUid {
            get {
                XElement x = this.GetElement(AhpUidXName);
                return ((AerodromeHeliportUidType)(x));
            }
            set {
                this.SetElement(AhpUidXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Characteristics description
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (AglUid, AhpUid?, txtDescrCharact?, geoLat, geoLong, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, valElev?, valElevAccuracy?, valGeoidUndulation?, uomDistVer?, Agt?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual txtDescr txtDescrCharact {
            get {
                XElement x = this.GetElement(txtDescrCharactXName);
                return ((txtDescr)(x));
            }
            set {
                this.SetElement(txtDescrCharactXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Latitude
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (AglUid, AhpUid?, txtDescrCharact?, geoLat, geoLong, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, valElev?, valElevAccuracy?, valGeoidUndulation?, uomDistVer?, Agt?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual geoLat geoLat {
            get {
                XElement x = this.GetElement(geoLatXName);
                return ((geoLat)(x));
            }
            set {
                this.SetElement(geoLatXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Longitude
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (AglUid, AhpUid?, txtDescrCharact?, geoLat, geoLong, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, valElev?, valElevAccuracy?, valGeoidUndulation?, uomDistVer?, Agt?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual geoLong geoLong {
            get {
                XElement x = this.GetElement(geoLongXName);
                return ((geoLong)(x));
            }
            set {
                this.SetElement(geoLongXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Datum
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (AglUid, AhpUid?, txtDescrCharact?, geoLat, geoLong, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, valElev?, valElevAccuracy?, valGeoidUndulation?, uomDistVer?, Agt?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual codeDatum codeDatum {
            get {
                XElement x = this.GetElement(codeDatumXName);
                return ((codeDatum)(x));
            }
            set {
                this.SetElement(codeDatumXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Geographical accuracy
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (AglUid, AhpUid?, txtDescrCharact?, geoLat, geoLong, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, valElev?, valElevAccuracy?, valGeoidUndulation?, uomDistVer?, Agt?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual valDistHorz valGeoAccuracy {
            get {
                XElement x = this.GetElement(valGeoAccuracyXName);
                return ((valDistHorz)(x));
            }
            set {
                this.SetElement(valGeoAccuracyXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Unit of measurement [geographical accuracy]
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (AglUid, AhpUid?, txtDescrCharact?, geoLat, geoLong, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, valElev?, valElevAccuracy?, valGeoidUndulation?, uomDistVer?, Agt?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual uomDistHorz uomGeoAccuracy {
            get {
                XElement x = this.GetElement(uomGeoAccuracyXName);
                return ((uomDistHorz)(x));
            }
            set {
                this.SetElement(uomGeoAccuracyXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Elevation
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (AglUid, AhpUid?, txtDescrCharact?, geoLat, geoLong, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, valElev?, valElevAccuracy?, valGeoidUndulation?, uomDistVer?, Agt?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual valDistVer valElev {
            get {
                XElement x = this.GetElement(valElevXName);
                return ((valDistVer)(x));
            }
            set {
                this.SetElement(valElevXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Elevation accuracy
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (AglUid, AhpUid?, txtDescrCharact?, geoLat, geoLong, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, valElev?, valElevAccuracy?, valGeoidUndulation?, uomDistVer?, Agt?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual valDistVer valElevAccuracy {
            get {
                XElement x = this.GetElement(valElevAccuracyXName);
                return ((valDistVer)(x));
            }
            set {
                this.SetElement(valElevAccuracyXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Geoid undulation
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (AglUid, AhpUid?, txtDescrCharact?, geoLat, geoLong, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, valElev?, valElevAccuracy?, valGeoidUndulation?, uomDistVer?, Agt?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual valDistVer valGeoidUndulation {
            get {
                XElement x = this.GetElement(valGeoidUndulationXName);
                return ((valDistVer)(x));
            }
            set {
                this.SetElement(valGeoidUndulationXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Unit of measurement [vertical distance]
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (AglUid, AhpUid?, txtDescrCharact?, geoLat, geoLong, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, valElev?, valElevAccuracy?, valGeoidUndulation?, uomDistVer?, Agt?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual uomElev uomDistVer {
            get {
                XElement x = this.GetElement(uomDistVerXName);
                return ((uomElev)(x));
            }
            set {
                this.SetElement(uomDistVerXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Aeronautical ground light is operating according to Aeronautical ground light - Timetable
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (AglUid, AhpUid?, txtDescrCharact?, geoLat, geoLong, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, valElev?, valElevAccuracy?, valGeoidUndulation?, uomDistVer?, Agt?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual TimetableType Agt {
            get {
                XElement x = this.GetElement(AgtXName);
                return ((TimetableType)(x));
            }
            set {
                this.SetElement(AgtXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Remark
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (AglUid, AhpUid?, txtDescrCharact?, geoLat, geoLong, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, valElev?, valElevAccuracy?, valGeoidUndulation?, uomDistVer?, Agt?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual txtRmk txtRmk {
            get {
                XElement x = this.GetElement(txtRmkXName);
                return ((txtRmk)(x));
            }
            set {
                this.SetElement(txtRmkXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string source {
            get {
                XAttribute x = this.Attribute(sourceXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(sourceXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<AeronauticalGroundLightType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(AglUidXName, typeof(AeronauticalGroundLightUidType));
            localElementDictionary.Add(AhpUidXName, typeof(AerodromeHeliportUidType));
            localElementDictionary.Add(txtDescrCharactXName, typeof(txtDescr));
            localElementDictionary.Add(geoLatXName, typeof(geoLat));
            localElementDictionary.Add(geoLongXName, typeof(geoLong));
            localElementDictionary.Add(codeDatumXName, typeof(codeDatum));
            localElementDictionary.Add(valGeoAccuracyXName, typeof(valDistHorz));
            localElementDictionary.Add(uomGeoAccuracyXName, typeof(uomDistHorz));
            localElementDictionary.Add(valElevXName, typeof(valDistVer));
            localElementDictionary.Add(valElevAccuracyXName, typeof(valDistVer));
            localElementDictionary.Add(valGeoidUndulationXName, typeof(valDistVer));
            localElementDictionary.Add(uomDistVerXName, typeof(uomElev));
            localElementDictionary.Add(AgtXName, typeof(TimetableType));
            localElementDictionary.Add(txtRmkXName, typeof(txtRmk));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Aeronautical ground light - UID
    /// </para>
    /// <para>
    /// Regular expression: (txtName, codeType)
    /// </para>
    /// </summary>
    public partial class AeronauticalGroundLightUidType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName txtNameXName = System.Xml.Linq.XName.Get("txtName", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName codeTypeXName = System.Xml.Linq.XName.Get("codeType", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName midXName = System.Xml.Linq.XName.Get("mid", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("AeronauticalGroundLightUidType", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator AeronauticalGroundLightUidType(XElement xe) { return XTypedServices.ToXTypedElement<AeronauticalGroundLightUidType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static AeronauticalGroundLightUidType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(txtNameXName), new NamedContentModelEntity(codeTypeXName));
        }
        
        /// <summary>
        /// <para>
        /// Aeronautical ground light - UID
        /// </para>
        /// <para>
        /// Regular expression: (txtName, codeType)
        /// </para>
        /// </summary>
        public AeronauticalGroundLightUidType() {
        }
        
        /// <summary>
        /// <para>
        /// Name
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (txtName, codeType)
        /// </para>
        /// </summary>
        public virtual txtName txtName {
            get {
                XElement x = this.GetElement(txtNameXName);
                return ((txtName)(x));
            }
            set {
                this.SetElement(txtNameXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Type
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (txtName, codeType)
        /// </para>
        /// </summary>
        public virtual codeTypeAeroLgt codeType {
            get {
                XElement x = this.GetElement(codeTypeXName);
                return ((codeTypeAeroLgt)(x));
            }
            set {
                this.SetElement(codeTypeXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string mid {
            get {
                XAttribute x = this.Attribute(midXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(midXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<AeronauticalGroundLightUidType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(txtNameXName, typeof(txtName));
            localElementDictionary.Add(codeTypeXName, typeof(codeTypeAeroLgt));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Aircraft class
    /// </para>
    /// <para>
    /// Regular expression: (codeCapability?, codeType?, codeTypeEngine?, codeEngineNo?, codeIcaoAcftType?)
    /// </para>
    /// </summary>
    public partial class AircraftClassType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName codeCapabilityXName = System.Xml.Linq.XName.Get("codeCapability", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName codeTypeXName = System.Xml.Linq.XName.Get("codeType", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName codeTypeEngineXName = System.Xml.Linq.XName.Get("codeTypeEngine", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName codeEngineNoXName = System.Xml.Linq.XName.Get("codeEngineNo", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName codeIcaoAcftTypeXName = System.Xml.Linq.XName.Get("codeIcaoAcftType", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("AircraftClassType", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator AircraftClassType(XElement xe) { return XTypedServices.ToXTypedElement<AircraftClassType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static AircraftClassType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(codeCapabilityXName), new NamedContentModelEntity(codeTypeXName), new NamedContentModelEntity(codeTypeEngineXName), new NamedContentModelEntity(codeEngineNoXName), new NamedContentModelEntity(codeIcaoAcftTypeXName));
        }
        
        /// <summary>
        /// <para>
        /// Aircraft class
        /// </para>
        /// <para>
        /// Regular expression: (codeCapability?, codeType?, codeTypeEngine?, codeEngineNo?, codeIcaoAcftType?)
        /// </para>
        /// </summary>
        public AircraftClassType() {
        }
        
        /// <summary>
        /// <para>
        /// Equipment and certification
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (codeCapability?, codeType?, codeTypeEngine?, codeEngineNo?, codeIcaoAcftType?)
        /// </para>
        /// </summary>
        public virtual codeTypeAcftCap codeCapability {
            get {
                XElement x = this.GetElement(codeCapabilityXName);
                return ((codeTypeAcftCap)(x));
            }
            set {
                this.SetElement(codeCapabilityXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Aircraft type
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (codeCapability?, codeType?, codeTypeEngine?, codeEngineNo?, codeIcaoAcftType?)
        /// </para>
        /// </summary>
        public virtual codeTypeAcft codeType {
            get {
                XElement x = this.GetElement(codeTypeXName);
                return ((codeTypeAcft)(x));
            }
            set {
                this.SetElement(codeTypeXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Engine type
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (codeCapability?, codeType?, codeTypeEngine?, codeEngineNo?, codeIcaoAcftType?)
        /// </para>
        /// </summary>
        public virtual codeTypeAcftEngine codeTypeEngine {
            get {
                XElement x = this.GetElement(codeTypeEngineXName);
                return ((codeTypeAcftEngine)(x));
            }
            set {
                this.SetElement(codeTypeEngineXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Number of engines of an aircraft
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (codeCapability?, codeType?, codeTypeEngine?, codeEngineNo?, codeIcaoAcftType?)
        /// </para>
        /// </summary>
        public virtual codeAcftEngineNo codeEngineNo {
            get {
                XElement x = this.GetElement(codeEngineNoXName);
                return ((codeAcftEngineNo)(x));
            }
            set {
                this.SetElement(codeEngineNoXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// ICAO aircraft type designator
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (codeCapability?, codeType?, codeTypeEngine?, codeEngineNo?, codeIcaoAcftType?)
        /// </para>
        /// </summary>
        public virtual codeIcaoAircraftType codeIcaoAcftType {
            get {
                XElement x = this.GetElement(codeIcaoAcftTypeXName);
                return ((codeIcaoAircraftType)(x));
            }
            set {
                this.SetElement(codeIcaoAcftTypeXName, value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<AircraftClassType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(codeCapabilityXName, typeof(codeTypeAcftCap));
            localElementDictionary.Add(codeTypeXName, typeof(codeTypeAcft));
            localElementDictionary.Add(codeTypeEngineXName, typeof(codeTypeAcftEngine));
            localElementDictionary.Add(codeEngineNoXName, typeof(codeAcftEngineNo));
            localElementDictionary.Add(codeIcaoAcftTypeXName, typeof(codeIcaoAircraftType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Airspace association
    /// </para>
    /// <para>
    /// Regular expression: (AasUid, txtRmk?)
    /// </para>
    /// </summary>
    public partial class AirspaceAssociationType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName AasUidXName = System.Xml.Linq.XName.Get("AasUid", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName txtRmkXName = System.Xml.Linq.XName.Get("txtRmk", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName sourceXName = System.Xml.Linq.XName.Get("source", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("AirspaceAssociationType", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator AirspaceAssociationType(XElement xe) { return XTypedServices.ToXTypedElement<AirspaceAssociationType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static AirspaceAssociationType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(AasUidXName), new NamedContentModelEntity(txtRmkXName));
        }
        
        /// <summary>
        /// <para>
        /// Airspace association
        /// </para>
        /// <para>
        /// Regular expression: (AasUid, txtRmk?)
        /// </para>
        /// </summary>
        public AirspaceAssociationType() {
        }
        
        /// <summary>
        /// <para>
        /// Airspace association - UID
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (AasUid, txtRmk?)
        /// </para>
        /// </summary>
        public virtual AirspaceAssociationUidType AasUid {
            get {
                XElement x = this.GetElement(AasUidXName);
                return ((AirspaceAssociationUidType)(x));
            }
            set {
                this.SetElement(AasUidXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Remark
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (AasUid, txtRmk?)
        /// </para>
        /// </summary>
        public virtual txtRmk txtRmk {
            get {
                XElement x = this.GetElement(txtRmkXName);
                return ((txtRmk)(x));
            }
            set {
                this.SetElement(txtRmkXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string source {
            get {
                XAttribute x = this.Attribute(sourceXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(sourceXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<AirspaceAssociationType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(AasUidXName, typeof(AirspaceAssociationUidType));
            localElementDictionary.Add(txtRmkXName, typeof(txtRmk));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Airspace association - UID
    /// </para>
    /// <para>
    /// Regular expression: (AseUid1, AseUid2, codeType)
    /// </para>
    /// </summary>
    public partial class AirspaceAssociationUidType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName AseUid1XName = System.Xml.Linq.XName.Get("AseUid1", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName AseUid2XName = System.Xml.Linq.XName.Get("AseUid2", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName codeTypeXName = System.Xml.Linq.XName.Get("codeType", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName midXName = System.Xml.Linq.XName.Get("mid", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("AirspaceAssociationUidType", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator AirspaceAssociationUidType(XElement xe) { return XTypedServices.ToXTypedElement<AirspaceAssociationUidType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static AirspaceAssociationUidType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(AseUid1XName), new NamedContentModelEntity(AseUid2XName), new NamedContentModelEntity(codeTypeXName));
        }
        
        /// <summary>
        /// <para>
        /// Airspace association - UID
        /// </para>
        /// <para>
        /// Regular expression: (AseUid1, AseUid2, codeType)
        /// </para>
        /// </summary>
        public AirspaceAssociationUidType() {
        }
        
        /// <summary>
        /// <para>
        /// First member
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (AseUid1, AseUid2, codeType)
        /// </para>
        /// </summary>
        public virtual AirspaceUidType AseUid1 {
            get {
                XElement x = this.GetElement(AseUid1XName);
                return ((AirspaceUidType)(x));
            }
            set {
                this.SetElement(AseUid1XName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Second member
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (AseUid1, AseUid2, codeType)
        /// </para>
        /// </summary>
        public virtual AirspaceUidType AseUid2 {
            get {
                XElement x = this.GetElement(AseUid2XName);
                return ((AirspaceUidType)(x));
            }
            set {
                this.SetElement(AseUid2XName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Association type {TIME-DIST}
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (AseUid1, AseUid2, codeType)
        /// </para>
        /// </summary>
        public virtual codeTypeRelAs codeType {
            get {
                XElement x = this.GetElement(codeTypeXName);
                return ((codeTypeRelAs)(x));
            }
            set {
                this.SetElement(codeTypeXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string mid {
            get {
                XAttribute x = this.Attribute(midXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(midXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<AirspaceAssociationUidType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(AseUid1XName, typeof(AirspaceUidType));
            localElementDictionary.Add(AseUid2XName, typeof(AirspaceUidType));
            localElementDictionary.Add(codeTypeXName, typeof(codeTypeRelAs));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// DEPRECATED-4.0
    /// </para>
    /// <para>
    /// [Deprecated] Airspace association
    /// </para>
    /// <para>
    /// Regular expression: (AacUid, codeType, codeOpr?, noSeqOpr?, txtRmk?)
    /// </para>
    /// </summary>
    public partial class AirspaceAssocType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName AacUidXName = System.Xml.Linq.XName.Get("AacUid", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName codeTypeXName = System.Xml.Linq.XName.Get("codeType", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName codeOprXName = System.Xml.Linq.XName.Get("codeOpr", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName noSeqOprXName = System.Xml.Linq.XName.Get("noSeqOpr", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName txtRmkXName = System.Xml.Linq.XName.Get("txtRmk", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName sourceXName = System.Xml.Linq.XName.Get("source", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("AirspaceAssocType", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator AirspaceAssocType(XElement xe) { return XTypedServices.ToXTypedElement<AirspaceAssocType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static AirspaceAssocType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(AacUidXName), new NamedContentModelEntity(codeTypeXName), new NamedContentModelEntity(codeOprXName), new NamedContentModelEntity(noSeqOprXName), new NamedContentModelEntity(txtRmkXName));
        }
        
        /// <summary>
        /// <para>
        /// DEPRECATED-4.0
        /// </para>
        /// <para>
        /// [Deprecated] Airspace association
        /// </para>
        /// <para>
        /// Regular expression: (AacUid, codeType, codeOpr?, noSeqOpr?, txtRmk?)
        /// </para>
        /// </summary>
        public AirspaceAssocType() {
        }
        
        /// <summary>
        /// <para>
        /// a version of Airspace association
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (AacUid, codeType, codeOpr?, noSeqOpr?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual AirspaceAssocUidType AacUid {
            get {
                XElement x = this.GetElement(AacUidXName);
                return ((AirspaceAssocUidType)(x));
            }
            set {
                this.SetElement(AacUidXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Association type
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (AacUid, codeType, codeOpr?, noSeqOpr?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual codeTypeAssocAs codeType {
            get {
                XElement x = this.GetElement(codeTypeXName);
                return ((codeTypeAssocAs)(x));
            }
            set {
                this.SetElement(codeTypeXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Association operation
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (AacUid, codeType, codeOpr?, noSeqOpr?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual codeOpr codeOpr {
            get {
                XElement x = this.GetElement(codeOprXName);
                return ((codeOpr)(x));
            }
            set {
                this.SetElement(codeOprXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Association operation order
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (AacUid, codeType, codeOpr?, noSeqOpr?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual noSeq noSeqOpr {
            get {
                XElement x = this.GetElement(noSeqOprXName);
                return ((noSeq)(x));
            }
            set {
                this.SetElement(noSeqOprXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Remark
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (AacUid, codeType, codeOpr?, noSeqOpr?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual txtRmk txtRmk {
            get {
                XElement x = this.GetElement(txtRmkXName);
                return ((txtRmk)(x));
            }
            set {
                this.SetElement(txtRmkXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string source {
            get {
                XAttribute x = this.Attribute(sourceXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(sourceXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<AirspaceAssocType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(AacUidXName, typeof(AirspaceAssocUidType));
            localElementDictionary.Add(codeTypeXName, typeof(codeTypeAssocAs));
            localElementDictionary.Add(codeOprXName, typeof(codeOpr));
            localElementDictionary.Add(noSeqOprXName, typeof(noSeq));
            localElementDictionary.Add(txtRmkXName, typeof(txtRmk));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// DEPRECATED-4.0
    /// </para>
    /// <para>
    /// [Deprecated] Airspace association - UID
    /// </para>
    /// <para>
    /// Regular expression: (AseUidChi, AseUidPar)
    /// </para>
    /// </summary>
    public partial class AirspaceAssocUidType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName AseUidChiXName = System.Xml.Linq.XName.Get("AseUidChi", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName AseUidParXName = System.Xml.Linq.XName.Get("AseUidPar", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName midXName = System.Xml.Linq.XName.Get("mid", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("AirspaceAssocUidType", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator AirspaceAssocUidType(XElement xe) { return XTypedServices.ToXTypedElement<AirspaceAssocUidType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static AirspaceAssocUidType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(AseUidChiXName), new NamedContentModelEntity(AseUidParXName));
        }
        
        /// <summary>
        /// <para>
        /// DEPRECATED-4.0
        /// </para>
        /// <para>
        /// [Deprecated] Airspace association - UID
        /// </para>
        /// <para>
        /// Regular expression: (AseUidChi, AseUidPar)
        /// </para>
        /// </summary>
        public AirspaceAssocUidType() {
        }
        
        /// <summary>
        /// <para>
        /// Airspace association is having as child Airspace
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (AseUidChi, AseUidPar)
        /// </para>
        /// </summary>
        public virtual AirspaceUidType AseUidChi {
            get {
                XElement x = this.GetElement(AseUidChiXName);
                return ((AirspaceUidType)(x));
            }
            set {
                this.SetElement(AseUidChiXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Airspace association is having as parent Airspace
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (AseUidChi, AseUidPar)
        /// </para>
        /// </summary>
        public virtual AirspaceUidType AseUidPar {
            get {
                XElement x = this.GetElement(AseUidParXName);
                return ((AirspaceUidType)(x));
            }
            set {
                this.SetElement(AseUidParXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string mid {
            get {
                XAttribute x = this.Attribute(midXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(midXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<AirspaceAssocUidType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(AseUidChiXName, typeof(AirspaceUidType));
            localElementDictionary.Add(AseUidParXName, typeof(AirspaceUidType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Authority responsible for airspace
    /// </para>
    /// <para>
    /// Regular expression: (OfaUid, codeType?, txtRmk?)
    /// </para>
    /// </summary>
    public partial class AirspaceAuthorityType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName OfaUidXName = System.Xml.Linq.XName.Get("OfaUid", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName codeTypeXName = System.Xml.Linq.XName.Get("codeType", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName txtRmkXName = System.Xml.Linq.XName.Get("txtRmk", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName sourceXName = System.Xml.Linq.XName.Get("source", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("AirspaceAuthorityType", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator AirspaceAuthorityType(XElement xe) { return XTypedServices.ToXTypedElement<AirspaceAuthorityType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static AirspaceAuthorityType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(OfaUidXName), new NamedContentModelEntity(codeTypeXName), new NamedContentModelEntity(txtRmkXName));
        }
        
        /// <summary>
        /// <para>
        /// Authority responsible for airspace
        /// </para>
        /// <para>
        /// Regular expression: (OfaUid, codeType?, txtRmk?)
        /// </para>
        /// </summary>
        public AirspaceAuthorityType() {
        }
        
        /// <summary>
        /// <para>
        /// a version of Authority responsible for airspace
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (OfaUid, codeType?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual AirspaceAuthorityUidType OfaUid {
            get {
                XElement x = this.GetElement(OfaUidXName);
                return ((AirspaceAuthorityUidType)(x));
            }
            set {
                this.SetElement(OfaUidXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Type
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (OfaUid, codeType?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual codeTypeAsAuth codeType {
            get {
                XElement x = this.GetElement(codeTypeXName);
                return ((codeTypeAsAuth)(x));
            }
            set {
                this.SetElement(codeTypeXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Remark
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (OfaUid, codeType?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual txtRmk txtRmk {
            get {
                XElement x = this.GetElement(txtRmkXName);
                return ((txtRmk)(x));
            }
            set {
                this.SetElement(txtRmkXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string source {
            get {
                XAttribute x = this.Attribute(sourceXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(sourceXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<AirspaceAuthorityType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(OfaUidXName, typeof(AirspaceAuthorityUidType));
            localElementDictionary.Add(codeTypeXName, typeof(codeTypeAsAuth));
            localElementDictionary.Add(txtRmkXName, typeof(txtRmk));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Authority responsible for airspace - UID
    /// </para>
    /// <para>
    /// Regular expression: (AseUid, OrgUid)
    /// </para>
    /// </summary>
    public partial class AirspaceAuthorityUidType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName AseUidXName = System.Xml.Linq.XName.Get("AseUid", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName OrgUidXName = System.Xml.Linq.XName.Get("OrgUid", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName midXName = System.Xml.Linq.XName.Get("mid", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("AirspaceAuthorityUidType", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator AirspaceAuthorityUidType(XElement xe) { return XTypedServices.ToXTypedElement<AirspaceAuthorityUidType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static AirspaceAuthorityUidType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(AseUidXName), new NamedContentModelEntity(OrgUidXName));
        }
        
        /// <summary>
        /// <para>
        /// Authority responsible for airspace - UID
        /// </para>
        /// <para>
        /// Regular expression: (AseUid, OrgUid)
        /// </para>
        /// </summary>
        public AirspaceAuthorityUidType() {
        }
        
        /// <summary>
        /// <para>
        /// Authority responsible for airspace is responsible for Airspace
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (AseUid, OrgUid)
        /// </para>
        /// </summary>
        public virtual AirspaceUidType AseUid {
            get {
                XElement x = this.GetElement(AseUidXName);
                return ((AirspaceUidType)(x));
            }
            set {
                this.SetElement(AseUidXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Authority responsible for airspace is also Organisaton or authority
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (AseUid, OrgUid)
        /// </para>
        /// </summary>
        public virtual OrganisationAuthorityUidType OrgUid {
            get {
                XElement x = this.GetElement(OrgUidXName);
                return ((OrganisationAuthorityUidType)(x));
            }
            set {
                this.SetElement(OrgUidXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string mid {
            get {
                XAttribute x = this.Attribute(midXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(midXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<AirspaceAuthorityUidType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(AseUidXName, typeof(AirspaceUidType));
            localElementDictionary.Add(OrgUidXName, typeof(OrganisationAuthorityUidType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Airspace border as crossing condition
    /// </para>
    /// <para>
    /// Regular expression: (AseUidFrom, AseUidInto)
    /// </para>
    /// </summary>
    public partial class AirspaceBorderCrossingType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName AseUidFromXName = System.Xml.Linq.XName.Get("AseUidFrom", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName AseUidIntoXName = System.Xml.Linq.XName.Get("AseUidInto", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("AirspaceBorderCrossingType", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator AirspaceBorderCrossingType(XElement xe) { return XTypedServices.ToXTypedElement<AirspaceBorderCrossingType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static AirspaceBorderCrossingType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(AseUidFromXName), new NamedContentModelEntity(AseUidIntoXName));
        }
        
        /// <summary>
        /// <para>
        /// Airspace border as crossing condition
        /// </para>
        /// <para>
        /// Regular expression: (AseUidFrom, AseUidInto)
        /// </para>
        /// </summary>
        public AirspaceBorderCrossingType() {
        }
        
        /// <summary>
        /// <para>
        /// Airspace border as crossing condition is occurring when comming from Airspace
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (AseUidFrom, AseUidInto)
        /// </para>
        /// </summary>
        public virtual AirspaceUidType AseUidFrom {
            get {
                XElement x = this.GetElement(AseUidFromXName);
                return ((AirspaceUidType)(x));
            }
            set {
                this.SetElement(AseUidFromXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Airspace border as crossing condition is occurring when going into Airspace
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (AseUidFrom, AseUidInto)
        /// </para>
        /// </summary>
        public virtual AirspaceUidType AseUidInto {
            get {
                XElement x = this.GetElement(AseUidIntoXName);
                return ((AirspaceUidType)(x));
            }
            set {
                this.SetElement(AseUidIntoXName, value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<AirspaceBorderCrossingType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(AseUidFromXName, typeof(AirspaceUidType));
            localElementDictionary.Add(AseUidIntoXName, typeof(AirspaceUidType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Airspace border
    /// </para>
    /// <para>
    /// Regular expression: (AbdUid, txtRmk?, (Avx+ | Circle))
    /// </para>
    /// </summary>
    public partial class AirspaceBorderType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName AbdUidXName = System.Xml.Linq.XName.Get("AbdUid", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName txtRmkXName = System.Xml.Linq.XName.Get("txtRmk", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName AvxXName = System.Xml.Linq.XName.Get("Avx", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<AirspaceBorderVertexType> AvxField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName CircleXName = System.Xml.Linq.XName.Get("Circle", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName sourceXName = System.Xml.Linq.XName.Get("source", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("AirspaceBorderType", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator AirspaceBorderType(XElement xe) { return XTypedServices.ToXTypedElement<AirspaceBorderType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static AirspaceBorderType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(AbdUidXName), new NamedContentModelEntity(txtRmkXName), new ChoiceContentModelEntity(new NamedContentModelEntity(AvxXName), new NamedContentModelEntity(CircleXName)));
        }
        
        /// <summary>
        /// <para>
        /// Airspace border
        /// </para>
        /// <para>
        /// Regular expression: (AbdUid, txtRmk?, (Avx+ | Circle))
        /// </para>
        /// </summary>
        public AirspaceBorderType() {
        }
        
        /// <summary>
        /// <para>
        /// a version of Airspace border
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (AbdUid, txtRmk?, (Avx+ | Circle))
        /// </para>
        /// </summary>
        public virtual AirspaceBorderUidType AbdUid {
            get {
                XElement x = this.GetElement(AbdUidXName);
                return ((AirspaceBorderUidType)(x));
            }
            set {
                this.SetElement(AbdUidXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Remark
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (AbdUid, txtRmk?, (Avx+ | Circle))
        /// </para>
        /// </summary>
        public virtual txtRmk txtRmk {
            get {
                XElement x = this.GetElement(txtRmkXName);
                return ((txtRmk)(x));
            }
            set {
                this.SetElement(txtRmkXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Airspace border is made of a sequence of vertex
        /// </para>
        /// <para>
        /// Occurrence: required, repeating, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (AbdUid, txtRmk?, (Avx+ | Circle))
        /// </para>
        /// </summary>
        public virtual IList<AirspaceBorderVertexType> Avx {
            get {
                if ((this.AvxField == null)) {
                    this.AvxField = new XTypedList<AirspaceBorderVertexType>(this, LinqToXsdTypeManager.Instance, AvxXName);
                }
                return this.AvxField;
            }
            set {
                if ((value == null)) {
                    this.AvxField = null;
                }
                else {
                    if ((this.AvxField == null)) {
                        this.AvxField = XTypedList<AirspaceBorderVertexType>.Initialize(this, LinqToXsdTypeManager.Instance, value, AvxXName);
                    }
                    else {
                        XTypedServices.SetList<AirspaceBorderVertexType>(this.AvxField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Airspace border is made of one circular vertex
        /// </para>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (AbdUid, txtRmk?, (Avx+ | Circle))
        /// </para>
        /// </summary>
        public virtual AirspaceCircularVertexType Circle {
            get {
                XElement x = this.GetElement(CircleXName);
                return ((AirspaceCircularVertexType)(x));
            }
            set {
                this.SetElement(CircleXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string source {
            get {
                XAttribute x = this.Attribute(sourceXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(sourceXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<AirspaceBorderType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(AbdUidXName, typeof(AirspaceBorderUidType));
            localElementDictionary.Add(txtRmkXName, typeof(txtRmk));
            localElementDictionary.Add(AvxXName, typeof(AirspaceBorderVertexType));
            localElementDictionary.Add(CircleXName, typeof(AirspaceCircularVertexType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Airspace border - UID
    /// </para>
    /// <para>
    /// Regular expression: (AseUid)
    /// </para>
    /// </summary>
    public partial class AirspaceBorderUidType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName AseUidXName = System.Xml.Linq.XName.Get("AseUid", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName midXName = System.Xml.Linq.XName.Get("mid", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("AirspaceBorderUidType", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator AirspaceBorderUidType(XElement xe) { return XTypedServices.ToXTypedElement<AirspaceBorderUidType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static AirspaceBorderUidType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(AseUidXName));
        }
        
        /// <summary>
        /// <para>
        /// Airspace border - UID
        /// </para>
        /// <para>
        /// Regular expression: (AseUid)
        /// </para>
        /// </summary>
        public AirspaceBorderUidType() {
        }
        
        /// <summary>
        /// <para>
        /// Airspace border is describing the horizontal boundary of Airspace
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (AseUid)
        /// </para>
        /// </summary>
        public virtual AirspaceUidType AseUid {
            get {
                XElement x = this.GetElement(AseUidXName);
                return ((AirspaceUidType)(x));
            }
            set {
                this.SetElement(AseUidXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string mid {
            get {
                XAttribute x = this.Attribute(midXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(midXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<AirspaceBorderUidType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(AseUidXName, typeof(AirspaceUidType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Airspace border vertex
    /// </para>
    /// <para>
    /// Regular expression: (GbrUid?, (TcnUidSpn | VorUidSpn | DpnUidSpn | NdbUidSpn | DmeUidSpn | MkrUidSpn)?, (TcnUidCen | VorUidCen | DpnUidCen | NdbUidCen | DmeUidCen | MkrUidCen)?, codeType, geoLat, geoLong, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, geoLatArc?, geoLongArc?, valRadiusArc?, uomRadiusArc?, valCrc?, txtRmk?)
    /// </para>
    /// </summary>
    public partial class AirspaceBorderVertexType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName GbrUidXName = System.Xml.Linq.XName.Get("GbrUid", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TcnUidSpnXName = System.Xml.Linq.XName.Get("TcnUidSpn", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName VorUidSpnXName = System.Xml.Linq.XName.Get("VorUidSpn", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName DpnUidSpnXName = System.Xml.Linq.XName.Get("DpnUidSpn", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName NdbUidSpnXName = System.Xml.Linq.XName.Get("NdbUidSpn", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName DmeUidSpnXName = System.Xml.Linq.XName.Get("DmeUidSpn", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName MkrUidSpnXName = System.Xml.Linq.XName.Get("MkrUidSpn", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TcnUidCenXName = System.Xml.Linq.XName.Get("TcnUidCen", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName VorUidCenXName = System.Xml.Linq.XName.Get("VorUidCen", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName DpnUidCenXName = System.Xml.Linq.XName.Get("DpnUidCen", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName NdbUidCenXName = System.Xml.Linq.XName.Get("NdbUidCen", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName DmeUidCenXName = System.Xml.Linq.XName.Get("DmeUidCen", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName MkrUidCenXName = System.Xml.Linq.XName.Get("MkrUidCen", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName codeTypeXName = System.Xml.Linq.XName.Get("codeType", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName geoLatXName = System.Xml.Linq.XName.Get("geoLat", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName geoLongXName = System.Xml.Linq.XName.Get("geoLong", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName codeDatumXName = System.Xml.Linq.XName.Get("codeDatum", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName valGeoAccuracyXName = System.Xml.Linq.XName.Get("valGeoAccuracy", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName uomGeoAccuracyXName = System.Xml.Linq.XName.Get("uomGeoAccuracy", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName geoLatArcXName = System.Xml.Linq.XName.Get("geoLatArc", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName geoLongArcXName = System.Xml.Linq.XName.Get("geoLongArc", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName valRadiusArcXName = System.Xml.Linq.XName.Get("valRadiusArc", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName uomRadiusArcXName = System.Xml.Linq.XName.Get("uomRadiusArc", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName valCrcXName = System.Xml.Linq.XName.Get("valCrc", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName txtRmkXName = System.Xml.Linq.XName.Get("txtRmk", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("AirspaceBorderVertexType", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator AirspaceBorderVertexType(XElement xe) { return XTypedServices.ToXTypedElement<AirspaceBorderVertexType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static AirspaceBorderVertexType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(GbrUidXName), new ChoiceContentModelEntity(new NamedContentModelEntity(TcnUidSpnXName), new NamedContentModelEntity(VorUidSpnXName), new NamedContentModelEntity(DpnUidSpnXName), new NamedContentModelEntity(NdbUidSpnXName), new NamedContentModelEntity(DmeUidSpnXName), new NamedContentModelEntity(MkrUidSpnXName)), new ChoiceContentModelEntity(new NamedContentModelEntity(TcnUidCenXName), new NamedContentModelEntity(VorUidCenXName), new NamedContentModelEntity(DpnUidCenXName), new NamedContentModelEntity(NdbUidCenXName), new NamedContentModelEntity(DmeUidCenXName), new NamedContentModelEntity(MkrUidCenXName)), new NamedContentModelEntity(codeTypeXName), new NamedContentModelEntity(geoLatXName), new NamedContentModelEntity(geoLongXName), new NamedContentModelEntity(codeDatumXName), new NamedContentModelEntity(valGeoAccuracyXName), new NamedContentModelEntity(uomGeoAccuracyXName), new NamedContentModelEntity(geoLatArcXName), new NamedContentModelEntity(geoLongArcXName), new NamedContentModelEntity(valRadiusArcXName), new NamedContentModelEntity(uomRadiusArcXName), new NamedContentModelEntity(valCrcXName), new NamedContentModelEntity(txtRmkXName));
        }
        
        /// <summary>
        /// <para>
        /// Airspace border vertex
        /// </para>
        /// <para>
        /// Regular expression: (GbrUid?, (TcnUidSpn | VorUidSpn | DpnUidSpn | NdbUidSpn | DmeUidSpn | MkrUidSpn)?, (TcnUidCen | VorUidCen | DpnUidCen | NdbUidCen | DmeUidCen | MkrUidCen)?, codeType, geoLat, geoLong, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, geoLatArc?, geoLongArc?, valRadiusArc?, uomRadiusArc?, valCrc?, txtRmk?)
        /// </para>
        /// </summary>
        public AirspaceBorderVertexType() {
        }
        
        /// <summary>
        /// <para>
        /// Airspace vertex is based on a portion of Physical or political border
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (GbrUid?, (TcnUidSpn | VorUidSpn | DpnUidSpn | NdbUidSpn | DmeUidSpn | MkrUidSpn)?, (TcnUidCen | VorUidCen | DpnUidCen | NdbUidCen | DmeUidCen | MkrUidCen)?, codeType, geoLat, geoLong, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, geoLatArc?, geoLongArc?, valRadiusArc?, uomRadiusArc?, valCrc?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual GeographicalBorderUidType GbrUid {
            get {
                XElement x = this.GetElement(GbrUidXName);
                return ((GeographicalBorderUidType)(x));
            }
            set {
                this.SetElement(GbrUidXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Significant point is at Tactical air navigation beacon [TACAN]
        /// </para>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (GbrUid?, (TcnUidSpn | VorUidSpn | DpnUidSpn | NdbUidSpn | DmeUidSpn | MkrUidSpn)?, (TcnUidCen | VorUidCen | DpnUidCen | NdbUidCen | DmeUidCen | MkrUidCen)?, codeType, geoLat, geoLong, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, geoLatArc?, geoLongArc?, valRadiusArc?, uomRadiusArc?, valCrc?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual TacanUidType TcnUidSpn {
            get {
                XElement x = this.GetElement(TcnUidSpnXName);
                return ((TacanUidType)(x));
            }
            set {
                this.SetElement(TcnUidSpnXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Significant point is at VHF omnidirectional radio range beacon [VOR]
        /// </para>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (GbrUid?, (TcnUidSpn | VorUidSpn | DpnUidSpn | NdbUidSpn | DmeUidSpn | MkrUidSpn)?, (TcnUidCen | VorUidCen | DpnUidCen | NdbUidCen | DmeUidCen | MkrUidCen)?, codeType, geoLat, geoLong, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, geoLatArc?, geoLongArc?, valRadiusArc?, uomRadiusArc?, valCrc?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual VorUidType VorUidSpn {
            get {
                XElement x = this.GetElement(VorUidSpnXName);
                return ((VorUidType)(x));
            }
            set {
                this.SetElement(VorUidSpnXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Significant point is at Designated point
        /// </para>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (GbrUid?, (TcnUidSpn | VorUidSpn | DpnUidSpn | NdbUidSpn | DmeUidSpn | MkrUidSpn)?, (TcnUidCen | VorUidCen | DpnUidCen | NdbUidCen | DmeUidCen | MkrUidCen)?, codeType, geoLat, geoLong, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, geoLatArc?, geoLongArc?, valRadiusArc?, uomRadiusArc?, valCrc?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual DesignatedPointUidType DpnUidSpn {
            get {
                XElement x = this.GetElement(DpnUidSpnXName);
                return ((DesignatedPointUidType)(x));
            }
            set {
                this.SetElement(DpnUidSpnXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Significant point is at Non-directional radio beacon [NDB]
        /// </para>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (GbrUid?, (TcnUidSpn | VorUidSpn | DpnUidSpn | NdbUidSpn | DmeUidSpn | MkrUidSpn)?, (TcnUidCen | VorUidCen | DpnUidCen | NdbUidCen | DmeUidCen | MkrUidCen)?, codeType, geoLat, geoLong, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, geoLatArc?, geoLongArc?, valRadiusArc?, uomRadiusArc?, valCrc?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual NdbUidType NdbUidSpn {
            get {
                XElement x = this.GetElement(NdbUidSpnXName);
                return ((NdbUidType)(x));
            }
            set {
                this.SetElement(NdbUidSpnXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Significant point is at Distance measuring equipment [DME]
        /// </para>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (GbrUid?, (TcnUidSpn | VorUidSpn | DpnUidSpn | NdbUidSpn | DmeUidSpn | MkrUidSpn)?, (TcnUidCen | VorUidCen | DpnUidCen | NdbUidCen | DmeUidCen | MkrUidCen)?, codeType, geoLat, geoLong, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, geoLatArc?, geoLongArc?, valRadiusArc?, uomRadiusArc?, valCrc?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual DmeUidType DmeUidSpn {
            get {
                XElement x = this.GetElement(DmeUidSpnXName);
                return ((DmeUidType)(x));
            }
            set {
                this.SetElement(DmeUidSpnXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Significant point is at Marker [MKR]
        /// </para>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (GbrUid?, (TcnUidSpn | VorUidSpn | DpnUidSpn | NdbUidSpn | DmeUidSpn | MkrUidSpn)?, (TcnUidCen | VorUidCen | DpnUidCen | NdbUidCen | DmeUidCen | MkrUidCen)?, codeType, geoLat, geoLong, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, geoLatArc?, geoLongArc?, valRadiusArc?, uomRadiusArc?, valCrc?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual MkrUidType MkrUidSpn {
            get {
                XElement x = this.GetElement(MkrUidSpnXName);
                return ((MkrUidType)(x));
            }
            set {
                this.SetElement(MkrUidSpnXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Significant point used as arc centre is at Tactical air navigation beacon [TACAN]
        /// </para>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (GbrUid?, (TcnUidSpn | VorUidSpn | DpnUidSpn | NdbUidSpn | DmeUidSpn | MkrUidSpn)?, (TcnUidCen | VorUidCen | DpnUidCen | NdbUidCen | DmeUidCen | MkrUidCen)?, codeType, geoLat, geoLong, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, geoLatArc?, geoLongArc?, valRadiusArc?, uomRadiusArc?, valCrc?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual TacanUidType TcnUidCen {
            get {
                XElement x = this.GetElement(TcnUidCenXName);
                return ((TacanUidType)(x));
            }
            set {
                this.SetElement(TcnUidCenXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Significant point used as arc centre is at VHF omnidirectional radio range beacon [VOR]
        /// </para>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (GbrUid?, (TcnUidSpn | VorUidSpn | DpnUidSpn | NdbUidSpn | DmeUidSpn | MkrUidSpn)?, (TcnUidCen | VorUidCen | DpnUidCen | NdbUidCen | DmeUidCen | MkrUidCen)?, codeType, geoLat, geoLong, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, geoLatArc?, geoLongArc?, valRadiusArc?, uomRadiusArc?, valCrc?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual VorUidType VorUidCen {
            get {
                XElement x = this.GetElement(VorUidCenXName);
                return ((VorUidType)(x));
            }
            set {
                this.SetElement(VorUidCenXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Significant point used as arc centre is at Designated point
        /// </para>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (GbrUid?, (TcnUidSpn | VorUidSpn | DpnUidSpn | NdbUidSpn | DmeUidSpn | MkrUidSpn)?, (TcnUidCen | VorUidCen | DpnUidCen | NdbUidCen | DmeUidCen | MkrUidCen)?, codeType, geoLat, geoLong, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, geoLatArc?, geoLongArc?, valRadiusArc?, uomRadiusArc?, valCrc?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual DesignatedPointUidType DpnUidCen {
            get {
                XElement x = this.GetElement(DpnUidCenXName);
                return ((DesignatedPointUidType)(x));
            }
            set {
                this.SetElement(DpnUidCenXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Significant point used as arc centre is at Non-directional radio beacon [NDB]
        /// </para>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (GbrUid?, (TcnUidSpn | VorUidSpn | DpnUidSpn | NdbUidSpn | DmeUidSpn | MkrUidSpn)?, (TcnUidCen | VorUidCen | DpnUidCen | NdbUidCen | DmeUidCen | MkrUidCen)?, codeType, geoLat, geoLong, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, geoLatArc?, geoLongArc?, valRadiusArc?, uomRadiusArc?, valCrc?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual NdbUidType NdbUidCen {
            get {
                XElement x = this.GetElement(NdbUidCenXName);
                return ((NdbUidType)(x));
            }
            set {
                this.SetElement(NdbUidCenXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Significant point used as arc centre is at Distance measuring equipment [DME]
        /// </para>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (GbrUid?, (TcnUidSpn | VorUidSpn | DpnUidSpn | NdbUidSpn | DmeUidSpn | MkrUidSpn)?, (TcnUidCen | VorUidCen | DpnUidCen | NdbUidCen | DmeUidCen | MkrUidCen)?, codeType, geoLat, geoLong, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, geoLatArc?, geoLongArc?, valRadiusArc?, uomRadiusArc?, valCrc?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual DmeUidType DmeUidCen {
            get {
                XElement x = this.GetElement(DmeUidCenXName);
                return ((DmeUidType)(x));
            }
            set {
                this.SetElement(DmeUidCenXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Significant point used as arc centre is at Marker [MKR]
        /// </para>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (GbrUid?, (TcnUidSpn | VorUidSpn | DpnUidSpn | NdbUidSpn | DmeUidSpn | MkrUidSpn)?, (TcnUidCen | VorUidCen | DpnUidCen | NdbUidCen | DmeUidCen | MkrUidCen)?, codeType, geoLat, geoLong, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, geoLatArc?, geoLongArc?, valRadiusArc?, uomRadiusArc?, valCrc?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual MkrUidType MkrUidCen {
            get {
                XElement x = this.GetElement(MkrUidCenXName);
                return ((MkrUidType)(x));
            }
            set {
                this.SetElement(MkrUidCenXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Type
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (GbrUid?, (TcnUidSpn | VorUidSpn | DpnUidSpn | NdbUidSpn | DmeUidSpn | MkrUidSpn)?, (TcnUidCen | VorUidCen | DpnUidCen | NdbUidCen | DmeUidCen | MkrUidCen)?, codeType, geoLat, geoLong, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, geoLatArc?, geoLongArc?, valRadiusArc?, uomRadiusArc?, valCrc?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual codeTypeAirspaceVertex codeType {
            get {
                XElement x = this.GetElement(codeTypeXName);
                return ((codeTypeAirspaceVertex)(x));
            }
            set {
                this.SetElement(codeTypeXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Latitude
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (GbrUid?, (TcnUidSpn | VorUidSpn | DpnUidSpn | NdbUidSpn | DmeUidSpn | MkrUidSpn)?, (TcnUidCen | VorUidCen | DpnUidCen | NdbUidCen | DmeUidCen | MkrUidCen)?, codeType, geoLat, geoLong, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, geoLatArc?, geoLongArc?, valRadiusArc?, uomRadiusArc?, valCrc?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual geoLat geoLat {
            get {
                XElement x = this.GetElement(geoLatXName);
                return ((geoLat)(x));
            }
            set {
                this.SetElement(geoLatXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Longitude
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (GbrUid?, (TcnUidSpn | VorUidSpn | DpnUidSpn | NdbUidSpn | DmeUidSpn | MkrUidSpn)?, (TcnUidCen | VorUidCen | DpnUidCen | NdbUidCen | DmeUidCen | MkrUidCen)?, codeType, geoLat, geoLong, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, geoLatArc?, geoLongArc?, valRadiusArc?, uomRadiusArc?, valCrc?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual geoLong geoLong {
            get {
                XElement x = this.GetElement(geoLongXName);
                return ((geoLong)(x));
            }
            set {
                this.SetElement(geoLongXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Datum
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (GbrUid?, (TcnUidSpn | VorUidSpn | DpnUidSpn | NdbUidSpn | DmeUidSpn | MkrUidSpn)?, (TcnUidCen | VorUidCen | DpnUidCen | NdbUidCen | DmeUidCen | MkrUidCen)?, codeType, geoLat, geoLong, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, geoLatArc?, geoLongArc?, valRadiusArc?, uomRadiusArc?, valCrc?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual codeDatum codeDatum {
            get {
                XElement x = this.GetElement(codeDatumXName);
                return ((codeDatum)(x));
            }
            set {
                this.SetElement(codeDatumXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Geographical accuracy
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (GbrUid?, (TcnUidSpn | VorUidSpn | DpnUidSpn | NdbUidSpn | DmeUidSpn | MkrUidSpn)?, (TcnUidCen | VorUidCen | DpnUidCen | NdbUidCen | DmeUidCen | MkrUidCen)?, codeType, geoLat, geoLong, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, geoLatArc?, geoLongArc?, valRadiusArc?, uomRadiusArc?, valCrc?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual valDistHorz valGeoAccuracy {
            get {
                XElement x = this.GetElement(valGeoAccuracyXName);
                return ((valDistHorz)(x));
            }
            set {
                this.SetElement(valGeoAccuracyXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Unit of measurement [geographical accuracy]
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (GbrUid?, (TcnUidSpn | VorUidSpn | DpnUidSpn | NdbUidSpn | DmeUidSpn | MkrUidSpn)?, (TcnUidCen | VorUidCen | DpnUidCen | NdbUidCen | DmeUidCen | MkrUidCen)?, codeType, geoLat, geoLong, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, geoLatArc?, geoLongArc?, valRadiusArc?, uomRadiusArc?, valCrc?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual uomDistHorz uomGeoAccuracy {
            get {
                XElement x = this.GetElement(uomGeoAccuracyXName);
                return ((uomDistHorz)(x));
            }
            set {
                this.SetElement(uomGeoAccuracyXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Latitude for arc
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (GbrUid?, (TcnUidSpn | VorUidSpn | DpnUidSpn | NdbUidSpn | DmeUidSpn | MkrUidSpn)?, (TcnUidCen | VorUidCen | DpnUidCen | NdbUidCen | DmeUidCen | MkrUidCen)?, codeType, geoLat, geoLong, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, geoLatArc?, geoLongArc?, valRadiusArc?, uomRadiusArc?, valCrc?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual geoLat geoLatArc {
            get {
                XElement x = this.GetElement(geoLatArcXName);
                return ((geoLat)(x));
            }
            set {
                this.SetElement(geoLatArcXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Longitude for arc
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (GbrUid?, (TcnUidSpn | VorUidSpn | DpnUidSpn | NdbUidSpn | DmeUidSpn | MkrUidSpn)?, (TcnUidCen | VorUidCen | DpnUidCen | NdbUidCen | DmeUidCen | MkrUidCen)?, codeType, geoLat, geoLong, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, geoLatArc?, geoLongArc?, valRadiusArc?, uomRadiusArc?, valCrc?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual geoLong geoLongArc {
            get {
                XElement x = this.GetElement(geoLongArcXName);
                return ((geoLong)(x));
            }
            set {
                this.SetElement(geoLongArcXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Radius of arc
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (GbrUid?, (TcnUidSpn | VorUidSpn | DpnUidSpn | NdbUidSpn | DmeUidSpn | MkrUidSpn)?, (TcnUidCen | VorUidCen | DpnUidCen | NdbUidCen | DmeUidCen | MkrUidCen)?, codeType, geoLat, geoLong, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, geoLatArc?, geoLongArc?, valRadiusArc?, uomRadiusArc?, valCrc?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual valDistHorz valRadiusArc {
            get {
                XElement x = this.GetElement(valRadiusArcXName);
                return ((valDistHorz)(x));
            }
            set {
                this.SetElement(valRadiusArcXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Unit of measurement [arc, circle radius]
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (GbrUid?, (TcnUidSpn | VorUidSpn | DpnUidSpn | NdbUidSpn | DmeUidSpn | MkrUidSpn)?, (TcnUidCen | VorUidCen | DpnUidCen | NdbUidCen | DmeUidCen | MkrUidCen)?, codeType, geoLat, geoLong, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, geoLatArc?, geoLongArc?, valRadiusArc?, uomRadiusArc?, valCrc?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual uomDistHorz uomRadiusArc {
            get {
                XElement x = this.GetElement(uomRadiusArcXName);
                return ((uomDistHorz)(x));
            }
            set {
                this.SetElement(uomRadiusArcXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Cyclic redundancy check
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (GbrUid?, (TcnUidSpn | VorUidSpn | DpnUidSpn | NdbUidSpn | DmeUidSpn | MkrUidSpn)?, (TcnUidCen | VorUidCen | DpnUidCen | NdbUidCen | DmeUidCen | MkrUidCen)?, codeType, geoLat, geoLong, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, geoLatArc?, geoLongArc?, valRadiusArc?, uomRadiusArc?, valCrc?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual valHex valCrc {
            get {
                XElement x = this.GetElement(valCrcXName);
                return ((valHex)(x));
            }
            set {
                this.SetElement(valCrcXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Remark
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (GbrUid?, (TcnUidSpn | VorUidSpn | DpnUidSpn | NdbUidSpn | DmeUidSpn | MkrUidSpn)?, (TcnUidCen | VorUidCen | DpnUidCen | NdbUidCen | DmeUidCen | MkrUidCen)?, codeType, geoLat, geoLong, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, geoLatArc?, geoLongArc?, valRadiusArc?, uomRadiusArc?, valCrc?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual txtRmk txtRmk {
            get {
                XElement x = this.GetElement(txtRmkXName);
                return ((txtRmk)(x));
            }
            set {
                this.SetElement(txtRmkXName, value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<AirspaceBorderVertexType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(GbrUidXName, typeof(GeographicalBorderUidType));
            localElementDictionary.Add(TcnUidSpnXName, typeof(TacanUidType));
            localElementDictionary.Add(VorUidSpnXName, typeof(VorUidType));
            localElementDictionary.Add(DpnUidSpnXName, typeof(DesignatedPointUidType));
            localElementDictionary.Add(NdbUidSpnXName, typeof(NdbUidType));
            localElementDictionary.Add(DmeUidSpnXName, typeof(DmeUidType));
            localElementDictionary.Add(MkrUidSpnXName, typeof(MkrUidType));
            localElementDictionary.Add(TcnUidCenXName, typeof(TacanUidType));
            localElementDictionary.Add(VorUidCenXName, typeof(VorUidType));
            localElementDictionary.Add(DpnUidCenXName, typeof(DesignatedPointUidType));
            localElementDictionary.Add(NdbUidCenXName, typeof(NdbUidType));
            localElementDictionary.Add(DmeUidCenXName, typeof(DmeUidType));
            localElementDictionary.Add(MkrUidCenXName, typeof(MkrUidType));
            localElementDictionary.Add(codeTypeXName, typeof(codeTypeAirspaceVertex));
            localElementDictionary.Add(geoLatXName, typeof(geoLat));
            localElementDictionary.Add(geoLongXName, typeof(geoLong));
            localElementDictionary.Add(codeDatumXName, typeof(codeDatum));
            localElementDictionary.Add(valGeoAccuracyXName, typeof(valDistHorz));
            localElementDictionary.Add(uomGeoAccuracyXName, typeof(uomDistHorz));
            localElementDictionary.Add(geoLatArcXName, typeof(geoLat));
            localElementDictionary.Add(geoLongArcXName, typeof(geoLong));
            localElementDictionary.Add(valRadiusArcXName, typeof(valDistHorz));
            localElementDictionary.Add(uomRadiusArcXName, typeof(uomDistHorz));
            localElementDictionary.Add(valCrcXName, typeof(valHex));
            localElementDictionary.Add(txtRmkXName, typeof(txtRmk));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Airspace centreline vertex
    /// </para>
    /// <para>
    /// Regular expression: ((TcnUidSpn | VorUidSpn | DpnUidSpn | NdbUidSpn | DmeUidSpn | MkrUidSpn)?, (TcnUidCen | VorUidCen | DpnUidCen | NdbUidCen | DmeUidCen | MkrUidCen)?, codeType, geoLat, geoLong, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, geoLatArc?, geoLongArc?, valRadiusArc?, uomRadiusArc?, valCrc?, txtRmk?)
    /// </para>
    /// </summary>
    public partial class AirspaceCentrelineVertexType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TcnUidSpnXName = System.Xml.Linq.XName.Get("TcnUidSpn", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName VorUidSpnXName = System.Xml.Linq.XName.Get("VorUidSpn", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName DpnUidSpnXName = System.Xml.Linq.XName.Get("DpnUidSpn", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName NdbUidSpnXName = System.Xml.Linq.XName.Get("NdbUidSpn", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName DmeUidSpnXName = System.Xml.Linq.XName.Get("DmeUidSpn", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName MkrUidSpnXName = System.Xml.Linq.XName.Get("MkrUidSpn", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TcnUidCenXName = System.Xml.Linq.XName.Get("TcnUidCen", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName VorUidCenXName = System.Xml.Linq.XName.Get("VorUidCen", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName DpnUidCenXName = System.Xml.Linq.XName.Get("DpnUidCen", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName NdbUidCenXName = System.Xml.Linq.XName.Get("NdbUidCen", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName DmeUidCenXName = System.Xml.Linq.XName.Get("DmeUidCen", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName MkrUidCenXName = System.Xml.Linq.XName.Get("MkrUidCen", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName codeTypeXName = System.Xml.Linq.XName.Get("codeType", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName geoLatXName = System.Xml.Linq.XName.Get("geoLat", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName geoLongXName = System.Xml.Linq.XName.Get("geoLong", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName codeDatumXName = System.Xml.Linq.XName.Get("codeDatum", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName valGeoAccuracyXName = System.Xml.Linq.XName.Get("valGeoAccuracy", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName uomGeoAccuracyXName = System.Xml.Linq.XName.Get("uomGeoAccuracy", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName geoLatArcXName = System.Xml.Linq.XName.Get("geoLatArc", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName geoLongArcXName = System.Xml.Linq.XName.Get("geoLongArc", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName valRadiusArcXName = System.Xml.Linq.XName.Get("valRadiusArc", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName uomRadiusArcXName = System.Xml.Linq.XName.Get("uomRadiusArc", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName valCrcXName = System.Xml.Linq.XName.Get("valCrc", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName txtRmkXName = System.Xml.Linq.XName.Get("txtRmk", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("AirspaceCentrelineVertexType", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator AirspaceCentrelineVertexType(XElement xe) { return XTypedServices.ToXTypedElement<AirspaceCentrelineVertexType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static AirspaceCentrelineVertexType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new ChoiceContentModelEntity(new NamedContentModelEntity(TcnUidSpnXName), new NamedContentModelEntity(VorUidSpnXName), new NamedContentModelEntity(DpnUidSpnXName), new NamedContentModelEntity(NdbUidSpnXName), new NamedContentModelEntity(DmeUidSpnXName), new NamedContentModelEntity(MkrUidSpnXName)), new ChoiceContentModelEntity(new NamedContentModelEntity(TcnUidCenXName), new NamedContentModelEntity(VorUidCenXName), new NamedContentModelEntity(DpnUidCenXName), new NamedContentModelEntity(NdbUidCenXName), new NamedContentModelEntity(DmeUidCenXName), new NamedContentModelEntity(MkrUidCenXName)), new NamedContentModelEntity(codeTypeXName), new NamedContentModelEntity(geoLatXName), new NamedContentModelEntity(geoLongXName), new NamedContentModelEntity(codeDatumXName), new NamedContentModelEntity(valGeoAccuracyXName), new NamedContentModelEntity(uomGeoAccuracyXName), new NamedContentModelEntity(geoLatArcXName), new NamedContentModelEntity(geoLongArcXName), new NamedContentModelEntity(valRadiusArcXName), new NamedContentModelEntity(uomRadiusArcXName), new NamedContentModelEntity(valCrcXName), new NamedContentModelEntity(txtRmkXName));
        }
        
        /// <summary>
        /// <para>
        /// Airspace centreline vertex
        /// </para>
        /// <para>
        /// Regular expression: ((TcnUidSpn | VorUidSpn | DpnUidSpn | NdbUidSpn | DmeUidSpn | MkrUidSpn)?, (TcnUidCen | VorUidCen | DpnUidCen | NdbUidCen | DmeUidCen | MkrUidCen)?, codeType, geoLat, geoLong, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, geoLatArc?, geoLongArc?, valRadiusArc?, uomRadiusArc?, valCrc?, txtRmk?)
        /// </para>
        /// </summary>
        public AirspaceCentrelineVertexType() {
        }
        
        /// <summary>
        /// <para>
        /// Significant point is at Tactical air navigation beacon [TACAN]
        /// </para>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((TcnUidSpn | VorUidSpn | DpnUidSpn | NdbUidSpn | DmeUidSpn | MkrUidSpn)?, (TcnUidCen | VorUidCen | DpnUidCen | NdbUidCen | DmeUidCen | MkrUidCen)?, codeType, geoLat, geoLong, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, geoLatArc?, geoLongArc?, valRadiusArc?, uomRadiusArc?, valCrc?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual TacanUidType TcnUidSpn {
            get {
                XElement x = this.GetElement(TcnUidSpnXName);
                return ((TacanUidType)(x));
            }
            set {
                this.SetElement(TcnUidSpnXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Significant point is at VHF omnidirectional radio range beacon [VOR]
        /// </para>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((TcnUidSpn | VorUidSpn | DpnUidSpn | NdbUidSpn | DmeUidSpn | MkrUidSpn)?, (TcnUidCen | VorUidCen | DpnUidCen | NdbUidCen | DmeUidCen | MkrUidCen)?, codeType, geoLat, geoLong, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, geoLatArc?, geoLongArc?, valRadiusArc?, uomRadiusArc?, valCrc?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual VorUidType VorUidSpn {
            get {
                XElement x = this.GetElement(VorUidSpnXName);
                return ((VorUidType)(x));
            }
            set {
                this.SetElement(VorUidSpnXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Significant point is at Designated point
        /// </para>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((TcnUidSpn | VorUidSpn | DpnUidSpn | NdbUidSpn | DmeUidSpn | MkrUidSpn)?, (TcnUidCen | VorUidCen | DpnUidCen | NdbUidCen | DmeUidCen | MkrUidCen)?, codeType, geoLat, geoLong, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, geoLatArc?, geoLongArc?, valRadiusArc?, uomRadiusArc?, valCrc?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual DesignatedPointUidType DpnUidSpn {
            get {
                XElement x = this.GetElement(DpnUidSpnXName);
                return ((DesignatedPointUidType)(x));
            }
            set {
                this.SetElement(DpnUidSpnXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Significant point is at Non-directional radio beacon [NDB]
        /// </para>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((TcnUidSpn | VorUidSpn | DpnUidSpn | NdbUidSpn | DmeUidSpn | MkrUidSpn)?, (TcnUidCen | VorUidCen | DpnUidCen | NdbUidCen | DmeUidCen | MkrUidCen)?, codeType, geoLat, geoLong, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, geoLatArc?, geoLongArc?, valRadiusArc?, uomRadiusArc?, valCrc?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual NdbUidType NdbUidSpn {
            get {
                XElement x = this.GetElement(NdbUidSpnXName);
                return ((NdbUidType)(x));
            }
            set {
                this.SetElement(NdbUidSpnXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Significant point is at Distance measuring equipment [DME]
        /// </para>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((TcnUidSpn | VorUidSpn | DpnUidSpn | NdbUidSpn | DmeUidSpn | MkrUidSpn)?, (TcnUidCen | VorUidCen | DpnUidCen | NdbUidCen | DmeUidCen | MkrUidCen)?, codeType, geoLat, geoLong, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, geoLatArc?, geoLongArc?, valRadiusArc?, uomRadiusArc?, valCrc?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual DmeUidType DmeUidSpn {
            get {
                XElement x = this.GetElement(DmeUidSpnXName);
                return ((DmeUidType)(x));
            }
            set {
                this.SetElement(DmeUidSpnXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Significant point is at Marker [MKR]
        /// </para>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((TcnUidSpn | VorUidSpn | DpnUidSpn | NdbUidSpn | DmeUidSpn | MkrUidSpn)?, (TcnUidCen | VorUidCen | DpnUidCen | NdbUidCen | DmeUidCen | MkrUidCen)?, codeType, geoLat, geoLong, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, geoLatArc?, geoLongArc?, valRadiusArc?, uomRadiusArc?, valCrc?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual MkrUidType MkrUidSpn {
            get {
                XElement x = this.GetElement(MkrUidSpnXName);
                return ((MkrUidType)(x));
            }
            set {
                this.SetElement(MkrUidSpnXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Significant point used as arc centre is at Tactical air navigation beacon [TACAN]
        /// </para>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((TcnUidSpn | VorUidSpn | DpnUidSpn | NdbUidSpn | DmeUidSpn | MkrUidSpn)?, (TcnUidCen | VorUidCen | DpnUidCen | NdbUidCen | DmeUidCen | MkrUidCen)?, codeType, geoLat, geoLong, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, geoLatArc?, geoLongArc?, valRadiusArc?, uomRadiusArc?, valCrc?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual TacanUidType TcnUidCen {
            get {
                XElement x = this.GetElement(TcnUidCenXName);
                return ((TacanUidType)(x));
            }
            set {
                this.SetElement(TcnUidCenXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Significant point used as arc centre is at VHF omnidirectional radio range beacon [VOR]
        /// </para>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((TcnUidSpn | VorUidSpn | DpnUidSpn | NdbUidSpn | DmeUidSpn | MkrUidSpn)?, (TcnUidCen | VorUidCen | DpnUidCen | NdbUidCen | DmeUidCen | MkrUidCen)?, codeType, geoLat, geoLong, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, geoLatArc?, geoLongArc?, valRadiusArc?, uomRadiusArc?, valCrc?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual VorUidType VorUidCen {
            get {
                XElement x = this.GetElement(VorUidCenXName);
                return ((VorUidType)(x));
            }
            set {
                this.SetElement(VorUidCenXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Significant point used as arc centre is at Designated point
        /// </para>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((TcnUidSpn | VorUidSpn | DpnUidSpn | NdbUidSpn | DmeUidSpn | MkrUidSpn)?, (TcnUidCen | VorUidCen | DpnUidCen | NdbUidCen | DmeUidCen | MkrUidCen)?, codeType, geoLat, geoLong, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, geoLatArc?, geoLongArc?, valRadiusArc?, uomRadiusArc?, valCrc?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual DesignatedPointUidType DpnUidCen {
            get {
                XElement x = this.GetElement(DpnUidCenXName);
                return ((DesignatedPointUidType)(x));
            }
            set {
                this.SetElement(DpnUidCenXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Significant point used as arc centre is at Non-directional radio beacon [NDB]
        /// </para>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((TcnUidSpn | VorUidSpn | DpnUidSpn | NdbUidSpn | DmeUidSpn | MkrUidSpn)?, (TcnUidCen | VorUidCen | DpnUidCen | NdbUidCen | DmeUidCen | MkrUidCen)?, codeType, geoLat, geoLong, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, geoLatArc?, geoLongArc?, valRadiusArc?, uomRadiusArc?, valCrc?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual NdbUidType NdbUidCen {
            get {
                XElement x = this.GetElement(NdbUidCenXName);
                return ((NdbUidType)(x));
            }
            set {
                this.SetElement(NdbUidCenXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Significant point used as arc centre is at Distance measuring equipment [DME]
        /// </para>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((TcnUidSpn | VorUidSpn | DpnUidSpn | NdbUidSpn | DmeUidSpn | MkrUidSpn)?, (TcnUidCen | VorUidCen | DpnUidCen | NdbUidCen | DmeUidCen | MkrUidCen)?, codeType, geoLat, geoLong, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, geoLatArc?, geoLongArc?, valRadiusArc?, uomRadiusArc?, valCrc?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual DmeUidType DmeUidCen {
            get {
                XElement x = this.GetElement(DmeUidCenXName);
                return ((DmeUidType)(x));
            }
            set {
                this.SetElement(DmeUidCenXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Significant point used as arc centre is at Marker [MKR]
        /// </para>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((TcnUidSpn | VorUidSpn | DpnUidSpn | NdbUidSpn | DmeUidSpn | MkrUidSpn)?, (TcnUidCen | VorUidCen | DpnUidCen | NdbUidCen | DmeUidCen | MkrUidCen)?, codeType, geoLat, geoLong, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, geoLatArc?, geoLongArc?, valRadiusArc?, uomRadiusArc?, valCrc?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual MkrUidType MkrUidCen {
            get {
                XElement x = this.GetElement(MkrUidCenXName);
                return ((MkrUidType)(x));
            }
            set {
                this.SetElement(MkrUidCenXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Type
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: ((TcnUidSpn | VorUidSpn | DpnUidSpn | NdbUidSpn | DmeUidSpn | MkrUidSpn)?, (TcnUidCen | VorUidCen | DpnUidCen | NdbUidCen | DmeUidCen | MkrUidCen)?, codeType, geoLat, geoLong, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, geoLatArc?, geoLongArc?, valRadiusArc?, uomRadiusArc?, valCrc?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual codeTypeClineVertex codeType {
            get {
                XElement x = this.GetElement(codeTypeXName);
                return ((codeTypeClineVertex)(x));
            }
            set {
                this.SetElement(codeTypeXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Latitude
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: ((TcnUidSpn | VorUidSpn | DpnUidSpn | NdbUidSpn | DmeUidSpn | MkrUidSpn)?, (TcnUidCen | VorUidCen | DpnUidCen | NdbUidCen | DmeUidCen | MkrUidCen)?, codeType, geoLat, geoLong, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, geoLatArc?, geoLongArc?, valRadiusArc?, uomRadiusArc?, valCrc?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual geoLat geoLat {
            get {
                XElement x = this.GetElement(geoLatXName);
                return ((geoLat)(x));
            }
            set {
                this.SetElement(geoLatXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Longitude
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: ((TcnUidSpn | VorUidSpn | DpnUidSpn | NdbUidSpn | DmeUidSpn | MkrUidSpn)?, (TcnUidCen | VorUidCen | DpnUidCen | NdbUidCen | DmeUidCen | MkrUidCen)?, codeType, geoLat, geoLong, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, geoLatArc?, geoLongArc?, valRadiusArc?, uomRadiusArc?, valCrc?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual geoLong geoLong {
            get {
                XElement x = this.GetElement(geoLongXName);
                return ((geoLong)(x));
            }
            set {
                this.SetElement(geoLongXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Datum
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: ((TcnUidSpn | VorUidSpn | DpnUidSpn | NdbUidSpn | DmeUidSpn | MkrUidSpn)?, (TcnUidCen | VorUidCen | DpnUidCen | NdbUidCen | DmeUidCen | MkrUidCen)?, codeType, geoLat, geoLong, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, geoLatArc?, geoLongArc?, valRadiusArc?, uomRadiusArc?, valCrc?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual codeDatum codeDatum {
            get {
                XElement x = this.GetElement(codeDatumXName);
                return ((codeDatum)(x));
            }
            set {
                this.SetElement(codeDatumXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Geographical accuracy
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: ((TcnUidSpn | VorUidSpn | DpnUidSpn | NdbUidSpn | DmeUidSpn | MkrUidSpn)?, (TcnUidCen | VorUidCen | DpnUidCen | NdbUidCen | DmeUidCen | MkrUidCen)?, codeType, geoLat, geoLong, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, geoLatArc?, geoLongArc?, valRadiusArc?, uomRadiusArc?, valCrc?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual valDistHorz valGeoAccuracy {
            get {
                XElement x = this.GetElement(valGeoAccuracyXName);
                return ((valDistHorz)(x));
            }
            set {
                this.SetElement(valGeoAccuracyXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Unit of measurement [geographical accuracy]
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: ((TcnUidSpn | VorUidSpn | DpnUidSpn | NdbUidSpn | DmeUidSpn | MkrUidSpn)?, (TcnUidCen | VorUidCen | DpnUidCen | NdbUidCen | DmeUidCen | MkrUidCen)?, codeType, geoLat, geoLong, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, geoLatArc?, geoLongArc?, valRadiusArc?, uomRadiusArc?, valCrc?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual uomDistHorz uomGeoAccuracy {
            get {
                XElement x = this.GetElement(uomGeoAccuracyXName);
                return ((uomDistHorz)(x));
            }
            set {
                this.SetElement(uomGeoAccuracyXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Latitude for arc
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: ((TcnUidSpn | VorUidSpn | DpnUidSpn | NdbUidSpn | DmeUidSpn | MkrUidSpn)?, (TcnUidCen | VorUidCen | DpnUidCen | NdbUidCen | DmeUidCen | MkrUidCen)?, codeType, geoLat, geoLong, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, geoLatArc?, geoLongArc?, valRadiusArc?, uomRadiusArc?, valCrc?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual geoLat geoLatArc {
            get {
                XElement x = this.GetElement(geoLatArcXName);
                return ((geoLat)(x));
            }
            set {
                this.SetElement(geoLatArcXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Longitude for arc
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: ((TcnUidSpn | VorUidSpn | DpnUidSpn | NdbUidSpn | DmeUidSpn | MkrUidSpn)?, (TcnUidCen | VorUidCen | DpnUidCen | NdbUidCen | DmeUidCen | MkrUidCen)?, codeType, geoLat, geoLong, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, geoLatArc?, geoLongArc?, valRadiusArc?, uomRadiusArc?, valCrc?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual geoLong geoLongArc {
            get {
                XElement x = this.GetElement(geoLongArcXName);
                return ((geoLong)(x));
            }
            set {
                this.SetElement(geoLongArcXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Radius of arc
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: ((TcnUidSpn | VorUidSpn | DpnUidSpn | NdbUidSpn | DmeUidSpn | MkrUidSpn)?, (TcnUidCen | VorUidCen | DpnUidCen | NdbUidCen | DmeUidCen | MkrUidCen)?, codeType, geoLat, geoLong, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, geoLatArc?, geoLongArc?, valRadiusArc?, uomRadiusArc?, valCrc?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual valDistHorz valRadiusArc {
            get {
                XElement x = this.GetElement(valRadiusArcXName);
                return ((valDistHorz)(x));
            }
            set {
                this.SetElement(valRadiusArcXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Unit of measurement [arc radius]
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: ((TcnUidSpn | VorUidSpn | DpnUidSpn | NdbUidSpn | DmeUidSpn | MkrUidSpn)?, (TcnUidCen | VorUidCen | DpnUidCen | NdbUidCen | DmeUidCen | MkrUidCen)?, codeType, geoLat, geoLong, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, geoLatArc?, geoLongArc?, valRadiusArc?, uomRadiusArc?, valCrc?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual uomDistHorz uomRadiusArc {
            get {
                XElement x = this.GetElement(uomRadiusArcXName);
                return ((uomDistHorz)(x));
            }
            set {
                this.SetElement(uomRadiusArcXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Cyclic redundancy check
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: ((TcnUidSpn | VorUidSpn | DpnUidSpn | NdbUidSpn | DmeUidSpn | MkrUidSpn)?, (TcnUidCen | VorUidCen | DpnUidCen | NdbUidCen | DmeUidCen | MkrUidCen)?, codeType, geoLat, geoLong, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, geoLatArc?, geoLongArc?, valRadiusArc?, uomRadiusArc?, valCrc?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual valHex valCrc {
            get {
                XElement x = this.GetElement(valCrcXName);
                return ((valHex)(x));
            }
            set {
                this.SetElement(valCrcXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Remark
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: ((TcnUidSpn | VorUidSpn | DpnUidSpn | NdbUidSpn | DmeUidSpn | MkrUidSpn)?, (TcnUidCen | VorUidCen | DpnUidCen | NdbUidCen | DmeUidCen | MkrUidCen)?, codeType, geoLat, geoLong, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, geoLatArc?, geoLongArc?, valRadiusArc?, uomRadiusArc?, valCrc?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual txtRmk txtRmk {
            get {
                XElement x = this.GetElement(txtRmkXName);
                return ((txtRmk)(x));
            }
            set {
                this.SetElement(txtRmkXName, value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<AirspaceCentrelineVertexType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(TcnUidSpnXName, typeof(TacanUidType));
            localElementDictionary.Add(VorUidSpnXName, typeof(VorUidType));
            localElementDictionary.Add(DpnUidSpnXName, typeof(DesignatedPointUidType));
            localElementDictionary.Add(NdbUidSpnXName, typeof(NdbUidType));
            localElementDictionary.Add(DmeUidSpnXName, typeof(DmeUidType));
            localElementDictionary.Add(MkrUidSpnXName, typeof(MkrUidType));
            localElementDictionary.Add(TcnUidCenXName, typeof(TacanUidType));
            localElementDictionary.Add(VorUidCenXName, typeof(VorUidType));
            localElementDictionary.Add(DpnUidCenXName, typeof(DesignatedPointUidType));
            localElementDictionary.Add(NdbUidCenXName, typeof(NdbUidType));
            localElementDictionary.Add(DmeUidCenXName, typeof(DmeUidType));
            localElementDictionary.Add(MkrUidCenXName, typeof(MkrUidType));
            localElementDictionary.Add(codeTypeXName, typeof(codeTypeClineVertex));
            localElementDictionary.Add(geoLatXName, typeof(geoLat));
            localElementDictionary.Add(geoLongXName, typeof(geoLong));
            localElementDictionary.Add(codeDatumXName, typeof(codeDatum));
            localElementDictionary.Add(valGeoAccuracyXName, typeof(valDistHorz));
            localElementDictionary.Add(uomGeoAccuracyXName, typeof(uomDistHorz));
            localElementDictionary.Add(geoLatArcXName, typeof(geoLat));
            localElementDictionary.Add(geoLongArcXName, typeof(geoLong));
            localElementDictionary.Add(valRadiusArcXName, typeof(valDistHorz));
            localElementDictionary.Add(uomRadiusArcXName, typeof(uomDistHorz));
            localElementDictionary.Add(valCrcXName, typeof(valHex));
            localElementDictionary.Add(txtRmkXName, typeof(txtRmk));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Airspace circular vertex
    /// </para>
    /// <para>
    /// Regular expression: ((TcnUidCen | VorUidCen | DpnUidCen | NdbUidCen | DmeUidCen | MkrUidCen)?, geoLatCen, geoLongCen, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, valRadius, uomRadius, valCrc?, txtRmk?)
    /// </para>
    /// </summary>
    public partial class AirspaceCircularVertexType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TcnUidCenXName = System.Xml.Linq.XName.Get("TcnUidCen", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName VorUidCenXName = System.Xml.Linq.XName.Get("VorUidCen", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName DpnUidCenXName = System.Xml.Linq.XName.Get("DpnUidCen", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName NdbUidCenXName = System.Xml.Linq.XName.Get("NdbUidCen", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName DmeUidCenXName = System.Xml.Linq.XName.Get("DmeUidCen", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName MkrUidCenXName = System.Xml.Linq.XName.Get("MkrUidCen", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName geoLatCenXName = System.Xml.Linq.XName.Get("geoLatCen", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName geoLongCenXName = System.Xml.Linq.XName.Get("geoLongCen", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName codeDatumXName = System.Xml.Linq.XName.Get("codeDatum", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName valGeoAccuracyXName = System.Xml.Linq.XName.Get("valGeoAccuracy", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName uomGeoAccuracyXName = System.Xml.Linq.XName.Get("uomGeoAccuracy", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName valRadiusXName = System.Xml.Linq.XName.Get("valRadius", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName uomRadiusXName = System.Xml.Linq.XName.Get("uomRadius", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName valCrcXName = System.Xml.Linq.XName.Get("valCrc", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName txtRmkXName = System.Xml.Linq.XName.Get("txtRmk", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("AirspaceCircularVertexType", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator AirspaceCircularVertexType(XElement xe) { return XTypedServices.ToXTypedElement<AirspaceCircularVertexType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static AirspaceCircularVertexType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new ChoiceContentModelEntity(new NamedContentModelEntity(TcnUidCenXName), new NamedContentModelEntity(VorUidCenXName), new NamedContentModelEntity(DpnUidCenXName), new NamedContentModelEntity(NdbUidCenXName), new NamedContentModelEntity(DmeUidCenXName), new NamedContentModelEntity(MkrUidCenXName)), new NamedContentModelEntity(geoLatCenXName), new NamedContentModelEntity(geoLongCenXName), new NamedContentModelEntity(codeDatumXName), new NamedContentModelEntity(valGeoAccuracyXName), new NamedContentModelEntity(uomGeoAccuracyXName), new NamedContentModelEntity(valRadiusXName), new NamedContentModelEntity(uomRadiusXName), new NamedContentModelEntity(valCrcXName), new NamedContentModelEntity(txtRmkXName));
        }
        
        /// <summary>
        /// <para>
        /// Airspace circular vertex
        /// </para>
        /// <para>
        /// Regular expression: ((TcnUidCen | VorUidCen | DpnUidCen | NdbUidCen | DmeUidCen | MkrUidCen)?, geoLatCen, geoLongCen, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, valRadius, uomRadius, valCrc?, txtRmk?)
        /// </para>
        /// </summary>
        public AirspaceCircularVertexType() {
        }
        
        /// <summary>
        /// <para>
        /// Significant point used as arc centre is at Tactical air navigation beacon [TACAN]
        /// </para>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((TcnUidCen | VorUidCen | DpnUidCen | NdbUidCen | DmeUidCen | MkrUidCen)?, geoLatCen, geoLongCen, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, valRadius, uomRadius, valCrc?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual TacanUidType TcnUidCen {
            get {
                XElement x = this.GetElement(TcnUidCenXName);
                return ((TacanUidType)(x));
            }
            set {
                this.SetElement(TcnUidCenXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Significant point used as arc centre is at VHF omnidirectional radio range beacon [VOR]
        /// </para>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((TcnUidCen | VorUidCen | DpnUidCen | NdbUidCen | DmeUidCen | MkrUidCen)?, geoLatCen, geoLongCen, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, valRadius, uomRadius, valCrc?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual VorUidType VorUidCen {
            get {
                XElement x = this.GetElement(VorUidCenXName);
                return ((VorUidType)(x));
            }
            set {
                this.SetElement(VorUidCenXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Significant point used as arc centre is at Designated point
        /// </para>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((TcnUidCen | VorUidCen | DpnUidCen | NdbUidCen | DmeUidCen | MkrUidCen)?, geoLatCen, geoLongCen, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, valRadius, uomRadius, valCrc?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual DesignatedPointUidType DpnUidCen {
            get {
                XElement x = this.GetElement(DpnUidCenXName);
                return ((DesignatedPointUidType)(x));
            }
            set {
                this.SetElement(DpnUidCenXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Significant point used as arc centre is at Non-directional radio beacon [NDB]
        /// </para>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((TcnUidCen | VorUidCen | DpnUidCen | NdbUidCen | DmeUidCen | MkrUidCen)?, geoLatCen, geoLongCen, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, valRadius, uomRadius, valCrc?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual NdbUidType NdbUidCen {
            get {
                XElement x = this.GetElement(NdbUidCenXName);
                return ((NdbUidType)(x));
            }
            set {
                this.SetElement(NdbUidCenXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Significant point used as arc centre is at Distance measuring equipment [DME]
        /// </para>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((TcnUidCen | VorUidCen | DpnUidCen | NdbUidCen | DmeUidCen | MkrUidCen)?, geoLatCen, geoLongCen, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, valRadius, uomRadius, valCrc?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual DmeUidType DmeUidCen {
            get {
                XElement x = this.GetElement(DmeUidCenXName);
                return ((DmeUidType)(x));
            }
            set {
                this.SetElement(DmeUidCenXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Significant point used as arc centre is at Marker [MKR]
        /// </para>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((TcnUidCen | VorUidCen | DpnUidCen | NdbUidCen | DmeUidCen | MkrUidCen)?, geoLatCen, geoLongCen, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, valRadius, uomRadius, valCrc?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual MkrUidType MkrUidCen {
            get {
                XElement x = this.GetElement(MkrUidCenXName);
                return ((MkrUidType)(x));
            }
            set {
                this.SetElement(MkrUidCenXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Latitude
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: ((TcnUidCen | VorUidCen | DpnUidCen | NdbUidCen | DmeUidCen | MkrUidCen)?, geoLatCen, geoLongCen, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, valRadius, uomRadius, valCrc?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual geoLat geoLatCen {
            get {
                XElement x = this.GetElement(geoLatCenXName);
                return ((geoLat)(x));
            }
            set {
                this.SetElement(geoLatCenXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Longitude
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: ((TcnUidCen | VorUidCen | DpnUidCen | NdbUidCen | DmeUidCen | MkrUidCen)?, geoLatCen, geoLongCen, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, valRadius, uomRadius, valCrc?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual geoLong geoLongCen {
            get {
                XElement x = this.GetElement(geoLongCenXName);
                return ((geoLong)(x));
            }
            set {
                this.SetElement(geoLongCenXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Datum
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: ((TcnUidCen | VorUidCen | DpnUidCen | NdbUidCen | DmeUidCen | MkrUidCen)?, geoLatCen, geoLongCen, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, valRadius, uomRadius, valCrc?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual codeDatum codeDatum {
            get {
                XElement x = this.GetElement(codeDatumXName);
                return ((codeDatum)(x));
            }
            set {
                this.SetElement(codeDatumXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Geographical accuracy
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: ((TcnUidCen | VorUidCen | DpnUidCen | NdbUidCen | DmeUidCen | MkrUidCen)?, geoLatCen, geoLongCen, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, valRadius, uomRadius, valCrc?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual valDistHorz valGeoAccuracy {
            get {
                XElement x = this.GetElement(valGeoAccuracyXName);
                return ((valDistHorz)(x));
            }
            set {
                this.SetElement(valGeoAccuracyXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Unit of measurement [geographical accuracy]
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: ((TcnUidCen | VorUidCen | DpnUidCen | NdbUidCen | DmeUidCen | MkrUidCen)?, geoLatCen, geoLongCen, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, valRadius, uomRadius, valCrc?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual uomDistHorz uomGeoAccuracy {
            get {
                XElement x = this.GetElement(uomGeoAccuracyXName);
                return ((uomDistHorz)(x));
            }
            set {
                this.SetElement(uomGeoAccuracyXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Radius
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: ((TcnUidCen | VorUidCen | DpnUidCen | NdbUidCen | DmeUidCen | MkrUidCen)?, geoLatCen, geoLongCen, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, valRadius, uomRadius, valCrc?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual valDistHorz valRadius {
            get {
                XElement x = this.GetElement(valRadiusXName);
                return ((valDistHorz)(x));
            }
            set {
                this.SetElement(valRadiusXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Unit of measurement [radius]
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: ((TcnUidCen | VorUidCen | DpnUidCen | NdbUidCen | DmeUidCen | MkrUidCen)?, geoLatCen, geoLongCen, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, valRadius, uomRadius, valCrc?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual uomDistHorz uomRadius {
            get {
                XElement x = this.GetElement(uomRadiusXName);
                return ((uomDistHorz)(x));
            }
            set {
                this.SetElement(uomRadiusXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Cyclic redundancy check
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: ((TcnUidCen | VorUidCen | DpnUidCen | NdbUidCen | DmeUidCen | MkrUidCen)?, geoLatCen, geoLongCen, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, valRadius, uomRadius, valCrc?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual valHex valCrc {
            get {
                XElement x = this.GetElement(valCrcXName);
                return ((valHex)(x));
            }
            set {
                this.SetElement(valCrcXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Remark
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: ((TcnUidCen | VorUidCen | DpnUidCen | NdbUidCen | DmeUidCen | MkrUidCen)?, geoLatCen, geoLongCen, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, valRadius, uomRadius, valCrc?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual txtRmk txtRmk {
            get {
                XElement x = this.GetElement(txtRmkXName);
                return ((txtRmk)(x));
            }
            set {
                this.SetElement(txtRmkXName, value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<AirspaceCircularVertexType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(TcnUidCenXName, typeof(TacanUidType));
            localElementDictionary.Add(VorUidCenXName, typeof(VorUidType));
            localElementDictionary.Add(DpnUidCenXName, typeof(DesignatedPointUidType));
            localElementDictionary.Add(NdbUidCenXName, typeof(NdbUidType));
            localElementDictionary.Add(DmeUidCenXName, typeof(DmeUidType));
            localElementDictionary.Add(MkrUidCenXName, typeof(MkrUidType));
            localElementDictionary.Add(geoLatCenXName, typeof(geoLat));
            localElementDictionary.Add(geoLongCenXName, typeof(geoLong));
            localElementDictionary.Add(codeDatumXName, typeof(codeDatum));
            localElementDictionary.Add(valGeoAccuracyXName, typeof(valDistHorz));
            localElementDictionary.Add(uomGeoAccuracyXName, typeof(uomDistHorz));
            localElementDictionary.Add(valRadiusXName, typeof(valDistHorz));
            localElementDictionary.Add(uomRadiusXName, typeof(uomDistHorz));
            localElementDictionary.Add(valCrcXName, typeof(valHex));
            localElementDictionary.Add(txtRmkXName, typeof(txtRmk));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Airspace Corridor
    /// </para>
    /// <para>
    /// Regular expression: (AcrUid, valWidth, uomWidth, txtRmk?, Avx+)
    /// </para>
    /// </summary>
    public partial class AirspaceCorridorType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName AcrUidXName = System.Xml.Linq.XName.Get("AcrUid", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName valWidthXName = System.Xml.Linq.XName.Get("valWidth", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName uomWidthXName = System.Xml.Linq.XName.Get("uomWidth", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName txtRmkXName = System.Xml.Linq.XName.Get("txtRmk", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName AvxXName = System.Xml.Linq.XName.Get("Avx", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<AirspaceCentrelineVertexType> AvxField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName sourceXName = System.Xml.Linq.XName.Get("source", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("AirspaceCorridorType", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator AirspaceCorridorType(XElement xe) { return XTypedServices.ToXTypedElement<AirspaceCorridorType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static AirspaceCorridorType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(AcrUidXName), new NamedContentModelEntity(valWidthXName), new NamedContentModelEntity(uomWidthXName), new NamedContentModelEntity(txtRmkXName), new NamedContentModelEntity(AvxXName));
        }
        
        /// <summary>
        /// <para>
        /// Airspace Corridor
        /// </para>
        /// <para>
        /// Regular expression: (AcrUid, valWidth, uomWidth, txtRmk?, Avx+)
        /// </para>
        /// </summary>
        public AirspaceCorridorType() {
        }
        
        /// <summary>
        /// <para>
        /// UID
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (AcrUid, valWidth, uomWidth, txtRmk?, Avx+)
        /// </para>
        /// </summary>
        public virtual AirspaceCorridorUidType AcrUid {
            get {
                XElement x = this.GetElement(AcrUidXName);
                return ((AirspaceCorridorUidType)(x));
            }
            set {
                this.SetElement(AcrUidXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Width
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (AcrUid, valWidth, uomWidth, txtRmk?, Avx+)
        /// </para>
        /// </summary>
        public virtual valDistHorz valWidth {
            get {
                XElement x = this.GetElement(valWidthXName);
                return ((valDistHorz)(x));
            }
            set {
                this.SetElement(valWidthXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Unit of measurement
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (AcrUid, valWidth, uomWidth, txtRmk?, Avx+)
        /// </para>
        /// </summary>
        public virtual uomDistHorz uomWidth {
            get {
                XElement x = this.GetElement(uomWidthXName);
                return ((uomDistHorz)(x));
            }
            set {
                this.SetElement(uomWidthXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Remark
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (AcrUid, valWidth, uomWidth, txtRmk?, Avx+)
        /// </para>
        /// </summary>
        public virtual txtRmk txtRmk {
            get {
                XElement x = this.GetElement(txtRmkXName);
                return ((txtRmk)(x));
            }
            set {
                this.SetElement(txtRmkXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Airspace centreline is made of vertex
        /// </para>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (AcrUid, valWidth, uomWidth, txtRmk?, Avx+)
        /// </para>
        /// </summary>
        public virtual IList<AirspaceCentrelineVertexType> Avx {
            get {
                if ((this.AvxField == null)) {
                    this.AvxField = new XTypedList<AirspaceCentrelineVertexType>(this, LinqToXsdTypeManager.Instance, AvxXName);
                }
                return this.AvxField;
            }
            set {
                if ((value == null)) {
                    this.AvxField = null;
                }
                else {
                    if ((this.AvxField == null)) {
                        this.AvxField = XTypedList<AirspaceCentrelineVertexType>.Initialize(this, LinqToXsdTypeManager.Instance, value, AvxXName);
                    }
                    else {
                        XTypedServices.SetList<AirspaceCentrelineVertexType>(this.AvxField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string source {
            get {
                XAttribute x = this.Attribute(sourceXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(sourceXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<AirspaceCorridorType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(AcrUidXName, typeof(AirspaceCorridorUidType));
            localElementDictionary.Add(valWidthXName, typeof(valDistHorz));
            localElementDictionary.Add(uomWidthXName, typeof(uomDistHorz));
            localElementDictionary.Add(txtRmkXName, typeof(txtRmk));
            localElementDictionary.Add(AvxXName, typeof(AirspaceCentrelineVertexType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Airspace Corridor - UID
    /// </para>
    /// <para>
    /// Regular expression: (AseUid)
    /// </para>
    /// </summary>
    public partial class AirspaceCorridorUidType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName AseUidXName = System.Xml.Linq.XName.Get("AseUid", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName midXName = System.Xml.Linq.XName.Get("mid", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("AirspaceCorridorUidType", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator AirspaceCorridorUidType(XElement xe) { return XTypedServices.ToXTypedElement<AirspaceCorridorUidType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static AirspaceCorridorUidType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(AseUidXName));
        }
        
        /// <summary>
        /// <para>
        /// Airspace Corridor - UID
        /// </para>
        /// <para>
        /// Regular expression: (AseUid)
        /// </para>
        /// </summary>
        public AirspaceCorridorUidType() {
        }
        
        /// <summary>
        /// <para>
        /// Airspace corridor is describing the horizontal shape of Airspace
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (AseUid)
        /// </para>
        /// </summary>
        public virtual AirspaceUidType AseUid {
            get {
                XElement x = this.GetElement(AseUidXName);
                return ((AirspaceUidType)(x));
            }
            set {
                this.SetElement(AseUidXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string mid {
            get {
                XAttribute x = this.Attribute(midXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(midXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<AirspaceCorridorUidType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(AseUidXName, typeof(AirspaceUidType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Airspace Derived Geometry
    /// </para>
    /// <para>
    /// Regular expression: (AdgUid, (AseUidSameExtent | (AseUidBase, (codeOpr, AseUidComponent)+)), txtRmk?)
    /// </para>
    /// </summary>
    public partial class AirspaceDerivedGeometryType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName AdgUidXName = System.Xml.Linq.XName.Get("AdgUid", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName AseUidSameExtentXName = System.Xml.Linq.XName.Get("AseUidSameExtent", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName AseUidBaseXName = System.Xml.Linq.XName.Get("AseUidBase", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName codeOprXName = System.Xml.Linq.XName.Get("codeOpr", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<codeOprAs> codeOprField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName AseUidComponentXName = System.Xml.Linq.XName.Get("AseUidComponent", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<AirspaceUidType> AseUidComponentField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName txtRmkXName = System.Xml.Linq.XName.Get("txtRmk", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName sourceXName = System.Xml.Linq.XName.Get("source", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("AirspaceDerivedGeometryType", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator AirspaceDerivedGeometryType(XElement xe) { return XTypedServices.ToXTypedElement<AirspaceDerivedGeometryType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static AirspaceDerivedGeometryType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(AdgUidXName), new ChoiceContentModelEntity(new NamedContentModelEntity(AseUidSameExtentXName), new SequenceContentModelEntity(new NamedContentModelEntity(AseUidBaseXName), new SequenceContentModelEntity(new NamedContentModelEntity(codeOprXName), new NamedContentModelEntity(AseUidComponentXName)))), new NamedContentModelEntity(txtRmkXName));
        }
        
        /// <summary>
        /// <para>
        /// Airspace Derived Geometry
        /// </para>
        /// <para>
        /// Regular expression: (AdgUid, (AseUidSameExtent | (AseUidBase, (codeOpr, AseUidComponent)+)), txtRmk?)
        /// </para>
        /// </summary>
        public AirspaceDerivedGeometryType() {
        }
        
        /// <summary>
        /// <para>
        /// for
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (AdgUid, (AseUidSameExtent | (AseUidBase, (codeOpr, AseUidComponent)+)), txtRmk?)
        /// </para>
        /// </summary>
        public virtual AirspaceDerivedGeometryUidType AdgUid {
            get {
                XElement x = this.GetElement(AdgUidXName);
                return ((AirspaceDerivedGeometryUidType)(x));
            }
            set {
                this.SetElement(AdgUidXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// having same horizontal extent as
        /// </para>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (AdgUid, (AseUidSameExtent | (AseUidBase, (codeOpr, AseUidComponent)+)), txtRmk?)
        /// </para>
        /// </summary>
        public virtual AirspaceUidType AseUidSameExtent {
            get {
                XElement x = this.GetElement(AseUidSameExtentXName);
                return ((AirspaceUidType)(x));
            }
            set {
                this.SetElement(AseUidSameExtentXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// aggregation base
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (AdgUid, (AseUidSameExtent | (AseUidBase, (codeOpr, AseUidComponent)+)), txtRmk?)
        /// </para>
        /// </summary>
        public virtual AirspaceUidType AseUidBase {
            get {
                XElement x = this.GetElement(AseUidBaseXName);
                return ((AirspaceUidType)(x));
            }
            set {
                this.SetElement(AseUidBaseXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (AdgUid, (AseUidSameExtent | (AseUidBase, (codeOpr, AseUidComponent)+)), txtRmk?)
        /// </para>
        /// </summary>
        public virtual IList<codeOprAs> codeOpr {
            get {
                if ((this.codeOprField == null)) {
                    this.codeOprField = new XTypedList<codeOprAs>(this, LinqToXsdTypeManager.Instance, codeOprXName);
                }
                return this.codeOprField;
            }
            set {
                if ((value == null)) {
                    this.codeOprField = null;
                }
                else {
                    if ((this.codeOprField == null)) {
                        this.codeOprField = XTypedList<codeOprAs>.Initialize(this, LinqToXsdTypeManager.Instance, value, codeOprXName);
                    }
                    else {
                        XTypedServices.SetList<codeOprAs>(this.codeOprField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (AdgUid, (AseUidSameExtent | (AseUidBase, (codeOpr, AseUidComponent)+)), txtRmk?)
        /// </para>
        /// </summary>
        public virtual IList<AirspaceUidType> AseUidComponent {
            get {
                if ((this.AseUidComponentField == null)) {
                    this.AseUidComponentField = new XTypedList<AirspaceUidType>(this, LinqToXsdTypeManager.Instance, AseUidComponentXName);
                }
                return this.AseUidComponentField;
            }
            set {
                if ((value == null)) {
                    this.AseUidComponentField = null;
                }
                else {
                    if ((this.AseUidComponentField == null)) {
                        this.AseUidComponentField = XTypedList<AirspaceUidType>.Initialize(this, LinqToXsdTypeManager.Instance, value, AseUidComponentXName);
                    }
                    else {
                        XTypedServices.SetList<AirspaceUidType>(this.AseUidComponentField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Remark
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (AdgUid, (AseUidSameExtent | (AseUidBase, (codeOpr, AseUidComponent)+)), txtRmk?)
        /// </para>
        /// </summary>
        public virtual txtRmk txtRmk {
            get {
                XElement x = this.GetElement(txtRmkXName);
                return ((txtRmk)(x));
            }
            set {
                this.SetElement(txtRmkXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string source {
            get {
                XAttribute x = this.Attribute(sourceXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(sourceXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<AirspaceDerivedGeometryType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(AdgUidXName, typeof(AirspaceDerivedGeometryUidType));
            localElementDictionary.Add(AseUidSameExtentXName, typeof(AirspaceUidType));
            localElementDictionary.Add(AseUidBaseXName, typeof(AirspaceUidType));
            localElementDictionary.Add(codeOprXName, typeof(codeOprAs));
            localElementDictionary.Add(AseUidComponentXName, typeof(AirspaceUidType));
            localElementDictionary.Add(txtRmkXName, typeof(txtRmk));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Airspace Derived Geometry - UID
    /// </para>
    /// <para>
    /// Regular expression: (AseUid)
    /// </para>
    /// </summary>
    public partial class AirspaceDerivedGeometryUidType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName AseUidXName = System.Xml.Linq.XName.Get("AseUid", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName midXName = System.Xml.Linq.XName.Get("mid", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("AirspaceDerivedGeometryUidType", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator AirspaceDerivedGeometryUidType(XElement xe) { return XTypedServices.ToXTypedElement<AirspaceDerivedGeometryUidType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static AirspaceDerivedGeometryUidType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(AseUidXName));
        }
        
        /// <summary>
        /// <para>
        /// Airspace Derived Geometry - UID
        /// </para>
        /// <para>
        /// Regular expression: (AseUid)
        /// </para>
        /// </summary>
        public AirspaceDerivedGeometryUidType() {
        }
        
        /// <summary>
        /// <para>
        /// Each Airspace Derived Geometry is for one and only one Airspace
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (AseUid)
        /// </para>
        /// </summary>
        public virtual AirspaceUidType AseUid {
            get {
                XElement x = this.GetElement(AseUidXName);
                return ((AirspaceUidType)(x));
            }
            set {
                this.SetElement(AseUidXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string mid {
            get {
                XAttribute x = this.Attribute(midXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(midXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<AirspaceDerivedGeometryUidType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(AseUidXName, typeof(AirspaceUidType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Obstacle within an airspace
    /// </para>
    /// <para>
    /// Regular expression: (OaeUid, txtRmk?)
    /// </para>
    /// </summary>
    public partial class AirspaceObstacleType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName OaeUidXName = System.Xml.Linq.XName.Get("OaeUid", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName txtRmkXName = System.Xml.Linq.XName.Get("txtRmk", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName sourceXName = System.Xml.Linq.XName.Get("source", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("AirspaceObstacleType", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator AirspaceObstacleType(XElement xe) { return XTypedServices.ToXTypedElement<AirspaceObstacleType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static AirspaceObstacleType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(OaeUidXName), new NamedContentModelEntity(txtRmkXName));
        }
        
        /// <summary>
        /// <para>
        /// Obstacle within an airspace
        /// </para>
        /// <para>
        /// Regular expression: (OaeUid, txtRmk?)
        /// </para>
        /// </summary>
        public AirspaceObstacleType() {
        }
        
        /// <summary>
        /// <para>
        /// a version of Obstacle within an airspace
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (OaeUid, txtRmk?)
        /// </para>
        /// </summary>
        public virtual AirspaceObstacleUidType OaeUid {
            get {
                XElement x = this.GetElement(OaeUidXName);
                return ((AirspaceObstacleUidType)(x));
            }
            set {
                this.SetElement(OaeUidXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Remark
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (OaeUid, txtRmk?)
        /// </para>
        /// </summary>
        public virtual txtRmk txtRmk {
            get {
                XElement x = this.GetElement(txtRmkXName);
                return ((txtRmk)(x));
            }
            set {
                this.SetElement(txtRmkXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string source {
            get {
                XAttribute x = this.Attribute(sourceXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(sourceXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<AirspaceObstacleType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(OaeUidXName, typeof(AirspaceObstacleUidType));
            localElementDictionary.Add(txtRmkXName, typeof(txtRmk));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Obstacle within an airspace - UID
    /// </para>
    /// <para>
    /// Regular expression: (ObsUid, AseUid)
    /// </para>
    /// </summary>
    public partial class AirspaceObstacleUidType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ObsUidXName = System.Xml.Linq.XName.Get("ObsUid", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName AseUidXName = System.Xml.Linq.XName.Get("AseUid", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName midXName = System.Xml.Linq.XName.Get("mid", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("AirspaceObstacleUidType", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator AirspaceObstacleUidType(XElement xe) { return XTypedServices.ToXTypedElement<AirspaceObstacleUidType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static AirspaceObstacleUidType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(ObsUidXName), new NamedContentModelEntity(AseUidXName));
        }
        
        /// <summary>
        /// <para>
        /// Obstacle within an airspace - UID
        /// </para>
        /// <para>
        /// Regular expression: (ObsUid, AseUid)
        /// </para>
        /// </summary>
        public AirspaceObstacleUidType() {
        }
        
        /// <summary>
        /// <para>
        /// Obstacle within an airspace is also Obstacle
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (ObsUid, AseUid)
        /// </para>
        /// </summary>
        public virtual ObstacleUidType ObsUid {
            get {
                XElement x = this.GetElement(ObsUidXName);
                return ((ObstacleUidType)(x));
            }
            set {
                this.SetElement(ObsUidXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Obstacle within an airspace is situated within Airspace
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (ObsUid, AseUid)
        /// </para>
        /// </summary>
        public virtual AirspaceUidType AseUid {
            get {
                XElement x = this.GetElement(AseUidXName);
                return ((AirspaceUidType)(x));
            }
            set {
                this.SetElement(AseUidXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string mid {
            get {
                XAttribute x = this.Attribute(midXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(midXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<AirspaceObstacleUidType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(ObsUidXName, typeof(ObstacleUidType));
            localElementDictionary.Add(AseUidXName, typeof(AirspaceUidType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Service provided in airspace
    /// </para>
    /// <para>
    /// Regular expression: (SaeUid, txtRmk?)
    /// </para>
    /// </summary>
    public partial class AirspaceServiceType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName SaeUidXName = System.Xml.Linq.XName.Get("SaeUid", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName txtRmkXName = System.Xml.Linq.XName.Get("txtRmk", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName sourceXName = System.Xml.Linq.XName.Get("source", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("AirspaceServiceType", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator AirspaceServiceType(XElement xe) { return XTypedServices.ToXTypedElement<AirspaceServiceType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static AirspaceServiceType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(SaeUidXName), new NamedContentModelEntity(txtRmkXName));
        }
        
        /// <summary>
        /// <para>
        /// Service provided in airspace
        /// </para>
        /// <para>
        /// Regular expression: (SaeUid, txtRmk?)
        /// </para>
        /// </summary>
        public AirspaceServiceType() {
        }
        
        /// <summary>
        /// <para>
        /// a version of Service provided in airspace
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (SaeUid, txtRmk?)
        /// </para>
        /// </summary>
        public virtual AirspaceServiceUidType SaeUid {
            get {
                XElement x = this.GetElement(SaeUidXName);
                return ((AirspaceServiceUidType)(x));
            }
            set {
                this.SetElement(SaeUidXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Remark
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (SaeUid, txtRmk?)
        /// </para>
        /// </summary>
        public virtual txtRmk txtRmk {
            get {
                XElement x = this.GetElement(txtRmkXName);
                return ((txtRmk)(x));
            }
            set {
                this.SetElement(txtRmkXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string source {
            get {
                XAttribute x = this.Attribute(sourceXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(sourceXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<AirspaceServiceType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(SaeUidXName, typeof(AirspaceServiceUidType));
            localElementDictionary.Add(txtRmkXName, typeof(txtRmk));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Service provided in airspace - UID
    /// </para>
    /// <para>
    /// Regular expression: (SerUid, AseUid)
    /// </para>
    /// </summary>
    public partial class AirspaceServiceUidType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName SerUidXName = System.Xml.Linq.XName.Get("SerUid", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName AseUidXName = System.Xml.Linq.XName.Get("AseUid", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName midXName = System.Xml.Linq.XName.Get("mid", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("AirspaceServiceUidType", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator AirspaceServiceUidType(XElement xe) { return XTypedServices.ToXTypedElement<AirspaceServiceUidType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static AirspaceServiceUidType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(SerUidXName), new NamedContentModelEntity(AseUidXName));
        }
        
        /// <summary>
        /// <para>
        /// Service provided in airspace - UID
        /// </para>
        /// <para>
        /// Regular expression: (SerUid, AseUid)
        /// </para>
        /// </summary>
        public AirspaceServiceUidType() {
        }
        
        /// <summary>
        /// <para>
        /// Service provided in airspace is also Service
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (SerUid, AseUid)
        /// </para>
        /// </summary>
        public virtual ServiceUidType SerUid {
            get {
                XElement x = this.GetElement(SerUidXName);
                return ((ServiceUidType)(x));
            }
            set {
                this.SetElement(SerUidXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Service provided in airspace is furnished within Airspace
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (SerUid, AseUid)
        /// </para>
        /// </summary>
        public virtual AirspaceUidType AseUid {
            get {
                XElement x = this.GetElement(AseUidXName);
                return ((AirspaceUidType)(x));
            }
            set {
                this.SetElement(AseUidXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string mid {
            get {
                XAttribute x = this.Attribute(midXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(midXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<AirspaceServiceUidType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(SerUidXName, typeof(ServiceUidType));
            localElementDictionary.Add(AseUidXName, typeof(AirspaceUidType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Airspace
    /// </para>
    /// <para>
    /// Regular expression: (AseUid, RsgUid?, UasUid?, txtName?, txtNameAlt?, codeClass?, codeLocInd?, codeActivity?, codeMil?, codeDistVerUpper?, valDistVerUpper?, uomDistVerUpper?, codeDistVerLower?, valDistVerLower?, uomDistVerLower?, codeDistVerMax?, valDistVerMax?, uomDistVerMax?, codeDistVerMnm?, valDistVerMnm?, uomDistVerMnm?, valLowerLimit?, Att?, codeSelAvbl?, txtRmk?)
    /// </para>
    /// </summary>
    public partial class AirspaceType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName AseUidXName = System.Xml.Linq.XName.Get("AseUid", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName RsgUidXName = System.Xml.Linq.XName.Get("RsgUid", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName UasUidXName = System.Xml.Linq.XName.Get("UasUid", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName txtNameXName = System.Xml.Linq.XName.Get("txtName", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName txtNameAltXName = System.Xml.Linq.XName.Get("txtNameAlt", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName codeClassXName = System.Xml.Linq.XName.Get("codeClass", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName codeLocIndXName = System.Xml.Linq.XName.Get("codeLocInd", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName codeActivityXName = System.Xml.Linq.XName.Get("codeActivity", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName codeMilXName = System.Xml.Linq.XName.Get("codeMil", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName codeDistVerUpperXName = System.Xml.Linq.XName.Get("codeDistVerUpper", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName valDistVerUpperXName = System.Xml.Linq.XName.Get("valDistVerUpper", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName uomDistVerUpperXName = System.Xml.Linq.XName.Get("uomDistVerUpper", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName codeDistVerLowerXName = System.Xml.Linq.XName.Get("codeDistVerLower", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName valDistVerLowerXName = System.Xml.Linq.XName.Get("valDistVerLower", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName uomDistVerLowerXName = System.Xml.Linq.XName.Get("uomDistVerLower", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName codeDistVerMaxXName = System.Xml.Linq.XName.Get("codeDistVerMax", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName valDistVerMaxXName = System.Xml.Linq.XName.Get("valDistVerMax", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName uomDistVerMaxXName = System.Xml.Linq.XName.Get("uomDistVerMax", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName codeDistVerMnmXName = System.Xml.Linq.XName.Get("codeDistVerMnm", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName valDistVerMnmXName = System.Xml.Linq.XName.Get("valDistVerMnm", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName uomDistVerMnmXName = System.Xml.Linq.XName.Get("uomDistVerMnm", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName valLowerLimitXName = System.Xml.Linq.XName.Get("valLowerLimit", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName AttXName = System.Xml.Linq.XName.Get("Att", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName codeSelAvblXName = System.Xml.Linq.XName.Get("codeSelAvbl", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName txtRmkXName = System.Xml.Linq.XName.Get("txtRmk", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName sourceXName = System.Xml.Linq.XName.Get("source", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("AirspaceType", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator AirspaceType(XElement xe) { return XTypedServices.ToXTypedElement<AirspaceType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static AirspaceType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(AseUidXName), new NamedContentModelEntity(RsgUidXName), new NamedContentModelEntity(UasUidXName), new NamedContentModelEntity(txtNameXName), new NamedContentModelEntity(txtNameAltXName), new NamedContentModelEntity(codeClassXName), new NamedContentModelEntity(codeLocIndXName), new NamedContentModelEntity(codeActivityXName), new NamedContentModelEntity(codeMilXName), new NamedContentModelEntity(codeDistVerUpperXName), new NamedContentModelEntity(valDistVerUpperXName), new NamedContentModelEntity(uomDistVerUpperXName), new NamedContentModelEntity(codeDistVerLowerXName), new NamedContentModelEntity(valDistVerLowerXName), new NamedContentModelEntity(uomDistVerLowerXName), new NamedContentModelEntity(codeDistVerMaxXName), new NamedContentModelEntity(valDistVerMaxXName), new NamedContentModelEntity(uomDistVerMaxXName), new NamedContentModelEntity(codeDistVerMnmXName), new NamedContentModelEntity(valDistVerMnmXName), new NamedContentModelEntity(uomDistVerMnmXName), new NamedContentModelEntity(valLowerLimitXName), new NamedContentModelEntity(AttXName), new NamedContentModelEntity(codeSelAvblXName), new NamedContentModelEntity(txtRmkXName));
        }
        
        /// <summary>
        /// <para>
        /// Airspace
        /// </para>
        /// <para>
        /// Regular expression: (AseUid, RsgUid?, UasUid?, txtName?, txtNameAlt?, codeClass?, codeLocInd?, codeActivity?, codeMil?, codeDistVerUpper?, valDistVerUpper?, uomDistVerUpper?, codeDistVerLower?, valDistVerLower?, uomDistVerLower?, codeDistVerMax?, valDistVerMax?, uomDistVerMax?, codeDistVerMnm?, valDistVerMnm?, uomDistVerMnm?, valLowerLimit?, Att?, codeSelAvbl?, txtRmk?)
        /// </para>
        /// </summary>
        public AirspaceType() {
        }
        
        /// <summary>
        /// <para>
        /// a version of Airspace
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (AseUid, RsgUid?, UasUid?, txtName?, txtNameAlt?, codeClass?, codeLocInd?, codeActivity?, codeMil?, codeDistVerUpper?, valDistVerUpper?, uomDistVerUpper?, codeDistVerLower?, valDistVerLower?, uomDistVerLower?, codeDistVerMax?, valDistVerMax?, uomDistVerMax?, codeDistVerMnm?, valDistVerMnm?, uomDistVerMnm?, valLowerLimit?, Att?, codeSelAvbl?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual AirspaceUidType AseUid {
            get {
                XElement x = this.GetElement(AseUidXName);
                return ((AirspaceUidType)(x));
            }
            set {
                this.SetElement(AseUidXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Airspace is consisting of Route segment
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (AseUid, RsgUid?, UasUid?, txtName?, txtNameAlt?, codeClass?, codeLocInd?, codeActivity?, codeMil?, codeDistVerUpper?, valDistVerUpper?, uomDistVerUpper?, codeDistVerLower?, valDistVerLower?, uomDistVerLower?, codeDistVerMax?, valDistVerMax?, uomDistVerMax?, codeDistVerMnm?, valDistVerMnm?, uomDistVerMnm?, valLowerLimit?, Att?, codeSelAvbl?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual RouteSegmentUidType RsgUid {
            get {
                XElement x = this.GetElement(RsgUidXName);
                return ((RouteSegmentUidType)(x));
            }
            set {
                this.SetElement(RsgUidXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Airspace is requiring for FPL-MSG the use of Unit contact address
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (AseUid, RsgUid?, UasUid?, txtName?, txtNameAlt?, codeClass?, codeLocInd?, codeActivity?, codeMil?, codeDistVerUpper?, valDistVerUpper?, uomDistVerUpper?, codeDistVerLower?, valDistVerLower?, uomDistVerLower?, codeDistVerMax?, valDistVerMax?, uomDistVerMax?, codeDistVerMnm?, valDistVerMnm?, uomDistVerMnm?, valLowerLimit?, Att?, codeSelAvbl?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual UnitContactAddressUidType UasUid {
            get {
                XElement x = this.GetElement(UasUidXName);
                return ((UnitContactAddressUidType)(x));
            }
            set {
                this.SetElement(UasUidXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Name (as published in AIP)
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (AseUid, RsgUid?, UasUid?, txtName?, txtNameAlt?, codeClass?, codeLocInd?, codeActivity?, codeMil?, codeDistVerUpper?, valDistVerUpper?, uomDistVerUpper?, codeDistVerLower?, valDistVerLower?, uomDistVerLower?, codeDistVerMax?, valDistVerMax?, uomDistVerMax?, codeDistVerMnm?, valDistVerMnm?, uomDistVerMnm?, valLowerLimit?, Att?, codeSelAvbl?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual txtName txtName {
            get {
                XElement x = this.GetElement(txtNameXName);
                return ((txtName)(x));
            }
            set {
                this.SetElement(txtNameXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Alternativen name (e.g. used on maps)
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (AseUid, RsgUid?, UasUid?, txtName?, txtNameAlt?, codeClass?, codeLocInd?, codeActivity?, codeMil?, codeDistVerUpper?, valDistVerUpper?, uomDistVerUpper?, codeDistVerLower?, valDistVerLower?, uomDistVerLower?, codeDistVerMax?, valDistVerMax?, uomDistVerMax?, codeDistVerMnm?, valDistVerMnm?, uomDistVerMnm?, valLowerLimit?, Att?, codeSelAvbl?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual txtName txtNameAlt {
            get {
                XElement x = this.GetElement(txtNameAltXName);
                return ((txtName)(x));
            }
            set {
                this.SetElement(txtNameAltXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Class
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (AseUid, RsgUid?, UasUid?, txtName?, txtNameAlt?, codeClass?, codeLocInd?, codeActivity?, codeMil?, codeDistVerUpper?, valDistVerUpper?, uomDistVerUpper?, codeDistVerLower?, valDistVerLower?, uomDistVerLower?, codeDistVerMax?, valDistVerMax?, uomDistVerMax?, codeDistVerMnm?, valDistVerMnm?, uomDistVerMnm?, valLowerLimit?, Att?, codeSelAvbl?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual codeClassAs codeClass {
            get {
                XElement x = this.GetElement(codeClassXName);
                return ((codeClassAs)(x));
            }
            set {
                this.SetElement(codeClassXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Location indicator [ICAO doc. 7910]
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (AseUid, RsgUid?, UasUid?, txtName?, txtNameAlt?, codeClass?, codeLocInd?, codeActivity?, codeMil?, codeDistVerUpper?, valDistVerUpper?, uomDistVerUpper?, codeDistVerLower?, valDistVerLower?, uomDistVerLower?, codeDistVerMax?, valDistVerMax?, uomDistVerMax?, codeDistVerMnm?, valDistVerMnm?, uomDistVerMnm?, valLowerLimit?, Att?, codeSelAvbl?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual codeLocIndIcao codeLocInd {
            get {
                XElement x = this.GetElement(codeLocIndXName);
                return ((codeLocIndIcao)(x));
            }
            set {
                this.SetElement(codeLocIndXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Activity or purpose
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (AseUid, RsgUid?, UasUid?, txtName?, txtNameAlt?, codeClass?, codeLocInd?, codeActivity?, codeMil?, codeDistVerUpper?, valDistVerUpper?, uomDistVerUpper?, codeDistVerLower?, valDistVerLower?, uomDistVerLower?, codeDistVerMax?, valDistVerMax?, uomDistVerMax?, codeDistVerMnm?, valDistVerMnm?, uomDistVerMnm?, valLowerLimit?, Att?, codeSelAvbl?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual codeActivity codeActivity {
            get {
                XElement x = this.GetElement(codeActivityXName);
                return ((codeActivity)(x));
            }
            set {
                this.SetElement(codeActivityXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Military
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (AseUid, RsgUid?, UasUid?, txtName?, txtNameAlt?, codeClass?, codeLocInd?, codeActivity?, codeMil?, codeDistVerUpper?, valDistVerUpper?, uomDistVerUpper?, codeDistVerLower?, valDistVerLower?, uomDistVerLower?, codeDistVerMax?, valDistVerMax?, uomDistVerMax?, codeDistVerMnm?, valDistVerMnm?, uomDistVerMnm?, valLowerLimit?, Att?, codeSelAvbl?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual codeMil codeMil {
            get {
                XElement x = this.GetElement(codeMilXName);
                return ((codeMil)(x));
            }
            set {
                this.SetElement(codeMilXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Reference for upper limit
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (AseUid, RsgUid?, UasUid?, txtName?, txtNameAlt?, codeClass?, codeLocInd?, codeActivity?, codeMil?, codeDistVerUpper?, valDistVerUpper?, uomDistVerUpper?, codeDistVerLower?, valDistVerLower?, uomDistVerLower?, codeDistVerMax?, valDistVerMax?, uomDistVerMax?, codeDistVerMnm?, valDistVerMnm?, uomDistVerMnm?, valLowerLimit?, Att?, codeSelAvbl?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual codeDistVer codeDistVerUpper {
            get {
                XElement x = this.GetElement(codeDistVerUpperXName);
                return ((codeDistVer)(x));
            }
            set {
                this.SetElement(codeDistVerUpperXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Upper limit
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (AseUid, RsgUid?, UasUid?, txtName?, txtNameAlt?, codeClass?, codeLocInd?, codeActivity?, codeMil?, codeDistVerUpper?, valDistVerUpper?, uomDistVerUpper?, codeDistVerLower?, valDistVerLower?, uomDistVerLower?, codeDistVerMax?, valDistVerMax?, uomDistVerMax?, codeDistVerMnm?, valDistVerMnm?, uomDistVerMnm?, valLowerLimit?, Att?, codeSelAvbl?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual valDistVer valDistVerUpper {
            get {
                XElement x = this.GetElement(valDistVerUpperXName);
                return ((valDistVer)(x));
            }
            set {
                this.SetElement(valDistVerUpperXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Unit of measurement [upper limit]
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (AseUid, RsgUid?, UasUid?, txtName?, txtNameAlt?, codeClass?, codeLocInd?, codeActivity?, codeMil?, codeDistVerUpper?, valDistVerUpper?, uomDistVerUpper?, codeDistVerLower?, valDistVerLower?, uomDistVerLower?, codeDistVerMax?, valDistVerMax?, uomDistVerMax?, codeDistVerMnm?, valDistVerMnm?, uomDistVerMnm?, valLowerLimit?, Att?, codeSelAvbl?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual uomDistVer uomDistVerUpper {
            get {
                XElement x = this.GetElement(uomDistVerUpperXName);
                return ((uomDistVer)(x));
            }
            set {
                this.SetElement(uomDistVerUpperXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Reference for lower limit
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (AseUid, RsgUid?, UasUid?, txtName?, txtNameAlt?, codeClass?, codeLocInd?, codeActivity?, codeMil?, codeDistVerUpper?, valDistVerUpper?, uomDistVerUpper?, codeDistVerLower?, valDistVerLower?, uomDistVerLower?, codeDistVerMax?, valDistVerMax?, uomDistVerMax?, codeDistVerMnm?, valDistVerMnm?, uomDistVerMnm?, valLowerLimit?, Att?, codeSelAvbl?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual codeDistVer codeDistVerLower {
            get {
                XElement x = this.GetElement(codeDistVerLowerXName);
                return ((codeDistVer)(x));
            }
            set {
                this.SetElement(codeDistVerLowerXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Lower limit
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (AseUid, RsgUid?, UasUid?, txtName?, txtNameAlt?, codeClass?, codeLocInd?, codeActivity?, codeMil?, codeDistVerUpper?, valDistVerUpper?, uomDistVerUpper?, codeDistVerLower?, valDistVerLower?, uomDistVerLower?, codeDistVerMax?, valDistVerMax?, uomDistVerMax?, codeDistVerMnm?, valDistVerMnm?, uomDistVerMnm?, valLowerLimit?, Att?, codeSelAvbl?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual valDistVer valDistVerLower {
            get {
                XElement x = this.GetElement(valDistVerLowerXName);
                return ((valDistVer)(x));
            }
            set {
                this.SetElement(valDistVerLowerXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Unit of measurement [lower limit]
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (AseUid, RsgUid?, UasUid?, txtName?, txtNameAlt?, codeClass?, codeLocInd?, codeActivity?, codeMil?, codeDistVerUpper?, valDistVerUpper?, uomDistVerUpper?, codeDistVerLower?, valDistVerLower?, uomDistVerLower?, codeDistVerMax?, valDistVerMax?, uomDistVerMax?, codeDistVerMnm?, valDistVerMnm?, uomDistVerMnm?, valLowerLimit?, Att?, codeSelAvbl?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual uomDistVer uomDistVerLower {
            get {
                XElement x = this.GetElement(uomDistVerLowerXName);
                return ((uomDistVer)(x));
            }
            set {
                this.SetElement(uomDistVerLowerXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Reference for maximum limit
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (AseUid, RsgUid?, UasUid?, txtName?, txtNameAlt?, codeClass?, codeLocInd?, codeActivity?, codeMil?, codeDistVerUpper?, valDistVerUpper?, uomDistVerUpper?, codeDistVerLower?, valDistVerLower?, uomDistVerLower?, codeDistVerMax?, valDistVerMax?, uomDistVerMax?, codeDistVerMnm?, valDistVerMnm?, uomDistVerMnm?, valLowerLimit?, Att?, codeSelAvbl?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual codeDistVer codeDistVerMax {
            get {
                XElement x = this.GetElement(codeDistVerMaxXName);
                return ((codeDistVer)(x));
            }
            set {
                this.SetElement(codeDistVerMaxXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Maximum limit
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (AseUid, RsgUid?, UasUid?, txtName?, txtNameAlt?, codeClass?, codeLocInd?, codeActivity?, codeMil?, codeDistVerUpper?, valDistVerUpper?, uomDistVerUpper?, codeDistVerLower?, valDistVerLower?, uomDistVerLower?, codeDistVerMax?, valDistVerMax?, uomDistVerMax?, codeDistVerMnm?, valDistVerMnm?, uomDistVerMnm?, valLowerLimit?, Att?, codeSelAvbl?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual valDistVer valDistVerMax {
            get {
                XElement x = this.GetElement(valDistVerMaxXName);
                return ((valDistVer)(x));
            }
            set {
                this.SetElement(valDistVerMaxXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Unit of measurement [maximum limit]
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (AseUid, RsgUid?, UasUid?, txtName?, txtNameAlt?, codeClass?, codeLocInd?, codeActivity?, codeMil?, codeDistVerUpper?, valDistVerUpper?, uomDistVerUpper?, codeDistVerLower?, valDistVerLower?, uomDistVerLower?, codeDistVerMax?, valDistVerMax?, uomDistVerMax?, codeDistVerMnm?, valDistVerMnm?, uomDistVerMnm?, valLowerLimit?, Att?, codeSelAvbl?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual uomDistVer uomDistVerMax {
            get {
                XElement x = this.GetElement(uomDistVerMaxXName);
                return ((uomDistVer)(x));
            }
            set {
                this.SetElement(uomDistVerMaxXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Reference for minimum limit
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (AseUid, RsgUid?, UasUid?, txtName?, txtNameAlt?, codeClass?, codeLocInd?, codeActivity?, codeMil?, codeDistVerUpper?, valDistVerUpper?, uomDistVerUpper?, codeDistVerLower?, valDistVerLower?, uomDistVerLower?, codeDistVerMax?, valDistVerMax?, uomDistVerMax?, codeDistVerMnm?, valDistVerMnm?, uomDistVerMnm?, valLowerLimit?, Att?, codeSelAvbl?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual codeDistVer codeDistVerMnm {
            get {
                XElement x = this.GetElement(codeDistVerMnmXName);
                return ((codeDistVer)(x));
            }
            set {
                this.SetElement(codeDistVerMnmXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Minimum limit
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (AseUid, RsgUid?, UasUid?, txtName?, txtNameAlt?, codeClass?, codeLocInd?, codeActivity?, codeMil?, codeDistVerUpper?, valDistVerUpper?, uomDistVerUpper?, codeDistVerLower?, valDistVerLower?, uomDistVerLower?, codeDistVerMax?, valDistVerMax?, uomDistVerMax?, codeDistVerMnm?, valDistVerMnm?, uomDistVerMnm?, valLowerLimit?, Att?, codeSelAvbl?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual valDistVer valDistVerMnm {
            get {
                XElement x = this.GetElement(valDistVerMnmXName);
                return ((valDistVer)(x));
            }
            set {
                this.SetElement(valDistVerMnmXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Unit of measurement [minimum limit]
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (AseUid, RsgUid?, UasUid?, txtName?, txtNameAlt?, codeClass?, codeLocInd?, codeActivity?, codeMil?, codeDistVerUpper?, valDistVerUpper?, uomDistVerUpper?, codeDistVerLower?, valDistVerLower?, uomDistVerLower?, codeDistVerMax?, valDistVerMax?, uomDistVerMax?, codeDistVerMnm?, valDistVerMnm?, uomDistVerMnm?, valLowerLimit?, Att?, codeSelAvbl?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual uomDistVer uomDistVerMnm {
            get {
                XElement x = this.GetElement(uomDistVerMnmXName);
                return ((uomDistVer)(x));
            }
            set {
                this.SetElement(uomDistVerMnmXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Lower/upper limit
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (AseUid, RsgUid?, UasUid?, txtName?, txtNameAlt?, codeClass?, codeLocInd?, codeActivity?, codeMil?, codeDistVerUpper?, valDistVerUpper?, uomDistVerUpper?, codeDistVerLower?, valDistVerLower?, uomDistVerLower?, codeDistVerMax?, valDistVerMax?, uomDistVerMax?, codeDistVerMnm?, valDistVerMnm?, uomDistVerMnm?, valLowerLimit?, Att?, codeSelAvbl?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual valFl valLowerLimit {
            get {
                XElement x = this.GetElement(valLowerLimitXName);
                return ((valFl)(x));
            }
            set {
                this.SetElement(valLowerLimitXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Airspace is active according to Airspace - Timetable
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (AseUid, RsgUid?, UasUid?, txtName?, txtNameAlt?, codeClass?, codeLocInd?, codeActivity?, codeMil?, codeDistVerUpper?, valDistVerUpper?, uomDistVerUpper?, codeDistVerLower?, valDistVerLower?, uomDistVerLower?, codeDistVerMax?, valDistVerMax?, uomDistVerMax?, codeDistVerMnm?, valDistVerMnm?, uomDistVerMnm?, valLowerLimit?, Att?, codeSelAvbl?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual TimetableType Att {
            get {
                XElement x = this.GetElement(AttXName);
                return ((TimetableType)(x));
            }
            set {
                this.SetElement(AttXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Airspace may be activated selectively
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (AseUid, RsgUid?, UasUid?, txtName?, txtNameAlt?, codeClass?, codeLocInd?, codeActivity?, codeMil?, codeDistVerUpper?, valDistVerUpper?, uomDistVerUpper?, codeDistVerLower?, valDistVerLower?, uomDistVerLower?, codeDistVerMax?, valDistVerMax?, uomDistVerMax?, codeDistVerMnm?, valDistVerMnm?, uomDistVerMnm?, valLowerLimit?, Att?, codeSelAvbl?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual codeYesNo codeSelAvbl {
            get {
                XElement x = this.GetElement(codeSelAvblXName);
                return ((codeYesNo)(x));
            }
            set {
                this.SetElement(codeSelAvblXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Remark
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (AseUid, RsgUid?, UasUid?, txtName?, txtNameAlt?, codeClass?, codeLocInd?, codeActivity?, codeMil?, codeDistVerUpper?, valDistVerUpper?, uomDistVerUpper?, codeDistVerLower?, valDistVerLower?, uomDistVerLower?, codeDistVerMax?, valDistVerMax?, uomDistVerMax?, codeDistVerMnm?, valDistVerMnm?, uomDistVerMnm?, valLowerLimit?, Att?, codeSelAvbl?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual txtRmk txtRmk {
            get {
                XElement x = this.GetElement(txtRmkXName);
                return ((txtRmk)(x));
            }
            set {
                this.SetElement(txtRmkXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string source {
            get {
                XAttribute x = this.Attribute(sourceXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(sourceXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<AirspaceType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(AseUidXName, typeof(AirspaceUidType));
            localElementDictionary.Add(RsgUidXName, typeof(RouteSegmentUidType));
            localElementDictionary.Add(UasUidXName, typeof(UnitContactAddressUidType));
            localElementDictionary.Add(txtNameXName, typeof(txtName));
            localElementDictionary.Add(txtNameAltXName, typeof(txtName));
            localElementDictionary.Add(codeClassXName, typeof(codeClassAs));
            localElementDictionary.Add(codeLocIndXName, typeof(codeLocIndIcao));
            localElementDictionary.Add(codeActivityXName, typeof(codeActivity));
            localElementDictionary.Add(codeMilXName, typeof(codeMil));
            localElementDictionary.Add(codeDistVerUpperXName, typeof(codeDistVer));
            localElementDictionary.Add(valDistVerUpperXName, typeof(valDistVer));
            localElementDictionary.Add(uomDistVerUpperXName, typeof(uomDistVer));
            localElementDictionary.Add(codeDistVerLowerXName, typeof(codeDistVer));
            localElementDictionary.Add(valDistVerLowerXName, typeof(valDistVer));
            localElementDictionary.Add(uomDistVerLowerXName, typeof(uomDistVer));
            localElementDictionary.Add(codeDistVerMaxXName, typeof(codeDistVer));
            localElementDictionary.Add(valDistVerMaxXName, typeof(valDistVer));
            localElementDictionary.Add(uomDistVerMaxXName, typeof(uomDistVer));
            localElementDictionary.Add(codeDistVerMnmXName, typeof(codeDistVer));
            localElementDictionary.Add(valDistVerMnmXName, typeof(valDistVer));
            localElementDictionary.Add(uomDistVerMnmXName, typeof(uomDistVer));
            localElementDictionary.Add(valLowerLimitXName, typeof(valFl));
            localElementDictionary.Add(AttXName, typeof(TimetableType));
            localElementDictionary.Add(codeSelAvblXName, typeof(codeYesNo));
            localElementDictionary.Add(txtRmkXName, typeof(txtRmk));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Airspace - UID
    /// </para>
    /// <para>
    /// Regular expression: (codeType, codeId, txtLocalType?)
    /// </para>
    /// </summary>
    public partial class AirspaceUidType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName codeTypeXName = System.Xml.Linq.XName.Get("codeType", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName codeIdXName = System.Xml.Linq.XName.Get("codeId", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName txtLocalTypeXName = System.Xml.Linq.XName.Get("txtLocalType", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName midXName = System.Xml.Linq.XName.Get("mid", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName regionXName = System.Xml.Linq.XName.Get("region", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("AirspaceUidType", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator AirspaceUidType(XElement xe) { return XTypedServices.ToXTypedElement<AirspaceUidType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static AirspaceUidType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(codeTypeXName), new NamedContentModelEntity(codeIdXName), new NamedContentModelEntity(txtLocalTypeXName));
        }
        
        /// <summary>
        /// <para>
        /// Airspace - UID
        /// </para>
        /// <para>
        /// Regular expression: (codeType, codeId, txtLocalType?)
        /// </para>
        /// </summary>
        public AirspaceUidType() {
        }
        
        /// <summary>
        /// <para>
        /// Type
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (codeType, codeId, txtLocalType?)
        /// </para>
        /// </summary>
        public virtual codeTypeAs codeType {
            get {
                XElement x = this.GetElement(codeTypeXName);
                return ((codeTypeAs)(x));
            }
            set {
                this.SetElement(codeTypeXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Coded identifier
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (codeType, codeId, txtLocalType?)
        /// </para>
        /// </summary>
        public virtual codeIdAs codeId {
            get {
                XElement x = this.GetElement(codeIdXName);
                return ((codeIdAs)(x));
            }
            set {
                this.SetElement(codeIdXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Local type designator
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (codeType, codeId, txtLocalType?)
        /// </para>
        /// </summary>
        public virtual txtName txtLocalType {
            get {
                XElement x = this.GetElement(txtLocalTypeXName);
                return ((txtName)(x));
            }
            set {
                this.SetElement(txtLocalTypeXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string mid {
            get {
                XAttribute x = this.Attribute(midXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(midXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual string region {
            get {
                XAttribute x = this.Attribute(regionXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(regionXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<AirspaceUidType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(codeTypeXName, typeof(codeTypeAs));
            localElementDictionary.Add(codeIdXName, typeof(codeIdAs));
            localElementDictionary.Add(txtLocalTypeXName, typeof(txtName));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Apron geometry point
    /// </para>
    /// <para>
    /// Regular expression: (codeType, geoLat, geoLong, geoLatArc?, valElev?, geoLongArc?)
    /// </para>
    /// </summary>
    public partial class ApronGeometryPointType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName codeTypeXName = System.Xml.Linq.XName.Get("codeType", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName geoLatXName = System.Xml.Linq.XName.Get("geoLat", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName geoLongXName = System.Xml.Linq.XName.Get("geoLong", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName geoLatArcXName = System.Xml.Linq.XName.Get("geoLatArc", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName valElevXName = System.Xml.Linq.XName.Get("valElev", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName geoLongArcXName = System.Xml.Linq.XName.Get("geoLongArc", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("ApronGeometryPointType", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator ApronGeometryPointType(XElement xe) { return XTypedServices.ToXTypedElement<ApronGeometryPointType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static ApronGeometryPointType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(codeTypeXName), new NamedContentModelEntity(geoLatXName), new NamedContentModelEntity(geoLongXName), new NamedContentModelEntity(geoLatArcXName), new NamedContentModelEntity(valElevXName), new NamedContentModelEntity(geoLongArcXName));
        }
        
        /// <summary>
        /// <para>
        /// Apron geometry point
        /// </para>
        /// <para>
        /// Regular expression: (codeType, geoLat, geoLong, geoLatArc?, valElev?, geoLongArc?)
        /// </para>
        /// </summary>
        public ApronGeometryPointType() {
        }
        
        /// <summary>
        /// <para>
        /// Type
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (codeType, geoLat, geoLong, geoLatArc?, valElev?, geoLongArc?)
        /// </para>
        /// </summary>
        public virtual codeTypeVertex codeType {
            get {
                XElement x = this.GetElement(codeTypeXName);
                return ((codeTypeVertex)(x));
            }
            set {
                this.SetElement(codeTypeXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Latitude
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (codeType, geoLat, geoLong, geoLatArc?, valElev?, geoLongArc?)
        /// </para>
        /// </summary>
        public virtual geoLat geoLat {
            get {
                XElement x = this.GetElement(geoLatXName);
                return ((geoLat)(x));
            }
            set {
                this.SetElement(geoLatXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Longitude
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (codeType, geoLat, geoLong, geoLatArc?, valElev?, geoLongArc?)
        /// </para>
        /// </summary>
        public virtual geoLong geoLong {
            get {
                XElement x = this.GetElement(geoLongXName);
                return ((geoLong)(x));
            }
            set {
                this.SetElement(geoLongXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Latitude for arc
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (codeType, geoLat, geoLong, geoLatArc?, valElev?, geoLongArc?)
        /// </para>
        /// </summary>
        public virtual geoLat geoLatArc {
            get {
                XElement x = this.GetElement(geoLatArcXName);
                return ((geoLat)(x));
            }
            set {
                this.SetElement(geoLatArcXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Elevation
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (codeType, geoLat, geoLong, geoLatArc?, valElev?, geoLongArc?)
        /// </para>
        /// </summary>
        public virtual valDistVer valElev {
            get {
                XElement x = this.GetElement(valElevXName);
                return ((valDistVer)(x));
            }
            set {
                this.SetElement(valElevXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Longitude for arc
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (codeType, geoLat, geoLong, geoLatArc?, valElev?, geoLongArc?)
        /// </para>
        /// </summary>
        public virtual geoLong geoLongArc {
            get {
                XElement x = this.GetElement(geoLongArcXName);
                return ((geoLong)(x));
            }
            set {
                this.SetElement(geoLongArcXName, value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ApronGeometryPointType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(codeTypeXName, typeof(codeTypeVertex));
            localElementDictionary.Add(geoLatXName, typeof(geoLat));
            localElementDictionary.Add(geoLongXName, typeof(geoLong));
            localElementDictionary.Add(geoLatArcXName, typeof(geoLat));
            localElementDictionary.Add(valElevXName, typeof(valDistVer));
            localElementDictionary.Add(geoLongArcXName, typeof(geoLong));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Apron geometry
    /// </para>
    /// <para>
    /// Regular expression: (ApgUid, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, valElevAccuracy?, valGeoidUndulation?, uomDistVer?, txtRmk?, Asp+)
    /// </para>
    /// </summary>
    public partial class ApronGeometryType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ApgUidXName = System.Xml.Linq.XName.Get("ApgUid", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName codeDatumXName = System.Xml.Linq.XName.Get("codeDatum", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName valGeoAccuracyXName = System.Xml.Linq.XName.Get("valGeoAccuracy", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName uomGeoAccuracyXName = System.Xml.Linq.XName.Get("uomGeoAccuracy", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName valElevAccuracyXName = System.Xml.Linq.XName.Get("valElevAccuracy", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName valGeoidUndulationXName = System.Xml.Linq.XName.Get("valGeoidUndulation", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName uomDistVerXName = System.Xml.Linq.XName.Get("uomDistVer", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName txtRmkXName = System.Xml.Linq.XName.Get("txtRmk", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName AspXName = System.Xml.Linq.XName.Get("Asp", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ApronGeometryPointType> AspField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName sourceXName = System.Xml.Linq.XName.Get("source", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("ApronGeometryType", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator ApronGeometryType(XElement xe) { return XTypedServices.ToXTypedElement<ApronGeometryType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static ApronGeometryType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(ApgUidXName), new NamedContentModelEntity(codeDatumXName), new NamedContentModelEntity(valGeoAccuracyXName), new NamedContentModelEntity(uomGeoAccuracyXName), new NamedContentModelEntity(valElevAccuracyXName), new NamedContentModelEntity(valGeoidUndulationXName), new NamedContentModelEntity(uomDistVerXName), new NamedContentModelEntity(txtRmkXName), new NamedContentModelEntity(AspXName));
        }
        
        /// <summary>
        /// <para>
        /// Apron geometry
        /// </para>
        /// <para>
        /// Regular expression: (ApgUid, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, valElevAccuracy?, valGeoidUndulation?, uomDistVer?, txtRmk?, Asp+)
        /// </para>
        /// </summary>
        public ApronGeometryType() {
        }
        
        /// <summary>
        /// <para>
        /// a version of Apron geometry
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (ApgUid, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, valElevAccuracy?, valGeoidUndulation?, uomDistVer?, txtRmk?, Asp+)
        /// </para>
        /// </summary>
        public virtual ApronGeometryUidType ApgUid {
            get {
                XElement x = this.GetElement(ApgUidXName);
                return ((ApronGeometryUidType)(x));
            }
            set {
                this.SetElement(ApgUidXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Datum
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (ApgUid, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, valElevAccuracy?, valGeoidUndulation?, uomDistVer?, txtRmk?, Asp+)
        /// </para>
        /// </summary>
        public virtual codeDatum codeDatum {
            get {
                XElement x = this.GetElement(codeDatumXName);
                return ((codeDatum)(x));
            }
            set {
                this.SetElement(codeDatumXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Geographical accuracy
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (ApgUid, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, valElevAccuracy?, valGeoidUndulation?, uomDistVer?, txtRmk?, Asp+)
        /// </para>
        /// </summary>
        public virtual valDistHorz valGeoAccuracy {
            get {
                XElement x = this.GetElement(valGeoAccuracyXName);
                return ((valDistHorz)(x));
            }
            set {
                this.SetElement(valGeoAccuracyXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Unit of measurement [geographical accuracy]
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (ApgUid, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, valElevAccuracy?, valGeoidUndulation?, uomDistVer?, txtRmk?, Asp+)
        /// </para>
        /// </summary>
        public virtual uomDistHorz uomGeoAccuracy {
            get {
                XElement x = this.GetElement(uomGeoAccuracyXName);
                return ((uomDistHorz)(x));
            }
            set {
                this.SetElement(uomGeoAccuracyXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Elevation accuracy
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (ApgUid, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, valElevAccuracy?, valGeoidUndulation?, uomDistVer?, txtRmk?, Asp+)
        /// </para>
        /// </summary>
        public virtual valDistVer valElevAccuracy {
            get {
                XElement x = this.GetElement(valElevAccuracyXName);
                return ((valDistVer)(x));
            }
            set {
                this.SetElement(valElevAccuracyXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Geoid undulation
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (ApgUid, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, valElevAccuracy?, valGeoidUndulation?, uomDistVer?, txtRmk?, Asp+)
        /// </para>
        /// </summary>
        public virtual valDistVer valGeoidUndulation {
            get {
                XElement x = this.GetElement(valGeoidUndulationXName);
                return ((valDistVer)(x));
            }
            set {
                this.SetElement(valGeoidUndulationXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Unit of measurement [vertical distance]
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (ApgUid, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, valElevAccuracy?, valGeoidUndulation?, uomDistVer?, txtRmk?, Asp+)
        /// </para>
        /// </summary>
        public virtual uomElev uomDistVer {
            get {
                XElement x = this.GetElement(uomDistVerXName);
                return ((uomElev)(x));
            }
            set {
                this.SetElement(uomDistVerXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Remark
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (ApgUid, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, valElevAccuracy?, valGeoidUndulation?, uomDistVer?, txtRmk?, Asp+)
        /// </para>
        /// </summary>
        public virtual txtRmk txtRmk {
            get {
                XElement x = this.GetElement(txtRmkXName);
                return ((txtRmk)(x));
            }
            set {
                this.SetElement(txtRmkXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Apron geometry is described with Apron geometry point
        /// </para>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (ApgUid, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, valElevAccuracy?, valGeoidUndulation?, uomDistVer?, txtRmk?, Asp+)
        /// </para>
        /// </summary>
        public virtual IList<ApronGeometryPointType> Asp {
            get {
                if ((this.AspField == null)) {
                    this.AspField = new XTypedList<ApronGeometryPointType>(this, LinqToXsdTypeManager.Instance, AspXName);
                }
                return this.AspField;
            }
            set {
                if ((value == null)) {
                    this.AspField = null;
                }
                else {
                    if ((this.AspField == null)) {
                        this.AspField = XTypedList<ApronGeometryPointType>.Initialize(this, LinqToXsdTypeManager.Instance, value, AspXName);
                    }
                    else {
                        XTypedServices.SetList<ApronGeometryPointType>(this.AspField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string source {
            get {
                XAttribute x = this.Attribute(sourceXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(sourceXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ApronGeometryType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(ApgUidXName, typeof(ApronGeometryUidType));
            localElementDictionary.Add(codeDatumXName, typeof(codeDatum));
            localElementDictionary.Add(valGeoAccuracyXName, typeof(valDistHorz));
            localElementDictionary.Add(uomGeoAccuracyXName, typeof(uomDistHorz));
            localElementDictionary.Add(valElevAccuracyXName, typeof(valDistVer));
            localElementDictionary.Add(valGeoidUndulationXName, typeof(valDistVer));
            localElementDictionary.Add(uomDistVerXName, typeof(uomElev));
            localElementDictionary.Add(txtRmkXName, typeof(txtRmk));
            localElementDictionary.Add(AspXName, typeof(ApronGeometryPointType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Apron geometry - UID
    /// </para>
    /// <para>
    /// Regular expression: (ApnUid)
    /// </para>
    /// </summary>
    public partial class ApronGeometryUidType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ApnUidXName = System.Xml.Linq.XName.Get("ApnUid", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName midXName = System.Xml.Linq.XName.Get("mid", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("ApronGeometryUidType", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator ApronGeometryUidType(XElement xe) { return XTypedServices.ToXTypedElement<ApronGeometryUidType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static ApronGeometryUidType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(ApnUidXName));
        }
        
        /// <summary>
        /// <para>
        /// Apron geometry - UID
        /// </para>
        /// <para>
        /// Regular expression: (ApnUid)
        /// </para>
        /// </summary>
        public ApronGeometryUidType() {
        }
        
        /// <summary>
        /// <para>
        /// Apron geometry is associated with Apron
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (ApnUid)
        /// </para>
        /// </summary>
        public virtual ApronUidType ApnUid {
            get {
                XElement x = this.GetElement(ApnUidXName);
                return ((ApronUidType)(x));
            }
            set {
                this.SetElement(ApnUidXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string mid {
            get {
                XAttribute x = this.Attribute(midXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(midXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ApronGeometryUidType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(ApnUidXName, typeof(ApronUidType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Apron lighting system
    /// </para>
    /// <para>
    /// Regular expression: (AlsUid, txtDescr?, txtDescrEmerg?, codeIntst?, codeColour?, txtRmk?, Apg*)
    /// </para>
    /// </summary>
    public partial class ApronLightingSystemType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName AlsUidXName = System.Xml.Linq.XName.Get("AlsUid", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName txtDescrXName = System.Xml.Linq.XName.Get("txtDescr", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName txtDescrEmergXName = System.Xml.Linq.XName.Get("txtDescrEmerg", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName codeIntstXName = System.Xml.Linq.XName.Get("codeIntst", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName codeColourXName = System.Xml.Linq.XName.Get("codeColour", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName txtRmkXName = System.Xml.Linq.XName.Get("txtRmk", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ApgXName = System.Xml.Linq.XName.Get("Apg", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<LightGroupType> ApgField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName sourceXName = System.Xml.Linq.XName.Get("source", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("ApronLightingSystemType", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator ApronLightingSystemType(XElement xe) { return XTypedServices.ToXTypedElement<ApronLightingSystemType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static ApronLightingSystemType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(AlsUidXName), new NamedContentModelEntity(txtDescrXName), new NamedContentModelEntity(txtDescrEmergXName), new NamedContentModelEntity(codeIntstXName), new NamedContentModelEntity(codeColourXName), new NamedContentModelEntity(txtRmkXName), new NamedContentModelEntity(ApgXName));
        }
        
        /// <summary>
        /// <para>
        /// Apron lighting system
        /// </para>
        /// <para>
        /// Regular expression: (AlsUid, txtDescr?, txtDescrEmerg?, codeIntst?, codeColour?, txtRmk?, Apg*)
        /// </para>
        /// </summary>
        public ApronLightingSystemType() {
        }
        
        /// <summary>
        /// <para>
        /// Apron lighting system - a version of RWY lighting system
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (AlsUid, txtDescr?, txtDescrEmerg?, codeIntst?, codeColour?, txtRmk?, Apg*)
        /// </para>
        /// </summary>
        public virtual ApronLightingSystemUidType AlsUid {
            get {
                XElement x = this.GetElement(AlsUidXName);
                return ((ApronLightingSystemUidType)(x));
            }
            set {
                this.SetElement(AlsUidXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Description
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (AlsUid, txtDescr?, txtDescrEmerg?, codeIntst?, codeColour?, txtRmk?, Apg*)
        /// </para>
        /// </summary>
        public virtual txtDescr txtDescr {
            get {
                XElement x = this.GetElement(txtDescrXName);
                return ((txtDescr)(x));
            }
            set {
                this.SetElement(txtDescrXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Availability of emergency lighting system description
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (AlsUid, txtDescr?, txtDescrEmerg?, codeIntst?, codeColour?, txtRmk?, Apg*)
        /// </para>
        /// </summary>
        public virtual txtDescr txtDescrEmerg {
            get {
                XElement x = this.GetElement(txtDescrEmergXName);
                return ((txtDescr)(x));
            }
            set {
                this.SetElement(txtDescrEmergXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// A code indicating the global intensity of the lighting system
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (AlsUid, txtDescr?, txtDescrEmerg?, codeIntst?, codeColour?, txtRmk?, Apg*)
        /// </para>
        /// </summary>
        public virtual codeIntstLgt codeIntst {
            get {
                XElement x = this.GetElement(codeIntstXName);
                return ((codeIntstLgt)(x));
            }
            set {
                this.SetElement(codeIntstXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Colour
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (AlsUid, txtDescr?, txtDescrEmerg?, codeIntst?, codeColour?, txtRmk?, Apg*)
        /// </para>
        /// </summary>
        public virtual codeColour codeColour {
            get {
                XElement x = this.GetElement(codeColourXName);
                return ((codeColour)(x));
            }
            set {
                this.SetElement(codeColourXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Remark
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (AlsUid, txtDescr?, txtDescrEmerg?, codeIntst?, codeColour?, txtRmk?, Apg*)
        /// </para>
        /// </summary>
        public virtual txtRmk txtRmk {
            get {
                XElement x = this.GetElement(txtRmkXName);
                return ((txtRmk)(x));
            }
            set {
                this.SetElement(txtRmkXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Apron lighting system is composed of Group of ligthing system
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (AlsUid, txtDescr?, txtDescrEmerg?, codeIntst?, codeColour?, txtRmk?, Apg*)
        /// </para>
        /// </summary>
        public virtual IList<LightGroupType> Apg {
            get {
                if ((this.ApgField == null)) {
                    this.ApgField = new XTypedList<LightGroupType>(this, LinqToXsdTypeManager.Instance, ApgXName);
                }
                return this.ApgField;
            }
            set {
                if ((value == null)) {
                    this.ApgField = null;
                }
                else {
                    if ((this.ApgField == null)) {
                        this.ApgField = XTypedList<LightGroupType>.Initialize(this, LinqToXsdTypeManager.Instance, value, ApgXName);
                    }
                    else {
                        XTypedServices.SetList<LightGroupType>(this.ApgField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string source {
            get {
                XAttribute x = this.Attribute(sourceXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(sourceXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ApronLightingSystemType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(AlsUidXName, typeof(ApronLightingSystemUidType));
            localElementDictionary.Add(txtDescrXName, typeof(txtDescr));
            localElementDictionary.Add(txtDescrEmergXName, typeof(txtDescr));
            localElementDictionary.Add(codeIntstXName, typeof(codeIntstLgt));
            localElementDictionary.Add(codeColourXName, typeof(codeColour));
            localElementDictionary.Add(txtRmkXName, typeof(txtRmk));
            localElementDictionary.Add(ApgXName, typeof(LightGroupType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Apron lighting system - UID
    /// </para>
    /// <para>
    /// Regular expression: (ApnUid, codePsn)
    /// </para>
    /// </summary>
    public partial class ApronLightingSystemUidType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ApnUidXName = System.Xml.Linq.XName.Get("ApnUid", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName codePsnXName = System.Xml.Linq.XName.Get("codePsn", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName midXName = System.Xml.Linq.XName.Get("mid", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("ApronLightingSystemUidType", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator ApronLightingSystemUidType(XElement xe) { return XTypedServices.ToXTypedElement<ApronLightingSystemUidType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static ApronLightingSystemUidType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(ApnUidXName), new NamedContentModelEntity(codePsnXName));
        }
        
        /// <summary>
        /// <para>
        /// Apron lighting system - UID
        /// </para>
        /// <para>
        /// Regular expression: (ApnUid, codePsn)
        /// </para>
        /// </summary>
        public ApronLightingSystemUidType() {
        }
        
        /// <summary>
        /// <para>
        /// Apron lighting system is owned by one and only one Apron
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (ApnUid, codePsn)
        /// </para>
        /// </summary>
        public virtual ApronUidType ApnUid {
            get {
                XElement x = this.GetElement(ApnUidXName);
                return ((ApronUidType)(x));
            }
            set {
                this.SetElement(ApnUidXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Position
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (ApnUid, codePsn)
        /// </para>
        /// </summary>
        public virtual codePsnApron codePsn {
            get {
                XElement x = this.GetElement(codePsnXName);
                return ((codePsnApron)(x));
            }
            set {
                this.SetElement(codePsnXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string mid {
            get {
                XAttribute x = this.Attribute(midXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(midXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ApronLightingSystemUidType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(ApnUidXName, typeof(ApronUidType));
            localElementDictionary.Add(codePsnXName, typeof(codePsnApron));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Apron
    /// </para>
    /// <para>
    /// Regular expression: (ApnUid, codeComposition?, codePreparation?, codeCondSfc?, valPcnClass?, codePcnPavementType?, codePcnPavementSubgrade?, codePcnMaxTirePressure?, valPcnMaxTirePressure?, codePcnEvalMethod?, txtPcnNote?, valLcnClass?, valSiwlWeight?, uomSiwlWeight?, valSiwlTirePressure?, uomSiwlTirePressure?, valAuwWeight?, uomAuwWeight?, codeStrength?, txtDescrStrength?, codeSts?, txtMarking?, txtLgt?, txtRmk?)
    /// </para>
    /// </summary>
    public partial class ApronType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ApnUidXName = System.Xml.Linq.XName.Get("ApnUid", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName codeCompositionXName = System.Xml.Linq.XName.Get("codeComposition", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName codePreparationXName = System.Xml.Linq.XName.Get("codePreparation", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName codeCondSfcXName = System.Xml.Linq.XName.Get("codeCondSfc", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName valPcnClassXName = System.Xml.Linq.XName.Get("valPcnClass", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName codePcnPavementTypeXName = System.Xml.Linq.XName.Get("codePcnPavementType", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName codePcnPavementSubgradeXName = System.Xml.Linq.XName.Get("codePcnPavementSubgrade", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName codePcnMaxTirePressureXName = System.Xml.Linq.XName.Get("codePcnMaxTirePressure", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName valPcnMaxTirePressureXName = System.Xml.Linq.XName.Get("valPcnMaxTirePressure", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName codePcnEvalMethodXName = System.Xml.Linq.XName.Get("codePcnEvalMethod", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName txtPcnNoteXName = System.Xml.Linq.XName.Get("txtPcnNote", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName valLcnClassXName = System.Xml.Linq.XName.Get("valLcnClass", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName valSiwlWeightXName = System.Xml.Linq.XName.Get("valSiwlWeight", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName uomSiwlWeightXName = System.Xml.Linq.XName.Get("uomSiwlWeight", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName valSiwlTirePressureXName = System.Xml.Linq.XName.Get("valSiwlTirePressure", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName uomSiwlTirePressureXName = System.Xml.Linq.XName.Get("uomSiwlTirePressure", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName valAuwWeightXName = System.Xml.Linq.XName.Get("valAuwWeight", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName uomAuwWeightXName = System.Xml.Linq.XName.Get("uomAuwWeight", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName codeStrengthXName = System.Xml.Linq.XName.Get("codeStrength", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName txtDescrStrengthXName = System.Xml.Linq.XName.Get("txtDescrStrength", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName codeStsXName = System.Xml.Linq.XName.Get("codeSts", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName txtMarkingXName = System.Xml.Linq.XName.Get("txtMarking", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName txtLgtXName = System.Xml.Linq.XName.Get("txtLgt", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName txtRmkXName = System.Xml.Linq.XName.Get("txtRmk", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName sourceXName = System.Xml.Linq.XName.Get("source", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("ApronType", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator ApronType(XElement xe) { return XTypedServices.ToXTypedElement<ApronType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static ApronType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(ApnUidXName), new NamedContentModelEntity(codeCompositionXName), new NamedContentModelEntity(codePreparationXName), new NamedContentModelEntity(codeCondSfcXName), new NamedContentModelEntity(valPcnClassXName), new NamedContentModelEntity(codePcnPavementTypeXName), new NamedContentModelEntity(codePcnPavementSubgradeXName), new NamedContentModelEntity(codePcnMaxTirePressureXName), new NamedContentModelEntity(valPcnMaxTirePressureXName), new NamedContentModelEntity(codePcnEvalMethodXName), new NamedContentModelEntity(txtPcnNoteXName), new NamedContentModelEntity(valLcnClassXName), new NamedContentModelEntity(valSiwlWeightXName), new NamedContentModelEntity(uomSiwlWeightXName), new NamedContentModelEntity(valSiwlTirePressureXName), new NamedContentModelEntity(uomSiwlTirePressureXName), new NamedContentModelEntity(valAuwWeightXName), new NamedContentModelEntity(uomAuwWeightXName), new NamedContentModelEntity(codeStrengthXName), new NamedContentModelEntity(txtDescrStrengthXName), new NamedContentModelEntity(codeStsXName), new NamedContentModelEntity(txtMarkingXName), new NamedContentModelEntity(txtLgtXName), new NamedContentModelEntity(txtRmkXName));
        }
        
        /// <summary>
        /// <para>
        /// Apron
        /// </para>
        /// <para>
        /// Regular expression: (ApnUid, codeComposition?, codePreparation?, codeCondSfc?, valPcnClass?, codePcnPavementType?, codePcnPavementSubgrade?, codePcnMaxTirePressure?, valPcnMaxTirePressure?, codePcnEvalMethod?, txtPcnNote?, valLcnClass?, valSiwlWeight?, uomSiwlWeight?, valSiwlTirePressure?, uomSiwlTirePressure?, valAuwWeight?, uomAuwWeight?, codeStrength?, txtDescrStrength?, codeSts?, txtMarking?, txtLgt?, txtRmk?)
        /// </para>
        /// </summary>
        public ApronType() {
        }
        
        /// <summary>
        /// <para>
        /// a version of Apron
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (ApnUid, codeComposition?, codePreparation?, codeCondSfc?, valPcnClass?, codePcnPavementType?, codePcnPavementSubgrade?, codePcnMaxTirePressure?, valPcnMaxTirePressure?, codePcnEvalMethod?, txtPcnNote?, valLcnClass?, valSiwlWeight?, uomSiwlWeight?, valSiwlTirePressure?, uomSiwlTirePressure?, valAuwWeight?, uomAuwWeight?, codeStrength?, txtDescrStrength?, codeSts?, txtMarking?, txtLgt?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual ApronUidType ApnUid {
            get {
                XElement x = this.GetElement(ApnUidXName);
                return ((ApronUidType)(x));
            }
            set {
                this.SetElement(ApnUidXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Surface composition
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (ApnUid, codeComposition?, codePreparation?, codeCondSfc?, valPcnClass?, codePcnPavementType?, codePcnPavementSubgrade?, codePcnMaxTirePressure?, valPcnMaxTirePressure?, codePcnEvalMethod?, txtPcnNote?, valLcnClass?, valSiwlWeight?, uomSiwlWeight?, valSiwlTirePressure?, uomSiwlTirePressure?, valAuwWeight?, uomAuwWeight?, codeStrength?, txtDescrStrength?, codeSts?, txtMarking?, txtLgt?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual codeCompositionSfc codeComposition {
            get {
                XElement x = this.GetElement(codeCompositionXName);
                return ((codeCompositionSfc)(x));
            }
            set {
                this.SetElement(codeCompositionXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Surface preparation method
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (ApnUid, codeComposition?, codePreparation?, codeCondSfc?, valPcnClass?, codePcnPavementType?, codePcnPavementSubgrade?, codePcnMaxTirePressure?, valPcnMaxTirePressure?, codePcnEvalMethod?, txtPcnNote?, valLcnClass?, valSiwlWeight?, uomSiwlWeight?, valSiwlTirePressure?, uomSiwlTirePressure?, valAuwWeight?, uomAuwWeight?, codeStrength?, txtDescrStrength?, codeSts?, txtMarking?, txtLgt?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual codePreparationSfc codePreparation {
            get {
                XElement x = this.GetElement(codePreparationXName);
                return ((codePreparationSfc)(x));
            }
            set {
                this.SetElement(codePreparationXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Surface condition
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (ApnUid, codeComposition?, codePreparation?, codeCondSfc?, valPcnClass?, codePcnPavementType?, codePcnPavementSubgrade?, codePcnMaxTirePressure?, valPcnMaxTirePressure?, codePcnEvalMethod?, txtPcnNote?, valLcnClass?, valSiwlWeight?, uomSiwlWeight?, valSiwlTirePressure?, uomSiwlTirePressure?, valAuwWeight?, uomAuwWeight?, codeStrength?, txtDescrStrength?, codeSts?, txtMarking?, txtLgt?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual codeCondSfc codeCondSfc {
            get {
                XElement x = this.GetElement(codeCondSfcXName);
                return ((codeCondSfc)(x));
            }
            set {
                this.SetElement(codeCondSfcXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// PCN (Pavement Classification Number) value
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (ApnUid, codeComposition?, codePreparation?, codeCondSfc?, valPcnClass?, codePcnPavementType?, codePcnPavementSubgrade?, codePcnMaxTirePressure?, valPcnMaxTirePressure?, codePcnEvalMethod?, txtPcnNote?, valLcnClass?, valSiwlWeight?, uomSiwlWeight?, valSiwlTirePressure?, uomSiwlTirePressure?, valAuwWeight?, uomAuwWeight?, codeStrength?, txtDescrStrength?, codeSts?, txtMarking?, txtLgt?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual valPcnClass valPcnClass {
            get {
                XElement x = this.GetElement(valPcnClassXName);
                return ((valPcnClass)(x));
            }
            set {
                this.SetElement(valPcnClassXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// PCN pavement type
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (ApnUid, codeComposition?, codePreparation?, codeCondSfc?, valPcnClass?, codePcnPavementType?, codePcnPavementSubgrade?, codePcnMaxTirePressure?, valPcnMaxTirePressure?, codePcnEvalMethod?, txtPcnNote?, valLcnClass?, valSiwlWeight?, uomSiwlWeight?, valSiwlTirePressure?, uomSiwlTirePressure?, valAuwWeight?, uomAuwWeight?, codeStrength?, txtDescrStrength?, codeSts?, txtMarking?, txtLgt?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual codePcnPavementType codePcnPavementType {
            get {
                XElement x = this.GetElement(codePcnPavementTypeXName);
                return ((codePcnPavementType)(x));
            }
            set {
                this.SetElement(codePcnPavementTypeXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// PCN pavement subgrade
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (ApnUid, codeComposition?, codePreparation?, codeCondSfc?, valPcnClass?, codePcnPavementType?, codePcnPavementSubgrade?, codePcnMaxTirePressure?, valPcnMaxTirePressure?, codePcnEvalMethod?, txtPcnNote?, valLcnClass?, valSiwlWeight?, uomSiwlWeight?, valSiwlTirePressure?, uomSiwlTirePressure?, valAuwWeight?, uomAuwWeight?, codeStrength?, txtDescrStrength?, codeSts?, txtMarking?, txtLgt?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual codePcnPavementSubgrade codePcnPavementSubgrade {
            get {
                XElement x = this.GetElement(codePcnPavementSubgradeXName);
                return ((codePcnPavementSubgrade)(x));
            }
            set {
                this.SetElement(codePcnPavementSubgradeXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// PCN max tire pressure code
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (ApnUid, codeComposition?, codePreparation?, codeCondSfc?, valPcnClass?, codePcnPavementType?, codePcnPavementSubgrade?, codePcnMaxTirePressure?, valPcnMaxTirePressure?, codePcnEvalMethod?, txtPcnNote?, valLcnClass?, valSiwlWeight?, uomSiwlWeight?, valSiwlTirePressure?, uomSiwlTirePressure?, valAuwWeight?, uomAuwWeight?, codeStrength?, txtDescrStrength?, codeSts?, txtMarking?, txtLgt?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual codePcnMaxTirePressure codePcnMaxTirePressure {
            get {
                XElement x = this.GetElement(codePcnMaxTirePressureXName);
                return ((codePcnMaxTirePressure)(x));
            }
            set {
                this.SetElement(codePcnMaxTirePressureXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// PCN max tire pressure value
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (ApnUid, codeComposition?, codePreparation?, codeCondSfc?, valPcnClass?, codePcnPavementType?, codePcnPavementSubgrade?, codePcnMaxTirePressure?, valPcnMaxTirePressure?, codePcnEvalMethod?, txtPcnNote?, valLcnClass?, valSiwlWeight?, uomSiwlWeight?, valSiwlTirePressure?, uomSiwlTirePressure?, valAuwWeight?, uomAuwWeight?, codeStrength?, txtDescrStrength?, codeSts?, txtMarking?, txtLgt?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual valPressurePcnTire valPcnMaxTirePressure {
            get {
                XElement x = this.GetElement(valPcnMaxTirePressureXName);
                return ((valPressurePcnTire)(x));
            }
            set {
                this.SetElement(valPcnMaxTirePressureXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// PCN evaluation method
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (ApnUid, codeComposition?, codePreparation?, codeCondSfc?, valPcnClass?, codePcnPavementType?, codePcnPavementSubgrade?, codePcnMaxTirePressure?, valPcnMaxTirePressure?, codePcnEvalMethod?, txtPcnNote?, valLcnClass?, valSiwlWeight?, uomSiwlWeight?, valSiwlTirePressure?, uomSiwlTirePressure?, valAuwWeight?, uomAuwWeight?, codeStrength?, txtDescrStrength?, codeSts?, txtMarking?, txtLgt?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual codePcnEvalMethod codePcnEvalMethod {
            get {
                XElement x = this.GetElement(codePcnEvalMethodXName);
                return ((codePcnEvalMethod)(x));
            }
            set {
                this.SetElement(codePcnEvalMethodXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// PCN notes
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (ApnUid, codeComposition?, codePreparation?, codeCondSfc?, valPcnClass?, codePcnPavementType?, codePcnPavementSubgrade?, codePcnMaxTirePressure?, valPcnMaxTirePressure?, codePcnEvalMethod?, txtPcnNote?, valLcnClass?, valSiwlWeight?, uomSiwlWeight?, valSiwlTirePressure?, uomSiwlTirePressure?, valAuwWeight?, uomAuwWeight?, codeStrength?, txtDescrStrength?, codeSts?, txtMarking?, txtLgt?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual txtRmk txtPcnNote {
            get {
                XElement x = this.GetElement(txtPcnNoteXName);
                return ((txtRmk)(x));
            }
            set {
                this.SetElement(txtPcnNoteXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// LCN value
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (ApnUid, codeComposition?, codePreparation?, codeCondSfc?, valPcnClass?, codePcnPavementType?, codePcnPavementSubgrade?, codePcnMaxTirePressure?, valPcnMaxTirePressure?, codePcnEvalMethod?, txtPcnNote?, valLcnClass?, valSiwlWeight?, uomSiwlWeight?, valSiwlTirePressure?, uomSiwlTirePressure?, valAuwWeight?, uomAuwWeight?, codeStrength?, txtDescrStrength?, codeSts?, txtMarking?, txtLgt?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual valLcnClass valLcnClass {
            get {
                XElement x = this.GetElement(valLcnClassXName);
                return ((valLcnClass)(x));
            }
            set {
                this.SetElement(valLcnClassXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// SIWL weight
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (ApnUid, codeComposition?, codePreparation?, codeCondSfc?, valPcnClass?, codePcnPavementType?, codePcnPavementSubgrade?, codePcnMaxTirePressure?, valPcnMaxTirePressure?, codePcnEvalMethod?, txtPcnNote?, valLcnClass?, valSiwlWeight?, uomSiwlWeight?, valSiwlTirePressure?, uomSiwlTirePressure?, valAuwWeight?, uomAuwWeight?, codeStrength?, txtDescrStrength?, codeSts?, txtMarking?, txtLgt?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual valWeight valSiwlWeight {
            get {
                XElement x = this.GetElement(valSiwlWeightXName);
                return ((valWeight)(x));
            }
            set {
                this.SetElement(valSiwlWeightXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Unit of measurement [SIWL weight]
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (ApnUid, codeComposition?, codePreparation?, codeCondSfc?, valPcnClass?, codePcnPavementType?, codePcnPavementSubgrade?, codePcnMaxTirePressure?, valPcnMaxTirePressure?, codePcnEvalMethod?, txtPcnNote?, valLcnClass?, valSiwlWeight?, uomSiwlWeight?, valSiwlTirePressure?, uomSiwlTirePressure?, valAuwWeight?, uomAuwWeight?, codeStrength?, txtDescrStrength?, codeSts?, txtMarking?, txtLgt?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual uomWeight uomSiwlWeight {
            get {
                XElement x = this.GetElement(uomSiwlWeightXName);
                return ((uomWeight)(x));
            }
            set {
                this.SetElement(uomSiwlWeightXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// SIWL tire pressure
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (ApnUid, codeComposition?, codePreparation?, codeCondSfc?, valPcnClass?, codePcnPavementType?, codePcnPavementSubgrade?, codePcnMaxTirePressure?, valPcnMaxTirePressure?, codePcnEvalMethod?, txtPcnNote?, valLcnClass?, valSiwlWeight?, uomSiwlWeight?, valSiwlTirePressure?, uomSiwlTirePressure?, valAuwWeight?, uomAuwWeight?, codeStrength?, txtDescrStrength?, codeSts?, txtMarking?, txtLgt?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual valPressure valSiwlTirePressure {
            get {
                XElement x = this.GetElement(valSiwlTirePressureXName);
                return ((valPressure)(x));
            }
            set {
                this.SetElement(valSiwlTirePressureXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Unit of measurement [SIWL tire pressure]
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (ApnUid, codeComposition?, codePreparation?, codeCondSfc?, valPcnClass?, codePcnPavementType?, codePcnPavementSubgrade?, codePcnMaxTirePressure?, valPcnMaxTirePressure?, codePcnEvalMethod?, txtPcnNote?, valLcnClass?, valSiwlWeight?, uomSiwlWeight?, valSiwlTirePressure?, uomSiwlTirePressure?, valAuwWeight?, uomAuwWeight?, codeStrength?, txtDescrStrength?, codeSts?, txtMarking?, txtLgt?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual uomPressure uomSiwlTirePressure {
            get {
                XElement x = this.GetElement(uomSiwlTirePressureXName);
                return ((uomPressure)(x));
            }
            set {
                this.SetElement(uomSiwlTirePressureXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// All Up Wheel weight
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (ApnUid, codeComposition?, codePreparation?, codeCondSfc?, valPcnClass?, codePcnPavementType?, codePcnPavementSubgrade?, codePcnMaxTirePressure?, valPcnMaxTirePressure?, codePcnEvalMethod?, txtPcnNote?, valLcnClass?, valSiwlWeight?, uomSiwlWeight?, valSiwlTirePressure?, uomSiwlTirePressure?, valAuwWeight?, uomAuwWeight?, codeStrength?, txtDescrStrength?, codeSts?, txtMarking?, txtLgt?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual valWeight valAuwWeight {
            get {
                XElement x = this.GetElement(valAuwWeightXName);
                return ((valWeight)(x));
            }
            set {
                this.SetElement(valAuwWeightXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Unit of measurement [AUW weight]
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (ApnUid, codeComposition?, codePreparation?, codeCondSfc?, valPcnClass?, codePcnPavementType?, codePcnPavementSubgrade?, codePcnMaxTirePressure?, valPcnMaxTirePressure?, codePcnEvalMethod?, txtPcnNote?, valLcnClass?, valSiwlWeight?, uomSiwlWeight?, valSiwlTirePressure?, uomSiwlTirePressure?, valAuwWeight?, uomAuwWeight?, codeStrength?, txtDescrStrength?, codeSts?, txtMarking?, txtLgt?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual uomWeight uomAuwWeight {
            get {
                XElement x = this.GetElement(uomAuwWeightXName);
                return ((uomWeight)(x));
            }
            set {
                this.SetElement(uomAuwWeightXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// [Deprecated] Surface strength method
        /// </para>
        /// <para>
        /// DEPRECATED-4.5
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (ApnUid, codeComposition?, codePreparation?, codeCondSfc?, valPcnClass?, codePcnPavementType?, codePcnPavementSubgrade?, codePcnMaxTirePressure?, valPcnMaxTirePressure?, codePcnEvalMethod?, txtPcnNote?, valLcnClass?, valSiwlWeight?, uomSiwlWeight?, valSiwlTirePressure?, uomSiwlTirePressure?, valAuwWeight?, uomAuwWeight?, codeStrength?, txtDescrStrength?, codeSts?, txtMarking?, txtLgt?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual codeStrengthSfc codeStrength {
            get {
                XElement x = this.GetElement(codeStrengthXName);
                return ((codeStrengthSfc)(x));
            }
            set {
                this.SetElement(codeStrengthXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// [Deprecated] Surface strength
        /// </para>
        /// <para>
        /// DEPRECATED-4.5
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (ApnUid, codeComposition?, codePreparation?, codeCondSfc?, valPcnClass?, codePcnPavementType?, codePcnPavementSubgrade?, codePcnMaxTirePressure?, valPcnMaxTirePressure?, codePcnEvalMethod?, txtPcnNote?, valLcnClass?, valSiwlWeight?, uomSiwlWeight?, valSiwlTirePressure?, uomSiwlTirePressure?, valAuwWeight?, uomAuwWeight?, codeStrength?, txtDescrStrength?, codeSts?, txtMarking?, txtLgt?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual txtDescr txtDescrStrength {
            get {
                XElement x = this.GetElement(txtDescrStrengthXName);
                return ((txtDescr)(x));
            }
            set {
                this.SetElement(txtDescrStrengthXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Operational status
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (ApnUid, codeComposition?, codePreparation?, codeCondSfc?, valPcnClass?, codePcnPavementType?, codePcnPavementSubgrade?, codePcnMaxTirePressure?, valPcnMaxTirePressure?, codePcnEvalMethod?, txtPcnNote?, valLcnClass?, valSiwlWeight?, uomSiwlWeight?, valSiwlTirePressure?, uomSiwlTirePressure?, valAuwWeight?, uomAuwWeight?, codeStrength?, txtDescrStrength?, codeSts?, txtMarking?, txtLgt?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual codeStsSfc codeSts {
            get {
                XElement x = this.GetElement(codeStsXName);
                return ((codeStsSfc)(x));
            }
            set {
                this.SetElement(codeStsXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Marking system description
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (ApnUid, codeComposition?, codePreparation?, codeCondSfc?, valPcnClass?, codePcnPavementType?, codePcnPavementSubgrade?, codePcnMaxTirePressure?, valPcnMaxTirePressure?, codePcnEvalMethod?, txtPcnNote?, valLcnClass?, valSiwlWeight?, uomSiwlWeight?, valSiwlTirePressure?, uomSiwlTirePressure?, valAuwWeight?, uomAuwWeight?, codeStrength?, txtDescrStrength?, codeSts?, txtMarking?, txtLgt?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual txtDescr txtMarking {
            get {
                XElement x = this.GetElement(txtMarkingXName);
                return ((txtDescr)(x));
            }
            set {
                this.SetElement(txtMarkingXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// [Deprecated] Lighting system description
        /// </para>
        /// <para>
        /// DEPRECATED-4.5
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (ApnUid, codeComposition?, codePreparation?, codeCondSfc?, valPcnClass?, codePcnPavementType?, codePcnPavementSubgrade?, codePcnMaxTirePressure?, valPcnMaxTirePressure?, codePcnEvalMethod?, txtPcnNote?, valLcnClass?, valSiwlWeight?, uomSiwlWeight?, valSiwlTirePressure?, uomSiwlTirePressure?, valAuwWeight?, uomAuwWeight?, codeStrength?, txtDescrStrength?, codeSts?, txtMarking?, txtLgt?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual txtDescr txtLgt {
            get {
                XElement x = this.GetElement(txtLgtXName);
                return ((txtDescr)(x));
            }
            set {
                this.SetElement(txtLgtXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Remark
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (ApnUid, codeComposition?, codePreparation?, codeCondSfc?, valPcnClass?, codePcnPavementType?, codePcnPavementSubgrade?, codePcnMaxTirePressure?, valPcnMaxTirePressure?, codePcnEvalMethod?, txtPcnNote?, valLcnClass?, valSiwlWeight?, uomSiwlWeight?, valSiwlTirePressure?, uomSiwlTirePressure?, valAuwWeight?, uomAuwWeight?, codeStrength?, txtDescrStrength?, codeSts?, txtMarking?, txtLgt?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual txtRmk txtRmk {
            get {
                XElement x = this.GetElement(txtRmkXName);
                return ((txtRmk)(x));
            }
            set {
                this.SetElement(txtRmkXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string source {
            get {
                XAttribute x = this.Attribute(sourceXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(sourceXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ApronType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(ApnUidXName, typeof(ApronUidType));
            localElementDictionary.Add(codeCompositionXName, typeof(codeCompositionSfc));
            localElementDictionary.Add(codePreparationXName, typeof(codePreparationSfc));
            localElementDictionary.Add(codeCondSfcXName, typeof(codeCondSfc));
            localElementDictionary.Add(valPcnClassXName, typeof(valPcnClass));
            localElementDictionary.Add(codePcnPavementTypeXName, typeof(codePcnPavementType));
            localElementDictionary.Add(codePcnPavementSubgradeXName, typeof(codePcnPavementSubgrade));
            localElementDictionary.Add(codePcnMaxTirePressureXName, typeof(codePcnMaxTirePressure));
            localElementDictionary.Add(valPcnMaxTirePressureXName, typeof(valPressurePcnTire));
            localElementDictionary.Add(codePcnEvalMethodXName, typeof(codePcnEvalMethod));
            localElementDictionary.Add(txtPcnNoteXName, typeof(txtRmk));
            localElementDictionary.Add(valLcnClassXName, typeof(valLcnClass));
            localElementDictionary.Add(valSiwlWeightXName, typeof(valWeight));
            localElementDictionary.Add(uomSiwlWeightXName, typeof(uomWeight));
            localElementDictionary.Add(valSiwlTirePressureXName, typeof(valPressure));
            localElementDictionary.Add(uomSiwlTirePressureXName, typeof(uomPressure));
            localElementDictionary.Add(valAuwWeightXName, typeof(valWeight));
            localElementDictionary.Add(uomAuwWeightXName, typeof(uomWeight));
            localElementDictionary.Add(codeStrengthXName, typeof(codeStrengthSfc));
            localElementDictionary.Add(txtDescrStrengthXName, typeof(txtDescr));
            localElementDictionary.Add(codeStsXName, typeof(codeStsSfc));
            localElementDictionary.Add(txtMarkingXName, typeof(txtDescr));
            localElementDictionary.Add(txtLgtXName, typeof(txtDescr));
            localElementDictionary.Add(txtRmkXName, typeof(txtRmk));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Apron - UID
    /// </para>
    /// <para>
    /// Regular expression: (AhpUid, txtName)
    /// </para>
    /// </summary>
    public partial class ApronUidType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName AhpUidXName = System.Xml.Linq.XName.Get("AhpUid", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName txtNameXName = System.Xml.Linq.XName.Get("txtName", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName midXName = System.Xml.Linq.XName.Get("mid", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("ApronUidType", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator ApronUidType(XElement xe) { return XTypedServices.ToXTypedElement<ApronUidType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static ApronUidType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(AhpUidXName), new NamedContentModelEntity(txtNameXName));
        }
        
        /// <summary>
        /// <para>
        /// Apron - UID
        /// </para>
        /// <para>
        /// Regular expression: (AhpUid, txtName)
        /// </para>
        /// </summary>
        public ApronUidType() {
        }
        
        /// <summary>
        /// <para>
        /// Apron is located at Aerodrome / Heliport
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (AhpUid, txtName)
        /// </para>
        /// </summary>
        public virtual AerodromeHeliportUidType AhpUid {
            get {
                XElement x = this.GetElement(AhpUidXName);
                return ((AerodromeHeliportUidType)(x));
            }
            set {
                this.SetElement(AhpUidXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Name
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (AhpUid, txtName)
        /// </para>
        /// </summary>
        public virtual txtName txtName {
            get {
                XElement x = this.GetElement(txtNameXName);
                return ((txtName)(x));
            }
            set {
                this.SetElement(txtNameXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string mid {
            get {
                XAttribute x = this.Attribute(midXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(midXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ApronUidType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(AhpUidXName, typeof(AerodromeHeliportUidType));
            localElementDictionary.Add(txtNameXName, typeof(txtName));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Callsign
    /// </para>
    /// <para>
    /// Regular expression: (txtCallSign, codeLang, txtRmk?)
    /// </para>
    /// </summary>
    public partial class CallsignType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName txtCallSignXName = System.Xml.Linq.XName.Get("txtCallSign", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName codeLangXName = System.Xml.Linq.XName.Get("codeLang", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName txtRmkXName = System.Xml.Linq.XName.Get("txtRmk", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("CallsignType", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator CallsignType(XElement xe) { return XTypedServices.ToXTypedElement<CallsignType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static CallsignType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(txtCallSignXName), new NamedContentModelEntity(codeLangXName), new NamedContentModelEntity(txtRmkXName));
        }
        
        /// <summary>
        /// <para>
        /// Callsign
        /// </para>
        /// <para>
        /// Regular expression: (txtCallSign, codeLang, txtRmk?)
        /// </para>
        /// </summary>
        public CallsignType() {
        }
        
        /// <summary>
        /// <para>
        /// Call sign
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (txtCallSign, codeLang, txtRmk?)
        /// </para>
        /// </summary>
        public virtual txtName txtCallSign {
            get {
                XElement x = this.GetElement(txtCallSignXName);
                return ((txtName)(x));
            }
            set {
                this.SetElement(txtCallSignXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Language
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (txtCallSign, codeLang, txtRmk?)
        /// </para>
        /// </summary>
        public virtual codeLang codeLang {
            get {
                XElement x = this.GetElement(codeLangXName);
                return ((codeLang)(x));
            }
            set {
                this.SetElement(codeLangXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Remark
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (txtCallSign, codeLang, txtRmk?)
        /// </para>
        /// </summary>
        public virtual txtRmk txtRmk {
            get {
                XElement x = this.GetElement(txtRmkXName);
                return ((txtRmk)(x));
            }
            set {
                this.SetElement(txtRmkXName, value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<CallsignType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(txtCallSignXName, typeof(txtName));
            localElementDictionary.Add(codeLangXName, typeof(codeLang));
            localElementDictionary.Add(txtRmkXName, typeof(txtRmk));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Checkpoint
    /// </para>
    /// <para>
    /// Regular expression: (NscUid, txtRmk?)
    /// </para>
    /// </summary>
    public partial class CheckpointType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName NscUidXName = System.Xml.Linq.XName.Get("NscUid", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName txtRmkXName = System.Xml.Linq.XName.Get("txtRmk", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName sourceXName = System.Xml.Linq.XName.Get("source", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("CheckpointType", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator CheckpointType(XElement xe) { return XTypedServices.ToXTypedElement<CheckpointType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static CheckpointType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(NscUidXName), new NamedContentModelEntity(txtRmkXName));
        }
        
        /// <summary>
        /// <para>
        /// Checkpoint
        /// </para>
        /// <para>
        /// Regular expression: (NscUid, txtRmk?)
        /// </para>
        /// </summary>
        public CheckpointType() {
        }
        
        /// <summary>
        /// <para>
        /// a version of Checkpoint
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (NscUid, txtRmk?)
        /// </para>
        /// </summary>
        public virtual CheckpointUidType NscUid {
            get {
                XElement x = this.GetElement(NscUidXName);
                return ((CheckpointUidType)(x));
            }
            set {
                this.SetElement(NscUidXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Remark
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (NscUid, txtRmk?)
        /// </para>
        /// </summary>
        public virtual txtRmk txtRmk {
            get {
                XElement x = this.GetElement(txtRmkXName);
                return ((txtRmk)(x));
            }
            set {
                this.SetElement(txtRmkXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string source {
            get {
                XAttribute x = this.Attribute(sourceXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(sourceXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<CheckpointType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(NscUidXName, typeof(CheckpointUidType));
            localElementDictionary.Add(txtRmkXName, typeof(txtRmk));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Checkpoint - UID
    /// </para>
    /// <para>
    /// Regular expression: ((ThpUid | GsdUid), codeType)
    /// </para>
    /// </summary>
    public partial class CheckpointUidType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ThpUidXName = System.Xml.Linq.XName.Get("ThpUid", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName GsdUidXName = System.Xml.Linq.XName.Get("GsdUid", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName codeTypeXName = System.Xml.Linq.XName.Get("codeType", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName midXName = System.Xml.Linq.XName.Get("mid", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("CheckpointUidType", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator CheckpointUidType(XElement xe) { return XTypedServices.ToXTypedElement<CheckpointUidType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static CheckpointUidType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new ChoiceContentModelEntity(new NamedContentModelEntity(ThpUidXName), new NamedContentModelEntity(GsdUidXName)), new NamedContentModelEntity(codeTypeXName));
        }
        
        /// <summary>
        /// <para>
        /// Checkpoint - UID
        /// </para>
        /// <para>
        /// Regular expression: ((ThpUid | GsdUid), codeType)
        /// </para>
        /// </summary>
        public CheckpointUidType() {
        }
        
        /// <summary>
        /// <para>
        /// Checkpoint is situated at TWY holding position
        /// </para>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((ThpUid | GsdUid), codeType)
        /// </para>
        /// </summary>
        public virtual TaxiwayHoldingPositionUidType ThpUid {
            get {
                XElement x = this.GetElement(ThpUidXName);
                return ((TaxiwayHoldingPositionUidType)(x));
            }
            set {
                this.SetElement(ThpUidXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Checkpoint is situated at Parking position stand or gate
        /// </para>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((ThpUid | GsdUid), codeType)
        /// </para>
        /// </summary>
        public virtual GateStandUidType GsdUid {
            get {
                XElement x = this.GetElement(GsdUidXName);
                return ((GateStandUidType)(x));
            }
            set {
                this.SetElement(GsdUidXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Type
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: ((ThpUid | GsdUid), codeType)
        /// </para>
        /// </summary>
        public virtual codeTypeNavCkPt codeType {
            get {
                XElement x = this.GetElement(codeTypeXName);
                return ((codeTypeNavCkPt)(x));
            }
            set {
                this.SetElement(codeTypeXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string mid {
            get {
                XAttribute x = this.Attribute(midXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(midXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<CheckpointUidType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(ThpUidXName, typeof(TaxiwayHoldingPositionUidType));
            localElementDictionary.Add(GsdUidXName, typeof(GateStandUidType));
            localElementDictionary.Add(codeTypeXName, typeof(codeTypeNavCkPt));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Column of a table of cruising level
    /// </para>
    /// <para>
    /// Regular expression: (PlcUid, txtRmk?, Pll+)
    /// </para>
    /// </summary>
    public partial class CruisingLevelsColumnType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName PlcUidXName = System.Xml.Linq.XName.Get("PlcUid", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName txtRmkXName = System.Xml.Linq.XName.Get("txtRmk", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName PllXName = System.Xml.Linq.XName.Get("Pll", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<SpecifiedCruisingLevelType> PllField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName sourceXName = System.Xml.Linq.XName.Get("source", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("CruisingLevelsColumnType", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator CruisingLevelsColumnType(XElement xe) { return XTypedServices.ToXTypedElement<CruisingLevelsColumnType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static CruisingLevelsColumnType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(PlcUidXName), new NamedContentModelEntity(txtRmkXName), new NamedContentModelEntity(PllXName));
        }
        
        /// <summary>
        /// <para>
        /// Column of a table of cruising level
        /// </para>
        /// <para>
        /// Regular expression: (PlcUid, txtRmk?, Pll+)
        /// </para>
        /// </summary>
        public CruisingLevelsColumnType() {
        }
        
        /// <summary>
        /// <para>
        /// a version of Column of a table of criusing level
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (PlcUid, txtRmk?, Pll+)
        /// </para>
        /// </summary>
        public virtual CruisingLevelsColumnUidType PlcUid {
            get {
                XElement x = this.GetElement(PlcUidXName);
                return ((CruisingLevelsColumnUidType)(x));
            }
            set {
                this.SetElement(PlcUidXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Remark
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (PlcUid, txtRmk?, Pll+)
        /// </para>
        /// </summary>
        public virtual txtRmk txtRmk {
            get {
                XElement x = this.GetElement(txtRmkXName);
                return ((txtRmk)(x));
            }
            set {
                this.SetElement(txtRmkXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Column of a table of crusing level is composed of Specified cruising level
        /// </para>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (PlcUid, txtRmk?, Pll+)
        /// </para>
        /// </summary>
        public virtual IList<SpecifiedCruisingLevelType> Pll {
            get {
                if ((this.PllField == null)) {
                    this.PllField = new XTypedList<SpecifiedCruisingLevelType>(this, LinqToXsdTypeManager.Instance, PllXName);
                }
                return this.PllField;
            }
            set {
                if ((value == null)) {
                    this.PllField = null;
                }
                else {
                    if ((this.PllField == null)) {
                        this.PllField = XTypedList<SpecifiedCruisingLevelType>.Initialize(this, LinqToXsdTypeManager.Instance, value, PllXName);
                    }
                    else {
                        XTypedServices.SetList<SpecifiedCruisingLevelType>(this.PllField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string source {
            get {
                XAttribute x = this.Attribute(sourceXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(sourceXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<CruisingLevelsColumnType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(PlcUidXName, typeof(CruisingLevelsColumnUidType));
            localElementDictionary.Add(txtRmkXName, typeof(txtRmk));
            localElementDictionary.Add(PllXName, typeof(SpecifiedCruisingLevelType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Column of a table of cruising levels - UID
    /// </para>
    /// <para>
    /// Regular expression: (PlbUid, codeId)
    /// </para>
    /// </summary>
    public partial class CruisingLevelsColumnUidType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName PlbUidXName = System.Xml.Linq.XName.Get("PlbUid", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName codeIdXName = System.Xml.Linq.XName.Get("codeId", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName midXName = System.Xml.Linq.XName.Get("mid", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("CruisingLevelsColumnUidType", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator CruisingLevelsColumnUidType(XElement xe) { return XTypedServices.ToXTypedElement<CruisingLevelsColumnUidType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static CruisingLevelsColumnUidType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(PlbUidXName), new NamedContentModelEntity(codeIdXName));
        }
        
        /// <summary>
        /// <para>
        /// Column of a table of cruising levels - UID
        /// </para>
        /// <para>
        /// Regular expression: (PlbUid, codeId)
        /// </para>
        /// </summary>
        public CruisingLevelsColumnUidType() {
        }
        
        /// <summary>
        /// <para>
        /// Column of a table of criusing level is in Table of cruising level
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (PlbUid, codeId)
        /// </para>
        /// </summary>
        public virtual CruisingLevelsTableUidType PlbUid {
            get {
                XElement x = this.GetElement(PlbUidXName);
                return ((CruisingLevelsTableUidType)(x));
            }
            set {
                this.SetElement(PlbUidXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Identification
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (PlbUid, codeId)
        /// </para>
        /// </summary>
        public virtual codeIdLvlClmn codeId {
            get {
                XElement x = this.GetElement(codeIdXName);
                return ((codeIdLvlClmn)(x));
            }
            set {
                this.SetElement(codeIdXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string mid {
            get {
                XAttribute x = this.Attribute(midXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(midXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<CruisingLevelsColumnUidType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(PlbUidXName, typeof(CruisingLevelsTableUidType));
            localElementDictionary.Add(codeIdXName, typeof(codeIdLvlClmn));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Table of cruising levels
    /// </para>
    /// <para>
    /// Regular expression: (PlbUid, txtDescr?, codeDistVer, uomDistVer, txtRmk?)
    /// </para>
    /// </summary>
    public partial class CruisingLevelsTableType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName PlbUidXName = System.Xml.Linq.XName.Get("PlbUid", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName txtDescrXName = System.Xml.Linq.XName.Get("txtDescr", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName codeDistVerXName = System.Xml.Linq.XName.Get("codeDistVer", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName uomDistVerXName = System.Xml.Linq.XName.Get("uomDistVer", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName txtRmkXName = System.Xml.Linq.XName.Get("txtRmk", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName sourceXName = System.Xml.Linq.XName.Get("source", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("CruisingLevelsTableType", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator CruisingLevelsTableType(XElement xe) { return XTypedServices.ToXTypedElement<CruisingLevelsTableType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static CruisingLevelsTableType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(PlbUidXName), new NamedContentModelEntity(txtDescrXName), new NamedContentModelEntity(codeDistVerXName), new NamedContentModelEntity(uomDistVerXName), new NamedContentModelEntity(txtRmkXName));
        }
        
        /// <summary>
        /// <para>
        /// Table of cruising levels
        /// </para>
        /// <para>
        /// Regular expression: (PlbUid, txtDescr?, codeDistVer, uomDistVer, txtRmk?)
        /// </para>
        /// </summary>
        public CruisingLevelsTableType() {
        }
        
        /// <summary>
        /// <para>
        /// a version of Table of cruising level
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (PlbUid, txtDescr?, codeDistVer, uomDistVer, txtRmk?)
        /// </para>
        /// </summary>
        public virtual CruisingLevelsTableUidType PlbUid {
            get {
                XElement x = this.GetElement(PlbUidXName);
                return ((CruisingLevelsTableUidType)(x));
            }
            set {
                this.SetElement(PlbUidXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Description
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (PlbUid, txtDescr?, codeDistVer, uomDistVer, txtRmk?)
        /// </para>
        /// </summary>
        public virtual txtDescr txtDescr {
            get {
                XElement x = this.GetElement(txtDescrXName);
                return ((txtDescr)(x));
            }
            set {
                this.SetElement(txtDescrXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Reference for the vertical distance
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (PlbUid, txtDescr?, codeDistVer, uomDistVer, txtRmk?)
        /// </para>
        /// </summary>
        public virtual codeDistVer codeDistVer {
            get {
                XElement x = this.GetElement(codeDistVerXName);
                return ((codeDistVer)(x));
            }
            set {
                this.SetElement(codeDistVerXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Unit of measurement [vertical distance]
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (PlbUid, txtDescr?, codeDistVer, uomDistVer, txtRmk?)
        /// </para>
        /// </summary>
        public virtual uomDistVer uomDistVer {
            get {
                XElement x = this.GetElement(uomDistVerXName);
                return ((uomDistVer)(x));
            }
            set {
                this.SetElement(uomDistVerXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Remark
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (PlbUid, txtDescr?, codeDistVer, uomDistVer, txtRmk?)
        /// </para>
        /// </summary>
        public virtual txtRmk txtRmk {
            get {
                XElement x = this.GetElement(txtRmkXName);
                return ((txtRmk)(x));
            }
            set {
                this.SetElement(txtRmkXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string source {
            get {
                XAttribute x = this.Attribute(sourceXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(sourceXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<CruisingLevelsTableType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(PlbUidXName, typeof(CruisingLevelsTableUidType));
            localElementDictionary.Add(txtDescrXName, typeof(txtDescr));
            localElementDictionary.Add(codeDistVerXName, typeof(codeDistVer));
            localElementDictionary.Add(uomDistVerXName, typeof(uomDistVer));
            localElementDictionary.Add(txtRmkXName, typeof(txtRmk));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Table of cruising levels - UID
    /// </para>
    /// <para>
    /// Regular expression: (codeId)
    /// </para>
    /// </summary>
    public partial class CruisingLevelsTableUidType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName codeIdXName = System.Xml.Linq.XName.Get("codeId", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName midXName = System.Xml.Linq.XName.Get("mid", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("CruisingLevelsTableUidType", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator CruisingLevelsTableUidType(XElement xe) { return XTypedServices.ToXTypedElement<CruisingLevelsTableUidType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static CruisingLevelsTableUidType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(codeIdXName));
        }
        
        /// <summary>
        /// <para>
        /// Table of cruising levels - UID
        /// </para>
        /// <para>
        /// Regular expression: (codeId)
        /// </para>
        /// </summary>
        public CruisingLevelsTableUidType() {
        }
        
        /// <summary>
        /// <para>
        /// Identification
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (codeId)
        /// </para>
        /// </summary>
        public virtual codeIdLvlTbl codeId {
            get {
                XElement x = this.GetElement(codeIdXName);
                return ((codeIdLvlTbl)(x));
            }
            set {
                this.SetElement(codeIdXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string mid {
            get {
                XAttribute x = this.Attribute(midXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(midXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<CruisingLevelsTableUidType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(codeIdXName, typeof(codeIdLvlTbl));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Designated point
    /// </para>
    /// <para>
    /// Regular expression: (DpnUid, (TlaUid? | AhpUid? | AhpUidAssoc? | RcpUid? | FcpUid?), codeDatum, valGeoAccuracy?, uomGeoAccuracy?, valCrc?, codeType, txtName?, valElev?, uomElev?, valTrueBrg?, valMagBrg?, txtRmk?)
    /// </para>
    /// </summary>
    public partial class DesignatedPointType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName DpnUidXName = System.Xml.Linq.XName.Get("DpnUid", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TlaUidXName = System.Xml.Linq.XName.Get("TlaUid", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName AhpUidXName = System.Xml.Linq.XName.Get("AhpUid", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName AhpUidAssocXName = System.Xml.Linq.XName.Get("AhpUidAssoc", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName RcpUidXName = System.Xml.Linq.XName.Get("RcpUid", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName FcpUidXName = System.Xml.Linq.XName.Get("FcpUid", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName codeDatumXName = System.Xml.Linq.XName.Get("codeDatum", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName valGeoAccuracyXName = System.Xml.Linq.XName.Get("valGeoAccuracy", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName uomGeoAccuracyXName = System.Xml.Linq.XName.Get("uomGeoAccuracy", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName valCrcXName = System.Xml.Linq.XName.Get("valCrc", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName codeTypeXName = System.Xml.Linq.XName.Get("codeType", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName txtNameXName = System.Xml.Linq.XName.Get("txtName", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName valElevXName = System.Xml.Linq.XName.Get("valElev", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName uomElevXName = System.Xml.Linq.XName.Get("uomElev", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName valTrueBrgXName = System.Xml.Linq.XName.Get("valTrueBrg", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName valMagBrgXName = System.Xml.Linq.XName.Get("valMagBrg", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName txtRmkXName = System.Xml.Linq.XName.Get("txtRmk", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName sourceXName = System.Xml.Linq.XName.Get("source", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("DesignatedPointType", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator DesignatedPointType(XElement xe) { return XTypedServices.ToXTypedElement<DesignatedPointType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static DesignatedPointType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(DpnUidXName), new ChoiceContentModelEntity(new NamedContentModelEntity(TlaUidXName), new NamedContentModelEntity(AhpUidXName), new NamedContentModelEntity(AhpUidAssocXName), new NamedContentModelEntity(RcpUidXName), new NamedContentModelEntity(FcpUidXName)), new NamedContentModelEntity(codeDatumXName), new NamedContentModelEntity(valGeoAccuracyXName), new NamedContentModelEntity(uomGeoAccuracyXName), new NamedContentModelEntity(valCrcXName), new NamedContentModelEntity(codeTypeXName), new NamedContentModelEntity(txtNameXName), new NamedContentModelEntity(valElevXName), new NamedContentModelEntity(uomElevXName), new NamedContentModelEntity(valTrueBrgXName), new NamedContentModelEntity(valMagBrgXName), new NamedContentModelEntity(txtRmkXName));
        }
        
        /// <summary>
        /// <para>
        /// Designated point
        /// </para>
        /// <para>
        /// Regular expression: (DpnUid, (TlaUid? | AhpUid? | AhpUidAssoc? | RcpUid? | FcpUid?), codeDatum, valGeoAccuracy?, uomGeoAccuracy?, valCrc?, codeType, txtName?, valElev?, uomElev?, valTrueBrg?, valMagBrg?, txtRmk?)
        /// </para>
        /// </summary>
        public DesignatedPointType() {
        }
        
        /// <summary>
        /// <para>
        /// a version of Designated point
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (DpnUid, (TlaUid? | AhpUid? | AhpUidAssoc? | RcpUid? | FcpUid?), codeDatum, valGeoAccuracy?, uomGeoAccuracy?, valCrc?, codeType, txtName?, valElev?, uomElev?, valTrueBrg?, valMagBrg?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual DesignatedPointUidType DpnUid {
            get {
                XElement x = this.GetElement(DpnUidXName);
                return ((DesignatedPointUidType)(x));
            }
            set {
                this.SetElement(DpnUidXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Designated point is at the centre of Touch down and lift off area [TLOF]
        /// </para>
        /// <para>
        /// Occurrence: optional, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (DpnUid, (TlaUid? | AhpUid? | AhpUidAssoc? | RcpUid? | FcpUid?), codeDatum, valGeoAccuracy?, uomGeoAccuracy?, valCrc?, codeType, txtName?, valElev?, uomElev?, valTrueBrg?, valMagBrg?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual TlofUidType TlaUid {
            get {
                XElement x = this.GetElement(TlaUidXName);
                return ((TlofUidType)(x));
            }
            set {
                this.SetElement(TlaUidXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Designated point is the reference point of  Aerodrome / Heliport
        /// </para>
        /// <para>
        /// Occurrence: optional, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (DpnUid, (TlaUid? | AhpUid? | AhpUidAssoc? | RcpUid? | FcpUid?), codeDatum, valGeoAccuracy?, uomGeoAccuracy?, valCrc?, codeType, txtName?, valElev?, uomElev?, valTrueBrg?, valMagBrg?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual AerodromeHeliportUidType AhpUid {
            get {
                XElement x = this.GetElement(AhpUidXName);
                return ((AerodromeHeliportUidType)(x));
            }
            set {
                this.SetElement(AhpUidXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Designated point is associated with Aerodrome / Heliport
        /// </para>
        /// <para>
        /// Occurrence: optional, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (DpnUid, (TlaUid? | AhpUid? | AhpUidAssoc? | RcpUid? | FcpUid?), codeDatum, valGeoAccuracy?, uomGeoAccuracy?, valCrc?, codeType, txtName?, valElev?, uomElev?, valTrueBrg?, valMagBrg?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual AerodromeHeliportUidType AhpUidAssoc {
            get {
                XElement x = this.GetElement(AhpUidAssocXName);
                return ((AerodromeHeliportUidType)(x));
            }
            set {
                this.SetElement(AhpUidAssocXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Designated point is located at Position on the centre line of a RWY
        /// </para>
        /// <para>
        /// Occurrence: optional, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (DpnUid, (TlaUid? | AhpUid? | AhpUidAssoc? | RcpUid? | FcpUid?), codeDatum, valGeoAccuracy?, uomGeoAccuracy?, valCrc?, codeType, txtName?, valElev?, uomElev?, valTrueBrg?, valMagBrg?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual RunwayCentreLinePositionUidType RcpUid {
            get {
                XElement x = this.GetElement(RcpUidXName);
                return ((RunwayCentreLinePositionUidType)(x));
            }
            set {
                this.SetElement(RcpUidXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Designated point is located at FATO - centre line position
        /// </para>
        /// <para>
        /// Occurrence: optional, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (DpnUid, (TlaUid? | AhpUid? | AhpUidAssoc? | RcpUid? | FcpUid?), codeDatum, valGeoAccuracy?, uomGeoAccuracy?, valCrc?, codeType, txtName?, valElev?, uomElev?, valTrueBrg?, valMagBrg?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual FatoCentreLinePositionUidType FcpUid {
            get {
                XElement x = this.GetElement(FcpUidXName);
                return ((FatoCentreLinePositionUidType)(x));
            }
            set {
                this.SetElement(FcpUidXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Datum
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (DpnUid, (TlaUid? | AhpUid? | AhpUidAssoc? | RcpUid? | FcpUid?), codeDatum, valGeoAccuracy?, uomGeoAccuracy?, valCrc?, codeType, txtName?, valElev?, uomElev?, valTrueBrg?, valMagBrg?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual codeDatum codeDatum {
            get {
                XElement x = this.GetElement(codeDatumXName);
                return ((codeDatum)(x));
            }
            set {
                this.SetElement(codeDatumXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Geographical accuracy
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (DpnUid, (TlaUid? | AhpUid? | AhpUidAssoc? | RcpUid? | FcpUid?), codeDatum, valGeoAccuracy?, uomGeoAccuracy?, valCrc?, codeType, txtName?, valElev?, uomElev?, valTrueBrg?, valMagBrg?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual valDistHorz valGeoAccuracy {
            get {
                XElement x = this.GetElement(valGeoAccuracyXName);
                return ((valDistHorz)(x));
            }
            set {
                this.SetElement(valGeoAccuracyXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Unit of measurement [geographical accuracy]
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (DpnUid, (TlaUid? | AhpUid? | AhpUidAssoc? | RcpUid? | FcpUid?), codeDatum, valGeoAccuracy?, uomGeoAccuracy?, valCrc?, codeType, txtName?, valElev?, uomElev?, valTrueBrg?, valMagBrg?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual uomDistHorz uomGeoAccuracy {
            get {
                XElement x = this.GetElement(uomGeoAccuracyXName);
                return ((uomDistHorz)(x));
            }
            set {
                this.SetElement(uomGeoAccuracyXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Cyclic redundancy check
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (DpnUid, (TlaUid? | AhpUid? | AhpUidAssoc? | RcpUid? | FcpUid?), codeDatum, valGeoAccuracy?, uomGeoAccuracy?, valCrc?, codeType, txtName?, valElev?, uomElev?, valTrueBrg?, valMagBrg?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual valHex valCrc {
            get {
                XElement x = this.GetElement(valCrcXName);
                return ((valHex)(x));
            }
            set {
                this.SetElement(valCrcXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Type
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (DpnUid, (TlaUid? | AhpUid? | AhpUidAssoc? | RcpUid? | FcpUid?), codeDatum, valGeoAccuracy?, uomGeoAccuracy?, valCrc?, codeType, txtName?, valElev?, uomElev?, valTrueBrg?, valMagBrg?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual codeTypeDesigPt codeType {
            get {
                XElement x = this.GetElement(codeTypeXName);
                return ((codeTypeDesigPt)(x));
            }
            set {
                this.SetElement(codeTypeXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Name
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (DpnUid, (TlaUid? | AhpUid? | AhpUidAssoc? | RcpUid? | FcpUid?), codeDatum, valGeoAccuracy?, uomGeoAccuracy?, valCrc?, codeType, txtName?, valElev?, uomElev?, valTrueBrg?, valMagBrg?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual txtName txtName {
            get {
                XElement x = this.GetElement(txtNameXName);
                return ((txtName)(x));
            }
            set {
                this.SetElement(txtNameXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Elevation
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (DpnUid, (TlaUid? | AhpUid? | AhpUidAssoc? | RcpUid? | FcpUid?), codeDatum, valGeoAccuracy?, uomGeoAccuracy?, valCrc?, codeType, txtName?, valElev?, uomElev?, valTrueBrg?, valMagBrg?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual valDistVer valElev {
            get {
                XElement x = this.GetElement(valElevXName);
                return ((valDistVer)(x));
            }
            set {
                this.SetElement(valElevXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Unit of measurement [elevation]
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (DpnUid, (TlaUid? | AhpUid? | AhpUidAssoc? | RcpUid? | FcpUid?), codeDatum, valGeoAccuracy?, uomGeoAccuracy?, valCrc?, codeType, txtName?, valElev?, uomElev?, valTrueBrg?, valMagBrg?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual uomElev uomElev {
            get {
                XElement x = this.GetElement(uomElevXName);
                return ((uomElev)(x));
            }
            set {
                this.SetElement(uomElevXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// True bearing
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (DpnUid, (TlaUid? | AhpUid? | AhpUidAssoc? | RcpUid? | FcpUid?), codeDatum, valGeoAccuracy?, uomGeoAccuracy?, valCrc?, codeType, txtName?, valElev?, uomElev?, valTrueBrg?, valMagBrg?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual valAngleBrg valTrueBrg {
            get {
                XElement x = this.GetElement(valTrueBrgXName);
                return ((valAngleBrg)(x));
            }
            set {
                this.SetElement(valTrueBrgXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Magnetic bearing
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (DpnUid, (TlaUid? | AhpUid? | AhpUidAssoc? | RcpUid? | FcpUid?), codeDatum, valGeoAccuracy?, uomGeoAccuracy?, valCrc?, codeType, txtName?, valElev?, uomElev?, valTrueBrg?, valMagBrg?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual valAngleBrg valMagBrg {
            get {
                XElement x = this.GetElement(valMagBrgXName);
                return ((valAngleBrg)(x));
            }
            set {
                this.SetElement(valMagBrgXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Remark
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (DpnUid, (TlaUid? | AhpUid? | AhpUidAssoc? | RcpUid? | FcpUid?), codeDatum, valGeoAccuracy?, uomGeoAccuracy?, valCrc?, codeType, txtName?, valElev?, uomElev?, valTrueBrg?, valMagBrg?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual txtRmk txtRmk {
            get {
                XElement x = this.GetElement(txtRmkXName);
                return ((txtRmk)(x));
            }
            set {
                this.SetElement(txtRmkXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string source {
            get {
                XAttribute x = this.Attribute(sourceXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(sourceXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<DesignatedPointType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(DpnUidXName, typeof(DesignatedPointUidType));
            localElementDictionary.Add(TlaUidXName, typeof(TlofUidType));
            localElementDictionary.Add(AhpUidXName, typeof(AerodromeHeliportUidType));
            localElementDictionary.Add(AhpUidAssocXName, typeof(AerodromeHeliportUidType));
            localElementDictionary.Add(RcpUidXName, typeof(RunwayCentreLinePositionUidType));
            localElementDictionary.Add(FcpUidXName, typeof(FatoCentreLinePositionUidType));
            localElementDictionary.Add(codeDatumXName, typeof(codeDatum));
            localElementDictionary.Add(valGeoAccuracyXName, typeof(valDistHorz));
            localElementDictionary.Add(uomGeoAccuracyXName, typeof(uomDistHorz));
            localElementDictionary.Add(valCrcXName, typeof(valHex));
            localElementDictionary.Add(codeTypeXName, typeof(codeTypeDesigPt));
            localElementDictionary.Add(txtNameXName, typeof(txtName));
            localElementDictionary.Add(valElevXName, typeof(valDistVer));
            localElementDictionary.Add(uomElevXName, typeof(uomElev));
            localElementDictionary.Add(valTrueBrgXName, typeof(valAngleBrg));
            localElementDictionary.Add(valMagBrgXName, typeof(valAngleBrg));
            localElementDictionary.Add(txtRmkXName, typeof(txtRmk));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Designated point - UID
    /// </para>
    /// <para>
    /// Regular expression: (codeId, geoLat, geoLong)
    /// </para>
    /// </summary>
    public partial class DesignatedPointUidType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName codeIdXName = System.Xml.Linq.XName.Get("codeId", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName geoLatXName = System.Xml.Linq.XName.Get("geoLat", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName geoLongXName = System.Xml.Linq.XName.Get("geoLong", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName midXName = System.Xml.Linq.XName.Get("mid", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName regionXName = System.Xml.Linq.XName.Get("region", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("DesignatedPointUidType", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator DesignatedPointUidType(XElement xe) { return XTypedServices.ToXTypedElement<DesignatedPointUidType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static DesignatedPointUidType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(codeIdXName), new NamedContentModelEntity(geoLatXName), new NamedContentModelEntity(geoLongXName));
        }
        
        /// <summary>
        /// <para>
        /// Designated point - UID
        /// </para>
        /// <para>
        /// Regular expression: (codeId, geoLat, geoLong)
        /// </para>
        /// </summary>
        public DesignatedPointUidType() {
        }
        
        /// <summary>
        /// <para>
        /// Identification
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (codeId, geoLat, geoLong)
        /// </para>
        /// </summary>
        public virtual codeIdDesigPt codeId {
            get {
                XElement x = this.GetElement(codeIdXName);
                return ((codeIdDesigPt)(x));
            }
            set {
                this.SetElement(codeIdXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Latitude
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (codeId, geoLat, geoLong)
        /// </para>
        /// </summary>
        public virtual geoLat geoLat {
            get {
                XElement x = this.GetElement(geoLatXName);
                return ((geoLat)(x));
            }
            set {
                this.SetElement(geoLatXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Longitude
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (codeId, geoLat, geoLong)
        /// </para>
        /// </summary>
        public virtual geoLong geoLong {
            get {
                XElement x = this.GetElement(geoLongXName);
                return ((geoLong)(x));
            }
            set {
                this.SetElement(geoLongXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string mid {
            get {
                XAttribute x = this.Attribute(midXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(midXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual string region {
            get {
                XAttribute x = this.Attribute(regionXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(regionXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<DesignatedPointUidType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(codeIdXName, typeof(codeIdDesigPt));
            localElementDictionary.Add(geoLatXName, typeof(geoLat));
            localElementDictionary.Add(geoLongXName, typeof(geoLong));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Direct (DCT)
    /// </para>
    /// <para>
    /// Regular expression: (valExceedLen, uomLen, txtRmk?)
    /// </para>
    /// </summary>
    public partial class DirectFlightClassType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName valExceedLenXName = System.Xml.Linq.XName.Get("valExceedLen", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName uomLenXName = System.Xml.Linq.XName.Get("uomLen", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName txtRmkXName = System.Xml.Linq.XName.Get("txtRmk", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("DirectFlightClassType", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator DirectFlightClassType(XElement xe) { return XTypedServices.ToXTypedElement<DirectFlightClassType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static DirectFlightClassType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(valExceedLenXName), new NamedContentModelEntity(uomLenXName), new NamedContentModelEntity(txtRmkXName));
        }
        
        /// <summary>
        /// <para>
        /// Direct (DCT)
        /// </para>
        /// <para>
        /// Regular expression: (valExceedLen, uomLen, txtRmk?)
        /// </para>
        /// </summary>
        public DirectFlightClassType() {
        }
        
        /// <summary>
        /// <para>
        /// Exceeding length
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (valExceedLen, uomLen, txtRmk?)
        /// </para>
        /// </summary>
        public virtual valDistHorz valExceedLen {
            get {
                XElement x = this.GetElement(valExceedLenXName);
                return ((valDistHorz)(x));
            }
            set {
                this.SetElement(valExceedLenXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Unit of measurement [Length]
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (valExceedLen, uomLen, txtRmk?)
        /// </para>
        /// </summary>
        public virtual uomDistHorz uomLen {
            get {
                XElement x = this.GetElement(uomLenXName);
                return ((uomDistHorz)(x));
            }
            set {
                this.SetElement(uomLenXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Remark
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (valExceedLen, uomLen, txtRmk?)
        /// </para>
        /// </summary>
        public virtual txtRmk txtRmk {
            get {
                XElement x = this.GetElement(txtRmkXName);
                return ((txtRmk)(x));
            }
            set {
                this.SetElement(txtRmkXName, value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<DirectFlightClassType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(valExceedLenXName, typeof(valDistHorz));
            localElementDictionary.Add(uomLenXName, typeof(uomDistHorz));
            localElementDictionary.Add(txtRmkXName, typeof(txtRmk));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Direct (DCT) Segment
    /// </para>
    /// <para>
    /// Regular expression: ((TcnUidSta | VorUidSta | DpnUidSta | NdbUidSta | DmeUidSta | MkrUidSta), (TcnUidEnd | VorUidEnd | DpnUidEnd | NdbUidEnd | DmeUidEnd | MkrUidEnd), txtRmk?)
    /// </para>
    /// </summary>
    public partial class DirectSegmentType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TcnUidStaXName = System.Xml.Linq.XName.Get("TcnUidSta", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName VorUidStaXName = System.Xml.Linq.XName.Get("VorUidSta", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName DpnUidStaXName = System.Xml.Linq.XName.Get("DpnUidSta", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName NdbUidStaXName = System.Xml.Linq.XName.Get("NdbUidSta", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName DmeUidStaXName = System.Xml.Linq.XName.Get("DmeUidSta", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName MkrUidStaXName = System.Xml.Linq.XName.Get("MkrUidSta", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TcnUidEndXName = System.Xml.Linq.XName.Get("TcnUidEnd", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName VorUidEndXName = System.Xml.Linq.XName.Get("VorUidEnd", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName DpnUidEndXName = System.Xml.Linq.XName.Get("DpnUidEnd", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName NdbUidEndXName = System.Xml.Linq.XName.Get("NdbUidEnd", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName DmeUidEndXName = System.Xml.Linq.XName.Get("DmeUidEnd", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName MkrUidEndXName = System.Xml.Linq.XName.Get("MkrUidEnd", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName txtRmkXName = System.Xml.Linq.XName.Get("txtRmk", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("DirectSegmentType", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator DirectSegmentType(XElement xe) { return XTypedServices.ToXTypedElement<DirectSegmentType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static DirectSegmentType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new ChoiceContentModelEntity(new NamedContentModelEntity(TcnUidStaXName), new NamedContentModelEntity(VorUidStaXName), new NamedContentModelEntity(DpnUidStaXName), new NamedContentModelEntity(NdbUidStaXName), new NamedContentModelEntity(DmeUidStaXName), new NamedContentModelEntity(MkrUidStaXName)), new ChoiceContentModelEntity(new NamedContentModelEntity(TcnUidEndXName), new NamedContentModelEntity(VorUidEndXName), new NamedContentModelEntity(DpnUidEndXName), new NamedContentModelEntity(NdbUidEndXName), new NamedContentModelEntity(DmeUidEndXName), new NamedContentModelEntity(MkrUidEndXName)), new NamedContentModelEntity(txtRmkXName));
        }
        
        /// <summary>
        /// <para>
        /// Direct (DCT) Segment
        /// </para>
        /// <para>
        /// Regular expression: ((TcnUidSta | VorUidSta | DpnUidSta | NdbUidSta | DmeUidSta | MkrUidSta), (TcnUidEnd | VorUidEnd | DpnUidEnd | NdbUidEnd | DmeUidEnd | MkrUidEnd), txtRmk?)
        /// </para>
        /// </summary>
        public DirectSegmentType() {
        }
        
        /// <summary>
        /// <para>
        /// Start significant point is at Tactical air navigation beacon [TACAN]
        /// </para>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((TcnUidSta | VorUidSta | DpnUidSta | NdbUidSta | DmeUidSta | MkrUidSta), (TcnUidEnd | VorUidEnd | DpnUidEnd | NdbUidEnd | DmeUidEnd | MkrUidEnd), txtRmk?)
        /// </para>
        /// </summary>
        public virtual TacanUidType TcnUidSta {
            get {
                XElement x = this.GetElement(TcnUidStaXName);
                return ((TacanUidType)(x));
            }
            set {
                this.SetElement(TcnUidStaXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Start significant point is at VHF omnidirectional radio range beacon [VOR]
        /// </para>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((TcnUidSta | VorUidSta | DpnUidSta | NdbUidSta | DmeUidSta | MkrUidSta), (TcnUidEnd | VorUidEnd | DpnUidEnd | NdbUidEnd | DmeUidEnd | MkrUidEnd), txtRmk?)
        /// </para>
        /// </summary>
        public virtual VorUidType VorUidSta {
            get {
                XElement x = this.GetElement(VorUidStaXName);
                return ((VorUidType)(x));
            }
            set {
                this.SetElement(VorUidStaXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Start significant point is at Designated point
        /// </para>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((TcnUidSta | VorUidSta | DpnUidSta | NdbUidSta | DmeUidSta | MkrUidSta), (TcnUidEnd | VorUidEnd | DpnUidEnd | NdbUidEnd | DmeUidEnd | MkrUidEnd), txtRmk?)
        /// </para>
        /// </summary>
        public virtual DesignatedPointUidType DpnUidSta {
            get {
                XElement x = this.GetElement(DpnUidStaXName);
                return ((DesignatedPointUidType)(x));
            }
            set {
                this.SetElement(DpnUidStaXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Start significant point is at Non-directional radio beacon [NDB]
        /// </para>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((TcnUidSta | VorUidSta | DpnUidSta | NdbUidSta | DmeUidSta | MkrUidSta), (TcnUidEnd | VorUidEnd | DpnUidEnd | NdbUidEnd | DmeUidEnd | MkrUidEnd), txtRmk?)
        /// </para>
        /// </summary>
        public virtual NdbUidType NdbUidSta {
            get {
                XElement x = this.GetElement(NdbUidStaXName);
                return ((NdbUidType)(x));
            }
            set {
                this.SetElement(NdbUidStaXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Start significant point is at Distance measuring equipment [DME]
        /// </para>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((TcnUidSta | VorUidSta | DpnUidSta | NdbUidSta | DmeUidSta | MkrUidSta), (TcnUidEnd | VorUidEnd | DpnUidEnd | NdbUidEnd | DmeUidEnd | MkrUidEnd), txtRmk?)
        /// </para>
        /// </summary>
        public virtual DmeUidType DmeUidSta {
            get {
                XElement x = this.GetElement(DmeUidStaXName);
                return ((DmeUidType)(x));
            }
            set {
                this.SetElement(DmeUidStaXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Start significant point is at Marker [MKR]
        /// </para>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((TcnUidSta | VorUidSta | DpnUidSta | NdbUidSta | DmeUidSta | MkrUidSta), (TcnUidEnd | VorUidEnd | DpnUidEnd | NdbUidEnd | DmeUidEnd | MkrUidEnd), txtRmk?)
        /// </para>
        /// </summary>
        public virtual MkrUidType MkrUidSta {
            get {
                XElement x = this.GetElement(MkrUidStaXName);
                return ((MkrUidType)(x));
            }
            set {
                this.SetElement(MkrUidStaXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// End significant point is at Tactical air navigation beacon [TACAN]
        /// </para>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((TcnUidSta | VorUidSta | DpnUidSta | NdbUidSta | DmeUidSta | MkrUidSta), (TcnUidEnd | VorUidEnd | DpnUidEnd | NdbUidEnd | DmeUidEnd | MkrUidEnd), txtRmk?)
        /// </para>
        /// </summary>
        public virtual TacanUidType TcnUidEnd {
            get {
                XElement x = this.GetElement(TcnUidEndXName);
                return ((TacanUidType)(x));
            }
            set {
                this.SetElement(TcnUidEndXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// End significant point is at VHF omnidirectional radio range beacon [VOR]
        /// </para>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((TcnUidSta | VorUidSta | DpnUidSta | NdbUidSta | DmeUidSta | MkrUidSta), (TcnUidEnd | VorUidEnd | DpnUidEnd | NdbUidEnd | DmeUidEnd | MkrUidEnd), txtRmk?)
        /// </para>
        /// </summary>
        public virtual VorUidType VorUidEnd {
            get {
                XElement x = this.GetElement(VorUidEndXName);
                return ((VorUidType)(x));
            }
            set {
                this.SetElement(VorUidEndXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// End significant point is at Designated point
        /// </para>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((TcnUidSta | VorUidSta | DpnUidSta | NdbUidSta | DmeUidSta | MkrUidSta), (TcnUidEnd | VorUidEnd | DpnUidEnd | NdbUidEnd | DmeUidEnd | MkrUidEnd), txtRmk?)
        /// </para>
        /// </summary>
        public virtual DesignatedPointUidType DpnUidEnd {
            get {
                XElement x = this.GetElement(DpnUidEndXName);
                return ((DesignatedPointUidType)(x));
            }
            set {
                this.SetElement(DpnUidEndXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// End significant point is at Non-directional radio beacon [NDB]
        /// </para>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((TcnUidSta | VorUidSta | DpnUidSta | NdbUidSta | DmeUidSta | MkrUidSta), (TcnUidEnd | VorUidEnd | DpnUidEnd | NdbUidEnd | DmeUidEnd | MkrUidEnd), txtRmk?)
        /// </para>
        /// </summary>
        public virtual NdbUidType NdbUidEnd {
            get {
                XElement x = this.GetElement(NdbUidEndXName);
                return ((NdbUidType)(x));
            }
            set {
                this.SetElement(NdbUidEndXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// End significant point is at Distance measuring equipment [DME]
        /// </para>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((TcnUidSta | VorUidSta | DpnUidSta | NdbUidSta | DmeUidSta | MkrUidSta), (TcnUidEnd | VorUidEnd | DpnUidEnd | NdbUidEnd | DmeUidEnd | MkrUidEnd), txtRmk?)
        /// </para>
        /// </summary>
        public virtual DmeUidType DmeUidEnd {
            get {
                XElement x = this.GetElement(DmeUidEndXName);
                return ((DmeUidType)(x));
            }
            set {
                this.SetElement(DmeUidEndXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// End significant point is at Marker [MKR]
        /// </para>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((TcnUidSta | VorUidSta | DpnUidSta | NdbUidSta | DmeUidSta | MkrUidSta), (TcnUidEnd | VorUidEnd | DpnUidEnd | NdbUidEnd | DmeUidEnd | MkrUidEnd), txtRmk?)
        /// </para>
        /// </summary>
        public virtual MkrUidType MkrUidEnd {
            get {
                XElement x = this.GetElement(MkrUidEndXName);
                return ((MkrUidType)(x));
            }
            set {
                this.SetElement(MkrUidEndXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Remark
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: ((TcnUidSta | VorUidSta | DpnUidSta | NdbUidSta | DmeUidSta | MkrUidSta), (TcnUidEnd | VorUidEnd | DpnUidEnd | NdbUidEnd | DmeUidEnd | MkrUidEnd), txtRmk?)
        /// </para>
        /// </summary>
        public virtual txtRmk txtRmk {
            get {
                XElement x = this.GetElement(txtRmkXName);
                return ((txtRmk)(x));
            }
            set {
                this.SetElement(txtRmkXName, value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<DirectSegmentType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(TcnUidStaXName, typeof(TacanUidType));
            localElementDictionary.Add(VorUidStaXName, typeof(VorUidType));
            localElementDictionary.Add(DpnUidStaXName, typeof(DesignatedPointUidType));
            localElementDictionary.Add(NdbUidStaXName, typeof(NdbUidType));
            localElementDictionary.Add(DmeUidStaXName, typeof(DmeUidType));
            localElementDictionary.Add(MkrUidStaXName, typeof(MkrUidType));
            localElementDictionary.Add(TcnUidEndXName, typeof(TacanUidType));
            localElementDictionary.Add(VorUidEndXName, typeof(VorUidType));
            localElementDictionary.Add(DpnUidEndXName, typeof(DesignatedPointUidType));
            localElementDictionary.Add(NdbUidEndXName, typeof(NdbUidType));
            localElementDictionary.Add(DmeUidEndXName, typeof(DmeUidType));
            localElementDictionary.Add(MkrUidEndXName, typeof(MkrUidType));
            localElementDictionary.Add(txtRmkXName, typeof(txtRmk));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// DEPRECATED-4.0
    /// </para>
    /// <para>
    /// [Deprecated] DME - Limitation
    /// </para>
    /// <para>
    /// Regular expression: (DlnUid, valDistOuter?, uomDistHorz, valDistVerUpper?, uomDistVerUpper?, codeDistVerUpper?, uomDistVerLower, codeDistVerLower, valAngleScallop?, txtRmk?)
    /// </para>
    /// </summary>
    public partial class DmeLimitationType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName DlnUidXName = System.Xml.Linq.XName.Get("DlnUid", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName valDistOuterXName = System.Xml.Linq.XName.Get("valDistOuter", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName uomDistHorzXName = System.Xml.Linq.XName.Get("uomDistHorz", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName valDistVerUpperXName = System.Xml.Linq.XName.Get("valDistVerUpper", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName uomDistVerUpperXName = System.Xml.Linq.XName.Get("uomDistVerUpper", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName codeDistVerUpperXName = System.Xml.Linq.XName.Get("codeDistVerUpper", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName uomDistVerLowerXName = System.Xml.Linq.XName.Get("uomDistVerLower", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName codeDistVerLowerXName = System.Xml.Linq.XName.Get("codeDistVerLower", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName valAngleScallopXName = System.Xml.Linq.XName.Get("valAngleScallop", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName txtRmkXName = System.Xml.Linq.XName.Get("txtRmk", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName sourceXName = System.Xml.Linq.XName.Get("source", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("DmeLimitationType", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator DmeLimitationType(XElement xe) { return XTypedServices.ToXTypedElement<DmeLimitationType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static DmeLimitationType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(DlnUidXName), new NamedContentModelEntity(valDistOuterXName), new NamedContentModelEntity(uomDistHorzXName), new NamedContentModelEntity(valDistVerUpperXName), new NamedContentModelEntity(uomDistVerUpperXName), new NamedContentModelEntity(codeDistVerUpperXName), new NamedContentModelEntity(uomDistVerLowerXName), new NamedContentModelEntity(codeDistVerLowerXName), new NamedContentModelEntity(valAngleScallopXName), new NamedContentModelEntity(txtRmkXName));
        }
        
        /// <summary>
        /// <para>
        /// DEPRECATED-4.0
        /// </para>
        /// <para>
        /// [Deprecated] DME - Limitation
        /// </para>
        /// <para>
        /// Regular expression: (DlnUid, valDistOuter?, uomDistHorz, valDistVerUpper?, uomDistVerUpper?, codeDistVerUpper?, uomDistVerLower, codeDistVerLower, valAngleScallop?, txtRmk?)
        /// </para>
        /// </summary>
        public DmeLimitationType() {
        }
        
        /// <summary>
        /// <para>
        /// a version of DME - Limitation
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (DlnUid, valDistOuter?, uomDistHorz, valDistVerUpper?, uomDistVerUpper?, codeDistVerUpper?, uomDistVerLower, codeDistVerLower, valAngleScallop?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual DmeLimitationUidType DlnUid {
            get {
                XElement x = this.GetElement(DlnUidXName);
                return ((DmeLimitationUidType)(x));
            }
            set {
                this.SetElement(DlnUidXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Angle sector volume outer limit
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (DlnUid, valDistOuter?, uomDistHorz, valDistVerUpper?, uomDistVerUpper?, codeDistVerUpper?, uomDistVerLower, codeDistVerLower, valAngleScallop?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual valDistHorz valDistOuter {
            get {
                XElement x = this.GetElement(valDistOuterXName);
                return ((valDistHorz)(x));
            }
            set {
                this.SetElement(valDistOuterXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Unit of measurement [horizontal distance]
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (DlnUid, valDistOuter?, uomDistHorz, valDistVerUpper?, uomDistVerUpper?, codeDistVerUpper?, uomDistVerLower, codeDistVerLower, valAngleScallop?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual uomDistHorz uomDistHorz {
            get {
                XElement x = this.GetElement(uomDistHorzXName);
                return ((uomDistHorz)(x));
            }
            set {
                this.SetElement(uomDistHorzXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Upper limit
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (DlnUid, valDistOuter?, uomDistHorz, valDistVerUpper?, uomDistVerUpper?, codeDistVerUpper?, uomDistVerLower, codeDistVerLower, valAngleScallop?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual valDistVer valDistVerUpper {
            get {
                XElement x = this.GetElement(valDistVerUpperXName);
                return ((valDistVer)(x));
            }
            set {
                this.SetElement(valDistVerUpperXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Unit of measurement [upper limit]
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (DlnUid, valDistOuter?, uomDistHorz, valDistVerUpper?, uomDistVerUpper?, codeDistVerUpper?, uomDistVerLower, codeDistVerLower, valAngleScallop?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual uomDistVer uomDistVerUpper {
            get {
                XElement x = this.GetElement(uomDistVerUpperXName);
                return ((uomDistVer)(x));
            }
            set {
                this.SetElement(uomDistVerUpperXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Reference for upper limit
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (DlnUid, valDistOuter?, uomDistHorz, valDistVerUpper?, uomDistVerUpper?, codeDistVerUpper?, uomDistVerLower, codeDistVerLower, valAngleScallop?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual codeDistVer codeDistVerUpper {
            get {
                XElement x = this.GetElement(codeDistVerUpperXName);
                return ((codeDistVer)(x));
            }
            set {
                this.SetElement(codeDistVerUpperXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Unit of measurement [lower limit]
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (DlnUid, valDistOuter?, uomDistHorz, valDistVerUpper?, uomDistVerUpper?, codeDistVerUpper?, uomDistVerLower, codeDistVerLower, valAngleScallop?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual uomDistVer uomDistVerLower {
            get {
                XElement x = this.GetElement(uomDistVerLowerXName);
                return ((uomDistVer)(x));
            }
            set {
                this.SetElement(uomDistVerLowerXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Reference for lower limit
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (DlnUid, valDistOuter?, uomDistHorz, valDistVerUpper?, uomDistVerUpper?, codeDistVerUpper?, uomDistVerLower, codeDistVerLower, valAngleScallop?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual codeDistVer codeDistVerLower {
            get {
                XElement x = this.GetElement(codeDistVerLowerXName);
                return ((codeDistVer)(x));
            }
            set {
                this.SetElement(codeDistVerLowerXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Scalloping angle
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (DlnUid, valDistOuter?, uomDistHorz, valDistVerUpper?, uomDistVerUpper?, codeDistVerUpper?, uomDistVerLower, codeDistVerLower, valAngleScallop?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual valAngle valAngleScallop {
            get {
                XElement x = this.GetElement(valAngleScallopXName);
                return ((valAngle)(x));
            }
            set {
                this.SetElement(valAngleScallopXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Remark
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (DlnUid, valDistOuter?, uomDistHorz, valDistVerUpper?, uomDistVerUpper?, codeDistVerUpper?, uomDistVerLower, codeDistVerLower, valAngleScallop?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual txtRmk txtRmk {
            get {
                XElement x = this.GetElement(txtRmkXName);
                return ((txtRmk)(x));
            }
            set {
                this.SetElement(txtRmkXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string source {
            get {
                XAttribute x = this.Attribute(sourceXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(sourceXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<DmeLimitationType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(DlnUidXName, typeof(DmeLimitationUidType));
            localElementDictionary.Add(valDistOuterXName, typeof(valDistHorz));
            localElementDictionary.Add(uomDistHorzXName, typeof(uomDistHorz));
            localElementDictionary.Add(valDistVerUpperXName, typeof(valDistVer));
            localElementDictionary.Add(uomDistVerUpperXName, typeof(uomDistVer));
            localElementDictionary.Add(codeDistVerUpperXName, typeof(codeDistVer));
            localElementDictionary.Add(uomDistVerLowerXName, typeof(uomDistVer));
            localElementDictionary.Add(codeDistVerLowerXName, typeof(codeDistVer));
            localElementDictionary.Add(valAngleScallopXName, typeof(valAngle));
            localElementDictionary.Add(txtRmkXName, typeof(txtRmk));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// DEPRECATED-4.0
    /// </para>
    /// <para>
    /// [Deprecated] DME - Limitation - UID
    /// </para>
    /// <para>
    /// Regular expression: (DmeUid, codeType, valAngleFm, valAngleTo, valDistInner, valDistVerLower)
    /// </para>
    /// </summary>
    public partial class DmeLimitationUidType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName DmeUidXName = System.Xml.Linq.XName.Get("DmeUid", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName codeTypeXName = System.Xml.Linq.XName.Get("codeType", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName valAngleFmXName = System.Xml.Linq.XName.Get("valAngleFm", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName valAngleToXName = System.Xml.Linq.XName.Get("valAngleTo", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName valDistInnerXName = System.Xml.Linq.XName.Get("valDistInner", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName valDistVerLowerXName = System.Xml.Linq.XName.Get("valDistVerLower", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName midXName = System.Xml.Linq.XName.Get("mid", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("DmeLimitationUidType", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator DmeLimitationUidType(XElement xe) { return XTypedServices.ToXTypedElement<DmeLimitationUidType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static DmeLimitationUidType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(DmeUidXName), new NamedContentModelEntity(codeTypeXName), new NamedContentModelEntity(valAngleFmXName), new NamedContentModelEntity(valAngleToXName), new NamedContentModelEntity(valDistInnerXName), new NamedContentModelEntity(valDistVerLowerXName));
        }
        
        /// <summary>
        /// <para>
        /// DEPRECATED-4.0
        /// </para>
        /// <para>
        /// [Deprecated] DME - Limitation - UID
        /// </para>
        /// <para>
        /// Regular expression: (DmeUid, codeType, valAngleFm, valAngleTo, valDistInner, valDistVerLower)
        /// </para>
        /// </summary>
        public DmeLimitationUidType() {
        }
        
        /// <summary>
        /// <para>
        /// DME - Limitation is limiting Distance measuring equipment [DME]
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (DmeUid, codeType, valAngleFm, valAngleTo, valDistInner, valDistVerLower)
        /// </para>
        /// </summary>
        public virtual DmeUidType DmeUid {
            get {
                XElement x = this.GetElement(DmeUidXName);
                return ((DmeUidType)(x));
            }
            set {
                this.SetElement(DmeUidXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Type
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (DmeUid, codeType, valAngleFm, valAngleTo, valDistInner, valDistVerLower)
        /// </para>
        /// </summary>
        public virtual codeTypeNavAidLimit codeType {
            get {
                XElement x = this.GetElement(codeTypeXName);
                return ((codeTypeNavAidLimit)(x));
            }
            set {
                this.SetElement(codeTypeXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Beginning of angle
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (DmeUid, codeType, valAngleFm, valAngleTo, valDistInner, valDistVerLower)
        /// </para>
        /// </summary>
        public virtual valAngleBrg valAngleFm {
            get {
                XElement x = this.GetElement(valAngleFmXName);
                return ((valAngleBrg)(x));
            }
            set {
                this.SetElement(valAngleFmXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Ending of angle
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (DmeUid, codeType, valAngleFm, valAngleTo, valDistInner, valDistVerLower)
        /// </para>
        /// </summary>
        public virtual valAngleBrg valAngleTo {
            get {
                XElement x = this.GetElement(valAngleToXName);
                return ((valAngleBrg)(x));
            }
            set {
                this.SetElement(valAngleToXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Angle sector volume inner limit
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (DmeUid, codeType, valAngleFm, valAngleTo, valDistInner, valDistVerLower)
        /// </para>
        /// </summary>
        public virtual valDistHorz valDistInner {
            get {
                XElement x = this.GetElement(valDistInnerXName);
                return ((valDistHorz)(x));
            }
            set {
                this.SetElement(valDistInnerXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Lower limit
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (DmeUid, codeType, valAngleFm, valAngleTo, valDistInner, valDistVerLower)
        /// </para>
        /// </summary>
        public virtual valDistVer valDistVerLower {
            get {
                XElement x = this.GetElement(valDistVerLowerXName);
                return ((valDistVer)(x));
            }
            set {
                this.SetElement(valDistVerLowerXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string mid {
            get {
                XAttribute x = this.Attribute(midXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(midXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<DmeLimitationUidType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(DmeUidXName, typeof(DmeUidType));
            localElementDictionary.Add(codeTypeXName, typeof(codeTypeNavAidLimit));
            localElementDictionary.Add(valAngleFmXName, typeof(valAngleBrg));
            localElementDictionary.Add(valAngleToXName, typeof(valAngleBrg));
            localElementDictionary.Add(valDistInnerXName, typeof(valDistHorz));
            localElementDictionary.Add(valDistVerLowerXName, typeof(valDistVer));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// DME
    /// </para>
    /// <para>
    /// Regular expression: (DmeUid, OrgUid, VorUid?, txtName?, codeType?, codeChannel?, valGhostFreq?, uomGhostFreq?, valDisplace?, uomDisplace?, codeEm?, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, valElev?, valElevAccuracy?, valGeoidUndulation?, uomDistVer?, valCrc?, txtVerDatum?, Dtt?, txtRmk?)
    /// </para>
    /// </summary>
    public partial class DmeType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName DmeUidXName = System.Xml.Linq.XName.Get("DmeUid", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName OrgUidXName = System.Xml.Linq.XName.Get("OrgUid", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName VorUidXName = System.Xml.Linq.XName.Get("VorUid", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName txtNameXName = System.Xml.Linq.XName.Get("txtName", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName codeTypeXName = System.Xml.Linq.XName.Get("codeType", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName codeChannelXName = System.Xml.Linq.XName.Get("codeChannel", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName valGhostFreqXName = System.Xml.Linq.XName.Get("valGhostFreq", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName uomGhostFreqXName = System.Xml.Linq.XName.Get("uomGhostFreq", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName valDisplaceXName = System.Xml.Linq.XName.Get("valDisplace", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName uomDisplaceXName = System.Xml.Linq.XName.Get("uomDisplace", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName codeEmXName = System.Xml.Linq.XName.Get("codeEm", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName codeDatumXName = System.Xml.Linq.XName.Get("codeDatum", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName valGeoAccuracyXName = System.Xml.Linq.XName.Get("valGeoAccuracy", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName uomGeoAccuracyXName = System.Xml.Linq.XName.Get("uomGeoAccuracy", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName valElevXName = System.Xml.Linq.XName.Get("valElev", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName valElevAccuracyXName = System.Xml.Linq.XName.Get("valElevAccuracy", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName valGeoidUndulationXName = System.Xml.Linq.XName.Get("valGeoidUndulation", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName uomDistVerXName = System.Xml.Linq.XName.Get("uomDistVer", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName valCrcXName = System.Xml.Linq.XName.Get("valCrc", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName txtVerDatumXName = System.Xml.Linq.XName.Get("txtVerDatum", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName DttXName = System.Xml.Linq.XName.Get("Dtt", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName txtRmkXName = System.Xml.Linq.XName.Get("txtRmk", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName sourceXName = System.Xml.Linq.XName.Get("source", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("DmeType", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator DmeType(XElement xe) { return XTypedServices.ToXTypedElement<DmeType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static DmeType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(DmeUidXName), new NamedContentModelEntity(OrgUidXName), new NamedContentModelEntity(VorUidXName), new NamedContentModelEntity(txtNameXName), new NamedContentModelEntity(codeTypeXName), new NamedContentModelEntity(codeChannelXName), new NamedContentModelEntity(valGhostFreqXName), new NamedContentModelEntity(uomGhostFreqXName), new NamedContentModelEntity(valDisplaceXName), new NamedContentModelEntity(uomDisplaceXName), new NamedContentModelEntity(codeEmXName), new NamedContentModelEntity(codeDatumXName), new NamedContentModelEntity(valGeoAccuracyXName), new NamedContentModelEntity(uomGeoAccuracyXName), new NamedContentModelEntity(valElevXName), new NamedContentModelEntity(valElevAccuracyXName), new NamedContentModelEntity(valGeoidUndulationXName), new NamedContentModelEntity(uomDistVerXName), new NamedContentModelEntity(valCrcXName), new NamedContentModelEntity(txtVerDatumXName), new NamedContentModelEntity(DttXName), new NamedContentModelEntity(txtRmkXName));
        }
        
        /// <summary>
        /// <para>
        /// DME
        /// </para>
        /// <para>
        /// Regular expression: (DmeUid, OrgUid, VorUid?, txtName?, codeType?, codeChannel?, valGhostFreq?, uomGhostFreq?, valDisplace?, uomDisplace?, codeEm?, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, valElev?, valElevAccuracy?, valGeoidUndulation?, uomDistVer?, valCrc?, txtVerDatum?, Dtt?, txtRmk?)
        /// </para>
        /// </summary>
        public DmeType() {
        }
        
        /// <summary>
        /// <para>
        /// a version of Distance measuring equipment [DME]
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (DmeUid, OrgUid, VorUid?, txtName?, codeType?, codeChannel?, valGhostFreq?, uomGhostFreq?, valDisplace?, uomDisplace?, codeEm?, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, valElev?, valElevAccuracy?, valGeoidUndulation?, uomDistVer?, valCrc?, txtVerDatum?, Dtt?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual DmeUidType DmeUid {
            get {
                XElement x = this.GetElement(DmeUidXName);
                return ((DmeUidType)(x));
            }
            set {
                this.SetElement(DmeUidXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// DME is under the responsibility of Organisaton or authority
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (DmeUid, OrgUid, VorUid?, txtName?, codeType?, codeChannel?, valGhostFreq?, uomGhostFreq?, valDisplace?, uomDisplace?, codeEm?, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, valElev?, valElevAccuracy?, valGeoidUndulation?, uomDistVer?, valCrc?, txtVerDatum?, Dtt?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual OrganisationAuthorityUidType OrgUid {
            get {
                XElement x = this.GetElement(OrgUidXName);
                return ((OrganisationAuthorityUidType)(x));
            }
            set {
                this.SetElement(OrgUidXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// DME is co-located with VHF omnidirectional radio range beacon [VOR]
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (DmeUid, OrgUid, VorUid?, txtName?, codeType?, codeChannel?, valGhostFreq?, uomGhostFreq?, valDisplace?, uomDisplace?, codeEm?, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, valElev?, valElevAccuracy?, valGeoidUndulation?, uomDistVer?, valCrc?, txtVerDatum?, Dtt?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual VorUidType VorUid {
            get {
                XElement x = this.GetElement(VorUidXName);
                return ((VorUidType)(x));
            }
            set {
                this.SetElement(VorUidXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Name
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (DmeUid, OrgUid, VorUid?, txtName?, codeType?, codeChannel?, valGhostFreq?, uomGhostFreq?, valDisplace?, uomDisplace?, codeEm?, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, valElev?, valElevAccuracy?, valGeoidUndulation?, uomDistVer?, valCrc?, txtVerDatum?, Dtt?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual txtName txtName {
            get {
                XElement x = this.GetElement(txtNameXName);
                return ((txtName)(x));
            }
            set {
                this.SetElement(txtNameXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Type
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (DmeUid, OrgUid, VorUid?, txtName?, codeType?, codeChannel?, valGhostFreq?, uomGhostFreq?, valDisplace?, uomDisplace?, codeEm?, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, valElev?, valElevAccuracy?, valGeoidUndulation?, uomDistVer?, valCrc?, txtVerDatum?, Dtt?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual codeTypeDme codeType {
            get {
                XElement x = this.GetElement(codeTypeXName);
                return ((codeTypeDme)(x));
            }
            set {
                this.SetElement(codeTypeXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Channel
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (DmeUid, OrgUid, VorUid?, txtName?, codeType?, codeChannel?, valGhostFreq?, uomGhostFreq?, valDisplace?, uomDisplace?, codeEm?, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, valElev?, valElevAccuracy?, valGeoidUndulation?, uomDistVer?, valCrc?, txtVerDatum?, Dtt?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual codeChannelDme codeChannel {
            get {
                XElement x = this.GetElement(codeChannelXName);
                return ((codeChannelDme)(x));
            }
            set {
                this.SetElement(codeChannelXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Frequency of virtual VHF facility
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (DmeUid, OrgUid, VorUid?, txtName?, codeType?, codeChannel?, valGhostFreq?, uomGhostFreq?, valDisplace?, uomDisplace?, codeEm?, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, valElev?, valElevAccuracy?, valGeoidUndulation?, uomDistVer?, valCrc?, txtVerDatum?, Dtt?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual valFreq valGhostFreq {
            get {
                XElement x = this.GetElement(valGhostFreqXName);
                return ((valFreq)(x));
            }
            set {
                this.SetElement(valGhostFreqXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Unit of measurement [frequency of virtual VHF facility]
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (DmeUid, OrgUid, VorUid?, txtName?, codeType?, codeChannel?, valGhostFreq?, uomGhostFreq?, valDisplace?, uomDisplace?, codeEm?, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, valElev?, valElevAccuracy?, valGeoidUndulation?, uomDistVer?, valCrc?, txtVerDatum?, Dtt?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual uomFreq uomGhostFreq {
            get {
                XElement x = this.GetElement(uomGhostFreqXName);
                return ((uomFreq)(x));
            }
            set {
                this.SetElement(uomGhostFreqXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Value of displacement
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (DmeUid, OrgUid, VorUid?, txtName?, codeType?, codeChannel?, valGhostFreq?, uomGhostFreq?, valDisplace?, uomDisplace?, codeEm?, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, valElev?, valElevAccuracy?, valGeoidUndulation?, uomDistVer?, valCrc?, txtVerDatum?, Dtt?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual valDistHorz valDisplace {
            get {
                XElement x = this.GetElement(valDisplaceXName);
                return ((valDistHorz)(x));
            }
            set {
                this.SetElement(valDisplaceXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Unit of measurement [displacement]
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (DmeUid, OrgUid, VorUid?, txtName?, codeType?, codeChannel?, valGhostFreq?, uomGhostFreq?, valDisplace?, uomDisplace?, codeEm?, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, valElev?, valElevAccuracy?, valGeoidUndulation?, uomDistVer?, valCrc?, txtVerDatum?, Dtt?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual uomDistHorz uomDisplace {
            get {
                XElement x = this.GetElement(uomDisplaceXName);
                return ((uomDistHorz)(x));
            }
            set {
                this.SetElement(uomDisplaceXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Emission
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (DmeUid, OrgUid, VorUid?, txtName?, codeType?, codeChannel?, valGhostFreq?, uomGhostFreq?, valDisplace?, uomDisplace?, codeEm?, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, valElev?, valElevAccuracy?, valGeoidUndulation?, uomDistVer?, valCrc?, txtVerDatum?, Dtt?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual codeEmRdo codeEm {
            get {
                XElement x = this.GetElement(codeEmXName);
                return ((codeEmRdo)(x));
            }
            set {
                this.SetElement(codeEmXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Datum
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (DmeUid, OrgUid, VorUid?, txtName?, codeType?, codeChannel?, valGhostFreq?, uomGhostFreq?, valDisplace?, uomDisplace?, codeEm?, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, valElev?, valElevAccuracy?, valGeoidUndulation?, uomDistVer?, valCrc?, txtVerDatum?, Dtt?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual codeDatum codeDatum {
            get {
                XElement x = this.GetElement(codeDatumXName);
                return ((codeDatum)(x));
            }
            set {
                this.SetElement(codeDatumXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Geographical accuracy
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (DmeUid, OrgUid, VorUid?, txtName?, codeType?, codeChannel?, valGhostFreq?, uomGhostFreq?, valDisplace?, uomDisplace?, codeEm?, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, valElev?, valElevAccuracy?, valGeoidUndulation?, uomDistVer?, valCrc?, txtVerDatum?, Dtt?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual valDistHorz valGeoAccuracy {
            get {
                XElement x = this.GetElement(valGeoAccuracyXName);
                return ((valDistHorz)(x));
            }
            set {
                this.SetElement(valGeoAccuracyXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Unit of measurement [geographical accuracy]
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (DmeUid, OrgUid, VorUid?, txtName?, codeType?, codeChannel?, valGhostFreq?, uomGhostFreq?, valDisplace?, uomDisplace?, codeEm?, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, valElev?, valElevAccuracy?, valGeoidUndulation?, uomDistVer?, valCrc?, txtVerDatum?, Dtt?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual uomDistHorz uomGeoAccuracy {
            get {
                XElement x = this.GetElement(uomGeoAccuracyXName);
                return ((uomDistHorz)(x));
            }
            set {
                this.SetElement(uomGeoAccuracyXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Elevation
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (DmeUid, OrgUid, VorUid?, txtName?, codeType?, codeChannel?, valGhostFreq?, uomGhostFreq?, valDisplace?, uomDisplace?, codeEm?, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, valElev?, valElevAccuracy?, valGeoidUndulation?, uomDistVer?, valCrc?, txtVerDatum?, Dtt?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual valDistVer valElev {
            get {
                XElement x = this.GetElement(valElevXName);
                return ((valDistVer)(x));
            }
            set {
                this.SetElement(valElevXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Elevation accuracy
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (DmeUid, OrgUid, VorUid?, txtName?, codeType?, codeChannel?, valGhostFreq?, uomGhostFreq?, valDisplace?, uomDisplace?, codeEm?, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, valElev?, valElevAccuracy?, valGeoidUndulation?, uomDistVer?, valCrc?, txtVerDatum?, Dtt?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual valDistVer valElevAccuracy {
            get {
                XElement x = this.GetElement(valElevAccuracyXName);
                return ((valDistVer)(x));
            }
            set {
                this.SetElement(valElevAccuracyXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Geoid undulation
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (DmeUid, OrgUid, VorUid?, txtName?, codeType?, codeChannel?, valGhostFreq?, uomGhostFreq?, valDisplace?, uomDisplace?, codeEm?, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, valElev?, valElevAccuracy?, valGeoidUndulation?, uomDistVer?, valCrc?, txtVerDatum?, Dtt?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual valDistVer valGeoidUndulation {
            get {
                XElement x = this.GetElement(valGeoidUndulationXName);
                return ((valDistVer)(x));
            }
            set {
                this.SetElement(valGeoidUndulationXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Unit of measurement [vertical distance]
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (DmeUid, OrgUid, VorUid?, txtName?, codeType?, codeChannel?, valGhostFreq?, uomGhostFreq?, valDisplace?, uomDisplace?, codeEm?, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, valElev?, valElevAccuracy?, valGeoidUndulation?, uomDistVer?, valCrc?, txtVerDatum?, Dtt?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual uomElev uomDistVer {
            get {
                XElement x = this.GetElement(uomDistVerXName);
                return ((uomElev)(x));
            }
            set {
                this.SetElement(uomDistVerXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Cyclic redundancy check
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (DmeUid, OrgUid, VorUid?, txtName?, codeType?, codeChannel?, valGhostFreq?, uomGhostFreq?, valDisplace?, uomDisplace?, codeEm?, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, valElev?, valElevAccuracy?, valGeoidUndulation?, uomDistVer?, valCrc?, txtVerDatum?, Dtt?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual valHex valCrc {
            get {
                XElement x = this.GetElement(valCrcXName);
                return ((valHex)(x));
            }
            set {
                this.SetElement(valCrcXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Vertical Datum
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (DmeUid, OrgUid, VorUid?, txtName?, codeType?, codeChannel?, valGhostFreq?, uomGhostFreq?, valDisplace?, uomDisplace?, codeEm?, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, valElev?, valElevAccuracy?, valGeoidUndulation?, uomDistVer?, valCrc?, txtVerDatum?, Dtt?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual txtDescr txtVerDatum {
            get {
                XElement x = this.GetElement(txtVerDatumXName);
                return ((txtDescr)(x));
            }
            set {
                this.SetElement(txtVerDatumXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// DME is operating acording to DME - Timetable
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (DmeUid, OrgUid, VorUid?, txtName?, codeType?, codeChannel?, valGhostFreq?, uomGhostFreq?, valDisplace?, uomDisplace?, codeEm?, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, valElev?, valElevAccuracy?, valGeoidUndulation?, uomDistVer?, valCrc?, txtVerDatum?, Dtt?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual TimetableNavaidType Dtt {
            get {
                XElement x = this.GetElement(DttXName);
                return ((TimetableNavaidType)(x));
            }
            set {
                this.SetElement(DttXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Remark
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (DmeUid, OrgUid, VorUid?, txtName?, codeType?, codeChannel?, valGhostFreq?, uomGhostFreq?, valDisplace?, uomDisplace?, codeEm?, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, valElev?, valElevAccuracy?, valGeoidUndulation?, uomDistVer?, valCrc?, txtVerDatum?, Dtt?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual txtRmk txtRmk {
            get {
                XElement x = this.GetElement(txtRmkXName);
                return ((txtRmk)(x));
            }
            set {
                this.SetElement(txtRmkXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string source {
            get {
                XAttribute x = this.Attribute(sourceXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(sourceXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<DmeType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(DmeUidXName, typeof(DmeUidType));
            localElementDictionary.Add(OrgUidXName, typeof(OrganisationAuthorityUidType));
            localElementDictionary.Add(VorUidXName, typeof(VorUidType));
            localElementDictionary.Add(txtNameXName, typeof(txtName));
            localElementDictionary.Add(codeTypeXName, typeof(codeTypeDme));
            localElementDictionary.Add(codeChannelXName, typeof(codeChannelDme));
            localElementDictionary.Add(valGhostFreqXName, typeof(valFreq));
            localElementDictionary.Add(uomGhostFreqXName, typeof(uomFreq));
            localElementDictionary.Add(valDisplaceXName, typeof(valDistHorz));
            localElementDictionary.Add(uomDisplaceXName, typeof(uomDistHorz));
            localElementDictionary.Add(codeEmXName, typeof(codeEmRdo));
            localElementDictionary.Add(codeDatumXName, typeof(codeDatum));
            localElementDictionary.Add(valGeoAccuracyXName, typeof(valDistHorz));
            localElementDictionary.Add(uomGeoAccuracyXName, typeof(uomDistHorz));
            localElementDictionary.Add(valElevXName, typeof(valDistVer));
            localElementDictionary.Add(valElevAccuracyXName, typeof(valDistVer));
            localElementDictionary.Add(valGeoidUndulationXName, typeof(valDistVer));
            localElementDictionary.Add(uomDistVerXName, typeof(uomElev));
            localElementDictionary.Add(valCrcXName, typeof(valHex));
            localElementDictionary.Add(txtVerDatumXName, typeof(txtDescr));
            localElementDictionary.Add(DttXName, typeof(TimetableNavaidType));
            localElementDictionary.Add(txtRmkXName, typeof(txtRmk));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Distance measuring equipment [DME] - UID
    /// </para>
    /// <para>
    /// Regular expression: (codeId, geoLat, geoLong)
    /// </para>
    /// </summary>
    public partial class DmeUidType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName codeIdXName = System.Xml.Linq.XName.Get("codeId", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName geoLatXName = System.Xml.Linq.XName.Get("geoLat", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName geoLongXName = System.Xml.Linq.XName.Get("geoLong", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName midXName = System.Xml.Linq.XName.Get("mid", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName regionXName = System.Xml.Linq.XName.Get("region", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("DmeUidType", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator DmeUidType(XElement xe) { return XTypedServices.ToXTypedElement<DmeUidType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static DmeUidType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(codeIdXName), new NamedContentModelEntity(geoLatXName), new NamedContentModelEntity(geoLongXName));
        }
        
        /// <summary>
        /// <para>
        /// Distance measuring equipment [DME] - UID
        /// </para>
        /// <para>
        /// Regular expression: (codeId, geoLat, geoLong)
        /// </para>
        /// </summary>
        public DmeUidType() {
        }
        
        /// <summary>
        /// <para>
        /// Identification
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (codeId, geoLat, geoLong)
        /// </para>
        /// </summary>
        public virtual codeIdNavAid codeId {
            get {
                XElement x = this.GetElement(codeIdXName);
                return ((codeIdNavAid)(x));
            }
            set {
                this.SetElement(codeIdXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Latitude
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (codeId, geoLat, geoLong)
        /// </para>
        /// </summary>
        public virtual geoLat geoLat {
            get {
                XElement x = this.GetElement(geoLatXName);
                return ((geoLat)(x));
            }
            set {
                this.SetElement(geoLatXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Longitude
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (codeId, geoLat, geoLong)
        /// </para>
        /// </summary>
        public virtual geoLong geoLong {
            get {
                XElement x = this.GetElement(geoLongXName);
                return ((geoLong)(x));
            }
            set {
                this.SetElement(geoLongXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string mid {
            get {
                XAttribute x = this.Attribute(midXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(midXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual string region {
            get {
                XAttribute x = this.Attribute(regionXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(regionXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<DmeUidType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(codeIdXName, typeof(codeIdNavAid));
            localElementDictionary.Add(geoLatXName, typeof(geoLat));
            localElementDictionary.Add(geoLongXName, typeof(geoLong));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// DME Usage Limitation
    /// </para>
    /// <para>
    /// Regular expression: (DliUid, txtRmk?, UsageLimit*)
    /// </para>
    /// </summary>
    public partial class DmeUsageLimitationType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName DliUidXName = System.Xml.Linq.XName.Get("DliUid", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName txtRmkXName = System.Xml.Linq.XName.Get("txtRmk", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName UsageLimitXName = System.Xml.Linq.XName.Get("UsageLimit", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<NavaidLimitationType> UsageLimitField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName sourceXName = System.Xml.Linq.XName.Get("source", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("DmeUsageLimitationType", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator DmeUsageLimitationType(XElement xe) { return XTypedServices.ToXTypedElement<DmeUsageLimitationType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static DmeUsageLimitationType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(DliUidXName), new NamedContentModelEntity(txtRmkXName), new NamedContentModelEntity(UsageLimitXName));
        }
        
        /// <summary>
        /// <para>
        /// DME Usage Limitation
        /// </para>
        /// <para>
        /// Regular expression: (DliUid, txtRmk?, UsageLimit*)
        /// </para>
        /// </summary>
        public DmeUsageLimitationType() {
        }
        
        /// <summary>
        /// <para>
        /// DME Usage Limitation - UID
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (DliUid, txtRmk?, UsageLimit*)
        /// </para>
        /// </summary>
        public virtual DmeUsageLimitationUidType DliUid {
            get {
                XElement x = this.GetElement(DliUidXName);
                return ((DmeUsageLimitationUidType)(x));
            }
            set {
                this.SetElement(DliUidXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Remarks
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (DliUid, txtRmk?, UsageLimit*)
        /// </para>
        /// </summary>
        public virtual txtRmk txtRmk {
            get {
                XElement x = this.GetElement(txtRmkXName);
                return ((txtRmk)(x));
            }
            set {
                this.SetElement(txtRmkXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (DliUid, txtRmk?, UsageLimit*)
        /// </para>
        /// </summary>
        public virtual IList<NavaidLimitationType> UsageLimit {
            get {
                if ((this.UsageLimitField == null)) {
                    this.UsageLimitField = new XTypedList<NavaidLimitationType>(this, LinqToXsdTypeManager.Instance, UsageLimitXName);
                }
                return this.UsageLimitField;
            }
            set {
                if ((value == null)) {
                    this.UsageLimitField = null;
                }
                else {
                    if ((this.UsageLimitField == null)) {
                        this.UsageLimitField = XTypedList<NavaidLimitationType>.Initialize(this, LinqToXsdTypeManager.Instance, value, UsageLimitXName);
                    }
                    else {
                        XTypedServices.SetList<NavaidLimitationType>(this.UsageLimitField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string source {
            get {
                XAttribute x = this.Attribute(sourceXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(sourceXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<DmeUsageLimitationType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(DliUidXName, typeof(DmeUsageLimitationUidType));
            localElementDictionary.Add(txtRmkXName, typeof(txtRmk));
            localElementDictionary.Add(UsageLimitXName, typeof(NavaidLimitationType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// DME Usage Limitation - UID
    /// </para>
    /// <para>
    /// Regular expression: (DmeUid, codeType)
    /// </para>
    /// </summary>
    public partial class DmeUsageLimitationUidType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName DmeUidXName = System.Xml.Linq.XName.Get("DmeUid", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName codeTypeXName = System.Xml.Linq.XName.Get("codeType", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName midXName = System.Xml.Linq.XName.Get("mid", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("DmeUsageLimitationUidType", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator DmeUsageLimitationUidType(XElement xe) { return XTypedServices.ToXTypedElement<DmeUsageLimitationUidType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static DmeUsageLimitationUidType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(DmeUidXName), new NamedContentModelEntity(codeTypeXName));
        }
        
        /// <summary>
        /// <para>
        /// DME Usage Limitation - UID
        /// </para>
        /// <para>
        /// Regular expression: (DmeUid, codeType)
        /// </para>
        /// </summary>
        public DmeUsageLimitationUidType() {
        }
        
        /// <summary>
        /// <para>
        /// DME Usage Limitation is limiting the use of a DME
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (DmeUid, codeType)
        /// </para>
        /// </summary>
        public virtual DmeUidType DmeUid {
            get {
                XElement x = this.GetElement(DmeUidXName);
                return ((DmeUidType)(x));
            }
            set {
                this.SetElement(DmeUidXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Limitation type
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (DmeUid, codeType)
        /// </para>
        /// </summary>
        public virtual codeTypeNavAidLimit codeType {
            get {
                XElement x = this.GetElement(codeTypeXName);
                return ((codeTypeNavAidLimit)(x));
            }
            set {
                this.SetElement(codeTypeXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string mid {
            get {
                XAttribute x = this.Attribute(midXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(midXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<DmeUsageLimitationUidType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(DmeUidXName, typeof(DmeUidType));
            localElementDictionary.Add(codeTypeXName, typeof(codeTypeNavAidLimit));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// En-route route
    /// </para>
    /// <para>
    /// Regular expression: (RteUid, txtRmk?)
    /// </para>
    /// </summary>
    public partial class EnrouteRouteType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName RteUidXName = System.Xml.Linq.XName.Get("RteUid", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName txtRmkXName = System.Xml.Linq.XName.Get("txtRmk", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName sourceXName = System.Xml.Linq.XName.Get("source", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("EnrouteRouteType", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator EnrouteRouteType(XElement xe) { return XTypedServices.ToXTypedElement<EnrouteRouteType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static EnrouteRouteType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(RteUidXName), new NamedContentModelEntity(txtRmkXName));
        }
        
        /// <summary>
        /// <para>
        /// En-route route
        /// </para>
        /// <para>
        /// Regular expression: (RteUid, txtRmk?)
        /// </para>
        /// </summary>
        public EnrouteRouteType() {
        }
        
        /// <summary>
        /// <para>
        /// a version of En-route route
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (RteUid, txtRmk?)
        /// </para>
        /// </summary>
        public virtual EnrouteRouteUidType RteUid {
            get {
                XElement x = this.GetElement(RteUidXName);
                return ((EnrouteRouteUidType)(x));
            }
            set {
                this.SetElement(RteUidXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Remark
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (RteUid, txtRmk?)
        /// </para>
        /// </summary>
        public virtual txtRmk txtRmk {
            get {
                XElement x = this.GetElement(txtRmkXName);
                return ((txtRmk)(x));
            }
            set {
                this.SetElement(txtRmkXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string source {
            get {
                XAttribute x = this.Attribute(sourceXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(sourceXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<EnrouteRouteType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(RteUidXName, typeof(EnrouteRouteUidType));
            localElementDictionary.Add(txtRmkXName, typeof(txtRmk));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// En-route route - UID
    /// </para>
    /// <para>
    /// Regular expression: (txtDesig, txtLocDesig)
    /// </para>
    /// </summary>
    public partial class EnrouteRouteUidType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName txtDesigXName = System.Xml.Linq.XName.Get("txtDesig", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName txtLocDesigXName = System.Xml.Linq.XName.Get("txtLocDesig", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName midXName = System.Xml.Linq.XName.Get("mid", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("EnrouteRouteUidType", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator EnrouteRouteUidType(XElement xe) { return XTypedServices.ToXTypedElement<EnrouteRouteUidType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static EnrouteRouteUidType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(txtDesigXName), new NamedContentModelEntity(txtLocDesigXName));
        }
        
        /// <summary>
        /// <para>
        /// En-route route - UID
        /// </para>
        /// <para>
        /// Regular expression: (txtDesig, txtLocDesig)
        /// </para>
        /// </summary>
        public EnrouteRouteUidType() {
        }
        
        /// <summary>
        /// <para>
        /// Designator
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (txtDesig, txtLocDesig)
        /// </para>
        /// </summary>
        public virtual txtDesigRte txtDesig {
            get {
                XElement x = this.GetElement(txtDesigXName);
                return ((txtDesigRte)(x));
            }
            set {
                this.SetElement(txtDesigXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Area designator
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (txtDesig, txtLocDesig)
        /// </para>
        /// </summary>
        public virtual txtDesig txtLocDesig {
            get {
                XElement x = this.GetElement(txtLocDesigXName);
                return ((txtDesig)(x));
            }
            set {
                this.SetElement(txtLocDesigXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string mid {
            get {
                XAttribute x = this.Attribute(midXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(midXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<EnrouteRouteUidType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(txtDesigXName, typeof(txtDesigRte));
            localElementDictionary.Add(txtLocDesigXName, typeof(txtDesig));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// FATO centre line position
    /// </para>
    /// <para>
    /// Regular expression: (FcpUid, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, valElev?, valElevAccuracy?, valGeoidUndulation?, uomDistVer?, valCrc?, txtVerDatum?, txtRmk?)
    /// </para>
    /// </summary>
    public partial class FatoCentreLinePositionType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName FcpUidXName = System.Xml.Linq.XName.Get("FcpUid", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName codeDatumXName = System.Xml.Linq.XName.Get("codeDatum", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName valGeoAccuracyXName = System.Xml.Linq.XName.Get("valGeoAccuracy", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName uomGeoAccuracyXName = System.Xml.Linq.XName.Get("uomGeoAccuracy", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName valElevXName = System.Xml.Linq.XName.Get("valElev", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName valElevAccuracyXName = System.Xml.Linq.XName.Get("valElevAccuracy", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName valGeoidUndulationXName = System.Xml.Linq.XName.Get("valGeoidUndulation", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName uomDistVerXName = System.Xml.Linq.XName.Get("uomDistVer", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName valCrcXName = System.Xml.Linq.XName.Get("valCrc", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName txtVerDatumXName = System.Xml.Linq.XName.Get("txtVerDatum", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName txtRmkXName = System.Xml.Linq.XName.Get("txtRmk", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName sourceXName = System.Xml.Linq.XName.Get("source", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("FatoCentreLinePositionType", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator FatoCentreLinePositionType(XElement xe) { return XTypedServices.ToXTypedElement<FatoCentreLinePositionType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static FatoCentreLinePositionType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(FcpUidXName), new NamedContentModelEntity(codeDatumXName), new NamedContentModelEntity(valGeoAccuracyXName), new NamedContentModelEntity(uomGeoAccuracyXName), new NamedContentModelEntity(valElevXName), new NamedContentModelEntity(valElevAccuracyXName), new NamedContentModelEntity(valGeoidUndulationXName), new NamedContentModelEntity(uomDistVerXName), new NamedContentModelEntity(valCrcXName), new NamedContentModelEntity(txtVerDatumXName), new NamedContentModelEntity(txtRmkXName));
        }
        
        /// <summary>
        /// <para>
        /// FATO centre line position
        /// </para>
        /// <para>
        /// Regular expression: (FcpUid, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, valElev?, valElevAccuracy?, valGeoidUndulation?, uomDistVer?, valCrc?, txtVerDatum?, txtRmk?)
        /// </para>
        /// </summary>
        public FatoCentreLinePositionType() {
        }
        
        /// <summary>
        /// <para>
        /// a version of FATO - centre line position
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (FcpUid, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, valElev?, valElevAccuracy?, valGeoidUndulation?, uomDistVer?, valCrc?, txtVerDatum?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual FatoCentreLinePositionUidType FcpUid {
            get {
                XElement x = this.GetElement(FcpUidXName);
                return ((FatoCentreLinePositionUidType)(x));
            }
            set {
                this.SetElement(FcpUidXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Datum
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (FcpUid, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, valElev?, valElevAccuracy?, valGeoidUndulation?, uomDistVer?, valCrc?, txtVerDatum?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual codeDatum codeDatum {
            get {
                XElement x = this.GetElement(codeDatumXName);
                return ((codeDatum)(x));
            }
            set {
                this.SetElement(codeDatumXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Geographical accuracy
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (FcpUid, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, valElev?, valElevAccuracy?, valGeoidUndulation?, uomDistVer?, valCrc?, txtVerDatum?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual valDistHorz valGeoAccuracy {
            get {
                XElement x = this.GetElement(valGeoAccuracyXName);
                return ((valDistHorz)(x));
            }
            set {
                this.SetElement(valGeoAccuracyXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Unit of measurement [geographical accuracy]
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (FcpUid, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, valElev?, valElevAccuracy?, valGeoidUndulation?, uomDistVer?, valCrc?, txtVerDatum?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual uomDistHorz uomGeoAccuracy {
            get {
                XElement x = this.GetElement(uomGeoAccuracyXName);
                return ((uomDistHorz)(x));
            }
            set {
                this.SetElement(uomGeoAccuracyXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Elevation
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (FcpUid, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, valElev?, valElevAccuracy?, valGeoidUndulation?, uomDistVer?, valCrc?, txtVerDatum?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual valDistVer valElev {
            get {
                XElement x = this.GetElement(valElevXName);
                return ((valDistVer)(x));
            }
            set {
                this.SetElement(valElevXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Elevation accuracy
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (FcpUid, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, valElev?, valElevAccuracy?, valGeoidUndulation?, uomDistVer?, valCrc?, txtVerDatum?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual valDistVer valElevAccuracy {
            get {
                XElement x = this.GetElement(valElevAccuracyXName);
                return ((valDistVer)(x));
            }
            set {
                this.SetElement(valElevAccuracyXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Geoid undulation
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (FcpUid, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, valElev?, valElevAccuracy?, valGeoidUndulation?, uomDistVer?, valCrc?, txtVerDatum?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual valDistVer valGeoidUndulation {
            get {
                XElement x = this.GetElement(valGeoidUndulationXName);
                return ((valDistVer)(x));
            }
            set {
                this.SetElement(valGeoidUndulationXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Unit of measurement [vertical distance]
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (FcpUid, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, valElev?, valElevAccuracy?, valGeoidUndulation?, uomDistVer?, valCrc?, txtVerDatum?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual uomElev uomDistVer {
            get {
                XElement x = this.GetElement(uomDistVerXName);
                return ((uomElev)(x));
            }
            set {
                this.SetElement(uomDistVerXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Cyclic redundancy check
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (FcpUid, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, valElev?, valElevAccuracy?, valGeoidUndulation?, uomDistVer?, valCrc?, txtVerDatum?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual valHex valCrc {
            get {
                XElement x = this.GetElement(valCrcXName);
                return ((valHex)(x));
            }
            set {
                this.SetElement(valCrcXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Vertical Datum
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (FcpUid, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, valElev?, valElevAccuracy?, valGeoidUndulation?, uomDistVer?, valCrc?, txtVerDatum?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual txtDescr txtVerDatum {
            get {
                XElement x = this.GetElement(txtVerDatumXName);
                return ((txtDescr)(x));
            }
            set {
                this.SetElement(txtVerDatumXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Remark
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (FcpUid, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, valElev?, valElevAccuracy?, valGeoidUndulation?, uomDistVer?, valCrc?, txtVerDatum?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual txtRmk txtRmk {
            get {
                XElement x = this.GetElement(txtRmkXName);
                return ((txtRmk)(x));
            }
            set {
                this.SetElement(txtRmkXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string source {
            get {
                XAttribute x = this.Attribute(sourceXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(sourceXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<FatoCentreLinePositionType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(FcpUidXName, typeof(FatoCentreLinePositionUidType));
            localElementDictionary.Add(codeDatumXName, typeof(codeDatum));
            localElementDictionary.Add(valGeoAccuracyXName, typeof(valDistHorz));
            localElementDictionary.Add(uomGeoAccuracyXName, typeof(uomDistHorz));
            localElementDictionary.Add(valElevXName, typeof(valDistVer));
            localElementDictionary.Add(valElevAccuracyXName, typeof(valDistVer));
            localElementDictionary.Add(valGeoidUndulationXName, typeof(valDistVer));
            localElementDictionary.Add(uomDistVerXName, typeof(uomElev));
            localElementDictionary.Add(valCrcXName, typeof(valHex));
            localElementDictionary.Add(txtVerDatumXName, typeof(txtDescr));
            localElementDictionary.Add(txtRmkXName, typeof(txtRmk));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// FATO - centre line position - UID
    /// </para>
    /// <para>
    /// Regular expression: ((FaoUid | FtoUid), geoLat, geoLong)
    /// </para>
    /// </summary>
    public partial class FatoCentreLinePositionUidType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName FaoUidXName = System.Xml.Linq.XName.Get("FaoUid", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName FtoUidXName = System.Xml.Linq.XName.Get("FtoUid", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName geoLatXName = System.Xml.Linq.XName.Get("geoLat", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName geoLongXName = System.Xml.Linq.XName.Get("geoLong", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName midXName = System.Xml.Linq.XName.Get("mid", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("FatoCentreLinePositionUidType", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator FatoCentreLinePositionUidType(XElement xe) { return XTypedServices.ToXTypedElement<FatoCentreLinePositionUidType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static FatoCentreLinePositionUidType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new ChoiceContentModelEntity(new NamedContentModelEntity(FaoUidXName), new NamedContentModelEntity(FtoUidXName)), new NamedContentModelEntity(geoLatXName), new NamedContentModelEntity(geoLongXName));
        }
        
        /// <summary>
        /// <para>
        /// FATO - centre line position - UID
        /// </para>
        /// <para>
        /// Regular expression: ((FaoUid | FtoUid), geoLat, geoLong)
        /// </para>
        /// </summary>
        public FatoCentreLinePositionUidType() {
        }
        
        /// <summary>
        /// <para>
        /// [Deprecated]
        /// </para>
        /// <para>
        /// DEPRECATED-4.0
        /// </para>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((FaoUid | FtoUid), geoLat, geoLong)
        /// </para>
        /// </summary>
        public virtual FatoOldUidType FaoUid {
            get {
                XElement x = this.GetElement(FaoUidXName);
                return ((FatoOldUidType)(x));
            }
            set {
                this.SetElement(FaoUidXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// FATO - centre line position is on the centre line of Final approach and take-off area [FATO]
        /// </para>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((FaoUid | FtoUid), geoLat, geoLong)
        /// </para>
        /// </summary>
        public virtual FatoUidType FtoUid {
            get {
                XElement x = this.GetElement(FtoUidXName);
                return ((FatoUidType)(x));
            }
            set {
                this.SetElement(FtoUidXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Latitude
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: ((FaoUid | FtoUid), geoLat, geoLong)
        /// </para>
        /// </summary>
        public virtual geoLat geoLat {
            get {
                XElement x = this.GetElement(geoLatXName);
                return ((geoLat)(x));
            }
            set {
                this.SetElement(geoLatXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Longitude
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: ((FaoUid | FtoUid), geoLat, geoLong)
        /// </para>
        /// </summary>
        public virtual geoLong geoLong {
            get {
                XElement x = this.GetElement(geoLongXName);
                return ((geoLong)(x));
            }
            set {
                this.SetElement(geoLongXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string mid {
            get {
                XAttribute x = this.Attribute(midXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(midXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<FatoCentreLinePositionUidType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(FaoUidXName, typeof(FatoOldUidType));
            localElementDictionary.Add(FtoUidXName, typeof(FatoUidType));
            localElementDictionary.Add(geoLatXName, typeof(geoLat));
            localElementDictionary.Add(geoLongXName, typeof(geoLong));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Approach lighting system for FATO direction
    /// </para>
    /// <para>
    /// Regular expression: (FdaUid, valLen?, uomLen?, codeIntst?, codeSequencedFlash?, txtDescrFlash?, txtRmk?)
    /// </para>
    /// </summary>
    public partial class FatoDirectionApproachLightingType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName FdaUidXName = System.Xml.Linq.XName.Get("FdaUid", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName valLenXName = System.Xml.Linq.XName.Get("valLen", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName uomLenXName = System.Xml.Linq.XName.Get("uomLen", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName codeIntstXName = System.Xml.Linq.XName.Get("codeIntst", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName codeSequencedFlashXName = System.Xml.Linq.XName.Get("codeSequencedFlash", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName txtDescrFlashXName = System.Xml.Linq.XName.Get("txtDescrFlash", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName txtRmkXName = System.Xml.Linq.XName.Get("txtRmk", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName sourceXName = System.Xml.Linq.XName.Get("source", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("FatoDirectionApproachLightingType", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator FatoDirectionApproachLightingType(XElement xe) { return XTypedServices.ToXTypedElement<FatoDirectionApproachLightingType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static FatoDirectionApproachLightingType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(FdaUidXName), new NamedContentModelEntity(valLenXName), new NamedContentModelEntity(uomLenXName), new NamedContentModelEntity(codeIntstXName), new NamedContentModelEntity(codeSequencedFlashXName), new NamedContentModelEntity(txtDescrFlashXName), new NamedContentModelEntity(txtRmkXName));
        }
        
        /// <summary>
        /// <para>
        /// Approach lighting system for FATO direction
        /// </para>
        /// <para>
        /// Regular expression: (FdaUid, valLen?, uomLen?, codeIntst?, codeSequencedFlash?, txtDescrFlash?, txtRmk?)
        /// </para>
        /// </summary>
        public FatoDirectionApproachLightingType() {
        }
        
        /// <summary>
        /// <para>
        /// Approach lighting system for FATO direction is a version of Approach lighting system for FATO direction
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (FdaUid, valLen?, uomLen?, codeIntst?, codeSequencedFlash?, txtDescrFlash?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual FatoDirectionApproachLightingUidType FdaUid {
            get {
                XElement x = this.GetElement(FdaUidXName);
                return ((FatoDirectionApproachLightingUidType)(x));
            }
            set {
                this.SetElement(FdaUidXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Length
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (FdaUid, valLen?, uomLen?, codeIntst?, codeSequencedFlash?, txtDescrFlash?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual valDistHorz valLen {
            get {
                XElement x = this.GetElement(valLenXName);
                return ((valDistHorz)(x));
            }
            set {
                this.SetElement(valLenXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Unit of measurement [length]
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (FdaUid, valLen?, uomLen?, codeIntst?, codeSequencedFlash?, txtDescrFlash?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual uomDistHorz uomLen {
            get {
                XElement x = this.GetElement(uomLenXName);
                return ((uomDistHorz)(x));
            }
            set {
                this.SetElement(uomLenXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Intensity
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (FdaUid, valLen?, uomLen?, codeIntst?, codeSequencedFlash?, txtDescrFlash?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual codeIntstLgt codeIntst {
            get {
                XElement x = this.GetElement(codeIntstXName);
                return ((codeIntstLgt)(x));
            }
            set {
                this.SetElement(codeIntstXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Sequenced flashing available
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (FdaUid, valLen?, uomLen?, codeIntst?, codeSequencedFlash?, txtDescrFlash?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual codeYesNo codeSequencedFlash {
            get {
                XElement x = this.GetElement(codeSequencedFlashXName);
                return ((codeYesNo)(x));
            }
            set {
                this.SetElement(codeSequencedFlashXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Flash description
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (FdaUid, valLen?, uomLen?, codeIntst?, codeSequencedFlash?, txtDescrFlash?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual txtDescr txtDescrFlash {
            get {
                XElement x = this.GetElement(txtDescrFlashXName);
                return ((txtDescr)(x));
            }
            set {
                this.SetElement(txtDescrFlashXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Remark
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (FdaUid, valLen?, uomLen?, codeIntst?, codeSequencedFlash?, txtDescrFlash?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual txtRmk txtRmk {
            get {
                XElement x = this.GetElement(txtRmkXName);
                return ((txtRmk)(x));
            }
            set {
                this.SetElement(txtRmkXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string source {
            get {
                XAttribute x = this.Attribute(sourceXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(sourceXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<FatoDirectionApproachLightingType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(FdaUidXName, typeof(FatoDirectionApproachLightingUidType));
            localElementDictionary.Add(valLenXName, typeof(valDistHorz));
            localElementDictionary.Add(uomLenXName, typeof(uomDistHorz));
            localElementDictionary.Add(codeIntstXName, typeof(codeIntstLgt));
            localElementDictionary.Add(codeSequencedFlashXName, typeof(codeYesNo));
            localElementDictionary.Add(txtDescrFlashXName, typeof(txtDescr));
            localElementDictionary.Add(txtRmkXName, typeof(txtRmk));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Approach lighting system for FATO direction - UID
    /// </para>
    /// <para>
    /// Regular expression: (FdnUid, codeType)
    /// </para>
    /// </summary>
    public partial class FatoDirectionApproachLightingUidType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName FdnUidXName = System.Xml.Linq.XName.Get("FdnUid", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName codeTypeXName = System.Xml.Linq.XName.Get("codeType", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName midXName = System.Xml.Linq.XName.Get("mid", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("FatoDirectionApproachLightingUidType", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator FatoDirectionApproachLightingUidType(XElement xe) { return XTypedServices.ToXTypedElement<FatoDirectionApproachLightingUidType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static FatoDirectionApproachLightingUidType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(FdnUidXName), new NamedContentModelEntity(codeTypeXName));
        }
        
        /// <summary>
        /// <para>
        /// Approach lighting system for FATO direction - UID
        /// </para>
        /// <para>
        /// Regular expression: (FdnUid, codeType)
        /// </para>
        /// </summary>
        public FatoDirectionApproachLightingUidType() {
        }
        
        /// <summary>
        /// <para>
        /// Approach lighting system for FATO direction is serving Approach and take-off direction of a FATO
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (FdnUid, codeType)
        /// </para>
        /// </summary>
        public virtual FatoDirectionUidType FdnUid {
            get {
                XElement x = this.GetElement(FdnUidXName);
                return ((FatoDirectionUidType)(x));
            }
            set {
                this.SetElement(FdnUidXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Type
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (FdnUid, codeType)
        /// </para>
        /// </summary>
        public virtual codeTypeAlsFato codeType {
            get {
                XElement x = this.GetElement(codeTypeXName);
                return ((codeTypeAlsFato)(x));
            }
            set {
                this.SetElement(codeTypeXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string mid {
            get {
                XAttribute x = this.Attribute(midXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(midXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<FatoDirectionApproachLightingUidType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(FdnUidXName, typeof(FatoDirectionUidType));
            localElementDictionary.Add(codeTypeXName, typeof(codeTypeAlsFato));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Distance declared for FATO direction
    /// </para>
    /// <para>
    /// Regular expression: (FddUid, valDist, uomDist, txtRmk?)
    /// </para>
    /// </summary>
    public partial class FatoDirectionDeclaredDistanceType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName FddUidXName = System.Xml.Linq.XName.Get("FddUid", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName valDistXName = System.Xml.Linq.XName.Get("valDist", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName uomDistXName = System.Xml.Linq.XName.Get("uomDist", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName txtRmkXName = System.Xml.Linq.XName.Get("txtRmk", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName sourceXName = System.Xml.Linq.XName.Get("source", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("FatoDirectionDeclaredDistanceType", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator FatoDirectionDeclaredDistanceType(XElement xe) { return XTypedServices.ToXTypedElement<FatoDirectionDeclaredDistanceType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static FatoDirectionDeclaredDistanceType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(FddUidXName), new NamedContentModelEntity(valDistXName), new NamedContentModelEntity(uomDistXName), new NamedContentModelEntity(txtRmkXName));
        }
        
        /// <summary>
        /// <para>
        /// Distance declared for FATO direction
        /// </para>
        /// <para>
        /// Regular expression: (FddUid, valDist, uomDist, txtRmk?)
        /// </para>
        /// </summary>
        public FatoDirectionDeclaredDistanceType() {
        }
        
        /// <summary>
        /// <para>
        /// Distance declared for FATO direction is a version of Distance declared for FATO direction
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (FddUid, valDist, uomDist, txtRmk?)
        /// </para>
        /// </summary>
        public virtual FatoDirectionDeclaredDistanceUidType FddUid {
            get {
                XElement x = this.GetElement(FddUidXName);
                return ((FatoDirectionDeclaredDistanceUidType)(x));
            }
            set {
                this.SetElement(FddUidXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Declared distance
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (FddUid, valDist, uomDist, txtRmk?)
        /// </para>
        /// </summary>
        public virtual valDistHorz valDist {
            get {
                XElement x = this.GetElement(valDistXName);
                return ((valDistHorz)(x));
            }
            set {
                this.SetElement(valDistXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Unit of measurement [horizontal distance]
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (FddUid, valDist, uomDist, txtRmk?)
        /// </para>
        /// </summary>
        public virtual uomDistHorz uomDist {
            get {
                XElement x = this.GetElement(uomDistXName);
                return ((uomDistHorz)(x));
            }
            set {
                this.SetElement(uomDistXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Remark
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (FddUid, valDist, uomDist, txtRmk?)
        /// </para>
        /// </summary>
        public virtual txtRmk txtRmk {
            get {
                XElement x = this.GetElement(txtRmkXName);
                return ((txtRmk)(x));
            }
            set {
                this.SetElement(txtRmkXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string source {
            get {
                XAttribute x = this.Attribute(sourceXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(sourceXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<FatoDirectionDeclaredDistanceType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(FddUidXName, typeof(FatoDirectionDeclaredDistanceUidType));
            localElementDictionary.Add(valDistXName, typeof(valDistHorz));
            localElementDictionary.Add(uomDistXName, typeof(uomDistHorz));
            localElementDictionary.Add(txtRmkXName, typeof(txtRmk));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Distance declared for FATO direction - UID
    /// </para>
    /// <para>
    /// Regular expression: (FdnUid, TwyUid?, codeType, codeDayPeriod)
    /// </para>
    /// </summary>
    public partial class FatoDirectionDeclaredDistanceUidType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName FdnUidXName = System.Xml.Linq.XName.Get("FdnUid", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TwyUidXName = System.Xml.Linq.XName.Get("TwyUid", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName codeTypeXName = System.Xml.Linq.XName.Get("codeType", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName codeDayPeriodXName = System.Xml.Linq.XName.Get("codeDayPeriod", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName midXName = System.Xml.Linq.XName.Get("mid", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("FatoDirectionDeclaredDistanceUidType", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator FatoDirectionDeclaredDistanceUidType(XElement xe) { return XTypedServices.ToXTypedElement<FatoDirectionDeclaredDistanceUidType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static FatoDirectionDeclaredDistanceUidType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(FdnUidXName), new NamedContentModelEntity(TwyUidXName), new NamedContentModelEntity(codeTypeXName), new NamedContentModelEntity(codeDayPeriodXName));
        }
        
        /// <summary>
        /// <para>
        /// Distance declared for FATO direction - UID
        /// </para>
        /// <para>
        /// Regular expression: (FdnUid, TwyUid?, codeType, codeDayPeriod)
        /// </para>
        /// </summary>
        public FatoDirectionDeclaredDistanceUidType() {
        }
        
        /// <summary>
        /// <para>
        /// Distance declared for FATO direction is for Approach and take-off direction of a FATO
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (FdnUid, TwyUid?, codeType, codeDayPeriod)
        /// </para>
        /// </summary>
        public virtual FatoDirectionUidType FdnUid {
            get {
                XElement x = this.GetElement(FdnUidXName);
                return ((FatoDirectionUidType)(x));
            }
            set {
                this.SetElement(FdnUidXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Distance declared for FATO direction is associated with Taxiway [TWY]
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (FdnUid, TwyUid?, codeType, codeDayPeriod)
        /// </para>
        /// </summary>
        public virtual TaxiwayUidType TwyUid {
            get {
                XElement x = this.GetElement(TwyUidXName);
                return ((TaxiwayUidType)(x));
            }
            set {
                this.SetElement(TwyUidXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Type
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (FdnUid, TwyUid?, codeType, codeDayPeriod)
        /// </para>
        /// </summary>
        public virtual codeTypeDeclDistFato codeType {
            get {
                XElement x = this.GetElement(codeTypeXName);
                return ((codeTypeDeclDistFato)(x));
            }
            set {
                this.SetElement(codeTypeXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Time period
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (FdnUid, TwyUid?, codeType, codeDayPeriod)
        /// </para>
        /// </summary>
        public virtual codeDayPeriod codeDayPeriod {
            get {
                XElement x = this.GetElement(codeDayPeriodXName);
                return ((codeDayPeriod)(x));
            }
            set {
                this.SetElement(codeDayPeriodXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string mid {
            get {
                XAttribute x = this.Attribute(midXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(midXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<FatoDirectionDeclaredDistanceUidType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(FdnUidXName, typeof(FatoDirectionUidType));
            localElementDictionary.Add(TwyUidXName, typeof(TaxiwayUidType));
            localElementDictionary.Add(codeTypeXName, typeof(codeTypeDeclDistFato));
            localElementDictionary.Add(codeDayPeriodXName, typeof(codeDayPeriod));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Obstacle for FATO direction
    /// </para>
    /// <para>
    /// Regular expression: (FdoUid, codeTypeOps?, valDistThr?, valDistAlongCline?, valDistToCline?, uomDistHorz?, valBrgThr?, txtRmk?)
    /// </para>
    /// </summary>
    public partial class FatoDirectionObstacleType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName FdoUidXName = System.Xml.Linq.XName.Get("FdoUid", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName codeTypeOpsXName = System.Xml.Linq.XName.Get("codeTypeOps", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName valDistThrXName = System.Xml.Linq.XName.Get("valDistThr", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName valDistAlongClineXName = System.Xml.Linq.XName.Get("valDistAlongCline", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName valDistToClineXName = System.Xml.Linq.XName.Get("valDistToCline", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName uomDistHorzXName = System.Xml.Linq.XName.Get("uomDistHorz", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName valBrgThrXName = System.Xml.Linq.XName.Get("valBrgThr", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName txtRmkXName = System.Xml.Linq.XName.Get("txtRmk", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName sourceXName = System.Xml.Linq.XName.Get("source", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("FatoDirectionObstacleType", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator FatoDirectionObstacleType(XElement xe) { return XTypedServices.ToXTypedElement<FatoDirectionObstacleType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static FatoDirectionObstacleType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(FdoUidXName), new NamedContentModelEntity(codeTypeOpsXName), new NamedContentModelEntity(valDistThrXName), new NamedContentModelEntity(valDistAlongClineXName), new NamedContentModelEntity(valDistToClineXName), new NamedContentModelEntity(uomDistHorzXName), new NamedContentModelEntity(valBrgThrXName), new NamedContentModelEntity(txtRmkXName));
        }
        
        /// <summary>
        /// <para>
        /// Obstacle for FATO direction
        /// </para>
        /// <para>
        /// Regular expression: (FdoUid, codeTypeOps?, valDistThr?, valDistAlongCline?, valDistToCline?, uomDistHorz?, valBrgThr?, txtRmk?)
        /// </para>
        /// </summary>
        public FatoDirectionObstacleType() {
        }
        
        /// <summary>
        /// <para>
        /// a version of Obstacle for FATO direction
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (FdoUid, codeTypeOps?, valDistThr?, valDistAlongCline?, valDistToCline?, uomDistHorz?, valBrgThr?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual FatoDirectionObstacleUidType FdoUid {
            get {
                XElement x = this.GetElement(FdoUidXName);
                return ((FatoDirectionObstacleUidType)(x));
            }
            set {
                this.SetElement(FdoUidXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Operations affected
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (FdoUid, codeTypeOps?, valDistThr?, valDistAlongCline?, valDistToCline?, uomDistHorz?, valBrgThr?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual codeTypeOpsRwy codeTypeOps {
            get {
                XElement x = this.GetElement(codeTypeOpsXName);
                return ((codeTypeOpsRwy)(x));
            }
            set {
                this.SetElement(codeTypeOpsXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Obstacle distance to threshold
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (FdoUid, codeTypeOps?, valDistThr?, valDistAlongCline?, valDistToCline?, uomDistHorz?, valBrgThr?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual valDistHorz valDistThr {
            get {
                XElement x = this.GetElement(valDistThrXName);
                return ((valDistHorz)(x));
            }
            set {
                this.SetElement(valDistThrXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Obstacle distance along the center line
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (FdoUid, codeTypeOps?, valDistThr?, valDistAlongCline?, valDistToCline?, uomDistHorz?, valBrgThr?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual valDistHorz valDistAlongCline {
            get {
                XElement x = this.GetElement(valDistAlongClineXName);
                return ((valDistHorz)(x));
            }
            set {
                this.SetElement(valDistAlongClineXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Obstacle distance to the center line
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (FdoUid, codeTypeOps?, valDistThr?, valDistAlongCline?, valDistToCline?, uomDistHorz?, valBrgThr?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual valDistHorz valDistToCline {
            get {
                XElement x = this.GetElement(valDistToClineXName);
                return ((valDistHorz)(x));
            }
            set {
                this.SetElement(valDistToClineXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Unit of measurement [horizontal distance]
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (FdoUid, codeTypeOps?, valDistThr?, valDistAlongCline?, valDistToCline?, uomDistHorz?, valBrgThr?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual uomDistHorz uomDistHorz {
            get {
                XElement x = this.GetElement(uomDistHorzXName);
                return ((uomDistHorz)(x));
            }
            set {
                this.SetElement(uomDistHorzXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Magnetic bearing
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (FdoUid, codeTypeOps?, valDistThr?, valDistAlongCline?, valDistToCline?, uomDistHorz?, valBrgThr?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual valAngleBrg valBrgThr {
            get {
                XElement x = this.GetElement(valBrgThrXName);
                return ((valAngleBrg)(x));
            }
            set {
                this.SetElement(valBrgThrXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Remark
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (FdoUid, codeTypeOps?, valDistThr?, valDistAlongCline?, valDistToCline?, uomDistHorz?, valBrgThr?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual txtRmk txtRmk {
            get {
                XElement x = this.GetElement(txtRmkXName);
                return ((txtRmk)(x));
            }
            set {
                this.SetElement(txtRmkXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string source {
            get {
                XAttribute x = this.Attribute(sourceXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(sourceXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<FatoDirectionObstacleType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(FdoUidXName, typeof(FatoDirectionObstacleUidType));
            localElementDictionary.Add(codeTypeOpsXName, typeof(codeTypeOpsRwy));
            localElementDictionary.Add(valDistThrXName, typeof(valDistHorz));
            localElementDictionary.Add(valDistAlongClineXName, typeof(valDistHorz));
            localElementDictionary.Add(valDistToClineXName, typeof(valDistHorz));
            localElementDictionary.Add(uomDistHorzXName, typeof(uomDistHorz));
            localElementDictionary.Add(valBrgThrXName, typeof(valAngleBrg));
            localElementDictionary.Add(txtRmkXName, typeof(txtRmk));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Obstacle for FATO direction - UID
    /// </para>
    /// <para>
    /// Regular expression: (ObsUid, FdnUid)
    /// </para>
    /// </summary>
    public partial class FatoDirectionObstacleUidType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ObsUidXName = System.Xml.Linq.XName.Get("ObsUid", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName FdnUidXName = System.Xml.Linq.XName.Get("FdnUid", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName midXName = System.Xml.Linq.XName.Get("mid", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("FatoDirectionObstacleUidType", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator FatoDirectionObstacleUidType(XElement xe) { return XTypedServices.ToXTypedElement<FatoDirectionObstacleUidType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static FatoDirectionObstacleUidType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(ObsUidXName), new NamedContentModelEntity(FdnUidXName));
        }
        
        /// <summary>
        /// <para>
        /// Obstacle for FATO direction - UID
        /// </para>
        /// <para>
        /// Regular expression: (ObsUid, FdnUid)
        /// </para>
        /// </summary>
        public FatoDirectionObstacleUidType() {
        }
        
        /// <summary>
        /// <para>
        /// Obstacle for FATO direction is also Obstacle
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (ObsUid, FdnUid)
        /// </para>
        /// </summary>
        public virtual ObstacleUidType ObsUid {
            get {
                XElement x = this.GetElement(ObsUidXName);
                return ((ObstacleUidType)(x));
            }
            set {
                this.SetElement(ObsUidXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Obstacle for FATO direction is affecting Approach and take-off direction of a FATO
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (ObsUid, FdnUid)
        /// </para>
        /// </summary>
        public virtual FatoDirectionUidType FdnUid {
            get {
                XElement x = this.GetElement(FdnUidXName);
                return ((FatoDirectionUidType)(x));
            }
            set {
                this.SetElement(FdnUidXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string mid {
            get {
                XAttribute x = this.Attribute(midXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(midXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<FatoDirectionObstacleUidType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(ObsUidXName, typeof(ObstacleUidType));
            localElementDictionary.Add(FdnUidXName, typeof(FatoDirectionUidType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// FATO direction STAR
    /// </para>
    /// <para>
    /// Regular expression: (FdsUid, txtRmk?)
    /// </para>
    /// </summary>
    public partial class FatoDirectionStarType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName FdsUidXName = System.Xml.Linq.XName.Get("FdsUid", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName txtRmkXName = System.Xml.Linq.XName.Get("txtRmk", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName sourceXName = System.Xml.Linq.XName.Get("source", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("FatoDirectionStarType", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator FatoDirectionStarType(XElement xe) { return XTypedServices.ToXTypedElement<FatoDirectionStarType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static FatoDirectionStarType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(FdsUidXName), new NamedContentModelEntity(txtRmkXName));
        }
        
        /// <summary>
        /// <para>
        /// FATO direction STAR
        /// </para>
        /// <para>
        /// Regular expression: (FdsUid, txtRmk?)
        /// </para>
        /// </summary>
        public FatoDirectionStarType() {
        }
        
        /// <summary>
        /// <para>
        /// a version of FATO direction STAR
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (FdsUid, txtRmk?)
        /// </para>
        /// </summary>
        public virtual FatoDirectionStarUidType FdsUid {
            get {
                XElement x = this.GetElement(FdsUidXName);
                return ((FatoDirectionStarUidType)(x));
            }
            set {
                this.SetElement(FdsUidXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Remark
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (FdsUid, txtRmk?)
        /// </para>
        /// </summary>
        public virtual txtRmk txtRmk {
            get {
                XElement x = this.GetElement(txtRmkXName);
                return ((txtRmk)(x));
            }
            set {
                this.SetElement(txtRmkXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string source {
            get {
                XAttribute x = this.Attribute(sourceXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(sourceXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<FatoDirectionStarType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(FdsUidXName, typeof(FatoDirectionStarUidType));
            localElementDictionary.Add(txtRmkXName, typeof(txtRmk));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// FATO direction STAR - UID
    /// </para>
    /// <para>
    /// Regular expression: (SiaUid, FdnUid)
    /// </para>
    /// </summary>
    public partial class FatoDirectionStarUidType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName SiaUidXName = System.Xml.Linq.XName.Get("SiaUid", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName FdnUidXName = System.Xml.Linq.XName.Get("FdnUid", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName midXName = System.Xml.Linq.XName.Get("mid", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("FatoDirectionStarUidType", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator FatoDirectionStarUidType(XElement xe) { return XTypedServices.ToXTypedElement<FatoDirectionStarUidType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static FatoDirectionStarUidType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(SiaUidXName), new NamedContentModelEntity(FdnUidXName));
        }
        
        /// <summary>
        /// <para>
        /// FATO direction STAR - UID
        /// </para>
        /// <para>
        /// Regular expression: (SiaUid, FdnUid)
        /// </para>
        /// </summary>
        public FatoDirectionStarUidType() {
        }
        
        /// <summary>
        /// <para>
        /// FATO direction STAR is also Standard instrument arrival [STAR]
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (SiaUid, FdnUid)
        /// </para>
        /// </summary>
        public virtual StarUidType SiaUid {
            get {
                XElement x = this.GetElement(SiaUidXName);
                return ((StarUidType)(x));
            }
            set {
                this.SetElement(SiaUidXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// FATO direction STAR is for Approach and take-off direction of a FATO
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (SiaUid, FdnUid)
        /// </para>
        /// </summary>
        public virtual FatoDirectionUidType FdnUid {
            get {
                XElement x = this.GetElement(FdnUidXName);
                return ((FatoDirectionUidType)(x));
            }
            set {
                this.SetElement(FdnUidXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string mid {
            get {
                XAttribute x = this.Attribute(midXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(midXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<FatoDirectionStarUidType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(SiaUidXName, typeof(StarUidType));
            localElementDictionary.Add(FdnUidXName, typeof(FatoDirectionUidType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Approach and take-off direction of a FATO
    /// </para>
    /// <para>
    /// Regular expression: (FdnUid, geoLat?, geoLong?, valTrueBrg?, valMagBrg?, codeTypeVasis?, codePsnVasis?, noBoxVasis?, codePortableVasis?, txtDescrPsnVasis?, valSlopeAngleGpVasis?, valMeht?, uomMeht?, codeRearTakeOffSectorAvbl?, valRearTakeOffSectorTrueBrg?, valRearTakeOffSectorSlopeAngle?, codeCodingMode?, geoLatIap?, geoLongIap?, valAltIap?, uomAltIap?, valMaxSectorLen?, uomMaxSectorLen?, valSlopeAngle?, valOpeningAngle?, bezierSectorExtent?, bezierSectorCentreLine?, codeDistVerAppDecision?, valDistVerAppDecision?, uomDistVerAppDecision?, txtRmk?)
    /// </para>
    /// </summary>
    public partial class FatoDirectionType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName FdnUidXName = System.Xml.Linq.XName.Get("FdnUid", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName geoLatXName = System.Xml.Linq.XName.Get("geoLat", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName geoLongXName = System.Xml.Linq.XName.Get("geoLong", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName valTrueBrgXName = System.Xml.Linq.XName.Get("valTrueBrg", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName valMagBrgXName = System.Xml.Linq.XName.Get("valMagBrg", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName codeTypeVasisXName = System.Xml.Linq.XName.Get("codeTypeVasis", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName codePsnVasisXName = System.Xml.Linq.XName.Get("codePsnVasis", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName noBoxVasisXName = System.Xml.Linq.XName.Get("noBoxVasis", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName codePortableVasisXName = System.Xml.Linq.XName.Get("codePortableVasis", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName txtDescrPsnVasisXName = System.Xml.Linq.XName.Get("txtDescrPsnVasis", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName valSlopeAngleGpVasisXName = System.Xml.Linq.XName.Get("valSlopeAngleGpVasis", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName valMehtXName = System.Xml.Linq.XName.Get("valMeht", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName uomMehtXName = System.Xml.Linq.XName.Get("uomMeht", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName codeRearTakeOffSectorAvblXName = System.Xml.Linq.XName.Get("codeRearTakeOffSectorAvbl", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName valRearTakeOffSectorTrueBrgXName = System.Xml.Linq.XName.Get("valRearTakeOffSectorTrueBrg", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName valRearTakeOffSectorSlopeAngleXName = System.Xml.Linq.XName.Get("valRearTakeOffSectorSlopeAngle", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName codeCodingModeXName = System.Xml.Linq.XName.Get("codeCodingMode", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName geoLatIapXName = System.Xml.Linq.XName.Get("geoLatIap", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName geoLongIapXName = System.Xml.Linq.XName.Get("geoLongIap", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName valAltIapXName = System.Xml.Linq.XName.Get("valAltIap", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName uomAltIapXName = System.Xml.Linq.XName.Get("uomAltIap", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName valMaxSectorLenXName = System.Xml.Linq.XName.Get("valMaxSectorLen", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName uomMaxSectorLenXName = System.Xml.Linq.XName.Get("uomMaxSectorLen", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName valSlopeAngleXName = System.Xml.Linq.XName.Get("valSlopeAngle", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName valOpeningAngleXName = System.Xml.Linq.XName.Get("valOpeningAngle", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName bezierSectorExtentXName = System.Xml.Linq.XName.Get("bezierSectorExtent", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName bezierSectorCentreLineXName = System.Xml.Linq.XName.Get("bezierSectorCentreLine", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName codeDistVerAppDecisionXName = System.Xml.Linq.XName.Get("codeDistVerAppDecision", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName valDistVerAppDecisionXName = System.Xml.Linq.XName.Get("valDistVerAppDecision", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName uomDistVerAppDecisionXName = System.Xml.Linq.XName.Get("uomDistVerAppDecision", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName txtRmkXName = System.Xml.Linq.XName.Get("txtRmk", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName sourceXName = System.Xml.Linq.XName.Get("source", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("FatoDirectionType", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator FatoDirectionType(XElement xe) { return XTypedServices.ToXTypedElement<FatoDirectionType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static FatoDirectionType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(FdnUidXName), new NamedContentModelEntity(geoLatXName), new NamedContentModelEntity(geoLongXName), new NamedContentModelEntity(valTrueBrgXName), new NamedContentModelEntity(valMagBrgXName), new NamedContentModelEntity(codeTypeVasisXName), new NamedContentModelEntity(codePsnVasisXName), new NamedContentModelEntity(noBoxVasisXName), new NamedContentModelEntity(codePortableVasisXName), new NamedContentModelEntity(txtDescrPsnVasisXName), new NamedContentModelEntity(valSlopeAngleGpVasisXName), new NamedContentModelEntity(valMehtXName), new NamedContentModelEntity(uomMehtXName), new NamedContentModelEntity(codeRearTakeOffSectorAvblXName), new NamedContentModelEntity(valRearTakeOffSectorTrueBrgXName), new NamedContentModelEntity(valRearTakeOffSectorSlopeAngleXName), new NamedContentModelEntity(codeCodingModeXName), new NamedContentModelEntity(geoLatIapXName), new NamedContentModelEntity(geoLongIapXName), new NamedContentModelEntity(valAltIapXName), new NamedContentModelEntity(uomAltIapXName), new NamedContentModelEntity(valMaxSectorLenXName), new NamedContentModelEntity(uomMaxSectorLenXName), new NamedContentModelEntity(valSlopeAngleXName), new NamedContentModelEntity(valOpeningAngleXName), new NamedContentModelEntity(bezierSectorExtentXName), new NamedContentModelEntity(bezierSectorCentreLineXName), new NamedContentModelEntity(codeDistVerAppDecisionXName), new NamedContentModelEntity(valDistVerAppDecisionXName), new NamedContentModelEntity(uomDistVerAppDecisionXName), new NamedContentModelEntity(txtRmkXName));
        }
        
        /// <summary>
        /// <para>
        /// Approach and take-off direction of a FATO
        /// </para>
        /// <para>
        /// Regular expression: (FdnUid, geoLat?, geoLong?, valTrueBrg?, valMagBrg?, codeTypeVasis?, codePsnVasis?, noBoxVasis?, codePortableVasis?, txtDescrPsnVasis?, valSlopeAngleGpVasis?, valMeht?, uomMeht?, codeRearTakeOffSectorAvbl?, valRearTakeOffSectorTrueBrg?, valRearTakeOffSectorSlopeAngle?, codeCodingMode?, geoLatIap?, geoLongIap?, valAltIap?, uomAltIap?, valMaxSectorLen?, uomMaxSectorLen?, valSlopeAngle?, valOpeningAngle?, bezierSectorExtent?, bezierSectorCentreLine?, codeDistVerAppDecision?, valDistVerAppDecision?, uomDistVerAppDecision?, txtRmk?)
        /// </para>
        /// </summary>
        public FatoDirectionType() {
        }
        
        /// <summary>
        /// <para>
        /// Approach and take-off direction of a FATO is a version of Approach and take-off direction of a FATO
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (FdnUid, geoLat?, geoLong?, valTrueBrg?, valMagBrg?, codeTypeVasis?, codePsnVasis?, noBoxVasis?, codePortableVasis?, txtDescrPsnVasis?, valSlopeAngleGpVasis?, valMeht?, uomMeht?, codeRearTakeOffSectorAvbl?, valRearTakeOffSectorTrueBrg?, valRearTakeOffSectorSlopeAngle?, codeCodingMode?, geoLatIap?, geoLongIap?, valAltIap?, uomAltIap?, valMaxSectorLen?, uomMaxSectorLen?, valSlopeAngle?, valOpeningAngle?, bezierSectorExtent?, bezierSectorCentreLine?, codeDistVerAppDecision?, valDistVerAppDecision?, uomDistVerAppDecision?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual FatoDirectionUidType FdnUid {
            get {
                XElement x = this.GetElement(FdnUidXName);
                return ((FatoDirectionUidType)(x));
            }
            set {
                this.SetElement(FdnUidXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Threshold latitude
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (FdnUid, geoLat?, geoLong?, valTrueBrg?, valMagBrg?, codeTypeVasis?, codePsnVasis?, noBoxVasis?, codePortableVasis?, txtDescrPsnVasis?, valSlopeAngleGpVasis?, valMeht?, uomMeht?, codeRearTakeOffSectorAvbl?, valRearTakeOffSectorTrueBrg?, valRearTakeOffSectorSlopeAngle?, codeCodingMode?, geoLatIap?, geoLongIap?, valAltIap?, uomAltIap?, valMaxSectorLen?, uomMaxSectorLen?, valSlopeAngle?, valOpeningAngle?, bezierSectorExtent?, bezierSectorCentreLine?, codeDistVerAppDecision?, valDistVerAppDecision?, uomDistVerAppDecision?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual geoLat geoLat {
            get {
                XElement x = this.GetElement(geoLatXName);
                return ((geoLat)(x));
            }
            set {
                this.SetElement(geoLatXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Threshold longitude
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (FdnUid, geoLat?, geoLong?, valTrueBrg?, valMagBrg?, codeTypeVasis?, codePsnVasis?, noBoxVasis?, codePortableVasis?, txtDescrPsnVasis?, valSlopeAngleGpVasis?, valMeht?, uomMeht?, codeRearTakeOffSectorAvbl?, valRearTakeOffSectorTrueBrg?, valRearTakeOffSectorSlopeAngle?, codeCodingMode?, geoLatIap?, geoLongIap?, valAltIap?, uomAltIap?, valMaxSectorLen?, uomMaxSectorLen?, valSlopeAngle?, valOpeningAngle?, bezierSectorExtent?, bezierSectorCentreLine?, codeDistVerAppDecision?, valDistVerAppDecision?, uomDistVerAppDecision?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual geoLong geoLong {
            get {
                XElement x = this.GetElement(geoLongXName);
                return ((geoLong)(x));
            }
            set {
                this.SetElement(geoLongXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// True bearing
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (FdnUid, geoLat?, geoLong?, valTrueBrg?, valMagBrg?, codeTypeVasis?, codePsnVasis?, noBoxVasis?, codePortableVasis?, txtDescrPsnVasis?, valSlopeAngleGpVasis?, valMeht?, uomMeht?, codeRearTakeOffSectorAvbl?, valRearTakeOffSectorTrueBrg?, valRearTakeOffSectorSlopeAngle?, codeCodingMode?, geoLatIap?, geoLongIap?, valAltIap?, uomAltIap?, valMaxSectorLen?, uomMaxSectorLen?, valSlopeAngle?, valOpeningAngle?, bezierSectorExtent?, bezierSectorCentreLine?, codeDistVerAppDecision?, valDistVerAppDecision?, uomDistVerAppDecision?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual valAngleBrg valTrueBrg {
            get {
                XElement x = this.GetElement(valTrueBrgXName);
                return ((valAngleBrg)(x));
            }
            set {
                this.SetElement(valTrueBrgXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Magnetic bearing
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (FdnUid, geoLat?, geoLong?, valTrueBrg?, valMagBrg?, codeTypeVasis?, codePsnVasis?, noBoxVasis?, codePortableVasis?, txtDescrPsnVasis?, valSlopeAngleGpVasis?, valMeht?, uomMeht?, codeRearTakeOffSectorAvbl?, valRearTakeOffSectorTrueBrg?, valRearTakeOffSectorSlopeAngle?, codeCodingMode?, geoLatIap?, geoLongIap?, valAltIap?, uomAltIap?, valMaxSectorLen?, uomMaxSectorLen?, valSlopeAngle?, valOpeningAngle?, bezierSectorExtent?, bezierSectorCentreLine?, codeDistVerAppDecision?, valDistVerAppDecision?, uomDistVerAppDecision?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual valAngleBrg valMagBrg {
            get {
                XElement x = this.GetElement(valMagBrgXName);
                return ((valAngleBrg)(x));
            }
            set {
                this.SetElement(valMagBrgXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Type
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (FdnUid, geoLat?, geoLong?, valTrueBrg?, valMagBrg?, codeTypeVasis?, codePsnVasis?, noBoxVasis?, codePortableVasis?, txtDescrPsnVasis?, valSlopeAngleGpVasis?, valMeht?, uomMeht?, codeRearTakeOffSectorAvbl?, valRearTakeOffSectorTrueBrg?, valRearTakeOffSectorSlopeAngle?, codeCodingMode?, geoLatIap?, geoLongIap?, valAltIap?, uomAltIap?, valMaxSectorLen?, uomMaxSectorLen?, valSlopeAngle?, valOpeningAngle?, bezierSectorExtent?, bezierSectorCentreLine?, codeDistVerAppDecision?, valDistVerAppDecision?, uomDistVerAppDecision?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual codeTypeVasis codeTypeVasis {
            get {
                XElement x = this.GetElement(codeTypeVasisXName);
                return ((codeTypeVasis)(x));
            }
            set {
                this.SetElement(codeTypeVasisXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Vasis position
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (FdnUid, geoLat?, geoLong?, valTrueBrg?, valMagBrg?, codeTypeVasis?, codePsnVasis?, noBoxVasis?, codePortableVasis?, txtDescrPsnVasis?, valSlopeAngleGpVasis?, valMeht?, uomMeht?, codeRearTakeOffSectorAvbl?, valRearTakeOffSectorTrueBrg?, valRearTakeOffSectorSlopeAngle?, codeCodingMode?, geoLatIap?, geoLongIap?, valAltIap?, uomAltIap?, valMaxSectorLen?, uomMaxSectorLen?, valSlopeAngle?, valOpeningAngle?, bezierSectorExtent?, bezierSectorCentreLine?, codeDistVerAppDecision?, valDistVerAppDecision?, uomDistVerAppDecision?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual codePsnRelAxis codePsnVasis {
            get {
                XElement x = this.GetElement(codePsnVasisXName);
                return ((codePsnRelAxis)(x));
            }
            set {
                this.SetElement(codePsnVasisXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// VASIS number of boxes
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (FdnUid, geoLat?, geoLong?, valTrueBrg?, valMagBrg?, codeTypeVasis?, codePsnVasis?, noBoxVasis?, codePortableVasis?, txtDescrPsnVasis?, valSlopeAngleGpVasis?, valMeht?, uomMeht?, codeRearTakeOffSectorAvbl?, valRearTakeOffSectorTrueBrg?, valRearTakeOffSectorSlopeAngle?, codeCodingMode?, geoLatIap?, geoLongIap?, valAltIap?, uomAltIap?, valMaxSectorLen?, uomMaxSectorLen?, valSlopeAngle?, valOpeningAngle?, bezierSectorExtent?, bezierSectorCentreLine?, codeDistVerAppDecision?, valDistVerAppDecision?, uomDistVerAppDecision?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual noNumber noBoxVasis {
            get {
                XElement x = this.GetElement(noBoxVasisXName);
                return ((noNumber)(x));
            }
            set {
                this.SetElement(noBoxVasisXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Portable VASIS
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (FdnUid, geoLat?, geoLong?, valTrueBrg?, valMagBrg?, codeTypeVasis?, codePsnVasis?, noBoxVasis?, codePortableVasis?, txtDescrPsnVasis?, valSlopeAngleGpVasis?, valMeht?, uomMeht?, codeRearTakeOffSectorAvbl?, valRearTakeOffSectorTrueBrg?, valRearTakeOffSectorSlopeAngle?, codeCodingMode?, geoLatIap?, geoLongIap?, valAltIap?, uomAltIap?, valMaxSectorLen?, uomMaxSectorLen?, valSlopeAngle?, valOpeningAngle?, bezierSectorExtent?, bezierSectorCentreLine?, codeDistVerAppDecision?, valDistVerAppDecision?, uomDistVerAppDecision?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual codeYesNo codePortableVasis {
            get {
                XElement x = this.GetElement(codePortableVasisXName);
                return ((codeYesNo)(x));
            }
            set {
                this.SetElement(codePortableVasisXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// [Deprecated] VASIS position description
        /// </para>
        /// <para>
        /// DEPRECATED-4.5
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (FdnUid, geoLat?, geoLong?, valTrueBrg?, valMagBrg?, codeTypeVasis?, codePsnVasis?, noBoxVasis?, codePortableVasis?, txtDescrPsnVasis?, valSlopeAngleGpVasis?, valMeht?, uomMeht?, codeRearTakeOffSectorAvbl?, valRearTakeOffSectorTrueBrg?, valRearTakeOffSectorSlopeAngle?, codeCodingMode?, geoLatIap?, geoLongIap?, valAltIap?, uomAltIap?, valMaxSectorLen?, uomMaxSectorLen?, valSlopeAngle?, valOpeningAngle?, bezierSectorExtent?, bezierSectorCentreLine?, codeDistVerAppDecision?, valDistVerAppDecision?, uomDistVerAppDecision?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual txtDescr txtDescrPsnVasis {
            get {
                XElement x = this.GetElement(txtDescrPsnVasisXName);
                return ((txtDescr)(x));
            }
            set {
                this.SetElement(txtDescrPsnVasisXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// VASIS slope angle
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (FdnUid, geoLat?, geoLong?, valTrueBrg?, valMagBrg?, codeTypeVasis?, codePsnVasis?, noBoxVasis?, codePortableVasis?, txtDescrPsnVasis?, valSlopeAngleGpVasis?, valMeht?, uomMeht?, codeRearTakeOffSectorAvbl?, valRearTakeOffSectorTrueBrg?, valRearTakeOffSectorSlopeAngle?, codeCodingMode?, geoLatIap?, geoLongIap?, valAltIap?, uomAltIap?, valMaxSectorLen?, uomMaxSectorLen?, valSlopeAngle?, valOpeningAngle?, bezierSectorExtent?, bezierSectorCentreLine?, codeDistVerAppDecision?, valDistVerAppDecision?, uomDistVerAppDecision?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual valAngle valSlopeAngleGpVasis {
            get {
                XElement x = this.GetElement(valSlopeAngleGpVasisXName);
                return ((valAngle)(x));
            }
            set {
                this.SetElement(valSlopeAngleGpVasisXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Minimun eye height over threshold
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (FdnUid, geoLat?, geoLong?, valTrueBrg?, valMagBrg?, codeTypeVasis?, codePsnVasis?, noBoxVasis?, codePortableVasis?, txtDescrPsnVasis?, valSlopeAngleGpVasis?, valMeht?, uomMeht?, codeRearTakeOffSectorAvbl?, valRearTakeOffSectorTrueBrg?, valRearTakeOffSectorSlopeAngle?, codeCodingMode?, geoLatIap?, geoLongIap?, valAltIap?, uomAltIap?, valMaxSectorLen?, uomMaxSectorLen?, valSlopeAngle?, valOpeningAngle?, bezierSectorExtent?, bezierSectorCentreLine?, codeDistVerAppDecision?, valDistVerAppDecision?, uomDistVerAppDecision?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual valDistHorz valMeht {
            get {
                XElement x = this.GetElement(valMehtXName);
                return ((valDistHorz)(x));
            }
            set {
                this.SetElement(valMehtXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Unit of measurement [minimum eye height over threshold]
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (FdnUid, geoLat?, geoLong?, valTrueBrg?, valMagBrg?, codeTypeVasis?, codePsnVasis?, noBoxVasis?, codePortableVasis?, txtDescrPsnVasis?, valSlopeAngleGpVasis?, valMeht?, uomMeht?, codeRearTakeOffSectorAvbl?, valRearTakeOffSectorTrueBrg?, valRearTakeOffSectorSlopeAngle?, codeCodingMode?, geoLatIap?, geoLongIap?, valAltIap?, uomAltIap?, valMaxSectorLen?, uomMaxSectorLen?, valSlopeAngle?, valOpeningAngle?, bezierSectorExtent?, bezierSectorCentreLine?, codeDistVerAppDecision?, valDistVerAppDecision?, uomDistVerAppDecision?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual uomDistHorz uomMeht {
            get {
                XElement x = this.GetElement(uomMehtXName);
                return ((uomDistHorz)(x));
            }
            set {
                this.SetElement(uomMehtXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Rear take-off sector available?
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (FdnUid, geoLat?, geoLong?, valTrueBrg?, valMagBrg?, codeTypeVasis?, codePsnVasis?, noBoxVasis?, codePortableVasis?, txtDescrPsnVasis?, valSlopeAngleGpVasis?, valMeht?, uomMeht?, codeRearTakeOffSectorAvbl?, valRearTakeOffSectorTrueBrg?, valRearTakeOffSectorSlopeAngle?, codeCodingMode?, geoLatIap?, geoLongIap?, valAltIap?, uomAltIap?, valMaxSectorLen?, uomMaxSectorLen?, valSlopeAngle?, valOpeningAngle?, bezierSectorExtent?, bezierSectorCentreLine?, codeDistVerAppDecision?, valDistVerAppDecision?, uomDistVerAppDecision?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual codeYesNo codeRearTakeOffSectorAvbl {
            get {
                XElement x = this.GetElement(codeRearTakeOffSectorAvblXName);
                return ((codeYesNo)(x));
            }
            set {
                this.SetElement(codeRearTakeOffSectorAvblXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// True bearing of rear take-off sector
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (FdnUid, geoLat?, geoLong?, valTrueBrg?, valMagBrg?, codeTypeVasis?, codePsnVasis?, noBoxVasis?, codePortableVasis?, txtDescrPsnVasis?, valSlopeAngleGpVasis?, valMeht?, uomMeht?, codeRearTakeOffSectorAvbl?, valRearTakeOffSectorTrueBrg?, valRearTakeOffSectorSlopeAngle?, codeCodingMode?, geoLatIap?, geoLongIap?, valAltIap?, uomAltIap?, valMaxSectorLen?, uomMaxSectorLen?, valSlopeAngle?, valOpeningAngle?, bezierSectorExtent?, bezierSectorCentreLine?, codeDistVerAppDecision?, valDistVerAppDecision?, uomDistVerAppDecision?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual valAngleBrg valRearTakeOffSectorTrueBrg {
            get {
                XElement x = this.GetElement(valRearTakeOffSectorTrueBrgXName);
                return ((valAngleBrg)(x));
            }
            set {
                this.SetElement(valRearTakeOffSectorTrueBrgXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Rear take-off sector slope angle
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (FdnUid, geoLat?, geoLong?, valTrueBrg?, valMagBrg?, codeTypeVasis?, codePsnVasis?, noBoxVasis?, codePortableVasis?, txtDescrPsnVasis?, valSlopeAngleGpVasis?, valMeht?, uomMeht?, codeRearTakeOffSectorAvbl?, valRearTakeOffSectorTrueBrg?, valRearTakeOffSectorSlopeAngle?, codeCodingMode?, geoLatIap?, geoLongIap?, valAltIap?, uomAltIap?, valMaxSectorLen?, uomMaxSectorLen?, valSlopeAngle?, valOpeningAngle?, bezierSectorExtent?, bezierSectorCentreLine?, codeDistVerAppDecision?, valDistVerAppDecision?, uomDistVerAppDecision?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual valAngle valRearTakeOffSectorSlopeAngle {
            get {
                XElement x = this.GetElement(valRearTakeOffSectorSlopeAngleXName);
                return ((valAngle)(x));
            }
            set {
                this.SetElement(valRearTakeOffSectorSlopeAngleXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Coding mode
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (FdnUid, geoLat?, geoLong?, valTrueBrg?, valMagBrg?, codeTypeVasis?, codePsnVasis?, noBoxVasis?, codePortableVasis?, txtDescrPsnVasis?, valSlopeAngleGpVasis?, valMeht?, uomMeht?, codeRearTakeOffSectorAvbl?, valRearTakeOffSectorTrueBrg?, valRearTakeOffSectorSlopeAngle?, codeCodingMode?, geoLatIap?, geoLongIap?, valAltIap?, uomAltIap?, valMaxSectorLen?, uomMaxSectorLen?, valSlopeAngle?, valOpeningAngle?, bezierSectorExtent?, bezierSectorCentreLine?, codeDistVerAppDecision?, valDistVerAppDecision?, uomDistVerAppDecision?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual codeCodingMode codeCodingMode {
            get {
                XElement x = this.GetElement(codeCodingModeXName);
                return ((codeCodingMode)(x));
            }
            set {
                this.SetElement(codeCodingModeXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Initial approach point latitude
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (FdnUid, geoLat?, geoLong?, valTrueBrg?, valMagBrg?, codeTypeVasis?, codePsnVasis?, noBoxVasis?, codePortableVasis?, txtDescrPsnVasis?, valSlopeAngleGpVasis?, valMeht?, uomMeht?, codeRearTakeOffSectorAvbl?, valRearTakeOffSectorTrueBrg?, valRearTakeOffSectorSlopeAngle?, codeCodingMode?, geoLatIap?, geoLongIap?, valAltIap?, uomAltIap?, valMaxSectorLen?, uomMaxSectorLen?, valSlopeAngle?, valOpeningAngle?, bezierSectorExtent?, bezierSectorCentreLine?, codeDistVerAppDecision?, valDistVerAppDecision?, uomDistVerAppDecision?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual geoLat geoLatIap {
            get {
                XElement x = this.GetElement(geoLatIapXName);
                return ((geoLat)(x));
            }
            set {
                this.SetElement(geoLatIapXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Initial approach point longitude
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (FdnUid, geoLat?, geoLong?, valTrueBrg?, valMagBrg?, codeTypeVasis?, codePsnVasis?, noBoxVasis?, codePortableVasis?, txtDescrPsnVasis?, valSlopeAngleGpVasis?, valMeht?, uomMeht?, codeRearTakeOffSectorAvbl?, valRearTakeOffSectorTrueBrg?, valRearTakeOffSectorSlopeAngle?, codeCodingMode?, geoLatIap?, geoLongIap?, valAltIap?, uomAltIap?, valMaxSectorLen?, uomMaxSectorLen?, valSlopeAngle?, valOpeningAngle?, bezierSectorExtent?, bezierSectorCentreLine?, codeDistVerAppDecision?, valDistVerAppDecision?, uomDistVerAppDecision?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual geoLong geoLongIap {
            get {
                XElement x = this.GetElement(geoLongIapXName);
                return ((geoLong)(x));
            }
            set {
                this.SetElement(geoLongIapXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Initial approach point altitude
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (FdnUid, geoLat?, geoLong?, valTrueBrg?, valMagBrg?, codeTypeVasis?, codePsnVasis?, noBoxVasis?, codePortableVasis?, txtDescrPsnVasis?, valSlopeAngleGpVasis?, valMeht?, uomMeht?, codeRearTakeOffSectorAvbl?, valRearTakeOffSectorTrueBrg?, valRearTakeOffSectorSlopeAngle?, codeCodingMode?, geoLatIap?, geoLongIap?, valAltIap?, uomAltIap?, valMaxSectorLen?, uomMaxSectorLen?, valSlopeAngle?, valOpeningAngle?, bezierSectorExtent?, bezierSectorCentreLine?, codeDistVerAppDecision?, valDistVerAppDecision?, uomDistVerAppDecision?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual valDistVer valAltIap {
            get {
                XElement x = this.GetElement(valAltIapXName);
                return ((valDistVer)(x));
            }
            set {
                this.SetElement(valAltIapXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Unit of measurement [initial approach point altitude]
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (FdnUid, geoLat?, geoLong?, valTrueBrg?, valMagBrg?, codeTypeVasis?, codePsnVasis?, noBoxVasis?, codePortableVasis?, txtDescrPsnVasis?, valSlopeAngleGpVasis?, valMeht?, uomMeht?, codeRearTakeOffSectorAvbl?, valRearTakeOffSectorTrueBrg?, valRearTakeOffSectorSlopeAngle?, codeCodingMode?, geoLatIap?, geoLongIap?, valAltIap?, uomAltIap?, valMaxSectorLen?, uomMaxSectorLen?, valSlopeAngle?, valOpeningAngle?, bezierSectorExtent?, bezierSectorCentreLine?, codeDistVerAppDecision?, valDistVerAppDecision?, uomDistVerAppDecision?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual uomDistVer uomAltIap {
            get {
                XElement x = this.GetElement(uomAltIapXName);
                return ((uomDistVer)(x));
            }
            set {
                this.SetElement(uomAltIapXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Non-standard maximum sector length
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (FdnUid, geoLat?, geoLong?, valTrueBrg?, valMagBrg?, codeTypeVasis?, codePsnVasis?, noBoxVasis?, codePortableVasis?, txtDescrPsnVasis?, valSlopeAngleGpVasis?, valMeht?, uomMeht?, codeRearTakeOffSectorAvbl?, valRearTakeOffSectorTrueBrg?, valRearTakeOffSectorSlopeAngle?, codeCodingMode?, geoLatIap?, geoLongIap?, valAltIap?, uomAltIap?, valMaxSectorLen?, uomMaxSectorLen?, valSlopeAngle?, valOpeningAngle?, bezierSectorExtent?, bezierSectorCentreLine?, codeDistVerAppDecision?, valDistVerAppDecision?, uomDistVerAppDecision?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual valDistHorz valMaxSectorLen {
            get {
                XElement x = this.GetElement(valMaxSectorLenXName);
                return ((valDistHorz)(x));
            }
            set {
                this.SetElement(valMaxSectorLenXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Unit of measurement [non-standard maximum sector length]
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (FdnUid, geoLat?, geoLong?, valTrueBrg?, valMagBrg?, codeTypeVasis?, codePsnVasis?, noBoxVasis?, codePortableVasis?, txtDescrPsnVasis?, valSlopeAngleGpVasis?, valMeht?, uomMeht?, codeRearTakeOffSectorAvbl?, valRearTakeOffSectorTrueBrg?, valRearTakeOffSectorSlopeAngle?, codeCodingMode?, geoLatIap?, geoLongIap?, valAltIap?, uomAltIap?, valMaxSectorLen?, uomMaxSectorLen?, valSlopeAngle?, valOpeningAngle?, bezierSectorExtent?, bezierSectorCentreLine?, codeDistVerAppDecision?, valDistVerAppDecision?, uomDistVerAppDecision?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual uomDistHorz uomMaxSectorLen {
            get {
                XElement x = this.GetElement(uomMaxSectorLenXName);
                return ((uomDistHorz)(x));
            }
            set {
                this.SetElement(uomMaxSectorLenXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Non-standard slope angle
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (FdnUid, geoLat?, geoLong?, valTrueBrg?, valMagBrg?, codeTypeVasis?, codePsnVasis?, noBoxVasis?, codePortableVasis?, txtDescrPsnVasis?, valSlopeAngleGpVasis?, valMeht?, uomMeht?, codeRearTakeOffSectorAvbl?, valRearTakeOffSectorTrueBrg?, valRearTakeOffSectorSlopeAngle?, codeCodingMode?, geoLatIap?, geoLongIap?, valAltIap?, uomAltIap?, valMaxSectorLen?, uomMaxSectorLen?, valSlopeAngle?, valOpeningAngle?, bezierSectorExtent?, bezierSectorCentreLine?, codeDistVerAppDecision?, valDistVerAppDecision?, uomDistVerAppDecision?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual valAngle valSlopeAngle {
            get {
                XElement x = this.GetElement(valSlopeAngleXName);
                return ((valAngle)(x));
            }
            set {
                this.SetElement(valSlopeAngleXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Non-standard opening angle
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (FdnUid, geoLat?, geoLong?, valTrueBrg?, valMagBrg?, codeTypeVasis?, codePsnVasis?, noBoxVasis?, codePortableVasis?, txtDescrPsnVasis?, valSlopeAngleGpVasis?, valMeht?, uomMeht?, codeRearTakeOffSectorAvbl?, valRearTakeOffSectorTrueBrg?, valRearTakeOffSectorSlopeAngle?, codeCodingMode?, geoLatIap?, geoLongIap?, valAltIap?, uomAltIap?, valMaxSectorLen?, uomMaxSectorLen?, valSlopeAngle?, valOpeningAngle?, bezierSectorExtent?, bezierSectorCentreLine?, codeDistVerAppDecision?, valDistVerAppDecision?, uomDistVerAppDecision?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual valAngle valOpeningAngle {
            get {
                XElement x = this.GetElement(valOpeningAngleXName);
                return ((valAngle)(x));
            }
            set {
                this.SetElement(valOpeningAngleXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Bezier curve describing the sector
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (FdnUid, geoLat?, geoLong?, valTrueBrg?, valMagBrg?, codeTypeVasis?, codePsnVasis?, noBoxVasis?, codePortableVasis?, txtDescrPsnVasis?, valSlopeAngleGpVasis?, valMeht?, uomMeht?, codeRearTakeOffSectorAvbl?, valRearTakeOffSectorTrueBrg?, valRearTakeOffSectorSlopeAngle?, codeCodingMode?, geoLatIap?, geoLongIap?, valAltIap?, uomAltIap?, valMaxSectorLen?, uomMaxSectorLen?, valSlopeAngle?, valOpeningAngle?, bezierSectorExtent?, bezierSectorCentreLine?, codeDistVerAppDecision?, valDistVerAppDecision?, uomDistVerAppDecision?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual bezierCurve bezierSectorExtent {
            get {
                XElement x = this.GetElement(bezierSectorExtentXName);
                return ((bezierCurve)(x));
            }
            set {
                this.SetElement(bezierSectorExtentXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Bezier centre line describing the sector
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (FdnUid, geoLat?, geoLong?, valTrueBrg?, valMagBrg?, codeTypeVasis?, codePsnVasis?, noBoxVasis?, codePortableVasis?, txtDescrPsnVasis?, valSlopeAngleGpVasis?, valMeht?, uomMeht?, codeRearTakeOffSectorAvbl?, valRearTakeOffSectorTrueBrg?, valRearTakeOffSectorSlopeAngle?, codeCodingMode?, geoLatIap?, geoLongIap?, valAltIap?, uomAltIap?, valMaxSectorLen?, uomMaxSectorLen?, valSlopeAngle?, valOpeningAngle?, bezierSectorExtent?, bezierSectorCentreLine?, codeDistVerAppDecision?, valDistVerAppDecision?, uomDistVerAppDecision?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual bezierCurve bezierSectorCentreLine {
            get {
                XElement x = this.GetElement(bezierSectorCentreLineXName);
                return ((bezierCurve)(x));
            }
            set {
                this.SetElement(bezierSectorCentreLineXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Reference for vertical distance for approach decision
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (FdnUid, geoLat?, geoLong?, valTrueBrg?, valMagBrg?, codeTypeVasis?, codePsnVasis?, noBoxVasis?, codePortableVasis?, txtDescrPsnVasis?, valSlopeAngleGpVasis?, valMeht?, uomMeht?, codeRearTakeOffSectorAvbl?, valRearTakeOffSectorTrueBrg?, valRearTakeOffSectorSlopeAngle?, codeCodingMode?, geoLatIap?, geoLongIap?, valAltIap?, uomAltIap?, valMaxSectorLen?, uomMaxSectorLen?, valSlopeAngle?, valOpeningAngle?, bezierSectorExtent?, bezierSectorCentreLine?, codeDistVerAppDecision?, valDistVerAppDecision?, uomDistVerAppDecision?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual codeDistVer codeDistVerAppDecision {
            get {
                XElement x = this.GetElement(codeDistVerAppDecisionXName);
                return ((codeDistVer)(x));
            }
            set {
                this.SetElement(codeDistVerAppDecisionXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Vertical distance for approach decision
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (FdnUid, geoLat?, geoLong?, valTrueBrg?, valMagBrg?, codeTypeVasis?, codePsnVasis?, noBoxVasis?, codePortableVasis?, txtDescrPsnVasis?, valSlopeAngleGpVasis?, valMeht?, uomMeht?, codeRearTakeOffSectorAvbl?, valRearTakeOffSectorTrueBrg?, valRearTakeOffSectorSlopeAngle?, codeCodingMode?, geoLatIap?, geoLongIap?, valAltIap?, uomAltIap?, valMaxSectorLen?, uomMaxSectorLen?, valSlopeAngle?, valOpeningAngle?, bezierSectorExtent?, bezierSectorCentreLine?, codeDistVerAppDecision?, valDistVerAppDecision?, uomDistVerAppDecision?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual valDistVer valDistVerAppDecision {
            get {
                XElement x = this.GetElement(valDistVerAppDecisionXName);
                return ((valDistVer)(x));
            }
            set {
                this.SetElement(valDistVerAppDecisionXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Unit of measurement [vertical distance for approach decision]
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (FdnUid, geoLat?, geoLong?, valTrueBrg?, valMagBrg?, codeTypeVasis?, codePsnVasis?, noBoxVasis?, codePortableVasis?, txtDescrPsnVasis?, valSlopeAngleGpVasis?, valMeht?, uomMeht?, codeRearTakeOffSectorAvbl?, valRearTakeOffSectorTrueBrg?, valRearTakeOffSectorSlopeAngle?, codeCodingMode?, geoLatIap?, geoLongIap?, valAltIap?, uomAltIap?, valMaxSectorLen?, uomMaxSectorLen?, valSlopeAngle?, valOpeningAngle?, bezierSectorExtent?, bezierSectorCentreLine?, codeDistVerAppDecision?, valDistVerAppDecision?, uomDistVerAppDecision?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual uomDistVer uomDistVerAppDecision {
            get {
                XElement x = this.GetElement(uomDistVerAppDecisionXName);
                return ((uomDistVer)(x));
            }
            set {
                this.SetElement(uomDistVerAppDecisionXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Remark
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (FdnUid, geoLat?, geoLong?, valTrueBrg?, valMagBrg?, codeTypeVasis?, codePsnVasis?, noBoxVasis?, codePortableVasis?, txtDescrPsnVasis?, valSlopeAngleGpVasis?, valMeht?, uomMeht?, codeRearTakeOffSectorAvbl?, valRearTakeOffSectorTrueBrg?, valRearTakeOffSectorSlopeAngle?, codeCodingMode?, geoLatIap?, geoLongIap?, valAltIap?, uomAltIap?, valMaxSectorLen?, uomMaxSectorLen?, valSlopeAngle?, valOpeningAngle?, bezierSectorExtent?, bezierSectorCentreLine?, codeDistVerAppDecision?, valDistVerAppDecision?, uomDistVerAppDecision?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual txtRmk txtRmk {
            get {
                XElement x = this.GetElement(txtRmkXName);
                return ((txtRmk)(x));
            }
            set {
                this.SetElement(txtRmkXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string source {
            get {
                XAttribute x = this.Attribute(sourceXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(sourceXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<FatoDirectionType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(FdnUidXName, typeof(FatoDirectionUidType));
            localElementDictionary.Add(geoLatXName, typeof(geoLat));
            localElementDictionary.Add(geoLongXName, typeof(geoLong));
            localElementDictionary.Add(valTrueBrgXName, typeof(valAngleBrg));
            localElementDictionary.Add(valMagBrgXName, typeof(valAngleBrg));
            localElementDictionary.Add(codeTypeVasisXName, typeof(codeTypeVasis));
            localElementDictionary.Add(codePsnVasisXName, typeof(codePsnRelAxis));
            localElementDictionary.Add(noBoxVasisXName, typeof(noNumber));
            localElementDictionary.Add(codePortableVasisXName, typeof(codeYesNo));
            localElementDictionary.Add(txtDescrPsnVasisXName, typeof(txtDescr));
            localElementDictionary.Add(valSlopeAngleGpVasisXName, typeof(valAngle));
            localElementDictionary.Add(valMehtXName, typeof(valDistHorz));
            localElementDictionary.Add(uomMehtXName, typeof(uomDistHorz));
            localElementDictionary.Add(codeRearTakeOffSectorAvblXName, typeof(codeYesNo));
            localElementDictionary.Add(valRearTakeOffSectorTrueBrgXName, typeof(valAngleBrg));
            localElementDictionary.Add(valRearTakeOffSectorSlopeAngleXName, typeof(valAngle));
            localElementDictionary.Add(codeCodingModeXName, typeof(codeCodingMode));
            localElementDictionary.Add(geoLatIapXName, typeof(geoLat));
            localElementDictionary.Add(geoLongIapXName, typeof(geoLong));
            localElementDictionary.Add(valAltIapXName, typeof(valDistVer));
            localElementDictionary.Add(uomAltIapXName, typeof(uomDistVer));
            localElementDictionary.Add(valMaxSectorLenXName, typeof(valDistHorz));
            localElementDictionary.Add(uomMaxSectorLenXName, typeof(uomDistHorz));
            localElementDictionary.Add(valSlopeAngleXName, typeof(valAngle));
            localElementDictionary.Add(valOpeningAngleXName, typeof(valAngle));
            localElementDictionary.Add(bezierSectorExtentXName, typeof(bezierCurve));
            localElementDictionary.Add(bezierSectorCentreLineXName, typeof(bezierCurve));
            localElementDictionary.Add(codeDistVerAppDecisionXName, typeof(codeDistVer));
            localElementDictionary.Add(valDistVerAppDecisionXName, typeof(valDistVer));
            localElementDictionary.Add(uomDistVerAppDecisionXName, typeof(uomDistVer));
            localElementDictionary.Add(txtRmkXName, typeof(txtRmk));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Approach and take-off direction of a FATO - UID
    /// </para>
    /// <para>
    /// Regular expression: ((FaoUid | FtoUid), txtDesig)
    /// </para>
    /// </summary>
    public partial class FatoDirectionUidType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName FaoUidXName = System.Xml.Linq.XName.Get("FaoUid", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName FtoUidXName = System.Xml.Linq.XName.Get("FtoUid", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName txtDesigXName = System.Xml.Linq.XName.Get("txtDesig", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName midXName = System.Xml.Linq.XName.Get("mid", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("FatoDirectionUidType", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator FatoDirectionUidType(XElement xe) { return XTypedServices.ToXTypedElement<FatoDirectionUidType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static FatoDirectionUidType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new ChoiceContentModelEntity(new NamedContentModelEntity(FaoUidXName), new NamedContentModelEntity(FtoUidXName)), new NamedContentModelEntity(txtDesigXName));
        }
        
        /// <summary>
        /// <para>
        /// Approach and take-off direction of a FATO - UID
        /// </para>
        /// <para>
        /// Regular expression: ((FaoUid | FtoUid), txtDesig)
        /// </para>
        /// </summary>
        public FatoDirectionUidType() {
        }
        
        /// <summary>
        /// <para>
        /// [Deprecated]
        /// </para>
        /// <para>
        /// DEPRECATED-4.0
        /// </para>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((FaoUid | FtoUid), txtDesig)
        /// </para>
        /// </summary>
        public virtual FatoOldUidType FaoUid {
            get {
                XElement x = this.GetElement(FaoUidXName);
                return ((FatoOldUidType)(x));
            }
            set {
                this.SetElement(FaoUidXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// FATO - centre line position is on the centre line of Final approach and take-off area [FATO]
        /// </para>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((FaoUid | FtoUid), txtDesig)
        /// </para>
        /// </summary>
        public virtual FatoUidType FtoUid {
            get {
                XElement x = this.GetElement(FtoUidXName);
                return ((FatoUidType)(x));
            }
            set {
                this.SetElement(FtoUidXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Designator
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: ((FaoUid | FtoUid), txtDesig)
        /// </para>
        /// </summary>
        public virtual txtDesig txtDesig {
            get {
                XElement x = this.GetElement(txtDesigXName);
                return ((txtDesig)(x));
            }
            set {
                this.SetElement(txtDesigXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string mid {
            get {
                XAttribute x = this.Attribute(midXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(midXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<FatoDirectionUidType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(FaoUidXName, typeof(FatoOldUidType));
            localElementDictionary.Add(FtoUidXName, typeof(FatoUidType));
            localElementDictionary.Add(txtDesigXName, typeof(txtDesig));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// FATO lighting system
    /// </para>
    /// <para>
    /// Regular expression: (FlsUid, txtDescr?, txtDescrEmerg?, codeIntst?, codeColour?, txtRmk?, Flg*)
    /// </para>
    /// </summary>
    public partial class FatoLightingSystemType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName FlsUidXName = System.Xml.Linq.XName.Get("FlsUid", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName txtDescrXName = System.Xml.Linq.XName.Get("txtDescr", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName txtDescrEmergXName = System.Xml.Linq.XName.Get("txtDescrEmerg", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName codeIntstXName = System.Xml.Linq.XName.Get("codeIntst", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName codeColourXName = System.Xml.Linq.XName.Get("codeColour", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName txtRmkXName = System.Xml.Linq.XName.Get("txtRmk", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName FlgXName = System.Xml.Linq.XName.Get("Flg", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<LightGroupType> FlgField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName sourceXName = System.Xml.Linq.XName.Get("source", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("FatoLightingSystemType", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator FatoLightingSystemType(XElement xe) { return XTypedServices.ToXTypedElement<FatoLightingSystemType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static FatoLightingSystemType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(FlsUidXName), new NamedContentModelEntity(txtDescrXName), new NamedContentModelEntity(txtDescrEmergXName), new NamedContentModelEntity(codeIntstXName), new NamedContentModelEntity(codeColourXName), new NamedContentModelEntity(txtRmkXName), new NamedContentModelEntity(FlgXName));
        }
        
        /// <summary>
        /// <para>
        /// FATO lighting system
        /// </para>
        /// <para>
        /// Regular expression: (FlsUid, txtDescr?, txtDescrEmerg?, codeIntst?, codeColour?, txtRmk?, Flg*)
        /// </para>
        /// </summary>
        public FatoLightingSystemType() {
        }
        
        /// <summary>
        /// <para>
        /// a version of FATO lighting system
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (FlsUid, txtDescr?, txtDescrEmerg?, codeIntst?, codeColour?, txtRmk?, Flg*)
        /// </para>
        /// </summary>
        public virtual FatoLightingSystemUidType FlsUid {
            get {
                XElement x = this.GetElement(FlsUidXName);
                return ((FatoLightingSystemUidType)(x));
            }
            set {
                this.SetElement(FlsUidXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Description
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (FlsUid, txtDescr?, txtDescrEmerg?, codeIntst?, codeColour?, txtRmk?, Flg*)
        /// </para>
        /// </summary>
        public virtual txtDescr txtDescr {
            get {
                XElement x = this.GetElement(txtDescrXName);
                return ((txtDescr)(x));
            }
            set {
                this.SetElement(txtDescrXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Availability of emergency lighting system description
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (FlsUid, txtDescr?, txtDescrEmerg?, codeIntst?, codeColour?, txtRmk?, Flg*)
        /// </para>
        /// </summary>
        public virtual txtDescr txtDescrEmerg {
            get {
                XElement x = this.GetElement(txtDescrEmergXName);
                return ((txtDescr)(x));
            }
            set {
                this.SetElement(txtDescrEmergXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Intensity
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (FlsUid, txtDescr?, txtDescrEmerg?, codeIntst?, codeColour?, txtRmk?, Flg*)
        /// </para>
        /// </summary>
        public virtual codeIntstLgt codeIntst {
            get {
                XElement x = this.GetElement(codeIntstXName);
                return ((codeIntstLgt)(x));
            }
            set {
                this.SetElement(codeIntstXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Colour
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (FlsUid, txtDescr?, txtDescrEmerg?, codeIntst?, codeColour?, txtRmk?, Flg*)
        /// </para>
        /// </summary>
        public virtual codeColour codeColour {
            get {
                XElement x = this.GetElement(codeColourXName);
                return ((codeColour)(x));
            }
            set {
                this.SetElement(codeColourXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Remark
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (FlsUid, txtDescr?, txtDescrEmerg?, codeIntst?, codeColour?, txtRmk?, Flg*)
        /// </para>
        /// </summary>
        public virtual txtRmk txtRmk {
            get {
                XElement x = this.GetElement(txtRmkXName);
                return ((txtRmk)(x));
            }
            set {
                this.SetElement(txtRmkXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// FATO lighting system is composed of Group of FATO direction ligthing system
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (FlsUid, txtDescr?, txtDescrEmerg?, codeIntst?, codeColour?, txtRmk?, Flg*)
        /// </para>
        /// </summary>
        public virtual IList<LightGroupType> Flg {
            get {
                if ((this.FlgField == null)) {
                    this.FlgField = new XTypedList<LightGroupType>(this, LinqToXsdTypeManager.Instance, FlgXName);
                }
                return this.FlgField;
            }
            set {
                if ((value == null)) {
                    this.FlgField = null;
                }
                else {
                    if ((this.FlgField == null)) {
                        this.FlgField = XTypedList<LightGroupType>.Initialize(this, LinqToXsdTypeManager.Instance, value, FlgXName);
                    }
                    else {
                        XTypedServices.SetList<LightGroupType>(this.FlgField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string source {
            get {
                XAttribute x = this.Attribute(sourceXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(sourceXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<FatoLightingSystemType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(FlsUidXName, typeof(FatoLightingSystemUidType));
            localElementDictionary.Add(txtDescrXName, typeof(txtDescr));
            localElementDictionary.Add(txtDescrEmergXName, typeof(txtDescr));
            localElementDictionary.Add(codeIntstXName, typeof(codeIntstLgt));
            localElementDictionary.Add(codeColourXName, typeof(codeColour));
            localElementDictionary.Add(txtRmkXName, typeof(txtRmk));
            localElementDictionary.Add(FlgXName, typeof(LightGroupType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// FATO lighting system - UID
    /// </para>
    /// <para>
    /// Regular expression: (FdnUid, codePsn)
    /// </para>
    /// </summary>
    public partial class FatoLightingSystemUidType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName FdnUidXName = System.Xml.Linq.XName.Get("FdnUid", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName codePsnXName = System.Xml.Linq.XName.Get("codePsn", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName midXName = System.Xml.Linq.XName.Get("mid", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("FatoLightingSystemUidType", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator FatoLightingSystemUidType(XElement xe) { return XTypedServices.ToXTypedElement<FatoLightingSystemUidType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static FatoLightingSystemUidType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(FdnUidXName), new NamedContentModelEntity(codePsnXName));
        }
        
        /// <summary>
        /// <para>
        /// FATO lighting system - UID
        /// </para>
        /// <para>
        /// Regular expression: (FdnUid, codePsn)
        /// </para>
        /// </summary>
        public FatoLightingSystemUidType() {
        }
        
        /// <summary>
        /// <para>
        /// FATO lighting system is owned by Approach and take-off direction of a FATO
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (FdnUid, codePsn)
        /// </para>
        /// </summary>
        public virtual FatoDirectionUidType FdnUid {
            get {
                XElement x = this.GetElement(FdnUidXName);
                return ((FatoDirectionUidType)(x));
            }
            set {
                this.SetElement(FdnUidXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Part
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (FdnUid, codePsn)
        /// </para>
        /// </summary>
        public virtual codePsnRwy codePsn {
            get {
                XElement x = this.GetElement(codePsnXName);
                return ((codePsnRwy)(x));
            }
            set {
                this.SetElement(codePsnXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string mid {
            get {
                XAttribute x = this.Attribute(midXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(midXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<FatoLightingSystemUidType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(FdnUidXName, typeof(FatoDirectionUidType));
            localElementDictionary.Add(codePsnXName, typeof(codePsnRwy));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// DEPRECATED-4.5
    /// </para>
    /// <para>
    /// FATO
    /// </para>
    /// <para>
    /// Regular expression: (FaoUid, txtName?, valLen?, valWid?, uomDim?, codeComposition?, codePreparation?, codeCondSfc?, valPcnClass?, codePcnPavementType?, codePcnPavementSubgrade?, codePcnMaxTirePressure?, valPcnMaxTirePressure?, codePcnEvalMethod?, txtPcnNote?, valLcnClass?, valSiwlWeight?, uomSiwlWeight?, valSiwlTirePressure?, uomSiwlTirePressure?, valAuwWeight?, uomAuwWeight?, codeStrength?, txtDescrStrength?, txtProfile?, txtMarking?, codeSts?, txtRmk?)
    /// </para>
    /// </summary>
    public partial class FatoOldType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName FaoUidXName = System.Xml.Linq.XName.Get("FaoUid", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName txtNameXName = System.Xml.Linq.XName.Get("txtName", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName valLenXName = System.Xml.Linq.XName.Get("valLen", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName valWidXName = System.Xml.Linq.XName.Get("valWid", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName uomDimXName = System.Xml.Linq.XName.Get("uomDim", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName codeCompositionXName = System.Xml.Linq.XName.Get("codeComposition", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName codePreparationXName = System.Xml.Linq.XName.Get("codePreparation", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName codeCondSfcXName = System.Xml.Linq.XName.Get("codeCondSfc", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName valPcnClassXName = System.Xml.Linq.XName.Get("valPcnClass", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName codePcnPavementTypeXName = System.Xml.Linq.XName.Get("codePcnPavementType", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName codePcnPavementSubgradeXName = System.Xml.Linq.XName.Get("codePcnPavementSubgrade", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName codePcnMaxTirePressureXName = System.Xml.Linq.XName.Get("codePcnMaxTirePressure", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName valPcnMaxTirePressureXName = System.Xml.Linq.XName.Get("valPcnMaxTirePressure", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName codePcnEvalMethodXName = System.Xml.Linq.XName.Get("codePcnEvalMethod", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName txtPcnNoteXName = System.Xml.Linq.XName.Get("txtPcnNote", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName valLcnClassXName = System.Xml.Linq.XName.Get("valLcnClass", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName valSiwlWeightXName = System.Xml.Linq.XName.Get("valSiwlWeight", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName uomSiwlWeightXName = System.Xml.Linq.XName.Get("uomSiwlWeight", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName valSiwlTirePressureXName = System.Xml.Linq.XName.Get("valSiwlTirePressure", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName uomSiwlTirePressureXName = System.Xml.Linq.XName.Get("uomSiwlTirePressure", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName valAuwWeightXName = System.Xml.Linq.XName.Get("valAuwWeight", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName uomAuwWeightXName = System.Xml.Linq.XName.Get("uomAuwWeight", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName codeStrengthXName = System.Xml.Linq.XName.Get("codeStrength", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName txtDescrStrengthXName = System.Xml.Linq.XName.Get("txtDescrStrength", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName txtProfileXName = System.Xml.Linq.XName.Get("txtProfile", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName txtMarkingXName = System.Xml.Linq.XName.Get("txtMarking", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName codeStsXName = System.Xml.Linq.XName.Get("codeSts", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName txtRmkXName = System.Xml.Linq.XName.Get("txtRmk", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName sourceXName = System.Xml.Linq.XName.Get("source", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("FatoOldType", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator FatoOldType(XElement xe) { return XTypedServices.ToXTypedElement<FatoOldType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static FatoOldType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(FaoUidXName), new NamedContentModelEntity(txtNameXName), new NamedContentModelEntity(valLenXName), new NamedContentModelEntity(valWidXName), new NamedContentModelEntity(uomDimXName), new NamedContentModelEntity(codeCompositionXName), new NamedContentModelEntity(codePreparationXName), new NamedContentModelEntity(codeCondSfcXName), new NamedContentModelEntity(valPcnClassXName), new NamedContentModelEntity(codePcnPavementTypeXName), new NamedContentModelEntity(codePcnPavementSubgradeXName), new NamedContentModelEntity(codePcnMaxTirePressureXName), new NamedContentModelEntity(valPcnMaxTirePressureXName), new NamedContentModelEntity(codePcnEvalMethodXName), new NamedContentModelEntity(txtPcnNoteXName), new NamedContentModelEntity(valLcnClassXName), new NamedContentModelEntity(valSiwlWeightXName), new NamedContentModelEntity(uomSiwlWeightXName), new NamedContentModelEntity(valSiwlTirePressureXName), new NamedContentModelEntity(uomSiwlTirePressureXName), new NamedContentModelEntity(valAuwWeightXName), new NamedContentModelEntity(uomAuwWeightXName), new NamedContentModelEntity(codeStrengthXName), new NamedContentModelEntity(txtDescrStrengthXName), new NamedContentModelEntity(txtProfileXName), new NamedContentModelEntity(txtMarkingXName), new NamedContentModelEntity(codeStsXName), new NamedContentModelEntity(txtRmkXName));
        }
        
        /// <summary>
        /// <para>
        /// DEPRECATED-4.5
        /// </para>
        /// <para>
        /// FATO
        /// </para>
        /// <para>
        /// Regular expression: (FaoUid, txtName?, valLen?, valWid?, uomDim?, codeComposition?, codePreparation?, codeCondSfc?, valPcnClass?, codePcnPavementType?, codePcnPavementSubgrade?, codePcnMaxTirePressure?, valPcnMaxTirePressure?, codePcnEvalMethod?, txtPcnNote?, valLcnClass?, valSiwlWeight?, uomSiwlWeight?, valSiwlTirePressure?, uomSiwlTirePressure?, valAuwWeight?, uomAuwWeight?, codeStrength?, txtDescrStrength?, txtProfile?, txtMarking?, codeSts?, txtRmk?)
        /// </para>
        /// </summary>
        public FatoOldType() {
        }
        
        /// <summary>
        /// <para>
        /// a version of Final approach and take-off area [FATO]
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (FaoUid, txtName?, valLen?, valWid?, uomDim?, codeComposition?, codePreparation?, codeCondSfc?, valPcnClass?, codePcnPavementType?, codePcnPavementSubgrade?, codePcnMaxTirePressure?, valPcnMaxTirePressure?, codePcnEvalMethod?, txtPcnNote?, valLcnClass?, valSiwlWeight?, uomSiwlWeight?, valSiwlTirePressure?, uomSiwlTirePressure?, valAuwWeight?, uomAuwWeight?, codeStrength?, txtDescrStrength?, txtProfile?, txtMarking?, codeSts?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual FatoOldUidType FaoUid {
            get {
                XElement x = this.GetElement(FaoUidXName);
                return ((FatoOldUidType)(x));
            }
            set {
                this.SetElement(FaoUidXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Name
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (FaoUid, txtName?, valLen?, valWid?, uomDim?, codeComposition?, codePreparation?, codeCondSfc?, valPcnClass?, codePcnPavementType?, codePcnPavementSubgrade?, codePcnMaxTirePressure?, valPcnMaxTirePressure?, codePcnEvalMethod?, txtPcnNote?, valLcnClass?, valSiwlWeight?, uomSiwlWeight?, valSiwlTirePressure?, uomSiwlTirePressure?, valAuwWeight?, uomAuwWeight?, codeStrength?, txtDescrStrength?, txtProfile?, txtMarking?, codeSts?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual txtName txtName {
            get {
                XElement x = this.GetElement(txtNameXName);
                return ((txtName)(x));
            }
            set {
                this.SetElement(txtNameXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Length
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (FaoUid, txtName?, valLen?, valWid?, uomDim?, codeComposition?, codePreparation?, codeCondSfc?, valPcnClass?, codePcnPavementType?, codePcnPavementSubgrade?, codePcnMaxTirePressure?, valPcnMaxTirePressure?, codePcnEvalMethod?, txtPcnNote?, valLcnClass?, valSiwlWeight?, uomSiwlWeight?, valSiwlTirePressure?, uomSiwlTirePressure?, valAuwWeight?, uomAuwWeight?, codeStrength?, txtDescrStrength?, txtProfile?, txtMarking?, codeSts?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual valDistHorz valLen {
            get {
                XElement x = this.GetElement(valLenXName);
                return ((valDistHorz)(x));
            }
            set {
                this.SetElement(valLenXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Width
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (FaoUid, txtName?, valLen?, valWid?, uomDim?, codeComposition?, codePreparation?, codeCondSfc?, valPcnClass?, codePcnPavementType?, codePcnPavementSubgrade?, codePcnMaxTirePressure?, valPcnMaxTirePressure?, codePcnEvalMethod?, txtPcnNote?, valLcnClass?, valSiwlWeight?, uomSiwlWeight?, valSiwlTirePressure?, uomSiwlTirePressure?, valAuwWeight?, uomAuwWeight?, codeStrength?, txtDescrStrength?, txtProfile?, txtMarking?, codeSts?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual valDistHorz valWid {
            get {
                XElement x = this.GetElement(valWidXName);
                return ((valDistHorz)(x));
            }
            set {
                this.SetElement(valWidXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Unit of measurement [horizontal dimension]
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (FaoUid, txtName?, valLen?, valWid?, uomDim?, codeComposition?, codePreparation?, codeCondSfc?, valPcnClass?, codePcnPavementType?, codePcnPavementSubgrade?, codePcnMaxTirePressure?, valPcnMaxTirePressure?, codePcnEvalMethod?, txtPcnNote?, valLcnClass?, valSiwlWeight?, uomSiwlWeight?, valSiwlTirePressure?, uomSiwlTirePressure?, valAuwWeight?, uomAuwWeight?, codeStrength?, txtDescrStrength?, txtProfile?, txtMarking?, codeSts?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual uomDistHorz uomDim {
            get {
                XElement x = this.GetElement(uomDimXName);
                return ((uomDistHorz)(x));
            }
            set {
                this.SetElement(uomDimXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Surface composition
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (FaoUid, txtName?, valLen?, valWid?, uomDim?, codeComposition?, codePreparation?, codeCondSfc?, valPcnClass?, codePcnPavementType?, codePcnPavementSubgrade?, codePcnMaxTirePressure?, valPcnMaxTirePressure?, codePcnEvalMethod?, txtPcnNote?, valLcnClass?, valSiwlWeight?, uomSiwlWeight?, valSiwlTirePressure?, uomSiwlTirePressure?, valAuwWeight?, uomAuwWeight?, codeStrength?, txtDescrStrength?, txtProfile?, txtMarking?, codeSts?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual codeCompositionSfc codeComposition {
            get {
                XElement x = this.GetElement(codeCompositionXName);
                return ((codeCompositionSfc)(x));
            }
            set {
                this.SetElement(codeCompositionXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Surface preparation method
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (FaoUid, txtName?, valLen?, valWid?, uomDim?, codeComposition?, codePreparation?, codeCondSfc?, valPcnClass?, codePcnPavementType?, codePcnPavementSubgrade?, codePcnMaxTirePressure?, valPcnMaxTirePressure?, codePcnEvalMethod?, txtPcnNote?, valLcnClass?, valSiwlWeight?, uomSiwlWeight?, valSiwlTirePressure?, uomSiwlTirePressure?, valAuwWeight?, uomAuwWeight?, codeStrength?, txtDescrStrength?, txtProfile?, txtMarking?, codeSts?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual codePreparationSfc codePreparation {
            get {
                XElement x = this.GetElement(codePreparationXName);
                return ((codePreparationSfc)(x));
            }
            set {
                this.SetElement(codePreparationXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Surface condition
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (FaoUid, txtName?, valLen?, valWid?, uomDim?, codeComposition?, codePreparation?, codeCondSfc?, valPcnClass?, codePcnPavementType?, codePcnPavementSubgrade?, codePcnMaxTirePressure?, valPcnMaxTirePressure?, codePcnEvalMethod?, txtPcnNote?, valLcnClass?, valSiwlWeight?, uomSiwlWeight?, valSiwlTirePressure?, uomSiwlTirePressure?, valAuwWeight?, uomAuwWeight?, codeStrength?, txtDescrStrength?, txtProfile?, txtMarking?, codeSts?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual codeCondSfc codeCondSfc {
            get {
                XElement x = this.GetElement(codeCondSfcXName);
                return ((codeCondSfc)(x));
            }
            set {
                this.SetElement(codeCondSfcXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// PCN (Pavement Classification Number) value
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (FaoUid, txtName?, valLen?, valWid?, uomDim?, codeComposition?, codePreparation?, codeCondSfc?, valPcnClass?, codePcnPavementType?, codePcnPavementSubgrade?, codePcnMaxTirePressure?, valPcnMaxTirePressure?, codePcnEvalMethod?, txtPcnNote?, valLcnClass?, valSiwlWeight?, uomSiwlWeight?, valSiwlTirePressure?, uomSiwlTirePressure?, valAuwWeight?, uomAuwWeight?, codeStrength?, txtDescrStrength?, txtProfile?, txtMarking?, codeSts?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual valPcnClass valPcnClass {
            get {
                XElement x = this.GetElement(valPcnClassXName);
                return ((valPcnClass)(x));
            }
            set {
                this.SetElement(valPcnClassXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// PCN pavement type
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (FaoUid, txtName?, valLen?, valWid?, uomDim?, codeComposition?, codePreparation?, codeCondSfc?, valPcnClass?, codePcnPavementType?, codePcnPavementSubgrade?, codePcnMaxTirePressure?, valPcnMaxTirePressure?, codePcnEvalMethod?, txtPcnNote?, valLcnClass?, valSiwlWeight?, uomSiwlWeight?, valSiwlTirePressure?, uomSiwlTirePressure?, valAuwWeight?, uomAuwWeight?, codeStrength?, txtDescrStrength?, txtProfile?, txtMarking?, codeSts?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual codePcnPavementType codePcnPavementType {
            get {
                XElement x = this.GetElement(codePcnPavementTypeXName);
                return ((codePcnPavementType)(x));
            }
            set {
                this.SetElement(codePcnPavementTypeXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// PCN pavement subgrade
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (FaoUid, txtName?, valLen?, valWid?, uomDim?, codeComposition?, codePreparation?, codeCondSfc?, valPcnClass?, codePcnPavementType?, codePcnPavementSubgrade?, codePcnMaxTirePressure?, valPcnMaxTirePressure?, codePcnEvalMethod?, txtPcnNote?, valLcnClass?, valSiwlWeight?, uomSiwlWeight?, valSiwlTirePressure?, uomSiwlTirePressure?, valAuwWeight?, uomAuwWeight?, codeStrength?, txtDescrStrength?, txtProfile?, txtMarking?, codeSts?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual codePcnPavementSubgrade codePcnPavementSubgrade {
            get {
                XElement x = this.GetElement(codePcnPavementSubgradeXName);
                return ((codePcnPavementSubgrade)(x));
            }
            set {
                this.SetElement(codePcnPavementSubgradeXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// PCN max tire pressure code
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (FaoUid, txtName?, valLen?, valWid?, uomDim?, codeComposition?, codePreparation?, codeCondSfc?, valPcnClass?, codePcnPavementType?, codePcnPavementSubgrade?, codePcnMaxTirePressure?, valPcnMaxTirePressure?, codePcnEvalMethod?, txtPcnNote?, valLcnClass?, valSiwlWeight?, uomSiwlWeight?, valSiwlTirePressure?, uomSiwlTirePressure?, valAuwWeight?, uomAuwWeight?, codeStrength?, txtDescrStrength?, txtProfile?, txtMarking?, codeSts?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual codePcnMaxTirePressure codePcnMaxTirePressure {
            get {
                XElement x = this.GetElement(codePcnMaxTirePressureXName);
                return ((codePcnMaxTirePressure)(x));
            }
            set {
                this.SetElement(codePcnMaxTirePressureXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// PCN max tire pressure value
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (FaoUid, txtName?, valLen?, valWid?, uomDim?, codeComposition?, codePreparation?, codeCondSfc?, valPcnClass?, codePcnPavementType?, codePcnPavementSubgrade?, codePcnMaxTirePressure?, valPcnMaxTirePressure?, codePcnEvalMethod?, txtPcnNote?, valLcnClass?, valSiwlWeight?, uomSiwlWeight?, valSiwlTirePressure?, uomSiwlTirePressure?, valAuwWeight?, uomAuwWeight?, codeStrength?, txtDescrStrength?, txtProfile?, txtMarking?, codeSts?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual valPressurePcnTire valPcnMaxTirePressure {
            get {
                XElement x = this.GetElement(valPcnMaxTirePressureXName);
                return ((valPressurePcnTire)(x));
            }
            set {
                this.SetElement(valPcnMaxTirePressureXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// PCN evaluation method
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (FaoUid, txtName?, valLen?, valWid?, uomDim?, codeComposition?, codePreparation?, codeCondSfc?, valPcnClass?, codePcnPavementType?, codePcnPavementSubgrade?, codePcnMaxTirePressure?, valPcnMaxTirePressure?, codePcnEvalMethod?, txtPcnNote?, valLcnClass?, valSiwlWeight?, uomSiwlWeight?, valSiwlTirePressure?, uomSiwlTirePressure?, valAuwWeight?, uomAuwWeight?, codeStrength?, txtDescrStrength?, txtProfile?, txtMarking?, codeSts?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual codePcnEvalMethod codePcnEvalMethod {
            get {
                XElement x = this.GetElement(codePcnEvalMethodXName);
                return ((codePcnEvalMethod)(x));
            }
            set {
                this.SetElement(codePcnEvalMethodXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// PCN notes
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (FaoUid, txtName?, valLen?, valWid?, uomDim?, codeComposition?, codePreparation?, codeCondSfc?, valPcnClass?, codePcnPavementType?, codePcnPavementSubgrade?, codePcnMaxTirePressure?, valPcnMaxTirePressure?, codePcnEvalMethod?, txtPcnNote?, valLcnClass?, valSiwlWeight?, uomSiwlWeight?, valSiwlTirePressure?, uomSiwlTirePressure?, valAuwWeight?, uomAuwWeight?, codeStrength?, txtDescrStrength?, txtProfile?, txtMarking?, codeSts?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual txtRmk txtPcnNote {
            get {
                XElement x = this.GetElement(txtPcnNoteXName);
                return ((txtRmk)(x));
            }
            set {
                this.SetElement(txtPcnNoteXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// LCN value
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (FaoUid, txtName?, valLen?, valWid?, uomDim?, codeComposition?, codePreparation?, codeCondSfc?, valPcnClass?, codePcnPavementType?, codePcnPavementSubgrade?, codePcnMaxTirePressure?, valPcnMaxTirePressure?, codePcnEvalMethod?, txtPcnNote?, valLcnClass?, valSiwlWeight?, uomSiwlWeight?, valSiwlTirePressure?, uomSiwlTirePressure?, valAuwWeight?, uomAuwWeight?, codeStrength?, txtDescrStrength?, txtProfile?, txtMarking?, codeSts?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual valLcnClass valLcnClass {
            get {
                XElement x = this.GetElement(valLcnClassXName);
                return ((valLcnClass)(x));
            }
            set {
                this.SetElement(valLcnClassXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// SIWL weight
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (FaoUid, txtName?, valLen?, valWid?, uomDim?, codeComposition?, codePreparation?, codeCondSfc?, valPcnClass?, codePcnPavementType?, codePcnPavementSubgrade?, codePcnMaxTirePressure?, valPcnMaxTirePressure?, codePcnEvalMethod?, txtPcnNote?, valLcnClass?, valSiwlWeight?, uomSiwlWeight?, valSiwlTirePressure?, uomSiwlTirePressure?, valAuwWeight?, uomAuwWeight?, codeStrength?, txtDescrStrength?, txtProfile?, txtMarking?, codeSts?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual valWeight valSiwlWeight {
            get {
                XElement x = this.GetElement(valSiwlWeightXName);
                return ((valWeight)(x));
            }
            set {
                this.SetElement(valSiwlWeightXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Unit of measurement [SIWL weight]
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (FaoUid, txtName?, valLen?, valWid?, uomDim?, codeComposition?, codePreparation?, codeCondSfc?, valPcnClass?, codePcnPavementType?, codePcnPavementSubgrade?, codePcnMaxTirePressure?, valPcnMaxTirePressure?, codePcnEvalMethod?, txtPcnNote?, valLcnClass?, valSiwlWeight?, uomSiwlWeight?, valSiwlTirePressure?, uomSiwlTirePressure?, valAuwWeight?, uomAuwWeight?, codeStrength?, txtDescrStrength?, txtProfile?, txtMarking?, codeSts?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual uomWeight uomSiwlWeight {
            get {
                XElement x = this.GetElement(uomSiwlWeightXName);
                return ((uomWeight)(x));
            }
            set {
                this.SetElement(uomSiwlWeightXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// SIWL tire pressure
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (FaoUid, txtName?, valLen?, valWid?, uomDim?, codeComposition?, codePreparation?, codeCondSfc?, valPcnClass?, codePcnPavementType?, codePcnPavementSubgrade?, codePcnMaxTirePressure?, valPcnMaxTirePressure?, codePcnEvalMethod?, txtPcnNote?, valLcnClass?, valSiwlWeight?, uomSiwlWeight?, valSiwlTirePressure?, uomSiwlTirePressure?, valAuwWeight?, uomAuwWeight?, codeStrength?, txtDescrStrength?, txtProfile?, txtMarking?, codeSts?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual valPressure valSiwlTirePressure {
            get {
                XElement x = this.GetElement(valSiwlTirePressureXName);
                return ((valPressure)(x));
            }
            set {
                this.SetElement(valSiwlTirePressureXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Unit of measurement [SIWL tire pressure]
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (FaoUid, txtName?, valLen?, valWid?, uomDim?, codeComposition?, codePreparation?, codeCondSfc?, valPcnClass?, codePcnPavementType?, codePcnPavementSubgrade?, codePcnMaxTirePressure?, valPcnMaxTirePressure?, codePcnEvalMethod?, txtPcnNote?, valLcnClass?, valSiwlWeight?, uomSiwlWeight?, valSiwlTirePressure?, uomSiwlTirePressure?, valAuwWeight?, uomAuwWeight?, codeStrength?, txtDescrStrength?, txtProfile?, txtMarking?, codeSts?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual uomPressure uomSiwlTirePressure {
            get {
                XElement x = this.GetElement(uomSiwlTirePressureXName);
                return ((uomPressure)(x));
            }
            set {
                this.SetElement(uomSiwlTirePressureXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// All Up Wheel weight
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (FaoUid, txtName?, valLen?, valWid?, uomDim?, codeComposition?, codePreparation?, codeCondSfc?, valPcnClass?, codePcnPavementType?, codePcnPavementSubgrade?, codePcnMaxTirePressure?, valPcnMaxTirePressure?, codePcnEvalMethod?, txtPcnNote?, valLcnClass?, valSiwlWeight?, uomSiwlWeight?, valSiwlTirePressure?, uomSiwlTirePressure?, valAuwWeight?, uomAuwWeight?, codeStrength?, txtDescrStrength?, txtProfile?, txtMarking?, codeSts?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual valWeight valAuwWeight {
            get {
                XElement x = this.GetElement(valAuwWeightXName);
                return ((valWeight)(x));
            }
            set {
                this.SetElement(valAuwWeightXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Unit of measurement [AUW weight]
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (FaoUid, txtName?, valLen?, valWid?, uomDim?, codeComposition?, codePreparation?, codeCondSfc?, valPcnClass?, codePcnPavementType?, codePcnPavementSubgrade?, codePcnMaxTirePressure?, valPcnMaxTirePressure?, codePcnEvalMethod?, txtPcnNote?, valLcnClass?, valSiwlWeight?, uomSiwlWeight?, valSiwlTirePressure?, uomSiwlTirePressure?, valAuwWeight?, uomAuwWeight?, codeStrength?, txtDescrStrength?, txtProfile?, txtMarking?, codeSts?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual uomWeight uomAuwWeight {
            get {
                XElement x = this.GetElement(uomAuwWeightXName);
                return ((uomWeight)(x));
            }
            set {
                this.SetElement(uomAuwWeightXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// [Deprecated] Surface strength method
        /// </para>
        /// <para>
        /// DEPRECATED-4.5
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (FaoUid, txtName?, valLen?, valWid?, uomDim?, codeComposition?, codePreparation?, codeCondSfc?, valPcnClass?, codePcnPavementType?, codePcnPavementSubgrade?, codePcnMaxTirePressure?, valPcnMaxTirePressure?, codePcnEvalMethod?, txtPcnNote?, valLcnClass?, valSiwlWeight?, uomSiwlWeight?, valSiwlTirePressure?, uomSiwlTirePressure?, valAuwWeight?, uomAuwWeight?, codeStrength?, txtDescrStrength?, txtProfile?, txtMarking?, codeSts?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual codeStrengthSfc codeStrength {
            get {
                XElement x = this.GetElement(codeStrengthXName);
                return ((codeStrengthSfc)(x));
            }
            set {
                this.SetElement(codeStrengthXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// [Deprecated] Surface strength
        /// </para>
        /// <para>
        /// DEPRECATED-4.5
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (FaoUid, txtName?, valLen?, valWid?, uomDim?, codeComposition?, codePreparation?, codeCondSfc?, valPcnClass?, codePcnPavementType?, codePcnPavementSubgrade?, codePcnMaxTirePressure?, valPcnMaxTirePressure?, codePcnEvalMethod?, txtPcnNote?, valLcnClass?, valSiwlWeight?, uomSiwlWeight?, valSiwlTirePressure?, uomSiwlTirePressure?, valAuwWeight?, uomAuwWeight?, codeStrength?, txtDescrStrength?, txtProfile?, txtMarking?, codeSts?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual txtDescr txtDescrStrength {
            get {
                XElement x = this.GetElement(txtDescrStrengthXName);
                return ((txtDescr)(x));
            }
            set {
                this.SetElement(txtDescrStrengthXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Profile description
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (FaoUid, txtName?, valLen?, valWid?, uomDim?, codeComposition?, codePreparation?, codeCondSfc?, valPcnClass?, codePcnPavementType?, codePcnPavementSubgrade?, codePcnMaxTirePressure?, valPcnMaxTirePressure?, codePcnEvalMethod?, txtPcnNote?, valLcnClass?, valSiwlWeight?, uomSiwlWeight?, valSiwlTirePressure?, uomSiwlTirePressure?, valAuwWeight?, uomAuwWeight?, codeStrength?, txtDescrStrength?, txtProfile?, txtMarking?, codeSts?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual txtDescr txtProfile {
            get {
                XElement x = this.GetElement(txtProfileXName);
                return ((txtDescr)(x));
            }
            set {
                this.SetElement(txtProfileXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Marking
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (FaoUid, txtName?, valLen?, valWid?, uomDim?, codeComposition?, codePreparation?, codeCondSfc?, valPcnClass?, codePcnPavementType?, codePcnPavementSubgrade?, codePcnMaxTirePressure?, valPcnMaxTirePressure?, codePcnEvalMethod?, txtPcnNote?, valLcnClass?, valSiwlWeight?, uomSiwlWeight?, valSiwlTirePressure?, uomSiwlTirePressure?, valAuwWeight?, uomAuwWeight?, codeStrength?, txtDescrStrength?, txtProfile?, txtMarking?, codeSts?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual txtDescr txtMarking {
            get {
                XElement x = this.GetElement(txtMarkingXName);
                return ((txtDescr)(x));
            }
            set {
                this.SetElement(txtMarkingXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Operational status
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (FaoUid, txtName?, valLen?, valWid?, uomDim?, codeComposition?, codePreparation?, codeCondSfc?, valPcnClass?, codePcnPavementType?, codePcnPavementSubgrade?, codePcnMaxTirePressure?, valPcnMaxTirePressure?, codePcnEvalMethod?, txtPcnNote?, valLcnClass?, valSiwlWeight?, uomSiwlWeight?, valSiwlTirePressure?, uomSiwlTirePressure?, valAuwWeight?, uomAuwWeight?, codeStrength?, txtDescrStrength?, txtProfile?, txtMarking?, codeSts?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual codeStsSfc codeSts {
            get {
                XElement x = this.GetElement(codeStsXName);
                return ((codeStsSfc)(x));
            }
            set {
                this.SetElement(codeStsXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Remark
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (FaoUid, txtName?, valLen?, valWid?, uomDim?, codeComposition?, codePreparation?, codeCondSfc?, valPcnClass?, codePcnPavementType?, codePcnPavementSubgrade?, codePcnMaxTirePressure?, valPcnMaxTirePressure?, codePcnEvalMethod?, txtPcnNote?, valLcnClass?, valSiwlWeight?, uomSiwlWeight?, valSiwlTirePressure?, uomSiwlTirePressure?, valAuwWeight?, uomAuwWeight?, codeStrength?, txtDescrStrength?, txtProfile?, txtMarking?, codeSts?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual txtRmk txtRmk {
            get {
                XElement x = this.GetElement(txtRmkXName);
                return ((txtRmk)(x));
            }
            set {
                this.SetElement(txtRmkXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string source {
            get {
                XAttribute x = this.Attribute(sourceXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(sourceXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<FatoOldType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(FaoUidXName, typeof(FatoOldUidType));
            localElementDictionary.Add(txtNameXName, typeof(txtName));
            localElementDictionary.Add(valLenXName, typeof(valDistHorz));
            localElementDictionary.Add(valWidXName, typeof(valDistHorz));
            localElementDictionary.Add(uomDimXName, typeof(uomDistHorz));
            localElementDictionary.Add(codeCompositionXName, typeof(codeCompositionSfc));
            localElementDictionary.Add(codePreparationXName, typeof(codePreparationSfc));
            localElementDictionary.Add(codeCondSfcXName, typeof(codeCondSfc));
            localElementDictionary.Add(valPcnClassXName, typeof(valPcnClass));
            localElementDictionary.Add(codePcnPavementTypeXName, typeof(codePcnPavementType));
            localElementDictionary.Add(codePcnPavementSubgradeXName, typeof(codePcnPavementSubgrade));
            localElementDictionary.Add(codePcnMaxTirePressureXName, typeof(codePcnMaxTirePressure));
            localElementDictionary.Add(valPcnMaxTirePressureXName, typeof(valPressurePcnTire));
            localElementDictionary.Add(codePcnEvalMethodXName, typeof(codePcnEvalMethod));
            localElementDictionary.Add(txtPcnNoteXName, typeof(txtRmk));
            localElementDictionary.Add(valLcnClassXName, typeof(valLcnClass));
            localElementDictionary.Add(valSiwlWeightXName, typeof(valWeight));
            localElementDictionary.Add(uomSiwlWeightXName, typeof(uomWeight));
            localElementDictionary.Add(valSiwlTirePressureXName, typeof(valPressure));
            localElementDictionary.Add(uomSiwlTirePressureXName, typeof(uomPressure));
            localElementDictionary.Add(valAuwWeightXName, typeof(valWeight));
            localElementDictionary.Add(uomAuwWeightXName, typeof(uomWeight));
            localElementDictionary.Add(codeStrengthXName, typeof(codeStrengthSfc));
            localElementDictionary.Add(txtDescrStrengthXName, typeof(txtDescr));
            localElementDictionary.Add(txtProfileXName, typeof(txtDescr));
            localElementDictionary.Add(txtMarkingXName, typeof(txtDescr));
            localElementDictionary.Add(codeStsXName, typeof(codeStsSfc));
            localElementDictionary.Add(txtRmkXName, typeof(txtRmk));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// DEPRECATED-4.5
    /// </para>
    /// <para>
    /// Final approach and take-off area [FATO] - UID
    /// </para>
    /// <para>
    /// Regular expression: (TlaUid)
    /// </para>
    /// </summary>
    public partial class FatoOldUidType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TlaUidXName = System.Xml.Linq.XName.Get("TlaUid", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName midXName = System.Xml.Linq.XName.Get("mid", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("FatoOldUidType", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator FatoOldUidType(XElement xe) { return XTypedServices.ToXTypedElement<FatoOldUidType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static FatoOldUidType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(TlaUidXName));
        }
        
        /// <summary>
        /// <para>
        /// DEPRECATED-4.5
        /// </para>
        /// <para>
        /// Final approach and take-off area [FATO] - UID
        /// </para>
        /// <para>
        /// Regular expression: (TlaUid)
        /// </para>
        /// </summary>
        public FatoOldUidType() {
        }
        
        /// <summary>
        /// <para>
        /// Final approach and take-off area [FATO] is having Touch down and lift off area [TLOF]
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (TlaUid)
        /// </para>
        /// </summary>
        public virtual TlofUidType TlaUid {
            get {
                XElement x = this.GetElement(TlaUidXName);
                return ((TlofUidType)(x));
            }
            set {
                this.SetElement(TlaUidXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string mid {
            get {
                XAttribute x = this.Attribute(midXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(midXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<FatoOldUidType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(TlaUidXName, typeof(TlofUidType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// FATO protection area geometry point
    /// </para>
    /// <para>
    /// Regular expression: (codeType, geoLat, geoLong, geoLatArc?, geoLongArc?, valElev?)
    /// </para>
    /// </summary>
    public partial class FatoProtectionAreaGeometryPointType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName codeTypeXName = System.Xml.Linq.XName.Get("codeType", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName geoLatXName = System.Xml.Linq.XName.Get("geoLat", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName geoLongXName = System.Xml.Linq.XName.Get("geoLong", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName geoLatArcXName = System.Xml.Linq.XName.Get("geoLatArc", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName geoLongArcXName = System.Xml.Linq.XName.Get("geoLongArc", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName valElevXName = System.Xml.Linq.XName.Get("valElev", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("FatoProtectionAreaGeometryPointType", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator FatoProtectionAreaGeometryPointType(XElement xe) { return XTypedServices.ToXTypedElement<FatoProtectionAreaGeometryPointType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static FatoProtectionAreaGeometryPointType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(codeTypeXName), new NamedContentModelEntity(geoLatXName), new NamedContentModelEntity(geoLongXName), new NamedContentModelEntity(geoLatArcXName), new NamedContentModelEntity(geoLongArcXName), new NamedContentModelEntity(valElevXName));
        }
        
        /// <summary>
        /// <para>
        /// FATO protection area geometry point
        /// </para>
        /// <para>
        /// Regular expression: (codeType, geoLat, geoLong, geoLatArc?, geoLongArc?, valElev?)
        /// </para>
        /// </summary>
        public FatoProtectionAreaGeometryPointType() {
        }
        
        /// <summary>
        /// <para>
        /// Type
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (codeType, geoLat, geoLong, geoLatArc?, geoLongArc?, valElev?)
        /// </para>
        /// </summary>
        public virtual codeTypeVertex codeType {
            get {
                XElement x = this.GetElement(codeTypeXName);
                return ((codeTypeVertex)(x));
            }
            set {
                this.SetElement(codeTypeXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Latitude
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (codeType, geoLat, geoLong, geoLatArc?, geoLongArc?, valElev?)
        /// </para>
        /// </summary>
        public virtual geoLat geoLat {
            get {
                XElement x = this.GetElement(geoLatXName);
                return ((geoLat)(x));
            }
            set {
                this.SetElement(geoLatXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Longitude
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (codeType, geoLat, geoLong, geoLatArc?, geoLongArc?, valElev?)
        /// </para>
        /// </summary>
        public virtual geoLong geoLong {
            get {
                XElement x = this.GetElement(geoLongXName);
                return ((geoLong)(x));
            }
            set {
                this.SetElement(geoLongXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Latitude for arc
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (codeType, geoLat, geoLong, geoLatArc?, geoLongArc?, valElev?)
        /// </para>
        /// </summary>
        public virtual geoLat geoLatArc {
            get {
                XElement x = this.GetElement(geoLatArcXName);
                return ((geoLat)(x));
            }
            set {
                this.SetElement(geoLatArcXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Longitude for arc
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (codeType, geoLat, geoLong, geoLatArc?, geoLongArc?, valElev?)
        /// </para>
        /// </summary>
        public virtual geoLong geoLongArc {
            get {
                XElement x = this.GetElement(geoLongArcXName);
                return ((geoLong)(x));
            }
            set {
                this.SetElement(geoLongArcXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Elevation
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (codeType, geoLat, geoLong, geoLatArc?, geoLongArc?, valElev?)
        /// </para>
        /// </summary>
        public virtual valDistVer valElev {
            get {
                XElement x = this.GetElement(valElevXName);
                return ((valDistVer)(x));
            }
            set {
                this.SetElement(valElevXName, value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<FatoProtectionAreaGeometryPointType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(codeTypeXName, typeof(codeTypeVertex));
            localElementDictionary.Add(geoLatXName, typeof(geoLat));
            localElementDictionary.Add(geoLongXName, typeof(geoLong));
            localElementDictionary.Add(geoLatArcXName, typeof(geoLat));
            localElementDictionary.Add(geoLongArcXName, typeof(geoLong));
            localElementDictionary.Add(valElevXName, typeof(valDistVer));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// FATO protect area geometry
    /// </para>
    /// <para>
    /// Regular expression: (FpgUid, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, valElevAccuracy?, valGeoidUndulation?, uomDistVer?, txtRmk?, Fpp+)
    /// </para>
    /// </summary>
    public partial class FatoProtectionAreaGeometryType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName FpgUidXName = System.Xml.Linq.XName.Get("FpgUid", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName codeDatumXName = System.Xml.Linq.XName.Get("codeDatum", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName valGeoAccuracyXName = System.Xml.Linq.XName.Get("valGeoAccuracy", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName uomGeoAccuracyXName = System.Xml.Linq.XName.Get("uomGeoAccuracy", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName valElevAccuracyXName = System.Xml.Linq.XName.Get("valElevAccuracy", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName valGeoidUndulationXName = System.Xml.Linq.XName.Get("valGeoidUndulation", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName uomDistVerXName = System.Xml.Linq.XName.Get("uomDistVer", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName txtRmkXName = System.Xml.Linq.XName.Get("txtRmk", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName FppXName = System.Xml.Linq.XName.Get("Fpp", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<FatoProtectionAreaGeometryPointType> FppField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName sourceXName = System.Xml.Linq.XName.Get("source", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("FatoProtectionAreaGeometryType", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator FatoProtectionAreaGeometryType(XElement xe) { return XTypedServices.ToXTypedElement<FatoProtectionAreaGeometryType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static FatoProtectionAreaGeometryType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(FpgUidXName), new NamedContentModelEntity(codeDatumXName), new NamedContentModelEntity(valGeoAccuracyXName), new NamedContentModelEntity(uomGeoAccuracyXName), new NamedContentModelEntity(valElevAccuracyXName), new NamedContentModelEntity(valGeoidUndulationXName), new NamedContentModelEntity(uomDistVerXName), new NamedContentModelEntity(txtRmkXName), new NamedContentModelEntity(FppXName));
        }
        
        /// <summary>
        /// <para>
        /// FATO protect area geometry
        /// </para>
        /// <para>
        /// Regular expression: (FpgUid, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, valElevAccuracy?, valGeoidUndulation?, uomDistVer?, txtRmk?, Fpp+)
        /// </para>
        /// </summary>
        public FatoProtectionAreaGeometryType() {
        }
        
        /// <summary>
        /// <para>
        /// a version of FATO protect area geometry
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (FpgUid, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, valElevAccuracy?, valGeoidUndulation?, uomDistVer?, txtRmk?, Fpp+)
        /// </para>
        /// </summary>
        public virtual FatoProtectionAreaGeometryUidType FpgUid {
            get {
                XElement x = this.GetElement(FpgUidXName);
                return ((FatoProtectionAreaGeometryUidType)(x));
            }
            set {
                this.SetElement(FpgUidXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Datum
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (FpgUid, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, valElevAccuracy?, valGeoidUndulation?, uomDistVer?, txtRmk?, Fpp+)
        /// </para>
        /// </summary>
        public virtual codeDatum codeDatum {
            get {
                XElement x = this.GetElement(codeDatumXName);
                return ((codeDatum)(x));
            }
            set {
                this.SetElement(codeDatumXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Geographical accuracy
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (FpgUid, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, valElevAccuracy?, valGeoidUndulation?, uomDistVer?, txtRmk?, Fpp+)
        /// </para>
        /// </summary>
        public virtual valDistHorz valGeoAccuracy {
            get {
                XElement x = this.GetElement(valGeoAccuracyXName);
                return ((valDistHorz)(x));
            }
            set {
                this.SetElement(valGeoAccuracyXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Unit of measurement [geographical accuracy]
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (FpgUid, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, valElevAccuracy?, valGeoidUndulation?, uomDistVer?, txtRmk?, Fpp+)
        /// </para>
        /// </summary>
        public virtual uomDistHorz uomGeoAccuracy {
            get {
                XElement x = this.GetElement(uomGeoAccuracyXName);
                return ((uomDistHorz)(x));
            }
            set {
                this.SetElement(uomGeoAccuracyXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Elevation accuracy
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (FpgUid, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, valElevAccuracy?, valGeoidUndulation?, uomDistVer?, txtRmk?, Fpp+)
        /// </para>
        /// </summary>
        public virtual valDistVer valElevAccuracy {
            get {
                XElement x = this.GetElement(valElevAccuracyXName);
                return ((valDistVer)(x));
            }
            set {
                this.SetElement(valElevAccuracyXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Geoid undulation
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (FpgUid, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, valElevAccuracy?, valGeoidUndulation?, uomDistVer?, txtRmk?, Fpp+)
        /// </para>
        /// </summary>
        public virtual valDistVer valGeoidUndulation {
            get {
                XElement x = this.GetElement(valGeoidUndulationXName);
                return ((valDistVer)(x));
            }
            set {
                this.SetElement(valGeoidUndulationXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Unit of measurement [vertical distance]
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (FpgUid, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, valElevAccuracy?, valGeoidUndulation?, uomDistVer?, txtRmk?, Fpp+)
        /// </para>
        /// </summary>
        public virtual uomElev uomDistVer {
            get {
                XElement x = this.GetElement(uomDistVerXName);
                return ((uomElev)(x));
            }
            set {
                this.SetElement(uomDistVerXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Remark
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (FpgUid, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, valElevAccuracy?, valGeoidUndulation?, uomDistVer?, txtRmk?, Fpp+)
        /// </para>
        /// </summary>
        public virtual txtRmk txtRmk {
            get {
                XElement x = this.GetElement(txtRmkXName);
                return ((txtRmk)(x));
            }
            set {
                this.SetElement(txtRmkXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// FATO protect area geometry is described with FATO protection area geometry point
        /// </para>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (FpgUid, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, valElevAccuracy?, valGeoidUndulation?, uomDistVer?, txtRmk?, Fpp+)
        /// </para>
        /// </summary>
        public virtual IList<FatoProtectionAreaGeometryPointType> Fpp {
            get {
                if ((this.FppField == null)) {
                    this.FppField = new XTypedList<FatoProtectionAreaGeometryPointType>(this, LinqToXsdTypeManager.Instance, FppXName);
                }
                return this.FppField;
            }
            set {
                if ((value == null)) {
                    this.FppField = null;
                }
                else {
                    if ((this.FppField == null)) {
                        this.FppField = XTypedList<FatoProtectionAreaGeometryPointType>.Initialize(this, LinqToXsdTypeManager.Instance, value, FppXName);
                    }
                    else {
                        XTypedServices.SetList<FatoProtectionAreaGeometryPointType>(this.FppField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string source {
            get {
                XAttribute x = this.Attribute(sourceXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(sourceXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<FatoProtectionAreaGeometryType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(FpgUidXName, typeof(FatoProtectionAreaGeometryUidType));
            localElementDictionary.Add(codeDatumXName, typeof(codeDatum));
            localElementDictionary.Add(valGeoAccuracyXName, typeof(valDistHorz));
            localElementDictionary.Add(uomGeoAccuracyXName, typeof(uomDistHorz));
            localElementDictionary.Add(valElevAccuracyXName, typeof(valDistVer));
            localElementDictionary.Add(valGeoidUndulationXName, typeof(valDistVer));
            localElementDictionary.Add(uomDistVerXName, typeof(uomElev));
            localElementDictionary.Add(txtRmkXName, typeof(txtRmk));
            localElementDictionary.Add(FppXName, typeof(FatoProtectionAreaGeometryPointType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// FATO protection area geometry - UID
    /// </para>
    /// <para>
    /// Regular expression: (FpaUid)
    /// </para>
    /// </summary>
    public partial class FatoProtectionAreaGeometryUidType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName FpaUidXName = System.Xml.Linq.XName.Get("FpaUid", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName midXName = System.Xml.Linq.XName.Get("mid", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("FatoProtectionAreaGeometryUidType", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator FatoProtectionAreaGeometryUidType(XElement xe) { return XTypedServices.ToXTypedElement<FatoProtectionAreaGeometryUidType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static FatoProtectionAreaGeometryUidType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(FpaUidXName));
        }
        
        /// <summary>
        /// <para>
        /// FATO protection area geometry - UID
        /// </para>
        /// <para>
        /// Regular expression: (FpaUid)
        /// </para>
        /// </summary>
        public FatoProtectionAreaGeometryUidType() {
        }
        
        /// <summary>
        /// <para>
        /// FATO protect area geometry is associated with FATO protection area
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (FpaUid)
        /// </para>
        /// </summary>
        public virtual FatoProtectionAreaUidType FpaUid {
            get {
                XElement x = this.GetElement(FpaUidXName);
                return ((FatoProtectionAreaUidType)(x));
            }
            set {
                this.SetElement(FpaUidXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string mid {
            get {
                XAttribute x = this.Attribute(midXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(midXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<FatoProtectionAreaGeometryUidType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(FpaUidXName, typeof(FatoProtectionAreaUidType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// FATO protection area
    /// </para>
    /// <para>
    /// Regular expression: (FpaUid, valWid?, valLen?, uomDim?, codeComposition?, codePreparation?, codeCondSfc?, valPcnClass?, codePcnPavementType?, codePcnPavementSubgrade?, codePcnMaxTirePressure?, valPcnMaxTirePressure?, codePcnEvalMethod?, txtPcnNote?, valLcnClass?, valSiwlWeight?, uomSiwlWeight?, valSiwlTirePressure?, uomSiwlTirePressure?, valAuwWeight?, uomAuwWeight?, codeSts?, txtLgt?, txtRmk?)
    /// </para>
    /// </summary>
    public partial class FatoProtectionAreaType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName FpaUidXName = System.Xml.Linq.XName.Get("FpaUid", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName valWidXName = System.Xml.Linq.XName.Get("valWid", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName valLenXName = System.Xml.Linq.XName.Get("valLen", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName uomDimXName = System.Xml.Linq.XName.Get("uomDim", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName codeCompositionXName = System.Xml.Linq.XName.Get("codeComposition", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName codePreparationXName = System.Xml.Linq.XName.Get("codePreparation", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName codeCondSfcXName = System.Xml.Linq.XName.Get("codeCondSfc", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName valPcnClassXName = System.Xml.Linq.XName.Get("valPcnClass", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName codePcnPavementTypeXName = System.Xml.Linq.XName.Get("codePcnPavementType", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName codePcnPavementSubgradeXName = System.Xml.Linq.XName.Get("codePcnPavementSubgrade", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName codePcnMaxTirePressureXName = System.Xml.Linq.XName.Get("codePcnMaxTirePressure", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName valPcnMaxTirePressureXName = System.Xml.Linq.XName.Get("valPcnMaxTirePressure", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName codePcnEvalMethodXName = System.Xml.Linq.XName.Get("codePcnEvalMethod", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName txtPcnNoteXName = System.Xml.Linq.XName.Get("txtPcnNote", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName valLcnClassXName = System.Xml.Linq.XName.Get("valLcnClass", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName valSiwlWeightXName = System.Xml.Linq.XName.Get("valSiwlWeight", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName uomSiwlWeightXName = System.Xml.Linq.XName.Get("uomSiwlWeight", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName valSiwlTirePressureXName = System.Xml.Linq.XName.Get("valSiwlTirePressure", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName uomSiwlTirePressureXName = System.Xml.Linq.XName.Get("uomSiwlTirePressure", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName valAuwWeightXName = System.Xml.Linq.XName.Get("valAuwWeight", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName uomAuwWeightXName = System.Xml.Linq.XName.Get("uomAuwWeight", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName codeStsXName = System.Xml.Linq.XName.Get("codeSts", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName txtLgtXName = System.Xml.Linq.XName.Get("txtLgt", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName txtRmkXName = System.Xml.Linq.XName.Get("txtRmk", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName sourceXName = System.Xml.Linq.XName.Get("source", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("FatoProtectionAreaType", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator FatoProtectionAreaType(XElement xe) { return XTypedServices.ToXTypedElement<FatoProtectionAreaType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static FatoProtectionAreaType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(FpaUidXName), new NamedContentModelEntity(valWidXName), new NamedContentModelEntity(valLenXName), new NamedContentModelEntity(uomDimXName), new NamedContentModelEntity(codeCompositionXName), new NamedContentModelEntity(codePreparationXName), new NamedContentModelEntity(codeCondSfcXName), new NamedContentModelEntity(valPcnClassXName), new NamedContentModelEntity(codePcnPavementTypeXName), new NamedContentModelEntity(codePcnPavementSubgradeXName), new NamedContentModelEntity(codePcnMaxTirePressureXName), new NamedContentModelEntity(valPcnMaxTirePressureXName), new NamedContentModelEntity(codePcnEvalMethodXName), new NamedContentModelEntity(txtPcnNoteXName), new NamedContentModelEntity(valLcnClassXName), new NamedContentModelEntity(valSiwlWeightXName), new NamedContentModelEntity(uomSiwlWeightXName), new NamedContentModelEntity(valSiwlTirePressureXName), new NamedContentModelEntity(uomSiwlTirePressureXName), new NamedContentModelEntity(valAuwWeightXName), new NamedContentModelEntity(uomAuwWeightXName), new NamedContentModelEntity(codeStsXName), new NamedContentModelEntity(txtLgtXName), new NamedContentModelEntity(txtRmkXName));
        }
        
        /// <summary>
        /// <para>
        /// FATO protection area
        /// </para>
        /// <para>
        /// Regular expression: (FpaUid, valWid?, valLen?, uomDim?, codeComposition?, codePreparation?, codeCondSfc?, valPcnClass?, codePcnPavementType?, codePcnPavementSubgrade?, codePcnMaxTirePressure?, valPcnMaxTirePressure?, codePcnEvalMethod?, txtPcnNote?, valLcnClass?, valSiwlWeight?, uomSiwlWeight?, valSiwlTirePressure?, uomSiwlTirePressure?, valAuwWeight?, uomAuwWeight?, codeSts?, txtLgt?, txtRmk?)
        /// </para>
        /// </summary>
        public FatoProtectionAreaType() {
        }
        
        /// <summary>
        /// <para>
        /// a version of FATO protection area
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (FpaUid, valWid?, valLen?, uomDim?, codeComposition?, codePreparation?, codeCondSfc?, valPcnClass?, codePcnPavementType?, codePcnPavementSubgrade?, codePcnMaxTirePressure?, valPcnMaxTirePressure?, codePcnEvalMethod?, txtPcnNote?, valLcnClass?, valSiwlWeight?, uomSiwlWeight?, valSiwlTirePressure?, uomSiwlTirePressure?, valAuwWeight?, uomAuwWeight?, codeSts?, txtLgt?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual FatoProtectionAreaUidType FpaUid {
            get {
                XElement x = this.GetElement(FpaUidXName);
                return ((FatoProtectionAreaUidType)(x));
            }
            set {
                this.SetElement(FpaUidXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Width
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (FpaUid, valWid?, valLen?, uomDim?, codeComposition?, codePreparation?, codeCondSfc?, valPcnClass?, codePcnPavementType?, codePcnPavementSubgrade?, codePcnMaxTirePressure?, valPcnMaxTirePressure?, codePcnEvalMethod?, txtPcnNote?, valLcnClass?, valSiwlWeight?, uomSiwlWeight?, valSiwlTirePressure?, uomSiwlTirePressure?, valAuwWeight?, uomAuwWeight?, codeSts?, txtLgt?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual valDistHorz valWid {
            get {
                XElement x = this.GetElement(valWidXName);
                return ((valDistHorz)(x));
            }
            set {
                this.SetElement(valWidXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Length
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (FpaUid, valWid?, valLen?, uomDim?, codeComposition?, codePreparation?, codeCondSfc?, valPcnClass?, codePcnPavementType?, codePcnPavementSubgrade?, codePcnMaxTirePressure?, valPcnMaxTirePressure?, codePcnEvalMethod?, txtPcnNote?, valLcnClass?, valSiwlWeight?, uomSiwlWeight?, valSiwlTirePressure?, uomSiwlTirePressure?, valAuwWeight?, uomAuwWeight?, codeSts?, txtLgt?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual valDistHorz valLen {
            get {
                XElement x = this.GetElement(valLenXName);
                return ((valDistHorz)(x));
            }
            set {
                this.SetElement(valLenXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Unit of measurement [horizontal dimension]
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (FpaUid, valWid?, valLen?, uomDim?, codeComposition?, codePreparation?, codeCondSfc?, valPcnClass?, codePcnPavementType?, codePcnPavementSubgrade?, codePcnMaxTirePressure?, valPcnMaxTirePressure?, codePcnEvalMethod?, txtPcnNote?, valLcnClass?, valSiwlWeight?, uomSiwlWeight?, valSiwlTirePressure?, uomSiwlTirePressure?, valAuwWeight?, uomAuwWeight?, codeSts?, txtLgt?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual uomDistHorz uomDim {
            get {
                XElement x = this.GetElement(uomDimXName);
                return ((uomDistHorz)(x));
            }
            set {
                this.SetElement(uomDimXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Surface composition
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (FpaUid, valWid?, valLen?, uomDim?, codeComposition?, codePreparation?, codeCondSfc?, valPcnClass?, codePcnPavementType?, codePcnPavementSubgrade?, codePcnMaxTirePressure?, valPcnMaxTirePressure?, codePcnEvalMethod?, txtPcnNote?, valLcnClass?, valSiwlWeight?, uomSiwlWeight?, valSiwlTirePressure?, uomSiwlTirePressure?, valAuwWeight?, uomAuwWeight?, codeSts?, txtLgt?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual codeCompositionSfc codeComposition {
            get {
                XElement x = this.GetElement(codeCompositionXName);
                return ((codeCompositionSfc)(x));
            }
            set {
                this.SetElement(codeCompositionXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Surface preparation method
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (FpaUid, valWid?, valLen?, uomDim?, codeComposition?, codePreparation?, codeCondSfc?, valPcnClass?, codePcnPavementType?, codePcnPavementSubgrade?, codePcnMaxTirePressure?, valPcnMaxTirePressure?, codePcnEvalMethod?, txtPcnNote?, valLcnClass?, valSiwlWeight?, uomSiwlWeight?, valSiwlTirePressure?, uomSiwlTirePressure?, valAuwWeight?, uomAuwWeight?, codeSts?, txtLgt?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual codePreparationSfc codePreparation {
            get {
                XElement x = this.GetElement(codePreparationXName);
                return ((codePreparationSfc)(x));
            }
            set {
                this.SetElement(codePreparationXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Surface condition
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (FpaUid, valWid?, valLen?, uomDim?, codeComposition?, codePreparation?, codeCondSfc?, valPcnClass?, codePcnPavementType?, codePcnPavementSubgrade?, codePcnMaxTirePressure?, valPcnMaxTirePressure?, codePcnEvalMethod?, txtPcnNote?, valLcnClass?, valSiwlWeight?, uomSiwlWeight?, valSiwlTirePressure?, uomSiwlTirePressure?, valAuwWeight?, uomAuwWeight?, codeSts?, txtLgt?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual codeCondSfc codeCondSfc {
            get {
                XElement x = this.GetElement(codeCondSfcXName);
                return ((codeCondSfc)(x));
            }
            set {
                this.SetElement(codeCondSfcXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// PCN (Pavement Classification Number) value
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (FpaUid, valWid?, valLen?, uomDim?, codeComposition?, codePreparation?, codeCondSfc?, valPcnClass?, codePcnPavementType?, codePcnPavementSubgrade?, codePcnMaxTirePressure?, valPcnMaxTirePressure?, codePcnEvalMethod?, txtPcnNote?, valLcnClass?, valSiwlWeight?, uomSiwlWeight?, valSiwlTirePressure?, uomSiwlTirePressure?, valAuwWeight?, uomAuwWeight?, codeSts?, txtLgt?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual valPcnClass valPcnClass {
            get {
                XElement x = this.GetElement(valPcnClassXName);
                return ((valPcnClass)(x));
            }
            set {
                this.SetElement(valPcnClassXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// PCN pavement type
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (FpaUid, valWid?, valLen?, uomDim?, codeComposition?, codePreparation?, codeCondSfc?, valPcnClass?, codePcnPavementType?, codePcnPavementSubgrade?, codePcnMaxTirePressure?, valPcnMaxTirePressure?, codePcnEvalMethod?, txtPcnNote?, valLcnClass?, valSiwlWeight?, uomSiwlWeight?, valSiwlTirePressure?, uomSiwlTirePressure?, valAuwWeight?, uomAuwWeight?, codeSts?, txtLgt?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual codePcnPavementType codePcnPavementType {
            get {
                XElement x = this.GetElement(codePcnPavementTypeXName);
                return ((codePcnPavementType)(x));
            }
            set {
                this.SetElement(codePcnPavementTypeXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// PCN pavement subgrade
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (FpaUid, valWid?, valLen?, uomDim?, codeComposition?, codePreparation?, codeCondSfc?, valPcnClass?, codePcnPavementType?, codePcnPavementSubgrade?, codePcnMaxTirePressure?, valPcnMaxTirePressure?, codePcnEvalMethod?, txtPcnNote?, valLcnClass?, valSiwlWeight?, uomSiwlWeight?, valSiwlTirePressure?, uomSiwlTirePressure?, valAuwWeight?, uomAuwWeight?, codeSts?, txtLgt?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual codePcnPavementSubgrade codePcnPavementSubgrade {
            get {
                XElement x = this.GetElement(codePcnPavementSubgradeXName);
                return ((codePcnPavementSubgrade)(x));
            }
            set {
                this.SetElement(codePcnPavementSubgradeXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// PCN max tire pressure code
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (FpaUid, valWid?, valLen?, uomDim?, codeComposition?, codePreparation?, codeCondSfc?, valPcnClass?, codePcnPavementType?, codePcnPavementSubgrade?, codePcnMaxTirePressure?, valPcnMaxTirePressure?, codePcnEvalMethod?, txtPcnNote?, valLcnClass?, valSiwlWeight?, uomSiwlWeight?, valSiwlTirePressure?, uomSiwlTirePressure?, valAuwWeight?, uomAuwWeight?, codeSts?, txtLgt?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual codePcnMaxTirePressure codePcnMaxTirePressure {
            get {
                XElement x = this.GetElement(codePcnMaxTirePressureXName);
                return ((codePcnMaxTirePressure)(x));
            }
            set {
                this.SetElement(codePcnMaxTirePressureXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// PCN max tire pressure value
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (FpaUid, valWid?, valLen?, uomDim?, codeComposition?, codePreparation?, codeCondSfc?, valPcnClass?, codePcnPavementType?, codePcnPavementSubgrade?, codePcnMaxTirePressure?, valPcnMaxTirePressure?, codePcnEvalMethod?, txtPcnNote?, valLcnClass?, valSiwlWeight?, uomSiwlWeight?, valSiwlTirePressure?, uomSiwlTirePressure?, valAuwWeight?, uomAuwWeight?, codeSts?, txtLgt?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual valPressurePcnTire valPcnMaxTirePressure {
            get {
                XElement x = this.GetElement(valPcnMaxTirePressureXName);
                return ((valPressurePcnTire)(x));
            }
            set {
                this.SetElement(valPcnMaxTirePressureXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// PCN evaluation method
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (FpaUid, valWid?, valLen?, uomDim?, codeComposition?, codePreparation?, codeCondSfc?, valPcnClass?, codePcnPavementType?, codePcnPavementSubgrade?, codePcnMaxTirePressure?, valPcnMaxTirePressure?, codePcnEvalMethod?, txtPcnNote?, valLcnClass?, valSiwlWeight?, uomSiwlWeight?, valSiwlTirePressure?, uomSiwlTirePressure?, valAuwWeight?, uomAuwWeight?, codeSts?, txtLgt?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual codePcnEvalMethod codePcnEvalMethod {
            get {
                XElement x = this.GetElement(codePcnEvalMethodXName);
                return ((codePcnEvalMethod)(x));
            }
            set {
                this.SetElement(codePcnEvalMethodXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// PCN notes
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (FpaUid, valWid?, valLen?, uomDim?, codeComposition?, codePreparation?, codeCondSfc?, valPcnClass?, codePcnPavementType?, codePcnPavementSubgrade?, codePcnMaxTirePressure?, valPcnMaxTirePressure?, codePcnEvalMethod?, txtPcnNote?, valLcnClass?, valSiwlWeight?, uomSiwlWeight?, valSiwlTirePressure?, uomSiwlTirePressure?, valAuwWeight?, uomAuwWeight?, codeSts?, txtLgt?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual txtRmk txtPcnNote {
            get {
                XElement x = this.GetElement(txtPcnNoteXName);
                return ((txtRmk)(x));
            }
            set {
                this.SetElement(txtPcnNoteXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// LCN value
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (FpaUid, valWid?, valLen?, uomDim?, codeComposition?, codePreparation?, codeCondSfc?, valPcnClass?, codePcnPavementType?, codePcnPavementSubgrade?, codePcnMaxTirePressure?, valPcnMaxTirePressure?, codePcnEvalMethod?, txtPcnNote?, valLcnClass?, valSiwlWeight?, uomSiwlWeight?, valSiwlTirePressure?, uomSiwlTirePressure?, valAuwWeight?, uomAuwWeight?, codeSts?, txtLgt?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual valLcnClass valLcnClass {
            get {
                XElement x = this.GetElement(valLcnClassXName);
                return ((valLcnClass)(x));
            }
            set {
                this.SetElement(valLcnClassXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// SIWL weight
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (FpaUid, valWid?, valLen?, uomDim?, codeComposition?, codePreparation?, codeCondSfc?, valPcnClass?, codePcnPavementType?, codePcnPavementSubgrade?, codePcnMaxTirePressure?, valPcnMaxTirePressure?, codePcnEvalMethod?, txtPcnNote?, valLcnClass?, valSiwlWeight?, uomSiwlWeight?, valSiwlTirePressure?, uomSiwlTirePressure?, valAuwWeight?, uomAuwWeight?, codeSts?, txtLgt?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual valWeight valSiwlWeight {
            get {
                XElement x = this.GetElement(valSiwlWeightXName);
                return ((valWeight)(x));
            }
            set {
                this.SetElement(valSiwlWeightXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Unit of measurement [SIWL weight]
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (FpaUid, valWid?, valLen?, uomDim?, codeComposition?, codePreparation?, codeCondSfc?, valPcnClass?, codePcnPavementType?, codePcnPavementSubgrade?, codePcnMaxTirePressure?, valPcnMaxTirePressure?, codePcnEvalMethod?, txtPcnNote?, valLcnClass?, valSiwlWeight?, uomSiwlWeight?, valSiwlTirePressure?, uomSiwlTirePressure?, valAuwWeight?, uomAuwWeight?, codeSts?, txtLgt?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual uomWeight uomSiwlWeight {
            get {
                XElement x = this.GetElement(uomSiwlWeightXName);
                return ((uomWeight)(x));
            }
            set {
                this.SetElement(uomSiwlWeightXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// SIWL tire pressure
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (FpaUid, valWid?, valLen?, uomDim?, codeComposition?, codePreparation?, codeCondSfc?, valPcnClass?, codePcnPavementType?, codePcnPavementSubgrade?, codePcnMaxTirePressure?, valPcnMaxTirePressure?, codePcnEvalMethod?, txtPcnNote?, valLcnClass?, valSiwlWeight?, uomSiwlWeight?, valSiwlTirePressure?, uomSiwlTirePressure?, valAuwWeight?, uomAuwWeight?, codeSts?, txtLgt?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual valPressure valSiwlTirePressure {
            get {
                XElement x = this.GetElement(valSiwlTirePressureXName);
                return ((valPressure)(x));
            }
            set {
                this.SetElement(valSiwlTirePressureXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Unit of measurement [SIWL tire pressure]
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (FpaUid, valWid?, valLen?, uomDim?, codeComposition?, codePreparation?, codeCondSfc?, valPcnClass?, codePcnPavementType?, codePcnPavementSubgrade?, codePcnMaxTirePressure?, valPcnMaxTirePressure?, codePcnEvalMethod?, txtPcnNote?, valLcnClass?, valSiwlWeight?, uomSiwlWeight?, valSiwlTirePressure?, uomSiwlTirePressure?, valAuwWeight?, uomAuwWeight?, codeSts?, txtLgt?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual uomPressure uomSiwlTirePressure {
            get {
                XElement x = this.GetElement(uomSiwlTirePressureXName);
                return ((uomPressure)(x));
            }
            set {
                this.SetElement(uomSiwlTirePressureXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// All Up Wheel weight
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (FpaUid, valWid?, valLen?, uomDim?, codeComposition?, codePreparation?, codeCondSfc?, valPcnClass?, codePcnPavementType?, codePcnPavementSubgrade?, codePcnMaxTirePressure?, valPcnMaxTirePressure?, codePcnEvalMethod?, txtPcnNote?, valLcnClass?, valSiwlWeight?, uomSiwlWeight?, valSiwlTirePressure?, uomSiwlTirePressure?, valAuwWeight?, uomAuwWeight?, codeSts?, txtLgt?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual valWeight valAuwWeight {
            get {
                XElement x = this.GetElement(valAuwWeightXName);
                return ((valWeight)(x));
            }
            set {
                this.SetElement(valAuwWeightXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Unit of measurement [AUW weight]
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (FpaUid, valWid?, valLen?, uomDim?, codeComposition?, codePreparation?, codeCondSfc?, valPcnClass?, codePcnPavementType?, codePcnPavementSubgrade?, codePcnMaxTirePressure?, valPcnMaxTirePressure?, codePcnEvalMethod?, txtPcnNote?, valLcnClass?, valSiwlWeight?, uomSiwlWeight?, valSiwlTirePressure?, uomSiwlTirePressure?, valAuwWeight?, uomAuwWeight?, codeSts?, txtLgt?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual uomWeight uomAuwWeight {
            get {
                XElement x = this.GetElement(uomAuwWeightXName);
                return ((uomWeight)(x));
            }
            set {
                this.SetElement(uomAuwWeightXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Operational status
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (FpaUid, valWid?, valLen?, uomDim?, codeComposition?, codePreparation?, codeCondSfc?, valPcnClass?, codePcnPavementType?, codePcnPavementSubgrade?, codePcnMaxTirePressure?, valPcnMaxTirePressure?, codePcnEvalMethod?, txtPcnNote?, valLcnClass?, valSiwlWeight?, uomSiwlWeight?, valSiwlTirePressure?, uomSiwlTirePressure?, valAuwWeight?, uomAuwWeight?, codeSts?, txtLgt?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual codeStsSfc codeSts {
            get {
                XElement x = this.GetElement(codeStsXName);
                return ((codeStsSfc)(x));
            }
            set {
                this.SetElement(codeStsXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Lighting system description
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (FpaUid, valWid?, valLen?, uomDim?, codeComposition?, codePreparation?, codeCondSfc?, valPcnClass?, codePcnPavementType?, codePcnPavementSubgrade?, codePcnMaxTirePressure?, valPcnMaxTirePressure?, codePcnEvalMethod?, txtPcnNote?, valLcnClass?, valSiwlWeight?, uomSiwlWeight?, valSiwlTirePressure?, uomSiwlTirePressure?, valAuwWeight?, uomAuwWeight?, codeSts?, txtLgt?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual txtDescr txtLgt {
            get {
                XElement x = this.GetElement(txtLgtXName);
                return ((txtDescr)(x));
            }
            set {
                this.SetElement(txtLgtXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Remark
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (FpaUid, valWid?, valLen?, uomDim?, codeComposition?, codePreparation?, codeCondSfc?, valPcnClass?, codePcnPavementType?, codePcnPavementSubgrade?, codePcnMaxTirePressure?, valPcnMaxTirePressure?, codePcnEvalMethod?, txtPcnNote?, valLcnClass?, valSiwlWeight?, uomSiwlWeight?, valSiwlTirePressure?, uomSiwlTirePressure?, valAuwWeight?, uomAuwWeight?, codeSts?, txtLgt?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual txtRmk txtRmk {
            get {
                XElement x = this.GetElement(txtRmkXName);
                return ((txtRmk)(x));
            }
            set {
                this.SetElement(txtRmkXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string source {
            get {
                XAttribute x = this.Attribute(sourceXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(sourceXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<FatoProtectionAreaType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(FpaUidXName, typeof(FatoProtectionAreaUidType));
            localElementDictionary.Add(valWidXName, typeof(valDistHorz));
            localElementDictionary.Add(valLenXName, typeof(valDistHorz));
            localElementDictionary.Add(uomDimXName, typeof(uomDistHorz));
            localElementDictionary.Add(codeCompositionXName, typeof(codeCompositionSfc));
            localElementDictionary.Add(codePreparationXName, typeof(codePreparationSfc));
            localElementDictionary.Add(codeCondSfcXName, typeof(codeCondSfc));
            localElementDictionary.Add(valPcnClassXName, typeof(valPcnClass));
            localElementDictionary.Add(codePcnPavementTypeXName, typeof(codePcnPavementType));
            localElementDictionary.Add(codePcnPavementSubgradeXName, typeof(codePcnPavementSubgrade));
            localElementDictionary.Add(codePcnMaxTirePressureXName, typeof(codePcnMaxTirePressure));
            localElementDictionary.Add(valPcnMaxTirePressureXName, typeof(valPressurePcnTire));
            localElementDictionary.Add(codePcnEvalMethodXName, typeof(codePcnEvalMethod));
            localElementDictionary.Add(txtPcnNoteXName, typeof(txtRmk));
            localElementDictionary.Add(valLcnClassXName, typeof(valLcnClass));
            localElementDictionary.Add(valSiwlWeightXName, typeof(valWeight));
            localElementDictionary.Add(uomSiwlWeightXName, typeof(uomWeight));
            localElementDictionary.Add(valSiwlTirePressureXName, typeof(valPressure));
            localElementDictionary.Add(uomSiwlTirePressureXName, typeof(uomPressure));
            localElementDictionary.Add(valAuwWeightXName, typeof(valWeight));
            localElementDictionary.Add(uomAuwWeightXName, typeof(uomWeight));
            localElementDictionary.Add(codeStsXName, typeof(codeStsSfc));
            localElementDictionary.Add(txtLgtXName, typeof(txtDescr));
            localElementDictionary.Add(txtRmkXName, typeof(txtRmk));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// FATO protection area - UID
    /// </para>
    /// <para>
    /// Regular expression: (FdnUid, codeType)
    /// </para>
    /// </summary>
    public partial class FatoProtectionAreaUidType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName FdnUidXName = System.Xml.Linq.XName.Get("FdnUid", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName codeTypeXName = System.Xml.Linq.XName.Get("codeType", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName midXName = System.Xml.Linq.XName.Get("mid", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("FatoProtectionAreaUidType", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator FatoProtectionAreaUidType(XElement xe) { return XTypedServices.ToXTypedElement<FatoProtectionAreaUidType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static FatoProtectionAreaUidType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(FdnUidXName), new NamedContentModelEntity(codeTypeXName));
        }
        
        /// <summary>
        /// <para>
        /// FATO protection area - UID
        /// </para>
        /// <para>
        /// Regular expression: (FdnUid, codeType)
        /// </para>
        /// </summary>
        public FatoProtectionAreaUidType() {
        }
        
        /// <summary>
        /// <para>
        /// FATO protection area is encompassing Approach and take-off direction of a FATO
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (FdnUid, codeType)
        /// </para>
        /// </summary>
        public virtual FatoDirectionUidType FdnUid {
            get {
                XElement x = this.GetElement(FdnUidXName);
                return ((FatoDirectionUidType)(x));
            }
            set {
                this.SetElement(FdnUidXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Type
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (FdnUid, codeType)
        /// </para>
        /// </summary>
        public virtual codeTypeProtectAreaFato codeType {
            get {
                XElement x = this.GetElement(codeTypeXName);
                return ((codeTypeProtectAreaFato)(x));
            }
            set {
                this.SetElement(codeTypeXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string mid {
            get {
                XAttribute x = this.Attribute(midXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(midXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<FatoProtectionAreaUidType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(FdnUidXName, typeof(FatoDirectionUidType));
            localElementDictionary.Add(codeTypeXName, typeof(codeTypeProtectAreaFato));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Final approach and take-off area [FATO]
    /// </para>
    /// <para>
    /// Regular expression: (FtoUid, txtName?, valLen?, valWid?, valMaxDim?, uomDim?, codeComposition?, codePreparation?, codeCondSfc?, valPcnClass?, codePcnPavementType?, codePcnPavementSubgrade?, codePcnMaxTirePressure?, valPcnMaxTirePressure?, codePcnEvalMethod?, txtPcnNote?, valLcnClass?, valSiwlWeight?, uomSiwlWeight?, valSiwlTirePressure?, uomSiwlTirePressure?, valAuwWeight?, uomAuwWeight?, codeStrength?, txtDescrStrength?, txtProfile?, txtMarking?, codeSts?, txtRmk?)
    /// </para>
    /// </summary>
    public partial class FatoType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName FtoUidXName = System.Xml.Linq.XName.Get("FtoUid", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName txtNameXName = System.Xml.Linq.XName.Get("txtName", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName valLenXName = System.Xml.Linq.XName.Get("valLen", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName valWidXName = System.Xml.Linq.XName.Get("valWid", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName valMaxDimXName = System.Xml.Linq.XName.Get("valMaxDim", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName uomDimXName = System.Xml.Linq.XName.Get("uomDim", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName codeCompositionXName = System.Xml.Linq.XName.Get("codeComposition", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName codePreparationXName = System.Xml.Linq.XName.Get("codePreparation", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName codeCondSfcXName = System.Xml.Linq.XName.Get("codeCondSfc", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName valPcnClassXName = System.Xml.Linq.XName.Get("valPcnClass", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName codePcnPavementTypeXName = System.Xml.Linq.XName.Get("codePcnPavementType", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName codePcnPavementSubgradeXName = System.Xml.Linq.XName.Get("codePcnPavementSubgrade", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName codePcnMaxTirePressureXName = System.Xml.Linq.XName.Get("codePcnMaxTirePressure", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName valPcnMaxTirePressureXName = System.Xml.Linq.XName.Get("valPcnMaxTirePressure", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName codePcnEvalMethodXName = System.Xml.Linq.XName.Get("codePcnEvalMethod", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName txtPcnNoteXName = System.Xml.Linq.XName.Get("txtPcnNote", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName valLcnClassXName = System.Xml.Linq.XName.Get("valLcnClass", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName valSiwlWeightXName = System.Xml.Linq.XName.Get("valSiwlWeight", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName uomSiwlWeightXName = System.Xml.Linq.XName.Get("uomSiwlWeight", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName valSiwlTirePressureXName = System.Xml.Linq.XName.Get("valSiwlTirePressure", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName uomSiwlTirePressureXName = System.Xml.Linq.XName.Get("uomSiwlTirePressure", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName valAuwWeightXName = System.Xml.Linq.XName.Get("valAuwWeight", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName uomAuwWeightXName = System.Xml.Linq.XName.Get("uomAuwWeight", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName codeStrengthXName = System.Xml.Linq.XName.Get("codeStrength", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName txtDescrStrengthXName = System.Xml.Linq.XName.Get("txtDescrStrength", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName txtProfileXName = System.Xml.Linq.XName.Get("txtProfile", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName txtMarkingXName = System.Xml.Linq.XName.Get("txtMarking", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName codeStsXName = System.Xml.Linq.XName.Get("codeSts", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName txtRmkXName = System.Xml.Linq.XName.Get("txtRmk", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName midXName = System.Xml.Linq.XName.Get("mid", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName sourceXName = System.Xml.Linq.XName.Get("source", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("FatoType", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator FatoType(XElement xe) { return XTypedServices.ToXTypedElement<FatoType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static FatoType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(FtoUidXName), new NamedContentModelEntity(txtNameXName), new NamedContentModelEntity(valLenXName), new NamedContentModelEntity(valWidXName), new NamedContentModelEntity(valMaxDimXName), new NamedContentModelEntity(uomDimXName), new NamedContentModelEntity(codeCompositionXName), new NamedContentModelEntity(codePreparationXName), new NamedContentModelEntity(codeCondSfcXName), new NamedContentModelEntity(valPcnClassXName), new NamedContentModelEntity(codePcnPavementTypeXName), new NamedContentModelEntity(codePcnPavementSubgradeXName), new NamedContentModelEntity(codePcnMaxTirePressureXName), new NamedContentModelEntity(valPcnMaxTirePressureXName), new NamedContentModelEntity(codePcnEvalMethodXName), new NamedContentModelEntity(txtPcnNoteXName), new NamedContentModelEntity(valLcnClassXName), new NamedContentModelEntity(valSiwlWeightXName), new NamedContentModelEntity(uomSiwlWeightXName), new NamedContentModelEntity(valSiwlTirePressureXName), new NamedContentModelEntity(uomSiwlTirePressureXName), new NamedContentModelEntity(valAuwWeightXName), new NamedContentModelEntity(uomAuwWeightXName), new NamedContentModelEntity(codeStrengthXName), new NamedContentModelEntity(txtDescrStrengthXName), new NamedContentModelEntity(txtProfileXName), new NamedContentModelEntity(txtMarkingXName), new NamedContentModelEntity(codeStsXName), new NamedContentModelEntity(txtRmkXName));
        }
        
        /// <summary>
        /// <para>
        /// Final approach and take-off area [FATO]
        /// </para>
        /// <para>
        /// Regular expression: (FtoUid, txtName?, valLen?, valWid?, valMaxDim?, uomDim?, codeComposition?, codePreparation?, codeCondSfc?, valPcnClass?, codePcnPavementType?, codePcnPavementSubgrade?, codePcnMaxTirePressure?, valPcnMaxTirePressure?, codePcnEvalMethod?, txtPcnNote?, valLcnClass?, valSiwlWeight?, uomSiwlWeight?, valSiwlTirePressure?, uomSiwlTirePressure?, valAuwWeight?, uomAuwWeight?, codeStrength?, txtDescrStrength?, txtProfile?, txtMarking?, codeSts?, txtRmk?)
        /// </para>
        /// </summary>
        public FatoType() {
        }
        
        /// <summary>
        /// <para>
        /// FATO is a version of final approach and take-off area [FATO]
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (FtoUid, txtName?, valLen?, valWid?, valMaxDim?, uomDim?, codeComposition?, codePreparation?, codeCondSfc?, valPcnClass?, codePcnPavementType?, codePcnPavementSubgrade?, codePcnMaxTirePressure?, valPcnMaxTirePressure?, codePcnEvalMethod?, txtPcnNote?, valLcnClass?, valSiwlWeight?, uomSiwlWeight?, valSiwlTirePressure?, uomSiwlTirePressure?, valAuwWeight?, uomAuwWeight?, codeStrength?, txtDescrStrength?, txtProfile?, txtMarking?, codeSts?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual FatoUidType FtoUid {
            get {
                XElement x = this.GetElement(FtoUidXName);
                return ((FatoUidType)(x));
            }
            set {
                this.SetElement(FtoUidXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// [Deprecated] Name
        /// </para>
        /// <para>
        /// DEPRECATED-4.5
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (FtoUid, txtName?, valLen?, valWid?, valMaxDim?, uomDim?, codeComposition?, codePreparation?, codeCondSfc?, valPcnClass?, codePcnPavementType?, codePcnPavementSubgrade?, codePcnMaxTirePressure?, valPcnMaxTirePressure?, codePcnEvalMethod?, txtPcnNote?, valLcnClass?, valSiwlWeight?, uomSiwlWeight?, valSiwlTirePressure?, uomSiwlTirePressure?, valAuwWeight?, uomAuwWeight?, codeStrength?, txtDescrStrength?, txtProfile?, txtMarking?, codeSts?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual txtName txtName {
            get {
                XElement x = this.GetElement(txtNameXName);
                return ((txtName)(x));
            }
            set {
                this.SetElement(txtNameXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Length
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (FtoUid, txtName?, valLen?, valWid?, valMaxDim?, uomDim?, codeComposition?, codePreparation?, codeCondSfc?, valPcnClass?, codePcnPavementType?, codePcnPavementSubgrade?, codePcnMaxTirePressure?, valPcnMaxTirePressure?, codePcnEvalMethod?, txtPcnNote?, valLcnClass?, valSiwlWeight?, uomSiwlWeight?, valSiwlTirePressure?, uomSiwlTirePressure?, valAuwWeight?, uomAuwWeight?, codeStrength?, txtDescrStrength?, txtProfile?, txtMarking?, codeSts?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual valDistHorz valLen {
            get {
                XElement x = this.GetElement(valLenXName);
                return ((valDistHorz)(x));
            }
            set {
                this.SetElement(valLenXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Width
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (FtoUid, txtName?, valLen?, valWid?, valMaxDim?, uomDim?, codeComposition?, codePreparation?, codeCondSfc?, valPcnClass?, codePcnPavementType?, codePcnPavementSubgrade?, codePcnMaxTirePressure?, valPcnMaxTirePressure?, codePcnEvalMethod?, txtPcnNote?, valLcnClass?, valSiwlWeight?, uomSiwlWeight?, valSiwlTirePressure?, uomSiwlTirePressure?, valAuwWeight?, uomAuwWeight?, codeStrength?, txtDescrStrength?, txtProfile?, txtMarking?, codeSts?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual valDistHorz valWid {
            get {
                XElement x = this.GetElement(valWidXName);
                return ((valDistHorz)(x));
            }
            set {
                this.SetElement(valWidXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Largest overall dimension as defined in ICAO annex 14
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (FtoUid, txtName?, valLen?, valWid?, valMaxDim?, uomDim?, codeComposition?, codePreparation?, codeCondSfc?, valPcnClass?, codePcnPavementType?, codePcnPavementSubgrade?, codePcnMaxTirePressure?, valPcnMaxTirePressure?, codePcnEvalMethod?, txtPcnNote?, valLcnClass?, valSiwlWeight?, uomSiwlWeight?, valSiwlTirePressure?, uomSiwlTirePressure?, valAuwWeight?, uomAuwWeight?, codeStrength?, txtDescrStrength?, txtProfile?, txtMarking?, codeSts?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual valDistHorz valMaxDim {
            get {
                XElement x = this.GetElement(valMaxDimXName);
                return ((valDistHorz)(x));
            }
            set {
                this.SetElement(valMaxDimXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Unit of measurement [horizontal dimension]
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (FtoUid, txtName?, valLen?, valWid?, valMaxDim?, uomDim?, codeComposition?, codePreparation?, codeCondSfc?, valPcnClass?, codePcnPavementType?, codePcnPavementSubgrade?, codePcnMaxTirePressure?, valPcnMaxTirePressure?, codePcnEvalMethod?, txtPcnNote?, valLcnClass?, valSiwlWeight?, uomSiwlWeight?, valSiwlTirePressure?, uomSiwlTirePressure?, valAuwWeight?, uomAuwWeight?, codeStrength?, txtDescrStrength?, txtProfile?, txtMarking?, codeSts?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual uomDistHorz uomDim {
            get {
                XElement x = this.GetElement(uomDimXName);
                return ((uomDistHorz)(x));
            }
            set {
                this.SetElement(uomDimXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Surface composition
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (FtoUid, txtName?, valLen?, valWid?, valMaxDim?, uomDim?, codeComposition?, codePreparation?, codeCondSfc?, valPcnClass?, codePcnPavementType?, codePcnPavementSubgrade?, codePcnMaxTirePressure?, valPcnMaxTirePressure?, codePcnEvalMethod?, txtPcnNote?, valLcnClass?, valSiwlWeight?, uomSiwlWeight?, valSiwlTirePressure?, uomSiwlTirePressure?, valAuwWeight?, uomAuwWeight?, codeStrength?, txtDescrStrength?, txtProfile?, txtMarking?, codeSts?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual codeCompositionSfc codeComposition {
            get {
                XElement x = this.GetElement(codeCompositionXName);
                return ((codeCompositionSfc)(x));
            }
            set {
                this.SetElement(codeCompositionXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Surface preparation method
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (FtoUid, txtName?, valLen?, valWid?, valMaxDim?, uomDim?, codeComposition?, codePreparation?, codeCondSfc?, valPcnClass?, codePcnPavementType?, codePcnPavementSubgrade?, codePcnMaxTirePressure?, valPcnMaxTirePressure?, codePcnEvalMethod?, txtPcnNote?, valLcnClass?, valSiwlWeight?, uomSiwlWeight?, valSiwlTirePressure?, uomSiwlTirePressure?, valAuwWeight?, uomAuwWeight?, codeStrength?, txtDescrStrength?, txtProfile?, txtMarking?, codeSts?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual codePreparationSfc codePreparation {
            get {
                XElement x = this.GetElement(codePreparationXName);
                return ((codePreparationSfc)(x));
            }
            set {
                this.SetElement(codePreparationXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Surface condition
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (FtoUid, txtName?, valLen?, valWid?, valMaxDim?, uomDim?, codeComposition?, codePreparation?, codeCondSfc?, valPcnClass?, codePcnPavementType?, codePcnPavementSubgrade?, codePcnMaxTirePressure?, valPcnMaxTirePressure?, codePcnEvalMethod?, txtPcnNote?, valLcnClass?, valSiwlWeight?, uomSiwlWeight?, valSiwlTirePressure?, uomSiwlTirePressure?, valAuwWeight?, uomAuwWeight?, codeStrength?, txtDescrStrength?, txtProfile?, txtMarking?, codeSts?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual codeCondSfc codeCondSfc {
            get {
                XElement x = this.GetElement(codeCondSfcXName);
                return ((codeCondSfc)(x));
            }
            set {
                this.SetElement(codeCondSfcXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// PCN (Pavement Classification Number) value
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (FtoUid, txtName?, valLen?, valWid?, valMaxDim?, uomDim?, codeComposition?, codePreparation?, codeCondSfc?, valPcnClass?, codePcnPavementType?, codePcnPavementSubgrade?, codePcnMaxTirePressure?, valPcnMaxTirePressure?, codePcnEvalMethod?, txtPcnNote?, valLcnClass?, valSiwlWeight?, uomSiwlWeight?, valSiwlTirePressure?, uomSiwlTirePressure?, valAuwWeight?, uomAuwWeight?, codeStrength?, txtDescrStrength?, txtProfile?, txtMarking?, codeSts?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual valPcnClass valPcnClass {
            get {
                XElement x = this.GetElement(valPcnClassXName);
                return ((valPcnClass)(x));
            }
            set {
                this.SetElement(valPcnClassXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// PCN pavement type
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (FtoUid, txtName?, valLen?, valWid?, valMaxDim?, uomDim?, codeComposition?, codePreparation?, codeCondSfc?, valPcnClass?, codePcnPavementType?, codePcnPavementSubgrade?, codePcnMaxTirePressure?, valPcnMaxTirePressure?, codePcnEvalMethod?, txtPcnNote?, valLcnClass?, valSiwlWeight?, uomSiwlWeight?, valSiwlTirePressure?, uomSiwlTirePressure?, valAuwWeight?, uomAuwWeight?, codeStrength?, txtDescrStrength?, txtProfile?, txtMarking?, codeSts?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual codePcnPavementType codePcnPavementType {
            get {
                XElement x = this.GetElement(codePcnPavementTypeXName);
                return ((codePcnPavementType)(x));
            }
            set {
                this.SetElement(codePcnPavementTypeXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// PCN pavement subgrade
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (FtoUid, txtName?, valLen?, valWid?, valMaxDim?, uomDim?, codeComposition?, codePreparation?, codeCondSfc?, valPcnClass?, codePcnPavementType?, codePcnPavementSubgrade?, codePcnMaxTirePressure?, valPcnMaxTirePressure?, codePcnEvalMethod?, txtPcnNote?, valLcnClass?, valSiwlWeight?, uomSiwlWeight?, valSiwlTirePressure?, uomSiwlTirePressure?, valAuwWeight?, uomAuwWeight?, codeStrength?, txtDescrStrength?, txtProfile?, txtMarking?, codeSts?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual codePcnPavementSubgrade codePcnPavementSubgrade {
            get {
                XElement x = this.GetElement(codePcnPavementSubgradeXName);
                return ((codePcnPavementSubgrade)(x));
            }
            set {
                this.SetElement(codePcnPavementSubgradeXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// PCN max tire pressure code
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (FtoUid, txtName?, valLen?, valWid?, valMaxDim?, uomDim?, codeComposition?, codePreparation?, codeCondSfc?, valPcnClass?, codePcnPavementType?, codePcnPavementSubgrade?, codePcnMaxTirePressure?, valPcnMaxTirePressure?, codePcnEvalMethod?, txtPcnNote?, valLcnClass?, valSiwlWeight?, uomSiwlWeight?, valSiwlTirePressure?, uomSiwlTirePressure?, valAuwWeight?, uomAuwWeight?, codeStrength?, txtDescrStrength?, txtProfile?, txtMarking?, codeSts?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual codePcnMaxTirePressure codePcnMaxTirePressure {
            get {
                XElement x = this.GetElement(codePcnMaxTirePressureXName);
                return ((codePcnMaxTirePressure)(x));
            }
            set {
                this.SetElement(codePcnMaxTirePressureXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// PCN max tire pressure value
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (FtoUid, txtName?, valLen?, valWid?, valMaxDim?, uomDim?, codeComposition?, codePreparation?, codeCondSfc?, valPcnClass?, codePcnPavementType?, codePcnPavementSubgrade?, codePcnMaxTirePressure?, valPcnMaxTirePressure?, codePcnEvalMethod?, txtPcnNote?, valLcnClass?, valSiwlWeight?, uomSiwlWeight?, valSiwlTirePressure?, uomSiwlTirePressure?, valAuwWeight?, uomAuwWeight?, codeStrength?, txtDescrStrength?, txtProfile?, txtMarking?, codeSts?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual valPressurePcnTire valPcnMaxTirePressure {
            get {
                XElement x = this.GetElement(valPcnMaxTirePressureXName);
                return ((valPressurePcnTire)(x));
            }
            set {
                this.SetElement(valPcnMaxTirePressureXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// PCN evaluation method
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (FtoUid, txtName?, valLen?, valWid?, valMaxDim?, uomDim?, codeComposition?, codePreparation?, codeCondSfc?, valPcnClass?, codePcnPavementType?, codePcnPavementSubgrade?, codePcnMaxTirePressure?, valPcnMaxTirePressure?, codePcnEvalMethod?, txtPcnNote?, valLcnClass?, valSiwlWeight?, uomSiwlWeight?, valSiwlTirePressure?, uomSiwlTirePressure?, valAuwWeight?, uomAuwWeight?, codeStrength?, txtDescrStrength?, txtProfile?, txtMarking?, codeSts?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual codePcnEvalMethod codePcnEvalMethod {
            get {
                XElement x = this.GetElement(codePcnEvalMethodXName);
                return ((codePcnEvalMethod)(x));
            }
            set {
                this.SetElement(codePcnEvalMethodXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// PCN notes
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (FtoUid, txtName?, valLen?, valWid?, valMaxDim?, uomDim?, codeComposition?, codePreparation?, codeCondSfc?, valPcnClass?, codePcnPavementType?, codePcnPavementSubgrade?, codePcnMaxTirePressure?, valPcnMaxTirePressure?, codePcnEvalMethod?, txtPcnNote?, valLcnClass?, valSiwlWeight?, uomSiwlWeight?, valSiwlTirePressure?, uomSiwlTirePressure?, valAuwWeight?, uomAuwWeight?, codeStrength?, txtDescrStrength?, txtProfile?, txtMarking?, codeSts?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual txtRmk txtPcnNote {
            get {
                XElement x = this.GetElement(txtPcnNoteXName);
                return ((txtRmk)(x));
            }
            set {
                this.SetElement(txtPcnNoteXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// LCN value
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (FtoUid, txtName?, valLen?, valWid?, valMaxDim?, uomDim?, codeComposition?, codePreparation?, codeCondSfc?, valPcnClass?, codePcnPavementType?, codePcnPavementSubgrade?, codePcnMaxTirePressure?, valPcnMaxTirePressure?, codePcnEvalMethod?, txtPcnNote?, valLcnClass?, valSiwlWeight?, uomSiwlWeight?, valSiwlTirePressure?, uomSiwlTirePressure?, valAuwWeight?, uomAuwWeight?, codeStrength?, txtDescrStrength?, txtProfile?, txtMarking?, codeSts?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual valLcnClass valLcnClass {
            get {
                XElement x = this.GetElement(valLcnClassXName);
                return ((valLcnClass)(x));
            }
            set {
                this.SetElement(valLcnClassXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// SIWL weight
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (FtoUid, txtName?, valLen?, valWid?, valMaxDim?, uomDim?, codeComposition?, codePreparation?, codeCondSfc?, valPcnClass?, codePcnPavementType?, codePcnPavementSubgrade?, codePcnMaxTirePressure?, valPcnMaxTirePressure?, codePcnEvalMethod?, txtPcnNote?, valLcnClass?, valSiwlWeight?, uomSiwlWeight?, valSiwlTirePressure?, uomSiwlTirePressure?, valAuwWeight?, uomAuwWeight?, codeStrength?, txtDescrStrength?, txtProfile?, txtMarking?, codeSts?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual valWeight valSiwlWeight {
            get {
                XElement x = this.GetElement(valSiwlWeightXName);
                return ((valWeight)(x));
            }
            set {
                this.SetElement(valSiwlWeightXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Unit of measurement [SIWL weight]
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (FtoUid, txtName?, valLen?, valWid?, valMaxDim?, uomDim?, codeComposition?, codePreparation?, codeCondSfc?, valPcnClass?, codePcnPavementType?, codePcnPavementSubgrade?, codePcnMaxTirePressure?, valPcnMaxTirePressure?, codePcnEvalMethod?, txtPcnNote?, valLcnClass?, valSiwlWeight?, uomSiwlWeight?, valSiwlTirePressure?, uomSiwlTirePressure?, valAuwWeight?, uomAuwWeight?, codeStrength?, txtDescrStrength?, txtProfile?, txtMarking?, codeSts?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual uomWeight uomSiwlWeight {
            get {
                XElement x = this.GetElement(uomSiwlWeightXName);
                return ((uomWeight)(x));
            }
            set {
                this.SetElement(uomSiwlWeightXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// SIWL tire pressure
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (FtoUid, txtName?, valLen?, valWid?, valMaxDim?, uomDim?, codeComposition?, codePreparation?, codeCondSfc?, valPcnClass?, codePcnPavementType?, codePcnPavementSubgrade?, codePcnMaxTirePressure?, valPcnMaxTirePressure?, codePcnEvalMethod?, txtPcnNote?, valLcnClass?, valSiwlWeight?, uomSiwlWeight?, valSiwlTirePressure?, uomSiwlTirePressure?, valAuwWeight?, uomAuwWeight?, codeStrength?, txtDescrStrength?, txtProfile?, txtMarking?, codeSts?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual valPressure valSiwlTirePressure {
            get {
                XElement x = this.GetElement(valSiwlTirePressureXName);
                return ((valPressure)(x));
            }
            set {
                this.SetElement(valSiwlTirePressureXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Unit of measurement [SIWL tire pressure]
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (FtoUid, txtName?, valLen?, valWid?, valMaxDim?, uomDim?, codeComposition?, codePreparation?, codeCondSfc?, valPcnClass?, codePcnPavementType?, codePcnPavementSubgrade?, codePcnMaxTirePressure?, valPcnMaxTirePressure?, codePcnEvalMethod?, txtPcnNote?, valLcnClass?, valSiwlWeight?, uomSiwlWeight?, valSiwlTirePressure?, uomSiwlTirePressure?, valAuwWeight?, uomAuwWeight?, codeStrength?, txtDescrStrength?, txtProfile?, txtMarking?, codeSts?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual uomPressure uomSiwlTirePressure {
            get {
                XElement x = this.GetElement(uomSiwlTirePressureXName);
                return ((uomPressure)(x));
            }
            set {
                this.SetElement(uomSiwlTirePressureXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// All Up Wheel weight
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (FtoUid, txtName?, valLen?, valWid?, valMaxDim?, uomDim?, codeComposition?, codePreparation?, codeCondSfc?, valPcnClass?, codePcnPavementType?, codePcnPavementSubgrade?, codePcnMaxTirePressure?, valPcnMaxTirePressure?, codePcnEvalMethod?, txtPcnNote?, valLcnClass?, valSiwlWeight?, uomSiwlWeight?, valSiwlTirePressure?, uomSiwlTirePressure?, valAuwWeight?, uomAuwWeight?, codeStrength?, txtDescrStrength?, txtProfile?, txtMarking?, codeSts?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual valWeight valAuwWeight {
            get {
                XElement x = this.GetElement(valAuwWeightXName);
                return ((valWeight)(x));
            }
            set {
                this.SetElement(valAuwWeightXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Unit of measurement [AUW weight]
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (FtoUid, txtName?, valLen?, valWid?, valMaxDim?, uomDim?, codeComposition?, codePreparation?, codeCondSfc?, valPcnClass?, codePcnPavementType?, codePcnPavementSubgrade?, codePcnMaxTirePressure?, valPcnMaxTirePressure?, codePcnEvalMethod?, txtPcnNote?, valLcnClass?, valSiwlWeight?, uomSiwlWeight?, valSiwlTirePressure?, uomSiwlTirePressure?, valAuwWeight?, uomAuwWeight?, codeStrength?, txtDescrStrength?, txtProfile?, txtMarking?, codeSts?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual uomWeight uomAuwWeight {
            get {
                XElement x = this.GetElement(uomAuwWeightXName);
                return ((uomWeight)(x));
            }
            set {
                this.SetElement(uomAuwWeightXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// [Deprecated] Surface strength method
        /// </para>
        /// <para>
        /// DEPRECATED-4.5
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (FtoUid, txtName?, valLen?, valWid?, valMaxDim?, uomDim?, codeComposition?, codePreparation?, codeCondSfc?, valPcnClass?, codePcnPavementType?, codePcnPavementSubgrade?, codePcnMaxTirePressure?, valPcnMaxTirePressure?, codePcnEvalMethod?, txtPcnNote?, valLcnClass?, valSiwlWeight?, uomSiwlWeight?, valSiwlTirePressure?, uomSiwlTirePressure?, valAuwWeight?, uomAuwWeight?, codeStrength?, txtDescrStrength?, txtProfile?, txtMarking?, codeSts?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual codeStrengthSfc codeStrength {
            get {
                XElement x = this.GetElement(codeStrengthXName);
                return ((codeStrengthSfc)(x));
            }
            set {
                this.SetElement(codeStrengthXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// [Deprecated] Surface strength
        /// </para>
        /// <para>
        /// DEPRECATED-4.5
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (FtoUid, txtName?, valLen?, valWid?, valMaxDim?, uomDim?, codeComposition?, codePreparation?, codeCondSfc?, valPcnClass?, codePcnPavementType?, codePcnPavementSubgrade?, codePcnMaxTirePressure?, valPcnMaxTirePressure?, codePcnEvalMethod?, txtPcnNote?, valLcnClass?, valSiwlWeight?, uomSiwlWeight?, valSiwlTirePressure?, uomSiwlTirePressure?, valAuwWeight?, uomAuwWeight?, codeStrength?, txtDescrStrength?, txtProfile?, txtMarking?, codeSts?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual txtDescr txtDescrStrength {
            get {
                XElement x = this.GetElement(txtDescrStrengthXName);
                return ((txtDescr)(x));
            }
            set {
                this.SetElement(txtDescrStrengthXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Profile description
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (FtoUid, txtName?, valLen?, valWid?, valMaxDim?, uomDim?, codeComposition?, codePreparation?, codeCondSfc?, valPcnClass?, codePcnPavementType?, codePcnPavementSubgrade?, codePcnMaxTirePressure?, valPcnMaxTirePressure?, codePcnEvalMethod?, txtPcnNote?, valLcnClass?, valSiwlWeight?, uomSiwlWeight?, valSiwlTirePressure?, uomSiwlTirePressure?, valAuwWeight?, uomAuwWeight?, codeStrength?, txtDescrStrength?, txtProfile?, txtMarking?, codeSts?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual txtDescr txtProfile {
            get {
                XElement x = this.GetElement(txtProfileXName);
                return ((txtDescr)(x));
            }
            set {
                this.SetElement(txtProfileXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Marking
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (FtoUid, txtName?, valLen?, valWid?, valMaxDim?, uomDim?, codeComposition?, codePreparation?, codeCondSfc?, valPcnClass?, codePcnPavementType?, codePcnPavementSubgrade?, codePcnMaxTirePressure?, valPcnMaxTirePressure?, codePcnEvalMethod?, txtPcnNote?, valLcnClass?, valSiwlWeight?, uomSiwlWeight?, valSiwlTirePressure?, uomSiwlTirePressure?, valAuwWeight?, uomAuwWeight?, codeStrength?, txtDescrStrength?, txtProfile?, txtMarking?, codeSts?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual txtDescr txtMarking {
            get {
                XElement x = this.GetElement(txtMarkingXName);
                return ((txtDescr)(x));
            }
            set {
                this.SetElement(txtMarkingXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Operational status
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (FtoUid, txtName?, valLen?, valWid?, valMaxDim?, uomDim?, codeComposition?, codePreparation?, codeCondSfc?, valPcnClass?, codePcnPavementType?, codePcnPavementSubgrade?, codePcnMaxTirePressure?, valPcnMaxTirePressure?, codePcnEvalMethod?, txtPcnNote?, valLcnClass?, valSiwlWeight?, uomSiwlWeight?, valSiwlTirePressure?, uomSiwlTirePressure?, valAuwWeight?, uomAuwWeight?, codeStrength?, txtDescrStrength?, txtProfile?, txtMarking?, codeSts?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual codeStsSfc codeSts {
            get {
                XElement x = this.GetElement(codeStsXName);
                return ((codeStsSfc)(x));
            }
            set {
                this.SetElement(codeStsXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Remark
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (FtoUid, txtName?, valLen?, valWid?, valMaxDim?, uomDim?, codeComposition?, codePreparation?, codeCondSfc?, valPcnClass?, codePcnPavementType?, codePcnPavementSubgrade?, codePcnMaxTirePressure?, valPcnMaxTirePressure?, codePcnEvalMethod?, txtPcnNote?, valLcnClass?, valSiwlWeight?, uomSiwlWeight?, valSiwlTirePressure?, uomSiwlTirePressure?, valAuwWeight?, uomAuwWeight?, codeStrength?, txtDescrStrength?, txtProfile?, txtMarking?, codeSts?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual txtRmk txtRmk {
            get {
                XElement x = this.GetElement(txtRmkXName);
                return ((txtRmk)(x));
            }
            set {
                this.SetElement(txtRmkXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string mid {
            get {
                XAttribute x = this.Attribute(midXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(midXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string source {
            get {
                XAttribute x = this.Attribute(sourceXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(sourceXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<FatoType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(FtoUidXName, typeof(FatoUidType));
            localElementDictionary.Add(txtNameXName, typeof(txtName));
            localElementDictionary.Add(valLenXName, typeof(valDistHorz));
            localElementDictionary.Add(valWidXName, typeof(valDistHorz));
            localElementDictionary.Add(valMaxDimXName, typeof(valDistHorz));
            localElementDictionary.Add(uomDimXName, typeof(uomDistHorz));
            localElementDictionary.Add(codeCompositionXName, typeof(codeCompositionSfc));
            localElementDictionary.Add(codePreparationXName, typeof(codePreparationSfc));
            localElementDictionary.Add(codeCondSfcXName, typeof(codeCondSfc));
            localElementDictionary.Add(valPcnClassXName, typeof(valPcnClass));
            localElementDictionary.Add(codePcnPavementTypeXName, typeof(codePcnPavementType));
            localElementDictionary.Add(codePcnPavementSubgradeXName, typeof(codePcnPavementSubgrade));
            localElementDictionary.Add(codePcnMaxTirePressureXName, typeof(codePcnMaxTirePressure));
            localElementDictionary.Add(valPcnMaxTirePressureXName, typeof(valPressurePcnTire));
            localElementDictionary.Add(codePcnEvalMethodXName, typeof(codePcnEvalMethod));
            localElementDictionary.Add(txtPcnNoteXName, typeof(txtRmk));
            localElementDictionary.Add(valLcnClassXName, typeof(valLcnClass));
            localElementDictionary.Add(valSiwlWeightXName, typeof(valWeight));
            localElementDictionary.Add(uomSiwlWeightXName, typeof(uomWeight));
            localElementDictionary.Add(valSiwlTirePressureXName, typeof(valPressure));
            localElementDictionary.Add(uomSiwlTirePressureXName, typeof(uomPressure));
            localElementDictionary.Add(valAuwWeightXName, typeof(valWeight));
            localElementDictionary.Add(uomAuwWeightXName, typeof(uomWeight));
            localElementDictionary.Add(codeStrengthXName, typeof(codeStrengthSfc));
            localElementDictionary.Add(txtDescrStrengthXName, typeof(txtDescr));
            localElementDictionary.Add(txtProfileXName, typeof(txtDescr));
            localElementDictionary.Add(txtMarkingXName, typeof(txtDescr));
            localElementDictionary.Add(codeStsXName, typeof(codeStsSfc));
            localElementDictionary.Add(txtRmkXName, typeof(txtRmk));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Final approach and take-off area [FATO] - UID
    /// </para>
    /// <para>
    /// Regular expression: (AhpUid, txtDesig)
    /// </para>
    /// </summary>
    public partial class FatoUidType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName AhpUidXName = System.Xml.Linq.XName.Get("AhpUid", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName txtDesigXName = System.Xml.Linq.XName.Get("txtDesig", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName midXName = System.Xml.Linq.XName.Get("mid", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("FatoUidType", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator FatoUidType(XElement xe) { return XTypedServices.ToXTypedElement<FatoUidType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static FatoUidType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(AhpUidXName), new NamedContentModelEntity(txtDesigXName));
        }
        
        /// <summary>
        /// <para>
        /// Final approach and take-off area [FATO] - UID
        /// </para>
        /// <para>
        /// Regular expression: (AhpUid, txtDesig)
        /// </para>
        /// </summary>
        public FatoUidType() {
        }
        
        /// <summary>
        /// <para>
        /// Final approach and take-off area [FATO] is situated at Aerodrome/Heliport
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (AhpUid, txtDesig)
        /// </para>
        /// </summary>
        public virtual AerodromeHeliportUidType AhpUid {
            get {
                XElement x = this.GetElement(AhpUidXName);
                return ((AerodromeHeliportUidType)(x));
            }
            set {
                this.SetElement(AhpUidXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Designator
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (AhpUid, txtDesig)
        /// </para>
        /// </summary>
        public virtual txtDesig txtDesig {
            get {
                XElement x = this.GetElement(txtDesigXName);
                return ((txtDesig)(x));
            }
            set {
                this.SetElement(txtDesigXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string mid {
            get {
                XAttribute x = this.Attribute(midXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(midXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<FatoUidType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(AhpUidXName, typeof(AerodromeHeliportUidType));
            localElementDictionary.Add(txtDesigXName, typeof(txtDesig));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Flight class
    /// </para>
    /// <para>
    /// Regular expression: (codeType?, codeRule?, codeStatus?, codeMil?, codeOrigin?, codePurpose?)
    /// </para>
    /// </summary>
    public partial class FlightClassType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName codeTypeXName = System.Xml.Linq.XName.Get("codeType", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName codeRuleXName = System.Xml.Linq.XName.Get("codeRule", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName codeStatusXName = System.Xml.Linq.XName.Get("codeStatus", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName codeMilXName = System.Xml.Linq.XName.Get("codeMil", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName codeOriginXName = System.Xml.Linq.XName.Get("codeOrigin", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName codePurposeXName = System.Xml.Linq.XName.Get("codePurpose", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("FlightClassType", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator FlightClassType(XElement xe) { return XTypedServices.ToXTypedElement<FlightClassType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static FlightClassType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(codeTypeXName), new NamedContentModelEntity(codeRuleXName), new NamedContentModelEntity(codeStatusXName), new NamedContentModelEntity(codeMilXName), new NamedContentModelEntity(codeOriginXName), new NamedContentModelEntity(codePurposeXName));
        }
        
        /// <summary>
        /// <para>
        /// Flight class
        /// </para>
        /// <para>
        /// Regular expression: (codeType?, codeRule?, codeStatus?, codeMil?, codeOrigin?, codePurpose?)
        /// </para>
        /// </summary>
        public FlightClassType() {
        }
        
        /// <summary>
        /// <para>
        /// Type
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (codeType?, codeRule?, codeStatus?, codeMil?, codeOrigin?, codePurpose?)
        /// </para>
        /// </summary>
        public virtual codeFltType codeType {
            get {
                XElement x = this.GetElement(codeTypeXName);
                return ((codeFltType)(x));
            }
            set {
                this.SetElement(codeTypeXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Rule
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (codeType?, codeRule?, codeStatus?, codeMil?, codeOrigin?, codePurpose?)
        /// </para>
        /// </summary>
        public virtual codeTypeFltRule codeRule {
            get {
                XElement x = this.GetElement(codeRuleXName);
                return ((codeTypeFltRule)(x));
            }
            set {
                this.SetElement(codeRuleXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Status
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (codeType?, codeRule?, codeStatus?, codeMil?, codeOrigin?, codePurpose?)
        /// </para>
        /// </summary>
        public virtual codeFltStatus codeStatus {
            get {
                XElement x = this.GetElement(codeStatusXName);
                return ((codeFltStatus)(x));
            }
            set {
                this.SetElement(codeStatusXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Military
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (codeType?, codeRule?, codeStatus?, codeMil?, codeOrigin?, codePurpose?)
        /// </para>
        /// </summary>
        public virtual codeMil codeMil {
            get {
                XElement x = this.GetElement(codeMilXName);
                return ((codeMil)(x));
            }
            set {
                this.SetElement(codeMilXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Origin
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (codeType?, codeRule?, codeStatus?, codeMil?, codeOrigin?, codePurpose?)
        /// </para>
        /// </summary>
        public virtual codeOrigin codeOrigin {
            get {
                XElement x = this.GetElement(codeOriginXName);
                return ((codeOrigin)(x));
            }
            set {
                this.SetElement(codeOriginXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Purpose
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (codeType?, codeRule?, codeStatus?, codeMil?, codeOrigin?, codePurpose?)
        /// </para>
        /// </summary>
        public virtual codePurpose codePurpose {
            get {
                XElement x = this.GetElement(codePurposeXName);
                return ((codePurpose)(x));
            }
            set {
                this.SetElement(codePurposeXName, value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<FlightClassType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(codeTypeXName, typeof(codeFltType));
            localElementDictionary.Add(codeRuleXName, typeof(codeTypeFltRule));
            localElementDictionary.Add(codeStatusXName, typeof(codeFltStatus));
            localElementDictionary.Add(codeMilXName, typeof(codeMil));
            localElementDictionary.Add(codeOriginXName, typeof(codeOrigin));
            localElementDictionary.Add(codePurposeXName, typeof(codePurpose));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Flow condition element level
    /// </para>
    /// <para>
    /// Regular expression: (valDistVerLower, uomDistVerLower, codeDistVerLower, valDistVerUpper?, uomDistVerUpper?, codeDistVerUpper?)
    /// </para>
    /// </summary>
    public partial class FlowConditionElementLevelType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName valDistVerLowerXName = System.Xml.Linq.XName.Get("valDistVerLower", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName uomDistVerLowerXName = System.Xml.Linq.XName.Get("uomDistVerLower", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName codeDistVerLowerXName = System.Xml.Linq.XName.Get("codeDistVerLower", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName valDistVerUpperXName = System.Xml.Linq.XName.Get("valDistVerUpper", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName uomDistVerUpperXName = System.Xml.Linq.XName.Get("uomDistVerUpper", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName codeDistVerUpperXName = System.Xml.Linq.XName.Get("codeDistVerUpper", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("FlowConditionElementLevelType", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator FlowConditionElementLevelType(XElement xe) { return XTypedServices.ToXTypedElement<FlowConditionElementLevelType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static FlowConditionElementLevelType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(valDistVerLowerXName), new NamedContentModelEntity(uomDistVerLowerXName), new NamedContentModelEntity(codeDistVerLowerXName), new NamedContentModelEntity(valDistVerUpperXName), new NamedContentModelEntity(uomDistVerUpperXName), new NamedContentModelEntity(codeDistVerUpperXName));
        }
        
        /// <summary>
        /// <para>
        /// Flow condition element level
        /// </para>
        /// <para>
        /// Regular expression: (valDistVerLower, uomDistVerLower, codeDistVerLower, valDistVerUpper?, uomDistVerUpper?, codeDistVerUpper?)
        /// </para>
        /// </summary>
        public FlowConditionElementLevelType() {
        }
        
        /// <summary>
        /// <para>
        /// Lower limit
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (valDistVerLower, uomDistVerLower, codeDistVerLower, valDistVerUpper?, uomDistVerUpper?, codeDistVerUpper?)
        /// </para>
        /// </summary>
        public virtual valDistVer valDistVerLower {
            get {
                XElement x = this.GetElement(valDistVerLowerXName);
                return ((valDistVer)(x));
            }
            set {
                this.SetElement(valDistVerLowerXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Unit of measurement [lower limit]
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (valDistVerLower, uomDistVerLower, codeDistVerLower, valDistVerUpper?, uomDistVerUpper?, codeDistVerUpper?)
        /// </para>
        /// </summary>
        public virtual uomDistVer uomDistVerLower {
            get {
                XElement x = this.GetElement(uomDistVerLowerXName);
                return ((uomDistVer)(x));
            }
            set {
                this.SetElement(uomDistVerLowerXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Reference for lower limit
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (valDistVerLower, uomDistVerLower, codeDistVerLower, valDistVerUpper?, uomDistVerUpper?, codeDistVerUpper?)
        /// </para>
        /// </summary>
        public virtual codeDistVer codeDistVerLower {
            get {
                XElement x = this.GetElement(codeDistVerLowerXName);
                return ((codeDistVer)(x));
            }
            set {
                this.SetElement(codeDistVerLowerXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Upper limit
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (valDistVerLower, uomDistVerLower, codeDistVerLower, valDistVerUpper?, uomDistVerUpper?, codeDistVerUpper?)
        /// </para>
        /// </summary>
        public virtual valDistVer valDistVerUpper {
            get {
                XElement x = this.GetElement(valDistVerUpperXName);
                return ((valDistVer)(x));
            }
            set {
                this.SetElement(valDistVerUpperXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Unit of measurement [upper limit]
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (valDistVerLower, uomDistVerLower, codeDistVerLower, valDistVerUpper?, uomDistVerUpper?, codeDistVerUpper?)
        /// </para>
        /// </summary>
        public virtual uomDistVer uomDistVerUpper {
            get {
                XElement x = this.GetElement(uomDistVerUpperXName);
                return ((uomDistVer)(x));
            }
            set {
                this.SetElement(uomDistVerUpperXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Reference for upper limit
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (valDistVerLower, uomDistVerLower, codeDistVerLower, valDistVerUpper?, uomDistVerUpper?, codeDistVerUpper?)
        /// </para>
        /// </summary>
        public virtual codeDistVer codeDistVerUpper {
            get {
                XElement x = this.GetElement(codeDistVerUpperXName);
                return ((codeDistVer)(x));
            }
            set {
                this.SetElement(codeDistVerUpperXName, value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<FlowConditionElementLevelType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(valDistVerLowerXName, typeof(valDistVer));
            localElementDictionary.Add(uomDistVerLowerXName, typeof(uomDistVer));
            localElementDictionary.Add(codeDistVerLowerXName, typeof(codeDistVer));
            localElementDictionary.Add(valDistVerUpperXName, typeof(valDistVer));
            localElementDictionary.Add(uomDistVerUpperXName, typeof(uomDistVer));
            localElementDictionary.Add(codeDistVerUpperXName, typeof(codeDistVer));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Flow condition element
    /// </para>
    /// <para>
    /// Regular expression: ((TcnUidSpn | VorUidSpn | DpnUidSpn | NdbUidSpn | DmeUidSpn | MkrUidSpn | Seg | AseUid | Abc | AhpUid | Acs | Fcs | Dfl | Dct | Rpn | OrgUid | SiaUid | SidUid), Fcl*)
    /// </para>
    /// </summary>
    public partial class FlowConditionElementType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TcnUidSpnXName = System.Xml.Linq.XName.Get("TcnUidSpn", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName VorUidSpnXName = System.Xml.Linq.XName.Get("VorUidSpn", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName DpnUidSpnXName = System.Xml.Linq.XName.Get("DpnUidSpn", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName NdbUidSpnXName = System.Xml.Linq.XName.Get("NdbUidSpn", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName DmeUidSpnXName = System.Xml.Linq.XName.Get("DmeUidSpn", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName MkrUidSpnXName = System.Xml.Linq.XName.Get("MkrUidSpn", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName SegXName = System.Xml.Linq.XName.Get("Seg", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName AseUidXName = System.Xml.Linq.XName.Get("AseUid", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName AbcXName = System.Xml.Linq.XName.Get("Abc", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName AhpUidXName = System.Xml.Linq.XName.Get("AhpUid", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName AcsXName = System.Xml.Linq.XName.Get("Acs", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName FcsXName = System.Xml.Linq.XName.Get("Fcs", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName DflXName = System.Xml.Linq.XName.Get("Dfl", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName DctXName = System.Xml.Linq.XName.Get("Dct", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName RpnXName = System.Xml.Linq.XName.Get("Rpn", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName OrgUidXName = System.Xml.Linq.XName.Get("OrgUid", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName SiaUidXName = System.Xml.Linq.XName.Get("SiaUid", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName SidUidXName = System.Xml.Linq.XName.Get("SidUid", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName FclXName = System.Xml.Linq.XName.Get("Fcl", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<FlowConditionElementLevelType> FclField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName codeRefLocXName = System.Xml.Linq.XName.Get("codeRefLoc", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName codeRelWithLocXName = System.Xml.Linq.XName.Get("codeRelWithLoc", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("FlowConditionElementType", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator FlowConditionElementType(XElement xe) { return XTypedServices.ToXTypedElement<FlowConditionElementType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static FlowConditionElementType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new ChoiceContentModelEntity(new NamedContentModelEntity(TcnUidSpnXName), new NamedContentModelEntity(VorUidSpnXName), new NamedContentModelEntity(DpnUidSpnXName), new NamedContentModelEntity(NdbUidSpnXName), new NamedContentModelEntity(DmeUidSpnXName), new NamedContentModelEntity(MkrUidSpnXName), new NamedContentModelEntity(SegXName), new NamedContentModelEntity(AseUidXName), new NamedContentModelEntity(AbcXName), new NamedContentModelEntity(AhpUidXName), new NamedContentModelEntity(AcsXName), new NamedContentModelEntity(FcsXName), new NamedContentModelEntity(DflXName), new NamedContentModelEntity(DctXName), new NamedContentModelEntity(RpnXName), new NamedContentModelEntity(OrgUidXName), new NamedContentModelEntity(SiaUidXName), new NamedContentModelEntity(SidUidXName)), new NamedContentModelEntity(FclXName));
        }
        
        /// <summary>
        /// <para>
        /// Flow condition element
        /// </para>
        /// <para>
        /// Regular expression: ((TcnUidSpn | VorUidSpn | DpnUidSpn | NdbUidSpn | DmeUidSpn | MkrUidSpn | Seg | AseUid | Abc | AhpUid | Acs | Fcs | Dfl | Dct | Rpn | OrgUid | SiaUid | SidUid), Fcl*)
        /// </para>
        /// </summary>
        public FlowConditionElementType() {
        }
        
        /// <summary>
        /// <para>
        /// Significant point is at Tactical air navigation beacon [TACAN]
        /// </para>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((TcnUidSpn | VorUidSpn | DpnUidSpn | NdbUidSpn | DmeUidSpn | MkrUidSpn | Seg | AseUid | Abc | AhpUid | Acs | Fcs | Dfl | Dct | Rpn | OrgUid | SiaUid | SidUid), Fcl*)
        /// </para>
        /// </summary>
        public virtual TacanUidType TcnUidSpn {
            get {
                XElement x = this.GetElement(TcnUidSpnXName);
                return ((TacanUidType)(x));
            }
            set {
                this.SetElement(TcnUidSpnXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Significant point is at VHF omnidirectional radio range beacon [VOR]
        /// </para>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((TcnUidSpn | VorUidSpn | DpnUidSpn | NdbUidSpn | DmeUidSpn | MkrUidSpn | Seg | AseUid | Abc | AhpUid | Acs | Fcs | Dfl | Dct | Rpn | OrgUid | SiaUid | SidUid), Fcl*)
        /// </para>
        /// </summary>
        public virtual VorUidType VorUidSpn {
            get {
                XElement x = this.GetElement(VorUidSpnXName);
                return ((VorUidType)(x));
            }
            set {
                this.SetElement(VorUidSpnXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Significant point is at Designated point
        /// </para>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((TcnUidSpn | VorUidSpn | DpnUidSpn | NdbUidSpn | DmeUidSpn | MkrUidSpn | Seg | AseUid | Abc | AhpUid | Acs | Fcs | Dfl | Dct | Rpn | OrgUid | SiaUid | SidUid), Fcl*)
        /// </para>
        /// </summary>
        public virtual DesignatedPointUidType DpnUidSpn {
            get {
                XElement x = this.GetElement(DpnUidSpnXName);
                return ((DesignatedPointUidType)(x));
            }
            set {
                this.SetElement(DpnUidSpnXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Significant point is at Non-directional radio beacon [NDB]
        /// </para>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((TcnUidSpn | VorUidSpn | DpnUidSpn | NdbUidSpn | DmeUidSpn | MkrUidSpn | Seg | AseUid | Abc | AhpUid | Acs | Fcs | Dfl | Dct | Rpn | OrgUid | SiaUid | SidUid), Fcl*)
        /// </para>
        /// </summary>
        public virtual NdbUidType NdbUidSpn {
            get {
                XElement x = this.GetElement(NdbUidSpnXName);
                return ((NdbUidType)(x));
            }
            set {
                this.SetElement(NdbUidSpnXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Significant point is at Distance measuring equipment [DME]
        /// </para>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((TcnUidSpn | VorUidSpn | DpnUidSpn | NdbUidSpn | DmeUidSpn | MkrUidSpn | Seg | AseUid | Abc | AhpUid | Acs | Fcs | Dfl | Dct | Rpn | OrgUid | SiaUid | SidUid), Fcl*)
        /// </para>
        /// </summary>
        public virtual DmeUidType DmeUidSpn {
            get {
                XElement x = this.GetElement(DmeUidSpnXName);
                return ((DmeUidType)(x));
            }
            set {
                this.SetElement(DmeUidSpnXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Significant point is at Marker [MKR]
        /// </para>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((TcnUidSpn | VorUidSpn | DpnUidSpn | NdbUidSpn | DmeUidSpn | MkrUidSpn | Seg | AseUid | Abc | AhpUid | Acs | Fcs | Dfl | Dct | Rpn | OrgUid | SiaUid | SidUid), Fcl*)
        /// </para>
        /// </summary>
        public virtual MkrUidType MkrUidSpn {
            get {
                XElement x = this.GetElement(MkrUidSpnXName);
                return ((MkrUidType)(x));
            }
            set {
                this.SetElement(MkrUidSpnXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Flow condition element is based on segment
        /// </para>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((TcnUidSpn | VorUidSpn | DpnUidSpn | NdbUidSpn | DmeUidSpn | MkrUidSpn | Seg | AseUid | Abc | AhpUid | Acs | Fcs | Dfl | Dct | Rpn | OrgUid | SiaUid | SidUid), Fcl*)
        /// </para>
        /// </summary>
        public virtual SegLocalType Seg {
            get {
                XElement x = this.GetElement(SegXName);
                return ((SegLocalType)(x));
            }
            set {
                this.SetElement(SegXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Flow condition element is based on Airspace
        /// </para>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((TcnUidSpn | VorUidSpn | DpnUidSpn | NdbUidSpn | DmeUidSpn | MkrUidSpn | Seg | AseUid | Abc | AhpUid | Acs | Fcs | Dfl | Dct | Rpn | OrgUid | SiaUid | SidUid), Fcl*)
        /// </para>
        /// </summary>
        public virtual AirspaceUidType AseUid {
            get {
                XElement x = this.GetElement(AseUidXName);
                return ((AirspaceUidType)(x));
            }
            set {
                this.SetElement(AseUidXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Crossing airspace border
        /// </para>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((TcnUidSpn | VorUidSpn | DpnUidSpn | NdbUidSpn | DmeUidSpn | MkrUidSpn | Seg | AseUid | Abc | AhpUid | Acs | Fcs | Dfl | Dct | Rpn | OrgUid | SiaUid | SidUid), Fcl*)
        /// </para>
        /// </summary>
        public virtual AirspaceBorderCrossingType Abc {
            get {
                XElement x = this.GetElement(AbcXName);
                return ((AirspaceBorderCrossingType)(x));
            }
            set {
                this.SetElement(AbcXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Flow condition element is based on Aerodrome / Heliport
        /// </para>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((TcnUidSpn | VorUidSpn | DpnUidSpn | NdbUidSpn | DmeUidSpn | MkrUidSpn | Seg | AseUid | Abc | AhpUid | Acs | Fcs | Dfl | Dct | Rpn | OrgUid | SiaUid | SidUid), Fcl*)
        /// </para>
        /// </summary>
        public virtual AerodromeHeliportUidType AhpUid {
            get {
                XElement x = this.GetElement(AhpUidXName);
                return ((AerodromeHeliportUidType)(x));
            }
            set {
                this.SetElement(AhpUidXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Aircraft class
        /// </para>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((TcnUidSpn | VorUidSpn | DpnUidSpn | NdbUidSpn | DmeUidSpn | MkrUidSpn | Seg | AseUid | Abc | AhpUid | Acs | Fcs | Dfl | Dct | Rpn | OrgUid | SiaUid | SidUid), Fcl*)
        /// </para>
        /// </summary>
        public virtual AircraftClassType Acs {
            get {
                XElement x = this.GetElement(AcsXName);
                return ((AircraftClassType)(x));
            }
            set {
                this.SetElement(AcsXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Flight class
        /// </para>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((TcnUidSpn | VorUidSpn | DpnUidSpn | NdbUidSpn | DmeUidSpn | MkrUidSpn | Seg | AseUid | Abc | AhpUid | Acs | Fcs | Dfl | Dct | Rpn | OrgUid | SiaUid | SidUid), Fcl*)
        /// </para>
        /// </summary>
        public virtual FlightClassType Fcs {
            get {
                XElement x = this.GetElement(FcsXName);
                return ((FlightClassType)(x));
            }
            set {
                this.SetElement(FcsXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Direct (DCT) Class
        /// </para>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((TcnUidSpn | VorUidSpn | DpnUidSpn | NdbUidSpn | DmeUidSpn | MkrUidSpn | Seg | AseUid | Abc | AhpUid | Acs | Fcs | Dfl | Dct | Rpn | OrgUid | SiaUid | SidUid), Fcl*)
        /// </para>
        /// </summary>
        public virtual DirectFlightClassType Dfl {
            get {
                XElement x = this.GetElement(DflXName);
                return ((DirectFlightClassType)(x));
            }
            set {
                this.SetElement(DflXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Direct (DCT) segment
        /// </para>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((TcnUidSpn | VorUidSpn | DpnUidSpn | NdbUidSpn | DmeUidSpn | MkrUidSpn | Seg | AseUid | Abc | AhpUid | Acs | Fcs | Dfl | Dct | Rpn | OrgUid | SiaUid | SidUid), Fcl*)
        /// </para>
        /// </summary>
        public virtual DirectSegmentType Dct {
            get {
                XElement x = this.GetElement(DctXName);
                return ((DirectSegmentType)(x));
            }
            set {
                this.SetElement(DctXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Flow condition element is based on the availability of Route portion
        /// </para>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((TcnUidSpn | VorUidSpn | DpnUidSpn | NdbUidSpn | DmeUidSpn | MkrUidSpn | Seg | AseUid | Abc | AhpUid | Acs | Fcs | Dfl | Dct | Rpn | OrgUid | SiaUid | SidUid), Fcl*)
        /// </para>
        /// </summary>
        public virtual RoutePortionType Rpn {
            get {
                XElement x = this.GetElement(RpnXName);
                return ((RoutePortionType)(x));
            }
            set {
                this.SetElement(RpnXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Flow condition element is based on Organisaton or authority
        /// </para>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((TcnUidSpn | VorUidSpn | DpnUidSpn | NdbUidSpn | DmeUidSpn | MkrUidSpn | Seg | AseUid | Abc | AhpUid | Acs | Fcs | Dfl | Dct | Rpn | OrgUid | SiaUid | SidUid), Fcl*)
        /// </para>
        /// </summary>
        public virtual OrganisationAuthorityUidType OrgUid {
            get {
                XElement x = this.GetElement(OrgUidXName);
                return ((OrganisationAuthorityUidType)(x));
            }
            set {
                this.SetElement(OrgUidXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Flow condition element is based on STAR
        /// </para>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((TcnUidSpn | VorUidSpn | DpnUidSpn | NdbUidSpn | DmeUidSpn | MkrUidSpn | Seg | AseUid | Abc | AhpUid | Acs | Fcs | Dfl | Dct | Rpn | OrgUid | SiaUid | SidUid), Fcl*)
        /// </para>
        /// </summary>
        public virtual StarUidType SiaUid {
            get {
                XElement x = this.GetElement(SiaUidXName);
                return ((StarUidType)(x));
            }
            set {
                this.SetElement(SiaUidXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Flow condition element is based on SID
        /// </para>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((TcnUidSpn | VorUidSpn | DpnUidSpn | NdbUidSpn | DmeUidSpn | MkrUidSpn | Seg | AseUid | Abc | AhpUid | Acs | Fcs | Dfl | Dct | Rpn | OrgUid | SiaUid | SidUid), Fcl*)
        /// </para>
        /// </summary>
        public virtual SidUidType SidUid {
            get {
                XElement x = this.GetElement(SidUidXName);
                return ((SidUidType)(x));
            }
            set {
                this.SetElement(SidUidXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Flow condition element is associated with  Flow condition element level
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: ((TcnUidSpn | VorUidSpn | DpnUidSpn | NdbUidSpn | DmeUidSpn | MkrUidSpn | Seg | AseUid | Abc | AhpUid | Acs | Fcs | Dfl | Dct | Rpn | OrgUid | SiaUid | SidUid), Fcl*)
        /// </para>
        /// </summary>
        public virtual IList<FlowConditionElementLevelType> Fcl {
            get {
                if ((this.FclField == null)) {
                    this.FclField = new XTypedList<FlowConditionElementLevelType>(this, LinqToXsdTypeManager.Instance, FclXName);
                }
                return this.FclField;
            }
            set {
                if ((value == null)) {
                    this.FclField = null;
                }
                else {
                    if ((this.FclField == null)) {
                        this.FclField = XTypedList<FlowConditionElementLevelType>.Initialize(this, LinqToXsdTypeManager.Instance, value, FclXName);
                    }
                    else {
                        XTypedServices.SetList<FlowConditionElementLevelType>(this.FclField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual OFMX.codeYesNoBase codeRefLoc {
            get {
                XAttribute x = this.Attribute(codeRefLocXName);
                return ((OFMX.codeYesNoBase)(Enum.Parse(typeof(OFMX.codeYesNoBase), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetAttribute(codeRefLocXName, value.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual OFMX.codeRelWithLoc? codeRelWithLoc {
            get {
                XAttribute x = this.Attribute(codeRelWithLocXName);
                if ((x == null)) {
                    return null;
                }
                return ((OFMX.codeRelWithLoc)(Enum.Parse(typeof(OFMX.codeRelWithLoc), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetAttribute(codeRelWithLocXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<FlowConditionElementType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(TcnUidSpnXName, typeof(TacanUidType));
            localElementDictionary.Add(VorUidSpnXName, typeof(VorUidType));
            localElementDictionary.Add(DpnUidSpnXName, typeof(DesignatedPointUidType));
            localElementDictionary.Add(NdbUidSpnXName, typeof(NdbUidType));
            localElementDictionary.Add(DmeUidSpnXName, typeof(DmeUidType));
            localElementDictionary.Add(MkrUidSpnXName, typeof(MkrUidType));
            localElementDictionary.Add(SegXName, typeof(SegLocalType));
            localElementDictionary.Add(AseUidXName, typeof(AirspaceUidType));
            localElementDictionary.Add(AbcXName, typeof(AirspaceBorderCrossingType));
            localElementDictionary.Add(AhpUidXName, typeof(AerodromeHeliportUidType));
            localElementDictionary.Add(AcsXName, typeof(AircraftClassType));
            localElementDictionary.Add(FcsXName, typeof(FlightClassType));
            localElementDictionary.Add(DflXName, typeof(DirectFlightClassType));
            localElementDictionary.Add(DctXName, typeof(DirectSegmentType));
            localElementDictionary.Add(RpnXName, typeof(RoutePortionType));
            localElementDictionary.Add(OrgUidXName, typeof(OrganisationAuthorityUidType));
            localElementDictionary.Add(SiaUidXName, typeof(StarUidType));
            localElementDictionary.Add(SidUidXName, typeof(SidUidType));
            localElementDictionary.Add(FclXName, typeof(FlowConditionElementLevelType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: ((TcnUidSta | VorUidSta | DpnUidSta | NdbUidSta | DmeUidSta | MkrUidSta), (TcnUidEnd | VorUidEnd | DpnUidEnd | NdbUidEnd | DmeUidEnd | MkrUidEnd))
        /// </para>
        /// </summary>
        public partial class SegLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName TcnUidStaXName = System.Xml.Linq.XName.Get("TcnUidSta", "");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName VorUidStaXName = System.Xml.Linq.XName.Get("VorUidSta", "");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName DpnUidStaXName = System.Xml.Linq.XName.Get("DpnUidSta", "");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName NdbUidStaXName = System.Xml.Linq.XName.Get("NdbUidSta", "");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName DmeUidStaXName = System.Xml.Linq.XName.Get("DmeUidSta", "");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName MkrUidStaXName = System.Xml.Linq.XName.Get("MkrUidSta", "");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName TcnUidEndXName = System.Xml.Linq.XName.Get("TcnUidEnd", "");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName VorUidEndXName = System.Xml.Linq.XName.Get("VorUidEnd", "");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName DpnUidEndXName = System.Xml.Linq.XName.Get("DpnUidEnd", "");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName NdbUidEndXName = System.Xml.Linq.XName.Get("NdbUidEnd", "");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName DmeUidEndXName = System.Xml.Linq.XName.Get("DmeUidEnd", "");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName MkrUidEndXName = System.Xml.Linq.XName.Get("MkrUidEnd", "");
            
            private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("Seg", "");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;
            
		public static explicit operator SegLocalType(XElement xe) { return XTypedServices.ToXTypedElement<SegLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static SegLocalType() {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new ChoiceContentModelEntity(new NamedContentModelEntity(TcnUidStaXName), new NamedContentModelEntity(VorUidStaXName), new NamedContentModelEntity(DpnUidStaXName), new NamedContentModelEntity(NdbUidStaXName), new NamedContentModelEntity(DmeUidStaXName), new NamedContentModelEntity(MkrUidStaXName)), new ChoiceContentModelEntity(new NamedContentModelEntity(TcnUidEndXName), new NamedContentModelEntity(VorUidEndXName), new NamedContentModelEntity(DpnUidEndXName), new NamedContentModelEntity(NdbUidEndXName), new NamedContentModelEntity(DmeUidEndXName), new NamedContentModelEntity(MkrUidEndXName)));
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: ((TcnUidSta | VorUidSta | DpnUidSta | NdbUidSta | DmeUidSta | MkrUidSta), (TcnUidEnd | VorUidEnd | DpnUidEnd | NdbUidEnd | DmeUidEnd | MkrUidEnd))
            /// </para>
            /// </summary>
            public SegLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Start significant point is at Tactical air navigation beacon [TACAN]
            /// </para>
            /// <para>
            /// Occurrence: required, choice
            /// </para>
            /// <para>
            /// Setter: Appends
            /// </para>
            /// <para>
            /// Regular expression: ((TcnUidSta | VorUidSta | DpnUidSta | NdbUidSta | DmeUidSta | MkrUidSta), (TcnUidEnd | VorUidEnd | DpnUidEnd | NdbUidEnd | DmeUidEnd | MkrUidEnd))
            /// </para>
            /// </summary>
            public virtual TacanUidType TcnUidSta {
                get {
                    XElement x = this.GetElement(TcnUidStaXName);
                    return ((TacanUidType)(x));
                }
                set {
                    this.SetElement(TcnUidStaXName, value);
                }
            }
            
            /// <summary>
            /// <para>
            /// Start significant point is at VHF omnidirectional radio range beacon [VOR]
            /// </para>
            /// <para>
            /// Occurrence: required, choice
            /// </para>
            /// <para>
            /// Setter: Appends
            /// </para>
            /// <para>
            /// Regular expression: ((TcnUidSta | VorUidSta | DpnUidSta | NdbUidSta | DmeUidSta | MkrUidSta), (TcnUidEnd | VorUidEnd | DpnUidEnd | NdbUidEnd | DmeUidEnd | MkrUidEnd))
            /// </para>
            /// </summary>
            public virtual VorUidType VorUidSta {
                get {
                    XElement x = this.GetElement(VorUidStaXName);
                    return ((VorUidType)(x));
                }
                set {
                    this.SetElement(VorUidStaXName, value);
                }
            }
            
            /// <summary>
            /// <para>
            /// Start significant point is at Designated point
            /// </para>
            /// <para>
            /// Occurrence: required, choice
            /// </para>
            /// <para>
            /// Setter: Appends
            /// </para>
            /// <para>
            /// Regular expression: ((TcnUidSta | VorUidSta | DpnUidSta | NdbUidSta | DmeUidSta | MkrUidSta), (TcnUidEnd | VorUidEnd | DpnUidEnd | NdbUidEnd | DmeUidEnd | MkrUidEnd))
            /// </para>
            /// </summary>
            public virtual DesignatedPointUidType DpnUidSta {
                get {
                    XElement x = this.GetElement(DpnUidStaXName);
                    return ((DesignatedPointUidType)(x));
                }
                set {
                    this.SetElement(DpnUidStaXName, value);
                }
            }
            
            /// <summary>
            /// <para>
            /// Start significant point is at Non-directional radio beacon [NDB]
            /// </para>
            /// <para>
            /// Occurrence: required, choice
            /// </para>
            /// <para>
            /// Setter: Appends
            /// </para>
            /// <para>
            /// Regular expression: ((TcnUidSta | VorUidSta | DpnUidSta | NdbUidSta | DmeUidSta | MkrUidSta), (TcnUidEnd | VorUidEnd | DpnUidEnd | NdbUidEnd | DmeUidEnd | MkrUidEnd))
            /// </para>
            /// </summary>
            public virtual NdbUidType NdbUidSta {
                get {
                    XElement x = this.GetElement(NdbUidStaXName);
                    return ((NdbUidType)(x));
                }
                set {
                    this.SetElement(NdbUidStaXName, value);
                }
            }
            
            /// <summary>
            /// <para>
            /// Start significant point is at Distance measuring equipment [DME]
            /// </para>
            /// <para>
            /// Occurrence: required, choice
            /// </para>
            /// <para>
            /// Setter: Appends
            /// </para>
            /// <para>
            /// Regular expression: ((TcnUidSta | VorUidSta | DpnUidSta | NdbUidSta | DmeUidSta | MkrUidSta), (TcnUidEnd | VorUidEnd | DpnUidEnd | NdbUidEnd | DmeUidEnd | MkrUidEnd))
            /// </para>
            /// </summary>
            public virtual DmeUidType DmeUidSta {
                get {
                    XElement x = this.GetElement(DmeUidStaXName);
                    return ((DmeUidType)(x));
                }
                set {
                    this.SetElement(DmeUidStaXName, value);
                }
            }
            
            /// <summary>
            /// <para>
            /// Start significant point is at Marker [MKR]
            /// </para>
            /// <para>
            /// Occurrence: required, choice
            /// </para>
            /// <para>
            /// Setter: Appends
            /// </para>
            /// <para>
            /// Regular expression: ((TcnUidSta | VorUidSta | DpnUidSta | NdbUidSta | DmeUidSta | MkrUidSta), (TcnUidEnd | VorUidEnd | DpnUidEnd | NdbUidEnd | DmeUidEnd | MkrUidEnd))
            /// </para>
            /// </summary>
            public virtual MkrUidType MkrUidSta {
                get {
                    XElement x = this.GetElement(MkrUidStaXName);
                    return ((MkrUidType)(x));
                }
                set {
                    this.SetElement(MkrUidStaXName, value);
                }
            }
            
            /// <summary>
            /// <para>
            /// End significant point is at Tactical air navigation beacon [TACAN]
            /// </para>
            /// <para>
            /// Occurrence: required, choice
            /// </para>
            /// <para>
            /// Setter: Appends
            /// </para>
            /// <para>
            /// Regular expression: ((TcnUidSta | VorUidSta | DpnUidSta | NdbUidSta | DmeUidSta | MkrUidSta), (TcnUidEnd | VorUidEnd | DpnUidEnd | NdbUidEnd | DmeUidEnd | MkrUidEnd))
            /// </para>
            /// </summary>
            public virtual TacanUidType TcnUidEnd {
                get {
                    XElement x = this.GetElement(TcnUidEndXName);
                    return ((TacanUidType)(x));
                }
                set {
                    this.SetElement(TcnUidEndXName, value);
                }
            }
            
            /// <summary>
            /// <para>
            /// End significant point is at VHF omnidirectional radio range beacon [VOR]
            /// </para>
            /// <para>
            /// Occurrence: required, choice
            /// </para>
            /// <para>
            /// Setter: Appends
            /// </para>
            /// <para>
            /// Regular expression: ((TcnUidSta | VorUidSta | DpnUidSta | NdbUidSta | DmeUidSta | MkrUidSta), (TcnUidEnd | VorUidEnd | DpnUidEnd | NdbUidEnd | DmeUidEnd | MkrUidEnd))
            /// </para>
            /// </summary>
            public virtual VorUidType VorUidEnd {
                get {
                    XElement x = this.GetElement(VorUidEndXName);
                    return ((VorUidType)(x));
                }
                set {
                    this.SetElement(VorUidEndXName, value);
                }
            }
            
            /// <summary>
            /// <para>
            /// End significant point is at Designated point
            /// </para>
            /// <para>
            /// Occurrence: required, choice
            /// </para>
            /// <para>
            /// Setter: Appends
            /// </para>
            /// <para>
            /// Regular expression: ((TcnUidSta | VorUidSta | DpnUidSta | NdbUidSta | DmeUidSta | MkrUidSta), (TcnUidEnd | VorUidEnd | DpnUidEnd | NdbUidEnd | DmeUidEnd | MkrUidEnd))
            /// </para>
            /// </summary>
            public virtual DesignatedPointUidType DpnUidEnd {
                get {
                    XElement x = this.GetElement(DpnUidEndXName);
                    return ((DesignatedPointUidType)(x));
                }
                set {
                    this.SetElement(DpnUidEndXName, value);
                }
            }
            
            /// <summary>
            /// <para>
            /// End significant point is at Non-directional radio beacon [NDB]
            /// </para>
            /// <para>
            /// Occurrence: required, choice
            /// </para>
            /// <para>
            /// Setter: Appends
            /// </para>
            /// <para>
            /// Regular expression: ((TcnUidSta | VorUidSta | DpnUidSta | NdbUidSta | DmeUidSta | MkrUidSta), (TcnUidEnd | VorUidEnd | DpnUidEnd | NdbUidEnd | DmeUidEnd | MkrUidEnd))
            /// </para>
            /// </summary>
            public virtual NdbUidType NdbUidEnd {
                get {
                    XElement x = this.GetElement(NdbUidEndXName);
                    return ((NdbUidType)(x));
                }
                set {
                    this.SetElement(NdbUidEndXName, value);
                }
            }
            
            /// <summary>
            /// <para>
            /// End significant point is at Distance measuring equipment [DME]
            /// </para>
            /// <para>
            /// Occurrence: required, choice
            /// </para>
            /// <para>
            /// Setter: Appends
            /// </para>
            /// <para>
            /// Regular expression: ((TcnUidSta | VorUidSta | DpnUidSta | NdbUidSta | DmeUidSta | MkrUidSta), (TcnUidEnd | VorUidEnd | DpnUidEnd | NdbUidEnd | DmeUidEnd | MkrUidEnd))
            /// </para>
            /// </summary>
            public virtual DmeUidType DmeUidEnd {
                get {
                    XElement x = this.GetElement(DmeUidEndXName);
                    return ((DmeUidType)(x));
                }
                set {
                    this.SetElement(DmeUidEndXName, value);
                }
            }
            
            /// <summary>
            /// <para>
            /// End significant point is at Marker [MKR]
            /// </para>
            /// <para>
            /// Occurrence: required, choice
            /// </para>
            /// <para>
            /// Setter: Appends
            /// </para>
            /// <para>
            /// Regular expression: ((TcnUidSta | VorUidSta | DpnUidSta | NdbUidSta | DmeUidSta | MkrUidSta), (TcnUidEnd | VorUidEnd | DpnUidEnd | NdbUidEnd | DmeUidEnd | MkrUidEnd))
            /// </para>
            /// </summary>
            public virtual MkrUidType MkrUidEnd {
                get {
                    XElement x = this.GetElement(MkrUidEndXName);
                    return ((MkrUidType)(x));
                }
                set {
                    this.SetElement(MkrUidEndXName, value);
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            System.Xml.Linq.XName IXMetaData.SchemaName {
                get {
                    return xName;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<SegLocalType>(this);
            }
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(TcnUidStaXName, typeof(TacanUidType));
                localElementDictionary.Add(VorUidStaXName, typeof(VorUidType));
                localElementDictionary.Add(DpnUidStaXName, typeof(DesignatedPointUidType));
                localElementDictionary.Add(NdbUidStaXName, typeof(NdbUidType));
                localElementDictionary.Add(DmeUidStaXName, typeof(DmeUidType));
                localElementDictionary.Add(MkrUidStaXName, typeof(MkrUidType));
                localElementDictionary.Add(TcnUidEndXName, typeof(TacanUidType));
                localElementDictionary.Add(VorUidEndXName, typeof(VorUidType));
                localElementDictionary.Add(DpnUidEndXName, typeof(DesignatedPointUidType));
                localElementDictionary.Add(NdbUidEndXName, typeof(NdbUidType));
                localElementDictionary.Add(DmeUidEndXName, typeof(DmeUidType));
                localElementDictionary.Add(MkrUidEndXName, typeof(MkrUidType));
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return contentModel;
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Flow conditions combination
    /// </para>
    /// <para>
    /// Regular expression: ((Fcc | Fce)+)
    /// </para>
    /// </summary>
    public partial class FlowConditionsCombinationType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName FccXName = System.Xml.Linq.XName.Get("Fcc", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<FlowConditionsCombinationType> FccField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName FceXName = System.Xml.Linq.XName.Get("Fce", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<FlowConditionElementType> FceField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName codeOprXName = System.Xml.Linq.XName.Get("codeOpr", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("FlowConditionsCombinationType", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator FlowConditionsCombinationType(XElement xe) { return XTypedServices.ToXTypedElement<FlowConditionsCombinationType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static FlowConditionsCombinationType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new ChoiceContentModelEntity(new NamedContentModelEntity(FccXName), new NamedContentModelEntity(FceXName)));
        }
        
        /// <summary>
        /// <para>
        /// Flow conditions combination
        /// </para>
        /// <para>
        /// Regular expression: ((Fcc | Fce)+)
        /// </para>
        /// </summary>
        public FlowConditionsCombinationType() {
        }
        
        /// <summary>
        /// <para>
        /// Flow condition combination is operand in another flow condition combination
        /// </para>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((Fcc | Fce)+)
        /// </para>
        /// </summary>
        public virtual IList<FlowConditionsCombinationType> Fcc {
            get {
                if ((this.FccField == null)) {
                    this.FccField = new XTypedList<FlowConditionsCombinationType>(this, LinqToXsdTypeManager.Instance, FccXName);
                }
                return this.FccField;
            }
            set {
                if ((value == null)) {
                    this.FccField = null;
                }
                else {
                    if ((this.FccField == null)) {
                        this.FccField = XTypedList<FlowConditionsCombinationType>.Initialize(this, LinqToXsdTypeManager.Instance, value, FccXName);
                    }
                    else {
                        XTypedServices.SetList<FlowConditionsCombinationType>(this.FccField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Flow condition element is operand in flow condition combination
        /// </para>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((Fcc | Fce)+)
        /// </para>
        /// </summary>
        public virtual IList<FlowConditionElementType> Fce {
            get {
                if ((this.FceField == null)) {
                    this.FceField = new XTypedList<FlowConditionElementType>(this, LinqToXsdTypeManager.Instance, FceXName);
                }
                return this.FceField;
            }
            set {
                if ((value == null)) {
                    this.FceField = null;
                }
                else {
                    if ((this.FceField == null)) {
                        this.FceField = XTypedList<FlowConditionElementType>.Initialize(this, LinqToXsdTypeManager.Instance, value, FceXName);
                    }
                    else {
                        XTypedServices.SetList<FlowConditionElementType>(this.FceField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual OFMX.codeFlowCondOpr codeOpr {
            get {
                XAttribute x = this.Attribute(codeOprXName);
                return ((OFMX.codeFlowCondOpr)(Enum.Parse(typeof(OFMX.codeFlowCondOpr), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetAttribute(codeOprXName, value.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<FlowConditionsCombinationType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(FccXName, typeof(FlowConditionsCombinationType));
            localElementDictionary.Add(FceXName, typeof(FlowConditionElementType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Flow routing element level
    /// </para>
    /// <para>
    /// Regular expression: (valDistVerLower, uomDistVerLower, codeDistVerLower, valDistVerUpper?, uomDistVerUpper?, codeDistVerUpper?)
    /// </para>
    /// </summary>
    public partial class FlowRoutingElementLevelType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName valDistVerLowerXName = System.Xml.Linq.XName.Get("valDistVerLower", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName uomDistVerLowerXName = System.Xml.Linq.XName.Get("uomDistVerLower", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName codeDistVerLowerXName = System.Xml.Linq.XName.Get("codeDistVerLower", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName valDistVerUpperXName = System.Xml.Linq.XName.Get("valDistVerUpper", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName uomDistVerUpperXName = System.Xml.Linq.XName.Get("uomDistVerUpper", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName codeDistVerUpperXName = System.Xml.Linq.XName.Get("codeDistVerUpper", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("FlowRoutingElementLevelType", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator FlowRoutingElementLevelType(XElement xe) { return XTypedServices.ToXTypedElement<FlowRoutingElementLevelType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static FlowRoutingElementLevelType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(valDistVerLowerXName), new NamedContentModelEntity(uomDistVerLowerXName), new NamedContentModelEntity(codeDistVerLowerXName), new NamedContentModelEntity(valDistVerUpperXName), new NamedContentModelEntity(uomDistVerUpperXName), new NamedContentModelEntity(codeDistVerUpperXName));
        }
        
        /// <summary>
        /// <para>
        /// Flow routing element level
        /// </para>
        /// <para>
        /// Regular expression: (valDistVerLower, uomDistVerLower, codeDistVerLower, valDistVerUpper?, uomDistVerUpper?, codeDistVerUpper?)
        /// </para>
        /// </summary>
        public FlowRoutingElementLevelType() {
        }
        
        /// <summary>
        /// <para>
        /// Lower limit
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (valDistVerLower, uomDistVerLower, codeDistVerLower, valDistVerUpper?, uomDistVerUpper?, codeDistVerUpper?)
        /// </para>
        /// </summary>
        public virtual valDistVer valDistVerLower {
            get {
                XElement x = this.GetElement(valDistVerLowerXName);
                return ((valDistVer)(x));
            }
            set {
                this.SetElement(valDistVerLowerXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Unit of measurement [lower limit]
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (valDistVerLower, uomDistVerLower, codeDistVerLower, valDistVerUpper?, uomDistVerUpper?, codeDistVerUpper?)
        /// </para>
        /// </summary>
        public virtual uomDistVer uomDistVerLower {
            get {
                XElement x = this.GetElement(uomDistVerLowerXName);
                return ((uomDistVer)(x));
            }
            set {
                this.SetElement(uomDistVerLowerXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Reference for lower limit
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (valDistVerLower, uomDistVerLower, codeDistVerLower, valDistVerUpper?, uomDistVerUpper?, codeDistVerUpper?)
        /// </para>
        /// </summary>
        public virtual codeDistVer codeDistVerLower {
            get {
                XElement x = this.GetElement(codeDistVerLowerXName);
                return ((codeDistVer)(x));
            }
            set {
                this.SetElement(codeDistVerLowerXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Upper limit
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (valDistVerLower, uomDistVerLower, codeDistVerLower, valDistVerUpper?, uomDistVerUpper?, codeDistVerUpper?)
        /// </para>
        /// </summary>
        public virtual valDistVer valDistVerUpper {
            get {
                XElement x = this.GetElement(valDistVerUpperXName);
                return ((valDistVer)(x));
            }
            set {
                this.SetElement(valDistVerUpperXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Unit of measurement [upper limit]
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (valDistVerLower, uomDistVerLower, codeDistVerLower, valDistVerUpper?, uomDistVerUpper?, codeDistVerUpper?)
        /// </para>
        /// </summary>
        public virtual uomDistVer uomDistVerUpper {
            get {
                XElement x = this.GetElement(uomDistVerUpperXName);
                return ((uomDistVer)(x));
            }
            set {
                this.SetElement(uomDistVerUpperXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Reference for upper limit
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (valDistVerLower, uomDistVerLower, codeDistVerLower, valDistVerUpper?, uomDistVerUpper?, codeDistVerUpper?)
        /// </para>
        /// </summary>
        public virtual codeDistVer codeDistVerUpper {
            get {
                XElement x = this.GetElement(codeDistVerUpperXName);
                return ((codeDistVer)(x));
            }
            set {
                this.SetElement(codeDistVerUpperXName, value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<FlowRoutingElementLevelType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(valDistVerLowerXName, typeof(valDistVer));
            localElementDictionary.Add(uomDistVerLowerXName, typeof(uomDistVer));
            localElementDictionary.Add(codeDistVerLowerXName, typeof(codeDistVer));
            localElementDictionary.Add(valDistVerUpperXName, typeof(valDistVer));
            localElementDictionary.Add(uomDistVerUpperXName, typeof(uomDistVer));
            localElementDictionary.Add(codeDistVerUpperXName, typeof(codeDistVer));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Flow routing element
    /// </para>
    /// <para>
    /// Regular expression: ((Rpn | AhpUid | TcnUidSpn | VorUidSpn | DpnUidSpn | NdbUidSpn | DmeUidSpn | MkrUidSpn | Seg | Dct | SidUid | AseUid | SiaUid), Tfl*, valSpeed?, uomSpeed?, codeSpeedRef?, codeSpeedCriteria?)
    /// </para>
    /// </summary>
    public partial class FlowRoutingElementType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName RpnXName = System.Xml.Linq.XName.Get("Rpn", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName AhpUidXName = System.Xml.Linq.XName.Get("AhpUid", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TcnUidSpnXName = System.Xml.Linq.XName.Get("TcnUidSpn", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName VorUidSpnXName = System.Xml.Linq.XName.Get("VorUidSpn", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName DpnUidSpnXName = System.Xml.Linq.XName.Get("DpnUidSpn", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName NdbUidSpnXName = System.Xml.Linq.XName.Get("NdbUidSpn", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName DmeUidSpnXName = System.Xml.Linq.XName.Get("DmeUidSpn", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName MkrUidSpnXName = System.Xml.Linq.XName.Get("MkrUidSpn", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName SegXName = System.Xml.Linq.XName.Get("Seg", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName DctXName = System.Xml.Linq.XName.Get("Dct", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName SidUidXName = System.Xml.Linq.XName.Get("SidUid", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName AseUidXName = System.Xml.Linq.XName.Get("AseUid", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName SiaUidXName = System.Xml.Linq.XName.Get("SiaUid", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TflXName = System.Xml.Linq.XName.Get("Tfl", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<FlowRoutingElementLevelType> TflField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName valSpeedXName = System.Xml.Linq.XName.Get("valSpeed", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName uomSpeedXName = System.Xml.Linq.XName.Get("uomSpeed", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName codeSpeedRefXName = System.Xml.Linq.XName.Get("codeSpeedRef", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName codeSpeedCriteriaXName = System.Xml.Linq.XName.Get("codeSpeedCriteria", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("FlowRoutingElementType", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator FlowRoutingElementType(XElement xe) { return XTypedServices.ToXTypedElement<FlowRoutingElementType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static FlowRoutingElementType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new ChoiceContentModelEntity(new NamedContentModelEntity(RpnXName), new NamedContentModelEntity(AhpUidXName), new NamedContentModelEntity(TcnUidSpnXName), new NamedContentModelEntity(VorUidSpnXName), new NamedContentModelEntity(DpnUidSpnXName), new NamedContentModelEntity(NdbUidSpnXName), new NamedContentModelEntity(DmeUidSpnXName), new NamedContentModelEntity(MkrUidSpnXName), new NamedContentModelEntity(SegXName), new NamedContentModelEntity(DctXName), new NamedContentModelEntity(SidUidXName), new NamedContentModelEntity(AseUidXName), new NamedContentModelEntity(SiaUidXName)), new NamedContentModelEntity(TflXName), new NamedContentModelEntity(valSpeedXName), new NamedContentModelEntity(uomSpeedXName), new NamedContentModelEntity(codeSpeedRefXName), new NamedContentModelEntity(codeSpeedCriteriaXName));
        }
        
        /// <summary>
        /// <para>
        /// Flow routing element
        /// </para>
        /// <para>
        /// Regular expression: ((Rpn | AhpUid | TcnUidSpn | VorUidSpn | DpnUidSpn | NdbUidSpn | DmeUidSpn | MkrUidSpn | Seg | Dct | SidUid | AseUid | SiaUid), Tfl*, valSpeed?, uomSpeed?, codeSpeedRef?, codeSpeedCriteria?)
        /// </para>
        /// </summary>
        public FlowRoutingElementType() {
        }
        
        /// <summary>
        /// <para>
        /// Flow routing element is based on Route portion
        /// </para>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((Rpn | AhpUid | TcnUidSpn | VorUidSpn | DpnUidSpn | NdbUidSpn | DmeUidSpn | MkrUidSpn | Seg | Dct | SidUid | AseUid | SiaUid), Tfl*, valSpeed?, uomSpeed?, codeSpeedRef?, codeSpeedCriteria?)
        /// </para>
        /// </summary>
        public virtual RoutePortionType Rpn {
            get {
                XElement x = this.GetElement(RpnXName);
                return ((RoutePortionType)(x));
            }
            set {
                this.SetElement(RpnXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Flow routing element is based on Aerodrome / Heliport
        /// </para>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((Rpn | AhpUid | TcnUidSpn | VorUidSpn | DpnUidSpn | NdbUidSpn | DmeUidSpn | MkrUidSpn | Seg | Dct | SidUid | AseUid | SiaUid), Tfl*, valSpeed?, uomSpeed?, codeSpeedRef?, codeSpeedCriteria?)
        /// </para>
        /// </summary>
        public virtual AerodromeHeliportUidType AhpUid {
            get {
                XElement x = this.GetElement(AhpUidXName);
                return ((AerodromeHeliportUidType)(x));
            }
            set {
                this.SetElement(AhpUidXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Significant point is at Tactical air navigation beacon [TACAN]
        /// </para>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((Rpn | AhpUid | TcnUidSpn | VorUidSpn | DpnUidSpn | NdbUidSpn | DmeUidSpn | MkrUidSpn | Seg | Dct | SidUid | AseUid | SiaUid), Tfl*, valSpeed?, uomSpeed?, codeSpeedRef?, codeSpeedCriteria?)
        /// </para>
        /// </summary>
        public virtual TacanUidType TcnUidSpn {
            get {
                XElement x = this.GetElement(TcnUidSpnXName);
                return ((TacanUidType)(x));
            }
            set {
                this.SetElement(TcnUidSpnXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Significant point is at VHF omnidirectional radio range beacon [VOR]
        /// </para>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((Rpn | AhpUid | TcnUidSpn | VorUidSpn | DpnUidSpn | NdbUidSpn | DmeUidSpn | MkrUidSpn | Seg | Dct | SidUid | AseUid | SiaUid), Tfl*, valSpeed?, uomSpeed?, codeSpeedRef?, codeSpeedCriteria?)
        /// </para>
        /// </summary>
        public virtual VorUidType VorUidSpn {
            get {
                XElement x = this.GetElement(VorUidSpnXName);
                return ((VorUidType)(x));
            }
            set {
                this.SetElement(VorUidSpnXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Significant point is at Designated point
        /// </para>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((Rpn | AhpUid | TcnUidSpn | VorUidSpn | DpnUidSpn | NdbUidSpn | DmeUidSpn | MkrUidSpn | Seg | Dct | SidUid | AseUid | SiaUid), Tfl*, valSpeed?, uomSpeed?, codeSpeedRef?, codeSpeedCriteria?)
        /// </para>
        /// </summary>
        public virtual DesignatedPointUidType DpnUidSpn {
            get {
                XElement x = this.GetElement(DpnUidSpnXName);
                return ((DesignatedPointUidType)(x));
            }
            set {
                this.SetElement(DpnUidSpnXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Significant point is at Non-directional radio beacon [NDB]
        /// </para>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((Rpn | AhpUid | TcnUidSpn | VorUidSpn | DpnUidSpn | NdbUidSpn | DmeUidSpn | MkrUidSpn | Seg | Dct | SidUid | AseUid | SiaUid), Tfl*, valSpeed?, uomSpeed?, codeSpeedRef?, codeSpeedCriteria?)
        /// </para>
        /// </summary>
        public virtual NdbUidType NdbUidSpn {
            get {
                XElement x = this.GetElement(NdbUidSpnXName);
                return ((NdbUidType)(x));
            }
            set {
                this.SetElement(NdbUidSpnXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Significant point is at Distance measuring equipment [DME]
        /// </para>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((Rpn | AhpUid | TcnUidSpn | VorUidSpn | DpnUidSpn | NdbUidSpn | DmeUidSpn | MkrUidSpn | Seg | Dct | SidUid | AseUid | SiaUid), Tfl*, valSpeed?, uomSpeed?, codeSpeedRef?, codeSpeedCriteria?)
        /// </para>
        /// </summary>
        public virtual DmeUidType DmeUidSpn {
            get {
                XElement x = this.GetElement(DmeUidSpnXName);
                return ((DmeUidType)(x));
            }
            set {
                this.SetElement(DmeUidSpnXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Significant point is at Marker [MKR]
        /// </para>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((Rpn | AhpUid | TcnUidSpn | VorUidSpn | DpnUidSpn | NdbUidSpn | DmeUidSpn | MkrUidSpn | Seg | Dct | SidUid | AseUid | SiaUid), Tfl*, valSpeed?, uomSpeed?, codeSpeedRef?, codeSpeedCriteria?)
        /// </para>
        /// </summary>
        public virtual MkrUidType MkrUidSpn {
            get {
                XElement x = this.GetElement(MkrUidSpnXName);
                return ((MkrUidType)(x));
            }
            set {
                this.SetElement(MkrUidSpnXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Flow routing element is based on segment
        /// </para>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((Rpn | AhpUid | TcnUidSpn | VorUidSpn | DpnUidSpn | NdbUidSpn | DmeUidSpn | MkrUidSpn | Seg | Dct | SidUid | AseUid | SiaUid), Tfl*, valSpeed?, uomSpeed?, codeSpeedRef?, codeSpeedCriteria?)
        /// </para>
        /// </summary>
        public virtual SegLocalType Seg {
            get {
                XElement x = this.GetElement(SegXName);
                return ((SegLocalType)(x));
            }
            set {
                this.SetElement(SegXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Direct flight (DCT) between two specified points
        /// </para>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((Rpn | AhpUid | TcnUidSpn | VorUidSpn | DpnUidSpn | NdbUidSpn | DmeUidSpn | MkrUidSpn | Seg | Dct | SidUid | AseUid | SiaUid), Tfl*, valSpeed?, uomSpeed?, codeSpeedRef?, codeSpeedCriteria?)
        /// </para>
        /// </summary>
        public virtual DirectSegmentType Dct {
            get {
                XElement x = this.GetElement(DctXName);
                return ((DirectSegmentType)(x));
            }
            set {
                this.SetElement(DctXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Flow routing element is based on Standard instrument departure [SID]
        /// </para>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((Rpn | AhpUid | TcnUidSpn | VorUidSpn | DpnUidSpn | NdbUidSpn | DmeUidSpn | MkrUidSpn | Seg | Dct | SidUid | AseUid | SiaUid), Tfl*, valSpeed?, uomSpeed?, codeSpeedRef?, codeSpeedCriteria?)
        /// </para>
        /// </summary>
        public virtual SidUidType SidUid {
            get {
                XElement x = this.GetElement(SidUidXName);
                return ((SidUidType)(x));
            }
            set {
                this.SetElement(SidUidXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Flow routing element is based on Airspace
        /// </para>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((Rpn | AhpUid | TcnUidSpn | VorUidSpn | DpnUidSpn | NdbUidSpn | DmeUidSpn | MkrUidSpn | Seg | Dct | SidUid | AseUid | SiaUid), Tfl*, valSpeed?, uomSpeed?, codeSpeedRef?, codeSpeedCriteria?)
        /// </para>
        /// </summary>
        public virtual AirspaceUidType AseUid {
            get {
                XElement x = this.GetElement(AseUidXName);
                return ((AirspaceUidType)(x));
            }
            set {
                this.SetElement(AseUidXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Flow routing element is based on Standard instrument arrival [STAR]
        /// </para>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((Rpn | AhpUid | TcnUidSpn | VorUidSpn | DpnUidSpn | NdbUidSpn | DmeUidSpn | MkrUidSpn | Seg | Dct | SidUid | AseUid | SiaUid), Tfl*, valSpeed?, uomSpeed?, codeSpeedRef?, codeSpeedCriteria?)
        /// </para>
        /// </summary>
        public virtual StarUidType SiaUid {
            get {
                XElement x = this.GetElement(SiaUidXName);
                return ((StarUidType)(x));
            }
            set {
                this.SetElement(SiaUidXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Flow routing element is associated with Flow routing element level
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: ((Rpn | AhpUid | TcnUidSpn | VorUidSpn | DpnUidSpn | NdbUidSpn | DmeUidSpn | MkrUidSpn | Seg | Dct | SidUid | AseUid | SiaUid), Tfl*, valSpeed?, uomSpeed?, codeSpeedRef?, codeSpeedCriteria?)
        /// </para>
        /// </summary>
        public virtual IList<FlowRoutingElementLevelType> Tfl {
            get {
                if ((this.TflField == null)) {
                    this.TflField = new XTypedList<FlowRoutingElementLevelType>(this, LinqToXsdTypeManager.Instance, TflXName);
                }
                return this.TflField;
            }
            set {
                if ((value == null)) {
                    this.TflField = null;
                }
                else {
                    if ((this.TflField == null)) {
                        this.TflField = XTypedList<FlowRoutingElementLevelType>.Initialize(this, LinqToXsdTypeManager.Instance, value, TflXName);
                    }
                    else {
                        XTypedServices.SetList<FlowRoutingElementLevelType>(this.TflField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Speed
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: ((Rpn | AhpUid | TcnUidSpn | VorUidSpn | DpnUidSpn | NdbUidSpn | DmeUidSpn | MkrUidSpn | Seg | Dct | SidUid | AseUid | SiaUid), Tfl*, valSpeed?, uomSpeed?, codeSpeedRef?, codeSpeedCriteria?)
        /// </para>
        /// </summary>
        public virtual valSpeed valSpeed {
            get {
                XElement x = this.GetElement(valSpeedXName);
                return ((valSpeed)(x));
            }
            set {
                this.SetElement(valSpeedXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Unit of measrument [speed]
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: ((Rpn | AhpUid | TcnUidSpn | VorUidSpn | DpnUidSpn | NdbUidSpn | DmeUidSpn | MkrUidSpn | Seg | Dct | SidUid | AseUid | SiaUid), Tfl*, valSpeed?, uomSpeed?, codeSpeedRef?, codeSpeedCriteria?)
        /// </para>
        /// </summary>
        public virtual uomSpeed uomSpeed {
            get {
                XElement x = this.GetElement(uomSpeedXName);
                return ((uomSpeed)(x));
            }
            set {
                this.SetElement(uomSpeedXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Speed reference
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: ((Rpn | AhpUid | TcnUidSpn | VorUidSpn | DpnUidSpn | NdbUidSpn | DmeUidSpn | MkrUidSpn | Seg | Dct | SidUid | AseUid | SiaUid), Tfl*, valSpeed?, uomSpeed?, codeSpeedRef?, codeSpeedCriteria?)
        /// </para>
        /// </summary>
        public virtual codeSpeedRef codeSpeedRef {
            get {
                XElement x = this.GetElement(codeSpeedRefXName);
                return ((codeSpeedRef)(x));
            }
            set {
                this.SetElement(codeSpeedRefXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Speed limit criteria
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: ((Rpn | AhpUid | TcnUidSpn | VorUidSpn | DpnUidSpn | NdbUidSpn | DmeUidSpn | MkrUidSpn | Seg | Dct | SidUid | AseUid | SiaUid), Tfl*, valSpeed?, uomSpeed?, codeSpeedRef?, codeSpeedCriteria?)
        /// </para>
        /// </summary>
        public virtual codeComparison codeSpeedCriteria {
            get {
                XElement x = this.GetElement(codeSpeedCriteriaXName);
                return ((codeComparison)(x));
            }
            set {
                this.SetElement(codeSpeedCriteriaXName, value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<FlowRoutingElementType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(RpnXName, typeof(RoutePortionType));
            localElementDictionary.Add(AhpUidXName, typeof(AerodromeHeliportUidType));
            localElementDictionary.Add(TcnUidSpnXName, typeof(TacanUidType));
            localElementDictionary.Add(VorUidSpnXName, typeof(VorUidType));
            localElementDictionary.Add(DpnUidSpnXName, typeof(DesignatedPointUidType));
            localElementDictionary.Add(NdbUidSpnXName, typeof(NdbUidType));
            localElementDictionary.Add(DmeUidSpnXName, typeof(DmeUidType));
            localElementDictionary.Add(MkrUidSpnXName, typeof(MkrUidType));
            localElementDictionary.Add(SegXName, typeof(SegLocalType));
            localElementDictionary.Add(DctXName, typeof(DirectSegmentType));
            localElementDictionary.Add(SidUidXName, typeof(SidUidType));
            localElementDictionary.Add(AseUidXName, typeof(AirspaceUidType));
            localElementDictionary.Add(SiaUidXName, typeof(StarUidType));
            localElementDictionary.Add(TflXName, typeof(FlowRoutingElementLevelType));
            localElementDictionary.Add(valSpeedXName, typeof(valSpeed));
            localElementDictionary.Add(uomSpeedXName, typeof(uomSpeed));
            localElementDictionary.Add(codeSpeedRefXName, typeof(codeSpeedRef));
            localElementDictionary.Add(codeSpeedCriteriaXName, typeof(codeComparison));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: ((TcnUidSta | VorUidSta | DpnUidSta | NdbUidSta | DmeUidSta | MkrUidSta), (TcnUidEnd | VorUidEnd | DpnUidEnd | NdbUidEnd | DmeUidEnd | MkrUidEnd))
        /// </para>
        /// </summary>
        public partial class SegLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName TcnUidStaXName = System.Xml.Linq.XName.Get("TcnUidSta", "");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName VorUidStaXName = System.Xml.Linq.XName.Get("VorUidSta", "");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName DpnUidStaXName = System.Xml.Linq.XName.Get("DpnUidSta", "");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName NdbUidStaXName = System.Xml.Linq.XName.Get("NdbUidSta", "");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName DmeUidStaXName = System.Xml.Linq.XName.Get("DmeUidSta", "");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName MkrUidStaXName = System.Xml.Linq.XName.Get("MkrUidSta", "");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName TcnUidEndXName = System.Xml.Linq.XName.Get("TcnUidEnd", "");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName VorUidEndXName = System.Xml.Linq.XName.Get("VorUidEnd", "");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName DpnUidEndXName = System.Xml.Linq.XName.Get("DpnUidEnd", "");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName NdbUidEndXName = System.Xml.Linq.XName.Get("NdbUidEnd", "");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName DmeUidEndXName = System.Xml.Linq.XName.Get("DmeUidEnd", "");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName MkrUidEndXName = System.Xml.Linq.XName.Get("MkrUidEnd", "");
            
            private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("Seg", "");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;
            
		public static explicit operator SegLocalType(XElement xe) { return XTypedServices.ToXTypedElement<SegLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static SegLocalType() {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new ChoiceContentModelEntity(new NamedContentModelEntity(TcnUidStaXName), new NamedContentModelEntity(VorUidStaXName), new NamedContentModelEntity(DpnUidStaXName), new NamedContentModelEntity(NdbUidStaXName), new NamedContentModelEntity(DmeUidStaXName), new NamedContentModelEntity(MkrUidStaXName)), new ChoiceContentModelEntity(new NamedContentModelEntity(TcnUidEndXName), new NamedContentModelEntity(VorUidEndXName), new NamedContentModelEntity(DpnUidEndXName), new NamedContentModelEntity(NdbUidEndXName), new NamedContentModelEntity(DmeUidEndXName), new NamedContentModelEntity(MkrUidEndXName)));
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: ((TcnUidSta | VorUidSta | DpnUidSta | NdbUidSta | DmeUidSta | MkrUidSta), (TcnUidEnd | VorUidEnd | DpnUidEnd | NdbUidEnd | DmeUidEnd | MkrUidEnd))
            /// </para>
            /// </summary>
            public SegLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Start significant point is at Tactical air navigation beacon [TACAN]
            /// </para>
            /// <para>
            /// Occurrence: required, choice
            /// </para>
            /// <para>
            /// Setter: Appends
            /// </para>
            /// <para>
            /// Regular expression: ((TcnUidSta | VorUidSta | DpnUidSta | NdbUidSta | DmeUidSta | MkrUidSta), (TcnUidEnd | VorUidEnd | DpnUidEnd | NdbUidEnd | DmeUidEnd | MkrUidEnd))
            /// </para>
            /// </summary>
            public virtual TacanUidType TcnUidSta {
                get {
                    XElement x = this.GetElement(TcnUidStaXName);
                    return ((TacanUidType)(x));
                }
                set {
                    this.SetElement(TcnUidStaXName, value);
                }
            }
            
            /// <summary>
            /// <para>
            /// Start significant point is at VHF omnidirectional radio range beacon [VOR]
            /// </para>
            /// <para>
            /// Occurrence: required, choice
            /// </para>
            /// <para>
            /// Setter: Appends
            /// </para>
            /// <para>
            /// Regular expression: ((TcnUidSta | VorUidSta | DpnUidSta | NdbUidSta | DmeUidSta | MkrUidSta), (TcnUidEnd | VorUidEnd | DpnUidEnd | NdbUidEnd | DmeUidEnd | MkrUidEnd))
            /// </para>
            /// </summary>
            public virtual VorUidType VorUidSta {
                get {
                    XElement x = this.GetElement(VorUidStaXName);
                    return ((VorUidType)(x));
                }
                set {
                    this.SetElement(VorUidStaXName, value);
                }
            }
            
            /// <summary>
            /// <para>
            /// Start significant point is at Designated point
            /// </para>
            /// <para>
            /// Occurrence: required, choice
            /// </para>
            /// <para>
            /// Setter: Appends
            /// </para>
            /// <para>
            /// Regular expression: ((TcnUidSta | VorUidSta | DpnUidSta | NdbUidSta | DmeUidSta | MkrUidSta), (TcnUidEnd | VorUidEnd | DpnUidEnd | NdbUidEnd | DmeUidEnd | MkrUidEnd))
            /// </para>
            /// </summary>
            public virtual DesignatedPointUidType DpnUidSta {
                get {
                    XElement x = this.GetElement(DpnUidStaXName);
                    return ((DesignatedPointUidType)(x));
                }
                set {
                    this.SetElement(DpnUidStaXName, value);
                }
            }
            
            /// <summary>
            /// <para>
            /// Start significant point is at Non-directional radio beacon [NDB]
            /// </para>
            /// <para>
            /// Occurrence: required, choice
            /// </para>
            /// <para>
            /// Setter: Appends
            /// </para>
            /// <para>
            /// Regular expression: ((TcnUidSta | VorUidSta | DpnUidSta | NdbUidSta | DmeUidSta | MkrUidSta), (TcnUidEnd | VorUidEnd | DpnUidEnd | NdbUidEnd | DmeUidEnd | MkrUidEnd))
            /// </para>
            /// </summary>
            public virtual NdbUidType NdbUidSta {
                get {
                    XElement x = this.GetElement(NdbUidStaXName);
                    return ((NdbUidType)(x));
                }
                set {
                    this.SetElement(NdbUidStaXName, value);
                }
            }
            
            /// <summary>
            /// <para>
            /// Start significant point is at Distance measuring equipment [DME]
            /// </para>
            /// <para>
            /// Occurrence: required, choice
            /// </para>
            /// <para>
            /// Setter: Appends
            /// </para>
            /// <para>
            /// Regular expression: ((TcnUidSta | VorUidSta | DpnUidSta | NdbUidSta | DmeUidSta | MkrUidSta), (TcnUidEnd | VorUidEnd | DpnUidEnd | NdbUidEnd | DmeUidEnd | MkrUidEnd))
            /// </para>
            /// </summary>
            public virtual DmeUidType DmeUidSta {
                get {
                    XElement x = this.GetElement(DmeUidStaXName);
                    return ((DmeUidType)(x));
                }
                set {
                    this.SetElement(DmeUidStaXName, value);
                }
            }
            
            /// <summary>
            /// <para>
            /// Start significant point is at Marker [MKR]
            /// </para>
            /// <para>
            /// Occurrence: required, choice
            /// </para>
            /// <para>
            /// Setter: Appends
            /// </para>
            /// <para>
            /// Regular expression: ((TcnUidSta | VorUidSta | DpnUidSta | NdbUidSta | DmeUidSta | MkrUidSta), (TcnUidEnd | VorUidEnd | DpnUidEnd | NdbUidEnd | DmeUidEnd | MkrUidEnd))
            /// </para>
            /// </summary>
            public virtual MkrUidType MkrUidSta {
                get {
                    XElement x = this.GetElement(MkrUidStaXName);
                    return ((MkrUidType)(x));
                }
                set {
                    this.SetElement(MkrUidStaXName, value);
                }
            }
            
            /// <summary>
            /// <para>
            /// End significant point is at Tactical air navigation beacon [TACAN]
            /// </para>
            /// <para>
            /// Occurrence: required, choice
            /// </para>
            /// <para>
            /// Setter: Appends
            /// </para>
            /// <para>
            /// Regular expression: ((TcnUidSta | VorUidSta | DpnUidSta | NdbUidSta | DmeUidSta | MkrUidSta), (TcnUidEnd | VorUidEnd | DpnUidEnd | NdbUidEnd | DmeUidEnd | MkrUidEnd))
            /// </para>
            /// </summary>
            public virtual TacanUidType TcnUidEnd {
                get {
                    XElement x = this.GetElement(TcnUidEndXName);
                    return ((TacanUidType)(x));
                }
                set {
                    this.SetElement(TcnUidEndXName, value);
                }
            }
            
            /// <summary>
            /// <para>
            /// End significant point is at VHF omnidirectional radio range beacon [VOR]
            /// </para>
            /// <para>
            /// Occurrence: required, choice
            /// </para>
            /// <para>
            /// Setter: Appends
            /// </para>
            /// <para>
            /// Regular expression: ((TcnUidSta | VorUidSta | DpnUidSta | NdbUidSta | DmeUidSta | MkrUidSta), (TcnUidEnd | VorUidEnd | DpnUidEnd | NdbUidEnd | DmeUidEnd | MkrUidEnd))
            /// </para>
            /// </summary>
            public virtual VorUidType VorUidEnd {
                get {
                    XElement x = this.GetElement(VorUidEndXName);
                    return ((VorUidType)(x));
                }
                set {
                    this.SetElement(VorUidEndXName, value);
                }
            }
            
            /// <summary>
            /// <para>
            /// End significant point is at Designated point
            /// </para>
            /// <para>
            /// Occurrence: required, choice
            /// </para>
            /// <para>
            /// Setter: Appends
            /// </para>
            /// <para>
            /// Regular expression: ((TcnUidSta | VorUidSta | DpnUidSta | NdbUidSta | DmeUidSta | MkrUidSta), (TcnUidEnd | VorUidEnd | DpnUidEnd | NdbUidEnd | DmeUidEnd | MkrUidEnd))
            /// </para>
            /// </summary>
            public virtual DesignatedPointUidType DpnUidEnd {
                get {
                    XElement x = this.GetElement(DpnUidEndXName);
                    return ((DesignatedPointUidType)(x));
                }
                set {
                    this.SetElement(DpnUidEndXName, value);
                }
            }
            
            /// <summary>
            /// <para>
            /// End significant point is at Non-directional radio beacon [NDB]
            /// </para>
            /// <para>
            /// Occurrence: required, choice
            /// </para>
            /// <para>
            /// Setter: Appends
            /// </para>
            /// <para>
            /// Regular expression: ((TcnUidSta | VorUidSta | DpnUidSta | NdbUidSta | DmeUidSta | MkrUidSta), (TcnUidEnd | VorUidEnd | DpnUidEnd | NdbUidEnd | DmeUidEnd | MkrUidEnd))
            /// </para>
            /// </summary>
            public virtual NdbUidType NdbUidEnd {
                get {
                    XElement x = this.GetElement(NdbUidEndXName);
                    return ((NdbUidType)(x));
                }
                set {
                    this.SetElement(NdbUidEndXName, value);
                }
            }
            
            /// <summary>
            /// <para>
            /// End significant point is at Distance measuring equipment [DME]
            /// </para>
            /// <para>
            /// Occurrence: required, choice
            /// </para>
            /// <para>
            /// Setter: Appends
            /// </para>
            /// <para>
            /// Regular expression: ((TcnUidSta | VorUidSta | DpnUidSta | NdbUidSta | DmeUidSta | MkrUidSta), (TcnUidEnd | VorUidEnd | DpnUidEnd | NdbUidEnd | DmeUidEnd | MkrUidEnd))
            /// </para>
            /// </summary>
            public virtual DmeUidType DmeUidEnd {
                get {
                    XElement x = this.GetElement(DmeUidEndXName);
                    return ((DmeUidType)(x));
                }
                set {
                    this.SetElement(DmeUidEndXName, value);
                }
            }
            
            /// <summary>
            /// <para>
            /// End significant point is at Marker [MKR]
            /// </para>
            /// <para>
            /// Occurrence: required, choice
            /// </para>
            /// <para>
            /// Setter: Appends
            /// </para>
            /// <para>
            /// Regular expression: ((TcnUidSta | VorUidSta | DpnUidSta | NdbUidSta | DmeUidSta | MkrUidSta), (TcnUidEnd | VorUidEnd | DpnUidEnd | NdbUidEnd | DmeUidEnd | MkrUidEnd))
            /// </para>
            /// </summary>
            public virtual MkrUidType MkrUidEnd {
                get {
                    XElement x = this.GetElement(MkrUidEndXName);
                    return ((MkrUidType)(x));
                }
                set {
                    this.SetElement(MkrUidEndXName, value);
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            System.Xml.Linq.XName IXMetaData.SchemaName {
                get {
                    return xName;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<SegLocalType>(this);
            }
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(TcnUidStaXName, typeof(TacanUidType));
                localElementDictionary.Add(VorUidStaXName, typeof(VorUidType));
                localElementDictionary.Add(DpnUidStaXName, typeof(DesignatedPointUidType));
                localElementDictionary.Add(NdbUidStaXName, typeof(NdbUidType));
                localElementDictionary.Add(DmeUidStaXName, typeof(DmeUidType));
                localElementDictionary.Add(MkrUidStaXName, typeof(MkrUidType));
                localElementDictionary.Add(TcnUidEndXName, typeof(TacanUidType));
                localElementDictionary.Add(VorUidEndXName, typeof(VorUidType));
                localElementDictionary.Add(DpnUidEndXName, typeof(DesignatedPointUidType));
                localElementDictionary.Add(NdbUidEndXName, typeof(NdbUidType));
                localElementDictionary.Add(DmeUidEndXName, typeof(DmeUidType));
                localElementDictionary.Add(MkrUidEndXName, typeof(MkrUidType));
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return contentModel;
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Flow routing
    /// </para>
    /// <para>
    /// Regular expression: (Tfe+)
    /// </para>
    /// </summary>
    public partial class FlowRoutingType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TfeXName = System.Xml.Linq.XName.Get("Tfe", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<FlowRoutingElementType> TfeField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("FlowRoutingType", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator FlowRoutingType(XElement xe) { return XTypedServices.ToXTypedElement<FlowRoutingType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static FlowRoutingType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(TfeXName));
        }
        
        /// <summary>
        /// <para>
        /// Flow routing
        /// </para>
        /// <para>
        /// Regular expression: (Tfe+)
        /// </para>
        /// </summary>
        public FlowRoutingType() {
        }
        
        /// <summary>
        /// <para>
        /// Flow routing is made of Flow routing element
        /// </para>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Tfe+)
        /// </para>
        /// </summary>
        public virtual IList<FlowRoutingElementType> Tfe {
            get {
                if ((this.TfeField == null)) {
                    this.TfeField = new XTypedList<FlowRoutingElementType>(this, LinqToXsdTypeManager.Instance, TfeXName);
                }
                return this.TfeField;
            }
            set {
                if ((value == null)) {
                    this.TfeField = null;
                }
                else {
                    if ((this.TfeField == null)) {
                        this.TfeField = XTypedList<FlowRoutingElementType>.Initialize(this, LinqToXsdTypeManager.Instance, value, TfeXName);
                    }
                    else {
                        XTypedServices.SetList<FlowRoutingElementType>(this.TfeField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<FlowRoutingType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(TfeXName, typeof(FlowRoutingElementType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Frequency
    /// </para>
    /// <para>
    /// Regular expression: (FqyUid, valFreqRec?, uomFreq, codeType?, codeEm?, codeSelcal?, Ftt?, txtRmk?, Cdl+)
    /// </para>
    /// </summary>
    public partial class FrequencyType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName FqyUidXName = System.Xml.Linq.XName.Get("FqyUid", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName valFreqRecXName = System.Xml.Linq.XName.Get("valFreqRec", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName uomFreqXName = System.Xml.Linq.XName.Get("uomFreq", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName codeTypeXName = System.Xml.Linq.XName.Get("codeType", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName codeEmXName = System.Xml.Linq.XName.Get("codeEm", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName codeSelcalXName = System.Xml.Linq.XName.Get("codeSelcal", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName FttXName = System.Xml.Linq.XName.Get("Ftt", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName txtRmkXName = System.Xml.Linq.XName.Get("txtRmk", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName CdlXName = System.Xml.Linq.XName.Get("Cdl", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<CallsignType> CdlField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName sourceXName = System.Xml.Linq.XName.Get("source", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("FrequencyType", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator FrequencyType(XElement xe) { return XTypedServices.ToXTypedElement<FrequencyType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static FrequencyType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(FqyUidXName), new NamedContentModelEntity(valFreqRecXName), new NamedContentModelEntity(uomFreqXName), new NamedContentModelEntity(codeTypeXName), new NamedContentModelEntity(codeEmXName), new NamedContentModelEntity(codeSelcalXName), new NamedContentModelEntity(FttXName), new NamedContentModelEntity(txtRmkXName), new NamedContentModelEntity(CdlXName));
        }
        
        /// <summary>
        /// <para>
        /// Frequency
        /// </para>
        /// <para>
        /// Regular expression: (FqyUid, valFreqRec?, uomFreq, codeType?, codeEm?, codeSelcal?, Ftt?, txtRmk?, Cdl+)
        /// </para>
        /// </summary>
        public FrequencyType() {
        }
        
        /// <summary>
        /// <para>
        /// a version of Frequency
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (FqyUid, valFreqRec?, uomFreq, codeType?, codeEm?, codeSelcal?, Ftt?, txtRmk?, Cdl+)
        /// </para>
        /// </summary>
        public virtual FrequencyUidType FqyUid {
            get {
                XElement x = this.GetElement(FqyUidXName);
                return ((FrequencyUidType)(x));
            }
            set {
                this.SetElement(FqyUidXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Reception frequency
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (FqyUid, valFreqRec?, uomFreq, codeType?, codeEm?, codeSelcal?, Ftt?, txtRmk?, Cdl+)
        /// </para>
        /// </summary>
        public virtual valFreq valFreqRec {
            get {
                XElement x = this.GetElement(valFreqRecXName);
                return ((valFreq)(x));
            }
            set {
                this.SetElement(valFreqRecXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Unit of measurement [frequency]
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (FqyUid, valFreqRec?, uomFreq, codeType?, codeEm?, codeSelcal?, Ftt?, txtRmk?, Cdl+)
        /// </para>
        /// </summary>
        public virtual uomFreq uomFreq {
            get {
                XElement x = this.GetElement(uomFreqXName);
                return ((uomFreq)(x));
            }
            set {
                this.SetElement(uomFreqXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Type
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (FqyUid, valFreqRec?, uomFreq, codeType?, codeEm?, codeSelcal?, Ftt?, txtRmk?, Cdl+)
        /// </para>
        /// </summary>
        public virtual codeTypeFreq codeType {
            get {
                XElement x = this.GetElement(codeTypeXName);
                return ((codeTypeFreq)(x));
            }
            set {
                this.SetElement(codeTypeXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Emission
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (FqyUid, valFreqRec?, uomFreq, codeType?, codeEm?, codeSelcal?, Ftt?, txtRmk?, Cdl+)
        /// </para>
        /// </summary>
        public virtual codeEmRdo codeEm {
            get {
                XElement x = this.GetElement(codeEmXName);
                return ((codeEmRdo)(x));
            }
            set {
                this.SetElement(codeEmXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// SELCAL treated
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (FqyUid, valFreqRec?, uomFreq, codeType?, codeEm?, codeSelcal?, Ftt?, txtRmk?, Cdl+)
        /// </para>
        /// </summary>
        public virtual codeYesNo codeSelcal {
            get {
                XElement x = this.GetElement(codeSelcalXName);
                return ((codeYesNo)(x));
            }
            set {
                this.SetElement(codeSelcalXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Frequency is active according to Frequency - Timetable
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (FqyUid, valFreqRec?, uomFreq, codeType?, codeEm?, codeSelcal?, Ftt?, txtRmk?, Cdl+)
        /// </para>
        /// </summary>
        public virtual TimetableType Ftt {
            get {
                XElement x = this.GetElement(FttXName);
                return ((TimetableType)(x));
            }
            set {
                this.SetElement(FttXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Remark
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (FqyUid, valFreqRec?, uomFreq, codeType?, codeEm?, codeSelcal?, Ftt?, txtRmk?, Cdl+)
        /// </para>
        /// </summary>
        public virtual txtRmk txtRmk {
            get {
                XElement x = this.GetElement(txtRmkXName);
                return ((txtRmk)(x));
            }
            set {
                this.SetElement(txtRmkXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Frequency is identified by Callsign
        /// </para>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (FqyUid, valFreqRec?, uomFreq, codeType?, codeEm?, codeSelcal?, Ftt?, txtRmk?, Cdl+)
        /// </para>
        /// </summary>
        public virtual IList<CallsignType> Cdl {
            get {
                if ((this.CdlField == null)) {
                    this.CdlField = new XTypedList<CallsignType>(this, LinqToXsdTypeManager.Instance, CdlXName);
                }
                return this.CdlField;
            }
            set {
                if ((value == null)) {
                    this.CdlField = null;
                }
                else {
                    if ((this.CdlField == null)) {
                        this.CdlField = XTypedList<CallsignType>.Initialize(this, LinqToXsdTypeManager.Instance, value, CdlXName);
                    }
                    else {
                        XTypedServices.SetList<CallsignType>(this.CdlField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string source {
            get {
                XAttribute x = this.Attribute(sourceXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(sourceXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<FrequencyType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(FqyUidXName, typeof(FrequencyUidType));
            localElementDictionary.Add(valFreqRecXName, typeof(valFreq));
            localElementDictionary.Add(uomFreqXName, typeof(uomFreq));
            localElementDictionary.Add(codeTypeXName, typeof(codeTypeFreq));
            localElementDictionary.Add(codeEmXName, typeof(codeEmRdo));
            localElementDictionary.Add(codeSelcalXName, typeof(codeYesNo));
            localElementDictionary.Add(FttXName, typeof(TimetableType));
            localElementDictionary.Add(txtRmkXName, typeof(txtRmk));
            localElementDictionary.Add(CdlXName, typeof(CallsignType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Frequency - UID
    /// </para>
    /// <para>
    /// Regular expression: (SerUid, valFreqTrans)
    /// </para>
    /// </summary>
    public partial class FrequencyUidType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName SerUidXName = System.Xml.Linq.XName.Get("SerUid", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName valFreqTransXName = System.Xml.Linq.XName.Get("valFreqTrans", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName midXName = System.Xml.Linq.XName.Get("mid", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("FrequencyUidType", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator FrequencyUidType(XElement xe) { return XTypedServices.ToXTypedElement<FrequencyUidType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static FrequencyUidType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(SerUidXName), new NamedContentModelEntity(valFreqTransXName));
        }
        
        /// <summary>
        /// <para>
        /// Frequency - UID
        /// </para>
        /// <para>
        /// Regular expression: (SerUid, valFreqTrans)
        /// </para>
        /// </summary>
        public FrequencyUidType() {
        }
        
        /// <summary>
        /// <para>
        /// Frequency is attributed to Service
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (SerUid, valFreqTrans)
        /// </para>
        /// </summary>
        public virtual ServiceUidType SerUid {
            get {
                XElement x = this.GetElement(SerUidXName);
                return ((ServiceUidType)(x));
            }
            set {
                this.SetElement(SerUidXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Transmission frequency
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (SerUid, valFreqTrans)
        /// </para>
        /// </summary>
        public virtual valFreq valFreqTrans {
            get {
                XElement x = this.GetElement(valFreqTransXName);
                return ((valFreq)(x));
            }
            set {
                this.SetElement(valFreqTransXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string mid {
            get {
                XAttribute x = this.Attribute(midXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(midXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<FrequencyUidType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(SerUidXName, typeof(ServiceUidType));
            localElementDictionary.Add(valFreqTransXName, typeof(valFreq));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Fuel
    /// </para>
    /// <para>
    /// Regular expression: (FulUid, txtDescr?, txtRmk?)
    /// </para>
    /// </summary>
    public partial class FuelType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName FulUidXName = System.Xml.Linq.XName.Get("FulUid", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName txtDescrXName = System.Xml.Linq.XName.Get("txtDescr", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName txtRmkXName = System.Xml.Linq.XName.Get("txtRmk", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName sourceXName = System.Xml.Linq.XName.Get("source", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("FuelType", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator FuelType(XElement xe) { return XTypedServices.ToXTypedElement<FuelType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static FuelType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(FulUidXName), new NamedContentModelEntity(txtDescrXName), new NamedContentModelEntity(txtRmkXName));
        }
        
        /// <summary>
        /// <para>
        /// Fuel
        /// </para>
        /// <para>
        /// Regular expression: (FulUid, txtDescr?, txtRmk?)
        /// </para>
        /// </summary>
        public FuelType() {
        }
        
        /// <summary>
        /// <para>
        /// a version of Fuel
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (FulUid, txtDescr?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual FuelUidType FulUid {
            get {
                XElement x = this.GetElement(FulUidXName);
                return ((FuelUidType)(x));
            }
            set {
                this.SetElement(FulUidXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Description
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (FulUid, txtDescr?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual txtDescr txtDescr {
            get {
                XElement x = this.GetElement(txtDescrXName);
                return ((txtDescr)(x));
            }
            set {
                this.SetElement(txtDescrXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Remark
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (FulUid, txtDescr?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual txtRmk txtRmk {
            get {
                XElement x = this.GetElement(txtRmkXName);
                return ((txtRmk)(x));
            }
            set {
                this.SetElement(txtRmkXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string source {
            get {
                XAttribute x = this.Attribute(sourceXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(sourceXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<FuelType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(FulUidXName, typeof(FuelUidType));
            localElementDictionary.Add(txtDescrXName, typeof(txtDescr));
            localElementDictionary.Add(txtRmkXName, typeof(txtRmk));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Fuel - UID
    /// </para>
    /// <para>
    /// Regular expression: (AhpUid, codeCat)
    /// </para>
    /// </summary>
    public partial class FuelUidType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName AhpUidXName = System.Xml.Linq.XName.Get("AhpUid", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName codeCatXName = System.Xml.Linq.XName.Get("codeCat", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName midXName = System.Xml.Linq.XName.Get("mid", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("FuelUidType", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator FuelUidType(XElement xe) { return XTypedServices.ToXTypedElement<FuelUidType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static FuelUidType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(AhpUidXName), new NamedContentModelEntity(codeCatXName));
        }
        
        /// <summary>
        /// <para>
        /// Fuel - UID
        /// </para>
        /// <para>
        /// Regular expression: (AhpUid, codeCat)
        /// </para>
        /// </summary>
        public FuelUidType() {
        }
        
        /// <summary>
        /// <para>
        /// Fuel is available at Aerodrome / Heliport
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (AhpUid, codeCat)
        /// </para>
        /// </summary>
        public virtual AerodromeHeliportUidType AhpUid {
            get {
                XElement x = this.GetElement(AhpUidXName);
                return ((AerodromeHeliportUidType)(x));
            }
            set {
                this.SetElement(AhpUidXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Category
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (AhpUid, codeCat)
        /// </para>
        /// </summary>
        public virtual codeCatFuel codeCat {
            get {
                XElement x = this.GetElement(codeCatXName);
                return ((codeCatFuel)(x));
            }
            set {
                this.SetElement(codeCatXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string mid {
            get {
                XAttribute x = this.Attribute(midXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(midXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<FuelUidType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(AhpUidXName, typeof(AerodromeHeliportUidType));
            localElementDictionary.Add(codeCatXName, typeof(codeCatFuel));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Parking position stand or gate
    /// </para>
    /// <para>
    /// Regular expression: (GsdUid, codeType, txtDescrRestrUse?, geoLat, geoLong, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, valElev?, valElevAccuracy?, valGeoidUndulation?, uomDistVer?, valCrc?, txtVerDatum?, txtRmk?)
    /// </para>
    /// </summary>
    public partial class GateStandType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName GsdUidXName = System.Xml.Linq.XName.Get("GsdUid", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName codeTypeXName = System.Xml.Linq.XName.Get("codeType", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName txtDescrRestrUseXName = System.Xml.Linq.XName.Get("txtDescrRestrUse", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName geoLatXName = System.Xml.Linq.XName.Get("geoLat", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName geoLongXName = System.Xml.Linq.XName.Get("geoLong", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName codeDatumXName = System.Xml.Linq.XName.Get("codeDatum", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName valGeoAccuracyXName = System.Xml.Linq.XName.Get("valGeoAccuracy", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName uomGeoAccuracyXName = System.Xml.Linq.XName.Get("uomGeoAccuracy", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName valElevXName = System.Xml.Linq.XName.Get("valElev", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName valElevAccuracyXName = System.Xml.Linq.XName.Get("valElevAccuracy", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName valGeoidUndulationXName = System.Xml.Linq.XName.Get("valGeoidUndulation", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName uomDistVerXName = System.Xml.Linq.XName.Get("uomDistVer", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName valCrcXName = System.Xml.Linq.XName.Get("valCrc", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName txtVerDatumXName = System.Xml.Linq.XName.Get("txtVerDatum", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName txtRmkXName = System.Xml.Linq.XName.Get("txtRmk", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName sourceXName = System.Xml.Linq.XName.Get("source", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("GateStandType", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator GateStandType(XElement xe) { return XTypedServices.ToXTypedElement<GateStandType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static GateStandType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(GsdUidXName), new NamedContentModelEntity(codeTypeXName), new NamedContentModelEntity(txtDescrRestrUseXName), new NamedContentModelEntity(geoLatXName), new NamedContentModelEntity(geoLongXName), new NamedContentModelEntity(codeDatumXName), new NamedContentModelEntity(valGeoAccuracyXName), new NamedContentModelEntity(uomGeoAccuracyXName), new NamedContentModelEntity(valElevXName), new NamedContentModelEntity(valElevAccuracyXName), new NamedContentModelEntity(valGeoidUndulationXName), new NamedContentModelEntity(uomDistVerXName), new NamedContentModelEntity(valCrcXName), new NamedContentModelEntity(txtVerDatumXName), new NamedContentModelEntity(txtRmkXName));
        }
        
        /// <summary>
        /// <para>
        /// Parking position stand or gate
        /// </para>
        /// <para>
        /// Regular expression: (GsdUid, codeType, txtDescrRestrUse?, geoLat, geoLong, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, valElev?, valElevAccuracy?, valGeoidUndulation?, uomDistVer?, valCrc?, txtVerDatum?, txtRmk?)
        /// </para>
        /// </summary>
        public GateStandType() {
        }
        
        /// <summary>
        /// <para>
        /// a version of Parking position stand or gate
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (GsdUid, codeType, txtDescrRestrUse?, geoLat, geoLong, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, valElev?, valElevAccuracy?, valGeoidUndulation?, uomDistVer?, valCrc?, txtVerDatum?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual GateStandUidType GsdUid {
            get {
                XElement x = this.GetElement(GsdUidXName);
                return ((GateStandUidType)(x));
            }
            set {
                this.SetElement(GsdUidXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Type
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (GsdUid, codeType, txtDescrRestrUse?, geoLat, geoLong, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, valElev?, valElevAccuracy?, valGeoidUndulation?, uomDistVer?, valCrc?, txtVerDatum?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual codeTypeStand codeType {
            get {
                XElement x = this.GetElement(codeTypeXName);
                return ((codeTypeStand)(x));
            }
            set {
                this.SetElement(codeTypeXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Description of restrictive use
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (GsdUid, codeType, txtDescrRestrUse?, geoLat, geoLong, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, valElev?, valElevAccuracy?, valGeoidUndulation?, uomDistVer?, valCrc?, txtVerDatum?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual txtDescr txtDescrRestrUse {
            get {
                XElement x = this.GetElement(txtDescrRestrUseXName);
                return ((txtDescr)(x));
            }
            set {
                this.SetElement(txtDescrRestrUseXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Latitude
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (GsdUid, codeType, txtDescrRestrUse?, geoLat, geoLong, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, valElev?, valElevAccuracy?, valGeoidUndulation?, uomDistVer?, valCrc?, txtVerDatum?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual geoLat geoLat {
            get {
                XElement x = this.GetElement(geoLatXName);
                return ((geoLat)(x));
            }
            set {
                this.SetElement(geoLatXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Longitude
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (GsdUid, codeType, txtDescrRestrUse?, geoLat, geoLong, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, valElev?, valElevAccuracy?, valGeoidUndulation?, uomDistVer?, valCrc?, txtVerDatum?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual geoLong geoLong {
            get {
                XElement x = this.GetElement(geoLongXName);
                return ((geoLong)(x));
            }
            set {
                this.SetElement(geoLongXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Datum
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (GsdUid, codeType, txtDescrRestrUse?, geoLat, geoLong, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, valElev?, valElevAccuracy?, valGeoidUndulation?, uomDistVer?, valCrc?, txtVerDatum?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual codeDatum codeDatum {
            get {
                XElement x = this.GetElement(codeDatumXName);
                return ((codeDatum)(x));
            }
            set {
                this.SetElement(codeDatumXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Geographical accuracy
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (GsdUid, codeType, txtDescrRestrUse?, geoLat, geoLong, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, valElev?, valElevAccuracy?, valGeoidUndulation?, uomDistVer?, valCrc?, txtVerDatum?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual valDistHorz valGeoAccuracy {
            get {
                XElement x = this.GetElement(valGeoAccuracyXName);
                return ((valDistHorz)(x));
            }
            set {
                this.SetElement(valGeoAccuracyXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Unit of measurement [geographical accuracy]
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (GsdUid, codeType, txtDescrRestrUse?, geoLat, geoLong, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, valElev?, valElevAccuracy?, valGeoidUndulation?, uomDistVer?, valCrc?, txtVerDatum?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual uomDistHorz uomGeoAccuracy {
            get {
                XElement x = this.GetElement(uomGeoAccuracyXName);
                return ((uomDistHorz)(x));
            }
            set {
                this.SetElement(uomGeoAccuracyXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Elevation
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (GsdUid, codeType, txtDescrRestrUse?, geoLat, geoLong, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, valElev?, valElevAccuracy?, valGeoidUndulation?, uomDistVer?, valCrc?, txtVerDatum?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual valDistVer valElev {
            get {
                XElement x = this.GetElement(valElevXName);
                return ((valDistVer)(x));
            }
            set {
                this.SetElement(valElevXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Elevation accuracy
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (GsdUid, codeType, txtDescrRestrUse?, geoLat, geoLong, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, valElev?, valElevAccuracy?, valGeoidUndulation?, uomDistVer?, valCrc?, txtVerDatum?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual valDistVer valElevAccuracy {
            get {
                XElement x = this.GetElement(valElevAccuracyXName);
                return ((valDistVer)(x));
            }
            set {
                this.SetElement(valElevAccuracyXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Geoid undulation
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (GsdUid, codeType, txtDescrRestrUse?, geoLat, geoLong, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, valElev?, valElevAccuracy?, valGeoidUndulation?, uomDistVer?, valCrc?, txtVerDatum?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual valDistVer valGeoidUndulation {
            get {
                XElement x = this.GetElement(valGeoidUndulationXName);
                return ((valDistVer)(x));
            }
            set {
                this.SetElement(valGeoidUndulationXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Unit of measurement [vertical distance]
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (GsdUid, codeType, txtDescrRestrUse?, geoLat, geoLong, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, valElev?, valElevAccuracy?, valGeoidUndulation?, uomDistVer?, valCrc?, txtVerDatum?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual uomElev uomDistVer {
            get {
                XElement x = this.GetElement(uomDistVerXName);
                return ((uomElev)(x));
            }
            set {
                this.SetElement(uomDistVerXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Cyclic redundancy check
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (GsdUid, codeType, txtDescrRestrUse?, geoLat, geoLong, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, valElev?, valElevAccuracy?, valGeoidUndulation?, uomDistVer?, valCrc?, txtVerDatum?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual valHex valCrc {
            get {
                XElement x = this.GetElement(valCrcXName);
                return ((valHex)(x));
            }
            set {
                this.SetElement(valCrcXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Vertical Datum
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (GsdUid, codeType, txtDescrRestrUse?, geoLat, geoLong, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, valElev?, valElevAccuracy?, valGeoidUndulation?, uomDistVer?, valCrc?, txtVerDatum?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual txtDescr txtVerDatum {
            get {
                XElement x = this.GetElement(txtVerDatumXName);
                return ((txtDescr)(x));
            }
            set {
                this.SetElement(txtVerDatumXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Remark
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (GsdUid, codeType, txtDescrRestrUse?, geoLat, geoLong, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, valElev?, valElevAccuracy?, valGeoidUndulation?, uomDistVer?, valCrc?, txtVerDatum?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual txtRmk txtRmk {
            get {
                XElement x = this.GetElement(txtRmkXName);
                return ((txtRmk)(x));
            }
            set {
                this.SetElement(txtRmkXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string source {
            get {
                XAttribute x = this.Attribute(sourceXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(sourceXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<GateStandType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(GsdUidXName, typeof(GateStandUidType));
            localElementDictionary.Add(codeTypeXName, typeof(codeTypeStand));
            localElementDictionary.Add(txtDescrRestrUseXName, typeof(txtDescr));
            localElementDictionary.Add(geoLatXName, typeof(geoLat));
            localElementDictionary.Add(geoLongXName, typeof(geoLong));
            localElementDictionary.Add(codeDatumXName, typeof(codeDatum));
            localElementDictionary.Add(valGeoAccuracyXName, typeof(valDistHorz));
            localElementDictionary.Add(uomGeoAccuracyXName, typeof(uomDistHorz));
            localElementDictionary.Add(valElevXName, typeof(valDistVer));
            localElementDictionary.Add(valElevAccuracyXName, typeof(valDistVer));
            localElementDictionary.Add(valGeoidUndulationXName, typeof(valDistVer));
            localElementDictionary.Add(uomDistVerXName, typeof(uomElev));
            localElementDictionary.Add(valCrcXName, typeof(valHex));
            localElementDictionary.Add(txtVerDatumXName, typeof(txtDescr));
            localElementDictionary.Add(txtRmkXName, typeof(txtRmk));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Parking position stand or gate - UID
    /// </para>
    /// <para>
    /// Regular expression: (ApnUid, txtDesig)
    /// </para>
    /// </summary>
    public partial class GateStandUidType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ApnUidXName = System.Xml.Linq.XName.Get("ApnUid", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName txtDesigXName = System.Xml.Linq.XName.Get("txtDesig", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName midXName = System.Xml.Linq.XName.Get("mid", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("GateStandUidType", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator GateStandUidType(XElement xe) { return XTypedServices.ToXTypedElement<GateStandUidType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static GateStandUidType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(ApnUidXName), new NamedContentModelEntity(txtDesigXName));
        }
        
        /// <summary>
        /// <para>
        /// Parking position stand or gate - UID
        /// </para>
        /// <para>
        /// Regular expression: (ApnUid, txtDesig)
        /// </para>
        /// </summary>
        public GateStandUidType() {
        }
        
        /// <summary>
        /// <para>
        /// Parking position stand or gate is on Apron
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (ApnUid, txtDesig)
        /// </para>
        /// </summary>
        public virtual ApronUidType ApnUid {
            get {
                XElement x = this.GetElement(ApnUidXName);
                return ((ApronUidType)(x));
            }
            set {
                this.SetElement(ApnUidXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Designator
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (ApnUid, txtDesig)
        /// </para>
        /// </summary>
        public virtual txtDesig txtDesig {
            get {
                XElement x = this.GetElement(txtDesigXName);
                return ((txtDesig)(x));
            }
            set {
                this.SetElement(txtDesigXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string mid {
            get {
                XAttribute x = this.Attribute(midXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(midXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<GateStandUidType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(ApnUidXName, typeof(ApronUidType));
            localElementDictionary.Add(txtDesigXName, typeof(txtDesig));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Physical or political border
    /// </para>
    /// <para>
    /// Regular expression: (GbrUid, codeType, txtRmk?, Gbv+)
    /// </para>
    /// </summary>
    public partial class GeographicalBorderType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName GbrUidXName = System.Xml.Linq.XName.Get("GbrUid", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName codeTypeXName = System.Xml.Linq.XName.Get("codeType", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName txtRmkXName = System.Xml.Linq.XName.Get("txtRmk", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName GbvXName = System.Xml.Linq.XName.Get("Gbv", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<GeographicalBorderVertexType> GbvField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName sourceXName = System.Xml.Linq.XName.Get("source", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("GeographicalBorderType", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator GeographicalBorderType(XElement xe) { return XTypedServices.ToXTypedElement<GeographicalBorderType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static GeographicalBorderType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(GbrUidXName), new NamedContentModelEntity(codeTypeXName), new NamedContentModelEntity(txtRmkXName), new NamedContentModelEntity(GbvXName));
        }
        
        /// <summary>
        /// <para>
        /// Physical or political border
        /// </para>
        /// <para>
        /// Regular expression: (GbrUid, codeType, txtRmk?, Gbv+)
        /// </para>
        /// </summary>
        public GeographicalBorderType() {
        }
        
        /// <summary>
        /// <para>
        /// a version of Physical or political border
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (GbrUid, codeType, txtRmk?, Gbv+)
        /// </para>
        /// </summary>
        public virtual GeographicalBorderUidType GbrUid {
            get {
                XElement x = this.GetElement(GbrUidXName);
                return ((GeographicalBorderUidType)(x));
            }
            set {
                this.SetElement(GbrUidXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Type
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (GbrUid, codeType, txtRmk?, Gbv+)
        /// </para>
        /// </summary>
        public virtual codeTypeGeoBdr codeType {
            get {
                XElement x = this.GetElement(codeTypeXName);
                return ((codeTypeGeoBdr)(x));
            }
            set {
                this.SetElement(codeTypeXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Remark
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (GbrUid, codeType, txtRmk?, Gbv+)
        /// </para>
        /// </summary>
        public virtual txtRmk txtRmk {
            get {
                XElement x = this.GetElement(txtRmkXName);
                return ((txtRmk)(x));
            }
            set {
                this.SetElement(txtRmkXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Physical or political border is made of Vertex of physical or political border
        /// </para>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (GbrUid, codeType, txtRmk?, Gbv+)
        /// </para>
        /// </summary>
        public virtual IList<GeographicalBorderVertexType> Gbv {
            get {
                if ((this.GbvField == null)) {
                    this.GbvField = new XTypedList<GeographicalBorderVertexType>(this, LinqToXsdTypeManager.Instance, GbvXName);
                }
                return this.GbvField;
            }
            set {
                if ((value == null)) {
                    this.GbvField = null;
                }
                else {
                    if ((this.GbvField == null)) {
                        this.GbvField = XTypedList<GeographicalBorderVertexType>.Initialize(this, LinqToXsdTypeManager.Instance, value, GbvXName);
                    }
                    else {
                        XTypedServices.SetList<GeographicalBorderVertexType>(this.GbvField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string source {
            get {
                XAttribute x = this.Attribute(sourceXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(sourceXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<GeographicalBorderType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(GbrUidXName, typeof(GeographicalBorderUidType));
            localElementDictionary.Add(codeTypeXName, typeof(codeTypeGeoBdr));
            localElementDictionary.Add(txtRmkXName, typeof(txtRmk));
            localElementDictionary.Add(GbvXName, typeof(GeographicalBorderVertexType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Physical or political border - UID
    /// </para>
    /// <para>
    /// Regular expression: (txtName)
    /// </para>
    /// </summary>
    public partial class GeographicalBorderUidType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName txtNameXName = System.Xml.Linq.XName.Get("txtName", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName midXName = System.Xml.Linq.XName.Get("mid", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("GeographicalBorderUidType", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator GeographicalBorderUidType(XElement xe) { return XTypedServices.ToXTypedElement<GeographicalBorderUidType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static GeographicalBorderUidType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(txtNameXName));
        }
        
        /// <summary>
        /// <para>
        /// Physical or political border - UID
        /// </para>
        /// <para>
        /// Regular expression: (txtName)
        /// </para>
        /// </summary>
        public GeographicalBorderUidType() {
        }
        
        /// <summary>
        /// <para>
        /// Name
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (txtName)
        /// </para>
        /// </summary>
        public virtual txtName txtName {
            get {
                XElement x = this.GetElement(txtNameXName);
                return ((txtName)(x));
            }
            set {
                this.SetElement(txtNameXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string mid {
            get {
                XAttribute x = this.Attribute(midXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(midXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<GeographicalBorderUidType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(txtNameXName, typeof(txtName));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Vertex of physical or political border
    /// </para>
    /// <para>
    /// Regular expression: (codeType, geoLat, geoLong, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, valCrc?, txtRmk?)
    /// </para>
    /// </summary>
    public partial class GeographicalBorderVertexType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName codeTypeXName = System.Xml.Linq.XName.Get("codeType", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName geoLatXName = System.Xml.Linq.XName.Get("geoLat", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName geoLongXName = System.Xml.Linq.XName.Get("geoLong", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName codeDatumXName = System.Xml.Linq.XName.Get("codeDatum", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName valGeoAccuracyXName = System.Xml.Linq.XName.Get("valGeoAccuracy", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName uomGeoAccuracyXName = System.Xml.Linq.XName.Get("uomGeoAccuracy", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName valCrcXName = System.Xml.Linq.XName.Get("valCrc", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName txtRmkXName = System.Xml.Linq.XName.Get("txtRmk", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("GeographicalBorderVertexType", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator GeographicalBorderVertexType(XElement xe) { return XTypedServices.ToXTypedElement<GeographicalBorderVertexType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static GeographicalBorderVertexType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(codeTypeXName), new NamedContentModelEntity(geoLatXName), new NamedContentModelEntity(geoLongXName), new NamedContentModelEntity(codeDatumXName), new NamedContentModelEntity(valGeoAccuracyXName), new NamedContentModelEntity(uomGeoAccuracyXName), new NamedContentModelEntity(valCrcXName), new NamedContentModelEntity(txtRmkXName));
        }
        
        /// <summary>
        /// <para>
        /// Vertex of physical or political border
        /// </para>
        /// <para>
        /// Regular expression: (codeType, geoLat, geoLong, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, valCrc?, txtRmk?)
        /// </para>
        /// </summary>
        public GeographicalBorderVertexType() {
        }
        
        /// <summary>
        /// <para>
        /// Type
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (codeType, geoLat, geoLong, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, valCrc?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual codeTypeBorderVertex codeType {
            get {
                XElement x = this.GetElement(codeTypeXName);
                return ((codeTypeBorderVertex)(x));
            }
            set {
                this.SetElement(codeTypeXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Latitude
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (codeType, geoLat, geoLong, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, valCrc?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual geoLat geoLat {
            get {
                XElement x = this.GetElement(geoLatXName);
                return ((geoLat)(x));
            }
            set {
                this.SetElement(geoLatXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Longitude
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (codeType, geoLat, geoLong, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, valCrc?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual geoLong geoLong {
            get {
                XElement x = this.GetElement(geoLongXName);
                return ((geoLong)(x));
            }
            set {
                this.SetElement(geoLongXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Datum
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (codeType, geoLat, geoLong, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, valCrc?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual codeDatum codeDatum {
            get {
                XElement x = this.GetElement(codeDatumXName);
                return ((codeDatum)(x));
            }
            set {
                this.SetElement(codeDatumXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Geographical accuracy
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (codeType, geoLat, geoLong, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, valCrc?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual valDistHorz valGeoAccuracy {
            get {
                XElement x = this.GetElement(valGeoAccuracyXName);
                return ((valDistHorz)(x));
            }
            set {
                this.SetElement(valGeoAccuracyXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Unit of measurement [geographical accuracy]
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (codeType, geoLat, geoLong, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, valCrc?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual uomDistHorz uomGeoAccuracy {
            get {
                XElement x = this.GetElement(uomGeoAccuracyXName);
                return ((uomDistHorz)(x));
            }
            set {
                this.SetElement(uomGeoAccuracyXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Cyclic redundancy check
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (codeType, geoLat, geoLong, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, valCrc?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual valHex valCrc {
            get {
                XElement x = this.GetElement(valCrcXName);
                return ((valHex)(x));
            }
            set {
                this.SetElement(valCrcXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Remark
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (codeType, geoLat, geoLong, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, valCrc?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual txtRmk txtRmk {
            get {
                XElement x = this.GetElement(txtRmkXName);
                return ((txtRmk)(x));
            }
            set {
                this.SetElement(txtRmkXName, value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<GeographicalBorderVertexType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(codeTypeXName, typeof(codeTypeBorderVertex));
            localElementDictionary.Add(geoLatXName, typeof(geoLat));
            localElementDictionary.Add(geoLongXName, typeof(geoLong));
            localElementDictionary.Add(codeDatumXName, typeof(codeDatum));
            localElementDictionary.Add(valGeoAccuracyXName, typeof(valDistHorz));
            localElementDictionary.Add(uomGeoAccuracyXName, typeof(uomDistHorz));
            localElementDictionary.Add(valCrcXName, typeof(valHex));
            localElementDictionary.Add(txtRmkXName, typeof(txtRmk));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Ground service contact address
    /// </para>
    /// <para>
    /// Regular expression: (AgaUid, txtAddress, txtRmk?)
    /// </para>
    /// </summary>
    public partial class GroundServiceAddressType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName AgaUidXName = System.Xml.Linq.XName.Get("AgaUid", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName txtAddressXName = System.Xml.Linq.XName.Get("txtAddress", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName txtRmkXName = System.Xml.Linq.XName.Get("txtRmk", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName sourceXName = System.Xml.Linq.XName.Get("source", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("GroundServiceAddressType", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator GroundServiceAddressType(XElement xe) { return XTypedServices.ToXTypedElement<GroundServiceAddressType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static GroundServiceAddressType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(AgaUidXName), new NamedContentModelEntity(txtAddressXName), new NamedContentModelEntity(txtRmkXName));
        }
        
        /// <summary>
        /// <para>
        /// Ground service contact address
        /// </para>
        /// <para>
        /// Regular expression: (AgaUid, txtAddress, txtRmk?)
        /// </para>
        /// </summary>
        public GroundServiceAddressType() {
        }
        
        /// <summary>
        /// <para>
        /// a version of Ground service contact address
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (AgaUid, txtAddress, txtRmk?)
        /// </para>
        /// </summary>
        public virtual GroundServiceAddressUidType AgaUid {
            get {
                XElement x = this.GetElement(AgaUidXName);
                return ((GroundServiceAddressUidType)(x));
            }
            set {
                this.SetElement(AgaUidXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Full address
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (AgaUid, txtAddress, txtRmk?)
        /// </para>
        /// </summary>
        public virtual txtAddress txtAddress {
            get {
                XElement x = this.GetElement(txtAddressXName);
                return ((txtAddress)(x));
            }
            set {
                this.SetElement(txtAddressXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Remark
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (AgaUid, txtAddress, txtRmk?)
        /// </para>
        /// </summary>
        public virtual txtRmk txtRmk {
            get {
                XElement x = this.GetElement(txtRmkXName);
                return ((txtRmk)(x));
            }
            set {
                this.SetElement(txtRmkXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string source {
            get {
                XAttribute x = this.Attribute(sourceXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(sourceXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<GroundServiceAddressType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(AgaUidXName, typeof(GroundServiceAddressUidType));
            localElementDictionary.Add(txtAddressXName, typeof(txtAddress));
            localElementDictionary.Add(txtRmkXName, typeof(txtRmk));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Ground service contact address - UID
    /// </para>
    /// <para>
    /// Regular expression: (AhsUid, codeType, noSeq)
    /// </para>
    /// </summary>
    public partial class GroundServiceAddressUidType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName AhsUidXName = System.Xml.Linq.XName.Get("AhsUid", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName codeTypeXName = System.Xml.Linq.XName.Get("codeType", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName noSeqXName = System.Xml.Linq.XName.Get("noSeq", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName midXName = System.Xml.Linq.XName.Get("mid", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("GroundServiceAddressUidType", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator GroundServiceAddressUidType(XElement xe) { return XTypedServices.ToXTypedElement<GroundServiceAddressUidType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static GroundServiceAddressUidType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(AhsUidXName), new NamedContentModelEntity(codeTypeXName), new NamedContentModelEntity(noSeqXName));
        }
        
        /// <summary>
        /// <para>
        /// Ground service contact address - UID
        /// </para>
        /// <para>
        /// Regular expression: (AhsUid, codeType, noSeq)
        /// </para>
        /// </summary>
        public GroundServiceAddressUidType() {
        }
        
        /// <summary>
        /// <para>
        /// Ground service contact address is for Ground service
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (AhsUid, codeType, noSeq)
        /// </para>
        /// </summary>
        public virtual GroundServiceUidType AhsUid {
            get {
                XElement x = this.GetElement(AhsUidXName);
                return ((GroundServiceUidType)(x));
            }
            set {
                this.SetElement(AhsUidXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Type
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (AhsUid, codeType, noSeq)
        /// </para>
        /// </summary>
        public virtual codeTypeAddress codeType {
            get {
                XElement x = this.GetElement(codeTypeXName);
                return ((codeTypeAddress)(x));
            }
            set {
                this.SetElement(codeTypeXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Sequence number
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (AhsUid, codeType, noSeq)
        /// </para>
        /// </summary>
        public virtual noSeq noSeq {
            get {
                XElement x = this.GetElement(noSeqXName);
                return ((noSeq)(x));
            }
            set {
                this.SetElement(noSeqXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string mid {
            get {
                XAttribute x = this.Attribute(midXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(midXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<GroundServiceAddressUidType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(AhsUidXName, typeof(GroundServiceUidType));
            localElementDictionary.Add(codeTypeXName, typeof(codeTypeAddress));
            localElementDictionary.Add(noSeqXName, typeof(noSeq));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Ground service
    /// </para>
    /// <para>
    /// Regular expression: (AhsUid, codeCat?, codeCatReference?, txtDescrFac?, Ast?, txtRmk?)
    /// </para>
    /// </summary>
    public partial class GroundServiceType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName AhsUidXName = System.Xml.Linq.XName.Get("AhsUid", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName codeCatXName = System.Xml.Linq.XName.Get("codeCat", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName codeCatReferenceXName = System.Xml.Linq.XName.Get("codeCatReference", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName txtDescrFacXName = System.Xml.Linq.XName.Get("txtDescrFac", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName AstXName = System.Xml.Linq.XName.Get("Ast", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName txtRmkXName = System.Xml.Linq.XName.Get("txtRmk", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName sourceXName = System.Xml.Linq.XName.Get("source", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("GroundServiceType", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator GroundServiceType(XElement xe) { return XTypedServices.ToXTypedElement<GroundServiceType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static GroundServiceType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(AhsUidXName), new NamedContentModelEntity(codeCatXName), new NamedContentModelEntity(codeCatReferenceXName), new NamedContentModelEntity(txtDescrFacXName), new NamedContentModelEntity(AstXName), new NamedContentModelEntity(txtRmkXName));
        }
        
        /// <summary>
        /// <para>
        /// Ground service
        /// </para>
        /// <para>
        /// Regular expression: (AhsUid, codeCat?, codeCatReference?, txtDescrFac?, Ast?, txtRmk?)
        /// </para>
        /// </summary>
        public GroundServiceType() {
        }
        
        /// <summary>
        /// <para>
        /// a version of Ground service
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (AhsUid, codeCat?, codeCatReference?, txtDescrFac?, Ast?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual GroundServiceUidType AhsUid {
            get {
                XElement x = this.GetElement(AhsUidXName);
                return ((GroundServiceUidType)(x));
            }
            set {
                this.SetElement(AhsUidXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Category
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (AhsUid, codeCat?, codeCatReference?, txtDescrFac?, Ast?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual codeCatFireAd codeCat {
            get {
                XElement x = this.GetElement(codeCatXName);
                return ((codeCatFireAd)(x));
            }
            set {
                this.SetElement(codeCatXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Category standard
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (AhsUid, codeCat?, codeCatReference?, txtDescrFac?, Ast?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual codeLovReference codeCatReference {
            get {
                XElement x = this.GetElement(codeCatReferenceXName);
                return ((codeLovReference)(x));
            }
            set {
                this.SetElement(codeCatReferenceXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Associated facility description
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (AhsUid, codeCat?, codeCatReference?, txtDescrFac?, Ast?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual txtDescr txtDescrFac {
            get {
                XElement x = this.GetElement(txtDescrFacXName);
                return ((txtDescr)(x));
            }
            set {
                this.SetElement(txtDescrFacXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Ground service is operating according to Ground service - Timetable
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (AhsUid, codeCat?, codeCatReference?, txtDescrFac?, Ast?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual TimetableType Ast {
            get {
                XElement x = this.GetElement(AstXName);
                return ((TimetableType)(x));
            }
            set {
                this.SetElement(AstXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Remark
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (AhsUid, codeCat?, codeCatReference?, txtDescrFac?, Ast?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual txtRmk txtRmk {
            get {
                XElement x = this.GetElement(txtRmkXName);
                return ((txtRmk)(x));
            }
            set {
                this.SetElement(txtRmkXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string source {
            get {
                XAttribute x = this.Attribute(sourceXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(sourceXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<GroundServiceType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(AhsUidXName, typeof(GroundServiceUidType));
            localElementDictionary.Add(codeCatXName, typeof(codeCatFireAd));
            localElementDictionary.Add(codeCatReferenceXName, typeof(codeLovReference));
            localElementDictionary.Add(txtDescrFacXName, typeof(txtDescr));
            localElementDictionary.Add(AstXName, typeof(TimetableType));
            localElementDictionary.Add(txtRmkXName, typeof(txtRmk));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Ground service - UID
    /// </para>
    /// <para>
    /// Regular expression: (AhpUid, codeType)
    /// </para>
    /// </summary>
    public partial class GroundServiceUidType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName AhpUidXName = System.Xml.Linq.XName.Get("AhpUid", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName codeTypeXName = System.Xml.Linq.XName.Get("codeType", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName midXName = System.Xml.Linq.XName.Get("mid", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("GroundServiceUidType", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator GroundServiceUidType(XElement xe) { return XTypedServices.ToXTypedElement<GroundServiceUidType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static GroundServiceUidType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(AhpUidXName), new NamedContentModelEntity(codeTypeXName));
        }
        
        /// <summary>
        /// <para>
        /// Ground service - UID
        /// </para>
        /// <para>
        /// Regular expression: (AhpUid, codeType)
        /// </para>
        /// </summary>
        public GroundServiceUidType() {
        }
        
        /// <summary>
        /// <para>
        /// Ground service is associated with Aerodrome / Heliport
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (AhpUid, codeType)
        /// </para>
        /// </summary>
        public virtual AerodromeHeliportUidType AhpUid {
            get {
                XElement x = this.GetElement(AhpUidXName);
                return ((AerodromeHeliportUidType)(x));
            }
            set {
                this.SetElement(AhpUidXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Type
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (AhpUid, codeType)
        /// </para>
        /// </summary>
        public virtual codeTypeSerAd codeType {
            get {
                XElement x = this.GetElement(codeTypeXName);
                return ((codeTypeSerAd)(x));
            }
            set {
                this.SetElement(codeTypeXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string mid {
            get {
                XAttribute x = this.Attribute(midXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(midXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<GroundServiceUidType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(AhpUidXName, typeof(AerodromeHeliportUidType));
            localElementDictionary.Add(codeTypeXName, typeof(codeTypeSerAd));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Service provided on holding procedure
    /// </para>
    /// <para>
    /// Regular expression: (ShpUid, txtRmk?)
    /// </para>
    /// </summary>
    public partial class HoldingProcedureServiceType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ShpUidXName = System.Xml.Linq.XName.Get("ShpUid", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName txtRmkXName = System.Xml.Linq.XName.Get("txtRmk", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName sourceXName = System.Xml.Linq.XName.Get("source", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("HoldingProcedureServiceType", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator HoldingProcedureServiceType(XElement xe) { return XTypedServices.ToXTypedElement<HoldingProcedureServiceType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static HoldingProcedureServiceType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(ShpUidXName), new NamedContentModelEntity(txtRmkXName));
        }
        
        /// <summary>
        /// <para>
        /// Service provided on holding procedure
        /// </para>
        /// <para>
        /// Regular expression: (ShpUid, txtRmk?)
        /// </para>
        /// </summary>
        public HoldingProcedureServiceType() {
        }
        
        /// <summary>
        /// <para>
        /// a version of Service provided on holding procedure
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (ShpUid, txtRmk?)
        /// </para>
        /// </summary>
        public virtual HoldingProcedureServiceUidType ShpUid {
            get {
                XElement x = this.GetElement(ShpUidXName);
                return ((HoldingProcedureServiceUidType)(x));
            }
            set {
                this.SetElement(ShpUidXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Remark
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (ShpUid, txtRmk?)
        /// </para>
        /// </summary>
        public virtual txtRmk txtRmk {
            get {
                XElement x = this.GetElement(txtRmkXName);
                return ((txtRmk)(x));
            }
            set {
                this.SetElement(txtRmkXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string source {
            get {
                XAttribute x = this.Attribute(sourceXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(sourceXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<HoldingProcedureServiceType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(ShpUidXName, typeof(HoldingProcedureServiceUidType));
            localElementDictionary.Add(txtRmkXName, typeof(txtRmk));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Service provided on holding procedure - UID
    /// </para>
    /// <para>
    /// Regular expression: (HpeUid, SerUid)
    /// </para>
    /// </summary>
    public partial class HoldingProcedureServiceUidType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName HpeUidXName = System.Xml.Linq.XName.Get("HpeUid", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName SerUidXName = System.Xml.Linq.XName.Get("SerUid", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName midXName = System.Xml.Linq.XName.Get("mid", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("HoldingProcedureServiceUidType", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator HoldingProcedureServiceUidType(XElement xe) { return XTypedServices.ToXTypedElement<HoldingProcedureServiceUidType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static HoldingProcedureServiceUidType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(HpeUidXName), new NamedContentModelEntity(SerUidXName));
        }
        
        /// <summary>
        /// <para>
        /// Service provided on holding procedure - UID
        /// </para>
        /// <para>
        /// Regular expression: (HpeUid, SerUid)
        /// </para>
        /// </summary>
        public HoldingProcedureServiceUidType() {
        }
        
        /// <summary>
        /// <para>
        /// Service provided on holding procedure is furnished on Holding procedure
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (HpeUid, SerUid)
        /// </para>
        /// </summary>
        public virtual HoldingProcedureUidType HpeUid {
            get {
                XElement x = this.GetElement(HpeUidXName);
                return ((HoldingProcedureUidType)(x));
            }
            set {
                this.SetElement(HpeUidXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Service provided on holding procedure is also Service
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (HpeUid, SerUid)
        /// </para>
        /// </summary>
        public virtual ServiceUidType SerUid {
            get {
                XElement x = this.GetElement(SerUidXName);
                return ((ServiceUidType)(x));
            }
            set {
                this.SetElement(SerUidXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string mid {
            get {
                XAttribute x = this.Attribute(midXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(midXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<HoldingProcedureServiceUidType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(HpeUidXName, typeof(HoldingProcedureUidType));
            localElementDictionary.Add(SerUidXName, typeof(ServiceUidType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Holding procedure
    /// </para>
    /// <para>
    /// Regular expression: (HpeUid, txtDescr?, txtRmk?, Plg*)
    /// </para>
    /// </summary>
    public partial class HoldingProcedureType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName HpeUidXName = System.Xml.Linq.XName.Get("HpeUid", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName txtDescrXName = System.Xml.Linq.XName.Get("txtDescr", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName txtRmkXName = System.Xml.Linq.XName.Get("txtRmk", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName PlgXName = System.Xml.Linq.XName.Get("Plg", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ProcedureLegType> PlgField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName sourceXName = System.Xml.Linq.XName.Get("source", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("HoldingProcedureType", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator HoldingProcedureType(XElement xe) { return XTypedServices.ToXTypedElement<HoldingProcedureType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static HoldingProcedureType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(HpeUidXName), new NamedContentModelEntity(txtDescrXName), new NamedContentModelEntity(txtRmkXName), new NamedContentModelEntity(PlgXName));
        }
        
        /// <summary>
        /// <para>
        /// Holding procedure
        /// </para>
        /// <para>
        /// Regular expression: (HpeUid, txtDescr?, txtRmk?, Plg*)
        /// </para>
        /// </summary>
        public HoldingProcedureType() {
        }
        
        /// <summary>
        /// <para>
        /// a version of Holding procedure
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (HpeUid, txtDescr?, txtRmk?, Plg*)
        /// </para>
        /// </summary>
        public virtual HoldingProcedureUidType HpeUid {
            get {
                XElement x = this.GetElement(HpeUidXName);
                return ((HoldingProcedureUidType)(x));
            }
            set {
                this.SetElement(HpeUidXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Description
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (HpeUid, txtDescr?, txtRmk?, Plg*)
        /// </para>
        /// </summary>
        public virtual txtDescr txtDescr {
            get {
                XElement x = this.GetElement(txtDescrXName);
                return ((txtDescr)(x));
            }
            set {
                this.SetElement(txtDescrXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Remark
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (HpeUid, txtDescr?, txtRmk?, Plg*)
        /// </para>
        /// </summary>
        public virtual txtRmk txtRmk {
            get {
                XElement x = this.GetElement(txtRmkXName);
                return ((txtRmk)(x));
            }
            set {
                this.SetElement(txtRmkXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Holding procedure is composed of Procedure leg
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (HpeUid, txtDescr?, txtRmk?, Plg*)
        /// </para>
        /// </summary>
        public virtual IList<ProcedureLegType> Plg {
            get {
                if ((this.PlgField == null)) {
                    this.PlgField = new XTypedList<ProcedureLegType>(this, LinqToXsdTypeManager.Instance, PlgXName);
                }
                return this.PlgField;
            }
            set {
                if ((value == null)) {
                    this.PlgField = null;
                }
                else {
                    if ((this.PlgField == null)) {
                        this.PlgField = XTypedList<ProcedureLegType>.Initialize(this, LinqToXsdTypeManager.Instance, value, PlgXName);
                    }
                    else {
                        XTypedServices.SetList<ProcedureLegType>(this.PlgField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string source {
            get {
                XAttribute x = this.Attribute(sourceXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(sourceXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<HoldingProcedureType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(HpeUidXName, typeof(HoldingProcedureUidType));
            localElementDictionary.Add(txtDescrXName, typeof(txtDescr));
            localElementDictionary.Add(txtRmkXName, typeof(txtRmk));
            localElementDictionary.Add(PlgXName, typeof(ProcedureLegType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Holding procedure - UID
    /// </para>
    /// <para>
    /// Regular expression: ((TcnUidSpn | VorUidSpn | DpnUidSpn | NdbUidSpn | DmeUidSpn | MkrUidSpn), codeType)
    /// </para>
    /// </summary>
    public partial class HoldingProcedureUidType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TcnUidSpnXName = System.Xml.Linq.XName.Get("TcnUidSpn", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName VorUidSpnXName = System.Xml.Linq.XName.Get("VorUidSpn", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName DpnUidSpnXName = System.Xml.Linq.XName.Get("DpnUidSpn", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName NdbUidSpnXName = System.Xml.Linq.XName.Get("NdbUidSpn", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName DmeUidSpnXName = System.Xml.Linq.XName.Get("DmeUidSpn", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName MkrUidSpnXName = System.Xml.Linq.XName.Get("MkrUidSpn", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName codeTypeXName = System.Xml.Linq.XName.Get("codeType", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName midXName = System.Xml.Linq.XName.Get("mid", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("HoldingProcedureUidType", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator HoldingProcedureUidType(XElement xe) { return XTypedServices.ToXTypedElement<HoldingProcedureUidType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static HoldingProcedureUidType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new ChoiceContentModelEntity(new NamedContentModelEntity(TcnUidSpnXName), new NamedContentModelEntity(VorUidSpnXName), new NamedContentModelEntity(DpnUidSpnXName), new NamedContentModelEntity(NdbUidSpnXName), new NamedContentModelEntity(DmeUidSpnXName), new NamedContentModelEntity(MkrUidSpnXName)), new NamedContentModelEntity(codeTypeXName));
        }
        
        /// <summary>
        /// <para>
        /// Holding procedure - UID
        /// </para>
        /// <para>
        /// Regular expression: ((TcnUidSpn | VorUidSpn | DpnUidSpn | NdbUidSpn | DmeUidSpn | MkrUidSpn), codeType)
        /// </para>
        /// </summary>
        public HoldingProcedureUidType() {
        }
        
        /// <summary>
        /// <para>
        /// Significant point is at Tactical air navigation beacon [TACAN]
        /// </para>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((TcnUidSpn | VorUidSpn | DpnUidSpn | NdbUidSpn | DmeUidSpn | MkrUidSpn), codeType)
        /// </para>
        /// </summary>
        public virtual TacanUidType TcnUidSpn {
            get {
                XElement x = this.GetElement(TcnUidSpnXName);
                return ((TacanUidType)(x));
            }
            set {
                this.SetElement(TcnUidSpnXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Significant point is at VHF omnidirectional radio range beacon [VOR]
        /// </para>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((TcnUidSpn | VorUidSpn | DpnUidSpn | NdbUidSpn | DmeUidSpn | MkrUidSpn), codeType)
        /// </para>
        /// </summary>
        public virtual VorUidType VorUidSpn {
            get {
                XElement x = this.GetElement(VorUidSpnXName);
                return ((VorUidType)(x));
            }
            set {
                this.SetElement(VorUidSpnXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Significant point is at Designated point
        /// </para>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((TcnUidSpn | VorUidSpn | DpnUidSpn | NdbUidSpn | DmeUidSpn | MkrUidSpn), codeType)
        /// </para>
        /// </summary>
        public virtual DesignatedPointUidType DpnUidSpn {
            get {
                XElement x = this.GetElement(DpnUidSpnXName);
                return ((DesignatedPointUidType)(x));
            }
            set {
                this.SetElement(DpnUidSpnXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Significant point is at Non-directional radio beacon [NDB]
        /// </para>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((TcnUidSpn | VorUidSpn | DpnUidSpn | NdbUidSpn | DmeUidSpn | MkrUidSpn), codeType)
        /// </para>
        /// </summary>
        public virtual NdbUidType NdbUidSpn {
            get {
                XElement x = this.GetElement(NdbUidSpnXName);
                return ((NdbUidType)(x));
            }
            set {
                this.SetElement(NdbUidSpnXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Significant point is at Distance measuring equipment [DME]
        /// </para>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((TcnUidSpn | VorUidSpn | DpnUidSpn | NdbUidSpn | DmeUidSpn | MkrUidSpn), codeType)
        /// </para>
        /// </summary>
        public virtual DmeUidType DmeUidSpn {
            get {
                XElement x = this.GetElement(DmeUidSpnXName);
                return ((DmeUidType)(x));
            }
            set {
                this.SetElement(DmeUidSpnXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Significant point is at Marker [MKR]
        /// </para>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((TcnUidSpn | VorUidSpn | DpnUidSpn | NdbUidSpn | DmeUidSpn | MkrUidSpn), codeType)
        /// </para>
        /// </summary>
        public virtual MkrUidType MkrUidSpn {
            get {
                XElement x = this.GetElement(MkrUidSpnXName);
                return ((MkrUidType)(x));
            }
            set {
                this.SetElement(MkrUidSpnXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Type
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: ((TcnUidSpn | VorUidSpn | DpnUidSpn | NdbUidSpn | DmeUidSpn | MkrUidSpn), codeType)
        /// </para>
        /// </summary>
        public virtual codeTypeHoldProc codeType {
            get {
                XElement x = this.GetElement(codeTypeXName);
                return ((codeTypeHoldProc)(x));
            }
            set {
                this.SetElement(codeTypeXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string mid {
            get {
                XAttribute x = this.Attribute(midXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(midXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<HoldingProcedureUidType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(TcnUidSpnXName, typeof(TacanUidType));
            localElementDictionary.Add(VorUidSpnXName, typeof(VorUidType));
            localElementDictionary.Add(DpnUidSpnXName, typeof(DesignatedPointUidType));
            localElementDictionary.Add(NdbUidSpnXName, typeof(NdbUidType));
            localElementDictionary.Add(DmeUidSpnXName, typeof(DmeUidType));
            localElementDictionary.Add(MkrUidSpnXName, typeof(MkrUidType));
            localElementDictionary.Add(codeTypeXName, typeof(codeTypeHoldProc));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// ILS Glide Path
    /// </para>
    /// <para>
    /// Regular expression: (valFreq, uomFreq, codeEm?, valSlope?, valRdh?, uomRdh?, geoLat, geoLong, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, valElev?, valElevAccuracy?, valGeoidUndulation?, uomDistVer?, valCrc?, txtVerDatum?, Igt?, txtRmk?)
    /// </para>
    /// </summary>
    public partial class IlsGlidePathType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName valFreqXName = System.Xml.Linq.XName.Get("valFreq", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName uomFreqXName = System.Xml.Linq.XName.Get("uomFreq", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName codeEmXName = System.Xml.Linq.XName.Get("codeEm", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName valSlopeXName = System.Xml.Linq.XName.Get("valSlope", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName valRdhXName = System.Xml.Linq.XName.Get("valRdh", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName uomRdhXName = System.Xml.Linq.XName.Get("uomRdh", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName geoLatXName = System.Xml.Linq.XName.Get("geoLat", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName geoLongXName = System.Xml.Linq.XName.Get("geoLong", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName codeDatumXName = System.Xml.Linq.XName.Get("codeDatum", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName valGeoAccuracyXName = System.Xml.Linq.XName.Get("valGeoAccuracy", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName uomGeoAccuracyXName = System.Xml.Linq.XName.Get("uomGeoAccuracy", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName valElevXName = System.Xml.Linq.XName.Get("valElev", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName valElevAccuracyXName = System.Xml.Linq.XName.Get("valElevAccuracy", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName valGeoidUndulationXName = System.Xml.Linq.XName.Get("valGeoidUndulation", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName uomDistVerXName = System.Xml.Linq.XName.Get("uomDistVer", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName valCrcXName = System.Xml.Linq.XName.Get("valCrc", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName txtVerDatumXName = System.Xml.Linq.XName.Get("txtVerDatum", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName IgtXName = System.Xml.Linq.XName.Get("Igt", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName txtRmkXName = System.Xml.Linq.XName.Get("txtRmk", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("IlsGlidePathType", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator IlsGlidePathType(XElement xe) { return XTypedServices.ToXTypedElement<IlsGlidePathType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static IlsGlidePathType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(valFreqXName), new NamedContentModelEntity(uomFreqXName), new NamedContentModelEntity(codeEmXName), new NamedContentModelEntity(valSlopeXName), new NamedContentModelEntity(valRdhXName), new NamedContentModelEntity(uomRdhXName), new NamedContentModelEntity(geoLatXName), new NamedContentModelEntity(geoLongXName), new NamedContentModelEntity(codeDatumXName), new NamedContentModelEntity(valGeoAccuracyXName), new NamedContentModelEntity(uomGeoAccuracyXName), new NamedContentModelEntity(valElevXName), new NamedContentModelEntity(valElevAccuracyXName), new NamedContentModelEntity(valGeoidUndulationXName), new NamedContentModelEntity(uomDistVerXName), new NamedContentModelEntity(valCrcXName), new NamedContentModelEntity(txtVerDatumXName), new NamedContentModelEntity(IgtXName), new NamedContentModelEntity(txtRmkXName));
        }
        
        /// <summary>
        /// <para>
        /// ILS Glide Path
        /// </para>
        /// <para>
        /// Regular expression: (valFreq, uomFreq, codeEm?, valSlope?, valRdh?, uomRdh?, geoLat, geoLong, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, valElev?, valElevAccuracy?, valGeoidUndulation?, uomDistVer?, valCrc?, txtVerDatum?, Igt?, txtRmk?)
        /// </para>
        /// </summary>
        public IlsGlidePathType() {
        }
        
        /// <summary>
        /// <para>
        /// Frequency
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (valFreq, uomFreq, codeEm?, valSlope?, valRdh?, uomRdh?, geoLat, geoLong, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, valElev?, valElevAccuracy?, valGeoidUndulation?, uomDistVer?, valCrc?, txtVerDatum?, Igt?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual valFreq valFreq {
            get {
                XElement x = this.GetElement(valFreqXName);
                return ((valFreq)(x));
            }
            set {
                this.SetElement(valFreqXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Unit of measurement [frequency]
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (valFreq, uomFreq, codeEm?, valSlope?, valRdh?, uomRdh?, geoLat, geoLong, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, valElev?, valElevAccuracy?, valGeoidUndulation?, uomDistVer?, valCrc?, txtVerDatum?, Igt?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual uomFreq uomFreq {
            get {
                XElement x = this.GetElement(uomFreqXName);
                return ((uomFreq)(x));
            }
            set {
                this.SetElement(uomFreqXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Emission
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (valFreq, uomFreq, codeEm?, valSlope?, valRdh?, uomRdh?, geoLat, geoLong, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, valElev?, valElevAccuracy?, valGeoidUndulation?, uomDistVer?, valCrc?, txtVerDatum?, Igt?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual codeEmRdo codeEm {
            get {
                XElement x = this.GetElement(codeEmXName);
                return ((codeEmRdo)(x));
            }
            set {
                this.SetElement(codeEmXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Slope angle
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (valFreq, uomFreq, codeEm?, valSlope?, valRdh?, uomRdh?, geoLat, geoLong, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, valElev?, valElevAccuracy?, valGeoidUndulation?, uomDistVer?, valCrc?, txtVerDatum?, Igt?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual valAngle valSlope {
            get {
                XElement x = this.GetElement(valSlopeXName);
                return ((valAngle)(x));
            }
            set {
                this.SetElement(valSlopeXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Reference datum height
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (valFreq, uomFreq, codeEm?, valSlope?, valRdh?, uomRdh?, geoLat, geoLong, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, valElev?, valElevAccuracy?, valGeoidUndulation?, uomDistVer?, valCrc?, txtVerDatum?, Igt?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual valDistVer valRdh {
            get {
                XElement x = this.GetElement(valRdhXName);
                return ((valDistVer)(x));
            }
            set {
                this.SetElement(valRdhXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Unit of measurement [reference datum height]
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (valFreq, uomFreq, codeEm?, valSlope?, valRdh?, uomRdh?, geoLat, geoLong, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, valElev?, valElevAccuracy?, valGeoidUndulation?, uomDistVer?, valCrc?, txtVerDatum?, Igt?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual uomElev uomRdh {
            get {
                XElement x = this.GetElement(uomRdhXName);
                return ((uomElev)(x));
            }
            set {
                this.SetElement(uomRdhXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Latitude
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (valFreq, uomFreq, codeEm?, valSlope?, valRdh?, uomRdh?, geoLat, geoLong, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, valElev?, valElevAccuracy?, valGeoidUndulation?, uomDistVer?, valCrc?, txtVerDatum?, Igt?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual geoLat geoLat {
            get {
                XElement x = this.GetElement(geoLatXName);
                return ((geoLat)(x));
            }
            set {
                this.SetElement(geoLatXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Longitude
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (valFreq, uomFreq, codeEm?, valSlope?, valRdh?, uomRdh?, geoLat, geoLong, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, valElev?, valElevAccuracy?, valGeoidUndulation?, uomDistVer?, valCrc?, txtVerDatum?, Igt?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual geoLong geoLong {
            get {
                XElement x = this.GetElement(geoLongXName);
                return ((geoLong)(x));
            }
            set {
                this.SetElement(geoLongXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Datum
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (valFreq, uomFreq, codeEm?, valSlope?, valRdh?, uomRdh?, geoLat, geoLong, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, valElev?, valElevAccuracy?, valGeoidUndulation?, uomDistVer?, valCrc?, txtVerDatum?, Igt?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual codeDatum codeDatum {
            get {
                XElement x = this.GetElement(codeDatumXName);
                return ((codeDatum)(x));
            }
            set {
                this.SetElement(codeDatumXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Geographical accuracy
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (valFreq, uomFreq, codeEm?, valSlope?, valRdh?, uomRdh?, geoLat, geoLong, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, valElev?, valElevAccuracy?, valGeoidUndulation?, uomDistVer?, valCrc?, txtVerDatum?, Igt?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual valDistHorz valGeoAccuracy {
            get {
                XElement x = this.GetElement(valGeoAccuracyXName);
                return ((valDistHorz)(x));
            }
            set {
                this.SetElement(valGeoAccuracyXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Unit of measurement [geographical accuracy]
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (valFreq, uomFreq, codeEm?, valSlope?, valRdh?, uomRdh?, geoLat, geoLong, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, valElev?, valElevAccuracy?, valGeoidUndulation?, uomDistVer?, valCrc?, txtVerDatum?, Igt?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual uomDistHorz uomGeoAccuracy {
            get {
                XElement x = this.GetElement(uomGeoAccuracyXName);
                return ((uomDistHorz)(x));
            }
            set {
                this.SetElement(uomGeoAccuracyXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Elevation
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (valFreq, uomFreq, codeEm?, valSlope?, valRdh?, uomRdh?, geoLat, geoLong, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, valElev?, valElevAccuracy?, valGeoidUndulation?, uomDistVer?, valCrc?, txtVerDatum?, Igt?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual valDistVer valElev {
            get {
                XElement x = this.GetElement(valElevXName);
                return ((valDistVer)(x));
            }
            set {
                this.SetElement(valElevXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Elevation accuracy
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (valFreq, uomFreq, codeEm?, valSlope?, valRdh?, uomRdh?, geoLat, geoLong, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, valElev?, valElevAccuracy?, valGeoidUndulation?, uomDistVer?, valCrc?, txtVerDatum?, Igt?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual valDistVer valElevAccuracy {
            get {
                XElement x = this.GetElement(valElevAccuracyXName);
                return ((valDistVer)(x));
            }
            set {
                this.SetElement(valElevAccuracyXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Geoid undulation
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (valFreq, uomFreq, codeEm?, valSlope?, valRdh?, uomRdh?, geoLat, geoLong, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, valElev?, valElevAccuracy?, valGeoidUndulation?, uomDistVer?, valCrc?, txtVerDatum?, Igt?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual valDistVer valGeoidUndulation {
            get {
                XElement x = this.GetElement(valGeoidUndulationXName);
                return ((valDistVer)(x));
            }
            set {
                this.SetElement(valGeoidUndulationXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Unit of measurement [vertical distance]
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (valFreq, uomFreq, codeEm?, valSlope?, valRdh?, uomRdh?, geoLat, geoLong, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, valElev?, valElevAccuracy?, valGeoidUndulation?, uomDistVer?, valCrc?, txtVerDatum?, Igt?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual uomElev uomDistVer {
            get {
                XElement x = this.GetElement(uomDistVerXName);
                return ((uomElev)(x));
            }
            set {
                this.SetElement(uomDistVerXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Cyclic redundancy check
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (valFreq, uomFreq, codeEm?, valSlope?, valRdh?, uomRdh?, geoLat, geoLong, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, valElev?, valElevAccuracy?, valGeoidUndulation?, uomDistVer?, valCrc?, txtVerDatum?, Igt?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual valHex valCrc {
            get {
                XElement x = this.GetElement(valCrcXName);
                return ((valHex)(x));
            }
            set {
                this.SetElement(valCrcXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Vertical Datum
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (valFreq, uomFreq, codeEm?, valSlope?, valRdh?, uomRdh?, geoLat, geoLong, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, valElev?, valElevAccuracy?, valGeoidUndulation?, uomDistVer?, valCrc?, txtVerDatum?, Igt?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual txtDescr txtVerDatum {
            get {
                XElement x = this.GetElement(txtVerDatumXName);
                return ((txtDescr)(x));
            }
            set {
                this.SetElement(txtVerDatumXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// ILS Glide Path is operating according to ILS glide path - Timetable
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (valFreq, uomFreq, codeEm?, valSlope?, valRdh?, uomRdh?, geoLat, geoLong, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, valElev?, valElevAccuracy?, valGeoidUndulation?, uomDistVer?, valCrc?, txtVerDatum?, Igt?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual TimetableNavaidType Igt {
            get {
                XElement x = this.GetElement(IgtXName);
                return ((TimetableNavaidType)(x));
            }
            set {
                this.SetElement(IgtXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Remark
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (valFreq, uomFreq, codeEm?, valSlope?, valRdh?, uomRdh?, geoLat, geoLong, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, valElev?, valElevAccuracy?, valGeoidUndulation?, uomDistVer?, valCrc?, txtVerDatum?, Igt?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual txtRmk txtRmk {
            get {
                XElement x = this.GetElement(txtRmkXName);
                return ((txtRmk)(x));
            }
            set {
                this.SetElement(txtRmkXName, value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<IlsGlidePathType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(valFreqXName, typeof(valFreq));
            localElementDictionary.Add(uomFreqXName, typeof(uomFreq));
            localElementDictionary.Add(codeEmXName, typeof(codeEmRdo));
            localElementDictionary.Add(valSlopeXName, typeof(valAngle));
            localElementDictionary.Add(valRdhXName, typeof(valDistVer));
            localElementDictionary.Add(uomRdhXName, typeof(uomElev));
            localElementDictionary.Add(geoLatXName, typeof(geoLat));
            localElementDictionary.Add(geoLongXName, typeof(geoLong));
            localElementDictionary.Add(codeDatumXName, typeof(codeDatum));
            localElementDictionary.Add(valGeoAccuracyXName, typeof(valDistHorz));
            localElementDictionary.Add(uomGeoAccuracyXName, typeof(uomDistHorz));
            localElementDictionary.Add(valElevXName, typeof(valDistVer));
            localElementDictionary.Add(valElevAccuracyXName, typeof(valDistVer));
            localElementDictionary.Add(valGeoidUndulationXName, typeof(valDistVer));
            localElementDictionary.Add(uomDistVerXName, typeof(uomElev));
            localElementDictionary.Add(valCrcXName, typeof(valHex));
            localElementDictionary.Add(txtVerDatumXName, typeof(txtDescr));
            localElementDictionary.Add(IgtXName, typeof(TimetableNavaidType));
            localElementDictionary.Add(txtRmkXName, typeof(txtRmk));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// ILS Localizer
    /// </para>
    /// <para>
    /// Regular expression: (codeId, valFreq, uomFreq, codeEm?, valMagBrg?, valTrueBrg?, valMagVar?, dateMagVar?, valWidCourse?, codeTypeUseBack?, geoLat, geoLong, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, valElev?, valElevAccuracy?, valGeoidUndulation?, uomDistVer?, valCrc?, txtVerDatum?, Ilt?, txtRmk?)
    /// </para>
    /// </summary>
    public partial class IlsLocalizerType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName codeIdXName = System.Xml.Linq.XName.Get("codeId", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName valFreqXName = System.Xml.Linq.XName.Get("valFreq", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName uomFreqXName = System.Xml.Linq.XName.Get("uomFreq", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName codeEmXName = System.Xml.Linq.XName.Get("codeEm", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName valMagBrgXName = System.Xml.Linq.XName.Get("valMagBrg", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName valTrueBrgXName = System.Xml.Linq.XName.Get("valTrueBrg", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName valMagVarXName = System.Xml.Linq.XName.Get("valMagVar", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName dateMagVarXName = System.Xml.Linq.XName.Get("dateMagVar", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName valWidCourseXName = System.Xml.Linq.XName.Get("valWidCourse", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName codeTypeUseBackXName = System.Xml.Linq.XName.Get("codeTypeUseBack", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName geoLatXName = System.Xml.Linq.XName.Get("geoLat", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName geoLongXName = System.Xml.Linq.XName.Get("geoLong", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName codeDatumXName = System.Xml.Linq.XName.Get("codeDatum", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName valGeoAccuracyXName = System.Xml.Linq.XName.Get("valGeoAccuracy", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName uomGeoAccuracyXName = System.Xml.Linq.XName.Get("uomGeoAccuracy", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName valElevXName = System.Xml.Linq.XName.Get("valElev", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName valElevAccuracyXName = System.Xml.Linq.XName.Get("valElevAccuracy", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName valGeoidUndulationXName = System.Xml.Linq.XName.Get("valGeoidUndulation", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName uomDistVerXName = System.Xml.Linq.XName.Get("uomDistVer", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName valCrcXName = System.Xml.Linq.XName.Get("valCrc", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName txtVerDatumXName = System.Xml.Linq.XName.Get("txtVerDatum", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName IltXName = System.Xml.Linq.XName.Get("Ilt", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName txtRmkXName = System.Xml.Linq.XName.Get("txtRmk", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("IlsLocalizerType", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator IlsLocalizerType(XElement xe) { return XTypedServices.ToXTypedElement<IlsLocalizerType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static IlsLocalizerType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(codeIdXName), new NamedContentModelEntity(valFreqXName), new NamedContentModelEntity(uomFreqXName), new NamedContentModelEntity(codeEmXName), new NamedContentModelEntity(valMagBrgXName), new NamedContentModelEntity(valTrueBrgXName), new NamedContentModelEntity(valMagVarXName), new NamedContentModelEntity(dateMagVarXName), new NamedContentModelEntity(valWidCourseXName), new NamedContentModelEntity(codeTypeUseBackXName), new NamedContentModelEntity(geoLatXName), new NamedContentModelEntity(geoLongXName), new NamedContentModelEntity(codeDatumXName), new NamedContentModelEntity(valGeoAccuracyXName), new NamedContentModelEntity(uomGeoAccuracyXName), new NamedContentModelEntity(valElevXName), new NamedContentModelEntity(valElevAccuracyXName), new NamedContentModelEntity(valGeoidUndulationXName), new NamedContentModelEntity(uomDistVerXName), new NamedContentModelEntity(valCrcXName), new NamedContentModelEntity(txtVerDatumXName), new NamedContentModelEntity(IltXName), new NamedContentModelEntity(txtRmkXName));
        }
        
        /// <summary>
        /// <para>
        /// ILS Localizer
        /// </para>
        /// <para>
        /// Regular expression: (codeId, valFreq, uomFreq, codeEm?, valMagBrg?, valTrueBrg?, valMagVar?, dateMagVar?, valWidCourse?, codeTypeUseBack?, geoLat, geoLong, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, valElev?, valElevAccuracy?, valGeoidUndulation?, uomDistVer?, valCrc?, txtVerDatum?, Ilt?, txtRmk?)
        /// </para>
        /// </summary>
        public IlsLocalizerType() {
        }
        
        /// <summary>
        /// <para>
        /// Identification
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (codeId, valFreq, uomFreq, codeEm?, valMagBrg?, valTrueBrg?, valMagVar?, dateMagVar?, valWidCourse?, codeTypeUseBack?, geoLat, geoLong, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, valElev?, valElevAccuracy?, valGeoidUndulation?, uomDistVer?, valCrc?, txtVerDatum?, Ilt?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual codeIdIlsMls codeId {
            get {
                XElement x = this.GetElement(codeIdXName);
                return ((codeIdIlsMls)(x));
            }
            set {
                this.SetElement(codeIdXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Frequency
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (codeId, valFreq, uomFreq, codeEm?, valMagBrg?, valTrueBrg?, valMagVar?, dateMagVar?, valWidCourse?, codeTypeUseBack?, geoLat, geoLong, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, valElev?, valElevAccuracy?, valGeoidUndulation?, uomDistVer?, valCrc?, txtVerDatum?, Ilt?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual valFreq valFreq {
            get {
                XElement x = this.GetElement(valFreqXName);
                return ((valFreq)(x));
            }
            set {
                this.SetElement(valFreqXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Unit of measurement [frequency]
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (codeId, valFreq, uomFreq, codeEm?, valMagBrg?, valTrueBrg?, valMagVar?, dateMagVar?, valWidCourse?, codeTypeUseBack?, geoLat, geoLong, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, valElev?, valElevAccuracy?, valGeoidUndulation?, uomDistVer?, valCrc?, txtVerDatum?, Ilt?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual uomFreq uomFreq {
            get {
                XElement x = this.GetElement(uomFreqXName);
                return ((uomFreq)(x));
            }
            set {
                this.SetElement(uomFreqXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Emission
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (codeId, valFreq, uomFreq, codeEm?, valMagBrg?, valTrueBrg?, valMagVar?, dateMagVar?, valWidCourse?, codeTypeUseBack?, geoLat, geoLong, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, valElev?, valElevAccuracy?, valGeoidUndulation?, uomDistVer?, valCrc?, txtVerDatum?, Ilt?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual codeEmRdo codeEm {
            get {
                XElement x = this.GetElement(codeEmXName);
                return ((codeEmRdo)(x));
            }
            set {
                this.SetElement(codeEmXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Magnetic bearing
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (codeId, valFreq, uomFreq, codeEm?, valMagBrg?, valTrueBrg?, valMagVar?, dateMagVar?, valWidCourse?, codeTypeUseBack?, geoLat, geoLong, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, valElev?, valElevAccuracy?, valGeoidUndulation?, uomDistVer?, valCrc?, txtVerDatum?, Ilt?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual valAngleBrg valMagBrg {
            get {
                XElement x = this.GetElement(valMagBrgXName);
                return ((valAngleBrg)(x));
            }
            set {
                this.SetElement(valMagBrgXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// True bearing
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (codeId, valFreq, uomFreq, codeEm?, valMagBrg?, valTrueBrg?, valMagVar?, dateMagVar?, valWidCourse?, codeTypeUseBack?, geoLat, geoLong, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, valElev?, valElevAccuracy?, valGeoidUndulation?, uomDistVer?, valCrc?, txtVerDatum?, Ilt?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual valAngleBrg valTrueBrg {
            get {
                XElement x = this.GetElement(valTrueBrgXName);
                return ((valAngleBrg)(x));
            }
            set {
                this.SetElement(valTrueBrgXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Magnetic variation
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (codeId, valFreq, uomFreq, codeEm?, valMagBrg?, valTrueBrg?, valMagVar?, dateMagVar?, valWidCourse?, codeTypeUseBack?, geoLat, geoLong, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, valElev?, valElevAccuracy?, valGeoidUndulation?, uomDistVer?, valCrc?, txtVerDatum?, Ilt?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual valAngleMagVar valMagVar {
            get {
                XElement x = this.GetElement(valMagVarXName);
                return ((valAngleMagVar)(x));
            }
            set {
                this.SetElement(valMagVarXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Magnetic variation date
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (codeId, valFreq, uomFreq, codeEm?, valMagBrg?, valTrueBrg?, valMagVar?, dateMagVar?, valWidCourse?, codeTypeUseBack?, geoLat, geoLong, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, valElev?, valElevAccuracy?, valGeoidUndulation?, uomDistVer?, valCrc?, txtVerDatum?, Ilt?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual dateYear dateMagVar {
            get {
                XElement x = this.GetElement(dateMagVarXName);
                return ((dateYear)(x));
            }
            set {
                this.SetElement(dateMagVarXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Course width in degrees
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (codeId, valFreq, uomFreq, codeEm?, valMagBrg?, valTrueBrg?, valMagVar?, dateMagVar?, valWidCourse?, codeTypeUseBack?, geoLat, geoLong, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, valElev?, valElevAccuracy?, valGeoidUndulation?, uomDistVer?, valCrc?, txtVerDatum?, Ilt?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual valAngle valWidCourse {
            get {
                XElement x = this.GetElement(valWidCourseXName);
                return ((valAngle)(x));
            }
            set {
                this.SetElement(valWidCourseXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Usability of the localizer signal in the back course sector
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (codeId, valFreq, uomFreq, codeEm?, valMagBrg?, valTrueBrg?, valMagVar?, dateMagVar?, valWidCourse?, codeTypeUseBack?, geoLat, geoLong, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, valElev?, valElevAccuracy?, valGeoidUndulation?, uomDistVer?, valCrc?, txtVerDatum?, Ilt?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual codeTypeUseBackIls codeTypeUseBack {
            get {
                XElement x = this.GetElement(codeTypeUseBackXName);
                return ((codeTypeUseBackIls)(x));
            }
            set {
                this.SetElement(codeTypeUseBackXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Latitude
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (codeId, valFreq, uomFreq, codeEm?, valMagBrg?, valTrueBrg?, valMagVar?, dateMagVar?, valWidCourse?, codeTypeUseBack?, geoLat, geoLong, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, valElev?, valElevAccuracy?, valGeoidUndulation?, uomDistVer?, valCrc?, txtVerDatum?, Ilt?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual geoLat geoLat {
            get {
                XElement x = this.GetElement(geoLatXName);
                return ((geoLat)(x));
            }
            set {
                this.SetElement(geoLatXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Longitude
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (codeId, valFreq, uomFreq, codeEm?, valMagBrg?, valTrueBrg?, valMagVar?, dateMagVar?, valWidCourse?, codeTypeUseBack?, geoLat, geoLong, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, valElev?, valElevAccuracy?, valGeoidUndulation?, uomDistVer?, valCrc?, txtVerDatum?, Ilt?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual geoLong geoLong {
            get {
                XElement x = this.GetElement(geoLongXName);
                return ((geoLong)(x));
            }
            set {
                this.SetElement(geoLongXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Datum
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (codeId, valFreq, uomFreq, codeEm?, valMagBrg?, valTrueBrg?, valMagVar?, dateMagVar?, valWidCourse?, codeTypeUseBack?, geoLat, geoLong, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, valElev?, valElevAccuracy?, valGeoidUndulation?, uomDistVer?, valCrc?, txtVerDatum?, Ilt?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual codeDatum codeDatum {
            get {
                XElement x = this.GetElement(codeDatumXName);
                return ((codeDatum)(x));
            }
            set {
                this.SetElement(codeDatumXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Geographical accuracy
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (codeId, valFreq, uomFreq, codeEm?, valMagBrg?, valTrueBrg?, valMagVar?, dateMagVar?, valWidCourse?, codeTypeUseBack?, geoLat, geoLong, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, valElev?, valElevAccuracy?, valGeoidUndulation?, uomDistVer?, valCrc?, txtVerDatum?, Ilt?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual valDistHorz valGeoAccuracy {
            get {
                XElement x = this.GetElement(valGeoAccuracyXName);
                return ((valDistHorz)(x));
            }
            set {
                this.SetElement(valGeoAccuracyXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Unit of measurement [geographical accuracy]
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (codeId, valFreq, uomFreq, codeEm?, valMagBrg?, valTrueBrg?, valMagVar?, dateMagVar?, valWidCourse?, codeTypeUseBack?, geoLat, geoLong, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, valElev?, valElevAccuracy?, valGeoidUndulation?, uomDistVer?, valCrc?, txtVerDatum?, Ilt?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual uomDistHorz uomGeoAccuracy {
            get {
                XElement x = this.GetElement(uomGeoAccuracyXName);
                return ((uomDistHorz)(x));
            }
            set {
                this.SetElement(uomGeoAccuracyXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Elevation
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (codeId, valFreq, uomFreq, codeEm?, valMagBrg?, valTrueBrg?, valMagVar?, dateMagVar?, valWidCourse?, codeTypeUseBack?, geoLat, geoLong, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, valElev?, valElevAccuracy?, valGeoidUndulation?, uomDistVer?, valCrc?, txtVerDatum?, Ilt?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual valDistVer valElev {
            get {
                XElement x = this.GetElement(valElevXName);
                return ((valDistVer)(x));
            }
            set {
                this.SetElement(valElevXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Elevation accuracy
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (codeId, valFreq, uomFreq, codeEm?, valMagBrg?, valTrueBrg?, valMagVar?, dateMagVar?, valWidCourse?, codeTypeUseBack?, geoLat, geoLong, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, valElev?, valElevAccuracy?, valGeoidUndulation?, uomDistVer?, valCrc?, txtVerDatum?, Ilt?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual valDistVer valElevAccuracy {
            get {
                XElement x = this.GetElement(valElevAccuracyXName);
                return ((valDistVer)(x));
            }
            set {
                this.SetElement(valElevAccuracyXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Geoid undulation
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (codeId, valFreq, uomFreq, codeEm?, valMagBrg?, valTrueBrg?, valMagVar?, dateMagVar?, valWidCourse?, codeTypeUseBack?, geoLat, geoLong, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, valElev?, valElevAccuracy?, valGeoidUndulation?, uomDistVer?, valCrc?, txtVerDatum?, Ilt?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual valDistVer valGeoidUndulation {
            get {
                XElement x = this.GetElement(valGeoidUndulationXName);
                return ((valDistVer)(x));
            }
            set {
                this.SetElement(valGeoidUndulationXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Unit of measurement [vertical distance]
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (codeId, valFreq, uomFreq, codeEm?, valMagBrg?, valTrueBrg?, valMagVar?, dateMagVar?, valWidCourse?, codeTypeUseBack?, geoLat, geoLong, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, valElev?, valElevAccuracy?, valGeoidUndulation?, uomDistVer?, valCrc?, txtVerDatum?, Ilt?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual uomElev uomDistVer {
            get {
                XElement x = this.GetElement(uomDistVerXName);
                return ((uomElev)(x));
            }
            set {
                this.SetElement(uomDistVerXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Cyclic redundancy check
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (codeId, valFreq, uomFreq, codeEm?, valMagBrg?, valTrueBrg?, valMagVar?, dateMagVar?, valWidCourse?, codeTypeUseBack?, geoLat, geoLong, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, valElev?, valElevAccuracy?, valGeoidUndulation?, uomDistVer?, valCrc?, txtVerDatum?, Ilt?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual valHex valCrc {
            get {
                XElement x = this.GetElement(valCrcXName);
                return ((valHex)(x));
            }
            set {
                this.SetElement(valCrcXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Vertical Datum
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (codeId, valFreq, uomFreq, codeEm?, valMagBrg?, valTrueBrg?, valMagVar?, dateMagVar?, valWidCourse?, codeTypeUseBack?, geoLat, geoLong, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, valElev?, valElevAccuracy?, valGeoidUndulation?, uomDistVer?, valCrc?, txtVerDatum?, Ilt?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual txtDescr txtVerDatum {
            get {
                XElement x = this.GetElement(txtVerDatumXName);
                return ((txtDescr)(x));
            }
            set {
                this.SetElement(txtVerDatumXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// ILS Localizer is operating according to Localizer - Timetable
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (codeId, valFreq, uomFreq, codeEm?, valMagBrg?, valTrueBrg?, valMagVar?, dateMagVar?, valWidCourse?, codeTypeUseBack?, geoLat, geoLong, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, valElev?, valElevAccuracy?, valGeoidUndulation?, uomDistVer?, valCrc?, txtVerDatum?, Ilt?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual TimetableNavaidType Ilt {
            get {
                XElement x = this.GetElement(IltXName);
                return ((TimetableNavaidType)(x));
            }
            set {
                this.SetElement(IltXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Remark
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (codeId, valFreq, uomFreq, codeEm?, valMagBrg?, valTrueBrg?, valMagVar?, dateMagVar?, valWidCourse?, codeTypeUseBack?, geoLat, geoLong, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, valElev?, valElevAccuracy?, valGeoidUndulation?, uomDistVer?, valCrc?, txtVerDatum?, Ilt?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual txtRmk txtRmk {
            get {
                XElement x = this.GetElement(txtRmkXName);
                return ((txtRmk)(x));
            }
            set {
                this.SetElement(txtRmkXName, value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<IlsLocalizerType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(codeIdXName, typeof(codeIdIlsMls));
            localElementDictionary.Add(valFreqXName, typeof(valFreq));
            localElementDictionary.Add(uomFreqXName, typeof(uomFreq));
            localElementDictionary.Add(codeEmXName, typeof(codeEmRdo));
            localElementDictionary.Add(valMagBrgXName, typeof(valAngleBrg));
            localElementDictionary.Add(valTrueBrgXName, typeof(valAngleBrg));
            localElementDictionary.Add(valMagVarXName, typeof(valAngleMagVar));
            localElementDictionary.Add(dateMagVarXName, typeof(dateYear));
            localElementDictionary.Add(valWidCourseXName, typeof(valAngle));
            localElementDictionary.Add(codeTypeUseBackXName, typeof(codeTypeUseBackIls));
            localElementDictionary.Add(geoLatXName, typeof(geoLat));
            localElementDictionary.Add(geoLongXName, typeof(geoLong));
            localElementDictionary.Add(codeDatumXName, typeof(codeDatum));
            localElementDictionary.Add(valGeoAccuracyXName, typeof(valDistHorz));
            localElementDictionary.Add(uomGeoAccuracyXName, typeof(uomDistHorz));
            localElementDictionary.Add(valElevXName, typeof(valDistVer));
            localElementDictionary.Add(valElevAccuracyXName, typeof(valDistVer));
            localElementDictionary.Add(valGeoidUndulationXName, typeof(valDistVer));
            localElementDictionary.Add(uomDistVerXName, typeof(uomElev));
            localElementDictionary.Add(valCrcXName, typeof(valHex));
            localElementDictionary.Add(txtVerDatumXName, typeof(txtDescr));
            localElementDictionary.Add(IltXName, typeof(TimetableNavaidType));
            localElementDictionary.Add(txtRmkXName, typeof(txtRmk));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// ILS
    /// </para>
    /// <para>
    /// Regular expression: (IlsUid, DmeUid?, codeCat, txtRmk?, Ilz, Igp?)
    /// </para>
    /// </summary>
    public partial class IlsType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName IlsUidXName = System.Xml.Linq.XName.Get("IlsUid", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName DmeUidXName = System.Xml.Linq.XName.Get("DmeUid", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName codeCatXName = System.Xml.Linq.XName.Get("codeCat", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName txtRmkXName = System.Xml.Linq.XName.Get("txtRmk", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName IlzXName = System.Xml.Linq.XName.Get("Ilz", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName IgpXName = System.Xml.Linq.XName.Get("Igp", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName sourceXName = System.Xml.Linq.XName.Get("source", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("IlsType", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator IlsType(XElement xe) { return XTypedServices.ToXTypedElement<IlsType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static IlsType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(IlsUidXName), new NamedContentModelEntity(DmeUidXName), new NamedContentModelEntity(codeCatXName), new NamedContentModelEntity(txtRmkXName), new NamedContentModelEntity(IlzXName), new NamedContentModelEntity(IgpXName));
        }
        
        /// <summary>
        /// <para>
        /// ILS
        /// </para>
        /// <para>
        /// Regular expression: (IlsUid, DmeUid?, codeCat, txtRmk?, Ilz, Igp?)
        /// </para>
        /// </summary>
        public IlsType() {
        }
        
        /// <summary>
        /// <para>
        /// a version of Instrument landing system [ILS]
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (IlsUid, DmeUid?, codeCat, txtRmk?, Ilz, Igp?)
        /// </para>
        /// </summary>
        public virtual IlsUidType IlsUid {
            get {
                XElement x = this.GetElement(IlsUidXName);
                return ((IlsUidType)(x));
            }
            set {
                this.SetElement(IlsUidXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// ILS is having Distance measuring equipment [DME]
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (IlsUid, DmeUid?, codeCat, txtRmk?, Ilz, Igp?)
        /// </para>
        /// </summary>
        public virtual DmeUidType DmeUid {
            get {
                XElement x = this.GetElement(DmeUidXName);
                return ((DmeUidType)(x));
            }
            set {
                this.SetElement(DmeUidXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Category
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (IlsUid, DmeUid?, codeCat, txtRmk?, Ilz, Igp?)
        /// </para>
        /// </summary>
        public virtual codeCatLdgAid codeCat {
            get {
                XElement x = this.GetElement(codeCatXName);
                return ((codeCatLdgAid)(x));
            }
            set {
                this.SetElement(codeCatXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Remark
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (IlsUid, DmeUid?, codeCat, txtRmk?, Ilz, Igp?)
        /// </para>
        /// </summary>
        public virtual txtRmk txtRmk {
            get {
                XElement x = this.GetElement(txtRmkXName);
                return ((txtRmk)(x));
            }
            set {
                this.SetElement(txtRmkXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// ILS is having ILS Localizer
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (IlsUid, DmeUid?, codeCat, txtRmk?, Ilz, Igp?)
        /// </para>
        /// </summary>
        public virtual IlsLocalizerType Ilz {
            get {
                XElement x = this.GetElement(IlzXName);
                return ((IlsLocalizerType)(x));
            }
            set {
                this.SetElement(IlzXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// ILS is having ILS Glide Path
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (IlsUid, DmeUid?, codeCat, txtRmk?, Ilz, Igp?)
        /// </para>
        /// </summary>
        public virtual IlsGlidePathType Igp {
            get {
                XElement x = this.GetElement(IgpXName);
                return ((IlsGlidePathType)(x));
            }
            set {
                this.SetElement(IgpXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string source {
            get {
                XAttribute x = this.Attribute(sourceXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(sourceXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<IlsType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(IlsUidXName, typeof(IlsUidType));
            localElementDictionary.Add(DmeUidXName, typeof(DmeUidType));
            localElementDictionary.Add(codeCatXName, typeof(codeCatLdgAid));
            localElementDictionary.Add(txtRmkXName, typeof(txtRmk));
            localElementDictionary.Add(IlzXName, typeof(IlsLocalizerType));
            localElementDictionary.Add(IgpXName, typeof(IlsGlidePathType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Instrument landing system [ILS] - UID
    /// </para>
    /// <para>
    /// Regular expression: ((RdnUid | FdnUid))
    /// </para>
    /// </summary>
    public partial class IlsUidType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName RdnUidXName = System.Xml.Linq.XName.Get("RdnUid", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName FdnUidXName = System.Xml.Linq.XName.Get("FdnUid", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName midXName = System.Xml.Linq.XName.Get("mid", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("IlsUidType", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator IlsUidType(XElement xe) { return XTypedServices.ToXTypedElement<IlsUidType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static IlsUidType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new ChoiceContentModelEntity(new NamedContentModelEntity(RdnUidXName), new NamedContentModelEntity(FdnUidXName)));
        }
        
        /// <summary>
        /// <para>
        /// Instrument landing system [ILS] - UID
        /// </para>
        /// <para>
        /// Regular expression: ((RdnUid | FdnUid))
        /// </para>
        /// </summary>
        public IlsUidType() {
        }
        
        /// <summary>
        /// <para>
        /// Instrument landing system [ILS] is associated with RWY direction
        /// </para>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((RdnUid | FdnUid))
        /// </para>
        /// </summary>
        public virtual RunwayDirectionUidType RdnUid {
            get {
                XElement x = this.GetElement(RdnUidXName);
                return ((RunwayDirectionUidType)(x));
            }
            set {
                this.SetElement(RdnUidXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Instrument landing system [ILS] is associated with Approach and take-off direction of a FATO
        /// </para>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((RdnUid | FdnUid))
        /// </para>
        /// </summary>
        public virtual FatoDirectionUidType FdnUid {
            get {
                XElement x = this.GetElement(FdnUidXName);
                return ((FatoDirectionUidType)(x));
            }
            set {
                this.SetElement(FdnUidXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string mid {
            get {
                XAttribute x = this.Attribute(midXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(midXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<IlsUidType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(RdnUidXName, typeof(RunwayDirectionUidType));
            localElementDictionary.Add(FdnUidXName, typeof(FatoDirectionUidType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Service provided on IAP
    /// </para>
    /// <para>
    /// Regular expression: (SipUid, txtRmk?)
    /// </para>
    /// </summary>
    public partial class InstrumentApproachServiceType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName SipUidXName = System.Xml.Linq.XName.Get("SipUid", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName txtRmkXName = System.Xml.Linq.XName.Get("txtRmk", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName sourceXName = System.Xml.Linq.XName.Get("source", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("InstrumentApproachServiceType", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator InstrumentApproachServiceType(XElement xe) { return XTypedServices.ToXTypedElement<InstrumentApproachServiceType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static InstrumentApproachServiceType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(SipUidXName), new NamedContentModelEntity(txtRmkXName));
        }
        
        /// <summary>
        /// <para>
        /// Service provided on IAP
        /// </para>
        /// <para>
        /// Regular expression: (SipUid, txtRmk?)
        /// </para>
        /// </summary>
        public InstrumentApproachServiceType() {
        }
        
        /// <summary>
        /// <para>
        /// a version of Service provided on IAP
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (SipUid, txtRmk?)
        /// </para>
        /// </summary>
        public virtual InstrumentApproachServiceUidType SipUid {
            get {
                XElement x = this.GetElement(SipUidXName);
                return ((InstrumentApproachServiceUidType)(x));
            }
            set {
                this.SetElement(SipUidXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Remark
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (SipUid, txtRmk?)
        /// </para>
        /// </summary>
        public virtual txtRmk txtRmk {
            get {
                XElement x = this.GetElement(txtRmkXName);
                return ((txtRmk)(x));
            }
            set {
                this.SetElement(txtRmkXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string source {
            get {
                XAttribute x = this.Attribute(sourceXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(sourceXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<InstrumentApproachServiceType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(SipUidXName, typeof(InstrumentApproachServiceUidType));
            localElementDictionary.Add(txtRmkXName, typeof(txtRmk));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Service provided on IAP - UID
    /// </para>
    /// <para>
    /// Regular expression: (IapUid, SerUid)
    /// </para>
    /// </summary>
    public partial class InstrumentApproachServiceUidType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName IapUidXName = System.Xml.Linq.XName.Get("IapUid", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName SerUidXName = System.Xml.Linq.XName.Get("SerUid", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName midXName = System.Xml.Linq.XName.Get("mid", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("InstrumentApproachServiceUidType", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator InstrumentApproachServiceUidType(XElement xe) { return XTypedServices.ToXTypedElement<InstrumentApproachServiceUidType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static InstrumentApproachServiceUidType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(IapUidXName), new NamedContentModelEntity(SerUidXName));
        }
        
        /// <summary>
        /// <para>
        /// Service provided on IAP - UID
        /// </para>
        /// <para>
        /// Regular expression: (IapUid, SerUid)
        /// </para>
        /// </summary>
        public InstrumentApproachServiceUidType() {
        }
        
        /// <summary>
        /// <para>
        /// Service provided on IAP is furnished on Instrument approach procedure [IAP]
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (IapUid, SerUid)
        /// </para>
        /// </summary>
        public virtual InstrumentApproachUidType IapUid {
            get {
                XElement x = this.GetElement(IapUidXName);
                return ((InstrumentApproachUidType)(x));
            }
            set {
                this.SetElement(IapUidXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Service provided on IAP is also Service
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (IapUid, SerUid)
        /// </para>
        /// </summary>
        public virtual ServiceUidType SerUid {
            get {
                XElement x = this.GetElement(SerUidXName);
                return ((ServiceUidType)(x));
            }
            set {
                this.SetElement(SerUidXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string mid {
            get {
                XAttribute x = this.Attribute(midXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(midXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<InstrumentApproachServiceUidType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(IapUidXName, typeof(InstrumentApproachUidType));
            localElementDictionary.Add(SerUidXName, typeof(ServiceUidType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// IAP
    /// </para>
    /// <para>
    /// Regular expression: (IapUid, (FdnUid? | RdnUid? | TlaUid?), MgpUid?, codeRnp?, txtDescrComFail?, codeTypeRte, txtDescrMiss?, txtRmk?, Ooh*, Plg*)
    /// </para>
    /// </summary>
    public partial class InstrumentApproachType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName IapUidXName = System.Xml.Linq.XName.Get("IapUid", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName FdnUidXName = System.Xml.Linq.XName.Get("FdnUid", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName RdnUidXName = System.Xml.Linq.XName.Get("RdnUid", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TlaUidXName = System.Xml.Linq.XName.Get("TlaUid", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName MgpUidXName = System.Xml.Linq.XName.Get("MgpUid", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName codeRnpXName = System.Xml.Linq.XName.Get("codeRnp", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName txtDescrComFailXName = System.Xml.Linq.XName.Get("txtDescrComFail", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName codeTypeRteXName = System.Xml.Linq.XName.Get("codeTypeRte", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName txtDescrMissXName = System.Xml.Linq.XName.Get("txtDescrMiss", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName txtRmkXName = System.Xml.Linq.XName.Get("txtRmk", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName OohXName = System.Xml.Linq.XName.Get("Ooh", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ObstacleClearanceAltitudeHeightType> OohField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName PlgXName = System.Xml.Linq.XName.Get("Plg", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ProcedureLegType> PlgField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName sourceXName = System.Xml.Linq.XName.Get("source", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("InstrumentApproachType", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator InstrumentApproachType(XElement xe) { return XTypedServices.ToXTypedElement<InstrumentApproachType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static InstrumentApproachType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(IapUidXName), new ChoiceContentModelEntity(new NamedContentModelEntity(FdnUidXName), new NamedContentModelEntity(RdnUidXName), new NamedContentModelEntity(TlaUidXName)), new NamedContentModelEntity(MgpUidXName), new NamedContentModelEntity(codeRnpXName), new NamedContentModelEntity(txtDescrComFailXName), new NamedContentModelEntity(codeTypeRteXName), new NamedContentModelEntity(txtDescrMissXName), new NamedContentModelEntity(txtRmkXName), new NamedContentModelEntity(OohXName), new NamedContentModelEntity(PlgXName));
        }
        
        /// <summary>
        /// <para>
        /// IAP
        /// </para>
        /// <para>
        /// Regular expression: (IapUid, (FdnUid? | RdnUid? | TlaUid?), MgpUid?, codeRnp?, txtDescrComFail?, codeTypeRte, txtDescrMiss?, txtRmk?, Ooh*, Plg*)
        /// </para>
        /// </summary>
        public InstrumentApproachType() {
        }
        
        /// <summary>
        /// <para>
        /// a version of Instrument approach procedure [IAP]
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (IapUid, (FdnUid? | RdnUid? | TlaUid?), MgpUid?, codeRnp?, txtDescrComFail?, codeTypeRte, txtDescrMiss?, txtRmk?, Ooh*, Plg*)
        /// </para>
        /// </summary>
        public virtual InstrumentApproachUidType IapUid {
            get {
                XElement x = this.GetElement(IapUidXName);
                return ((InstrumentApproachUidType)(x));
            }
            set {
                this.SetElement(IapUidXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// IAP is used for landing on Approach and take-off direction of a FATO
        /// </para>
        /// <para>
        /// Occurrence: optional, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (IapUid, (FdnUid? | RdnUid? | TlaUid?), MgpUid?, codeRnp?, txtDescrComFail?, codeTypeRte, txtDescrMiss?, txtRmk?, Ooh*, Plg*)
        /// </para>
        /// </summary>
        public virtual FatoDirectionUidType FdnUid {
            get {
                XElement x = this.GetElement(FdnUidXName);
                return ((FatoDirectionUidType)(x));
            }
            set {
                this.SetElement(FdnUidXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// IAP is used for landing on RWY direction
        /// </para>
        /// <para>
        /// Occurrence: optional, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (IapUid, (FdnUid? | RdnUid? | TlaUid?), MgpUid?, codeRnp?, txtDescrComFail?, codeTypeRte, txtDescrMiss?, txtRmk?, Ooh*, Plg*)
        /// </para>
        /// </summary>
        public virtual RunwayDirectionUidType RdnUid {
            get {
                XElement x = this.GetElement(RdnUidXName);
                return ((RunwayDirectionUidType)(x));
            }
            set {
                this.SetElement(RdnUidXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// IAP is used for landing on Touch down and lift off area [TLOF]
        /// </para>
        /// <para>
        /// Occurrence: optional, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (IapUid, (FdnUid? | RdnUid? | TlaUid?), MgpUid?, codeRnp?, txtDescrComFail?, codeTypeRte, txtDescrMiss?, txtRmk?, Ooh*, Plg*)
        /// </para>
        /// </summary>
        public virtual TlofUidType TlaUid {
            get {
                XElement x = this.GetElement(TlaUidXName);
                return ((TlofUidType)(x));
            }
            set {
                this.SetElement(TlaUidXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// IAP is associated with MSA group
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (IapUid, (FdnUid? | RdnUid? | TlaUid?), MgpUid?, codeRnp?, txtDescrComFail?, codeTypeRte, txtDescrMiss?, txtRmk?, Ooh*, Plg*)
        /// </para>
        /// </summary>
        public virtual MsaGroupUidType MgpUid {
            get {
                XElement x = this.GetElement(MgpUidXName);
                return ((MsaGroupUidType)(x));
            }
            set {
                this.SetElement(MgpUidXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Required navigation performance
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (IapUid, (FdnUid? | RdnUid? | TlaUid?), MgpUid?, codeRnp?, txtDescrComFail?, codeTypeRte, txtDescrMiss?, txtRmk?, Ooh*, Plg*)
        /// </para>
        /// </summary>
        public virtual codeRnp codeRnp {
            get {
                XElement x = this.GetElement(codeRnpXName);
                return ((codeRnp)(x));
            }
            set {
                this.SetElement(codeRnpXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Communication failure description
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (IapUid, (FdnUid? | RdnUid? | TlaUid?), MgpUid?, codeRnp?, txtDescrComFail?, codeTypeRte, txtDescrMiss?, txtRmk?, Ooh*, Plg*)
        /// </para>
        /// </summary>
        public virtual txtDescr txtDescrComFail {
            get {
                XElement x = this.GetElement(txtDescrComFailXName);
                return ((txtDescr)(x));
            }
            set {
                this.SetElement(txtDescrComFailXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Type
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (IapUid, (FdnUid? | RdnUid? | TlaUid?), MgpUid?, codeRnp?, txtDescrComFail?, codeTypeRte, txtDescrMiss?, txtRmk?, Ooh*, Plg*)
        /// </para>
        /// </summary>
        public virtual codeTypeIap codeTypeRte {
            get {
                XElement x = this.GetElement(codeTypeRteXName);
                return ((codeTypeIap)(x));
            }
            set {
                this.SetElement(codeTypeRteXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Missed approach procedure description
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (IapUid, (FdnUid? | RdnUid? | TlaUid?), MgpUid?, codeRnp?, txtDescrComFail?, codeTypeRte, txtDescrMiss?, txtRmk?, Ooh*, Plg*)
        /// </para>
        /// </summary>
        public virtual txtDescr txtDescrMiss {
            get {
                XElement x = this.GetElement(txtDescrMissXName);
                return ((txtDescr)(x));
            }
            set {
                this.SetElement(txtDescrMissXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Remark
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (IapUid, (FdnUid? | RdnUid? | TlaUid?), MgpUid?, codeRnp?, txtDescrComFail?, codeTypeRte, txtDescrMiss?, txtRmk?, Ooh*, Plg*)
        /// </para>
        /// </summary>
        public virtual txtRmk txtRmk {
            get {
                XElement x = this.GetElement(txtRmkXName);
                return ((txtRmk)(x));
            }
            set {
                this.SetElement(txtRmkXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// IAP is having Obstacle clearance altitude / height
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (IapUid, (FdnUid? | RdnUid? | TlaUid?), MgpUid?, codeRnp?, txtDescrComFail?, codeTypeRte, txtDescrMiss?, txtRmk?, Ooh*, Plg*)
        /// </para>
        /// </summary>
        public virtual IList<ObstacleClearanceAltitudeHeightType> Ooh {
            get {
                if ((this.OohField == null)) {
                    this.OohField = new XTypedList<ObstacleClearanceAltitudeHeightType>(this, LinqToXsdTypeManager.Instance, OohXName);
                }
                return this.OohField;
            }
            set {
                if ((value == null)) {
                    this.OohField = null;
                }
                else {
                    if ((this.OohField == null)) {
                        this.OohField = XTypedList<ObstacleClearanceAltitudeHeightType>.Initialize(this, LinqToXsdTypeManager.Instance, value, OohXName);
                    }
                    else {
                        XTypedServices.SetList<ObstacleClearanceAltitudeHeightType>(this.OohField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// IAP is composed of Procedure leg
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (IapUid, (FdnUid? | RdnUid? | TlaUid?), MgpUid?, codeRnp?, txtDescrComFail?, codeTypeRte, txtDescrMiss?, txtRmk?, Ooh*, Plg*)
        /// </para>
        /// </summary>
        public virtual IList<ProcedureLegType> Plg {
            get {
                if ((this.PlgField == null)) {
                    this.PlgField = new XTypedList<ProcedureLegType>(this, LinqToXsdTypeManager.Instance, PlgXName);
                }
                return this.PlgField;
            }
            set {
                if ((value == null)) {
                    this.PlgField = null;
                }
                else {
                    if ((this.PlgField == null)) {
                        this.PlgField = XTypedList<ProcedureLegType>.Initialize(this, LinqToXsdTypeManager.Instance, value, PlgXName);
                    }
                    else {
                        XTypedServices.SetList<ProcedureLegType>(this.PlgField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string source {
            get {
                XAttribute x = this.Attribute(sourceXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(sourceXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<InstrumentApproachType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(IapUidXName, typeof(InstrumentApproachUidType));
            localElementDictionary.Add(FdnUidXName, typeof(FatoDirectionUidType));
            localElementDictionary.Add(RdnUidXName, typeof(RunwayDirectionUidType));
            localElementDictionary.Add(TlaUidXName, typeof(TlofUidType));
            localElementDictionary.Add(MgpUidXName, typeof(MsaGroupUidType));
            localElementDictionary.Add(codeRnpXName, typeof(codeRnp));
            localElementDictionary.Add(txtDescrComFailXName, typeof(txtDescr));
            localElementDictionary.Add(codeTypeRteXName, typeof(codeTypeIap));
            localElementDictionary.Add(txtDescrMissXName, typeof(txtDescr));
            localElementDictionary.Add(txtRmkXName, typeof(txtRmk));
            localElementDictionary.Add(OohXName, typeof(ObstacleClearanceAltitudeHeightType));
            localElementDictionary.Add(PlgXName, typeof(ProcedureLegType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Instrument approach procedure [IAP] - UID
    /// </para>
    /// <para>
    /// Regular expression: (AhpUid, txtDesig, codeCatAcft?, codeTransId?)
    /// </para>
    /// </summary>
    public partial class InstrumentApproachUidType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName AhpUidXName = System.Xml.Linq.XName.Get("AhpUid", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName txtDesigXName = System.Xml.Linq.XName.Get("txtDesig", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName codeCatAcftXName = System.Xml.Linq.XName.Get("codeCatAcft", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName codeTransIdXName = System.Xml.Linq.XName.Get("codeTransId", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName midXName = System.Xml.Linq.XName.Get("mid", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("InstrumentApproachUidType", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator InstrumentApproachUidType(XElement xe) { return XTypedServices.ToXTypedElement<InstrumentApproachUidType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static InstrumentApproachUidType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(AhpUidXName), new NamedContentModelEntity(txtDesigXName), new NamedContentModelEntity(codeCatAcftXName), new NamedContentModelEntity(codeTransIdXName));
        }
        
        /// <summary>
        /// <para>
        /// Instrument approach procedure [IAP] - UID
        /// </para>
        /// <para>
        /// Regular expression: (AhpUid, txtDesig, codeCatAcft?, codeTransId?)
        /// </para>
        /// </summary>
        public InstrumentApproachUidType() {
        }
        
        /// <summary>
        /// <para>
        /// Instrument approach procedure [IAP] is associated with Aerodrome / Heliport
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (AhpUid, txtDesig, codeCatAcft?, codeTransId?)
        /// </para>
        /// </summary>
        public virtual AerodromeHeliportUidType AhpUid {
            get {
                XElement x = this.GetElement(AhpUidXName);
                return ((AerodromeHeliportUidType)(x));
            }
            set {
                this.SetElement(AhpUidXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Designator
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (AhpUid, txtDesig, codeCatAcft?, codeTransId?)
        /// </para>
        /// </summary>
        public virtual txtDesigIap txtDesig {
            get {
                XElement x = this.GetElement(txtDesigXName);
                return ((txtDesigIap)(x));
            }
            set {
                this.SetElement(txtDesigXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Aircraft category
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (AhpUid, txtDesig, codeCatAcft?, codeTransId?)
        /// </para>
        /// </summary>
        public virtual codeCatAcft codeCatAcft {
            get {
                XElement x = this.GetElement(codeCatAcftXName);
                return ((codeCatAcft)(x));
            }
            set {
                this.SetElement(codeCatAcftXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Transition identifier
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (AhpUid, txtDesig, codeCatAcft?, codeTransId?)
        /// </para>
        /// </summary>
        public virtual codeIdDesigPt codeTransId {
            get {
                XElement x = this.GetElement(codeTransIdXName);
                return ((codeIdDesigPt)(x));
            }
            set {
                this.SetElement(codeTransIdXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string mid {
            get {
                XAttribute x = this.Attribute(midXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(midXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<InstrumentApproachUidType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(AhpUidXName, typeof(AerodromeHeliportUidType));
            localElementDictionary.Add(txtDesigXName, typeof(txtDesigIap));
            localElementDictionary.Add(codeCatAcftXName, typeof(codeCatAcft));
            localElementDictionary.Add(codeTransIdXName, typeof(codeIdDesigPt));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// IAP condition of usage
    /// </para>
    /// <para>
    /// Regular expression: (IueUid, Iut?, txtRmk?)
    /// </para>
    /// </summary>
    public partial class InstrumentApproachUsageConditionType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName IueUidXName = System.Xml.Linq.XName.Get("IueUid", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName IutXName = System.Xml.Linq.XName.Get("Iut", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName txtRmkXName = System.Xml.Linq.XName.Get("txtRmk", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName sourceXName = System.Xml.Linq.XName.Get("source", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("InstrumentApproachUsageConditionType", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator InstrumentApproachUsageConditionType(XElement xe) { return XTypedServices.ToXTypedElement<InstrumentApproachUsageConditionType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static InstrumentApproachUsageConditionType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(IueUidXName), new NamedContentModelEntity(IutXName), new NamedContentModelEntity(txtRmkXName));
        }
        
        /// <summary>
        /// <para>
        /// IAP condition of usage
        /// </para>
        /// <para>
        /// Regular expression: (IueUid, Iut?, txtRmk?)
        /// </para>
        /// </summary>
        public InstrumentApproachUsageConditionType() {
        }
        
        /// <summary>
        /// <para>
        /// a version of IAP condition of usage
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (IueUid, Iut?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual InstrumentApproachUsageConditionUidType IueUid {
            get {
                XElement x = this.GetElement(IueUidXName);
                return ((InstrumentApproachUsageConditionUidType)(x));
            }
            set {
                this.SetElement(IueUidXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// IAP condition of usage is operating according to IAP - Timetable
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (IueUid, Iut?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual TimetableType Iut {
            get {
                XElement x = this.GetElement(IutXName);
                return ((TimetableType)(x));
            }
            set {
                this.SetElement(IutXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Remark
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (IueUid, Iut?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual txtRmk txtRmk {
            get {
                XElement x = this.GetElement(txtRmkXName);
                return ((txtRmk)(x));
            }
            set {
                this.SetElement(txtRmkXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string source {
            get {
                XAttribute x = this.Attribute(sourceXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(sourceXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<InstrumentApproachUsageConditionType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(IueUidXName, typeof(InstrumentApproachUsageConditionUidType));
            localElementDictionary.Add(IutXName, typeof(TimetableType));
            localElementDictionary.Add(txtRmkXName, typeof(txtRmk));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// IAP condition of usage - UID
    /// </para>
    /// <para>
    /// Regular expression: (IapUid, codeRteAvbl)
    /// </para>
    /// </summary>
    public partial class InstrumentApproachUsageConditionUidType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName IapUidXName = System.Xml.Linq.XName.Get("IapUid", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName codeRteAvblXName = System.Xml.Linq.XName.Get("codeRteAvbl", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName midXName = System.Xml.Linq.XName.Get("mid", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("InstrumentApproachUsageConditionUidType", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator InstrumentApproachUsageConditionUidType(XElement xe) { return XTypedServices.ToXTypedElement<InstrumentApproachUsageConditionUidType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static InstrumentApproachUsageConditionUidType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(IapUidXName), new NamedContentModelEntity(codeRteAvblXName));
        }
        
        /// <summary>
        /// <para>
        /// IAP condition of usage - UID
        /// </para>
        /// <para>
        /// Regular expression: (IapUid, codeRteAvbl)
        /// </para>
        /// </summary>
        public InstrumentApproachUsageConditionUidType() {
        }
        
        /// <summary>
        /// <para>
        /// IAP condition of usage is based on Instrument approach procedure [IAP]
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (IapUid, codeRteAvbl)
        /// </para>
        /// </summary>
        public virtual InstrumentApproachUidType IapUid {
            get {
                XElement x = this.GetElement(IapUidXName);
                return ((InstrumentApproachUidType)(x));
            }
            set {
                this.SetElement(IapUidXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// IAP usage within the flexible use of airspace
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (IapUid, codeRteAvbl)
        /// </para>
        /// </summary>
        public virtual codeRteAvbl codeRteAvbl {
            get {
                XElement x = this.GetElement(codeRteAvblXName);
                return ((codeRteAvbl)(x));
            }
            set {
                this.SetElement(codeRteAvblXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string mid {
            get {
                XAttribute x = this.Attribute(midXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(midXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<InstrumentApproachUsageConditionUidType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(IapUidXName, typeof(InstrumentApproachUidType));
            localElementDictionary.Add(codeRteAvblXName, typeof(codeRteAvbl));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Surface lights (group)
    /// </para>
    /// <para>
    /// Regular expression: (geoLat, geoLong, codeDatum, noLen?, valLenSpacing?, noWid?, valWidSpacing?, uomDist?, codeSymmetry, codeIntst?, codeColour, codeTypeLgt?, txtRmk?)
    /// </para>
    /// </summary>
    public partial class LightGroupType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName geoLatXName = System.Xml.Linq.XName.Get("geoLat", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName geoLongXName = System.Xml.Linq.XName.Get("geoLong", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName codeDatumXName = System.Xml.Linq.XName.Get("codeDatum", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName noLenXName = System.Xml.Linq.XName.Get("noLen", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName valLenSpacingXName = System.Xml.Linq.XName.Get("valLenSpacing", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName noWidXName = System.Xml.Linq.XName.Get("noWid", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName valWidSpacingXName = System.Xml.Linq.XName.Get("valWidSpacing", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName uomDistXName = System.Xml.Linq.XName.Get("uomDist", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName codeSymmetryXName = System.Xml.Linq.XName.Get("codeSymmetry", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName codeIntstXName = System.Xml.Linq.XName.Get("codeIntst", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName codeColourXName = System.Xml.Linq.XName.Get("codeColour", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName codeTypeLgtXName = System.Xml.Linq.XName.Get("codeTypeLgt", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName txtRmkXName = System.Xml.Linq.XName.Get("txtRmk", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("LightGroupType", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator LightGroupType(XElement xe) { return XTypedServices.ToXTypedElement<LightGroupType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static LightGroupType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(geoLatXName), new NamedContentModelEntity(geoLongXName), new NamedContentModelEntity(codeDatumXName), new NamedContentModelEntity(noLenXName), new NamedContentModelEntity(valLenSpacingXName), new NamedContentModelEntity(noWidXName), new NamedContentModelEntity(valWidSpacingXName), new NamedContentModelEntity(uomDistXName), new NamedContentModelEntity(codeSymmetryXName), new NamedContentModelEntity(codeIntstXName), new NamedContentModelEntity(codeColourXName), new NamedContentModelEntity(codeTypeLgtXName), new NamedContentModelEntity(txtRmkXName));
        }
        
        /// <summary>
        /// <para>
        /// Surface lights (group)
        /// </para>
        /// <para>
        /// Regular expression: (geoLat, geoLong, codeDatum, noLen?, valLenSpacing?, noWid?, valWidSpacing?, uomDist?, codeSymmetry, codeIntst?, codeColour, codeTypeLgt?, txtRmk?)
        /// </para>
        /// </summary>
        public LightGroupType() {
        }
        
        /// <summary>
        /// <para>
        /// Latitude
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (geoLat, geoLong, codeDatum, noLen?, valLenSpacing?, noWid?, valWidSpacing?, uomDist?, codeSymmetry, codeIntst?, codeColour, codeTypeLgt?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual geoLat geoLat {
            get {
                XElement x = this.GetElement(geoLatXName);
                return ((geoLat)(x));
            }
            set {
                this.SetElement(geoLatXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Longitude
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (geoLat, geoLong, codeDatum, noLen?, valLenSpacing?, noWid?, valWidSpacing?, uomDist?, codeSymmetry, codeIntst?, codeColour, codeTypeLgt?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual geoLong geoLong {
            get {
                XElement x = this.GetElement(geoLongXName);
                return ((geoLong)(x));
            }
            set {
                this.SetElement(geoLongXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Datum
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (geoLat, geoLong, codeDatum, noLen?, valLenSpacing?, noWid?, valWidSpacing?, uomDist?, codeSymmetry, codeIntst?, codeColour, codeTypeLgt?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual codeDatum codeDatum {
            get {
                XElement x = this.GetElement(codeDatumXName);
                return ((codeDatum)(x));
            }
            set {
                this.SetElement(codeDatumXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// No. along centreline
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (geoLat, geoLong, codeDatum, noLen?, valLenSpacing?, noWid?, valWidSpacing?, uomDist?, codeSymmetry, codeIntst?, codeColour, codeTypeLgt?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual noNumber noLen {
            get {
                XElement x = this.GetElement(noLenXName);
                return ((noNumber)(x));
            }
            set {
                this.SetElement(noLenXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Inter-distance
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (geoLat, geoLong, codeDatum, noLen?, valLenSpacing?, noWid?, valWidSpacing?, uomDist?, codeSymmetry, codeIntst?, codeColour, codeTypeLgt?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual valDistHorz valLenSpacing {
            get {
                XElement x = this.GetElement(valLenSpacingXName);
                return ((valDistHorz)(x));
            }
            set {
                this.SetElement(valLenSpacingXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// No. across centreline
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (geoLat, geoLong, codeDatum, noLen?, valLenSpacing?, noWid?, valWidSpacing?, uomDist?, codeSymmetry, codeIntst?, codeColour, codeTypeLgt?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual noNumber noWid {
            get {
                XElement x = this.GetElement(noWidXName);
                return ((noNumber)(x));
            }
            set {
                this.SetElement(noWidXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Inter-width
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (geoLat, geoLong, codeDatum, noLen?, valLenSpacing?, noWid?, valWidSpacing?, uomDist?, codeSymmetry, codeIntst?, codeColour, codeTypeLgt?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual valDistHorz valWidSpacing {
            get {
                XElement x = this.GetElement(valWidSpacingXName);
                return ((valDistHorz)(x));
            }
            set {
                this.SetElement(valWidSpacingXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Unit of measurement [horizontal distance]
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (geoLat, geoLong, codeDatum, noLen?, valLenSpacing?, noWid?, valWidSpacing?, uomDist?, codeSymmetry, codeIntst?, codeColour, codeTypeLgt?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual uomDistHorz uomDist {
            get {
                XElement x = this.GetElement(uomDistXName);
                return ((uomDistHorz)(x));
            }
            set {
                this.SetElement(uomDistXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Symmetrical to centreline
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (geoLat, geoLong, codeDatum, noLen?, valLenSpacing?, noWid?, valWidSpacing?, uomDist?, codeSymmetry, codeIntst?, codeColour, codeTypeLgt?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual codeYesNo codeSymmetry {
            get {
                XElement x = this.GetElement(codeSymmetryXName);
                return ((codeYesNo)(x));
            }
            set {
                this.SetElement(codeSymmetryXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Intensity
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (geoLat, geoLong, codeDatum, noLen?, valLenSpacing?, noWid?, valWidSpacing?, uomDist?, codeSymmetry, codeIntst?, codeColour, codeTypeLgt?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual codeIntstLgt codeIntst {
            get {
                XElement x = this.GetElement(codeIntstXName);
                return ((codeIntstLgt)(x));
            }
            set {
                this.SetElement(codeIntstXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Colour
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (geoLat, geoLong, codeDatum, noLen?, valLenSpacing?, noWid?, valWidSpacing?, uomDist?, codeSymmetry, codeIntst?, codeColour, codeTypeLgt?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual codeColour codeColour {
            get {
                XElement x = this.GetElement(codeColourXName);
                return ((codeColour)(x));
            }
            set {
                this.SetElement(codeColourXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Light type
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (geoLat, geoLong, codeDatum, noLen?, valLenSpacing?, noWid?, valWidSpacing?, uomDist?, codeSymmetry, codeIntst?, codeColour, codeTypeLgt?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual codeTypeLight codeTypeLgt {
            get {
                XElement x = this.GetElement(codeTypeLgtXName);
                return ((codeTypeLight)(x));
            }
            set {
                this.SetElement(codeTypeLgtXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Remark
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (geoLat, geoLong, codeDatum, noLen?, valLenSpacing?, noWid?, valWidSpacing?, uomDist?, codeSymmetry, codeIntst?, codeColour, codeTypeLgt?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual txtRmk txtRmk {
            get {
                XElement x = this.GetElement(txtRmkXName);
                return ((txtRmk)(x));
            }
            set {
                this.SetElement(txtRmkXName, value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<LightGroupType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(geoLatXName, typeof(geoLat));
            localElementDictionary.Add(geoLongXName, typeof(geoLong));
            localElementDictionary.Add(codeDatumXName, typeof(codeDatum));
            localElementDictionary.Add(noLenXName, typeof(noNumber));
            localElementDictionary.Add(valLenSpacingXName, typeof(valDistHorz));
            localElementDictionary.Add(noWidXName, typeof(noNumber));
            localElementDictionary.Add(valWidSpacingXName, typeof(valDistHorz));
            localElementDictionary.Add(uomDistXName, typeof(uomDistHorz));
            localElementDictionary.Add(codeSymmetryXName, typeof(codeYesNo));
            localElementDictionary.Add(codeIntstXName, typeof(codeIntstLgt));
            localElementDictionary.Add(codeColourXName, typeof(codeColour));
            localElementDictionary.Add(codeTypeLgtXName, typeof(codeTypeLight));
            localElementDictionary.Add(txtRmkXName, typeof(txtRmk));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// MKR
    /// </para>
    /// <para>
    /// Regular expression: (MkrUid, OrgUid, NdbUid?, IlsUid?, codeClass?, codePsnIls?, valFreq, uomFreq, txtName?, valAxisBrg?, codeEm?, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, valElev?, valElevAccuracy?, valGeoidUndulation?, uomDistVer?, valCrc?, txtVerDatum?, Mtt?, txtRmk?)
    /// </para>
    /// </summary>
    public partial class MkrType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName MkrUidXName = System.Xml.Linq.XName.Get("MkrUid", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName OrgUidXName = System.Xml.Linq.XName.Get("OrgUid", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName NdbUidXName = System.Xml.Linq.XName.Get("NdbUid", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName IlsUidXName = System.Xml.Linq.XName.Get("IlsUid", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName codeClassXName = System.Xml.Linq.XName.Get("codeClass", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName codePsnIlsXName = System.Xml.Linq.XName.Get("codePsnIls", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName valFreqXName = System.Xml.Linq.XName.Get("valFreq", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName uomFreqXName = System.Xml.Linq.XName.Get("uomFreq", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName txtNameXName = System.Xml.Linq.XName.Get("txtName", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName valAxisBrgXName = System.Xml.Linq.XName.Get("valAxisBrg", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName codeEmXName = System.Xml.Linq.XName.Get("codeEm", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName codeDatumXName = System.Xml.Linq.XName.Get("codeDatum", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName valGeoAccuracyXName = System.Xml.Linq.XName.Get("valGeoAccuracy", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName uomGeoAccuracyXName = System.Xml.Linq.XName.Get("uomGeoAccuracy", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName valElevXName = System.Xml.Linq.XName.Get("valElev", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName valElevAccuracyXName = System.Xml.Linq.XName.Get("valElevAccuracy", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName valGeoidUndulationXName = System.Xml.Linq.XName.Get("valGeoidUndulation", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName uomDistVerXName = System.Xml.Linq.XName.Get("uomDistVer", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName valCrcXName = System.Xml.Linq.XName.Get("valCrc", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName txtVerDatumXName = System.Xml.Linq.XName.Get("txtVerDatum", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName MttXName = System.Xml.Linq.XName.Get("Mtt", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName txtRmkXName = System.Xml.Linq.XName.Get("txtRmk", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName sourceXName = System.Xml.Linq.XName.Get("source", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("MkrType", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator MkrType(XElement xe) { return XTypedServices.ToXTypedElement<MkrType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static MkrType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(MkrUidXName), new NamedContentModelEntity(OrgUidXName), new NamedContentModelEntity(NdbUidXName), new NamedContentModelEntity(IlsUidXName), new NamedContentModelEntity(codeClassXName), new NamedContentModelEntity(codePsnIlsXName), new NamedContentModelEntity(valFreqXName), new NamedContentModelEntity(uomFreqXName), new NamedContentModelEntity(txtNameXName), new NamedContentModelEntity(valAxisBrgXName), new NamedContentModelEntity(codeEmXName), new NamedContentModelEntity(codeDatumXName), new NamedContentModelEntity(valGeoAccuracyXName), new NamedContentModelEntity(uomGeoAccuracyXName), new NamedContentModelEntity(valElevXName), new NamedContentModelEntity(valElevAccuracyXName), new NamedContentModelEntity(valGeoidUndulationXName), new NamedContentModelEntity(uomDistVerXName), new NamedContentModelEntity(valCrcXName), new NamedContentModelEntity(txtVerDatumXName), new NamedContentModelEntity(MttXName), new NamedContentModelEntity(txtRmkXName));
        }
        
        /// <summary>
        /// <para>
        /// MKR
        /// </para>
        /// <para>
        /// Regular expression: (MkrUid, OrgUid, NdbUid?, IlsUid?, codeClass?, codePsnIls?, valFreq, uomFreq, txtName?, valAxisBrg?, codeEm?, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, valElev?, valElevAccuracy?, valGeoidUndulation?, uomDistVer?, valCrc?, txtVerDatum?, Mtt?, txtRmk?)
        /// </para>
        /// </summary>
        public MkrType() {
        }
        
        /// <summary>
        /// <para>
        /// a version of Marker [MKR]
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (MkrUid, OrgUid, NdbUid?, IlsUid?, codeClass?, codePsnIls?, valFreq, uomFreq, txtName?, valAxisBrg?, codeEm?, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, valElev?, valElevAccuracy?, valGeoidUndulation?, uomDistVer?, valCrc?, txtVerDatum?, Mtt?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual MkrUidType MkrUid {
            get {
                XElement x = this.GetElement(MkrUidXName);
                return ((MkrUidType)(x));
            }
            set {
                this.SetElement(MkrUidXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// MKR is under the responsibility of Organisaton or authority
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (MkrUid, OrgUid, NdbUid?, IlsUid?, codeClass?, codePsnIls?, valFreq, uomFreq, txtName?, valAxisBrg?, codeEm?, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, valElev?, valElevAccuracy?, valGeoidUndulation?, uomDistVer?, valCrc?, txtVerDatum?, Mtt?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual OrganisationAuthorityUidType OrgUid {
            get {
                XElement x = this.GetElement(OrgUidXName);
                return ((OrganisationAuthorityUidType)(x));
            }
            set {
                this.SetElement(OrgUidXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// MKR is co-located with Non-directional radio beacon [NDB]
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (MkrUid, OrgUid, NdbUid?, IlsUid?, codeClass?, codePsnIls?, valFreq, uomFreq, txtName?, valAxisBrg?, codeEm?, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, valElev?, valElevAccuracy?, valGeoidUndulation?, uomDistVer?, valCrc?, txtVerDatum?, Mtt?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual NdbUidType NdbUid {
            get {
                XElement x = this.GetElement(NdbUidXName);
                return ((NdbUidType)(x));
            }
            set {
                this.SetElement(NdbUidXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// MKR is part of Instrument landing system [ILS]
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (MkrUid, OrgUid, NdbUid?, IlsUid?, codeClass?, codePsnIls?, valFreq, uomFreq, txtName?, valAxisBrg?, codeEm?, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, valElev?, valElevAccuracy?, valGeoidUndulation?, uomDistVer?, valCrc?, txtVerDatum?, Mtt?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual IlsUidType IlsUid {
            get {
                XElement x = this.GetElement(IlsUidXName);
                return ((IlsUidType)(x));
            }
            set {
                this.SetElement(IlsUidXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Classification
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (MkrUid, OrgUid, NdbUid?, IlsUid?, codeClass?, codePsnIls?, valFreq, uomFreq, txtName?, valAxisBrg?, codeEm?, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, valElev?, valElevAccuracy?, valGeoidUndulation?, uomDistVer?, valCrc?, txtVerDatum?, Mtt?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual codeClassMkr codeClass {
            get {
                XElement x = this.GetElement(codeClassXName);
                return ((codeClassMkr)(x));
            }
            set {
                this.SetElement(codeClassXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Position
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (MkrUid, OrgUid, NdbUid?, IlsUid?, codeClass?, codePsnIls?, valFreq, uomFreq, txtName?, valAxisBrg?, codeEm?, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, valElev?, valElevAccuracy?, valGeoidUndulation?, uomDistVer?, valCrc?, txtVerDatum?, Mtt?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual codePsnIls codePsnIls {
            get {
                XElement x = this.GetElement(codePsnIlsXName);
                return ((codePsnIls)(x));
            }
            set {
                this.SetElement(codePsnIlsXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Frequency
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (MkrUid, OrgUid, NdbUid?, IlsUid?, codeClass?, codePsnIls?, valFreq, uomFreq, txtName?, valAxisBrg?, codeEm?, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, valElev?, valElevAccuracy?, valGeoidUndulation?, uomDistVer?, valCrc?, txtVerDatum?, Mtt?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual valFreq valFreq {
            get {
                XElement x = this.GetElement(valFreqXName);
                return ((valFreq)(x));
            }
            set {
                this.SetElement(valFreqXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Unit of measurement [frequency]
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (MkrUid, OrgUid, NdbUid?, IlsUid?, codeClass?, codePsnIls?, valFreq, uomFreq, txtName?, valAxisBrg?, codeEm?, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, valElev?, valElevAccuracy?, valGeoidUndulation?, uomDistVer?, valCrc?, txtVerDatum?, Mtt?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual uomFreq uomFreq {
            get {
                XElement x = this.GetElement(uomFreqXName);
                return ((uomFreq)(x));
            }
            set {
                this.SetElement(uomFreqXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Name
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (MkrUid, OrgUid, NdbUid?, IlsUid?, codeClass?, codePsnIls?, valFreq, uomFreq, txtName?, valAxisBrg?, codeEm?, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, valElev?, valElevAccuracy?, valGeoidUndulation?, uomDistVer?, valCrc?, txtVerDatum?, Mtt?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual txtName txtName {
            get {
                XElement x = this.GetElement(txtNameXName);
                return ((txtName)(x));
            }
            set {
                this.SetElement(txtNameXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// True bearing of the minor axis of the marker beacon
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (MkrUid, OrgUid, NdbUid?, IlsUid?, codeClass?, codePsnIls?, valFreq, uomFreq, txtName?, valAxisBrg?, codeEm?, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, valElev?, valElevAccuracy?, valGeoidUndulation?, uomDistVer?, valCrc?, txtVerDatum?, Mtt?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual valAngleBrg valAxisBrg {
            get {
                XElement x = this.GetElement(valAxisBrgXName);
                return ((valAngleBrg)(x));
            }
            set {
                this.SetElement(valAxisBrgXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Emission
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (MkrUid, OrgUid, NdbUid?, IlsUid?, codeClass?, codePsnIls?, valFreq, uomFreq, txtName?, valAxisBrg?, codeEm?, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, valElev?, valElevAccuracy?, valGeoidUndulation?, uomDistVer?, valCrc?, txtVerDatum?, Mtt?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual codeEmRdo codeEm {
            get {
                XElement x = this.GetElement(codeEmXName);
                return ((codeEmRdo)(x));
            }
            set {
                this.SetElement(codeEmXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Datum
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (MkrUid, OrgUid, NdbUid?, IlsUid?, codeClass?, codePsnIls?, valFreq, uomFreq, txtName?, valAxisBrg?, codeEm?, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, valElev?, valElevAccuracy?, valGeoidUndulation?, uomDistVer?, valCrc?, txtVerDatum?, Mtt?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual codeDatum codeDatum {
            get {
                XElement x = this.GetElement(codeDatumXName);
                return ((codeDatum)(x));
            }
            set {
                this.SetElement(codeDatumXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Geographical accuracy
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (MkrUid, OrgUid, NdbUid?, IlsUid?, codeClass?, codePsnIls?, valFreq, uomFreq, txtName?, valAxisBrg?, codeEm?, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, valElev?, valElevAccuracy?, valGeoidUndulation?, uomDistVer?, valCrc?, txtVerDatum?, Mtt?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual valDistHorz valGeoAccuracy {
            get {
                XElement x = this.GetElement(valGeoAccuracyXName);
                return ((valDistHorz)(x));
            }
            set {
                this.SetElement(valGeoAccuracyXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Unit of measurement [geographical accuracy]
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (MkrUid, OrgUid, NdbUid?, IlsUid?, codeClass?, codePsnIls?, valFreq, uomFreq, txtName?, valAxisBrg?, codeEm?, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, valElev?, valElevAccuracy?, valGeoidUndulation?, uomDistVer?, valCrc?, txtVerDatum?, Mtt?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual uomDistHorz uomGeoAccuracy {
            get {
                XElement x = this.GetElement(uomGeoAccuracyXName);
                return ((uomDistHorz)(x));
            }
            set {
                this.SetElement(uomGeoAccuracyXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Elevation
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (MkrUid, OrgUid, NdbUid?, IlsUid?, codeClass?, codePsnIls?, valFreq, uomFreq, txtName?, valAxisBrg?, codeEm?, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, valElev?, valElevAccuracy?, valGeoidUndulation?, uomDistVer?, valCrc?, txtVerDatum?, Mtt?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual valDistVer valElev {
            get {
                XElement x = this.GetElement(valElevXName);
                return ((valDistVer)(x));
            }
            set {
                this.SetElement(valElevXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Elevation accuracy
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (MkrUid, OrgUid, NdbUid?, IlsUid?, codeClass?, codePsnIls?, valFreq, uomFreq, txtName?, valAxisBrg?, codeEm?, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, valElev?, valElevAccuracy?, valGeoidUndulation?, uomDistVer?, valCrc?, txtVerDatum?, Mtt?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual valDistVer valElevAccuracy {
            get {
                XElement x = this.GetElement(valElevAccuracyXName);
                return ((valDistVer)(x));
            }
            set {
                this.SetElement(valElevAccuracyXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Geoid undulation
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (MkrUid, OrgUid, NdbUid?, IlsUid?, codeClass?, codePsnIls?, valFreq, uomFreq, txtName?, valAxisBrg?, codeEm?, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, valElev?, valElevAccuracy?, valGeoidUndulation?, uomDistVer?, valCrc?, txtVerDatum?, Mtt?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual valDistVer valGeoidUndulation {
            get {
                XElement x = this.GetElement(valGeoidUndulationXName);
                return ((valDistVer)(x));
            }
            set {
                this.SetElement(valGeoidUndulationXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Unit of measurement [vertical distance]
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (MkrUid, OrgUid, NdbUid?, IlsUid?, codeClass?, codePsnIls?, valFreq, uomFreq, txtName?, valAxisBrg?, codeEm?, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, valElev?, valElevAccuracy?, valGeoidUndulation?, uomDistVer?, valCrc?, txtVerDatum?, Mtt?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual uomElev uomDistVer {
            get {
                XElement x = this.GetElement(uomDistVerXName);
                return ((uomElev)(x));
            }
            set {
                this.SetElement(uomDistVerXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Cyclic redundancy check
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (MkrUid, OrgUid, NdbUid?, IlsUid?, codeClass?, codePsnIls?, valFreq, uomFreq, txtName?, valAxisBrg?, codeEm?, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, valElev?, valElevAccuracy?, valGeoidUndulation?, uomDistVer?, valCrc?, txtVerDatum?, Mtt?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual valHex valCrc {
            get {
                XElement x = this.GetElement(valCrcXName);
                return ((valHex)(x));
            }
            set {
                this.SetElement(valCrcXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Vertical Datum
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (MkrUid, OrgUid, NdbUid?, IlsUid?, codeClass?, codePsnIls?, valFreq, uomFreq, txtName?, valAxisBrg?, codeEm?, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, valElev?, valElevAccuracy?, valGeoidUndulation?, uomDistVer?, valCrc?, txtVerDatum?, Mtt?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual txtDescr txtVerDatum {
            get {
                XElement x = this.GetElement(txtVerDatumXName);
                return ((txtDescr)(x));
            }
            set {
                this.SetElement(txtVerDatumXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// MKR is operating according to MKR - Timetable
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (MkrUid, OrgUid, NdbUid?, IlsUid?, codeClass?, codePsnIls?, valFreq, uomFreq, txtName?, valAxisBrg?, codeEm?, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, valElev?, valElevAccuracy?, valGeoidUndulation?, uomDistVer?, valCrc?, txtVerDatum?, Mtt?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual TimetableNavaidType Mtt {
            get {
                XElement x = this.GetElement(MttXName);
                return ((TimetableNavaidType)(x));
            }
            set {
                this.SetElement(MttXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Remark
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (MkrUid, OrgUid, NdbUid?, IlsUid?, codeClass?, codePsnIls?, valFreq, uomFreq, txtName?, valAxisBrg?, codeEm?, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, valElev?, valElevAccuracy?, valGeoidUndulation?, uomDistVer?, valCrc?, txtVerDatum?, Mtt?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual txtRmk txtRmk {
            get {
                XElement x = this.GetElement(txtRmkXName);
                return ((txtRmk)(x));
            }
            set {
                this.SetElement(txtRmkXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string source {
            get {
                XAttribute x = this.Attribute(sourceXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(sourceXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<MkrType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(MkrUidXName, typeof(MkrUidType));
            localElementDictionary.Add(OrgUidXName, typeof(OrganisationAuthorityUidType));
            localElementDictionary.Add(NdbUidXName, typeof(NdbUidType));
            localElementDictionary.Add(IlsUidXName, typeof(IlsUidType));
            localElementDictionary.Add(codeClassXName, typeof(codeClassMkr));
            localElementDictionary.Add(codePsnIlsXName, typeof(codePsnIls));
            localElementDictionary.Add(valFreqXName, typeof(valFreq));
            localElementDictionary.Add(uomFreqXName, typeof(uomFreq));
            localElementDictionary.Add(txtNameXName, typeof(txtName));
            localElementDictionary.Add(valAxisBrgXName, typeof(valAngleBrg));
            localElementDictionary.Add(codeEmXName, typeof(codeEmRdo));
            localElementDictionary.Add(codeDatumXName, typeof(codeDatum));
            localElementDictionary.Add(valGeoAccuracyXName, typeof(valDistHorz));
            localElementDictionary.Add(uomGeoAccuracyXName, typeof(uomDistHorz));
            localElementDictionary.Add(valElevXName, typeof(valDistVer));
            localElementDictionary.Add(valElevAccuracyXName, typeof(valDistVer));
            localElementDictionary.Add(valGeoidUndulationXName, typeof(valDistVer));
            localElementDictionary.Add(uomDistVerXName, typeof(uomElev));
            localElementDictionary.Add(valCrcXName, typeof(valHex));
            localElementDictionary.Add(txtVerDatumXName, typeof(txtDescr));
            localElementDictionary.Add(MttXName, typeof(TimetableNavaidType));
            localElementDictionary.Add(txtRmkXName, typeof(txtRmk));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Marker [MKR] - UID
    /// </para>
    /// <para>
    /// Regular expression: (codeId, geoLat, geoLong)
    /// </para>
    /// </summary>
    public partial class MkrUidType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName codeIdXName = System.Xml.Linq.XName.Get("codeId", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName geoLatXName = System.Xml.Linq.XName.Get("geoLat", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName geoLongXName = System.Xml.Linq.XName.Get("geoLong", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName midXName = System.Xml.Linq.XName.Get("mid", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName regionXName = System.Xml.Linq.XName.Get("region", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("MkrUidType", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator MkrUidType(XElement xe) { return XTypedServices.ToXTypedElement<MkrUidType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static MkrUidType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(codeIdXName), new NamedContentModelEntity(geoLatXName), new NamedContentModelEntity(geoLongXName));
        }
        
        /// <summary>
        /// <para>
        /// Marker [MKR] - UID
        /// </para>
        /// <para>
        /// Regular expression: (codeId, geoLat, geoLong)
        /// </para>
        /// </summary>
        public MkrUidType() {
        }
        
        /// <summary>
        /// <para>
        /// Identification
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (codeId, geoLat, geoLong)
        /// </para>
        /// </summary>
        public virtual codeIdMkr codeId {
            get {
                XElement x = this.GetElement(codeIdXName);
                return ((codeIdMkr)(x));
            }
            set {
                this.SetElement(codeIdXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Latitude
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (codeId, geoLat, geoLong)
        /// </para>
        /// </summary>
        public virtual geoLat geoLat {
            get {
                XElement x = this.GetElement(geoLatXName);
                return ((geoLat)(x));
            }
            set {
                this.SetElement(geoLatXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Longitude
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (codeId, geoLat, geoLong)
        /// </para>
        /// </summary>
        public virtual geoLong geoLong {
            get {
                XElement x = this.GetElement(geoLongXName);
                return ((geoLong)(x));
            }
            set {
                this.SetElement(geoLongXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string mid {
            get {
                XAttribute x = this.Attribute(midXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(midXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual string region {
            get {
                XAttribute x = this.Attribute(regionXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(regionXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<MkrUidType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(codeIdXName, typeof(codeIdMkr));
            localElementDictionary.Add(geoLatXName, typeof(geoLat));
            localElementDictionary.Add(geoLongXName, typeof(geoLong));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// MLS azimuth
    /// </para>
    /// <para>
    /// Regular expression: (codeType, valTrueBrg?, valMagBrg?, valMagVar?, dateMagVar?, geoLat, geoLong, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, valElev?, valElevAccuracy?, valGeoidUndulation?, uomDistVer?, valCrc?, txtVerDatum?, valAnglePropLeft?, valAnglePropRight?, valAngleCoverLeft?, valAngleCoverRight?, Mat?, txtRmk?)
    /// </para>
    /// </summary>
    public partial class MlsAzimuthType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName codeTypeXName = System.Xml.Linq.XName.Get("codeType", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName valTrueBrgXName = System.Xml.Linq.XName.Get("valTrueBrg", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName valMagBrgXName = System.Xml.Linq.XName.Get("valMagBrg", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName valMagVarXName = System.Xml.Linq.XName.Get("valMagVar", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName dateMagVarXName = System.Xml.Linq.XName.Get("dateMagVar", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName geoLatXName = System.Xml.Linq.XName.Get("geoLat", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName geoLongXName = System.Xml.Linq.XName.Get("geoLong", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName codeDatumXName = System.Xml.Linq.XName.Get("codeDatum", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName valGeoAccuracyXName = System.Xml.Linq.XName.Get("valGeoAccuracy", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName uomGeoAccuracyXName = System.Xml.Linq.XName.Get("uomGeoAccuracy", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName valElevXName = System.Xml.Linq.XName.Get("valElev", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName valElevAccuracyXName = System.Xml.Linq.XName.Get("valElevAccuracy", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName valGeoidUndulationXName = System.Xml.Linq.XName.Get("valGeoidUndulation", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName uomDistVerXName = System.Xml.Linq.XName.Get("uomDistVer", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName valCrcXName = System.Xml.Linq.XName.Get("valCrc", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName txtVerDatumXName = System.Xml.Linq.XName.Get("txtVerDatum", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName valAnglePropLeftXName = System.Xml.Linq.XName.Get("valAnglePropLeft", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName valAnglePropRightXName = System.Xml.Linq.XName.Get("valAnglePropRight", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName valAngleCoverLeftXName = System.Xml.Linq.XName.Get("valAngleCoverLeft", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName valAngleCoverRightXName = System.Xml.Linq.XName.Get("valAngleCoverRight", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName MatXName = System.Xml.Linq.XName.Get("Mat", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName txtRmkXName = System.Xml.Linq.XName.Get("txtRmk", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("MlsAzimuthType", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator MlsAzimuthType(XElement xe) { return XTypedServices.ToXTypedElement<MlsAzimuthType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static MlsAzimuthType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(codeTypeXName), new NamedContentModelEntity(valTrueBrgXName), new NamedContentModelEntity(valMagBrgXName), new NamedContentModelEntity(valMagVarXName), new NamedContentModelEntity(dateMagVarXName), new NamedContentModelEntity(geoLatXName), new NamedContentModelEntity(geoLongXName), new NamedContentModelEntity(codeDatumXName), new NamedContentModelEntity(valGeoAccuracyXName), new NamedContentModelEntity(uomGeoAccuracyXName), new NamedContentModelEntity(valElevXName), new NamedContentModelEntity(valElevAccuracyXName), new NamedContentModelEntity(valGeoidUndulationXName), new NamedContentModelEntity(uomDistVerXName), new NamedContentModelEntity(valCrcXName), new NamedContentModelEntity(txtVerDatumXName), new NamedContentModelEntity(valAnglePropLeftXName), new NamedContentModelEntity(valAnglePropRightXName), new NamedContentModelEntity(valAngleCoverLeftXName), new NamedContentModelEntity(valAngleCoverRightXName), new NamedContentModelEntity(MatXName), new NamedContentModelEntity(txtRmkXName));
        }
        
        /// <summary>
        /// <para>
        /// MLS azimuth
        /// </para>
        /// <para>
        /// Regular expression: (codeType, valTrueBrg?, valMagBrg?, valMagVar?, dateMagVar?, geoLat, geoLong, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, valElev?, valElevAccuracy?, valGeoidUndulation?, uomDistVer?, valCrc?, txtVerDatum?, valAnglePropLeft?, valAnglePropRight?, valAngleCoverLeft?, valAngleCoverRight?, Mat?, txtRmk?)
        /// </para>
        /// </summary>
        public MlsAzimuthType() {
        }
        
        /// <summary>
        /// <para>
        /// Type
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (codeType, valTrueBrg?, valMagBrg?, valMagVar?, dateMagVar?, geoLat, geoLong, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, valElev?, valElevAccuracy?, valGeoidUndulation?, uomDistVer?, valCrc?, txtVerDatum?, valAnglePropLeft?, valAnglePropRight?, valAngleCoverLeft?, valAngleCoverRight?, Mat?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual codeTypeAzm codeType {
            get {
                XElement x = this.GetElement(codeTypeXName);
                return ((codeTypeAzm)(x));
            }
            set {
                this.SetElement(codeTypeXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// True bearing
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (codeType, valTrueBrg?, valMagBrg?, valMagVar?, dateMagVar?, geoLat, geoLong, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, valElev?, valElevAccuracy?, valGeoidUndulation?, uomDistVer?, valCrc?, txtVerDatum?, valAnglePropLeft?, valAnglePropRight?, valAngleCoverLeft?, valAngleCoverRight?, Mat?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual valAngleBrg valTrueBrg {
            get {
                XElement x = this.GetElement(valTrueBrgXName);
                return ((valAngleBrg)(x));
            }
            set {
                this.SetElement(valTrueBrgXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Magnetic bearing
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (codeType, valTrueBrg?, valMagBrg?, valMagVar?, dateMagVar?, geoLat, geoLong, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, valElev?, valElevAccuracy?, valGeoidUndulation?, uomDistVer?, valCrc?, txtVerDatum?, valAnglePropLeft?, valAnglePropRight?, valAngleCoverLeft?, valAngleCoverRight?, Mat?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual valAngleBrg valMagBrg {
            get {
                XElement x = this.GetElement(valMagBrgXName);
                return ((valAngleBrg)(x));
            }
            set {
                this.SetElement(valMagBrgXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Magnetic variation
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (codeType, valTrueBrg?, valMagBrg?, valMagVar?, dateMagVar?, geoLat, geoLong, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, valElev?, valElevAccuracy?, valGeoidUndulation?, uomDistVer?, valCrc?, txtVerDatum?, valAnglePropLeft?, valAnglePropRight?, valAngleCoverLeft?, valAngleCoverRight?, Mat?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual valAngleMagVar valMagVar {
            get {
                XElement x = this.GetElement(valMagVarXName);
                return ((valAngleMagVar)(x));
            }
            set {
                this.SetElement(valMagVarXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Magnetic variation date
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (codeType, valTrueBrg?, valMagBrg?, valMagVar?, dateMagVar?, geoLat, geoLong, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, valElev?, valElevAccuracy?, valGeoidUndulation?, uomDistVer?, valCrc?, txtVerDatum?, valAnglePropLeft?, valAnglePropRight?, valAngleCoverLeft?, valAngleCoverRight?, Mat?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual dateYear dateMagVar {
            get {
                XElement x = this.GetElement(dateMagVarXName);
                return ((dateYear)(x));
            }
            set {
                this.SetElement(dateMagVarXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Latitude
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (codeType, valTrueBrg?, valMagBrg?, valMagVar?, dateMagVar?, geoLat, geoLong, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, valElev?, valElevAccuracy?, valGeoidUndulation?, uomDistVer?, valCrc?, txtVerDatum?, valAnglePropLeft?, valAnglePropRight?, valAngleCoverLeft?, valAngleCoverRight?, Mat?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual geoLat geoLat {
            get {
                XElement x = this.GetElement(geoLatXName);
                return ((geoLat)(x));
            }
            set {
                this.SetElement(geoLatXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Longitude
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (codeType, valTrueBrg?, valMagBrg?, valMagVar?, dateMagVar?, geoLat, geoLong, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, valElev?, valElevAccuracy?, valGeoidUndulation?, uomDistVer?, valCrc?, txtVerDatum?, valAnglePropLeft?, valAnglePropRight?, valAngleCoverLeft?, valAngleCoverRight?, Mat?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual geoLong geoLong {
            get {
                XElement x = this.GetElement(geoLongXName);
                return ((geoLong)(x));
            }
            set {
                this.SetElement(geoLongXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Datum
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (codeType, valTrueBrg?, valMagBrg?, valMagVar?, dateMagVar?, geoLat, geoLong, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, valElev?, valElevAccuracy?, valGeoidUndulation?, uomDistVer?, valCrc?, txtVerDatum?, valAnglePropLeft?, valAnglePropRight?, valAngleCoverLeft?, valAngleCoverRight?, Mat?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual codeDatum codeDatum {
            get {
                XElement x = this.GetElement(codeDatumXName);
                return ((codeDatum)(x));
            }
            set {
                this.SetElement(codeDatumXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Geographical accuracy
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (codeType, valTrueBrg?, valMagBrg?, valMagVar?, dateMagVar?, geoLat, geoLong, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, valElev?, valElevAccuracy?, valGeoidUndulation?, uomDistVer?, valCrc?, txtVerDatum?, valAnglePropLeft?, valAnglePropRight?, valAngleCoverLeft?, valAngleCoverRight?, Mat?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual valDistHorz valGeoAccuracy {
            get {
                XElement x = this.GetElement(valGeoAccuracyXName);
                return ((valDistHorz)(x));
            }
            set {
                this.SetElement(valGeoAccuracyXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Unit of measurement [geographical accuracy]
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (codeType, valTrueBrg?, valMagBrg?, valMagVar?, dateMagVar?, geoLat, geoLong, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, valElev?, valElevAccuracy?, valGeoidUndulation?, uomDistVer?, valCrc?, txtVerDatum?, valAnglePropLeft?, valAnglePropRight?, valAngleCoverLeft?, valAngleCoverRight?, Mat?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual uomDistHorz uomGeoAccuracy {
            get {
                XElement x = this.GetElement(uomGeoAccuracyXName);
                return ((uomDistHorz)(x));
            }
            set {
                this.SetElement(uomGeoAccuracyXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Elevation
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (codeType, valTrueBrg?, valMagBrg?, valMagVar?, dateMagVar?, geoLat, geoLong, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, valElev?, valElevAccuracy?, valGeoidUndulation?, uomDistVer?, valCrc?, txtVerDatum?, valAnglePropLeft?, valAnglePropRight?, valAngleCoverLeft?, valAngleCoverRight?, Mat?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual valDistVer valElev {
            get {
                XElement x = this.GetElement(valElevXName);
                return ((valDistVer)(x));
            }
            set {
                this.SetElement(valElevXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Elevation accuracy
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (codeType, valTrueBrg?, valMagBrg?, valMagVar?, dateMagVar?, geoLat, geoLong, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, valElev?, valElevAccuracy?, valGeoidUndulation?, uomDistVer?, valCrc?, txtVerDatum?, valAnglePropLeft?, valAnglePropRight?, valAngleCoverLeft?, valAngleCoverRight?, Mat?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual valDistVer valElevAccuracy {
            get {
                XElement x = this.GetElement(valElevAccuracyXName);
                return ((valDistVer)(x));
            }
            set {
                this.SetElement(valElevAccuracyXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Geoid undulation
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (codeType, valTrueBrg?, valMagBrg?, valMagVar?, dateMagVar?, geoLat, geoLong, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, valElev?, valElevAccuracy?, valGeoidUndulation?, uomDistVer?, valCrc?, txtVerDatum?, valAnglePropLeft?, valAnglePropRight?, valAngleCoverLeft?, valAngleCoverRight?, Mat?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual valDistVer valGeoidUndulation {
            get {
                XElement x = this.GetElement(valGeoidUndulationXName);
                return ((valDistVer)(x));
            }
            set {
                this.SetElement(valGeoidUndulationXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Unit of measurement [vertical distance]
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (codeType, valTrueBrg?, valMagBrg?, valMagVar?, dateMagVar?, geoLat, geoLong, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, valElev?, valElevAccuracy?, valGeoidUndulation?, uomDistVer?, valCrc?, txtVerDatum?, valAnglePropLeft?, valAnglePropRight?, valAngleCoverLeft?, valAngleCoverRight?, Mat?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual uomElev uomDistVer {
            get {
                XElement x = this.GetElement(uomDistVerXName);
                return ((uomElev)(x));
            }
            set {
                this.SetElement(uomDistVerXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Cyclic redundancy check
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (codeType, valTrueBrg?, valMagBrg?, valMagVar?, dateMagVar?, geoLat, geoLong, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, valElev?, valElevAccuracy?, valGeoidUndulation?, uomDistVer?, valCrc?, txtVerDatum?, valAnglePropLeft?, valAnglePropRight?, valAngleCoverLeft?, valAngleCoverRight?, Mat?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual valHex valCrc {
            get {
                XElement x = this.GetElement(valCrcXName);
                return ((valHex)(x));
            }
            set {
                this.SetElement(valCrcXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Vertical Datum
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (codeType, valTrueBrg?, valMagBrg?, valMagVar?, dateMagVar?, geoLat, geoLong, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, valElev?, valElevAccuracy?, valGeoidUndulation?, uomDistVer?, valCrc?, txtVerDatum?, valAnglePropLeft?, valAnglePropRight?, valAngleCoverLeft?, valAngleCoverRight?, Mat?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual txtDescr txtVerDatum {
            get {
                XElement x = this.GetElement(txtVerDatumXName);
                return ((txtDescr)(x));
            }
            set {
                this.SetElement(txtVerDatumXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Left angle of proportionality
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (codeType, valTrueBrg?, valMagBrg?, valMagVar?, dateMagVar?, geoLat, geoLong, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, valElev?, valElevAccuracy?, valGeoidUndulation?, uomDistVer?, valCrc?, txtVerDatum?, valAnglePropLeft?, valAnglePropRight?, valAngleCoverLeft?, valAngleCoverRight?, Mat?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual valAngle valAnglePropLeft {
            get {
                XElement x = this.GetElement(valAnglePropLeftXName);
                return ((valAngle)(x));
            }
            set {
                this.SetElement(valAnglePropLeftXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Right  angle of proportionality
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (codeType, valTrueBrg?, valMagBrg?, valMagVar?, dateMagVar?, geoLat, geoLong, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, valElev?, valElevAccuracy?, valGeoidUndulation?, uomDistVer?, valCrc?, txtVerDatum?, valAnglePropLeft?, valAnglePropRight?, valAngleCoverLeft?, valAngleCoverRight?, Mat?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual valAngle valAnglePropRight {
            get {
                XElement x = this.GetElement(valAnglePropRightXName);
                return ((valAngle)(x));
            }
            set {
                this.SetElement(valAnglePropRightXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Left angle of coverage
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (codeType, valTrueBrg?, valMagBrg?, valMagVar?, dateMagVar?, geoLat, geoLong, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, valElev?, valElevAccuracy?, valGeoidUndulation?, uomDistVer?, valCrc?, txtVerDatum?, valAnglePropLeft?, valAnglePropRight?, valAngleCoverLeft?, valAngleCoverRight?, Mat?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual valAngle valAngleCoverLeft {
            get {
                XElement x = this.GetElement(valAngleCoverLeftXName);
                return ((valAngle)(x));
            }
            set {
                this.SetElement(valAngleCoverLeftXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Right angle of coverage
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (codeType, valTrueBrg?, valMagBrg?, valMagVar?, dateMagVar?, geoLat, geoLong, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, valElev?, valElevAccuracy?, valGeoidUndulation?, uomDistVer?, valCrc?, txtVerDatum?, valAnglePropLeft?, valAnglePropRight?, valAngleCoverLeft?, valAngleCoverRight?, Mat?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual valAngle valAngleCoverRight {
            get {
                XElement x = this.GetElement(valAngleCoverRightXName);
                return ((valAngle)(x));
            }
            set {
                this.SetElement(valAngleCoverRightXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// MLS azimuth is operating according to MLS azimuth - Timetable
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (codeType, valTrueBrg?, valMagBrg?, valMagVar?, dateMagVar?, geoLat, geoLong, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, valElev?, valElevAccuracy?, valGeoidUndulation?, uomDistVer?, valCrc?, txtVerDatum?, valAnglePropLeft?, valAnglePropRight?, valAngleCoverLeft?, valAngleCoverRight?, Mat?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual TimetableNavaidType Mat {
            get {
                XElement x = this.GetElement(MatXName);
                return ((TimetableNavaidType)(x));
            }
            set {
                this.SetElement(MatXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Remark
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (codeType, valTrueBrg?, valMagBrg?, valMagVar?, dateMagVar?, geoLat, geoLong, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, valElev?, valElevAccuracy?, valGeoidUndulation?, uomDistVer?, valCrc?, txtVerDatum?, valAnglePropLeft?, valAnglePropRight?, valAngleCoverLeft?, valAngleCoverRight?, Mat?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual txtRmk txtRmk {
            get {
                XElement x = this.GetElement(txtRmkXName);
                return ((txtRmk)(x));
            }
            set {
                this.SetElement(txtRmkXName, value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<MlsAzimuthType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(codeTypeXName, typeof(codeTypeAzm));
            localElementDictionary.Add(valTrueBrgXName, typeof(valAngleBrg));
            localElementDictionary.Add(valMagBrgXName, typeof(valAngleBrg));
            localElementDictionary.Add(valMagVarXName, typeof(valAngleMagVar));
            localElementDictionary.Add(dateMagVarXName, typeof(dateYear));
            localElementDictionary.Add(geoLatXName, typeof(geoLat));
            localElementDictionary.Add(geoLongXName, typeof(geoLong));
            localElementDictionary.Add(codeDatumXName, typeof(codeDatum));
            localElementDictionary.Add(valGeoAccuracyXName, typeof(valDistHorz));
            localElementDictionary.Add(uomGeoAccuracyXName, typeof(uomDistHorz));
            localElementDictionary.Add(valElevXName, typeof(valDistVer));
            localElementDictionary.Add(valElevAccuracyXName, typeof(valDistVer));
            localElementDictionary.Add(valGeoidUndulationXName, typeof(valDistVer));
            localElementDictionary.Add(uomDistVerXName, typeof(uomElev));
            localElementDictionary.Add(valCrcXName, typeof(valHex));
            localElementDictionary.Add(txtVerDatumXName, typeof(txtDescr));
            localElementDictionary.Add(valAnglePropLeftXName, typeof(valAngle));
            localElementDictionary.Add(valAnglePropRightXName, typeof(valAngle));
            localElementDictionary.Add(valAngleCoverLeftXName, typeof(valAngle));
            localElementDictionary.Add(valAngleCoverRightXName, typeof(valAngle));
            localElementDictionary.Add(MatXName, typeof(TimetableNavaidType));
            localElementDictionary.Add(txtRmkXName, typeof(txtRmk));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// MLS Elevation
    /// </para>
    /// <para>
    /// Regular expression: (valAngleNml?, valAngleMnm?, valAngleSpan?, geoLat, geoLong, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, valElev?, valElevAccuracy?, valGeoidUndulation?, uomDistVer?, valCrc?, txtVerDatum?, Met?, txtRmk?)
    /// </para>
    /// </summary>
    public partial class MlsElevationType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName valAngleNmlXName = System.Xml.Linq.XName.Get("valAngleNml", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName valAngleMnmXName = System.Xml.Linq.XName.Get("valAngleMnm", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName valAngleSpanXName = System.Xml.Linq.XName.Get("valAngleSpan", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName geoLatXName = System.Xml.Linq.XName.Get("geoLat", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName geoLongXName = System.Xml.Linq.XName.Get("geoLong", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName codeDatumXName = System.Xml.Linq.XName.Get("codeDatum", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName valGeoAccuracyXName = System.Xml.Linq.XName.Get("valGeoAccuracy", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName uomGeoAccuracyXName = System.Xml.Linq.XName.Get("uomGeoAccuracy", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName valElevXName = System.Xml.Linq.XName.Get("valElev", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName valElevAccuracyXName = System.Xml.Linq.XName.Get("valElevAccuracy", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName valGeoidUndulationXName = System.Xml.Linq.XName.Get("valGeoidUndulation", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName uomDistVerXName = System.Xml.Linq.XName.Get("uomDistVer", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName valCrcXName = System.Xml.Linq.XName.Get("valCrc", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName txtVerDatumXName = System.Xml.Linq.XName.Get("txtVerDatum", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName MetXName = System.Xml.Linq.XName.Get("Met", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName txtRmkXName = System.Xml.Linq.XName.Get("txtRmk", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("MlsElevationType", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator MlsElevationType(XElement xe) { return XTypedServices.ToXTypedElement<MlsElevationType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static MlsElevationType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(valAngleNmlXName), new NamedContentModelEntity(valAngleMnmXName), new NamedContentModelEntity(valAngleSpanXName), new NamedContentModelEntity(geoLatXName), new NamedContentModelEntity(geoLongXName), new NamedContentModelEntity(codeDatumXName), new NamedContentModelEntity(valGeoAccuracyXName), new NamedContentModelEntity(uomGeoAccuracyXName), new NamedContentModelEntity(valElevXName), new NamedContentModelEntity(valElevAccuracyXName), new NamedContentModelEntity(valGeoidUndulationXName), new NamedContentModelEntity(uomDistVerXName), new NamedContentModelEntity(valCrcXName), new NamedContentModelEntity(txtVerDatumXName), new NamedContentModelEntity(MetXName), new NamedContentModelEntity(txtRmkXName));
        }
        
        /// <summary>
        /// <para>
        /// MLS Elevation
        /// </para>
        /// <para>
        /// Regular expression: (valAngleNml?, valAngleMnm?, valAngleSpan?, geoLat, geoLong, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, valElev?, valElevAccuracy?, valGeoidUndulation?, uomDistVer?, valCrc?, txtVerDatum?, Met?, txtRmk?)
        /// </para>
        /// </summary>
        public MlsElevationType() {
        }
        
        /// <summary>
        /// <para>
        /// Nominal glide path angle
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (valAngleNml?, valAngleMnm?, valAngleSpan?, geoLat, geoLong, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, valElev?, valElevAccuracy?, valGeoidUndulation?, uomDistVer?, valCrc?, txtVerDatum?, Met?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual valAngle valAngleNml {
            get {
                XElement x = this.GetElement(valAngleNmlXName);
                return ((valAngle)(x));
            }
            set {
                this.SetElement(valAngleNmlXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Minimum angle
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (valAngleNml?, valAngleMnm?, valAngleSpan?, geoLat, geoLong, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, valElev?, valElevAccuracy?, valGeoidUndulation?, uomDistVer?, valCrc?, txtVerDatum?, Met?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual valAngle valAngleMnm {
            get {
                XElement x = this.GetElement(valAngleMnmXName);
                return ((valAngle)(x));
            }
            set {
                this.SetElement(valAngleMnmXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Span angle
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (valAngleNml?, valAngleMnm?, valAngleSpan?, geoLat, geoLong, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, valElev?, valElevAccuracy?, valGeoidUndulation?, uomDistVer?, valCrc?, txtVerDatum?, Met?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual valAngle valAngleSpan {
            get {
                XElement x = this.GetElement(valAngleSpanXName);
                return ((valAngle)(x));
            }
            set {
                this.SetElement(valAngleSpanXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Latitude
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (valAngleNml?, valAngleMnm?, valAngleSpan?, geoLat, geoLong, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, valElev?, valElevAccuracy?, valGeoidUndulation?, uomDistVer?, valCrc?, txtVerDatum?, Met?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual geoLat geoLat {
            get {
                XElement x = this.GetElement(geoLatXName);
                return ((geoLat)(x));
            }
            set {
                this.SetElement(geoLatXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Longitude
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (valAngleNml?, valAngleMnm?, valAngleSpan?, geoLat, geoLong, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, valElev?, valElevAccuracy?, valGeoidUndulation?, uomDistVer?, valCrc?, txtVerDatum?, Met?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual geoLong geoLong {
            get {
                XElement x = this.GetElement(geoLongXName);
                return ((geoLong)(x));
            }
            set {
                this.SetElement(geoLongXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Datum
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (valAngleNml?, valAngleMnm?, valAngleSpan?, geoLat, geoLong, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, valElev?, valElevAccuracy?, valGeoidUndulation?, uomDistVer?, valCrc?, txtVerDatum?, Met?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual codeDatum codeDatum {
            get {
                XElement x = this.GetElement(codeDatumXName);
                return ((codeDatum)(x));
            }
            set {
                this.SetElement(codeDatumXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Geographical accuracy
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (valAngleNml?, valAngleMnm?, valAngleSpan?, geoLat, geoLong, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, valElev?, valElevAccuracy?, valGeoidUndulation?, uomDistVer?, valCrc?, txtVerDatum?, Met?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual valDistHorz valGeoAccuracy {
            get {
                XElement x = this.GetElement(valGeoAccuracyXName);
                return ((valDistHorz)(x));
            }
            set {
                this.SetElement(valGeoAccuracyXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Unit of measurement [geographical accuracy]
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (valAngleNml?, valAngleMnm?, valAngleSpan?, geoLat, geoLong, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, valElev?, valElevAccuracy?, valGeoidUndulation?, uomDistVer?, valCrc?, txtVerDatum?, Met?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual uomDistHorz uomGeoAccuracy {
            get {
                XElement x = this.GetElement(uomGeoAccuracyXName);
                return ((uomDistHorz)(x));
            }
            set {
                this.SetElement(uomGeoAccuracyXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Elevation
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (valAngleNml?, valAngleMnm?, valAngleSpan?, geoLat, geoLong, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, valElev?, valElevAccuracy?, valGeoidUndulation?, uomDistVer?, valCrc?, txtVerDatum?, Met?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual valDistVer valElev {
            get {
                XElement x = this.GetElement(valElevXName);
                return ((valDistVer)(x));
            }
            set {
                this.SetElement(valElevXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Elevation accuracy
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (valAngleNml?, valAngleMnm?, valAngleSpan?, geoLat, geoLong, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, valElev?, valElevAccuracy?, valGeoidUndulation?, uomDistVer?, valCrc?, txtVerDatum?, Met?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual valDistVer valElevAccuracy {
            get {
                XElement x = this.GetElement(valElevAccuracyXName);
                return ((valDistVer)(x));
            }
            set {
                this.SetElement(valElevAccuracyXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Geoid undulation
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (valAngleNml?, valAngleMnm?, valAngleSpan?, geoLat, geoLong, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, valElev?, valElevAccuracy?, valGeoidUndulation?, uomDistVer?, valCrc?, txtVerDatum?, Met?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual valDistVer valGeoidUndulation {
            get {
                XElement x = this.GetElement(valGeoidUndulationXName);
                return ((valDistVer)(x));
            }
            set {
                this.SetElement(valGeoidUndulationXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Unit of measurement [vertical distance]
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (valAngleNml?, valAngleMnm?, valAngleSpan?, geoLat, geoLong, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, valElev?, valElevAccuracy?, valGeoidUndulation?, uomDistVer?, valCrc?, txtVerDatum?, Met?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual uomElev uomDistVer {
            get {
                XElement x = this.GetElement(uomDistVerXName);
                return ((uomElev)(x));
            }
            set {
                this.SetElement(uomDistVerXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Cyclic redundancy check
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (valAngleNml?, valAngleMnm?, valAngleSpan?, geoLat, geoLong, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, valElev?, valElevAccuracy?, valGeoidUndulation?, uomDistVer?, valCrc?, txtVerDatum?, Met?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual valHex valCrc {
            get {
                XElement x = this.GetElement(valCrcXName);
                return ((valHex)(x));
            }
            set {
                this.SetElement(valCrcXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Vertical Datum
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (valAngleNml?, valAngleMnm?, valAngleSpan?, geoLat, geoLong, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, valElev?, valElevAccuracy?, valGeoidUndulation?, uomDistVer?, valCrc?, txtVerDatum?, Met?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual txtDescr txtVerDatum {
            get {
                XElement x = this.GetElement(txtVerDatumXName);
                return ((txtDescr)(x));
            }
            set {
                this.SetElement(txtVerDatumXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// MLS Elevation is operating according to MLS elevation - Timetable
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (valAngleNml?, valAngleMnm?, valAngleSpan?, geoLat, geoLong, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, valElev?, valElevAccuracy?, valGeoidUndulation?, uomDistVer?, valCrc?, txtVerDatum?, Met?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual TimetableNavaidType Met {
            get {
                XElement x = this.GetElement(MetXName);
                return ((TimetableNavaidType)(x));
            }
            set {
                this.SetElement(MetXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Remark
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (valAngleNml?, valAngleMnm?, valAngleSpan?, geoLat, geoLong, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, valElev?, valElevAccuracy?, valGeoidUndulation?, uomDistVer?, valCrc?, txtVerDatum?, Met?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual txtRmk txtRmk {
            get {
                XElement x = this.GetElement(txtRmkXName);
                return ((txtRmk)(x));
            }
            set {
                this.SetElement(txtRmkXName, value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<MlsElevationType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(valAngleNmlXName, typeof(valAngle));
            localElementDictionary.Add(valAngleMnmXName, typeof(valAngle));
            localElementDictionary.Add(valAngleSpanXName, typeof(valAngle));
            localElementDictionary.Add(geoLatXName, typeof(geoLat));
            localElementDictionary.Add(geoLongXName, typeof(geoLong));
            localElementDictionary.Add(codeDatumXName, typeof(codeDatum));
            localElementDictionary.Add(valGeoAccuracyXName, typeof(valDistHorz));
            localElementDictionary.Add(uomGeoAccuracyXName, typeof(uomDistHorz));
            localElementDictionary.Add(valElevXName, typeof(valDistVer));
            localElementDictionary.Add(valElevAccuracyXName, typeof(valDistVer));
            localElementDictionary.Add(valGeoidUndulationXName, typeof(valDistVer));
            localElementDictionary.Add(uomDistVerXName, typeof(uomElev));
            localElementDictionary.Add(valCrcXName, typeof(valHex));
            localElementDictionary.Add(txtVerDatumXName, typeof(txtDescr));
            localElementDictionary.Add(MetXName, typeof(TimetableNavaidType));
            localElementDictionary.Add(txtRmkXName, typeof(txtRmk));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// MLS
    /// </para>
    /// <para>
    /// Regular expression: (MlsUid, DmeUid, codeId, codeCat, codeChannel, txtRmk?, Men, Mah+)
    /// </para>
    /// </summary>
    public partial class MlsType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName MlsUidXName = System.Xml.Linq.XName.Get("MlsUid", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName DmeUidXName = System.Xml.Linq.XName.Get("DmeUid", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName codeIdXName = System.Xml.Linq.XName.Get("codeId", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName codeCatXName = System.Xml.Linq.XName.Get("codeCat", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName codeChannelXName = System.Xml.Linq.XName.Get("codeChannel", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName txtRmkXName = System.Xml.Linq.XName.Get("txtRmk", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName MenXName = System.Xml.Linq.XName.Get("Men", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName MahXName = System.Xml.Linq.XName.Get("Mah", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<MlsAzimuthType> MahField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName sourceXName = System.Xml.Linq.XName.Get("source", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("MlsType", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator MlsType(XElement xe) { return XTypedServices.ToXTypedElement<MlsType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static MlsType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(MlsUidXName), new NamedContentModelEntity(DmeUidXName), new NamedContentModelEntity(codeIdXName), new NamedContentModelEntity(codeCatXName), new NamedContentModelEntity(codeChannelXName), new NamedContentModelEntity(txtRmkXName), new NamedContentModelEntity(MenXName), new NamedContentModelEntity(MahXName));
        }
        
        /// <summary>
        /// <para>
        /// MLS
        /// </para>
        /// <para>
        /// Regular expression: (MlsUid, DmeUid, codeId, codeCat, codeChannel, txtRmk?, Men, Mah+)
        /// </para>
        /// </summary>
        public MlsType() {
        }
        
        /// <summary>
        /// <para>
        /// a version of Microwave landing system [MLS]
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (MlsUid, DmeUid, codeId, codeCat, codeChannel, txtRmk?, Men, Mah+)
        /// </para>
        /// </summary>
        public virtual MlsUidType MlsUid {
            get {
                XElement x = this.GetElement(MlsUidXName);
                return ((MlsUidType)(x));
            }
            set {
                this.SetElement(MlsUidXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// MLS is having Distance measuring equipment [DME]
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (MlsUid, DmeUid, codeId, codeCat, codeChannel, txtRmk?, Men, Mah+)
        /// </para>
        /// </summary>
        public virtual DmeUidType DmeUid {
            get {
                XElement x = this.GetElement(DmeUidXName);
                return ((DmeUidType)(x));
            }
            set {
                this.SetElement(DmeUidXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Identification
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (MlsUid, DmeUid, codeId, codeCat, codeChannel, txtRmk?, Men, Mah+)
        /// </para>
        /// </summary>
        public virtual codeIdIlsMls codeId {
            get {
                XElement x = this.GetElement(codeIdXName);
                return ((codeIdIlsMls)(x));
            }
            set {
                this.SetElement(codeIdXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Category
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (MlsUid, DmeUid, codeId, codeCat, codeChannel, txtRmk?, Men, Mah+)
        /// </para>
        /// </summary>
        public virtual codeCatLdgAid codeCat {
            get {
                XElement x = this.GetElement(codeCatXName);
                return ((codeCatLdgAid)(x));
            }
            set {
                this.SetElement(codeCatXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Channel
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (MlsUid, DmeUid, codeId, codeCat, codeChannel, txtRmk?, Men, Mah+)
        /// </para>
        /// </summary>
        public virtual codeChannelMls codeChannel {
            get {
                XElement x = this.GetElement(codeChannelXName);
                return ((codeChannelMls)(x));
            }
            set {
                this.SetElement(codeChannelXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Remark
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (MlsUid, DmeUid, codeId, codeCat, codeChannel, txtRmk?, Men, Mah+)
        /// </para>
        /// </summary>
        public virtual txtRmk txtRmk {
            get {
                XElement x = this.GetElement(txtRmkXName);
                return ((txtRmk)(x));
            }
            set {
                this.SetElement(txtRmkXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// MLS is having MLS Elevation
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (MlsUid, DmeUid, codeId, codeCat, codeChannel, txtRmk?, Men, Mah+)
        /// </para>
        /// </summary>
        public virtual MlsElevationType Men {
            get {
                XElement x = this.GetElement(MenXName);
                return ((MlsElevationType)(x));
            }
            set {
                this.SetElement(MenXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// MLS is having MLS azimuth
        /// </para>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (MlsUid, DmeUid, codeId, codeCat, codeChannel, txtRmk?, Men, Mah+)
        /// </para>
        /// </summary>
        public virtual IList<MlsAzimuthType> Mah {
            get {
                if ((this.MahField == null)) {
                    this.MahField = new XTypedList<MlsAzimuthType>(this, LinqToXsdTypeManager.Instance, MahXName);
                }
                return this.MahField;
            }
            set {
                if ((value == null)) {
                    this.MahField = null;
                }
                else {
                    if ((this.MahField == null)) {
                        this.MahField = XTypedList<MlsAzimuthType>.Initialize(this, LinqToXsdTypeManager.Instance, value, MahXName);
                    }
                    else {
                        XTypedServices.SetList<MlsAzimuthType>(this.MahField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string source {
            get {
                XAttribute x = this.Attribute(sourceXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(sourceXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<MlsType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(MlsUidXName, typeof(MlsUidType));
            localElementDictionary.Add(DmeUidXName, typeof(DmeUidType));
            localElementDictionary.Add(codeIdXName, typeof(codeIdIlsMls));
            localElementDictionary.Add(codeCatXName, typeof(codeCatLdgAid));
            localElementDictionary.Add(codeChannelXName, typeof(codeChannelMls));
            localElementDictionary.Add(txtRmkXName, typeof(txtRmk));
            localElementDictionary.Add(MenXName, typeof(MlsElevationType));
            localElementDictionary.Add(MahXName, typeof(MlsAzimuthType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Microwave landing system [MLS] - UID
    /// </para>
    /// <para>
    /// Regular expression: ((RdnUid | FdnUid))
    /// </para>
    /// </summary>
    public partial class MlsUidType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName RdnUidXName = System.Xml.Linq.XName.Get("RdnUid", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName FdnUidXName = System.Xml.Linq.XName.Get("FdnUid", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName midXName = System.Xml.Linq.XName.Get("mid", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("MlsUidType", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator MlsUidType(XElement xe) { return XTypedServices.ToXTypedElement<MlsUidType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static MlsUidType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new ChoiceContentModelEntity(new NamedContentModelEntity(RdnUidXName), new NamedContentModelEntity(FdnUidXName)));
        }
        
        /// <summary>
        /// <para>
        /// Microwave landing system [MLS] - UID
        /// </para>
        /// <para>
        /// Regular expression: ((RdnUid | FdnUid))
        /// </para>
        /// </summary>
        public MlsUidType() {
        }
        
        /// <summary>
        /// <para>
        /// Microwave landing system [MLS] is associated with RWY direction
        /// </para>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((RdnUid | FdnUid))
        /// </para>
        /// </summary>
        public virtual RunwayDirectionUidType RdnUid {
            get {
                XElement x = this.GetElement(RdnUidXName);
                return ((RunwayDirectionUidType)(x));
            }
            set {
                this.SetElement(RdnUidXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Microwave landing system [MLS] is associated with Approach and take-off direction of a FATO
        /// </para>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((RdnUid | FdnUid))
        /// </para>
        /// </summary>
        public virtual FatoDirectionUidType FdnUid {
            get {
                XElement x = this.GetElement(FdnUidXName);
                return ((FatoDirectionUidType)(x));
            }
            set {
                this.SetElement(FdnUidXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string mid {
            get {
                XAttribute x = this.Attribute(midXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(midXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<MlsUidType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(RdnUidXName, typeof(RunwayDirectionUidType));
            localElementDictionary.Add(FdnUidXName, typeof(FatoDirectionUidType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// MSA group
    /// </para>
    /// <para>
    /// Regular expression: (MgpUid, codeTypeAngle, codeRefAngle?, txtRmk?, Msa+)
    /// </para>
    /// </summary>
    public partial class MsaGroupType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName MgpUidXName = System.Xml.Linq.XName.Get("MgpUid", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName codeTypeAngleXName = System.Xml.Linq.XName.Get("codeTypeAngle", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName codeRefAngleXName = System.Xml.Linq.XName.Get("codeRefAngle", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName txtRmkXName = System.Xml.Linq.XName.Get("txtRmk", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName MsaXName = System.Xml.Linq.XName.Get("Msa", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<MsaType> MsaField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName sourceXName = System.Xml.Linq.XName.Get("source", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("MsaGroupType", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator MsaGroupType(XElement xe) { return XTypedServices.ToXTypedElement<MsaGroupType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static MsaGroupType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(MgpUidXName), new NamedContentModelEntity(codeTypeAngleXName), new NamedContentModelEntity(codeRefAngleXName), new NamedContentModelEntity(txtRmkXName), new NamedContentModelEntity(MsaXName));
        }
        
        /// <summary>
        /// <para>
        /// MSA group
        /// </para>
        /// <para>
        /// Regular expression: (MgpUid, codeTypeAngle, codeRefAngle?, txtRmk?, Msa+)
        /// </para>
        /// </summary>
        public MsaGroupType() {
        }
        
        /// <summary>
        /// <para>
        /// a version of MSA group
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (MgpUid, codeTypeAngle, codeRefAngle?, txtRmk?, Msa+)
        /// </para>
        /// </summary>
        public virtual MsaGroupUidType MgpUid {
            get {
                XElement x = this.GetElement(MgpUidXName);
                return ((MsaGroupUidType)(x));
            }
            set {
                this.SetElement(MgpUidXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Angle type
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (MgpUid, codeTypeAngle, codeRefAngle?, txtRmk?, Msa+)
        /// </para>
        /// </summary>
        public virtual codeTypeAngleBrg codeTypeAngle {
            get {
                XElement x = this.GetElement(codeTypeAngleXName);
                return ((codeTypeAngleBrg)(x));
            }
            set {
                this.SetElement(codeTypeAngleXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Angle reference
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (MgpUid, codeTypeAngle, codeRefAngle?, txtRmk?, Msa+)
        /// </para>
        /// </summary>
        public virtual codeDirRef codeRefAngle {
            get {
                XElement x = this.GetElement(codeRefAngleXName);
                return ((codeDirRef)(x));
            }
            set {
                this.SetElement(codeRefAngleXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Remark
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (MgpUid, codeTypeAngle, codeRefAngle?, txtRmk?, Msa+)
        /// </para>
        /// </summary>
        public virtual txtRmk txtRmk {
            get {
                XElement x = this.GetElement(txtRmkXName);
                return ((txtRmk)(x));
            }
            set {
                this.SetElement(txtRmkXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// MSA group is composed of Minimum sector altitude [MSA]
        /// </para>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (MgpUid, codeTypeAngle, codeRefAngle?, txtRmk?, Msa+)
        /// </para>
        /// </summary>
        public virtual IList<MsaType> Msa {
            get {
                if ((this.MsaField == null)) {
                    this.MsaField = new XTypedList<MsaType>(this, LinqToXsdTypeManager.Instance, MsaXName);
                }
                return this.MsaField;
            }
            set {
                if ((value == null)) {
                    this.MsaField = null;
                }
                else {
                    if ((this.MsaField == null)) {
                        this.MsaField = XTypedList<MsaType>.Initialize(this, LinqToXsdTypeManager.Instance, value, MsaXName);
                    }
                    else {
                        XTypedServices.SetList<MsaType>(this.MsaField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string source {
            get {
                XAttribute x = this.Attribute(sourceXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(sourceXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<MsaGroupType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(MgpUidXName, typeof(MsaGroupUidType));
            localElementDictionary.Add(codeTypeAngleXName, typeof(codeTypeAngleBrg));
            localElementDictionary.Add(codeRefAngleXName, typeof(codeDirRef));
            localElementDictionary.Add(txtRmkXName, typeof(txtRmk));
            localElementDictionary.Add(MsaXName, typeof(MsaType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// MSA group - UID
    /// </para>
    /// <para>
    /// Regular expression: ((TcnUid | VorUid | DpnUid | NdbUid | DmeUid | MkrUid))
    /// </para>
    /// </summary>
    public partial class MsaGroupUidType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TcnUidXName = System.Xml.Linq.XName.Get("TcnUid", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName VorUidXName = System.Xml.Linq.XName.Get("VorUid", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName DpnUidXName = System.Xml.Linq.XName.Get("DpnUid", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName NdbUidXName = System.Xml.Linq.XName.Get("NdbUid", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName DmeUidXName = System.Xml.Linq.XName.Get("DmeUid", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName MkrUidXName = System.Xml.Linq.XName.Get("MkrUid", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName midXName = System.Xml.Linq.XName.Get("mid", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("MsaGroupUidType", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator MsaGroupUidType(XElement xe) { return XTypedServices.ToXTypedElement<MsaGroupUidType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static MsaGroupUidType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new ChoiceContentModelEntity(new NamedContentModelEntity(TcnUidXName), new NamedContentModelEntity(VorUidXName), new NamedContentModelEntity(DpnUidXName), new NamedContentModelEntity(NdbUidXName), new NamedContentModelEntity(DmeUidXName), new NamedContentModelEntity(MkrUidXName)));
        }
        
        /// <summary>
        /// <para>
        /// MSA group - UID
        /// </para>
        /// <para>
        /// Regular expression: ((TcnUid | VorUid | DpnUid | NdbUid | DmeUid | MkrUid))
        /// </para>
        /// </summary>
        public MsaGroupUidType() {
        }
        
        /// <summary>
        /// <para>
        /// Significant point is at Tactical air navigation beacon [TACAN]
        /// </para>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((TcnUid | VorUid | DpnUid | NdbUid | DmeUid | MkrUid))
        /// </para>
        /// </summary>
        public virtual TacanUidType TcnUid {
            get {
                XElement x = this.GetElement(TcnUidXName);
                return ((TacanUidType)(x));
            }
            set {
                this.SetElement(TcnUidXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Significant point is at VHF omnidirectional radio range beacon [VOR]
        /// </para>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((TcnUid | VorUid | DpnUid | NdbUid | DmeUid | MkrUid))
        /// </para>
        /// </summary>
        public virtual VorUidType VorUid {
            get {
                XElement x = this.GetElement(VorUidXName);
                return ((VorUidType)(x));
            }
            set {
                this.SetElement(VorUidXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Significant point is at Designated point
        /// </para>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((TcnUid | VorUid | DpnUid | NdbUid | DmeUid | MkrUid))
        /// </para>
        /// </summary>
        public virtual DesignatedPointUidType DpnUid {
            get {
                XElement x = this.GetElement(DpnUidXName);
                return ((DesignatedPointUidType)(x));
            }
            set {
                this.SetElement(DpnUidXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Significant point is at Non-directional radio beacon [NDB]
        /// </para>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((TcnUid | VorUid | DpnUid | NdbUid | DmeUid | MkrUid))
        /// </para>
        /// </summary>
        public virtual NdbUidType NdbUid {
            get {
                XElement x = this.GetElement(NdbUidXName);
                return ((NdbUidType)(x));
            }
            set {
                this.SetElement(NdbUidXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Significant point is at Distance measuring equipment [DME]
        /// </para>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((TcnUid | VorUid | DpnUid | NdbUid | DmeUid | MkrUid))
        /// </para>
        /// </summary>
        public virtual DmeUidType DmeUid {
            get {
                XElement x = this.GetElement(DmeUidXName);
                return ((DmeUidType)(x));
            }
            set {
                this.SetElement(DmeUidXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Significant point is at Marker [MKR]
        /// </para>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((TcnUid | VorUid | DpnUid | NdbUid | DmeUid | MkrUid))
        /// </para>
        /// </summary>
        public virtual MkrUidType MkrUid {
            get {
                XElement x = this.GetElement(MkrUidXName);
                return ((MkrUidType)(x));
            }
            set {
                this.SetElement(MkrUidXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string mid {
            get {
                XAttribute x = this.Attribute(midXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(midXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<MsaGroupUidType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(TcnUidXName, typeof(TacanUidType));
            localElementDictionary.Add(VorUidXName, typeof(VorUidType));
            localElementDictionary.Add(DpnUidXName, typeof(DesignatedPointUidType));
            localElementDictionary.Add(NdbUidXName, typeof(NdbUidType));
            localElementDictionary.Add(DmeUidXName, typeof(DmeUidType));
            localElementDictionary.Add(MkrUidXName, typeof(MkrUidType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Minimum sector altitude [MSA]
    /// </para>
    /// <para>
    /// Regular expression: (valAngleFm, valAngleTo, valDistOuter, valDistInner?, uomDistHorz, valDistVer, uomDistVer, codeDistVer, txtRmk?)
    /// </para>
    /// </summary>
    public partial class MsaType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName valAngleFmXName = System.Xml.Linq.XName.Get("valAngleFm", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName valAngleToXName = System.Xml.Linq.XName.Get("valAngleTo", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName valDistOuterXName = System.Xml.Linq.XName.Get("valDistOuter", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName valDistInnerXName = System.Xml.Linq.XName.Get("valDistInner", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName uomDistHorzXName = System.Xml.Linq.XName.Get("uomDistHorz", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName valDistVerXName = System.Xml.Linq.XName.Get("valDistVer", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName uomDistVerXName = System.Xml.Linq.XName.Get("uomDistVer", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName codeDistVerXName = System.Xml.Linq.XName.Get("codeDistVer", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName txtRmkXName = System.Xml.Linq.XName.Get("txtRmk", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("MsaType", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator MsaType(XElement xe) { return XTypedServices.ToXTypedElement<MsaType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static MsaType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(valAngleFmXName), new NamedContentModelEntity(valAngleToXName), new NamedContentModelEntity(valDistOuterXName), new NamedContentModelEntity(valDistInnerXName), new NamedContentModelEntity(uomDistHorzXName), new NamedContentModelEntity(valDistVerXName), new NamedContentModelEntity(uomDistVerXName), new NamedContentModelEntity(codeDistVerXName), new NamedContentModelEntity(txtRmkXName));
        }
        
        /// <summary>
        /// <para>
        /// Minimum sector altitude [MSA]
        /// </para>
        /// <para>
        /// Regular expression: (valAngleFm, valAngleTo, valDistOuter, valDistInner?, uomDistHorz, valDistVer, uomDistVer, codeDistVer, txtRmk?)
        /// </para>
        /// </summary>
        public MsaType() {
        }
        
        /// <summary>
        /// <para>
        /// Beginning of angle
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (valAngleFm, valAngleTo, valDistOuter, valDistInner?, uomDistHorz, valDistVer, uomDistVer, codeDistVer, txtRmk?)
        /// </para>
        /// </summary>
        public virtual valAngleBrg valAngleFm {
            get {
                XElement x = this.GetElement(valAngleFmXName);
                return ((valAngleBrg)(x));
            }
            set {
                this.SetElement(valAngleFmXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Ending of angle
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (valAngleFm, valAngleTo, valDistOuter, valDistInner?, uomDistHorz, valDistVer, uomDistVer, codeDistVer, txtRmk?)
        /// </para>
        /// </summary>
        public virtual valAngleBrg valAngleTo {
            get {
                XElement x = this.GetElement(valAngleToXName);
                return ((valAngleBrg)(x));
            }
            set {
                this.SetElement(valAngleToXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Angle sector volume outer limit
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (valAngleFm, valAngleTo, valDistOuter, valDistInner?, uomDistHorz, valDistVer, uomDistVer, codeDistVer, txtRmk?)
        /// </para>
        /// </summary>
        public virtual valDistHorz valDistOuter {
            get {
                XElement x = this.GetElement(valDistOuterXName);
                return ((valDistHorz)(x));
            }
            set {
                this.SetElement(valDistOuterXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Angle sector volume inner limit
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (valAngleFm, valAngleTo, valDistOuter, valDistInner?, uomDistHorz, valDistVer, uomDistVer, codeDistVer, txtRmk?)
        /// </para>
        /// </summary>
        public virtual valDistHorz valDistInner {
            get {
                XElement x = this.GetElement(valDistInnerXName);
                return ((valDistHorz)(x));
            }
            set {
                this.SetElement(valDistInnerXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Unit of measurement [horizontal distance]
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (valAngleFm, valAngleTo, valDistOuter, valDistInner?, uomDistHorz, valDistVer, uomDistVer, codeDistVer, txtRmk?)
        /// </para>
        /// </summary>
        public virtual uomDistHorz uomDistHorz {
            get {
                XElement x = this.GetElement(uomDistHorzXName);
                return ((uomDistHorz)(x));
            }
            set {
                this.SetElement(uomDistHorzXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Minimum sector altitude
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (valAngleFm, valAngleTo, valDistOuter, valDistInner?, uomDistHorz, valDistVer, uomDistVer, codeDistVer, txtRmk?)
        /// </para>
        /// </summary>
        public virtual valDistVer valDistVer {
            get {
                XElement x = this.GetElement(valDistVerXName);
                return ((valDistVer)(x));
            }
            set {
                this.SetElement(valDistVerXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Unit of measurement [vertical distance]
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (valAngleFm, valAngleTo, valDistOuter, valDistInner?, uomDistHorz, valDistVer, uomDistVer, codeDistVer, txtRmk?)
        /// </para>
        /// </summary>
        public virtual uomDistVer uomDistVer {
            get {
                XElement x = this.GetElement(uomDistVerXName);
                return ((uomDistVer)(x));
            }
            set {
                this.SetElement(uomDistVerXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Reference for the vertical distance
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (valAngleFm, valAngleTo, valDistOuter, valDistInner?, uomDistHorz, valDistVer, uomDistVer, codeDistVer, txtRmk?)
        /// </para>
        /// </summary>
        public virtual codeDistVer codeDistVer {
            get {
                XElement x = this.GetElement(codeDistVerXName);
                return ((codeDistVer)(x));
            }
            set {
                this.SetElement(codeDistVerXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Remark
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (valAngleFm, valAngleTo, valDistOuter, valDistInner?, uomDistHorz, valDistVer, uomDistVer, codeDistVer, txtRmk?)
        /// </para>
        /// </summary>
        public virtual txtRmk txtRmk {
            get {
                XElement x = this.GetElement(txtRmkXName);
                return ((txtRmk)(x));
            }
            set {
                this.SetElement(txtRmkXName, value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<MsaType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(valAngleFmXName, typeof(valAngleBrg));
            localElementDictionary.Add(valAngleToXName, typeof(valAngleBrg));
            localElementDictionary.Add(valDistOuterXName, typeof(valDistHorz));
            localElementDictionary.Add(valDistInnerXName, typeof(valDistHorz));
            localElementDictionary.Add(uomDistHorzXName, typeof(uomDistHorz));
            localElementDictionary.Add(valDistVerXName, typeof(valDistVer));
            localElementDictionary.Add(uomDistVerXName, typeof(uomDistVer));
            localElementDictionary.Add(codeDistVerXName, typeof(codeDistVer));
            localElementDictionary.Add(txtRmkXName, typeof(txtRmk));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Navaid - Angular reference
    /// </para>
    /// <para>
    /// Regular expression: (AinUid, valAngleBrg, txtRmk?)
    /// </para>
    /// </summary>
    public partial class NavaidAngularReferenceType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName AinUidXName = System.Xml.Linq.XName.Get("AinUid", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName valAngleBrgXName = System.Xml.Linq.XName.Get("valAngleBrg", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName txtRmkXName = System.Xml.Linq.XName.Get("txtRmk", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName sourceXName = System.Xml.Linq.XName.Get("source", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("NavaidAngularReferenceType", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator NavaidAngularReferenceType(XElement xe) { return XTypedServices.ToXTypedElement<NavaidAngularReferenceType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static NavaidAngularReferenceType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(AinUidXName), new NamedContentModelEntity(valAngleBrgXName), new NamedContentModelEntity(txtRmkXName));
        }
        
        /// <summary>
        /// <para>
        /// Navaid - Angular reference
        /// </para>
        /// <para>
        /// Regular expression: (AinUid, valAngleBrg, txtRmk?)
        /// </para>
        /// </summary>
        public NavaidAngularReferenceType() {
        }
        
        /// <summary>
        /// <para>
        /// a version of Navaid - Angular reference
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (AinUid, valAngleBrg, txtRmk?)
        /// </para>
        /// </summary>
        public virtual NavaidAngularReferenceUidType AinUid {
            get {
                XElement x = this.GetElement(AinUidXName);
                return ((NavaidAngularReferenceUidType)(x));
            }
            set {
                this.SetElement(AinUidXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Bearing indication
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (AinUid, valAngleBrg, txtRmk?)
        /// </para>
        /// </summary>
        public virtual valAngleBrg valAngleBrg {
            get {
                XElement x = this.GetElement(valAngleBrgXName);
                return ((valAngleBrg)(x));
            }
            set {
                this.SetElement(valAngleBrgXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Remark
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (AinUid, valAngleBrg, txtRmk?)
        /// </para>
        /// </summary>
        public virtual txtRmk txtRmk {
            get {
                XElement x = this.GetElement(txtRmkXName);
                return ((txtRmk)(x));
            }
            set {
                this.SetElement(txtRmkXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string source {
            get {
                XAttribute x = this.Attribute(sourceXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(sourceXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<NavaidAngularReferenceType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(AinUidXName, typeof(NavaidAngularReferenceUidType));
            localElementDictionary.Add(valAngleBrgXName, typeof(valAngleBrg));
            localElementDictionary.Add(txtRmkXName, typeof(txtRmk));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Navaid - Angular reference - UID
    /// </para>
    /// <para>
    /// Regular expression: ((TcnUidSpn | VorUidSpn | DpnUidSpn | NdbUidSpn | DmeUidSpn | MkrUidSpn | NscUid), (VorUid | NdbUid | TcnUid))
    /// </para>
    /// </summary>
    public partial class NavaidAngularReferenceUidType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TcnUidSpnXName = System.Xml.Linq.XName.Get("TcnUidSpn", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName VorUidSpnXName = System.Xml.Linq.XName.Get("VorUidSpn", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName DpnUidSpnXName = System.Xml.Linq.XName.Get("DpnUidSpn", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName NdbUidSpnXName = System.Xml.Linq.XName.Get("NdbUidSpn", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName DmeUidSpnXName = System.Xml.Linq.XName.Get("DmeUidSpn", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName MkrUidSpnXName = System.Xml.Linq.XName.Get("MkrUidSpn", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName NscUidXName = System.Xml.Linq.XName.Get("NscUid", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName VorUidXName = System.Xml.Linq.XName.Get("VorUid", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName NdbUidXName = System.Xml.Linq.XName.Get("NdbUid", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TcnUidXName = System.Xml.Linq.XName.Get("TcnUid", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName midXName = System.Xml.Linq.XName.Get("mid", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("NavaidAngularReferenceUidType", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator NavaidAngularReferenceUidType(XElement xe) { return XTypedServices.ToXTypedElement<NavaidAngularReferenceUidType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static NavaidAngularReferenceUidType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new ChoiceContentModelEntity(new NamedContentModelEntity(TcnUidSpnXName), new NamedContentModelEntity(VorUidSpnXName), new NamedContentModelEntity(DpnUidSpnXName), new NamedContentModelEntity(NdbUidSpnXName), new NamedContentModelEntity(DmeUidSpnXName), new NamedContentModelEntity(MkrUidSpnXName), new NamedContentModelEntity(NscUidXName)), new ChoiceContentModelEntity(new NamedContentModelEntity(VorUidXName), new NamedContentModelEntity(NdbUidXName), new NamedContentModelEntity(TcnUidXName)));
        }
        
        /// <summary>
        /// <para>
        /// Navaid - Angular reference - UID
        /// </para>
        /// <para>
        /// Regular expression: ((TcnUidSpn | VorUidSpn | DpnUidSpn | NdbUidSpn | DmeUidSpn | MkrUidSpn | NscUid), (VorUid | NdbUid | TcnUid))
        /// </para>
        /// </summary>
        public NavaidAngularReferenceUidType() {
        }
        
        /// <summary>
        /// <para>
        /// Significant point is at Tactical air navigation beacon [TACAN]
        /// </para>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((TcnUidSpn | VorUidSpn | DpnUidSpn | NdbUidSpn | DmeUidSpn | MkrUidSpn | NscUid), (VorUid | NdbUid | TcnUid))
        /// </para>
        /// </summary>
        public virtual TacanUidType TcnUidSpn {
            get {
                XElement x = this.GetElement(TcnUidSpnXName);
                return ((TacanUidType)(x));
            }
            set {
                this.SetElement(TcnUidSpnXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Significant point is at VHF omnidirectional radio range beacon [VOR]
        /// </para>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((TcnUidSpn | VorUidSpn | DpnUidSpn | NdbUidSpn | DmeUidSpn | MkrUidSpn | NscUid), (VorUid | NdbUid | TcnUid))
        /// </para>
        /// </summary>
        public virtual VorUidType VorUidSpn {
            get {
                XElement x = this.GetElement(VorUidSpnXName);
                return ((VorUidType)(x));
            }
            set {
                this.SetElement(VorUidSpnXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Significant point is at Designated point
        /// </para>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((TcnUidSpn | VorUidSpn | DpnUidSpn | NdbUidSpn | DmeUidSpn | MkrUidSpn | NscUid), (VorUid | NdbUid | TcnUid))
        /// </para>
        /// </summary>
        public virtual DesignatedPointUidType DpnUidSpn {
            get {
                XElement x = this.GetElement(DpnUidSpnXName);
                return ((DesignatedPointUidType)(x));
            }
            set {
                this.SetElement(DpnUidSpnXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Significant point is at Non-directional radio beacon [NDB]
        /// </para>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((TcnUidSpn | VorUidSpn | DpnUidSpn | NdbUidSpn | DmeUidSpn | MkrUidSpn | NscUid), (VorUid | NdbUid | TcnUid))
        /// </para>
        /// </summary>
        public virtual NdbUidType NdbUidSpn {
            get {
                XElement x = this.GetElement(NdbUidSpnXName);
                return ((NdbUidType)(x));
            }
            set {
                this.SetElement(NdbUidSpnXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Significant point is at Distance measuring equipment [DME]
        /// </para>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((TcnUidSpn | VorUidSpn | DpnUidSpn | NdbUidSpn | DmeUidSpn | MkrUidSpn | NscUid), (VorUid | NdbUid | TcnUid))
        /// </para>
        /// </summary>
        public virtual DmeUidType DmeUidSpn {
            get {
                XElement x = this.GetElement(DmeUidSpnXName);
                return ((DmeUidType)(x));
            }
            set {
                this.SetElement(DmeUidSpnXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Significant point is at Marker [MKR]
        /// </para>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((TcnUidSpn | VorUidSpn | DpnUidSpn | NdbUidSpn | DmeUidSpn | MkrUidSpn | NscUid), (VorUid | NdbUid | TcnUid))
        /// </para>
        /// </summary>
        public virtual MkrUidType MkrUidSpn {
            get {
                XElement x = this.GetElement(MkrUidSpnXName);
                return ((MkrUidType)(x));
            }
            set {
                this.SetElement(MkrUidSpnXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Navaid - Angular reference is referring to Checkpoint
        /// </para>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((TcnUidSpn | VorUidSpn | DpnUidSpn | NdbUidSpn | DmeUidSpn | MkrUidSpn | NscUid), (VorUid | NdbUid | TcnUid))
        /// </para>
        /// </summary>
        public virtual CheckpointUidType NscUid {
            get {
                XElement x = this.GetElement(NscUidXName);
                return ((CheckpointUidType)(x));
            }
            set {
                this.SetElement(NscUidXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Navaid - Angular reference is using VHF omnidirectional radio range beacon [VOR]
        /// </para>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((TcnUidSpn | VorUidSpn | DpnUidSpn | NdbUidSpn | DmeUidSpn | MkrUidSpn | NscUid), (VorUid | NdbUid | TcnUid))
        /// </para>
        /// </summary>
        public virtual VorUidType VorUid {
            get {
                XElement x = this.GetElement(VorUidXName);
                return ((VorUidType)(x));
            }
            set {
                this.SetElement(VorUidXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Navaid - Angular reference is using Non-directional radio beacon [NDB]
        /// </para>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((TcnUidSpn | VorUidSpn | DpnUidSpn | NdbUidSpn | DmeUidSpn | MkrUidSpn | NscUid), (VorUid | NdbUid | TcnUid))
        /// </para>
        /// </summary>
        public virtual NdbUidType NdbUid {
            get {
                XElement x = this.GetElement(NdbUidXName);
                return ((NdbUidType)(x));
            }
            set {
                this.SetElement(NdbUidXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Navaid - Angular reference is using Tactical air navigation beacon [TACAN]
        /// </para>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((TcnUidSpn | VorUidSpn | DpnUidSpn | NdbUidSpn | DmeUidSpn | MkrUidSpn | NscUid), (VorUid | NdbUid | TcnUid))
        /// </para>
        /// </summary>
        public virtual TacanUidType TcnUid {
            get {
                XElement x = this.GetElement(TcnUidXName);
                return ((TacanUidType)(x));
            }
            set {
                this.SetElement(TcnUidXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string mid {
            get {
                XAttribute x = this.Attribute(midXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(midXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<NavaidAngularReferenceUidType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(TcnUidSpnXName, typeof(TacanUidType));
            localElementDictionary.Add(VorUidSpnXName, typeof(VorUidType));
            localElementDictionary.Add(DpnUidSpnXName, typeof(DesignatedPointUidType));
            localElementDictionary.Add(NdbUidSpnXName, typeof(NdbUidType));
            localElementDictionary.Add(DmeUidSpnXName, typeof(DmeUidType));
            localElementDictionary.Add(MkrUidSpnXName, typeof(MkrUidType));
            localElementDictionary.Add(NscUidXName, typeof(CheckpointUidType));
            localElementDictionary.Add(VorUidXName, typeof(VorUidType));
            localElementDictionary.Add(NdbUidXName, typeof(NdbUidType));
            localElementDictionary.Add(TcnUidXName, typeof(TacanUidType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Navaid - Distance indication
    /// </para>
    /// <para>
    /// Regular expression: (DinUid, valDist, uomDist, txtRmk?)
    /// </para>
    /// </summary>
    public partial class NavaidDistanceIndicationType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName DinUidXName = System.Xml.Linq.XName.Get("DinUid", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName valDistXName = System.Xml.Linq.XName.Get("valDist", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName uomDistXName = System.Xml.Linq.XName.Get("uomDist", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName txtRmkXName = System.Xml.Linq.XName.Get("txtRmk", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName sourceXName = System.Xml.Linq.XName.Get("source", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("NavaidDistanceIndicationType", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator NavaidDistanceIndicationType(XElement xe) { return XTypedServices.ToXTypedElement<NavaidDistanceIndicationType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static NavaidDistanceIndicationType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(DinUidXName), new NamedContentModelEntity(valDistXName), new NamedContentModelEntity(uomDistXName), new NamedContentModelEntity(txtRmkXName));
        }
        
        /// <summary>
        /// <para>
        /// Navaid - Distance indication
        /// </para>
        /// <para>
        /// Regular expression: (DinUid, valDist, uomDist, txtRmk?)
        /// </para>
        /// </summary>
        public NavaidDistanceIndicationType() {
        }
        
        /// <summary>
        /// <para>
        /// a version of Navaid - Distance indication
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (DinUid, valDist, uomDist, txtRmk?)
        /// </para>
        /// </summary>
        public virtual NavaidDistanceIndicationUidType DinUid {
            get {
                XElement x = this.GetElement(DinUidXName);
                return ((NavaidDistanceIndicationUidType)(x));
            }
            set {
                this.SetElement(DinUidXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Declared distance
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (DinUid, valDist, uomDist, txtRmk?)
        /// </para>
        /// </summary>
        public virtual valDistHorz valDist {
            get {
                XElement x = this.GetElement(valDistXName);
                return ((valDistHorz)(x));
            }
            set {
                this.SetElement(valDistXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Unit of measurement [horizontal distance]
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (DinUid, valDist, uomDist, txtRmk?)
        /// </para>
        /// </summary>
        public virtual uomDistHorz uomDist {
            get {
                XElement x = this.GetElement(uomDistXName);
                return ((uomDistHorz)(x));
            }
            set {
                this.SetElement(uomDistXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Remark
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (DinUid, valDist, uomDist, txtRmk?)
        /// </para>
        /// </summary>
        public virtual txtRmk txtRmk {
            get {
                XElement x = this.GetElement(txtRmkXName);
                return ((txtRmk)(x));
            }
            set {
                this.SetElement(txtRmkXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string source {
            get {
                XAttribute x = this.Attribute(sourceXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(sourceXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<NavaidDistanceIndicationType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(DinUidXName, typeof(NavaidDistanceIndicationUidType));
            localElementDictionary.Add(valDistXName, typeof(valDistHorz));
            localElementDictionary.Add(uomDistXName, typeof(uomDistHorz));
            localElementDictionary.Add(txtRmkXName, typeof(txtRmk));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Navaid - Distance indication - UID
    /// </para>
    /// <para>
    /// Regular expression: ((TcnUidSpn | VorUidSpn | DpnUidSpn | NdbUidSpn | DmeUidSpn | MkrUidSpn | NscUid), (TcnUid | DmeUid))
    /// </para>
    /// </summary>
    public partial class NavaidDistanceIndicationUidType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TcnUidSpnXName = System.Xml.Linq.XName.Get("TcnUidSpn", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName VorUidSpnXName = System.Xml.Linq.XName.Get("VorUidSpn", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName DpnUidSpnXName = System.Xml.Linq.XName.Get("DpnUidSpn", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName NdbUidSpnXName = System.Xml.Linq.XName.Get("NdbUidSpn", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName DmeUidSpnXName = System.Xml.Linq.XName.Get("DmeUidSpn", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName MkrUidSpnXName = System.Xml.Linq.XName.Get("MkrUidSpn", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName NscUidXName = System.Xml.Linq.XName.Get("NscUid", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TcnUidXName = System.Xml.Linq.XName.Get("TcnUid", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName DmeUidXName = System.Xml.Linq.XName.Get("DmeUid", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName midXName = System.Xml.Linq.XName.Get("mid", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("NavaidDistanceIndicationUidType", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator NavaidDistanceIndicationUidType(XElement xe) { return XTypedServices.ToXTypedElement<NavaidDistanceIndicationUidType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static NavaidDistanceIndicationUidType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new ChoiceContentModelEntity(new NamedContentModelEntity(TcnUidSpnXName), new NamedContentModelEntity(VorUidSpnXName), new NamedContentModelEntity(DpnUidSpnXName), new NamedContentModelEntity(NdbUidSpnXName), new NamedContentModelEntity(DmeUidSpnXName), new NamedContentModelEntity(MkrUidSpnXName), new NamedContentModelEntity(NscUidXName)), new ChoiceContentModelEntity(new NamedContentModelEntity(TcnUidXName), new NamedContentModelEntity(DmeUidXName)));
        }
        
        /// <summary>
        /// <para>
        /// Navaid - Distance indication - UID
        /// </para>
        /// <para>
        /// Regular expression: ((TcnUidSpn | VorUidSpn | DpnUidSpn | NdbUidSpn | DmeUidSpn | MkrUidSpn | NscUid), (TcnUid | DmeUid))
        /// </para>
        /// </summary>
        public NavaidDistanceIndicationUidType() {
        }
        
        /// <summary>
        /// <para>
        /// Significant point is at Tactical air navigation beacon [TACAN]
        /// </para>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((TcnUidSpn | VorUidSpn | DpnUidSpn | NdbUidSpn | DmeUidSpn | MkrUidSpn | NscUid), (TcnUid | DmeUid))
        /// </para>
        /// </summary>
        public virtual TacanUidType TcnUidSpn {
            get {
                XElement x = this.GetElement(TcnUidSpnXName);
                return ((TacanUidType)(x));
            }
            set {
                this.SetElement(TcnUidSpnXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Significant point is at VHF omnidirectional radio range beacon [VOR]
        /// </para>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((TcnUidSpn | VorUidSpn | DpnUidSpn | NdbUidSpn | DmeUidSpn | MkrUidSpn | NscUid), (TcnUid | DmeUid))
        /// </para>
        /// </summary>
        public virtual VorUidType VorUidSpn {
            get {
                XElement x = this.GetElement(VorUidSpnXName);
                return ((VorUidType)(x));
            }
            set {
                this.SetElement(VorUidSpnXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Significant point is at Designated point
        /// </para>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((TcnUidSpn | VorUidSpn | DpnUidSpn | NdbUidSpn | DmeUidSpn | MkrUidSpn | NscUid), (TcnUid | DmeUid))
        /// </para>
        /// </summary>
        public virtual DesignatedPointUidType DpnUidSpn {
            get {
                XElement x = this.GetElement(DpnUidSpnXName);
                return ((DesignatedPointUidType)(x));
            }
            set {
                this.SetElement(DpnUidSpnXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Significant point is at Non-directional radio beacon [NDB]
        /// </para>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((TcnUidSpn | VorUidSpn | DpnUidSpn | NdbUidSpn | DmeUidSpn | MkrUidSpn | NscUid), (TcnUid | DmeUid))
        /// </para>
        /// </summary>
        public virtual NdbUidType NdbUidSpn {
            get {
                XElement x = this.GetElement(NdbUidSpnXName);
                return ((NdbUidType)(x));
            }
            set {
                this.SetElement(NdbUidSpnXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Significant point is at Distance measuring equipment [DME]
        /// </para>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((TcnUidSpn | VorUidSpn | DpnUidSpn | NdbUidSpn | DmeUidSpn | MkrUidSpn | NscUid), (TcnUid | DmeUid))
        /// </para>
        /// </summary>
        public virtual DmeUidType DmeUidSpn {
            get {
                XElement x = this.GetElement(DmeUidSpnXName);
                return ((DmeUidType)(x));
            }
            set {
                this.SetElement(DmeUidSpnXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Significant point is at Marker [MKR]
        /// </para>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((TcnUidSpn | VorUidSpn | DpnUidSpn | NdbUidSpn | DmeUidSpn | MkrUidSpn | NscUid), (TcnUid | DmeUid))
        /// </para>
        /// </summary>
        public virtual MkrUidType MkrUidSpn {
            get {
                XElement x = this.GetElement(MkrUidSpnXName);
                return ((MkrUidType)(x));
            }
            set {
                this.SetElement(MkrUidSpnXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Navaid - Distance indication is referring to Checkpoint
        /// </para>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((TcnUidSpn | VorUidSpn | DpnUidSpn | NdbUidSpn | DmeUidSpn | MkrUidSpn | NscUid), (TcnUid | DmeUid))
        /// </para>
        /// </summary>
        public virtual CheckpointUidType NscUid {
            get {
                XElement x = this.GetElement(NscUidXName);
                return ((CheckpointUidType)(x));
            }
            set {
                this.SetElement(NscUidXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Navaid - Distance indication is using Tactical air navigation beacon [TACAN]
        /// </para>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((TcnUidSpn | VorUidSpn | DpnUidSpn | NdbUidSpn | DmeUidSpn | MkrUidSpn | NscUid), (TcnUid | DmeUid))
        /// </para>
        /// </summary>
        public virtual TacanUidType TcnUid {
            get {
                XElement x = this.GetElement(TcnUidXName);
                return ((TacanUidType)(x));
            }
            set {
                this.SetElement(TcnUidXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Navaid - Distance indication is using Distance measuring equipment [DME]
        /// </para>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((TcnUidSpn | VorUidSpn | DpnUidSpn | NdbUidSpn | DmeUidSpn | MkrUidSpn | NscUid), (TcnUid | DmeUid))
        /// </para>
        /// </summary>
        public virtual DmeUidType DmeUid {
            get {
                XElement x = this.GetElement(DmeUidXName);
                return ((DmeUidType)(x));
            }
            set {
                this.SetElement(DmeUidXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string mid {
            get {
                XAttribute x = this.Attribute(midXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(midXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<NavaidDistanceIndicationUidType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(TcnUidSpnXName, typeof(TacanUidType));
            localElementDictionary.Add(VorUidSpnXName, typeof(VorUidType));
            localElementDictionary.Add(DpnUidSpnXName, typeof(DesignatedPointUidType));
            localElementDictionary.Add(NdbUidSpnXName, typeof(NdbUidType));
            localElementDictionary.Add(DmeUidSpnXName, typeof(DmeUidType));
            localElementDictionary.Add(MkrUidSpnXName, typeof(MkrUidType));
            localElementDictionary.Add(NscUidXName, typeof(CheckpointUidType));
            localElementDictionary.Add(TcnUidXName, typeof(TacanUidType));
            localElementDictionary.Add(DmeUidXName, typeof(DmeUidType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Navaid Limitation
    /// </para>
    /// <para>
    /// Regular expression: (valAngleFm, valAngleTo, valDistOuter?, valDistInner?, uomDistHorz?, valDistVerUpper?, uomDistVerUpper?, codeDistVerUpper?, valDistVerLower?, uomDistVerLower?, codeDistVerLower?, valAngleScallop?, txtRmk?)
    /// </para>
    /// </summary>
    public partial class NavaidLimitationType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName valAngleFmXName = System.Xml.Linq.XName.Get("valAngleFm", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName valAngleToXName = System.Xml.Linq.XName.Get("valAngleTo", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName valDistOuterXName = System.Xml.Linq.XName.Get("valDistOuter", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName valDistInnerXName = System.Xml.Linq.XName.Get("valDistInner", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName uomDistHorzXName = System.Xml.Linq.XName.Get("uomDistHorz", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName valDistVerUpperXName = System.Xml.Linq.XName.Get("valDistVerUpper", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName uomDistVerUpperXName = System.Xml.Linq.XName.Get("uomDistVerUpper", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName codeDistVerUpperXName = System.Xml.Linq.XName.Get("codeDistVerUpper", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName valDistVerLowerXName = System.Xml.Linq.XName.Get("valDistVerLower", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName uomDistVerLowerXName = System.Xml.Linq.XName.Get("uomDistVerLower", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName codeDistVerLowerXName = System.Xml.Linq.XName.Get("codeDistVerLower", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName valAngleScallopXName = System.Xml.Linq.XName.Get("valAngleScallop", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName txtRmkXName = System.Xml.Linq.XName.Get("txtRmk", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("NavaidLimitationType", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator NavaidLimitationType(XElement xe) { return XTypedServices.ToXTypedElement<NavaidLimitationType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static NavaidLimitationType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(valAngleFmXName), new NamedContentModelEntity(valAngleToXName), new NamedContentModelEntity(valDistOuterXName), new NamedContentModelEntity(valDistInnerXName), new NamedContentModelEntity(uomDistHorzXName), new NamedContentModelEntity(valDistVerUpperXName), new NamedContentModelEntity(uomDistVerUpperXName), new NamedContentModelEntity(codeDistVerUpperXName), new NamedContentModelEntity(valDistVerLowerXName), new NamedContentModelEntity(uomDistVerLowerXName), new NamedContentModelEntity(codeDistVerLowerXName), new NamedContentModelEntity(valAngleScallopXName), new NamedContentModelEntity(txtRmkXName));
        }
        
        /// <summary>
        /// <para>
        /// Navaid Limitation
        /// </para>
        /// <para>
        /// Regular expression: (valAngleFm, valAngleTo, valDistOuter?, valDistInner?, uomDistHorz?, valDistVerUpper?, uomDistVerUpper?, codeDistVerUpper?, valDistVerLower?, uomDistVerLower?, codeDistVerLower?, valAngleScallop?, txtRmk?)
        /// </para>
        /// </summary>
        public NavaidLimitationType() {
        }
        
        /// <summary>
        /// <para>
        /// From bearing
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (valAngleFm, valAngleTo, valDistOuter?, valDistInner?, uomDistHorz?, valDistVerUpper?, uomDistVerUpper?, codeDistVerUpper?, valDistVerLower?, uomDistVerLower?, codeDistVerLower?, valAngleScallop?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual valAngleBrg valAngleFm {
            get {
                XElement x = this.GetElement(valAngleFmXName);
                return ((valAngleBrg)(x));
            }
            set {
                this.SetElement(valAngleFmXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// To bearing
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (valAngleFm, valAngleTo, valDistOuter?, valDistInner?, uomDistHorz?, valDistVerUpper?, uomDistVerUpper?, codeDistVerUpper?, valDistVerLower?, uomDistVerLower?, codeDistVerLower?, valAngleScallop?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual valAngleBrg valAngleTo {
            get {
                XElement x = this.GetElement(valAngleToXName);
                return ((valAngleBrg)(x));
            }
            set {
                this.SetElement(valAngleToXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Outer limit
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (valAngleFm, valAngleTo, valDistOuter?, valDistInner?, uomDistHorz?, valDistVerUpper?, uomDistVerUpper?, codeDistVerUpper?, valDistVerLower?, uomDistVerLower?, codeDistVerLower?, valAngleScallop?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual valDistHorz valDistOuter {
            get {
                XElement x = this.GetElement(valDistOuterXName);
                return ((valDistHorz)(x));
            }
            set {
                this.SetElement(valDistOuterXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Inner limit
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (valAngleFm, valAngleTo, valDistOuter?, valDistInner?, uomDistHorz?, valDistVerUpper?, uomDistVerUpper?, codeDistVerUpper?, valDistVerLower?, uomDistVerLower?, codeDistVerLower?, valAngleScallop?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual valDistHorz valDistInner {
            get {
                XElement x = this.GetElement(valDistInnerXName);
                return ((valDistHorz)(x));
            }
            set {
                this.SetElement(valDistInnerXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Unit of measurement
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (valAngleFm, valAngleTo, valDistOuter?, valDistInner?, uomDistHorz?, valDistVerUpper?, uomDistVerUpper?, codeDistVerUpper?, valDistVerLower?, uomDistVerLower?, codeDistVerLower?, valAngleScallop?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual uomDistHorz uomDistHorz {
            get {
                XElement x = this.GetElement(uomDistHorzXName);
                return ((uomDistHorz)(x));
            }
            set {
                this.SetElement(uomDistHorzXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Upper limit
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (valAngleFm, valAngleTo, valDistOuter?, valDistInner?, uomDistHorz?, valDistVerUpper?, uomDistVerUpper?, codeDistVerUpper?, valDistVerLower?, uomDistVerLower?, codeDistVerLower?, valAngleScallop?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual valDistVer valDistVerUpper {
            get {
                XElement x = this.GetElement(valDistVerUpperXName);
                return ((valDistVer)(x));
            }
            set {
                this.SetElement(valDistVerUpperXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Upper limit - unit of measurement
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (valAngleFm, valAngleTo, valDistOuter?, valDistInner?, uomDistHorz?, valDistVerUpper?, uomDistVerUpper?, codeDistVerUpper?, valDistVerLower?, uomDistVerLower?, codeDistVerLower?, valAngleScallop?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual uomDistVer uomDistVerUpper {
            get {
                XElement x = this.GetElement(uomDistVerUpperXName);
                return ((uomDistVer)(x));
            }
            set {
                this.SetElement(uomDistVerUpperXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Upper limit - reference
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (valAngleFm, valAngleTo, valDistOuter?, valDistInner?, uomDistHorz?, valDistVerUpper?, uomDistVerUpper?, codeDistVerUpper?, valDistVerLower?, uomDistVerLower?, codeDistVerLower?, valAngleScallop?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual codeDistVer codeDistVerUpper {
            get {
                XElement x = this.GetElement(codeDistVerUpperXName);
                return ((codeDistVer)(x));
            }
            set {
                this.SetElement(codeDistVerUpperXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Lower limit
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (valAngleFm, valAngleTo, valDistOuter?, valDistInner?, uomDistHorz?, valDistVerUpper?, uomDistVerUpper?, codeDistVerUpper?, valDistVerLower?, uomDistVerLower?, codeDistVerLower?, valAngleScallop?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual valDistVer valDistVerLower {
            get {
                XElement x = this.GetElement(valDistVerLowerXName);
                return ((valDistVer)(x));
            }
            set {
                this.SetElement(valDistVerLowerXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Lower limit - unit of measurement
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (valAngleFm, valAngleTo, valDistOuter?, valDistInner?, uomDistHorz?, valDistVerUpper?, uomDistVerUpper?, codeDistVerUpper?, valDistVerLower?, uomDistVerLower?, codeDistVerLower?, valAngleScallop?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual uomDistVer uomDistVerLower {
            get {
                XElement x = this.GetElement(uomDistVerLowerXName);
                return ((uomDistVer)(x));
            }
            set {
                this.SetElement(uomDistVerLowerXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Lower limit - reference
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (valAngleFm, valAngleTo, valDistOuter?, valDistInner?, uomDistHorz?, valDistVerUpper?, uomDistVerUpper?, codeDistVerUpper?, valDistVerLower?, uomDistVerLower?, codeDistVerLower?, valAngleScallop?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual codeDistVer codeDistVerLower {
            get {
                XElement x = this.GetElement(codeDistVerLowerXName);
                return ((codeDistVer)(x));
            }
            set {
                this.SetElement(codeDistVerLowerXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Scalloping angle
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (valAngleFm, valAngleTo, valDistOuter?, valDistInner?, uomDistHorz?, valDistVerUpper?, uomDistVerUpper?, codeDistVerUpper?, valDistVerLower?, uomDistVerLower?, codeDistVerLower?, valAngleScallop?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual valAngle valAngleScallop {
            get {
                XElement x = this.GetElement(valAngleScallopXName);
                return ((valAngle)(x));
            }
            set {
                this.SetElement(valAngleScallopXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Remarks
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (valAngleFm, valAngleTo, valDistOuter?, valDistInner?, uomDistHorz?, valDistVerUpper?, uomDistVerUpper?, codeDistVerUpper?, valDistVerLower?, uomDistVerLower?, codeDistVerLower?, valAngleScallop?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual txtRmk txtRmk {
            get {
                XElement x = this.GetElement(txtRmkXName);
                return ((txtRmk)(x));
            }
            set {
                this.SetElement(txtRmkXName, value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<NavaidLimitationType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(valAngleFmXName, typeof(valAngleBrg));
            localElementDictionary.Add(valAngleToXName, typeof(valAngleBrg));
            localElementDictionary.Add(valDistOuterXName, typeof(valDistHorz));
            localElementDictionary.Add(valDistInnerXName, typeof(valDistHorz));
            localElementDictionary.Add(uomDistHorzXName, typeof(uomDistHorz));
            localElementDictionary.Add(valDistVerUpperXName, typeof(valDistVer));
            localElementDictionary.Add(uomDistVerUpperXName, typeof(uomDistVer));
            localElementDictionary.Add(codeDistVerUpperXName, typeof(codeDistVer));
            localElementDictionary.Add(valDistVerLowerXName, typeof(valDistVer));
            localElementDictionary.Add(uomDistVerLowerXName, typeof(uomDistVer));
            localElementDictionary.Add(codeDistVerLowerXName, typeof(codeDistVer));
            localElementDictionary.Add(valAngleScallopXName, typeof(valAngle));
            localElementDictionary.Add(txtRmkXName, typeof(txtRmk));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// DEPRECATED-4.0
    /// </para>
    /// <para>
    /// [Deprecated] NDB limitation
    /// </para>
    /// <para>
    /// Regular expression: (NlnUid, valDistOuter?, uomDistHorz, valDistVerUpper?, uomDistVerUpper?, codeDistVerUpper?, uomDistVerLower, codeDistVerLower, valAngleScallop?, txtRmk?)
    /// </para>
    /// </summary>
    public partial class NdbLimitationType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName NlnUidXName = System.Xml.Linq.XName.Get("NlnUid", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName valDistOuterXName = System.Xml.Linq.XName.Get("valDistOuter", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName uomDistHorzXName = System.Xml.Linq.XName.Get("uomDistHorz", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName valDistVerUpperXName = System.Xml.Linq.XName.Get("valDistVerUpper", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName uomDistVerUpperXName = System.Xml.Linq.XName.Get("uomDistVerUpper", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName codeDistVerUpperXName = System.Xml.Linq.XName.Get("codeDistVerUpper", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName uomDistVerLowerXName = System.Xml.Linq.XName.Get("uomDistVerLower", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName codeDistVerLowerXName = System.Xml.Linq.XName.Get("codeDistVerLower", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName valAngleScallopXName = System.Xml.Linq.XName.Get("valAngleScallop", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName txtRmkXName = System.Xml.Linq.XName.Get("txtRmk", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName sourceXName = System.Xml.Linq.XName.Get("source", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("NdbLimitationType", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator NdbLimitationType(XElement xe) { return XTypedServices.ToXTypedElement<NdbLimitationType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static NdbLimitationType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(NlnUidXName), new NamedContentModelEntity(valDistOuterXName), new NamedContentModelEntity(uomDistHorzXName), new NamedContentModelEntity(valDistVerUpperXName), new NamedContentModelEntity(uomDistVerUpperXName), new NamedContentModelEntity(codeDistVerUpperXName), new NamedContentModelEntity(uomDistVerLowerXName), new NamedContentModelEntity(codeDistVerLowerXName), new NamedContentModelEntity(valAngleScallopXName), new NamedContentModelEntity(txtRmkXName));
        }
        
        /// <summary>
        /// <para>
        /// DEPRECATED-4.0
        /// </para>
        /// <para>
        /// [Deprecated] NDB limitation
        /// </para>
        /// <para>
        /// Regular expression: (NlnUid, valDistOuter?, uomDistHorz, valDistVerUpper?, uomDistVerUpper?, codeDistVerUpper?, uomDistVerLower, codeDistVerLower, valAngleScallop?, txtRmk?)
        /// </para>
        /// </summary>
        public NdbLimitationType() {
        }
        
        /// <summary>
        /// <para>
        /// a version of NDB limitation
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (NlnUid, valDistOuter?, uomDistHorz, valDistVerUpper?, uomDistVerUpper?, codeDistVerUpper?, uomDistVerLower, codeDistVerLower, valAngleScallop?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual NdbLimitationUidType NlnUid {
            get {
                XElement x = this.GetElement(NlnUidXName);
                return ((NdbLimitationUidType)(x));
            }
            set {
                this.SetElement(NlnUidXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Angle sector volume outer limit
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (NlnUid, valDistOuter?, uomDistHorz, valDistVerUpper?, uomDistVerUpper?, codeDistVerUpper?, uomDistVerLower, codeDistVerLower, valAngleScallop?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual valDistHorz valDistOuter {
            get {
                XElement x = this.GetElement(valDistOuterXName);
                return ((valDistHorz)(x));
            }
            set {
                this.SetElement(valDistOuterXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Unit of measurement [horizontal distance]
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (NlnUid, valDistOuter?, uomDistHorz, valDistVerUpper?, uomDistVerUpper?, codeDistVerUpper?, uomDistVerLower, codeDistVerLower, valAngleScallop?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual uomDistHorz uomDistHorz {
            get {
                XElement x = this.GetElement(uomDistHorzXName);
                return ((uomDistHorz)(x));
            }
            set {
                this.SetElement(uomDistHorzXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Upper limit
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (NlnUid, valDistOuter?, uomDistHorz, valDistVerUpper?, uomDistVerUpper?, codeDistVerUpper?, uomDistVerLower, codeDistVerLower, valAngleScallop?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual valDistVer valDistVerUpper {
            get {
                XElement x = this.GetElement(valDistVerUpperXName);
                return ((valDistVer)(x));
            }
            set {
                this.SetElement(valDistVerUpperXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Unit of measurement [upper limit]
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (NlnUid, valDistOuter?, uomDistHorz, valDistVerUpper?, uomDistVerUpper?, codeDistVerUpper?, uomDistVerLower, codeDistVerLower, valAngleScallop?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual uomDistVer uomDistVerUpper {
            get {
                XElement x = this.GetElement(uomDistVerUpperXName);
                return ((uomDistVer)(x));
            }
            set {
                this.SetElement(uomDistVerUpperXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Reference for upper limit
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (NlnUid, valDistOuter?, uomDistHorz, valDistVerUpper?, uomDistVerUpper?, codeDistVerUpper?, uomDistVerLower, codeDistVerLower, valAngleScallop?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual codeDistVer codeDistVerUpper {
            get {
                XElement x = this.GetElement(codeDistVerUpperXName);
                return ((codeDistVer)(x));
            }
            set {
                this.SetElement(codeDistVerUpperXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Unit of measurement [lower limit]
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (NlnUid, valDistOuter?, uomDistHorz, valDistVerUpper?, uomDistVerUpper?, codeDistVerUpper?, uomDistVerLower, codeDistVerLower, valAngleScallop?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual uomDistVer uomDistVerLower {
            get {
                XElement x = this.GetElement(uomDistVerLowerXName);
                return ((uomDistVer)(x));
            }
            set {
                this.SetElement(uomDistVerLowerXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Reference for lower limit
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (NlnUid, valDistOuter?, uomDistHorz, valDistVerUpper?, uomDistVerUpper?, codeDistVerUpper?, uomDistVerLower, codeDistVerLower, valAngleScallop?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual codeDistVer codeDistVerLower {
            get {
                XElement x = this.GetElement(codeDistVerLowerXName);
                return ((codeDistVer)(x));
            }
            set {
                this.SetElement(codeDistVerLowerXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Scalloping angle
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (NlnUid, valDistOuter?, uomDistHorz, valDistVerUpper?, uomDistVerUpper?, codeDistVerUpper?, uomDistVerLower, codeDistVerLower, valAngleScallop?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual valAngle valAngleScallop {
            get {
                XElement x = this.GetElement(valAngleScallopXName);
                return ((valAngle)(x));
            }
            set {
                this.SetElement(valAngleScallopXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Remark
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (NlnUid, valDistOuter?, uomDistHorz, valDistVerUpper?, uomDistVerUpper?, codeDistVerUpper?, uomDistVerLower, codeDistVerLower, valAngleScallop?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual txtRmk txtRmk {
            get {
                XElement x = this.GetElement(txtRmkXName);
                return ((txtRmk)(x));
            }
            set {
                this.SetElement(txtRmkXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string source {
            get {
                XAttribute x = this.Attribute(sourceXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(sourceXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<NdbLimitationType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(NlnUidXName, typeof(NdbLimitationUidType));
            localElementDictionary.Add(valDistOuterXName, typeof(valDistHorz));
            localElementDictionary.Add(uomDistHorzXName, typeof(uomDistHorz));
            localElementDictionary.Add(valDistVerUpperXName, typeof(valDistVer));
            localElementDictionary.Add(uomDistVerUpperXName, typeof(uomDistVer));
            localElementDictionary.Add(codeDistVerUpperXName, typeof(codeDistVer));
            localElementDictionary.Add(uomDistVerLowerXName, typeof(uomDistVer));
            localElementDictionary.Add(codeDistVerLowerXName, typeof(codeDistVer));
            localElementDictionary.Add(valAngleScallopXName, typeof(valAngle));
            localElementDictionary.Add(txtRmkXName, typeof(txtRmk));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// DEPRECATED-4.0
    /// </para>
    /// <para>
    /// [Deprecated] NDB limitation - UID
    /// </para>
    /// <para>
    /// Regular expression: (NdbUid, codeType, valAngleFm, valAngleTo, valDistInner, valDistVerLower)
    /// </para>
    /// </summary>
    public partial class NdbLimitationUidType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName NdbUidXName = System.Xml.Linq.XName.Get("NdbUid", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName codeTypeXName = System.Xml.Linq.XName.Get("codeType", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName valAngleFmXName = System.Xml.Linq.XName.Get("valAngleFm", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName valAngleToXName = System.Xml.Linq.XName.Get("valAngleTo", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName valDistInnerXName = System.Xml.Linq.XName.Get("valDistInner", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName valDistVerLowerXName = System.Xml.Linq.XName.Get("valDistVerLower", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName midXName = System.Xml.Linq.XName.Get("mid", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("NdbLimitationUidType", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator NdbLimitationUidType(XElement xe) { return XTypedServices.ToXTypedElement<NdbLimitationUidType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static NdbLimitationUidType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(NdbUidXName), new NamedContentModelEntity(codeTypeXName), new NamedContentModelEntity(valAngleFmXName), new NamedContentModelEntity(valAngleToXName), new NamedContentModelEntity(valDistInnerXName), new NamedContentModelEntity(valDistVerLowerXName));
        }
        
        /// <summary>
        /// <para>
        /// DEPRECATED-4.0
        /// </para>
        /// <para>
        /// [Deprecated] NDB limitation - UID
        /// </para>
        /// <para>
        /// Regular expression: (NdbUid, codeType, valAngleFm, valAngleTo, valDistInner, valDistVerLower)
        /// </para>
        /// </summary>
        public NdbLimitationUidType() {
        }
        
        /// <summary>
        /// <para>
        /// NDB limitation is limiting Non-directional radio beacon [NDB]
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (NdbUid, codeType, valAngleFm, valAngleTo, valDistInner, valDistVerLower)
        /// </para>
        /// </summary>
        public virtual NdbUidType NdbUid {
            get {
                XElement x = this.GetElement(NdbUidXName);
                return ((NdbUidType)(x));
            }
            set {
                this.SetElement(NdbUidXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Type
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (NdbUid, codeType, valAngleFm, valAngleTo, valDistInner, valDistVerLower)
        /// </para>
        /// </summary>
        public virtual codeTypeNavAidLimit codeType {
            get {
                XElement x = this.GetElement(codeTypeXName);
                return ((codeTypeNavAidLimit)(x));
            }
            set {
                this.SetElement(codeTypeXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Beginning of angle
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (NdbUid, codeType, valAngleFm, valAngleTo, valDistInner, valDistVerLower)
        /// </para>
        /// </summary>
        public virtual valAngleBrg valAngleFm {
            get {
                XElement x = this.GetElement(valAngleFmXName);
                return ((valAngleBrg)(x));
            }
            set {
                this.SetElement(valAngleFmXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Ending of angle
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (NdbUid, codeType, valAngleFm, valAngleTo, valDistInner, valDistVerLower)
        /// </para>
        /// </summary>
        public virtual valAngleBrg valAngleTo {
            get {
                XElement x = this.GetElement(valAngleToXName);
                return ((valAngleBrg)(x));
            }
            set {
                this.SetElement(valAngleToXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Angle sector volume inner limit
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (NdbUid, codeType, valAngleFm, valAngleTo, valDistInner, valDistVerLower)
        /// </para>
        /// </summary>
        public virtual valDistHorz valDistInner {
            get {
                XElement x = this.GetElement(valDistInnerXName);
                return ((valDistHorz)(x));
            }
            set {
                this.SetElement(valDistInnerXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Lower limit
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (NdbUid, codeType, valAngleFm, valAngleTo, valDistInner, valDistVerLower)
        /// </para>
        /// </summary>
        public virtual valDistVer valDistVerLower {
            get {
                XElement x = this.GetElement(valDistVerLowerXName);
                return ((valDistVer)(x));
            }
            set {
                this.SetElement(valDistVerLowerXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string mid {
            get {
                XAttribute x = this.Attribute(midXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(midXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<NdbLimitationUidType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(NdbUidXName, typeof(NdbUidType));
            localElementDictionary.Add(codeTypeXName, typeof(codeTypeNavAidLimit));
            localElementDictionary.Add(valAngleFmXName, typeof(valAngleBrg));
            localElementDictionary.Add(valAngleToXName, typeof(valAngleBrg));
            localElementDictionary.Add(valDistInnerXName, typeof(valDistHorz));
            localElementDictionary.Add(valDistVerLowerXName, typeof(valDistVer));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// NDB
    /// </para>
    /// <para>
    /// Regular expression: (NdbUid, OrgUid, txtName?, valFreq, uomFreq, codeClass?, codePsnIls?, valMagVar?, dateMagVar?, codeEm?, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, valElev?, valElevAccuracy?, valGeoidUndulation?, uomDistVer?, valCrc?, txtVerDatum?, Ntt?, txtRmk?)
    /// </para>
    /// </summary>
    public partial class NdbType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName NdbUidXName = System.Xml.Linq.XName.Get("NdbUid", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName OrgUidXName = System.Xml.Linq.XName.Get("OrgUid", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName txtNameXName = System.Xml.Linq.XName.Get("txtName", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName valFreqXName = System.Xml.Linq.XName.Get("valFreq", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName uomFreqXName = System.Xml.Linq.XName.Get("uomFreq", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName codeClassXName = System.Xml.Linq.XName.Get("codeClass", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName codePsnIlsXName = System.Xml.Linq.XName.Get("codePsnIls", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName valMagVarXName = System.Xml.Linq.XName.Get("valMagVar", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName dateMagVarXName = System.Xml.Linq.XName.Get("dateMagVar", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName codeEmXName = System.Xml.Linq.XName.Get("codeEm", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName codeDatumXName = System.Xml.Linq.XName.Get("codeDatum", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName valGeoAccuracyXName = System.Xml.Linq.XName.Get("valGeoAccuracy", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName uomGeoAccuracyXName = System.Xml.Linq.XName.Get("uomGeoAccuracy", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName valElevXName = System.Xml.Linq.XName.Get("valElev", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName valElevAccuracyXName = System.Xml.Linq.XName.Get("valElevAccuracy", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName valGeoidUndulationXName = System.Xml.Linq.XName.Get("valGeoidUndulation", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName uomDistVerXName = System.Xml.Linq.XName.Get("uomDistVer", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName valCrcXName = System.Xml.Linq.XName.Get("valCrc", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName txtVerDatumXName = System.Xml.Linq.XName.Get("txtVerDatum", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName NttXName = System.Xml.Linq.XName.Get("Ntt", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName txtRmkXName = System.Xml.Linq.XName.Get("txtRmk", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName sourceXName = System.Xml.Linq.XName.Get("source", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("NdbType", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator NdbType(XElement xe) { return XTypedServices.ToXTypedElement<NdbType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static NdbType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(NdbUidXName), new NamedContentModelEntity(OrgUidXName), new NamedContentModelEntity(txtNameXName), new NamedContentModelEntity(valFreqXName), new NamedContentModelEntity(uomFreqXName), new NamedContentModelEntity(codeClassXName), new NamedContentModelEntity(codePsnIlsXName), new NamedContentModelEntity(valMagVarXName), new NamedContentModelEntity(dateMagVarXName), new NamedContentModelEntity(codeEmXName), new NamedContentModelEntity(codeDatumXName), new NamedContentModelEntity(valGeoAccuracyXName), new NamedContentModelEntity(uomGeoAccuracyXName), new NamedContentModelEntity(valElevXName), new NamedContentModelEntity(valElevAccuracyXName), new NamedContentModelEntity(valGeoidUndulationXName), new NamedContentModelEntity(uomDistVerXName), new NamedContentModelEntity(valCrcXName), new NamedContentModelEntity(txtVerDatumXName), new NamedContentModelEntity(NttXName), new NamedContentModelEntity(txtRmkXName));
        }
        
        /// <summary>
        /// <para>
        /// NDB
        /// </para>
        /// <para>
        /// Regular expression: (NdbUid, OrgUid, txtName?, valFreq, uomFreq, codeClass?, codePsnIls?, valMagVar?, dateMagVar?, codeEm?, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, valElev?, valElevAccuracy?, valGeoidUndulation?, uomDistVer?, valCrc?, txtVerDatum?, Ntt?, txtRmk?)
        /// </para>
        /// </summary>
        public NdbType() {
        }
        
        /// <summary>
        /// <para>
        /// a version of Non-directional radio beacon [NDB]
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (NdbUid, OrgUid, txtName?, valFreq, uomFreq, codeClass?, codePsnIls?, valMagVar?, dateMagVar?, codeEm?, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, valElev?, valElevAccuracy?, valGeoidUndulation?, uomDistVer?, valCrc?, txtVerDatum?, Ntt?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual NdbUidType NdbUid {
            get {
                XElement x = this.GetElement(NdbUidXName);
                return ((NdbUidType)(x));
            }
            set {
                this.SetElement(NdbUidXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// NDB is under the responsibility of Organisaton or authority
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (NdbUid, OrgUid, txtName?, valFreq, uomFreq, codeClass?, codePsnIls?, valMagVar?, dateMagVar?, codeEm?, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, valElev?, valElevAccuracy?, valGeoidUndulation?, uomDistVer?, valCrc?, txtVerDatum?, Ntt?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual OrganisationAuthorityUidType OrgUid {
            get {
                XElement x = this.GetElement(OrgUidXName);
                return ((OrganisationAuthorityUidType)(x));
            }
            set {
                this.SetElement(OrgUidXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Name
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (NdbUid, OrgUid, txtName?, valFreq, uomFreq, codeClass?, codePsnIls?, valMagVar?, dateMagVar?, codeEm?, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, valElev?, valElevAccuracy?, valGeoidUndulation?, uomDistVer?, valCrc?, txtVerDatum?, Ntt?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual txtName txtName {
            get {
                XElement x = this.GetElement(txtNameXName);
                return ((txtName)(x));
            }
            set {
                this.SetElement(txtNameXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Frequency
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (NdbUid, OrgUid, txtName?, valFreq, uomFreq, codeClass?, codePsnIls?, valMagVar?, dateMagVar?, codeEm?, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, valElev?, valElevAccuracy?, valGeoidUndulation?, uomDistVer?, valCrc?, txtVerDatum?, Ntt?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual valFreq valFreq {
            get {
                XElement x = this.GetElement(valFreqXName);
                return ((valFreq)(x));
            }
            set {
                this.SetElement(valFreqXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Unit of measurement [frequency]
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (NdbUid, OrgUid, txtName?, valFreq, uomFreq, codeClass?, codePsnIls?, valMagVar?, dateMagVar?, codeEm?, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, valElev?, valElevAccuracy?, valGeoidUndulation?, uomDistVer?, valCrc?, txtVerDatum?, Ntt?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual uomFreq uomFreq {
            get {
                XElement x = this.GetElement(uomFreqXName);
                return ((uomFreq)(x));
            }
            set {
                this.SetElement(uomFreqXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Classification
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (NdbUid, OrgUid, txtName?, valFreq, uomFreq, codeClass?, codePsnIls?, valMagVar?, dateMagVar?, codeEm?, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, valElev?, valElevAccuracy?, valGeoidUndulation?, uomDistVer?, valCrc?, txtVerDatum?, Ntt?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual codeClassNdb codeClass {
            get {
                XElement x = this.GetElement(codeClassXName);
                return ((codeClassNdb)(x));
            }
            set {
                this.SetElement(codeClassXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Position
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (NdbUid, OrgUid, txtName?, valFreq, uomFreq, codeClass?, codePsnIls?, valMagVar?, dateMagVar?, codeEm?, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, valElev?, valElevAccuracy?, valGeoidUndulation?, uomDistVer?, valCrc?, txtVerDatum?, Ntt?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual codePsnIls codePsnIls {
            get {
                XElement x = this.GetElement(codePsnIlsXName);
                return ((codePsnIls)(x));
            }
            set {
                this.SetElement(codePsnIlsXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Magnetic Variation
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (NdbUid, OrgUid, txtName?, valFreq, uomFreq, codeClass?, codePsnIls?, valMagVar?, dateMagVar?, codeEm?, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, valElev?, valElevAccuracy?, valGeoidUndulation?, uomDistVer?, valCrc?, txtVerDatum?, Ntt?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual valAngleMagVar valMagVar {
            get {
                XElement x = this.GetElement(valMagVarXName);
                return ((valAngleMagVar)(x));
            }
            set {
                this.SetElement(valMagVarXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Magnetic variation date
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (NdbUid, OrgUid, txtName?, valFreq, uomFreq, codeClass?, codePsnIls?, valMagVar?, dateMagVar?, codeEm?, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, valElev?, valElevAccuracy?, valGeoidUndulation?, uomDistVer?, valCrc?, txtVerDatum?, Ntt?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual dateYear dateMagVar {
            get {
                XElement x = this.GetElement(dateMagVarXName);
                return ((dateYear)(x));
            }
            set {
                this.SetElement(dateMagVarXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Emission
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (NdbUid, OrgUid, txtName?, valFreq, uomFreq, codeClass?, codePsnIls?, valMagVar?, dateMagVar?, codeEm?, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, valElev?, valElevAccuracy?, valGeoidUndulation?, uomDistVer?, valCrc?, txtVerDatum?, Ntt?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual codeEmRdo codeEm {
            get {
                XElement x = this.GetElement(codeEmXName);
                return ((codeEmRdo)(x));
            }
            set {
                this.SetElement(codeEmXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Datum
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (NdbUid, OrgUid, txtName?, valFreq, uomFreq, codeClass?, codePsnIls?, valMagVar?, dateMagVar?, codeEm?, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, valElev?, valElevAccuracy?, valGeoidUndulation?, uomDistVer?, valCrc?, txtVerDatum?, Ntt?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual codeDatum codeDatum {
            get {
                XElement x = this.GetElement(codeDatumXName);
                return ((codeDatum)(x));
            }
            set {
                this.SetElement(codeDatumXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Geographical accuracy
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (NdbUid, OrgUid, txtName?, valFreq, uomFreq, codeClass?, codePsnIls?, valMagVar?, dateMagVar?, codeEm?, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, valElev?, valElevAccuracy?, valGeoidUndulation?, uomDistVer?, valCrc?, txtVerDatum?, Ntt?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual valDistHorz valGeoAccuracy {
            get {
                XElement x = this.GetElement(valGeoAccuracyXName);
                return ((valDistHorz)(x));
            }
            set {
                this.SetElement(valGeoAccuracyXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Unit of measurement [geographical accuracy]
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (NdbUid, OrgUid, txtName?, valFreq, uomFreq, codeClass?, codePsnIls?, valMagVar?, dateMagVar?, codeEm?, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, valElev?, valElevAccuracy?, valGeoidUndulation?, uomDistVer?, valCrc?, txtVerDatum?, Ntt?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual uomDistHorz uomGeoAccuracy {
            get {
                XElement x = this.GetElement(uomGeoAccuracyXName);
                return ((uomDistHorz)(x));
            }
            set {
                this.SetElement(uomGeoAccuracyXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Elevation
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (NdbUid, OrgUid, txtName?, valFreq, uomFreq, codeClass?, codePsnIls?, valMagVar?, dateMagVar?, codeEm?, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, valElev?, valElevAccuracy?, valGeoidUndulation?, uomDistVer?, valCrc?, txtVerDatum?, Ntt?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual valDistVer valElev {
            get {
                XElement x = this.GetElement(valElevXName);
                return ((valDistVer)(x));
            }
            set {
                this.SetElement(valElevXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Elevation accuracy
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (NdbUid, OrgUid, txtName?, valFreq, uomFreq, codeClass?, codePsnIls?, valMagVar?, dateMagVar?, codeEm?, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, valElev?, valElevAccuracy?, valGeoidUndulation?, uomDistVer?, valCrc?, txtVerDatum?, Ntt?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual valDistVer valElevAccuracy {
            get {
                XElement x = this.GetElement(valElevAccuracyXName);
                return ((valDistVer)(x));
            }
            set {
                this.SetElement(valElevAccuracyXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Geoid undulation
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (NdbUid, OrgUid, txtName?, valFreq, uomFreq, codeClass?, codePsnIls?, valMagVar?, dateMagVar?, codeEm?, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, valElev?, valElevAccuracy?, valGeoidUndulation?, uomDistVer?, valCrc?, txtVerDatum?, Ntt?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual valDistVer valGeoidUndulation {
            get {
                XElement x = this.GetElement(valGeoidUndulationXName);
                return ((valDistVer)(x));
            }
            set {
                this.SetElement(valGeoidUndulationXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Unit of measurement [vertical distance]
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (NdbUid, OrgUid, txtName?, valFreq, uomFreq, codeClass?, codePsnIls?, valMagVar?, dateMagVar?, codeEm?, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, valElev?, valElevAccuracy?, valGeoidUndulation?, uomDistVer?, valCrc?, txtVerDatum?, Ntt?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual uomElev uomDistVer {
            get {
                XElement x = this.GetElement(uomDistVerXName);
                return ((uomElev)(x));
            }
            set {
                this.SetElement(uomDistVerXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Cyclic redundancy check
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (NdbUid, OrgUid, txtName?, valFreq, uomFreq, codeClass?, codePsnIls?, valMagVar?, dateMagVar?, codeEm?, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, valElev?, valElevAccuracy?, valGeoidUndulation?, uomDistVer?, valCrc?, txtVerDatum?, Ntt?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual valHex valCrc {
            get {
                XElement x = this.GetElement(valCrcXName);
                return ((valHex)(x));
            }
            set {
                this.SetElement(valCrcXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Vertical Datum
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (NdbUid, OrgUid, txtName?, valFreq, uomFreq, codeClass?, codePsnIls?, valMagVar?, dateMagVar?, codeEm?, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, valElev?, valElevAccuracy?, valGeoidUndulation?, uomDistVer?, valCrc?, txtVerDatum?, Ntt?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual txtDescr txtVerDatum {
            get {
                XElement x = this.GetElement(txtVerDatumXName);
                return ((txtDescr)(x));
            }
            set {
                this.SetElement(txtVerDatumXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// NDB is operating according to NDB - Timetable
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (NdbUid, OrgUid, txtName?, valFreq, uomFreq, codeClass?, codePsnIls?, valMagVar?, dateMagVar?, codeEm?, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, valElev?, valElevAccuracy?, valGeoidUndulation?, uomDistVer?, valCrc?, txtVerDatum?, Ntt?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual TimetableNavaidType Ntt {
            get {
                XElement x = this.GetElement(NttXName);
                return ((TimetableNavaidType)(x));
            }
            set {
                this.SetElement(NttXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Remark
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (NdbUid, OrgUid, txtName?, valFreq, uomFreq, codeClass?, codePsnIls?, valMagVar?, dateMagVar?, codeEm?, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, valElev?, valElevAccuracy?, valGeoidUndulation?, uomDistVer?, valCrc?, txtVerDatum?, Ntt?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual txtRmk txtRmk {
            get {
                XElement x = this.GetElement(txtRmkXName);
                return ((txtRmk)(x));
            }
            set {
                this.SetElement(txtRmkXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string source {
            get {
                XAttribute x = this.Attribute(sourceXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(sourceXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<NdbType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(NdbUidXName, typeof(NdbUidType));
            localElementDictionary.Add(OrgUidXName, typeof(OrganisationAuthorityUidType));
            localElementDictionary.Add(txtNameXName, typeof(txtName));
            localElementDictionary.Add(valFreqXName, typeof(valFreq));
            localElementDictionary.Add(uomFreqXName, typeof(uomFreq));
            localElementDictionary.Add(codeClassXName, typeof(codeClassNdb));
            localElementDictionary.Add(codePsnIlsXName, typeof(codePsnIls));
            localElementDictionary.Add(valMagVarXName, typeof(valAngleMagVar));
            localElementDictionary.Add(dateMagVarXName, typeof(dateYear));
            localElementDictionary.Add(codeEmXName, typeof(codeEmRdo));
            localElementDictionary.Add(codeDatumXName, typeof(codeDatum));
            localElementDictionary.Add(valGeoAccuracyXName, typeof(valDistHorz));
            localElementDictionary.Add(uomGeoAccuracyXName, typeof(uomDistHorz));
            localElementDictionary.Add(valElevXName, typeof(valDistVer));
            localElementDictionary.Add(valElevAccuracyXName, typeof(valDistVer));
            localElementDictionary.Add(valGeoidUndulationXName, typeof(valDistVer));
            localElementDictionary.Add(uomDistVerXName, typeof(uomElev));
            localElementDictionary.Add(valCrcXName, typeof(valHex));
            localElementDictionary.Add(txtVerDatumXName, typeof(txtDescr));
            localElementDictionary.Add(NttXName, typeof(TimetableNavaidType));
            localElementDictionary.Add(txtRmkXName, typeof(txtRmk));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Non-directional radio beacon [NDB] - UID
    /// </para>
    /// <para>
    /// Regular expression: (codeId, geoLat, geoLong)
    /// </para>
    /// </summary>
    public partial class NdbUidType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName codeIdXName = System.Xml.Linq.XName.Get("codeId", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName geoLatXName = System.Xml.Linq.XName.Get("geoLat", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName geoLongXName = System.Xml.Linq.XName.Get("geoLong", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName midXName = System.Xml.Linq.XName.Get("mid", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName regionXName = System.Xml.Linq.XName.Get("region", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("NdbUidType", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator NdbUidType(XElement xe) { return XTypedServices.ToXTypedElement<NdbUidType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static NdbUidType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(codeIdXName), new NamedContentModelEntity(geoLatXName), new NamedContentModelEntity(geoLongXName));
        }
        
        /// <summary>
        /// <para>
        /// Non-directional radio beacon [NDB] - UID
        /// </para>
        /// <para>
        /// Regular expression: (codeId, geoLat, geoLong)
        /// </para>
        /// </summary>
        public NdbUidType() {
        }
        
        /// <summary>
        /// <para>
        /// Identification
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (codeId, geoLat, geoLong)
        /// </para>
        /// </summary>
        public virtual codeIdNavAid codeId {
            get {
                XElement x = this.GetElement(codeIdXName);
                return ((codeIdNavAid)(x));
            }
            set {
                this.SetElement(codeIdXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Latitude
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (codeId, geoLat, geoLong)
        /// </para>
        /// </summary>
        public virtual geoLat geoLat {
            get {
                XElement x = this.GetElement(geoLatXName);
                return ((geoLat)(x));
            }
            set {
                this.SetElement(geoLatXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Longitude
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (codeId, geoLat, geoLong)
        /// </para>
        /// </summary>
        public virtual geoLong geoLong {
            get {
                XElement x = this.GetElement(geoLongXName);
                return ((geoLong)(x));
            }
            set {
                this.SetElement(geoLongXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string mid {
            get {
                XAttribute x = this.Attribute(midXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(midXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual string region {
            get {
                XAttribute x = this.Attribute(regionXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(regionXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<NdbUidType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(codeIdXName, typeof(codeIdNavAid));
            localElementDictionary.Add(geoLatXName, typeof(geoLat));
            localElementDictionary.Add(geoLongXName, typeof(geoLong));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// NDB Usage Limitation
    /// </para>
    /// <para>
    /// Regular expression: (NliUid, txtRmk?, UsageLimit*)
    /// </para>
    /// </summary>
    public partial class NdbUsageLimitationType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName NliUidXName = System.Xml.Linq.XName.Get("NliUid", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName txtRmkXName = System.Xml.Linq.XName.Get("txtRmk", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName UsageLimitXName = System.Xml.Linq.XName.Get("UsageLimit", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<NavaidLimitationType> UsageLimitField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName sourceXName = System.Xml.Linq.XName.Get("source", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("NdbUsageLimitationType", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator NdbUsageLimitationType(XElement xe) { return XTypedServices.ToXTypedElement<NdbUsageLimitationType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static NdbUsageLimitationType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(NliUidXName), new NamedContentModelEntity(txtRmkXName), new NamedContentModelEntity(UsageLimitXName));
        }
        
        /// <summary>
        /// <para>
        /// NDB Usage Limitation
        /// </para>
        /// <para>
        /// Regular expression: (NliUid, txtRmk?, UsageLimit*)
        /// </para>
        /// </summary>
        public NdbUsageLimitationType() {
        }
        
        /// <summary>
        /// <para>
        /// NDB Usage Limitation - UID
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (NliUid, txtRmk?, UsageLimit*)
        /// </para>
        /// </summary>
        public virtual NdbUsageLimitationUidType NliUid {
            get {
                XElement x = this.GetElement(NliUidXName);
                return ((NdbUsageLimitationUidType)(x));
            }
            set {
                this.SetElement(NliUidXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Remarks
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (NliUid, txtRmk?, UsageLimit*)
        /// </para>
        /// </summary>
        public virtual txtRmk txtRmk {
            get {
                XElement x = this.GetElement(txtRmkXName);
                return ((txtRmk)(x));
            }
            set {
                this.SetElement(txtRmkXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (NliUid, txtRmk?, UsageLimit*)
        /// </para>
        /// </summary>
        public virtual IList<NavaidLimitationType> UsageLimit {
            get {
                if ((this.UsageLimitField == null)) {
                    this.UsageLimitField = new XTypedList<NavaidLimitationType>(this, LinqToXsdTypeManager.Instance, UsageLimitXName);
                }
                return this.UsageLimitField;
            }
            set {
                if ((value == null)) {
                    this.UsageLimitField = null;
                }
                else {
                    if ((this.UsageLimitField == null)) {
                        this.UsageLimitField = XTypedList<NavaidLimitationType>.Initialize(this, LinqToXsdTypeManager.Instance, value, UsageLimitXName);
                    }
                    else {
                        XTypedServices.SetList<NavaidLimitationType>(this.UsageLimitField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string source {
            get {
                XAttribute x = this.Attribute(sourceXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(sourceXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<NdbUsageLimitationType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(NliUidXName, typeof(NdbUsageLimitationUidType));
            localElementDictionary.Add(txtRmkXName, typeof(txtRmk));
            localElementDictionary.Add(UsageLimitXName, typeof(NavaidLimitationType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// NDB Usage Limitation -UID
    /// </para>
    /// <para>
    /// Regular expression: (NdbUid, codeType)
    /// </para>
    /// </summary>
    public partial class NdbUsageLimitationUidType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName NdbUidXName = System.Xml.Linq.XName.Get("NdbUid", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName codeTypeXName = System.Xml.Linq.XName.Get("codeType", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName midXName = System.Xml.Linq.XName.Get("mid", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("NdbUsageLimitationUidType", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator NdbUsageLimitationUidType(XElement xe) { return XTypedServices.ToXTypedElement<NdbUsageLimitationUidType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static NdbUsageLimitationUidType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(NdbUidXName), new NamedContentModelEntity(codeTypeXName));
        }
        
        /// <summary>
        /// <para>
        /// NDB Usage Limitation -UID
        /// </para>
        /// <para>
        /// Regular expression: (NdbUid, codeType)
        /// </para>
        /// </summary>
        public NdbUsageLimitationUidType() {
        }
        
        /// <summary>
        /// <para>
        /// NDB Usage Limitation is limiting the use of one NDB
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (NdbUid, codeType)
        /// </para>
        /// </summary>
        public virtual NdbUidType NdbUid {
            get {
                XElement x = this.GetElement(NdbUidXName);
                return ((NdbUidType)(x));
            }
            set {
                this.SetElement(NdbUidXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Limitation type
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (NdbUid, codeType)
        /// </para>
        /// </summary>
        public virtual codeTypeNavAidLimit codeType {
            get {
                XElement x = this.GetElement(codeTypeXName);
                return ((codeTypeNavAidLimit)(x));
            }
            set {
                this.SetElement(codeTypeXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string mid {
            get {
                XAttribute x = this.Attribute(midXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(midXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<NdbUsageLimitationUidType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(NdbUidXName, typeof(NdbUidType));
            localElementDictionary.Add(codeTypeXName, typeof(codeTypeNavAidLimit));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Nitrogen supplies
    /// </para>
    /// <para>
    /// Regular expression: (NtgUid, txtRmk?)
    /// </para>
    /// </summary>
    public partial class NitrogenType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName NtgUidXName = System.Xml.Linq.XName.Get("NtgUid", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName txtRmkXName = System.Xml.Linq.XName.Get("txtRmk", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName sourceXName = System.Xml.Linq.XName.Get("source", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("NitrogenType", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator NitrogenType(XElement xe) { return XTypedServices.ToXTypedElement<NitrogenType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static NitrogenType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(NtgUidXName), new NamedContentModelEntity(txtRmkXName));
        }
        
        /// <summary>
        /// <para>
        /// Nitrogen supplies
        /// </para>
        /// <para>
        /// Regular expression: (NtgUid, txtRmk?)
        /// </para>
        /// </summary>
        public NitrogenType() {
        }
        
        /// <summary>
        /// <para>
        /// a version of Nitrogen
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (NtgUid, txtRmk?)
        /// </para>
        /// </summary>
        public virtual NitrogenUidType NtgUid {
            get {
                XElement x = this.GetElement(NtgUidXName);
                return ((NitrogenUidType)(x));
            }
            set {
                this.SetElement(NtgUidXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Remark
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (NtgUid, txtRmk?)
        /// </para>
        /// </summary>
        public virtual txtRmk txtRmk {
            get {
                XElement x = this.GetElement(txtRmkXName);
                return ((txtRmk)(x));
            }
            set {
                this.SetElement(txtRmkXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string source {
            get {
                XAttribute x = this.Attribute(sourceXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(sourceXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<NitrogenType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(NtgUidXName, typeof(NitrogenUidType));
            localElementDictionary.Add(txtRmkXName, typeof(txtRmk));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Nitrogen - UID
    /// </para>
    /// <para>
    /// Regular expression: (AhpUid, codeType)
    /// </para>
    /// </summary>
    public partial class NitrogenUidType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName AhpUidXName = System.Xml.Linq.XName.Get("AhpUid", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName codeTypeXName = System.Xml.Linq.XName.Get("codeType", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName midXName = System.Xml.Linq.XName.Get("mid", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("NitrogenUidType", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator NitrogenUidType(XElement xe) { return XTypedServices.ToXTypedElement<NitrogenUidType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static NitrogenUidType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(AhpUidXName), new NamedContentModelEntity(codeTypeXName));
        }
        
        /// <summary>
        /// <para>
        /// Nitrogen - UID
        /// </para>
        /// <para>
        /// Regular expression: (AhpUid, codeType)
        /// </para>
        /// </summary>
        public NitrogenUidType() {
        }
        
        /// <summary>
        /// <para>
        /// Nitrogen is available at Aerodrome / Heliport
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (AhpUid, codeType)
        /// </para>
        /// </summary>
        public virtual AerodromeHeliportUidType AhpUid {
            get {
                XElement x = this.GetElement(AhpUidXName);
                return ((AerodromeHeliportUidType)(x));
            }
            set {
                this.SetElement(AhpUidXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Type
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (AhpUid, codeType)
        /// </para>
        /// </summary>
        public virtual codeTypeNitrogen codeType {
            get {
                XElement x = this.GetElement(codeTypeXName);
                return ((codeTypeNitrogen)(x));
            }
            set {
                this.SetElement(codeTypeXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string mid {
            get {
                XAttribute x = this.Attribute(midXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(midXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<NitrogenUidType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(AhpUidXName, typeof(AerodromeHeliportUidType));
            localElementDictionary.Add(codeTypeXName, typeof(codeTypeNitrogen));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Obstacle clearance altitude / height
    /// </para>
    /// <para>
    /// Regular expression: (codeCatAcft, codeTypeApch, valOca?, valOch?, codeRefOch?, uomDistVer?, txtRmk?)
    /// </para>
    /// </summary>
    public partial class ObstacleClearanceAltitudeHeightType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName codeCatAcftXName = System.Xml.Linq.XName.Get("codeCatAcft", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName codeTypeApchXName = System.Xml.Linq.XName.Get("codeTypeApch", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName valOcaXName = System.Xml.Linq.XName.Get("valOca", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName valOchXName = System.Xml.Linq.XName.Get("valOch", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName codeRefOchXName = System.Xml.Linq.XName.Get("codeRefOch", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName uomDistVerXName = System.Xml.Linq.XName.Get("uomDistVer", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName txtRmkXName = System.Xml.Linq.XName.Get("txtRmk", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("ObstacleClearanceAltitudeHeightType", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator ObstacleClearanceAltitudeHeightType(XElement xe) { return XTypedServices.ToXTypedElement<ObstacleClearanceAltitudeHeightType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static ObstacleClearanceAltitudeHeightType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(codeCatAcftXName), new NamedContentModelEntity(codeTypeApchXName), new NamedContentModelEntity(valOcaXName), new NamedContentModelEntity(valOchXName), new NamedContentModelEntity(codeRefOchXName), new NamedContentModelEntity(uomDistVerXName), new NamedContentModelEntity(txtRmkXName));
        }
        
        /// <summary>
        /// <para>
        /// Obstacle clearance altitude / height
        /// </para>
        /// <para>
        /// Regular expression: (codeCatAcft, codeTypeApch, valOca?, valOch?, codeRefOch?, uomDistVer?, txtRmk?)
        /// </para>
        /// </summary>
        public ObstacleClearanceAltitudeHeightType() {
        }
        
        /// <summary>
        /// <para>
        /// Aircraft category
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (codeCatAcft, codeTypeApch, valOca?, valOch?, codeRefOch?, uomDistVer?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual codeCatAcft codeCatAcft {
            get {
                XElement x = this.GetElement(codeCatAcftXName);
                return ((codeCatAcft)(x));
            }
            set {
                this.SetElement(codeCatAcftXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Type of the approach procedure
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (codeCatAcft, codeTypeApch, valOca?, valOch?, codeRefOch?, uomDistVer?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual codeTypeApchProc codeTypeApch {
            get {
                XElement x = this.GetElement(codeTypeApchXName);
                return ((codeTypeApchProc)(x));
            }
            set {
                this.SetElement(codeTypeApchXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// OCA
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (codeCatAcft, codeTypeApch, valOca?, valOch?, codeRefOch?, uomDistVer?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual valDistVer valOca {
            get {
                XElement x = this.GetElement(valOcaXName);
                return ((valDistVer)(x));
            }
            set {
                this.SetElement(valOcaXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// OCH
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (codeCatAcft, codeTypeApch, valOca?, valOch?, codeRefOch?, uomDistVer?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual valDistVer valOch {
            get {
                XElement x = this.GetElement(valOchXName);
                return ((valDistVer)(x));
            }
            set {
                this.SetElement(valOchXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Reference for OCH
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (codeCatAcft, codeTypeApch, valOca?, valOch?, codeRefOch?, uomDistVer?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual codeRefOch codeRefOch {
            get {
                XElement x = this.GetElement(codeRefOchXName);
                return ((codeRefOch)(x));
            }
            set {
                this.SetElement(codeRefOchXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Unit of measurement [vertical distance]
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (codeCatAcft, codeTypeApch, valOca?, valOch?, codeRefOch?, uomDistVer?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual uomElev uomDistVer {
            get {
                XElement x = this.GetElement(uomDistVerXName);
                return ((uomElev)(x));
            }
            set {
                this.SetElement(uomDistVerXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Remark
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (codeCatAcft, codeTypeApch, valOca?, valOch?, codeRefOch?, uomDistVer?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual txtRmk txtRmk {
            get {
                XElement x = this.GetElement(txtRmkXName);
                return ((txtRmk)(x));
            }
            set {
                this.SetElement(txtRmkXName, value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ObstacleClearanceAltitudeHeightType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(codeCatAcftXName, typeof(codeCatAcft));
            localElementDictionary.Add(codeTypeApchXName, typeof(codeTypeApchProc));
            localElementDictionary.Add(valOcaXName, typeof(valDistVer));
            localElementDictionary.Add(valOchXName, typeof(valDistVer));
            localElementDictionary.Add(codeRefOchXName, typeof(codeRefOch));
            localElementDictionary.Add(uomDistVerXName, typeof(uomElev));
            localElementDictionary.Add(txtRmkXName, typeof(txtRmk));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Obstacle group
    /// </para>
    /// <para>
    /// Regular expression: (OgrUid, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, valElevAccuracy?, uomElevAccuracy?, txtRmk?)
    /// </para>
    /// </summary>
    public partial class ObstacleGroupType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName OgrUidXName = System.Xml.Linq.XName.Get("OgrUid", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName codeDatumXName = System.Xml.Linq.XName.Get("codeDatum", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName valGeoAccuracyXName = System.Xml.Linq.XName.Get("valGeoAccuracy", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName uomGeoAccuracyXName = System.Xml.Linq.XName.Get("uomGeoAccuracy", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName valElevAccuracyXName = System.Xml.Linq.XName.Get("valElevAccuracy", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName uomElevAccuracyXName = System.Xml.Linq.XName.Get("uomElevAccuracy", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName txtRmkXName = System.Xml.Linq.XName.Get("txtRmk", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName sourceXName = System.Xml.Linq.XName.Get("source", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("ObstacleGroupType", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator ObstacleGroupType(XElement xe) { return XTypedServices.ToXTypedElement<ObstacleGroupType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static ObstacleGroupType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(OgrUidXName), new NamedContentModelEntity(codeDatumXName), new NamedContentModelEntity(valGeoAccuracyXName), new NamedContentModelEntity(uomGeoAccuracyXName), new NamedContentModelEntity(valElevAccuracyXName), new NamedContentModelEntity(uomElevAccuracyXName), new NamedContentModelEntity(txtRmkXName));
        }
        
        /// <summary>
        /// <para>
        /// Obstacle group
        /// </para>
        /// <para>
        /// Regular expression: (OgrUid, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, valElevAccuracy?, uomElevAccuracy?, txtRmk?)
        /// </para>
        /// </summary>
        public ObstacleGroupType() {
        }
        
        /// <summary>
        /// <para>
        /// a version of Obstacle group
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (OgrUid, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, valElevAccuracy?, uomElevAccuracy?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual ObstacleGroupUidType OgrUid {
            get {
                XElement x = this.GetElement(OgrUidXName);
                return ((ObstacleGroupUidType)(x));
            }
            set {
                this.SetElement(OgrUidXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Datum
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (OgrUid, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, valElevAccuracy?, uomElevAccuracy?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual codeDatum codeDatum {
            get {
                XElement x = this.GetElement(codeDatumXName);
                return ((codeDatum)(x));
            }
            set {
                this.SetElement(codeDatumXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Geographical accuracy
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (OgrUid, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, valElevAccuracy?, uomElevAccuracy?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual valDistHorz valGeoAccuracy {
            get {
                XElement x = this.GetElement(valGeoAccuracyXName);
                return ((valDistHorz)(x));
            }
            set {
                this.SetElement(valGeoAccuracyXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Unit of measurement [geographical accuracy]
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (OgrUid, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, valElevAccuracy?, uomElevAccuracy?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual uomDistHorz uomGeoAccuracy {
            get {
                XElement x = this.GetElement(uomGeoAccuracyXName);
                return ((uomDistHorz)(x));
            }
            set {
                this.SetElement(uomGeoAccuracyXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Elevation accuracy
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (OgrUid, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, valElevAccuracy?, uomElevAccuracy?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual valDistVer valElevAccuracy {
            get {
                XElement x = this.GetElement(valElevAccuracyXName);
                return ((valDistVer)(x));
            }
            set {
                this.SetElement(valElevAccuracyXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Unit of measurement [elevation accuracy]
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (OgrUid, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, valElevAccuracy?, uomElevAccuracy?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual uomElev uomElevAccuracy {
            get {
                XElement x = this.GetElement(uomElevAccuracyXName);
                return ((uomElev)(x));
            }
            set {
                this.SetElement(uomElevAccuracyXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Remark
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (OgrUid, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, valElevAccuracy?, uomElevAccuracy?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual txtRmk txtRmk {
            get {
                XElement x = this.GetElement(txtRmkXName);
                return ((txtRmk)(x));
            }
            set {
                this.SetElement(txtRmkXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string source {
            get {
                XAttribute x = this.Attribute(sourceXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(sourceXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ObstacleGroupType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(OgrUidXName, typeof(ObstacleGroupUidType));
            localElementDictionary.Add(codeDatumXName, typeof(codeDatum));
            localElementDictionary.Add(valGeoAccuracyXName, typeof(valDistHorz));
            localElementDictionary.Add(uomGeoAccuracyXName, typeof(uomDistHorz));
            localElementDictionary.Add(valElevAccuracyXName, typeof(valDistVer));
            localElementDictionary.Add(uomElevAccuracyXName, typeof(uomElev));
            localElementDictionary.Add(txtRmkXName, typeof(txtRmk));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Obstacle group - UID
    /// </para>
    /// <para>
    /// Regular expression: (txtName, geoLat, geoLong)
    /// </para>
    /// </summary>
    public partial class ObstacleGroupUidType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName txtNameXName = System.Xml.Linq.XName.Get("txtName", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName geoLatXName = System.Xml.Linq.XName.Get("geoLat", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName geoLongXName = System.Xml.Linq.XName.Get("geoLong", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName midXName = System.Xml.Linq.XName.Get("mid", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName regionXName = System.Xml.Linq.XName.Get("region", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("ObstacleGroupUidType", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator ObstacleGroupUidType(XElement xe) { return XTypedServices.ToXTypedElement<ObstacleGroupUidType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static ObstacleGroupUidType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(txtNameXName), new NamedContentModelEntity(geoLatXName), new NamedContentModelEntity(geoLongXName));
        }
        
        /// <summary>
        /// <para>
        /// Obstacle group - UID
        /// </para>
        /// <para>
        /// Regular expression: (txtName, geoLat, geoLong)
        /// </para>
        /// </summary>
        public ObstacleGroupUidType() {
        }
        
        /// <summary>
        /// <para>
        /// Name
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (txtName, geoLat, geoLong)
        /// </para>
        /// </summary>
        public virtual txtName txtName {
            get {
                XElement x = this.GetElement(txtNameXName);
                return ((txtName)(x));
            }
            set {
                this.SetElement(txtNameXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Group reference point latitude
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (txtName, geoLat, geoLong)
        /// </para>
        /// </summary>
        public virtual geoLat geoLat {
            get {
                XElement x = this.GetElement(geoLatXName);
                return ((geoLat)(x));
            }
            set {
                this.SetElement(geoLatXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Group reference point longitude
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (txtName, geoLat, geoLong)
        /// </para>
        /// </summary>
        public virtual geoLong geoLong {
            get {
                XElement x = this.GetElement(geoLongXName);
                return ((geoLong)(x));
            }
            set {
                this.SetElement(geoLongXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string mid {
            get {
                XAttribute x = this.Attribute(midXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(midXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual string region {
            get {
                XAttribute x = this.Attribute(regionXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(regionXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ObstacleGroupUidType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(txtNameXName, typeof(txtName));
            localElementDictionary.Add(geoLatXName, typeof(geoLat));
            localElementDictionary.Add(geoLongXName, typeof(geoLong));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Obstacle
    /// </para>
    /// <para>
    /// Regular expression: (ObsUid, txtName?, codeType, txtDescrType?, codeGroup?, codeLgt?, codeMarking?, txtDescrLgt?, txtDescrMarking?, codeDatum, valElev, valHgt?, valGeoidUndulation?, uomDistVer, codeHgtAccuracy?, valRadius?, uomRadius?, ObsUidLink?, codeLinkType?, datetimeValidWef?, datetimeValidTil?, valCrc?, txtVerDatum?, txtRmk?)
    /// </para>
    /// </summary>
    public partial class ObstacleType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ObsUidXName = System.Xml.Linq.XName.Get("ObsUid", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName txtNameXName = System.Xml.Linq.XName.Get("txtName", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName codeTypeXName = System.Xml.Linq.XName.Get("codeType", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName txtDescrTypeXName = System.Xml.Linq.XName.Get("txtDescrType", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName codeGroupXName = System.Xml.Linq.XName.Get("codeGroup", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName codeLgtXName = System.Xml.Linq.XName.Get("codeLgt", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName codeMarkingXName = System.Xml.Linq.XName.Get("codeMarking", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName txtDescrLgtXName = System.Xml.Linq.XName.Get("txtDescrLgt", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName txtDescrMarkingXName = System.Xml.Linq.XName.Get("txtDescrMarking", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName codeDatumXName = System.Xml.Linq.XName.Get("codeDatum", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName valElevXName = System.Xml.Linq.XName.Get("valElev", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName valHgtXName = System.Xml.Linq.XName.Get("valHgt", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName valGeoidUndulationXName = System.Xml.Linq.XName.Get("valGeoidUndulation", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName uomDistVerXName = System.Xml.Linq.XName.Get("uomDistVer", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName codeHgtAccuracyXName = System.Xml.Linq.XName.Get("codeHgtAccuracy", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName valRadiusXName = System.Xml.Linq.XName.Get("valRadius", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName uomRadiusXName = System.Xml.Linq.XName.Get("uomRadius", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ObsUidLinkXName = System.Xml.Linq.XName.Get("ObsUidLink", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName codeLinkTypeXName = System.Xml.Linq.XName.Get("codeLinkType", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName datetimeValidWefXName = System.Xml.Linq.XName.Get("datetimeValidWef", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName datetimeValidTilXName = System.Xml.Linq.XName.Get("datetimeValidTil", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName valCrcXName = System.Xml.Linq.XName.Get("valCrc", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName txtVerDatumXName = System.Xml.Linq.XName.Get("txtVerDatum", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName txtRmkXName = System.Xml.Linq.XName.Get("txtRmk", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName sourceXName = System.Xml.Linq.XName.Get("source", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("ObstacleType", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator ObstacleType(XElement xe) { return XTypedServices.ToXTypedElement<ObstacleType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static ObstacleType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(ObsUidXName), new NamedContentModelEntity(txtNameXName), new NamedContentModelEntity(codeTypeXName), new NamedContentModelEntity(txtDescrTypeXName), new NamedContentModelEntity(codeGroupXName), new NamedContentModelEntity(codeLgtXName), new NamedContentModelEntity(codeMarkingXName), new NamedContentModelEntity(txtDescrLgtXName), new NamedContentModelEntity(txtDescrMarkingXName), new NamedContentModelEntity(codeDatumXName), new NamedContentModelEntity(valElevXName), new NamedContentModelEntity(valHgtXName), new NamedContentModelEntity(valGeoidUndulationXName), new NamedContentModelEntity(uomDistVerXName), new NamedContentModelEntity(codeHgtAccuracyXName), new NamedContentModelEntity(valRadiusXName), new NamedContentModelEntity(uomRadiusXName), new NamedContentModelEntity(ObsUidLinkXName), new NamedContentModelEntity(codeLinkTypeXName), new NamedContentModelEntity(datetimeValidWefXName), new NamedContentModelEntity(datetimeValidTilXName), new NamedContentModelEntity(valCrcXName), new NamedContentModelEntity(txtVerDatumXName), new NamedContentModelEntity(txtRmkXName));
        }
        
        /// <summary>
        /// <para>
        /// Obstacle
        /// </para>
        /// <para>
        /// Regular expression: (ObsUid, txtName?, codeType, txtDescrType?, codeGroup?, codeLgt?, codeMarking?, txtDescrLgt?, txtDescrMarking?, codeDatum, valElev, valHgt?, valGeoidUndulation?, uomDistVer, codeHgtAccuracy?, valRadius?, uomRadius?, ObsUidLink?, codeLinkType?, datetimeValidWef?, datetimeValidTil?, valCrc?, txtVerDatum?, txtRmk?)
        /// </para>
        /// </summary>
        public ObstacleType() {
        }
        
        /// <summary>
        /// <para>
        /// a version of Obstacle
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (ObsUid, txtName?, codeType, txtDescrType?, codeGroup?, codeLgt?, codeMarking?, txtDescrLgt?, txtDescrMarking?, codeDatum, valElev, valHgt?, valGeoidUndulation?, uomDistVer, codeHgtAccuracy?, valRadius?, uomRadius?, ObsUidLink?, codeLinkType?, datetimeValidWef?, datetimeValidTil?, valCrc?, txtVerDatum?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual ObstacleUidType ObsUid {
            get {
                XElement x = this.GetElement(ObsUidXName);
                return ((ObstacleUidType)(x));
            }
            set {
                this.SetElement(ObsUidXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Name
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (ObsUid, txtName?, codeType, txtDescrType?, codeGroup?, codeLgt?, codeMarking?, txtDescrLgt?, txtDescrMarking?, codeDatum, valElev, valHgt?, valGeoidUndulation?, uomDistVer, codeHgtAccuracy?, valRadius?, uomRadius?, ObsUidLink?, codeLinkType?, datetimeValidWef?, datetimeValidTil?, valCrc?, txtVerDatum?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual txtName txtName {
            get {
                XElement x = this.GetElement(txtNameXName);
                return ((txtName)(x));
            }
            set {
                this.SetElement(txtNameXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Type
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (ObsUid, txtName?, codeType, txtDescrType?, codeGroup?, codeLgt?, codeMarking?, txtDescrLgt?, txtDescrMarking?, codeDatum, valElev, valHgt?, valGeoidUndulation?, uomDistVer, codeHgtAccuracy?, valRadius?, uomRadius?, ObsUidLink?, codeLinkType?, datetimeValidWef?, datetimeValidTil?, valCrc?, txtVerDatum?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual codeTypeObstacle codeType {
            get {
                XElement x = this.GetElement(codeTypeXName);
                return ((codeTypeObstacle)(x));
            }
            set {
                this.SetElement(codeTypeXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Type details
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (ObsUid, txtName?, codeType, txtDescrType?, codeGroup?, codeLgt?, codeMarking?, txtDescrLgt?, txtDescrMarking?, codeDatum, valElev, valHgt?, valGeoidUndulation?, uomDistVer, codeHgtAccuracy?, valRadius?, uomRadius?, ObsUidLink?, codeLinkType?, datetimeValidWef?, datetimeValidTil?, valCrc?, txtVerDatum?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual txtDescr txtDescrType {
            get {
                XElement x = this.GetElement(txtDescrTypeXName);
                return ((txtDescr)(x));
            }
            set {
                this.SetElement(txtDescrTypeXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Group of obstacles
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (ObsUid, txtName?, codeType, txtDescrType?, codeGroup?, codeLgt?, codeMarking?, txtDescrLgt?, txtDescrMarking?, codeDatum, valElev, valHgt?, valGeoidUndulation?, uomDistVer, codeHgtAccuracy?, valRadius?, uomRadius?, ObsUidLink?, codeLinkType?, datetimeValidWef?, datetimeValidTil?, valCrc?, txtVerDatum?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual codeYesNo codeGroup {
            get {
                XElement x = this.GetElement(codeGroupXName);
                return ((codeYesNo)(x));
            }
            set {
                this.SetElement(codeGroupXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Lighted
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (ObsUid, txtName?, codeType, txtDescrType?, codeGroup?, codeLgt?, codeMarking?, txtDescrLgt?, txtDescrMarking?, codeDatum, valElev, valHgt?, valGeoidUndulation?, uomDistVer, codeHgtAccuracy?, valRadius?, uomRadius?, ObsUidLink?, codeLinkType?, datetimeValidWef?, datetimeValidTil?, valCrc?, txtVerDatum?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual codeYesNo codeLgt {
            get {
                XElement x = this.GetElement(codeLgtXName);
                return ((codeYesNo)(x));
            }
            set {
                this.SetElement(codeLgtXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Marked
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (ObsUid, txtName?, codeType, txtDescrType?, codeGroup?, codeLgt?, codeMarking?, txtDescrLgt?, txtDescrMarking?, codeDatum, valElev, valHgt?, valGeoidUndulation?, uomDistVer, codeHgtAccuracy?, valRadius?, uomRadius?, ObsUidLink?, codeLinkType?, datetimeValidWef?, datetimeValidTil?, valCrc?, txtVerDatum?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual codeYesNo codeMarking {
            get {
                XElement x = this.GetElement(codeMarkingXName);
                return ((codeYesNo)(x));
            }
            set {
                this.SetElement(codeMarkingXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Type and colour of lighting
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (ObsUid, txtName?, codeType, txtDescrType?, codeGroup?, codeLgt?, codeMarking?, txtDescrLgt?, txtDescrMarking?, codeDatum, valElev, valHgt?, valGeoidUndulation?, uomDistVer, codeHgtAccuracy?, valRadius?, uomRadius?, ObsUidLink?, codeLinkType?, datetimeValidWef?, datetimeValidTil?, valCrc?, txtVerDatum?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual txtDescr txtDescrLgt {
            get {
                XElement x = this.GetElement(txtDescrLgtXName);
                return ((txtDescr)(x));
            }
            set {
                this.SetElement(txtDescrLgtXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Visual marking
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (ObsUid, txtName?, codeType, txtDescrType?, codeGroup?, codeLgt?, codeMarking?, txtDescrLgt?, txtDescrMarking?, codeDatum, valElev, valHgt?, valGeoidUndulation?, uomDistVer, codeHgtAccuracy?, valRadius?, uomRadius?, ObsUidLink?, codeLinkType?, datetimeValidWef?, datetimeValidTil?, valCrc?, txtVerDatum?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual txtDescr txtDescrMarking {
            get {
                XElement x = this.GetElement(txtDescrMarkingXName);
                return ((txtDescr)(x));
            }
            set {
                this.SetElement(txtDescrMarkingXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Datum
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (ObsUid, txtName?, codeType, txtDescrType?, codeGroup?, codeLgt?, codeMarking?, txtDescrLgt?, txtDescrMarking?, codeDatum, valElev, valHgt?, valGeoidUndulation?, uomDistVer, codeHgtAccuracy?, valRadius?, uomRadius?, ObsUidLink?, codeLinkType?, datetimeValidWef?, datetimeValidTil?, valCrc?, txtVerDatum?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual codeDatum codeDatum {
            get {
                XElement x = this.GetElement(codeDatumXName);
                return ((codeDatum)(x));
            }
            set {
                this.SetElement(codeDatumXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Elevation
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (ObsUid, txtName?, codeType, txtDescrType?, codeGroup?, codeLgt?, codeMarking?, txtDescrLgt?, txtDescrMarking?, codeDatum, valElev, valHgt?, valGeoidUndulation?, uomDistVer, codeHgtAccuracy?, valRadius?, uomRadius?, ObsUidLink?, codeLinkType?, datetimeValidWef?, datetimeValidTil?, valCrc?, txtVerDatum?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual valDistVer valElev {
            get {
                XElement x = this.GetElement(valElevXName);
                return ((valDistVer)(x));
            }
            set {
                this.SetElement(valElevXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Height
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (ObsUid, txtName?, codeType, txtDescrType?, codeGroup?, codeLgt?, codeMarking?, txtDescrLgt?, txtDescrMarking?, codeDatum, valElev, valHgt?, valGeoidUndulation?, uomDistVer, codeHgtAccuracy?, valRadius?, uomRadius?, ObsUidLink?, codeLinkType?, datetimeValidWef?, datetimeValidTil?, valCrc?, txtVerDatum?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual valDistVer valHgt {
            get {
                XElement x = this.GetElement(valHgtXName);
                return ((valDistVer)(x));
            }
            set {
                this.SetElement(valHgtXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Geoid undulation
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (ObsUid, txtName?, codeType, txtDescrType?, codeGroup?, codeLgt?, codeMarking?, txtDescrLgt?, txtDescrMarking?, codeDatum, valElev, valHgt?, valGeoidUndulation?, uomDistVer, codeHgtAccuracy?, valRadius?, uomRadius?, ObsUidLink?, codeLinkType?, datetimeValidWef?, datetimeValidTil?, valCrc?, txtVerDatum?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual valDistVer valGeoidUndulation {
            get {
                XElement x = this.GetElement(valGeoidUndulationXName);
                return ((valDistVer)(x));
            }
            set {
                this.SetElement(valGeoidUndulationXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Unit of measurement [vertical distance]
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (ObsUid, txtName?, codeType, txtDescrType?, codeGroup?, codeLgt?, codeMarking?, txtDescrLgt?, txtDescrMarking?, codeDatum, valElev, valHgt?, valGeoidUndulation?, uomDistVer, codeHgtAccuracy?, valRadius?, uomRadius?, ObsUidLink?, codeLinkType?, datetimeValidWef?, datetimeValidTil?, valCrc?, txtVerDatum?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual uomElev uomDistVer {
            get {
                XElement x = this.GetElement(uomDistVerXName);
                return ((uomElev)(x));
            }
            set {
                this.SetElement(uomDistVerXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Height accuracy
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (ObsUid, txtName?, codeType, txtDescrType?, codeGroup?, codeLgt?, codeMarking?, txtDescrLgt?, txtDescrMarking?, codeDatum, valElev, valHgt?, valGeoidUndulation?, uomDistVer, codeHgtAccuracy?, valRadius?, uomRadius?, ObsUidLink?, codeLinkType?, datetimeValidWef?, datetimeValidTil?, valCrc?, txtVerDatum?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual codeYesNo codeHgtAccuracy {
            get {
                XElement x = this.GetElement(codeHgtAccuracyXName);
                return ((codeYesNo)(x));
            }
            set {
                this.SetElement(codeHgtAccuracyXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Radius
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (ObsUid, txtName?, codeType, txtDescrType?, codeGroup?, codeLgt?, codeMarking?, txtDescrLgt?, txtDescrMarking?, codeDatum, valElev, valHgt?, valGeoidUndulation?, uomDistVer, codeHgtAccuracy?, valRadius?, uomRadius?, ObsUidLink?, codeLinkType?, datetimeValidWef?, datetimeValidTil?, valCrc?, txtVerDatum?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual valDistHorz valRadius {
            get {
                XElement x = this.GetElement(valRadiusXName);
                return ((valDistHorz)(x));
            }
            set {
                this.SetElement(valRadiusXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Unit of measurement [radius]
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (ObsUid, txtName?, codeType, txtDescrType?, codeGroup?, codeLgt?, codeMarking?, txtDescrLgt?, txtDescrMarking?, codeDatum, valElev, valHgt?, valGeoidUndulation?, uomDistVer, codeHgtAccuracy?, valRadius?, uomRadius?, ObsUidLink?, codeLinkType?, datetimeValidWef?, datetimeValidTil?, valCrc?, txtVerDatum?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual uomDistHorz uomRadius {
            get {
                XElement x = this.GetElement(uomRadiusXName);
                return ((uomDistHorz)(x));
            }
            set {
                this.SetElement(uomRadiusXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Another obstacle this one is linked to.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (ObsUid, txtName?, codeType, txtDescrType?, codeGroup?, codeLgt?, codeMarking?, txtDescrLgt?, txtDescrMarking?, codeDatum, valElev, valHgt?, valGeoidUndulation?, uomDistVer, codeHgtAccuracy?, valRadius?, uomRadius?, ObsUidLink?, codeLinkType?, datetimeValidWef?, datetimeValidTil?, valCrc?, txtVerDatum?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual ObstacleUidType ObsUidLink {
            get {
                XElement x = this.GetElement(ObsUidLinkXName);
                return ((ObstacleUidType)(x));
            }
            set {
                this.SetElement(ObsUidLinkXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Link type
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (ObsUid, txtName?, codeType, txtDescrType?, codeGroup?, codeLgt?, codeMarking?, txtDescrLgt?, txtDescrMarking?, codeDatum, valElev, valHgt?, valGeoidUndulation?, uomDistVer, codeHgtAccuracy?, valRadius?, uomRadius?, ObsUidLink?, codeLinkType?, datetimeValidWef?, datetimeValidTil?, valCrc?, txtVerDatum?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual codeTypeObstacleLink codeLinkType {
            get {
                XElement x = this.GetElement(codeLinkTypeXName);
                return ((codeTypeObstacleLink)(x));
            }
            set {
                this.SetElement(codeLinkTypeXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Obstacle valid after this date and time.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (ObsUid, txtName?, codeType, txtDescrType?, codeGroup?, codeLgt?, codeMarking?, txtDescrLgt?, txtDescrMarking?, codeDatum, valElev, valHgt?, valGeoidUndulation?, uomDistVer, codeHgtAccuracy?, valRadius?, uomRadius?, ObsUidLink?, codeLinkType?, datetimeValidWef?, datetimeValidTil?, valCrc?, txtVerDatum?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual System.DateTime? datetimeValidWef {
            get {
                XElement x = this.GetElement(datetimeValidWefXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<System.DateTime>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.DateTime).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(datetimeValidWefXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.DateTime).Datatype);
                }
                else {
                    this.SetElementWithValidation(datetimeValidWefXName, value, "datetimeValidWef", global::OFMX.dateTimeZulu.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Obstacle valid until this date and time.
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (ObsUid, txtName?, codeType, txtDescrType?, codeGroup?, codeLgt?, codeMarking?, txtDescrLgt?, txtDescrMarking?, codeDatum, valElev, valHgt?, valGeoidUndulation?, uomDistVer, codeHgtAccuracy?, valRadius?, uomRadius?, ObsUidLink?, codeLinkType?, datetimeValidWef?, datetimeValidTil?, valCrc?, txtVerDatum?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual System.DateTime? datetimeValidTil {
            get {
                XElement x = this.GetElement(datetimeValidTilXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<System.DateTime>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.DateTime).Datatype);
            }
            set {
                if (value == null) {
                    this.SetElement(datetimeValidTilXName, null, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.DateTime).Datatype);
                }
                else {
                    this.SetElementWithValidation(datetimeValidTilXName, value, "datetimeValidTil", global::OFMX.dateTimeZulu.TypeDefinition);
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Cyclic redundancy check
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (ObsUid, txtName?, codeType, txtDescrType?, codeGroup?, codeLgt?, codeMarking?, txtDescrLgt?, txtDescrMarking?, codeDatum, valElev, valHgt?, valGeoidUndulation?, uomDistVer, codeHgtAccuracy?, valRadius?, uomRadius?, ObsUidLink?, codeLinkType?, datetimeValidWef?, datetimeValidTil?, valCrc?, txtVerDatum?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual valHex valCrc {
            get {
                XElement x = this.GetElement(valCrcXName);
                return ((valHex)(x));
            }
            set {
                this.SetElement(valCrcXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Vertical Datum
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (ObsUid, txtName?, codeType, txtDescrType?, codeGroup?, codeLgt?, codeMarking?, txtDescrLgt?, txtDescrMarking?, codeDatum, valElev, valHgt?, valGeoidUndulation?, uomDistVer, codeHgtAccuracy?, valRadius?, uomRadius?, ObsUidLink?, codeLinkType?, datetimeValidWef?, datetimeValidTil?, valCrc?, txtVerDatum?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual txtDescr txtVerDatum {
            get {
                XElement x = this.GetElement(txtVerDatumXName);
                return ((txtDescr)(x));
            }
            set {
                this.SetElement(txtVerDatumXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Remark
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (ObsUid, txtName?, codeType, txtDescrType?, codeGroup?, codeLgt?, codeMarking?, txtDescrLgt?, txtDescrMarking?, codeDatum, valElev, valHgt?, valGeoidUndulation?, uomDistVer, codeHgtAccuracy?, valRadius?, uomRadius?, ObsUidLink?, codeLinkType?, datetimeValidWef?, datetimeValidTil?, valCrc?, txtVerDatum?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual txtRmk txtRmk {
            get {
                XElement x = this.GetElement(txtRmkXName);
                return ((txtRmk)(x));
            }
            set {
                this.SetElement(txtRmkXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string source {
            get {
                XAttribute x = this.Attribute(sourceXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(sourceXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ObstacleType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(ObsUidXName, typeof(ObstacleUidType));
            localElementDictionary.Add(txtNameXName, typeof(txtName));
            localElementDictionary.Add(codeTypeXName, typeof(codeTypeObstacle));
            localElementDictionary.Add(txtDescrTypeXName, typeof(txtDescr));
            localElementDictionary.Add(codeGroupXName, typeof(codeYesNo));
            localElementDictionary.Add(codeLgtXName, typeof(codeYesNo));
            localElementDictionary.Add(codeMarkingXName, typeof(codeYesNo));
            localElementDictionary.Add(txtDescrLgtXName, typeof(txtDescr));
            localElementDictionary.Add(txtDescrMarkingXName, typeof(txtDescr));
            localElementDictionary.Add(codeDatumXName, typeof(codeDatum));
            localElementDictionary.Add(valElevXName, typeof(valDistVer));
            localElementDictionary.Add(valHgtXName, typeof(valDistVer));
            localElementDictionary.Add(valGeoidUndulationXName, typeof(valDistVer));
            localElementDictionary.Add(uomDistVerXName, typeof(uomElev));
            localElementDictionary.Add(codeHgtAccuracyXName, typeof(codeYesNo));
            localElementDictionary.Add(valRadiusXName, typeof(valDistHorz));
            localElementDictionary.Add(uomRadiusXName, typeof(uomDistHorz));
            localElementDictionary.Add(ObsUidLinkXName, typeof(ObstacleUidType));
            localElementDictionary.Add(codeLinkTypeXName, typeof(codeTypeObstacleLink));
            localElementDictionary.Add(datetimeValidWefXName, typeof(System.DateTime));
            localElementDictionary.Add(datetimeValidTilXName, typeof(System.DateTime));
            localElementDictionary.Add(valCrcXName, typeof(valHex));
            localElementDictionary.Add(txtVerDatumXName, typeof(txtDescr));
            localElementDictionary.Add(txtRmkXName, typeof(txtRmk));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Obstacle - UID
    /// </para>
    /// <para>
    /// Regular expression: (OgrUid, geoLat, geoLong)
    /// </para>
    /// </summary>
    public partial class ObstacleUidType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName OgrUidXName = System.Xml.Linq.XName.Get("OgrUid", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName geoLatXName = System.Xml.Linq.XName.Get("geoLat", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName geoLongXName = System.Xml.Linq.XName.Get("geoLong", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName midXName = System.Xml.Linq.XName.Get("mid", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("ObstacleUidType", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator ObstacleUidType(XElement xe) { return XTypedServices.ToXTypedElement<ObstacleUidType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static ObstacleUidType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(OgrUidXName), new NamedContentModelEntity(geoLatXName), new NamedContentModelEntity(geoLongXName));
        }
        
        /// <summary>
        /// <para>
        /// Obstacle - UID
        /// </para>
        /// <para>
        /// Regular expression: (OgrUid, geoLat, geoLong)
        /// </para>
        /// </summary>
        public ObstacleUidType() {
        }
        
        /// <summary>
        /// <para>
        /// a version of Obstacle group
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (OgrUid, geoLat, geoLong)
        /// </para>
        /// </summary>
        public virtual ObstacleGroupUidType OgrUid {
            get {
                XElement x = this.GetElement(OgrUidXName);
                return ((ObstacleGroupUidType)(x));
            }
            set {
                this.SetElement(OgrUidXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Latitude
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (OgrUid, geoLat, geoLong)
        /// </para>
        /// </summary>
        public virtual geoLat geoLat {
            get {
                XElement x = this.GetElement(geoLatXName);
                return ((geoLat)(x));
            }
            set {
                this.SetElement(geoLatXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Longitude
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (OgrUid, geoLat, geoLong)
        /// </para>
        /// </summary>
        public virtual geoLong geoLong {
            get {
                XElement x = this.GetElement(geoLongXName);
                return ((geoLong)(x));
            }
            set {
                this.SetElement(geoLongXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string mid {
            get {
                XAttribute x = this.Attribute(midXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(midXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ObstacleUidType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(OgrUidXName, typeof(ObstacleGroupUidType));
            localElementDictionary.Add(geoLatXName, typeof(geoLat));
            localElementDictionary.Add(geoLongXName, typeof(geoLong));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Oil
    /// </para>
    /// <para>
    /// Regular expression: (OilUid, txtDescr?, txtRmk?)
    /// </para>
    /// </summary>
    public partial class OilType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName OilUidXName = System.Xml.Linq.XName.Get("OilUid", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName txtDescrXName = System.Xml.Linq.XName.Get("txtDescr", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName txtRmkXName = System.Xml.Linq.XName.Get("txtRmk", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName sourceXName = System.Xml.Linq.XName.Get("source", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("OilType", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator OilType(XElement xe) { return XTypedServices.ToXTypedElement<OilType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static OilType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(OilUidXName), new NamedContentModelEntity(txtDescrXName), new NamedContentModelEntity(txtRmkXName));
        }
        
        /// <summary>
        /// <para>
        /// Oil
        /// </para>
        /// <para>
        /// Regular expression: (OilUid, txtDescr?, txtRmk?)
        /// </para>
        /// </summary>
        public OilType() {
        }
        
        /// <summary>
        /// <para>
        /// a version of Oil
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (OilUid, txtDescr?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual OilUidType OilUid {
            get {
                XElement x = this.GetElement(OilUidXName);
                return ((OilUidType)(x));
            }
            set {
                this.SetElement(OilUidXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Description
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (OilUid, txtDescr?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual txtDescr txtDescr {
            get {
                XElement x = this.GetElement(txtDescrXName);
                return ((txtDescr)(x));
            }
            set {
                this.SetElement(txtDescrXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Remark
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (OilUid, txtDescr?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual txtRmk txtRmk {
            get {
                XElement x = this.GetElement(txtRmkXName);
                return ((txtRmk)(x));
            }
            set {
                this.SetElement(txtRmkXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string source {
            get {
                XAttribute x = this.Attribute(sourceXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(sourceXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<OilType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(OilUidXName, typeof(OilUidType));
            localElementDictionary.Add(txtDescrXName, typeof(txtDescr));
            localElementDictionary.Add(txtRmkXName, typeof(txtRmk));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Oil - UID
    /// </para>
    /// <para>
    /// Regular expression: (AhpUid, codeCat)
    /// </para>
    /// </summary>
    public partial class OilUidType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName AhpUidXName = System.Xml.Linq.XName.Get("AhpUid", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName codeCatXName = System.Xml.Linq.XName.Get("codeCat", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName midXName = System.Xml.Linq.XName.Get("mid", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("OilUidType", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator OilUidType(XElement xe) { return XTypedServices.ToXTypedElement<OilUidType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static OilUidType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(AhpUidXName), new NamedContentModelEntity(codeCatXName));
        }
        
        /// <summary>
        /// <para>
        /// Oil - UID
        /// </para>
        /// <para>
        /// Regular expression: (AhpUid, codeCat)
        /// </para>
        /// </summary>
        public OilUidType() {
        }
        
        /// <summary>
        /// <para>
        /// Oil is available at Aerodrome / Heliport
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (AhpUid, codeCat)
        /// </para>
        /// </summary>
        public virtual AerodromeHeliportUidType AhpUid {
            get {
                XElement x = this.GetElement(AhpUidXName);
                return ((AerodromeHeliportUidType)(x));
            }
            set {
                this.SetElement(AhpUidXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Category
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (AhpUid, codeCat)
        /// </para>
        /// </summary>
        public virtual codeCatOil codeCat {
            get {
                XElement x = this.GetElement(codeCatXName);
                return ((codeCatOil)(x));
            }
            set {
                this.SetElement(codeCatXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string mid {
            get {
                XAttribute x = this.Attribute(midXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(midXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<OilUidType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(AhpUidXName, typeof(AerodromeHeliportUidType));
            localElementDictionary.Add(codeCatXName, typeof(codeCatOil));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Organisaton or authority - Contact address
    /// </para>
    /// <para>
    /// Regular expression: (OaaUid, txtAddress, txtRmk?)
    /// </para>
    /// </summary>
    public partial class OrganisationAuthorityAddressType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName OaaUidXName = System.Xml.Linq.XName.Get("OaaUid", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName txtAddressXName = System.Xml.Linq.XName.Get("txtAddress", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName txtRmkXName = System.Xml.Linq.XName.Get("txtRmk", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName sourceXName = System.Xml.Linq.XName.Get("source", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("OrganisationAuthorityAddressType", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator OrganisationAuthorityAddressType(XElement xe) { return XTypedServices.ToXTypedElement<OrganisationAuthorityAddressType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static OrganisationAuthorityAddressType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(OaaUidXName), new NamedContentModelEntity(txtAddressXName), new NamedContentModelEntity(txtRmkXName));
        }
        
        /// <summary>
        /// <para>
        /// Organisaton or authority - Contact address
        /// </para>
        /// <para>
        /// Regular expression: (OaaUid, txtAddress, txtRmk?)
        /// </para>
        /// </summary>
        public OrganisationAuthorityAddressType() {
        }
        
        /// <summary>
        /// <para>
        /// a version of Organisaton or authority - Contact address
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (OaaUid, txtAddress, txtRmk?)
        /// </para>
        /// </summary>
        public virtual OrganisationAuthorityAddressUidType OaaUid {
            get {
                XElement x = this.GetElement(OaaUidXName);
                return ((OrganisationAuthorityAddressUidType)(x));
            }
            set {
                this.SetElement(OaaUidXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Full address
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (OaaUid, txtAddress, txtRmk?)
        /// </para>
        /// </summary>
        public virtual txtAddress txtAddress {
            get {
                XElement x = this.GetElement(txtAddressXName);
                return ((txtAddress)(x));
            }
            set {
                this.SetElement(txtAddressXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Remark
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (OaaUid, txtAddress, txtRmk?)
        /// </para>
        /// </summary>
        public virtual txtRmk txtRmk {
            get {
                XElement x = this.GetElement(txtRmkXName);
                return ((txtRmk)(x));
            }
            set {
                this.SetElement(txtRmkXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string source {
            get {
                XAttribute x = this.Attribute(sourceXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(sourceXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<OrganisationAuthorityAddressType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(OaaUidXName, typeof(OrganisationAuthorityAddressUidType));
            localElementDictionary.Add(txtAddressXName, typeof(txtAddress));
            localElementDictionary.Add(txtRmkXName, typeof(txtRmk));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Organisation or authority - Contact address - UID
    /// </para>
    /// <para>
    /// Regular expression: (OrgUid, codeType, noSeq)
    /// </para>
    /// </summary>
    public partial class OrganisationAuthorityAddressUidType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName OrgUidXName = System.Xml.Linq.XName.Get("OrgUid", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName codeTypeXName = System.Xml.Linq.XName.Get("codeType", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName noSeqXName = System.Xml.Linq.XName.Get("noSeq", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName midXName = System.Xml.Linq.XName.Get("mid", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("OrganisationAuthorityAddressUidType", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator OrganisationAuthorityAddressUidType(XElement xe) { return XTypedServices.ToXTypedElement<OrganisationAuthorityAddressUidType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static OrganisationAuthorityAddressUidType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(OrgUidXName), new NamedContentModelEntity(codeTypeXName), new NamedContentModelEntity(noSeqXName));
        }
        
        /// <summary>
        /// <para>
        /// Organisation or authority - Contact address - UID
        /// </para>
        /// <para>
        /// Regular expression: (OrgUid, codeType, noSeq)
        /// </para>
        /// </summary>
        public OrganisationAuthorityAddressUidType() {
        }
        
        /// <summary>
        /// <para>
        /// Organisaton or authority - Contact address is the contact line for Organisaton or authority
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (OrgUid, codeType, noSeq)
        /// </para>
        /// </summary>
        public virtual OrganisationAuthorityUidType OrgUid {
            get {
                XElement x = this.GetElement(OrgUidXName);
                return ((OrganisationAuthorityUidType)(x));
            }
            set {
                this.SetElement(OrgUidXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Type
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (OrgUid, codeType, noSeq)
        /// </para>
        /// </summary>
        public virtual codeTypeAddress codeType {
            get {
                XElement x = this.GetElement(codeTypeXName);
                return ((codeTypeAddress)(x));
            }
            set {
                this.SetElement(codeTypeXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Sequence number
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (OrgUid, codeType, noSeq)
        /// </para>
        /// </summary>
        public virtual noSeq noSeq {
            get {
                XElement x = this.GetElement(noSeqXName);
                return ((noSeq)(x));
            }
            set {
                this.SetElement(noSeqXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string mid {
            get {
                XAttribute x = this.Attribute(midXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(midXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<OrganisationAuthorityAddressUidType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(OrgUidXName, typeof(OrganisationAuthorityUidType));
            localElementDictionary.Add(codeTypeXName, typeof(codeTypeAddress));
            localElementDictionary.Add(noSeqXName, typeof(noSeq));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Organisaton or authority - Association
    /// </para>
    /// <para>
    /// Regular expression: (OasUid, txtRmk?)
    /// </para>
    /// </summary>
    public partial class OrganisationAuthorityAssociationType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName OasUidXName = System.Xml.Linq.XName.Get("OasUid", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName txtRmkXName = System.Xml.Linq.XName.Get("txtRmk", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName sourceXName = System.Xml.Linq.XName.Get("source", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("OrganisationAuthorityAssociationType", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator OrganisationAuthorityAssociationType(XElement xe) { return XTypedServices.ToXTypedElement<OrganisationAuthorityAssociationType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static OrganisationAuthorityAssociationType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(OasUidXName), new NamedContentModelEntity(txtRmkXName));
        }
        
        /// <summary>
        /// <para>
        /// Organisaton or authority - Association
        /// </para>
        /// <para>
        /// Regular expression: (OasUid, txtRmk?)
        /// </para>
        /// </summary>
        public OrganisationAuthorityAssociationType() {
        }
        
        /// <summary>
        /// <para>
        /// a version of Organisaton or authority - Association
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (OasUid, txtRmk?)
        /// </para>
        /// </summary>
        public virtual OrganisationAuthorityAssociationUidType OasUid {
            get {
                XElement x = this.GetElement(OasUidXName);
                return ((OrganisationAuthorityAssociationUidType)(x));
            }
            set {
                this.SetElement(OasUidXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Remark
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (OasUid, txtRmk?)
        /// </para>
        /// </summary>
        public virtual txtRmk txtRmk {
            get {
                XElement x = this.GetElement(txtRmkXName);
                return ((txtRmk)(x));
            }
            set {
                this.SetElement(txtRmkXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string source {
            get {
                XAttribute x = this.Attribute(sourceXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(sourceXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<OrganisationAuthorityAssociationType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(OasUidXName, typeof(OrganisationAuthorityAssociationUidType));
            localElementDictionary.Add(txtRmkXName, typeof(txtRmk));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Organisaton or authority - Association - UID
    /// </para>
    /// <para>
    /// Regular expression: (OrgUidChi, OrgUidPar, codeType)
    /// </para>
    /// </summary>
    public partial class OrganisationAuthorityAssociationUidType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName OrgUidChiXName = System.Xml.Linq.XName.Get("OrgUidChi", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName OrgUidParXName = System.Xml.Linq.XName.Get("OrgUidPar", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName codeTypeXName = System.Xml.Linq.XName.Get("codeType", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName midXName = System.Xml.Linq.XName.Get("mid", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("OrganisationAuthorityAssociationUidType", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator OrganisationAuthorityAssociationUidType(XElement xe) { return XTypedServices.ToXTypedElement<OrganisationAuthorityAssociationUidType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static OrganisationAuthorityAssociationUidType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(OrgUidChiXName), new NamedContentModelEntity(OrgUidParXName), new NamedContentModelEntity(codeTypeXName));
        }
        
        /// <summary>
        /// <para>
        /// Organisaton or authority - Association - UID
        /// </para>
        /// <para>
        /// Regular expression: (OrgUidChi, OrgUidPar, codeType)
        /// </para>
        /// </summary>
        public OrganisationAuthorityAssociationUidType() {
        }
        
        /// <summary>
        /// <para>
        /// Organisaton or authority - Association is having as child Organisaton or authority
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (OrgUidChi, OrgUidPar, codeType)
        /// </para>
        /// </summary>
        public virtual OrganisationAuthorityUidType OrgUidChi {
            get {
                XElement x = this.GetElement(OrgUidChiXName);
                return ((OrganisationAuthorityUidType)(x));
            }
            set {
                this.SetElement(OrgUidChiXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Organisaton or authority - Association is having as parent Organisaton or authority
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (OrgUidChi, OrgUidPar, codeType)
        /// </para>
        /// </summary>
        public virtual OrganisationAuthorityUidType OrgUidPar {
            get {
                XElement x = this.GetElement(OrgUidParXName);
                return ((OrganisationAuthorityUidType)(x));
            }
            set {
                this.SetElement(OrgUidParXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Type
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (OrgUidChi, OrgUidPar, codeType)
        /// </para>
        /// </summary>
        public virtual codeTypeAssocOrg codeType {
            get {
                XElement x = this.GetElement(codeTypeXName);
                return ((codeTypeAssocOrg)(x));
            }
            set {
                this.SetElement(codeTypeXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string mid {
            get {
                XAttribute x = this.Attribute(midXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(midXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<OrganisationAuthorityAssociationUidType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(OrgUidChiXName, typeof(OrganisationAuthorityUidType));
            localElementDictionary.Add(OrgUidParXName, typeof(OrganisationAuthorityUidType));
            localElementDictionary.Add(codeTypeXName, typeof(codeTypeAssocOrg));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Organisaton or authority
    /// </para>
    /// <para>
    /// Regular expression: (OrgUid, codeId?, codeType, txtRmk?)
    /// </para>
    /// </summary>
    public partial class OrganisationAuthorityType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName OrgUidXName = System.Xml.Linq.XName.Get("OrgUid", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName codeIdXName = System.Xml.Linq.XName.Get("codeId", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName codeTypeXName = System.Xml.Linq.XName.Get("codeType", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName txtRmkXName = System.Xml.Linq.XName.Get("txtRmk", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName sourceXName = System.Xml.Linq.XName.Get("source", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("OrganisationAuthorityType", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator OrganisationAuthorityType(XElement xe) { return XTypedServices.ToXTypedElement<OrganisationAuthorityType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static OrganisationAuthorityType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(OrgUidXName), new NamedContentModelEntity(codeIdXName), new NamedContentModelEntity(codeTypeXName), new NamedContentModelEntity(txtRmkXName));
        }
        
        /// <summary>
        /// <para>
        /// Organisaton or authority
        /// </para>
        /// <para>
        /// Regular expression: (OrgUid, codeId?, codeType, txtRmk?)
        /// </para>
        /// </summary>
        public OrganisationAuthorityType() {
        }
        
        /// <summary>
        /// <para>
        /// a version of Organisaton or authority
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (OrgUid, codeId?, codeType, txtRmk?)
        /// </para>
        /// </summary>
        public virtual OrganisationAuthorityUidType OrgUid {
            get {
                XElement x = this.GetElement(OrgUidXName);
                return ((OrganisationAuthorityUidType)(x));
            }
            set {
                this.SetElement(OrgUidXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Identification
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (OrgUid, codeId?, codeType, txtRmk?)
        /// </para>
        /// </summary>
        public virtual codeIdOrg codeId {
            get {
                XElement x = this.GetElement(codeIdXName);
                return ((codeIdOrg)(x));
            }
            set {
                this.SetElement(codeIdXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Type
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (OrgUid, codeId?, codeType, txtRmk?)
        /// </para>
        /// </summary>
        public virtual codeTypeOrg codeType {
            get {
                XElement x = this.GetElement(codeTypeXName);
                return ((codeTypeOrg)(x));
            }
            set {
                this.SetElement(codeTypeXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Remark
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (OrgUid, codeId?, codeType, txtRmk?)
        /// </para>
        /// </summary>
        public virtual txtRmk txtRmk {
            get {
                XElement x = this.GetElement(txtRmkXName);
                return ((txtRmk)(x));
            }
            set {
                this.SetElement(txtRmkXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string source {
            get {
                XAttribute x = this.Attribute(sourceXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(sourceXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<OrganisationAuthorityType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(OrgUidXName, typeof(OrganisationAuthorityUidType));
            localElementDictionary.Add(codeIdXName, typeof(codeIdOrg));
            localElementDictionary.Add(codeTypeXName, typeof(codeTypeOrg));
            localElementDictionary.Add(txtRmkXName, typeof(txtRmk));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Organisaton or authority - UID
    /// </para>
    /// <para>
    /// Regular expression: (txtName)
    /// </para>
    /// </summary>
    public partial class OrganisationAuthorityUidType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName txtNameXName = System.Xml.Linq.XName.Get("txtName", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName midXName = System.Xml.Linq.XName.Get("mid", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName regionXName = System.Xml.Linq.XName.Get("region", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("OrganisationAuthorityUidType", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator OrganisationAuthorityUidType(XElement xe) { return XTypedServices.ToXTypedElement<OrganisationAuthorityUidType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static OrganisationAuthorityUidType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(txtNameXName));
        }
        
        /// <summary>
        /// <para>
        /// Organisaton or authority - UID
        /// </para>
        /// <para>
        /// Regular expression: (txtName)
        /// </para>
        /// </summary>
        public OrganisationAuthorityUidType() {
        }
        
        /// <summary>
        /// <para>
        /// Name
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (txtName)
        /// </para>
        /// </summary>
        public virtual txtName txtName {
            get {
                XElement x = this.GetElement(txtNameXName);
                return ((txtName)(x));
            }
            set {
                this.SetElement(txtNameXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string mid {
            get {
                XAttribute x = this.Attribute(midXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(midXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual string region {
            get {
                XAttribute x = this.Attribute(regionXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(regionXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<OrganisationAuthorityUidType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(txtNameXName, typeof(txtName));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Oxygen supplies
    /// </para>
    /// <para>
    /// Regular expression: (OxgUid, txtRmk?)
    /// </para>
    /// </summary>
    public partial class OxygenType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName OxgUidXName = System.Xml.Linq.XName.Get("OxgUid", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName txtRmkXName = System.Xml.Linq.XName.Get("txtRmk", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName sourceXName = System.Xml.Linq.XName.Get("source", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("OxygenType", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator OxygenType(XElement xe) { return XTypedServices.ToXTypedElement<OxygenType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static OxygenType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(OxgUidXName), new NamedContentModelEntity(txtRmkXName));
        }
        
        /// <summary>
        /// <para>
        /// Oxygen supplies
        /// </para>
        /// <para>
        /// Regular expression: (OxgUid, txtRmk?)
        /// </para>
        /// </summary>
        public OxygenType() {
        }
        
        /// <summary>
        /// <para>
        /// a version of Oxygen
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (OxgUid, txtRmk?)
        /// </para>
        /// </summary>
        public virtual OxygenUidType OxgUid {
            get {
                XElement x = this.GetElement(OxgUidXName);
                return ((OxygenUidType)(x));
            }
            set {
                this.SetElement(OxgUidXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Remark
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (OxgUid, txtRmk?)
        /// </para>
        /// </summary>
        public virtual txtRmk txtRmk {
            get {
                XElement x = this.GetElement(txtRmkXName);
                return ((txtRmk)(x));
            }
            set {
                this.SetElement(txtRmkXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string source {
            get {
                XAttribute x = this.Attribute(sourceXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(sourceXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<OxygenType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(OxgUidXName, typeof(OxygenUidType));
            localElementDictionary.Add(txtRmkXName, typeof(txtRmk));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Oxygen - UID
    /// </para>
    /// <para>
    /// Regular expression: (AhpUid, codeType)
    /// </para>
    /// </summary>
    public partial class OxygenUidType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName AhpUidXName = System.Xml.Linq.XName.Get("AhpUid", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName codeTypeXName = System.Xml.Linq.XName.Get("codeType", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName midXName = System.Xml.Linq.XName.Get("mid", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("OxygenUidType", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator OxygenUidType(XElement xe) { return XTypedServices.ToXTypedElement<OxygenUidType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static OxygenUidType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(AhpUidXName), new NamedContentModelEntity(codeTypeXName));
        }
        
        /// <summary>
        /// <para>
        /// Oxygen - UID
        /// </para>
        /// <para>
        /// Regular expression: (AhpUid, codeType)
        /// </para>
        /// </summary>
        public OxygenUidType() {
        }
        
        /// <summary>
        /// <para>
        /// Oxygen is available at Aerodrome / Heliport
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (AhpUid, codeType)
        /// </para>
        /// </summary>
        public virtual AerodromeHeliportUidType AhpUid {
            get {
                XElement x = this.GetElement(AhpUidXName);
                return ((AerodromeHeliportUidType)(x));
            }
            set {
                this.SetElement(AhpUidXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Type
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (AhpUid, codeType)
        /// </para>
        /// </summary>
        public virtual codeTypeOxygen codeType {
            get {
                XElement x = this.GetElement(codeTypeXName);
                return ((codeTypeOxygen)(x));
            }
            set {
                this.SetElement(codeTypeXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string mid {
            get {
                XAttribute x = this.Attribute(midXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(midXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<OxygenUidType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(AhpUidXName, typeof(AerodromeHeliportUidType));
            localElementDictionary.Add(codeTypeXName, typeof(codeTypeOxygen));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Passenger facility
    /// </para>
    /// <para>
    /// Regular expression: (PfyUid, txtDescr?, txtRmk?)
    /// </para>
    /// </summary>
    public partial class PassengerFacilityType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName PfyUidXName = System.Xml.Linq.XName.Get("PfyUid", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName txtDescrXName = System.Xml.Linq.XName.Get("txtDescr", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName txtRmkXName = System.Xml.Linq.XName.Get("txtRmk", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName sourceXName = System.Xml.Linq.XName.Get("source", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("PassengerFacilityType", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator PassengerFacilityType(XElement xe) { return XTypedServices.ToXTypedElement<PassengerFacilityType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static PassengerFacilityType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(PfyUidXName), new NamedContentModelEntity(txtDescrXName), new NamedContentModelEntity(txtRmkXName));
        }
        
        /// <summary>
        /// <para>
        /// Passenger facility
        /// </para>
        /// <para>
        /// Regular expression: (PfyUid, txtDescr?, txtRmk?)
        /// </para>
        /// </summary>
        public PassengerFacilityType() {
        }
        
        /// <summary>
        /// <para>
        /// a version of Passenger facility
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (PfyUid, txtDescr?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual PassengerFacilityUidType PfyUid {
            get {
                XElement x = this.GetElement(PfyUidXName);
                return ((PassengerFacilityUidType)(x));
            }
            set {
                this.SetElement(PfyUidXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Description
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (PfyUid, txtDescr?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual txtDescr txtDescr {
            get {
                XElement x = this.GetElement(txtDescrXName);
                return ((txtDescr)(x));
            }
            set {
                this.SetElement(txtDescrXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Remark
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (PfyUid, txtDescr?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual txtRmk txtRmk {
            get {
                XElement x = this.GetElement(txtRmkXName);
                return ((txtRmk)(x));
            }
            set {
                this.SetElement(txtRmkXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string source {
            get {
                XAttribute x = this.Attribute(sourceXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(sourceXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<PassengerFacilityType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(PfyUidXName, typeof(PassengerFacilityUidType));
            localElementDictionary.Add(txtDescrXName, typeof(txtDescr));
            localElementDictionary.Add(txtRmkXName, typeof(txtRmk));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Passenger facility - UID
    /// </para>
    /// <para>
    /// Regular expression: (AhpUid, codeType, noSeq)
    /// </para>
    /// </summary>
    public partial class PassengerFacilityUidType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName AhpUidXName = System.Xml.Linq.XName.Get("AhpUid", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName codeTypeXName = System.Xml.Linq.XName.Get("codeType", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName noSeqXName = System.Xml.Linq.XName.Get("noSeq", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName midXName = System.Xml.Linq.XName.Get("mid", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("PassengerFacilityUidType", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator PassengerFacilityUidType(XElement xe) { return XTypedServices.ToXTypedElement<PassengerFacilityUidType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static PassengerFacilityUidType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(AhpUidXName), new NamedContentModelEntity(codeTypeXName), new NamedContentModelEntity(noSeqXName));
        }
        
        /// <summary>
        /// <para>
        /// Passenger facility - UID
        /// </para>
        /// <para>
        /// Regular expression: (AhpUid, codeType, noSeq)
        /// </para>
        /// </summary>
        public PassengerFacilityUidType() {
        }
        
        /// <summary>
        /// <para>
        /// Passenger facility is associated with Aerodrome / Heliport
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (AhpUid, codeType, noSeq)
        /// </para>
        /// </summary>
        public virtual AerodromeHeliportUidType AhpUid {
            get {
                XElement x = this.GetElement(AhpUidXName);
                return ((AerodromeHeliportUidType)(x));
            }
            set {
                this.SetElement(AhpUidXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Type
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (AhpUid, codeType, noSeq)
        /// </para>
        /// </summary>
        public virtual codeTypePaxFac codeType {
            get {
                XElement x = this.GetElement(codeTypeXName);
                return ((codeTypePaxFac)(x));
            }
            set {
                this.SetElement(codeTypeXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Sequence number
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (AhpUid, codeType, noSeq)
        /// </para>
        /// </summary>
        public virtual noSeq noSeq {
            get {
                XElement x = this.GetElement(noSeqXName);
                return ((noSeq)(x));
            }
            set {
                this.SetElement(noSeqXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string mid {
            get {
                XAttribute x = this.Attribute(midXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(midXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<PassengerFacilityUidType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(AhpUidXName, typeof(AerodromeHeliportUidType));
            localElementDictionary.Add(codeTypeXName, typeof(codeTypePaxFac));
            localElementDictionary.Add(noSeqXName, typeof(noSeq));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Procedure leg
    /// </para>
    /// <para>
    /// Regular expression: ((SnyUid? | IlsUid? | MlsUid? | DmeUid? | NdbUid? | VorUid? | TcnUid?)?, (TcnUidFix | VorUidFix | DpnUidFix | NdbUidFix | DmeUidFix | MkrUidFix)?, (TcnUidCen | VorUidCen | DpnUidCen | NdbUidCen | DmeUidCen | MkrUidCen)?, codePhase?, codeType, valCourse?, codeTypeCourse?, codeDirTurn?, codeTurnValid?, codeDescrDistVer?, codeDistVerUpper?, valDistVerUpper?, uomDistVerUpper?, codeDistVerLower?, valDistVerLower?, uomDistVerLower?, valVerAngle?, valSpeedLimit?, uomSpeed?, codeSpeedRef?, valDist?, valDur?, uomDur?, valTheta?, valRho?, valBankAngle?, uomDistHorz?, codeRepAtc?, codeRoleFix?, txtRmk?)
    /// </para>
    /// </summary>
    public partial class ProcedureLegType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName SnyUidXName = System.Xml.Linq.XName.Get("SnyUid", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName IlsUidXName = System.Xml.Linq.XName.Get("IlsUid", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName MlsUidXName = System.Xml.Linq.XName.Get("MlsUid", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName DmeUidXName = System.Xml.Linq.XName.Get("DmeUid", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName NdbUidXName = System.Xml.Linq.XName.Get("NdbUid", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName VorUidXName = System.Xml.Linq.XName.Get("VorUid", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TcnUidXName = System.Xml.Linq.XName.Get("TcnUid", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TcnUidFixXName = System.Xml.Linq.XName.Get("TcnUidFix", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName VorUidFixXName = System.Xml.Linq.XName.Get("VorUidFix", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName DpnUidFixXName = System.Xml.Linq.XName.Get("DpnUidFix", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName NdbUidFixXName = System.Xml.Linq.XName.Get("NdbUidFix", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName DmeUidFixXName = System.Xml.Linq.XName.Get("DmeUidFix", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName MkrUidFixXName = System.Xml.Linq.XName.Get("MkrUidFix", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TcnUidCenXName = System.Xml.Linq.XName.Get("TcnUidCen", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName VorUidCenXName = System.Xml.Linq.XName.Get("VorUidCen", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName DpnUidCenXName = System.Xml.Linq.XName.Get("DpnUidCen", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName NdbUidCenXName = System.Xml.Linq.XName.Get("NdbUidCen", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName DmeUidCenXName = System.Xml.Linq.XName.Get("DmeUidCen", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName MkrUidCenXName = System.Xml.Linq.XName.Get("MkrUidCen", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName codePhaseXName = System.Xml.Linq.XName.Get("codePhase", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName codeTypeXName = System.Xml.Linq.XName.Get("codeType", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName valCourseXName = System.Xml.Linq.XName.Get("valCourse", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName codeTypeCourseXName = System.Xml.Linq.XName.Get("codeTypeCourse", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName codeDirTurnXName = System.Xml.Linq.XName.Get("codeDirTurn", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName codeTurnValidXName = System.Xml.Linq.XName.Get("codeTurnValid", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName codeDescrDistVerXName = System.Xml.Linq.XName.Get("codeDescrDistVer", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName codeDistVerUpperXName = System.Xml.Linq.XName.Get("codeDistVerUpper", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName valDistVerUpperXName = System.Xml.Linq.XName.Get("valDistVerUpper", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName uomDistVerUpperXName = System.Xml.Linq.XName.Get("uomDistVerUpper", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName codeDistVerLowerXName = System.Xml.Linq.XName.Get("codeDistVerLower", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName valDistVerLowerXName = System.Xml.Linq.XName.Get("valDistVerLower", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName uomDistVerLowerXName = System.Xml.Linq.XName.Get("uomDistVerLower", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName valVerAngleXName = System.Xml.Linq.XName.Get("valVerAngle", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName valSpeedLimitXName = System.Xml.Linq.XName.Get("valSpeedLimit", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName uomSpeedXName = System.Xml.Linq.XName.Get("uomSpeed", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName codeSpeedRefXName = System.Xml.Linq.XName.Get("codeSpeedRef", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName valDistXName = System.Xml.Linq.XName.Get("valDist", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName valDurXName = System.Xml.Linq.XName.Get("valDur", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName uomDurXName = System.Xml.Linq.XName.Get("uomDur", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName valThetaXName = System.Xml.Linq.XName.Get("valTheta", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName valRhoXName = System.Xml.Linq.XName.Get("valRho", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName valBankAngleXName = System.Xml.Linq.XName.Get("valBankAngle", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName uomDistHorzXName = System.Xml.Linq.XName.Get("uomDistHorz", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName codeRepAtcXName = System.Xml.Linq.XName.Get("codeRepAtc", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName codeRoleFixXName = System.Xml.Linq.XName.Get("codeRoleFix", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName txtRmkXName = System.Xml.Linq.XName.Get("txtRmk", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("ProcedureLegType", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator ProcedureLegType(XElement xe) { return XTypedServices.ToXTypedElement<ProcedureLegType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static ProcedureLegType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new ChoiceContentModelEntity(new NamedContentModelEntity(SnyUidXName), new NamedContentModelEntity(IlsUidXName), new NamedContentModelEntity(MlsUidXName), new NamedContentModelEntity(DmeUidXName), new NamedContentModelEntity(NdbUidXName), new NamedContentModelEntity(VorUidXName), new NamedContentModelEntity(TcnUidXName)), new ChoiceContentModelEntity(new NamedContentModelEntity(TcnUidFixXName), new NamedContentModelEntity(VorUidFixXName), new NamedContentModelEntity(DpnUidFixXName), new NamedContentModelEntity(NdbUidFixXName), new NamedContentModelEntity(DmeUidFixXName), new NamedContentModelEntity(MkrUidFixXName)), new ChoiceContentModelEntity(new NamedContentModelEntity(TcnUidCenXName), new NamedContentModelEntity(VorUidCenXName), new NamedContentModelEntity(DpnUidCenXName), new NamedContentModelEntity(NdbUidCenXName), new NamedContentModelEntity(DmeUidCenXName), new NamedContentModelEntity(MkrUidCenXName)), new NamedContentModelEntity(codePhaseXName), new NamedContentModelEntity(codeTypeXName), new NamedContentModelEntity(valCourseXName), new NamedContentModelEntity(codeTypeCourseXName), new NamedContentModelEntity(codeDirTurnXName), new NamedContentModelEntity(codeTurnValidXName), new NamedContentModelEntity(codeDescrDistVerXName), new NamedContentModelEntity(codeDistVerUpperXName), new NamedContentModelEntity(valDistVerUpperXName), new NamedContentModelEntity(uomDistVerUpperXName), new NamedContentModelEntity(codeDistVerLowerXName), new NamedContentModelEntity(valDistVerLowerXName), new NamedContentModelEntity(uomDistVerLowerXName), new NamedContentModelEntity(valVerAngleXName), new NamedContentModelEntity(valSpeedLimitXName), new NamedContentModelEntity(uomSpeedXName), new NamedContentModelEntity(codeSpeedRefXName), new NamedContentModelEntity(valDistXName), new NamedContentModelEntity(valDurXName), new NamedContentModelEntity(uomDurXName), new NamedContentModelEntity(valThetaXName), new NamedContentModelEntity(valRhoXName), new NamedContentModelEntity(valBankAngleXName), new NamedContentModelEntity(uomDistHorzXName), new NamedContentModelEntity(codeRepAtcXName), new NamedContentModelEntity(codeRoleFixXName), new NamedContentModelEntity(txtRmkXName));
        }
        
        /// <summary>
        /// <para>
        /// Procedure leg
        /// </para>
        /// <para>
        /// Regular expression: ((SnyUid? | IlsUid? | MlsUid? | DmeUid? | NdbUid? | VorUid? | TcnUid?)?, (TcnUidFix | VorUidFix | DpnUidFix | NdbUidFix | DmeUidFix | MkrUidFix)?, (TcnUidCen | VorUidCen | DpnUidCen | NdbUidCen | DmeUidCen | MkrUidCen)?, codePhase?, codeType, valCourse?, codeTypeCourse?, codeDirTurn?, codeTurnValid?, codeDescrDistVer?, codeDistVerUpper?, valDistVerUpper?, uomDistVerUpper?, codeDistVerLower?, valDistVerLower?, uomDistVerLower?, valVerAngle?, valSpeedLimit?, uomSpeed?, codeSpeedRef?, valDist?, valDur?, uomDur?, valTheta?, valRho?, valBankAngle?, uomDistHorz?, codeRepAtc?, codeRoleFix?, txtRmk?)
        /// </para>
        /// </summary>
        public ProcedureLegType() {
        }
        
        /// <summary>
        /// <para>
        /// Procedure leg is recommended to use Special navigation system
        /// </para>
        /// <para>
        /// Occurrence: optional, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((SnyUid? | IlsUid? | MlsUid? | DmeUid? | NdbUid? | VorUid? | TcnUid?)?, (TcnUidFix | VorUidFix | DpnUidFix | NdbUidFix | DmeUidFix | MkrUidFix)?, (TcnUidCen | VorUidCen | DpnUidCen | NdbUidCen | DmeUidCen | MkrUidCen)?, codePhase?, codeType, valCourse?, codeTypeCourse?, codeDirTurn?, codeTurnValid?, codeDescrDistVer?, codeDistVerUpper?, valDistVerUpper?, uomDistVerUpper?, codeDistVerLower?, valDistVerLower?, uomDistVerLower?, valVerAngle?, valSpeedLimit?, uomSpeed?, codeSpeedRef?, valDist?, valDur?, uomDur?, valTheta?, valRho?, valBankAngle?, uomDistHorz?, codeRepAtc?, codeRoleFix?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual SpecialNavigationSystemUidType SnyUid {
            get {
                XElement x = this.GetElement(SnyUidXName);
                return ((SpecialNavigationSystemUidType)(x));
            }
            set {
                this.SetElement(SnyUidXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Procedure leg is recommended to use Instrument landing system [ILS]
        /// </para>
        /// <para>
        /// Occurrence: optional, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((SnyUid? | IlsUid? | MlsUid? | DmeUid? | NdbUid? | VorUid? | TcnUid?)?, (TcnUidFix | VorUidFix | DpnUidFix | NdbUidFix | DmeUidFix | MkrUidFix)?, (TcnUidCen | VorUidCen | DpnUidCen | NdbUidCen | DmeUidCen | MkrUidCen)?, codePhase?, codeType, valCourse?, codeTypeCourse?, codeDirTurn?, codeTurnValid?, codeDescrDistVer?, codeDistVerUpper?, valDistVerUpper?, uomDistVerUpper?, codeDistVerLower?, valDistVerLower?, uomDistVerLower?, valVerAngle?, valSpeedLimit?, uomSpeed?, codeSpeedRef?, valDist?, valDur?, uomDur?, valTheta?, valRho?, valBankAngle?, uomDistHorz?, codeRepAtc?, codeRoleFix?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual IlsUidType IlsUid {
            get {
                XElement x = this.GetElement(IlsUidXName);
                return ((IlsUidType)(x));
            }
            set {
                this.SetElement(IlsUidXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Procedure leg is recommended to use Microwave landing system [MLS]
        /// </para>
        /// <para>
        /// Occurrence: optional, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((SnyUid? | IlsUid? | MlsUid? | DmeUid? | NdbUid? | VorUid? | TcnUid?)?, (TcnUidFix | VorUidFix | DpnUidFix | NdbUidFix | DmeUidFix | MkrUidFix)?, (TcnUidCen | VorUidCen | DpnUidCen | NdbUidCen | DmeUidCen | MkrUidCen)?, codePhase?, codeType, valCourse?, codeTypeCourse?, codeDirTurn?, codeTurnValid?, codeDescrDistVer?, codeDistVerUpper?, valDistVerUpper?, uomDistVerUpper?, codeDistVerLower?, valDistVerLower?, uomDistVerLower?, valVerAngle?, valSpeedLimit?, uomSpeed?, codeSpeedRef?, valDist?, valDur?, uomDur?, valTheta?, valRho?, valBankAngle?, uomDistHorz?, codeRepAtc?, codeRoleFix?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual MlsUidType MlsUid {
            get {
                XElement x = this.GetElement(MlsUidXName);
                return ((MlsUidType)(x));
            }
            set {
                this.SetElement(MlsUidXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Procedure leg is recommended to use Distance measuring equipment [DME]
        /// </para>
        /// <para>
        /// Occurrence: optional, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((SnyUid? | IlsUid? | MlsUid? | DmeUid? | NdbUid? | VorUid? | TcnUid?)?, (TcnUidFix | VorUidFix | DpnUidFix | NdbUidFix | DmeUidFix | MkrUidFix)?, (TcnUidCen | VorUidCen | DpnUidCen | NdbUidCen | DmeUidCen | MkrUidCen)?, codePhase?, codeType, valCourse?, codeTypeCourse?, codeDirTurn?, codeTurnValid?, codeDescrDistVer?, codeDistVerUpper?, valDistVerUpper?, uomDistVerUpper?, codeDistVerLower?, valDistVerLower?, uomDistVerLower?, valVerAngle?, valSpeedLimit?, uomSpeed?, codeSpeedRef?, valDist?, valDur?, uomDur?, valTheta?, valRho?, valBankAngle?, uomDistHorz?, codeRepAtc?, codeRoleFix?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual DmeUidType DmeUid {
            get {
                XElement x = this.GetElement(DmeUidXName);
                return ((DmeUidType)(x));
            }
            set {
                this.SetElement(DmeUidXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Procedure leg is recommended to use Non-directional radio beacon [NDB]
        /// </para>
        /// <para>
        /// Occurrence: optional, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((SnyUid? | IlsUid? | MlsUid? | DmeUid? | NdbUid? | VorUid? | TcnUid?)?, (TcnUidFix | VorUidFix | DpnUidFix | NdbUidFix | DmeUidFix | MkrUidFix)?, (TcnUidCen | VorUidCen | DpnUidCen | NdbUidCen | DmeUidCen | MkrUidCen)?, codePhase?, codeType, valCourse?, codeTypeCourse?, codeDirTurn?, codeTurnValid?, codeDescrDistVer?, codeDistVerUpper?, valDistVerUpper?, uomDistVerUpper?, codeDistVerLower?, valDistVerLower?, uomDistVerLower?, valVerAngle?, valSpeedLimit?, uomSpeed?, codeSpeedRef?, valDist?, valDur?, uomDur?, valTheta?, valRho?, valBankAngle?, uomDistHorz?, codeRepAtc?, codeRoleFix?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual NdbUidType NdbUid {
            get {
                XElement x = this.GetElement(NdbUidXName);
                return ((NdbUidType)(x));
            }
            set {
                this.SetElement(NdbUidXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Procedure leg is recommended to use VHF omnidirectional radio range beacon [VOR]
        /// </para>
        /// <para>
        /// Occurrence: optional, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((SnyUid? | IlsUid? | MlsUid? | DmeUid? | NdbUid? | VorUid? | TcnUid?)?, (TcnUidFix | VorUidFix | DpnUidFix | NdbUidFix | DmeUidFix | MkrUidFix)?, (TcnUidCen | VorUidCen | DpnUidCen | NdbUidCen | DmeUidCen | MkrUidCen)?, codePhase?, codeType, valCourse?, codeTypeCourse?, codeDirTurn?, codeTurnValid?, codeDescrDistVer?, codeDistVerUpper?, valDistVerUpper?, uomDistVerUpper?, codeDistVerLower?, valDistVerLower?, uomDistVerLower?, valVerAngle?, valSpeedLimit?, uomSpeed?, codeSpeedRef?, valDist?, valDur?, uomDur?, valTheta?, valRho?, valBankAngle?, uomDistHorz?, codeRepAtc?, codeRoleFix?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual VorUidType VorUid {
            get {
                XElement x = this.GetElement(VorUidXName);
                return ((VorUidType)(x));
            }
            set {
                this.SetElement(VorUidXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Procedure leg is recommended to use Tactical air navigation beacon [TACAN]
        /// </para>
        /// <para>
        /// Occurrence: optional, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((SnyUid? | IlsUid? | MlsUid? | DmeUid? | NdbUid? | VorUid? | TcnUid?)?, (TcnUidFix | VorUidFix | DpnUidFix | NdbUidFix | DmeUidFix | MkrUidFix)?, (TcnUidCen | VorUidCen | DpnUidCen | NdbUidCen | DmeUidCen | MkrUidCen)?, codePhase?, codeType, valCourse?, codeTypeCourse?, codeDirTurn?, codeTurnValid?, codeDescrDistVer?, codeDistVerUpper?, valDistVerUpper?, uomDistVerUpper?, codeDistVerLower?, valDistVerLower?, uomDistVerLower?, valVerAngle?, valSpeedLimit?, uomSpeed?, codeSpeedRef?, valDist?, valDur?, uomDur?, valTheta?, valRho?, valBankAngle?, uomDistHorz?, codeRepAtc?, codeRoleFix?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual TacanUidType TcnUid {
            get {
                XElement x = this.GetElement(TcnUidXName);
                return ((TacanUidType)(x));
            }
            set {
                this.SetElement(TcnUidXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Significant point used as fix is at Tactical air navigation beacon [TACAN]
        /// </para>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((SnyUid? | IlsUid? | MlsUid? | DmeUid? | NdbUid? | VorUid? | TcnUid?)?, (TcnUidFix | VorUidFix | DpnUidFix | NdbUidFix | DmeUidFix | MkrUidFix)?, (TcnUidCen | VorUidCen | DpnUidCen | NdbUidCen | DmeUidCen | MkrUidCen)?, codePhase?, codeType, valCourse?, codeTypeCourse?, codeDirTurn?, codeTurnValid?, codeDescrDistVer?, codeDistVerUpper?, valDistVerUpper?, uomDistVerUpper?, codeDistVerLower?, valDistVerLower?, uomDistVerLower?, valVerAngle?, valSpeedLimit?, uomSpeed?, codeSpeedRef?, valDist?, valDur?, uomDur?, valTheta?, valRho?, valBankAngle?, uomDistHorz?, codeRepAtc?, codeRoleFix?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual TacanUidType TcnUidFix {
            get {
                XElement x = this.GetElement(TcnUidFixXName);
                return ((TacanUidType)(x));
            }
            set {
                this.SetElement(TcnUidFixXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Significant point used as fix is at VHF omnidirectional radio range beacon [VOR]
        /// </para>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((SnyUid? | IlsUid? | MlsUid? | DmeUid? | NdbUid? | VorUid? | TcnUid?)?, (TcnUidFix | VorUidFix | DpnUidFix | NdbUidFix | DmeUidFix | MkrUidFix)?, (TcnUidCen | VorUidCen | DpnUidCen | NdbUidCen | DmeUidCen | MkrUidCen)?, codePhase?, codeType, valCourse?, codeTypeCourse?, codeDirTurn?, codeTurnValid?, codeDescrDistVer?, codeDistVerUpper?, valDistVerUpper?, uomDistVerUpper?, codeDistVerLower?, valDistVerLower?, uomDistVerLower?, valVerAngle?, valSpeedLimit?, uomSpeed?, codeSpeedRef?, valDist?, valDur?, uomDur?, valTheta?, valRho?, valBankAngle?, uomDistHorz?, codeRepAtc?, codeRoleFix?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual VorUidType VorUidFix {
            get {
                XElement x = this.GetElement(VorUidFixXName);
                return ((VorUidType)(x));
            }
            set {
                this.SetElement(VorUidFixXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Significant point used as fix is at Designated point
        /// </para>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((SnyUid? | IlsUid? | MlsUid? | DmeUid? | NdbUid? | VorUid? | TcnUid?)?, (TcnUidFix | VorUidFix | DpnUidFix | NdbUidFix | DmeUidFix | MkrUidFix)?, (TcnUidCen | VorUidCen | DpnUidCen | NdbUidCen | DmeUidCen | MkrUidCen)?, codePhase?, codeType, valCourse?, codeTypeCourse?, codeDirTurn?, codeTurnValid?, codeDescrDistVer?, codeDistVerUpper?, valDistVerUpper?, uomDistVerUpper?, codeDistVerLower?, valDistVerLower?, uomDistVerLower?, valVerAngle?, valSpeedLimit?, uomSpeed?, codeSpeedRef?, valDist?, valDur?, uomDur?, valTheta?, valRho?, valBankAngle?, uomDistHorz?, codeRepAtc?, codeRoleFix?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual DesignatedPointUidType DpnUidFix {
            get {
                XElement x = this.GetElement(DpnUidFixXName);
                return ((DesignatedPointUidType)(x));
            }
            set {
                this.SetElement(DpnUidFixXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Significant point used as fix is at Non-directional radio beacon [NDB]
        /// </para>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((SnyUid? | IlsUid? | MlsUid? | DmeUid? | NdbUid? | VorUid? | TcnUid?)?, (TcnUidFix | VorUidFix | DpnUidFix | NdbUidFix | DmeUidFix | MkrUidFix)?, (TcnUidCen | VorUidCen | DpnUidCen | NdbUidCen | DmeUidCen | MkrUidCen)?, codePhase?, codeType, valCourse?, codeTypeCourse?, codeDirTurn?, codeTurnValid?, codeDescrDistVer?, codeDistVerUpper?, valDistVerUpper?, uomDistVerUpper?, codeDistVerLower?, valDistVerLower?, uomDistVerLower?, valVerAngle?, valSpeedLimit?, uomSpeed?, codeSpeedRef?, valDist?, valDur?, uomDur?, valTheta?, valRho?, valBankAngle?, uomDistHorz?, codeRepAtc?, codeRoleFix?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual NdbUidType NdbUidFix {
            get {
                XElement x = this.GetElement(NdbUidFixXName);
                return ((NdbUidType)(x));
            }
            set {
                this.SetElement(NdbUidFixXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Significant point used as fix is at Distance measuring equipment [DME]
        /// </para>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((SnyUid? | IlsUid? | MlsUid? | DmeUid? | NdbUid? | VorUid? | TcnUid?)?, (TcnUidFix | VorUidFix | DpnUidFix | NdbUidFix | DmeUidFix | MkrUidFix)?, (TcnUidCen | VorUidCen | DpnUidCen | NdbUidCen | DmeUidCen | MkrUidCen)?, codePhase?, codeType, valCourse?, codeTypeCourse?, codeDirTurn?, codeTurnValid?, codeDescrDistVer?, codeDistVerUpper?, valDistVerUpper?, uomDistVerUpper?, codeDistVerLower?, valDistVerLower?, uomDistVerLower?, valVerAngle?, valSpeedLimit?, uomSpeed?, codeSpeedRef?, valDist?, valDur?, uomDur?, valTheta?, valRho?, valBankAngle?, uomDistHorz?, codeRepAtc?, codeRoleFix?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual DmeUidType DmeUidFix {
            get {
                XElement x = this.GetElement(DmeUidFixXName);
                return ((DmeUidType)(x));
            }
            set {
                this.SetElement(DmeUidFixXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Significant point used as fix is at Marker [MKR]
        /// </para>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((SnyUid? | IlsUid? | MlsUid? | DmeUid? | NdbUid? | VorUid? | TcnUid?)?, (TcnUidFix | VorUidFix | DpnUidFix | NdbUidFix | DmeUidFix | MkrUidFix)?, (TcnUidCen | VorUidCen | DpnUidCen | NdbUidCen | DmeUidCen | MkrUidCen)?, codePhase?, codeType, valCourse?, codeTypeCourse?, codeDirTurn?, codeTurnValid?, codeDescrDistVer?, codeDistVerUpper?, valDistVerUpper?, uomDistVerUpper?, codeDistVerLower?, valDistVerLower?, uomDistVerLower?, valVerAngle?, valSpeedLimit?, uomSpeed?, codeSpeedRef?, valDist?, valDur?, uomDur?, valTheta?, valRho?, valBankAngle?, uomDistHorz?, codeRepAtc?, codeRoleFix?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual MkrUidType MkrUidFix {
            get {
                XElement x = this.GetElement(MkrUidFixXName);
                return ((MkrUidType)(x));
            }
            set {
                this.SetElement(MkrUidFixXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Significant point used as arc centre is at Tactical air navigation beacon [TACAN]
        /// </para>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((SnyUid? | IlsUid? | MlsUid? | DmeUid? | NdbUid? | VorUid? | TcnUid?)?, (TcnUidFix | VorUidFix | DpnUidFix | NdbUidFix | DmeUidFix | MkrUidFix)?, (TcnUidCen | VorUidCen | DpnUidCen | NdbUidCen | DmeUidCen | MkrUidCen)?, codePhase?, codeType, valCourse?, codeTypeCourse?, codeDirTurn?, codeTurnValid?, codeDescrDistVer?, codeDistVerUpper?, valDistVerUpper?, uomDistVerUpper?, codeDistVerLower?, valDistVerLower?, uomDistVerLower?, valVerAngle?, valSpeedLimit?, uomSpeed?, codeSpeedRef?, valDist?, valDur?, uomDur?, valTheta?, valRho?, valBankAngle?, uomDistHorz?, codeRepAtc?, codeRoleFix?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual TacanUidType TcnUidCen {
            get {
                XElement x = this.GetElement(TcnUidCenXName);
                return ((TacanUidType)(x));
            }
            set {
                this.SetElement(TcnUidCenXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Significant point used as arc centre is at VHF omnidirectional radio range beacon [VOR]
        /// </para>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((SnyUid? | IlsUid? | MlsUid? | DmeUid? | NdbUid? | VorUid? | TcnUid?)?, (TcnUidFix | VorUidFix | DpnUidFix | NdbUidFix | DmeUidFix | MkrUidFix)?, (TcnUidCen | VorUidCen | DpnUidCen | NdbUidCen | DmeUidCen | MkrUidCen)?, codePhase?, codeType, valCourse?, codeTypeCourse?, codeDirTurn?, codeTurnValid?, codeDescrDistVer?, codeDistVerUpper?, valDistVerUpper?, uomDistVerUpper?, codeDistVerLower?, valDistVerLower?, uomDistVerLower?, valVerAngle?, valSpeedLimit?, uomSpeed?, codeSpeedRef?, valDist?, valDur?, uomDur?, valTheta?, valRho?, valBankAngle?, uomDistHorz?, codeRepAtc?, codeRoleFix?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual VorUidType VorUidCen {
            get {
                XElement x = this.GetElement(VorUidCenXName);
                return ((VorUidType)(x));
            }
            set {
                this.SetElement(VorUidCenXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Significant point used as arc centre is at Designated point
        /// </para>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((SnyUid? | IlsUid? | MlsUid? | DmeUid? | NdbUid? | VorUid? | TcnUid?)?, (TcnUidFix | VorUidFix | DpnUidFix | NdbUidFix | DmeUidFix | MkrUidFix)?, (TcnUidCen | VorUidCen | DpnUidCen | NdbUidCen | DmeUidCen | MkrUidCen)?, codePhase?, codeType, valCourse?, codeTypeCourse?, codeDirTurn?, codeTurnValid?, codeDescrDistVer?, codeDistVerUpper?, valDistVerUpper?, uomDistVerUpper?, codeDistVerLower?, valDistVerLower?, uomDistVerLower?, valVerAngle?, valSpeedLimit?, uomSpeed?, codeSpeedRef?, valDist?, valDur?, uomDur?, valTheta?, valRho?, valBankAngle?, uomDistHorz?, codeRepAtc?, codeRoleFix?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual DesignatedPointUidType DpnUidCen {
            get {
                XElement x = this.GetElement(DpnUidCenXName);
                return ((DesignatedPointUidType)(x));
            }
            set {
                this.SetElement(DpnUidCenXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Significant point used as arc centre is at Non-directional radio beacon [NDB]
        /// </para>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((SnyUid? | IlsUid? | MlsUid? | DmeUid? | NdbUid? | VorUid? | TcnUid?)?, (TcnUidFix | VorUidFix | DpnUidFix | NdbUidFix | DmeUidFix | MkrUidFix)?, (TcnUidCen | VorUidCen | DpnUidCen | NdbUidCen | DmeUidCen | MkrUidCen)?, codePhase?, codeType, valCourse?, codeTypeCourse?, codeDirTurn?, codeTurnValid?, codeDescrDistVer?, codeDistVerUpper?, valDistVerUpper?, uomDistVerUpper?, codeDistVerLower?, valDistVerLower?, uomDistVerLower?, valVerAngle?, valSpeedLimit?, uomSpeed?, codeSpeedRef?, valDist?, valDur?, uomDur?, valTheta?, valRho?, valBankAngle?, uomDistHorz?, codeRepAtc?, codeRoleFix?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual NdbUidType NdbUidCen {
            get {
                XElement x = this.GetElement(NdbUidCenXName);
                return ((NdbUidType)(x));
            }
            set {
                this.SetElement(NdbUidCenXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Significant point used as arc centre is at Distance measuring equipment [DME]
        /// </para>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((SnyUid? | IlsUid? | MlsUid? | DmeUid? | NdbUid? | VorUid? | TcnUid?)?, (TcnUidFix | VorUidFix | DpnUidFix | NdbUidFix | DmeUidFix | MkrUidFix)?, (TcnUidCen | VorUidCen | DpnUidCen | NdbUidCen | DmeUidCen | MkrUidCen)?, codePhase?, codeType, valCourse?, codeTypeCourse?, codeDirTurn?, codeTurnValid?, codeDescrDistVer?, codeDistVerUpper?, valDistVerUpper?, uomDistVerUpper?, codeDistVerLower?, valDistVerLower?, uomDistVerLower?, valVerAngle?, valSpeedLimit?, uomSpeed?, codeSpeedRef?, valDist?, valDur?, uomDur?, valTheta?, valRho?, valBankAngle?, uomDistHorz?, codeRepAtc?, codeRoleFix?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual DmeUidType DmeUidCen {
            get {
                XElement x = this.GetElement(DmeUidCenXName);
                return ((DmeUidType)(x));
            }
            set {
                this.SetElement(DmeUidCenXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Significant point used as arc centre is at Marker [MKR]
        /// </para>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((SnyUid? | IlsUid? | MlsUid? | DmeUid? | NdbUid? | VorUid? | TcnUid?)?, (TcnUidFix | VorUidFix | DpnUidFix | NdbUidFix | DmeUidFix | MkrUidFix)?, (TcnUidCen | VorUidCen | DpnUidCen | NdbUidCen | DmeUidCen | MkrUidCen)?, codePhase?, codeType, valCourse?, codeTypeCourse?, codeDirTurn?, codeTurnValid?, codeDescrDistVer?, codeDistVerUpper?, valDistVerUpper?, uomDistVerUpper?, codeDistVerLower?, valDistVerLower?, uomDistVerLower?, valVerAngle?, valSpeedLimit?, uomSpeed?, codeSpeedRef?, valDist?, valDur?, uomDur?, valTheta?, valRho?, valBankAngle?, uomDistHorz?, codeRepAtc?, codeRoleFix?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual MkrUidType MkrUidCen {
            get {
                XElement x = this.GetElement(MkrUidCenXName);
                return ((MkrUidType)(x));
            }
            set {
                this.SetElement(MkrUidCenXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Phase
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: ((SnyUid? | IlsUid? | MlsUid? | DmeUid? | NdbUid? | VorUid? | TcnUid?)?, (TcnUidFix | VorUidFix | DpnUidFix | NdbUidFix | DmeUidFix | MkrUidFix)?, (TcnUidCen | VorUidCen | DpnUidCen | NdbUidCen | DmeUidCen | MkrUidCen)?, codePhase?, codeType, valCourse?, codeTypeCourse?, codeDirTurn?, codeTurnValid?, codeDescrDistVer?, codeDistVerUpper?, valDistVerUpper?, uomDistVerUpper?, codeDistVerLower?, valDistVerLower?, uomDistVerLower?, valVerAngle?, valSpeedLimit?, uomSpeed?, codeSpeedRef?, valDist?, valDur?, uomDur?, valTheta?, valRho?, valBankAngle?, uomDistHorz?, codeRepAtc?, codeRoleFix?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual codePhaseProc codePhase {
            get {
                XElement x = this.GetElement(codePhaseXName);
                return ((codePhaseProc)(x));
            }
            set {
                this.SetElement(codePhaseXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Type
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: ((SnyUid? | IlsUid? | MlsUid? | DmeUid? | NdbUid? | VorUid? | TcnUid?)?, (TcnUidFix | VorUidFix | DpnUidFix | NdbUidFix | DmeUidFix | MkrUidFix)?, (TcnUidCen | VorUidCen | DpnUidCen | NdbUidCen | DmeUidCen | MkrUidCen)?, codePhase?, codeType, valCourse?, codeTypeCourse?, codeDirTurn?, codeTurnValid?, codeDescrDistVer?, codeDistVerUpper?, valDistVerUpper?, uomDistVerUpper?, codeDistVerLower?, valDistVerLower?, uomDistVerLower?, valVerAngle?, valSpeedLimit?, uomSpeed?, codeSpeedRef?, valDist?, valDur?, uomDur?, valTheta?, valRho?, valBankAngle?, uomDistHorz?, codeRepAtc?, codeRoleFix?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual codeTypeProcPath codeType {
            get {
                XElement x = this.GetElement(codeTypeXName);
                return ((codeTypeProcPath)(x));
            }
            set {
                this.SetElement(codeTypeXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Course angle
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: ((SnyUid? | IlsUid? | MlsUid? | DmeUid? | NdbUid? | VorUid? | TcnUid?)?, (TcnUidFix | VorUidFix | DpnUidFix | NdbUidFix | DmeUidFix | MkrUidFix)?, (TcnUidCen | VorUidCen | DpnUidCen | NdbUidCen | DmeUidCen | MkrUidCen)?, codePhase?, codeType, valCourse?, codeTypeCourse?, codeDirTurn?, codeTurnValid?, codeDescrDistVer?, codeDistVerUpper?, valDistVerUpper?, uomDistVerUpper?, codeDistVerLower?, valDistVerLower?, uomDistVerLower?, valVerAngle?, valSpeedLimit?, uomSpeed?, codeSpeedRef?, valDist?, valDur?, uomDur?, valTheta?, valRho?, valBankAngle?, uomDistHorz?, codeRepAtc?, codeRoleFix?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual valAngleBrg valCourse {
            get {
                XElement x = this.GetElement(valCourseXName);
                return ((valAngleBrg)(x));
            }
            set {
                this.SetElement(valCourseXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Course type
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: ((SnyUid? | IlsUid? | MlsUid? | DmeUid? | NdbUid? | VorUid? | TcnUid?)?, (TcnUidFix | VorUidFix | DpnUidFix | NdbUidFix | DmeUidFix | MkrUidFix)?, (TcnUidCen | VorUidCen | DpnUidCen | NdbUidCen | DmeUidCen | MkrUidCen)?, codePhase?, codeType, valCourse?, codeTypeCourse?, codeDirTurn?, codeTurnValid?, codeDescrDistVer?, codeDistVerUpper?, valDistVerUpper?, uomDistVerUpper?, codeDistVerLower?, valDistVerLower?, uomDistVerLower?, valVerAngle?, valSpeedLimit?, uomSpeed?, codeSpeedRef?, valDist?, valDur?, uomDur?, valTheta?, valRho?, valBankAngle?, uomDistHorz?, codeRepAtc?, codeRoleFix?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual codeTypeCourse codeTypeCourse {
            get {
                XElement x = this.GetElement(codeTypeCourseXName);
                return ((codeTypeCourse)(x));
            }
            set {
                this.SetElement(codeTypeCourseXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Direction of the turn
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: ((SnyUid? | IlsUid? | MlsUid? | DmeUid? | NdbUid? | VorUid? | TcnUid?)?, (TcnUidFix | VorUidFix | DpnUidFix | NdbUidFix | DmeUidFix | MkrUidFix)?, (TcnUidCen | VorUidCen | DpnUidCen | NdbUidCen | DmeUidCen | MkrUidCen)?, codePhase?, codeType, valCourse?, codeTypeCourse?, codeDirTurn?, codeTurnValid?, codeDescrDistVer?, codeDistVerUpper?, valDistVerUpper?, uomDistVerUpper?, codeDistVerLower?, valDistVerLower?, uomDistVerLower?, valVerAngle?, valSpeedLimit?, uomSpeed?, codeSpeedRef?, valDist?, valDur?, uomDur?, valTheta?, valRho?, valBankAngle?, uomDistHorz?, codeRepAtc?, codeRoleFix?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual codeDirTurn codeDirTurn {
            get {
                XElement x = this.GetElement(codeDirTurnXName);
                return ((codeDirTurn)(x));
            }
            set {
                this.SetElement(codeDirTurnXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Fly-by
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: ((SnyUid? | IlsUid? | MlsUid? | DmeUid? | NdbUid? | VorUid? | TcnUid?)?, (TcnUidFix | VorUidFix | DpnUidFix | NdbUidFix | DmeUidFix | MkrUidFix)?, (TcnUidCen | VorUidCen | DpnUidCen | NdbUidCen | DmeUidCen | MkrUidCen)?, codePhase?, codeType, valCourse?, codeTypeCourse?, codeDirTurn?, codeTurnValid?, codeDescrDistVer?, codeDistVerUpper?, valDistVerUpper?, uomDistVerUpper?, codeDistVerLower?, valDistVerLower?, uomDistVerLower?, valVerAngle?, valSpeedLimit?, uomSpeed?, codeSpeedRef?, valDist?, valDur?, uomDur?, valTheta?, valRho?, valBankAngle?, uomDistHorz?, codeRepAtc?, codeRoleFix?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual codeYesNo codeTurnValid {
            get {
                XElement x = this.GetElement(codeTurnValidXName);
                return ((codeYesNo)(x));
            }
            set {
                this.SetElement(codeTurnValidXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Interpretation of vertical distance
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: ((SnyUid? | IlsUid? | MlsUid? | DmeUid? | NdbUid? | VorUid? | TcnUid?)?, (TcnUidFix | VorUidFix | DpnUidFix | NdbUidFix | DmeUidFix | MkrUidFix)?, (TcnUidCen | VorUidCen | DpnUidCen | NdbUidCen | DmeUidCen | MkrUidCen)?, codePhase?, codeType, valCourse?, codeTypeCourse?, codeDirTurn?, codeTurnValid?, codeDescrDistVer?, codeDistVerUpper?, valDistVerUpper?, uomDistVerUpper?, codeDistVerLower?, valDistVerLower?, uomDistVerLower?, valVerAngle?, valSpeedLimit?, uomSpeed?, codeSpeedRef?, valDist?, valDur?, uomDur?, valTheta?, valRho?, valBankAngle?, uomDistHorz?, codeRepAtc?, codeRoleFix?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual codeDescrDistVer codeDescrDistVer {
            get {
                XElement x = this.GetElement(codeDescrDistVerXName);
                return ((codeDescrDistVer)(x));
            }
            set {
                this.SetElement(codeDescrDistVerXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Reference for upper limit
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: ((SnyUid? | IlsUid? | MlsUid? | DmeUid? | NdbUid? | VorUid? | TcnUid?)?, (TcnUidFix | VorUidFix | DpnUidFix | NdbUidFix | DmeUidFix | MkrUidFix)?, (TcnUidCen | VorUidCen | DpnUidCen | NdbUidCen | DmeUidCen | MkrUidCen)?, codePhase?, codeType, valCourse?, codeTypeCourse?, codeDirTurn?, codeTurnValid?, codeDescrDistVer?, codeDistVerUpper?, valDistVerUpper?, uomDistVerUpper?, codeDistVerLower?, valDistVerLower?, uomDistVerLower?, valVerAngle?, valSpeedLimit?, uomSpeed?, codeSpeedRef?, valDist?, valDur?, uomDur?, valTheta?, valRho?, valBankAngle?, uomDistHorz?, codeRepAtc?, codeRoleFix?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual codeDistVer codeDistVerUpper {
            get {
                XElement x = this.GetElement(codeDistVerUpperXName);
                return ((codeDistVer)(x));
            }
            set {
                this.SetElement(codeDistVerUpperXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Upper limit
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: ((SnyUid? | IlsUid? | MlsUid? | DmeUid? | NdbUid? | VorUid? | TcnUid?)?, (TcnUidFix | VorUidFix | DpnUidFix | NdbUidFix | DmeUidFix | MkrUidFix)?, (TcnUidCen | VorUidCen | DpnUidCen | NdbUidCen | DmeUidCen | MkrUidCen)?, codePhase?, codeType, valCourse?, codeTypeCourse?, codeDirTurn?, codeTurnValid?, codeDescrDistVer?, codeDistVerUpper?, valDistVerUpper?, uomDistVerUpper?, codeDistVerLower?, valDistVerLower?, uomDistVerLower?, valVerAngle?, valSpeedLimit?, uomSpeed?, codeSpeedRef?, valDist?, valDur?, uomDur?, valTheta?, valRho?, valBankAngle?, uomDistHorz?, codeRepAtc?, codeRoleFix?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual valDistVer valDistVerUpper {
            get {
                XElement x = this.GetElement(valDistVerUpperXName);
                return ((valDistVer)(x));
            }
            set {
                this.SetElement(valDistVerUpperXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Unit of measurement [upper limit]
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: ((SnyUid? | IlsUid? | MlsUid? | DmeUid? | NdbUid? | VorUid? | TcnUid?)?, (TcnUidFix | VorUidFix | DpnUidFix | NdbUidFix | DmeUidFix | MkrUidFix)?, (TcnUidCen | VorUidCen | DpnUidCen | NdbUidCen | DmeUidCen | MkrUidCen)?, codePhase?, codeType, valCourse?, codeTypeCourse?, codeDirTurn?, codeTurnValid?, codeDescrDistVer?, codeDistVerUpper?, valDistVerUpper?, uomDistVerUpper?, codeDistVerLower?, valDistVerLower?, uomDistVerLower?, valVerAngle?, valSpeedLimit?, uomSpeed?, codeSpeedRef?, valDist?, valDur?, uomDur?, valTheta?, valRho?, valBankAngle?, uomDistHorz?, codeRepAtc?, codeRoleFix?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual uomDistVer uomDistVerUpper {
            get {
                XElement x = this.GetElement(uomDistVerUpperXName);
                return ((uomDistVer)(x));
            }
            set {
                this.SetElement(uomDistVerUpperXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Reference for lower limit
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: ((SnyUid? | IlsUid? | MlsUid? | DmeUid? | NdbUid? | VorUid? | TcnUid?)?, (TcnUidFix | VorUidFix | DpnUidFix | NdbUidFix | DmeUidFix | MkrUidFix)?, (TcnUidCen | VorUidCen | DpnUidCen | NdbUidCen | DmeUidCen | MkrUidCen)?, codePhase?, codeType, valCourse?, codeTypeCourse?, codeDirTurn?, codeTurnValid?, codeDescrDistVer?, codeDistVerUpper?, valDistVerUpper?, uomDistVerUpper?, codeDistVerLower?, valDistVerLower?, uomDistVerLower?, valVerAngle?, valSpeedLimit?, uomSpeed?, codeSpeedRef?, valDist?, valDur?, uomDur?, valTheta?, valRho?, valBankAngle?, uomDistHorz?, codeRepAtc?, codeRoleFix?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual codeDistVer codeDistVerLower {
            get {
                XElement x = this.GetElement(codeDistVerLowerXName);
                return ((codeDistVer)(x));
            }
            set {
                this.SetElement(codeDistVerLowerXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Lower limit
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: ((SnyUid? | IlsUid? | MlsUid? | DmeUid? | NdbUid? | VorUid? | TcnUid?)?, (TcnUidFix | VorUidFix | DpnUidFix | NdbUidFix | DmeUidFix | MkrUidFix)?, (TcnUidCen | VorUidCen | DpnUidCen | NdbUidCen | DmeUidCen | MkrUidCen)?, codePhase?, codeType, valCourse?, codeTypeCourse?, codeDirTurn?, codeTurnValid?, codeDescrDistVer?, codeDistVerUpper?, valDistVerUpper?, uomDistVerUpper?, codeDistVerLower?, valDistVerLower?, uomDistVerLower?, valVerAngle?, valSpeedLimit?, uomSpeed?, codeSpeedRef?, valDist?, valDur?, uomDur?, valTheta?, valRho?, valBankAngle?, uomDistHorz?, codeRepAtc?, codeRoleFix?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual valDistVer valDistVerLower {
            get {
                XElement x = this.GetElement(valDistVerLowerXName);
                return ((valDistVer)(x));
            }
            set {
                this.SetElement(valDistVerLowerXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Unit of measurement [lower limit]
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: ((SnyUid? | IlsUid? | MlsUid? | DmeUid? | NdbUid? | VorUid? | TcnUid?)?, (TcnUidFix | VorUidFix | DpnUidFix | NdbUidFix | DmeUidFix | MkrUidFix)?, (TcnUidCen | VorUidCen | DpnUidCen | NdbUidCen | DmeUidCen | MkrUidCen)?, codePhase?, codeType, valCourse?, codeTypeCourse?, codeDirTurn?, codeTurnValid?, codeDescrDistVer?, codeDistVerUpper?, valDistVerUpper?, uomDistVerUpper?, codeDistVerLower?, valDistVerLower?, uomDistVerLower?, valVerAngle?, valSpeedLimit?, uomSpeed?, codeSpeedRef?, valDist?, valDur?, uomDur?, valTheta?, valRho?, valBankAngle?, uomDistHorz?, codeRepAtc?, codeRoleFix?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual uomDistVer uomDistVerLower {
            get {
                XElement x = this.GetElement(uomDistVerLowerXName);
                return ((uomDistVer)(x));
            }
            set {
                this.SetElement(uomDistVerLowerXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Vertical climb angle
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: ((SnyUid? | IlsUid? | MlsUid? | DmeUid? | NdbUid? | VorUid? | TcnUid?)?, (TcnUidFix | VorUidFix | DpnUidFix | NdbUidFix | DmeUidFix | MkrUidFix)?, (TcnUidCen | VorUidCen | DpnUidCen | NdbUidCen | DmeUidCen | MkrUidCen)?, codePhase?, codeType, valCourse?, codeTypeCourse?, codeDirTurn?, codeTurnValid?, codeDescrDistVer?, codeDistVerUpper?, valDistVerUpper?, uomDistVerUpper?, codeDistVerLower?, valDistVerLower?, uomDistVerLower?, valVerAngle?, valSpeedLimit?, uomSpeed?, codeSpeedRef?, valDist?, valDur?, uomDur?, valTheta?, valRho?, valBankAngle?, uomDistHorz?, codeRepAtc?, codeRoleFix?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual valAngle valVerAngle {
            get {
                XElement x = this.GetElement(valVerAngleXName);
                return ((valAngle)(x));
            }
            set {
                this.SetElement(valVerAngleXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Speed limit
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: ((SnyUid? | IlsUid? | MlsUid? | DmeUid? | NdbUid? | VorUid? | TcnUid?)?, (TcnUidFix | VorUidFix | DpnUidFix | NdbUidFix | DmeUidFix | MkrUidFix)?, (TcnUidCen | VorUidCen | DpnUidCen | NdbUidCen | DmeUidCen | MkrUidCen)?, codePhase?, codeType, valCourse?, codeTypeCourse?, codeDirTurn?, codeTurnValid?, codeDescrDistVer?, codeDistVerUpper?, valDistVerUpper?, uomDistVerUpper?, codeDistVerLower?, valDistVerLower?, uomDistVerLower?, valVerAngle?, valSpeedLimit?, uomSpeed?, codeSpeedRef?, valDist?, valDur?, uomDur?, valTheta?, valRho?, valBankAngle?, uomDistHorz?, codeRepAtc?, codeRoleFix?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual valSpeed valSpeedLimit {
            get {
                XElement x = this.GetElement(valSpeedLimitXName);
                return ((valSpeed)(x));
            }
            set {
                this.SetElement(valSpeedLimitXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Unit of measurement [speed limit]
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: ((SnyUid? | IlsUid? | MlsUid? | DmeUid? | NdbUid? | VorUid? | TcnUid?)?, (TcnUidFix | VorUidFix | DpnUidFix | NdbUidFix | DmeUidFix | MkrUidFix)?, (TcnUidCen | VorUidCen | DpnUidCen | NdbUidCen | DmeUidCen | MkrUidCen)?, codePhase?, codeType, valCourse?, codeTypeCourse?, codeDirTurn?, codeTurnValid?, codeDescrDistVer?, codeDistVerUpper?, valDistVerUpper?, uomDistVerUpper?, codeDistVerLower?, valDistVerLower?, uomDistVerLower?, valVerAngle?, valSpeedLimit?, uomSpeed?, codeSpeedRef?, valDist?, valDur?, uomDur?, valTheta?, valRho?, valBankAngle?, uomDistHorz?, codeRepAtc?, codeRoleFix?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual uomSpeed uomSpeed {
            get {
                XElement x = this.GetElement(uomSpeedXName);
                return ((uomSpeed)(x));
            }
            set {
                this.SetElement(uomSpeedXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Reference system for speed value
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: ((SnyUid? | IlsUid? | MlsUid? | DmeUid? | NdbUid? | VorUid? | TcnUid?)?, (TcnUidFix | VorUidFix | DpnUidFix | NdbUidFix | DmeUidFix | MkrUidFix)?, (TcnUidCen | VorUidCen | DpnUidCen | NdbUidCen | DmeUidCen | MkrUidCen)?, codePhase?, codeType, valCourse?, codeTypeCourse?, codeDirTurn?, codeTurnValid?, codeDescrDistVer?, codeDistVerUpper?, valDistVerUpper?, uomDistVerUpper?, codeDistVerLower?, valDistVerLower?, uomDistVerLower?, valVerAngle?, valSpeedLimit?, uomSpeed?, codeSpeedRef?, valDist?, valDur?, uomDur?, valTheta?, valRho?, valBankAngle?, uomDistHorz?, codeRepAtc?, codeRoleFix?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual codeSpeedRef codeSpeedRef {
            get {
                XElement x = this.GetElement(codeSpeedRefXName);
                return ((codeSpeedRef)(x));
            }
            set {
                this.SetElement(codeSpeedRefXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Declared length
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: ((SnyUid? | IlsUid? | MlsUid? | DmeUid? | NdbUid? | VorUid? | TcnUid?)?, (TcnUidFix | VorUidFix | DpnUidFix | NdbUidFix | DmeUidFix | MkrUidFix)?, (TcnUidCen | VorUidCen | DpnUidCen | NdbUidCen | DmeUidCen | MkrUidCen)?, codePhase?, codeType, valCourse?, codeTypeCourse?, codeDirTurn?, codeTurnValid?, codeDescrDistVer?, codeDistVerUpper?, valDistVerUpper?, uomDistVerUpper?, codeDistVerLower?, valDistVerLower?, uomDistVerLower?, valVerAngle?, valSpeedLimit?, uomSpeed?, codeSpeedRef?, valDist?, valDur?, uomDur?, valTheta?, valRho?, valBankAngle?, uomDistHorz?, codeRepAtc?, codeRoleFix?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual valDistHorz valDist {
            get {
                XElement x = this.GetElement(valDistXName);
                return ((valDistHorz)(x));
            }
            set {
                this.SetElement(valDistXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Declared duration
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: ((SnyUid? | IlsUid? | MlsUid? | DmeUid? | NdbUid? | VorUid? | TcnUid?)?, (TcnUidFix | VorUidFix | DpnUidFix | NdbUidFix | DmeUidFix | MkrUidFix)?, (TcnUidCen | VorUidCen | DpnUidCen | NdbUidCen | DmeUidCen | MkrUidCen)?, codePhase?, codeType, valCourse?, codeTypeCourse?, codeDirTurn?, codeTurnValid?, codeDescrDistVer?, codeDistVerUpper?, valDistVerUpper?, uomDistVerUpper?, codeDistVerLower?, valDistVerLower?, uomDistVerLower?, valVerAngle?, valSpeedLimit?, uomSpeed?, codeSpeedRef?, valDist?, valDur?, uomDur?, valTheta?, valRho?, valBankAngle?, uomDistHorz?, codeRepAtc?, codeRoleFix?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual valDur valDur {
            get {
                XElement x = this.GetElement(valDurXName);
                return ((valDur)(x));
            }
            set {
                this.SetElement(valDurXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Unit of measurement [time value]
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: ((SnyUid? | IlsUid? | MlsUid? | DmeUid? | NdbUid? | VorUid? | TcnUid?)?, (TcnUidFix | VorUidFix | DpnUidFix | NdbUidFix | DmeUidFix | MkrUidFix)?, (TcnUidCen | VorUidCen | DpnUidCen | NdbUidCen | DmeUidCen | MkrUidCen)?, codePhase?, codeType, valCourse?, codeTypeCourse?, codeDirTurn?, codeTurnValid?, codeDescrDistVer?, codeDistVerUpper?, valDistVerUpper?, uomDistVerUpper?, codeDistVerLower?, valDistVerLower?, uomDistVerLower?, valVerAngle?, valSpeedLimit?, uomSpeed?, codeSpeedRef?, valDist?, valDur?, uomDur?, valTheta?, valRho?, valBankAngle?, uomDistHorz?, codeRepAtc?, codeRoleFix?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual uomDur uomDur {
            get {
                XElement x = this.GetElement(uomDurXName);
                return ((uomDur)(x));
            }
            set {
                this.SetElement(uomDurXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Theta
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: ((SnyUid? | IlsUid? | MlsUid? | DmeUid? | NdbUid? | VorUid? | TcnUid?)?, (TcnUidFix | VorUidFix | DpnUidFix | NdbUidFix | DmeUidFix | MkrUidFix)?, (TcnUidCen | VorUidCen | DpnUidCen | NdbUidCen | DmeUidCen | MkrUidCen)?, codePhase?, codeType, valCourse?, codeTypeCourse?, codeDirTurn?, codeTurnValid?, codeDescrDistVer?, codeDistVerUpper?, valDistVerUpper?, uomDistVerUpper?, codeDistVerLower?, valDistVerLower?, uomDistVerLower?, valVerAngle?, valSpeedLimit?, uomSpeed?, codeSpeedRef?, valDist?, valDur?, uomDur?, valTheta?, valRho?, valBankAngle?, uomDistHorz?, codeRepAtc?, codeRoleFix?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual valAngleBrg valTheta {
            get {
                XElement x = this.GetElement(valThetaXName);
                return ((valAngleBrg)(x));
            }
            set {
                this.SetElement(valThetaXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Rho
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: ((SnyUid? | IlsUid? | MlsUid? | DmeUid? | NdbUid? | VorUid? | TcnUid?)?, (TcnUidFix | VorUidFix | DpnUidFix | NdbUidFix | DmeUidFix | MkrUidFix)?, (TcnUidCen | VorUidCen | DpnUidCen | NdbUidCen | DmeUidCen | MkrUidCen)?, codePhase?, codeType, valCourse?, codeTypeCourse?, codeDirTurn?, codeTurnValid?, codeDescrDistVer?, codeDistVerUpper?, valDistVerUpper?, uomDistVerUpper?, codeDistVerLower?, valDistVerLower?, uomDistVerLower?, valVerAngle?, valSpeedLimit?, uomSpeed?, codeSpeedRef?, valDist?, valDur?, uomDur?, valTheta?, valRho?, valBankAngle?, uomDistHorz?, codeRepAtc?, codeRoleFix?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual valDistHorz valRho {
            get {
                XElement x = this.GetElement(valRhoXName);
                return ((valDistHorz)(x));
            }
            set {
                this.SetElement(valRhoXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Recommended bank angle
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: ((SnyUid? | IlsUid? | MlsUid? | DmeUid? | NdbUid? | VorUid? | TcnUid?)?, (TcnUidFix | VorUidFix | DpnUidFix | NdbUidFix | DmeUidFix | MkrUidFix)?, (TcnUidCen | VorUidCen | DpnUidCen | NdbUidCen | DmeUidCen | MkrUidCen)?, codePhase?, codeType, valCourse?, codeTypeCourse?, codeDirTurn?, codeTurnValid?, codeDescrDistVer?, codeDistVerUpper?, valDistVerUpper?, uomDistVerUpper?, codeDistVerLower?, valDistVerLower?, uomDistVerLower?, valVerAngle?, valSpeedLimit?, uomSpeed?, codeSpeedRef?, valDist?, valDur?, uomDur?, valTheta?, valRho?, valBankAngle?, uomDistHorz?, codeRepAtc?, codeRoleFix?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual valAngle valBankAngle {
            get {
                XElement x = this.GetElement(valBankAngleXName);
                return ((valAngle)(x));
            }
            set {
                this.SetElement(valBankAngleXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Unit of measurement [horizontal distance]
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: ((SnyUid? | IlsUid? | MlsUid? | DmeUid? | NdbUid? | VorUid? | TcnUid?)?, (TcnUidFix | VorUidFix | DpnUidFix | NdbUidFix | DmeUidFix | MkrUidFix)?, (TcnUidCen | VorUidCen | DpnUidCen | NdbUidCen | DmeUidCen | MkrUidCen)?, codePhase?, codeType, valCourse?, codeTypeCourse?, codeDirTurn?, codeTurnValid?, codeDescrDistVer?, codeDistVerUpper?, valDistVerUpper?, uomDistVerUpper?, codeDistVerLower?, valDistVerLower?, uomDistVerLower?, valVerAngle?, valSpeedLimit?, uomSpeed?, codeSpeedRef?, valDist?, valDur?, uomDur?, valTheta?, valRho?, valBankAngle?, uomDistHorz?, codeRepAtc?, codeRoleFix?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual uomDistHorz uomDistHorz {
            get {
                XElement x = this.GetElement(uomDistHorzXName);
                return ((uomDistHorz)(x));
            }
            set {
                this.SetElement(uomDistHorzXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// ATC reporting
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: ((SnyUid? | IlsUid? | MlsUid? | DmeUid? | NdbUid? | VorUid? | TcnUid?)?, (TcnUidFix | VorUidFix | DpnUidFix | NdbUidFix | DmeUidFix | MkrUidFix)?, (TcnUidCen | VorUidCen | DpnUidCen | NdbUidCen | DmeUidCen | MkrUidCen)?, codePhase?, codeType, valCourse?, codeTypeCourse?, codeDirTurn?, codeTurnValid?, codeDescrDistVer?, codeDistVerUpper?, valDistVerUpper?, uomDistVerUpper?, codeDistVerLower?, valDistVerLower?, uomDistVerLower?, valVerAngle?, valSpeedLimit?, uomSpeed?, codeSpeedRef?, valDist?, valDur?, uomDur?, valTheta?, valRho?, valBankAngle?, uomDistHorz?, codeRepAtc?, codeRoleFix?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual codeRepAtc codeRepAtc {
            get {
                XElement x = this.GetElement(codeRepAtcXName);
                return ((codeRepAtc)(x));
            }
            set {
                this.SetElement(codeRepAtcXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Role of fix (IAP)
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: ((SnyUid? | IlsUid? | MlsUid? | DmeUid? | NdbUid? | VorUid? | TcnUid?)?, (TcnUidFix | VorUidFix | DpnUidFix | NdbUidFix | DmeUidFix | MkrUidFix)?, (TcnUidCen | VorUidCen | DpnUidCen | NdbUidCen | DmeUidCen | MkrUidCen)?, codePhase?, codeType, valCourse?, codeTypeCourse?, codeDirTurn?, codeTurnValid?, codeDescrDistVer?, codeDistVerUpper?, valDistVerUpper?, uomDistVerUpper?, codeDistVerLower?, valDistVerLower?, uomDistVerLower?, valVerAngle?, valSpeedLimit?, uomSpeed?, codeSpeedRef?, valDist?, valDur?, uomDur?, valTheta?, valRho?, valBankAngle?, uomDistHorz?, codeRepAtc?, codeRoleFix?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual codeIapFix codeRoleFix {
            get {
                XElement x = this.GetElement(codeRoleFixXName);
                return ((codeIapFix)(x));
            }
            set {
                this.SetElement(codeRoleFixXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Remark
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: ((SnyUid? | IlsUid? | MlsUid? | DmeUid? | NdbUid? | VorUid? | TcnUid?)?, (TcnUidFix | VorUidFix | DpnUidFix | NdbUidFix | DmeUidFix | MkrUidFix)?, (TcnUidCen | VorUidCen | DpnUidCen | NdbUidCen | DmeUidCen | MkrUidCen)?, codePhase?, codeType, valCourse?, codeTypeCourse?, codeDirTurn?, codeTurnValid?, codeDescrDistVer?, codeDistVerUpper?, valDistVerUpper?, uomDistVerUpper?, codeDistVerLower?, valDistVerLower?, uomDistVerLower?, valVerAngle?, valSpeedLimit?, uomSpeed?, codeSpeedRef?, valDist?, valDur?, uomDur?, valTheta?, valRho?, valBankAngle?, uomDistHorz?, codeRepAtc?, codeRoleFix?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual txtRmk txtRmk {
            get {
                XElement x = this.GetElement(txtRmkXName);
                return ((txtRmk)(x));
            }
            set {
                this.SetElement(txtRmkXName, value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ProcedureLegType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(SnyUidXName, typeof(SpecialNavigationSystemUidType));
            localElementDictionary.Add(IlsUidXName, typeof(IlsUidType));
            localElementDictionary.Add(MlsUidXName, typeof(MlsUidType));
            localElementDictionary.Add(DmeUidXName, typeof(DmeUidType));
            localElementDictionary.Add(NdbUidXName, typeof(NdbUidType));
            localElementDictionary.Add(VorUidXName, typeof(VorUidType));
            localElementDictionary.Add(TcnUidXName, typeof(TacanUidType));
            localElementDictionary.Add(TcnUidFixXName, typeof(TacanUidType));
            localElementDictionary.Add(VorUidFixXName, typeof(VorUidType));
            localElementDictionary.Add(DpnUidFixXName, typeof(DesignatedPointUidType));
            localElementDictionary.Add(NdbUidFixXName, typeof(NdbUidType));
            localElementDictionary.Add(DmeUidFixXName, typeof(DmeUidType));
            localElementDictionary.Add(MkrUidFixXName, typeof(MkrUidType));
            localElementDictionary.Add(TcnUidCenXName, typeof(TacanUidType));
            localElementDictionary.Add(VorUidCenXName, typeof(VorUidType));
            localElementDictionary.Add(DpnUidCenXName, typeof(DesignatedPointUidType));
            localElementDictionary.Add(NdbUidCenXName, typeof(NdbUidType));
            localElementDictionary.Add(DmeUidCenXName, typeof(DmeUidType));
            localElementDictionary.Add(MkrUidCenXName, typeof(MkrUidType));
            localElementDictionary.Add(codePhaseXName, typeof(codePhaseProc));
            localElementDictionary.Add(codeTypeXName, typeof(codeTypeProcPath));
            localElementDictionary.Add(valCourseXName, typeof(valAngleBrg));
            localElementDictionary.Add(codeTypeCourseXName, typeof(codeTypeCourse));
            localElementDictionary.Add(codeDirTurnXName, typeof(codeDirTurn));
            localElementDictionary.Add(codeTurnValidXName, typeof(codeYesNo));
            localElementDictionary.Add(codeDescrDistVerXName, typeof(codeDescrDistVer));
            localElementDictionary.Add(codeDistVerUpperXName, typeof(codeDistVer));
            localElementDictionary.Add(valDistVerUpperXName, typeof(valDistVer));
            localElementDictionary.Add(uomDistVerUpperXName, typeof(uomDistVer));
            localElementDictionary.Add(codeDistVerLowerXName, typeof(codeDistVer));
            localElementDictionary.Add(valDistVerLowerXName, typeof(valDistVer));
            localElementDictionary.Add(uomDistVerLowerXName, typeof(uomDistVer));
            localElementDictionary.Add(valVerAngleXName, typeof(valAngle));
            localElementDictionary.Add(valSpeedLimitXName, typeof(valSpeed));
            localElementDictionary.Add(uomSpeedXName, typeof(uomSpeed));
            localElementDictionary.Add(codeSpeedRefXName, typeof(codeSpeedRef));
            localElementDictionary.Add(valDistXName, typeof(valDistHorz));
            localElementDictionary.Add(valDurXName, typeof(valDur));
            localElementDictionary.Add(uomDurXName, typeof(uomDur));
            localElementDictionary.Add(valThetaXName, typeof(valAngleBrg));
            localElementDictionary.Add(valRhoXName, typeof(valDistHorz));
            localElementDictionary.Add(valBankAngleXName, typeof(valAngle));
            localElementDictionary.Add(uomDistHorzXName, typeof(uomDistHorz));
            localElementDictionary.Add(codeRepAtcXName, typeof(codeRepAtc));
            localElementDictionary.Add(codeRoleFixXName, typeof(codeIapFix));
            localElementDictionary.Add(txtRmkXName, typeof(txtRmk));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Level associated with a route segment usage
    /// </para>
    /// <para>
    /// Regular expression: (PlcUid?, valDistVerLower?, uomDistVerLower?, codeDistVerLower?, valDistVerUpper?, uomDistVerUpper?, codeDistVerUpper?)
    /// </para>
    /// </summary>
    public partial class RouteSegmentUsageLevelType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName PlcUidXName = System.Xml.Linq.XName.Get("PlcUid", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName valDistVerLowerXName = System.Xml.Linq.XName.Get("valDistVerLower", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName uomDistVerLowerXName = System.Xml.Linq.XName.Get("uomDistVerLower", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName codeDistVerLowerXName = System.Xml.Linq.XName.Get("codeDistVerLower", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName valDistVerUpperXName = System.Xml.Linq.XName.Get("valDistVerUpper", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName uomDistVerUpperXName = System.Xml.Linq.XName.Get("uomDistVerUpper", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName codeDistVerUpperXName = System.Xml.Linq.XName.Get("codeDistVerUpper", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("RouteSegmentUsageLevelType", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator RouteSegmentUsageLevelType(XElement xe) { return XTypedServices.ToXTypedElement<RouteSegmentUsageLevelType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static RouteSegmentUsageLevelType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(PlcUidXName), new NamedContentModelEntity(valDistVerLowerXName), new NamedContentModelEntity(uomDistVerLowerXName), new NamedContentModelEntity(codeDistVerLowerXName), new NamedContentModelEntity(valDistVerUpperXName), new NamedContentModelEntity(uomDistVerUpperXName), new NamedContentModelEntity(codeDistVerUpperXName));
        }
        
        /// <summary>
        /// <para>
        /// Level associated with a route segment usage
        /// </para>
        /// <para>
        /// Regular expression: (PlcUid?, valDistVerLower?, uomDistVerLower?, codeDistVerLower?, valDistVerUpper?, uomDistVerUpper?, codeDistVerUpper?)
        /// </para>
        /// </summary>
        public RouteSegmentUsageLevelType() {
        }
        
        /// <summary>
        /// <para>
        /// Level associated with a route segment usage is associated with Column of a table of criusing level
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (PlcUid?, valDistVerLower?, uomDistVerLower?, codeDistVerLower?, valDistVerUpper?, uomDistVerUpper?, codeDistVerUpper?)
        /// </para>
        /// </summary>
        public virtual CruisingLevelsColumnUidType PlcUid {
            get {
                XElement x = this.GetElement(PlcUidXName);
                return ((CruisingLevelsColumnUidType)(x));
            }
            set {
                this.SetElement(PlcUidXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Lower limit
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (PlcUid?, valDistVerLower?, uomDistVerLower?, codeDistVerLower?, valDistVerUpper?, uomDistVerUpper?, codeDistVerUpper?)
        /// </para>
        /// </summary>
        public virtual valDistVer valDistVerLower {
            get {
                XElement x = this.GetElement(valDistVerLowerXName);
                return ((valDistVer)(x));
            }
            set {
                this.SetElement(valDistVerLowerXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Unit of measurement [lower limit]
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (PlcUid?, valDistVerLower?, uomDistVerLower?, codeDistVerLower?, valDistVerUpper?, uomDistVerUpper?, codeDistVerUpper?)
        /// </para>
        /// </summary>
        public virtual uomDistVer uomDistVerLower {
            get {
                XElement x = this.GetElement(uomDistVerLowerXName);
                return ((uomDistVer)(x));
            }
            set {
                this.SetElement(uomDistVerLowerXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Reference for lower limit
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (PlcUid?, valDistVerLower?, uomDistVerLower?, codeDistVerLower?, valDistVerUpper?, uomDistVerUpper?, codeDistVerUpper?)
        /// </para>
        /// </summary>
        public virtual codeDistVer codeDistVerLower {
            get {
                XElement x = this.GetElement(codeDistVerLowerXName);
                return ((codeDistVer)(x));
            }
            set {
                this.SetElement(codeDistVerLowerXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Upper limit
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (PlcUid?, valDistVerLower?, uomDistVerLower?, codeDistVerLower?, valDistVerUpper?, uomDistVerUpper?, codeDistVerUpper?)
        /// </para>
        /// </summary>
        public virtual valDistVer valDistVerUpper {
            get {
                XElement x = this.GetElement(valDistVerUpperXName);
                return ((valDistVer)(x));
            }
            set {
                this.SetElement(valDistVerUpperXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Unit of measurement [upper limit]
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (PlcUid?, valDistVerLower?, uomDistVerLower?, codeDistVerLower?, valDistVerUpper?, uomDistVerUpper?, codeDistVerUpper?)
        /// </para>
        /// </summary>
        public virtual uomDistVer uomDistVerUpper {
            get {
                XElement x = this.GetElement(uomDistVerUpperXName);
                return ((uomDistVer)(x));
            }
            set {
                this.SetElement(uomDistVerUpperXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Reference for upper limit
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (PlcUid?, valDistVerLower?, uomDistVerLower?, codeDistVerLower?, valDistVerUpper?, uomDistVerUpper?, codeDistVerUpper?)
        /// </para>
        /// </summary>
        public virtual codeDistVer codeDistVerUpper {
            get {
                XElement x = this.GetElement(codeDistVerUpperXName);
                return ((codeDistVer)(x));
            }
            set {
                this.SetElement(codeDistVerUpperXName, value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<RouteSegmentUsageLevelType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(PlcUidXName, typeof(CruisingLevelsColumnUidType));
            localElementDictionary.Add(valDistVerLowerXName, typeof(valDistVer));
            localElementDictionary.Add(uomDistVerLowerXName, typeof(uomDistVer));
            localElementDictionary.Add(codeDistVerLowerXName, typeof(codeDistVer));
            localElementDictionary.Add(valDistVerUpperXName, typeof(valDistVer));
            localElementDictionary.Add(uomDistVerUpperXName, typeof(uomDistVer));
            localElementDictionary.Add(codeDistVerUpperXName, typeof(codeDistVer));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Route portion
    /// </para>
    /// <para>
    /// Regular expression: (RteUid, (TcnUidSta | VorUidSta | DpnUidSta | NdbUidSta | DmeUidSta | MkrUidSta), (TcnUidEnd | VorUidEnd | DpnUidEnd | NdbUidEnd | DmeUidEnd | MkrUidEnd))
    /// </para>
    /// </summary>
    public partial class RoutePortionType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName RteUidXName = System.Xml.Linq.XName.Get("RteUid", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TcnUidStaXName = System.Xml.Linq.XName.Get("TcnUidSta", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName VorUidStaXName = System.Xml.Linq.XName.Get("VorUidSta", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName DpnUidStaXName = System.Xml.Linq.XName.Get("DpnUidSta", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName NdbUidStaXName = System.Xml.Linq.XName.Get("NdbUidSta", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName DmeUidStaXName = System.Xml.Linq.XName.Get("DmeUidSta", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName MkrUidStaXName = System.Xml.Linq.XName.Get("MkrUidSta", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TcnUidEndXName = System.Xml.Linq.XName.Get("TcnUidEnd", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName VorUidEndXName = System.Xml.Linq.XName.Get("VorUidEnd", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName DpnUidEndXName = System.Xml.Linq.XName.Get("DpnUidEnd", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName NdbUidEndXName = System.Xml.Linq.XName.Get("NdbUidEnd", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName DmeUidEndXName = System.Xml.Linq.XName.Get("DmeUidEnd", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName MkrUidEndXName = System.Xml.Linq.XName.Get("MkrUidEnd", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName midXName = System.Xml.Linq.XName.Get("mid", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("RoutePortionType", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator RoutePortionType(XElement xe) { return XTypedServices.ToXTypedElement<RoutePortionType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static RoutePortionType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(RteUidXName), new ChoiceContentModelEntity(new NamedContentModelEntity(TcnUidStaXName), new NamedContentModelEntity(VorUidStaXName), new NamedContentModelEntity(DpnUidStaXName), new NamedContentModelEntity(NdbUidStaXName), new NamedContentModelEntity(DmeUidStaXName), new NamedContentModelEntity(MkrUidStaXName)), new ChoiceContentModelEntity(new NamedContentModelEntity(TcnUidEndXName), new NamedContentModelEntity(VorUidEndXName), new NamedContentModelEntity(DpnUidEndXName), new NamedContentModelEntity(NdbUidEndXName), new NamedContentModelEntity(DmeUidEndXName), new NamedContentModelEntity(MkrUidEndXName)));
        }
        
        /// <summary>
        /// <para>
        /// Route portion
        /// </para>
        /// <para>
        /// Regular expression: (RteUid, (TcnUidSta | VorUidSta | DpnUidSta | NdbUidSta | DmeUidSta | MkrUidSta), (TcnUidEnd | VorUidEnd | DpnUidEnd | NdbUidEnd | DmeUidEnd | MkrUidEnd))
        /// </para>
        /// </summary>
        public RoutePortionType() {
        }
        
        /// <summary>
        /// <para>
        /// Route portion is part of En-route route
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (RteUid, (TcnUidSta | VorUidSta | DpnUidSta | NdbUidSta | DmeUidSta | MkrUidSta), (TcnUidEnd | VorUidEnd | DpnUidEnd | NdbUidEnd | DmeUidEnd | MkrUidEnd))
        /// </para>
        /// </summary>
        public virtual EnrouteRouteUidType RteUid {
            get {
                XElement x = this.GetElement(RteUidXName);
                return ((EnrouteRouteUidType)(x));
            }
            set {
                this.SetElement(RteUidXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Start significant point is at Tactical air navigation beacon [TACAN]
        /// </para>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (RteUid, (TcnUidSta | VorUidSta | DpnUidSta | NdbUidSta | DmeUidSta | MkrUidSta), (TcnUidEnd | VorUidEnd | DpnUidEnd | NdbUidEnd | DmeUidEnd | MkrUidEnd))
        /// </para>
        /// </summary>
        public virtual TacanUidType TcnUidSta {
            get {
                XElement x = this.GetElement(TcnUidStaXName);
                return ((TacanUidType)(x));
            }
            set {
                this.SetElement(TcnUidStaXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Start significant point is at VHF omnidirectional radio range beacon [VOR]
        /// </para>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (RteUid, (TcnUidSta | VorUidSta | DpnUidSta | NdbUidSta | DmeUidSta | MkrUidSta), (TcnUidEnd | VorUidEnd | DpnUidEnd | NdbUidEnd | DmeUidEnd | MkrUidEnd))
        /// </para>
        /// </summary>
        public virtual VorUidType VorUidSta {
            get {
                XElement x = this.GetElement(VorUidStaXName);
                return ((VorUidType)(x));
            }
            set {
                this.SetElement(VorUidStaXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Start significant point is at Designated point
        /// </para>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (RteUid, (TcnUidSta | VorUidSta | DpnUidSta | NdbUidSta | DmeUidSta | MkrUidSta), (TcnUidEnd | VorUidEnd | DpnUidEnd | NdbUidEnd | DmeUidEnd | MkrUidEnd))
        /// </para>
        /// </summary>
        public virtual DesignatedPointUidType DpnUidSta {
            get {
                XElement x = this.GetElement(DpnUidStaXName);
                return ((DesignatedPointUidType)(x));
            }
            set {
                this.SetElement(DpnUidStaXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Start significant point is at Non-directional radio beacon [NDB]
        /// </para>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (RteUid, (TcnUidSta | VorUidSta | DpnUidSta | NdbUidSta | DmeUidSta | MkrUidSta), (TcnUidEnd | VorUidEnd | DpnUidEnd | NdbUidEnd | DmeUidEnd | MkrUidEnd))
        /// </para>
        /// </summary>
        public virtual NdbUidType NdbUidSta {
            get {
                XElement x = this.GetElement(NdbUidStaXName);
                return ((NdbUidType)(x));
            }
            set {
                this.SetElement(NdbUidStaXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Start significant point is at Distance measuring equipment [DME]
        /// </para>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (RteUid, (TcnUidSta | VorUidSta | DpnUidSta | NdbUidSta | DmeUidSta | MkrUidSta), (TcnUidEnd | VorUidEnd | DpnUidEnd | NdbUidEnd | DmeUidEnd | MkrUidEnd))
        /// </para>
        /// </summary>
        public virtual DmeUidType DmeUidSta {
            get {
                XElement x = this.GetElement(DmeUidStaXName);
                return ((DmeUidType)(x));
            }
            set {
                this.SetElement(DmeUidStaXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Start significant point is at Marker [MKR]
        /// </para>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (RteUid, (TcnUidSta | VorUidSta | DpnUidSta | NdbUidSta | DmeUidSta | MkrUidSta), (TcnUidEnd | VorUidEnd | DpnUidEnd | NdbUidEnd | DmeUidEnd | MkrUidEnd))
        /// </para>
        /// </summary>
        public virtual MkrUidType MkrUidSta {
            get {
                XElement x = this.GetElement(MkrUidStaXName);
                return ((MkrUidType)(x));
            }
            set {
                this.SetElement(MkrUidStaXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// End significant point is at Tactical air navigation beacon [TACAN]
        /// </para>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (RteUid, (TcnUidSta | VorUidSta | DpnUidSta | NdbUidSta | DmeUidSta | MkrUidSta), (TcnUidEnd | VorUidEnd | DpnUidEnd | NdbUidEnd | DmeUidEnd | MkrUidEnd))
        /// </para>
        /// </summary>
        public virtual TacanUidType TcnUidEnd {
            get {
                XElement x = this.GetElement(TcnUidEndXName);
                return ((TacanUidType)(x));
            }
            set {
                this.SetElement(TcnUidEndXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// End significant point is at VHF omnidirectional radio range beacon [VOR]
        /// </para>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (RteUid, (TcnUidSta | VorUidSta | DpnUidSta | NdbUidSta | DmeUidSta | MkrUidSta), (TcnUidEnd | VorUidEnd | DpnUidEnd | NdbUidEnd | DmeUidEnd | MkrUidEnd))
        /// </para>
        /// </summary>
        public virtual VorUidType VorUidEnd {
            get {
                XElement x = this.GetElement(VorUidEndXName);
                return ((VorUidType)(x));
            }
            set {
                this.SetElement(VorUidEndXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// End significant point is at Designated point
        /// </para>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (RteUid, (TcnUidSta | VorUidSta | DpnUidSta | NdbUidSta | DmeUidSta | MkrUidSta), (TcnUidEnd | VorUidEnd | DpnUidEnd | NdbUidEnd | DmeUidEnd | MkrUidEnd))
        /// </para>
        /// </summary>
        public virtual DesignatedPointUidType DpnUidEnd {
            get {
                XElement x = this.GetElement(DpnUidEndXName);
                return ((DesignatedPointUidType)(x));
            }
            set {
                this.SetElement(DpnUidEndXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// End significant point is at Non-directional radio beacon [NDB]
        /// </para>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (RteUid, (TcnUidSta | VorUidSta | DpnUidSta | NdbUidSta | DmeUidSta | MkrUidSta), (TcnUidEnd | VorUidEnd | DpnUidEnd | NdbUidEnd | DmeUidEnd | MkrUidEnd))
        /// </para>
        /// </summary>
        public virtual NdbUidType NdbUidEnd {
            get {
                XElement x = this.GetElement(NdbUidEndXName);
                return ((NdbUidType)(x));
            }
            set {
                this.SetElement(NdbUidEndXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// End significant point is at Distance measuring equipment [DME]
        /// </para>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (RteUid, (TcnUidSta | VorUidSta | DpnUidSta | NdbUidSta | DmeUidSta | MkrUidSta), (TcnUidEnd | VorUidEnd | DpnUidEnd | NdbUidEnd | DmeUidEnd | MkrUidEnd))
        /// </para>
        /// </summary>
        public virtual DmeUidType DmeUidEnd {
            get {
                XElement x = this.GetElement(DmeUidEndXName);
                return ((DmeUidType)(x));
            }
            set {
                this.SetElement(DmeUidEndXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// End significant point is at Marker [MKR]
        /// </para>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (RteUid, (TcnUidSta | VorUidSta | DpnUidSta | NdbUidSta | DmeUidSta | MkrUidSta), (TcnUidEnd | VorUidEnd | DpnUidEnd | NdbUidEnd | DmeUidEnd | MkrUidEnd))
        /// </para>
        /// </summary>
        public virtual MkrUidType MkrUidEnd {
            get {
                XElement x = this.GetElement(MkrUidEndXName);
                return ((MkrUidType)(x));
            }
            set {
                this.SetElement(MkrUidEndXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string mid {
            get {
                XAttribute x = this.Attribute(midXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(midXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<RoutePortionType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(RteUidXName, typeof(EnrouteRouteUidType));
            localElementDictionary.Add(TcnUidStaXName, typeof(TacanUidType));
            localElementDictionary.Add(VorUidStaXName, typeof(VorUidType));
            localElementDictionary.Add(DpnUidStaXName, typeof(DesignatedPointUidType));
            localElementDictionary.Add(NdbUidStaXName, typeof(NdbUidType));
            localElementDictionary.Add(DmeUidStaXName, typeof(DmeUidType));
            localElementDictionary.Add(MkrUidStaXName, typeof(MkrUidType));
            localElementDictionary.Add(TcnUidEndXName, typeof(TacanUidType));
            localElementDictionary.Add(VorUidEndXName, typeof(VorUidType));
            localElementDictionary.Add(DpnUidEndXName, typeof(DesignatedPointUidType));
            localElementDictionary.Add(NdbUidEndXName, typeof(NdbUidType));
            localElementDictionary.Add(DmeUidEndXName, typeof(DmeUidType));
            localElementDictionary.Add(MkrUidEndXName, typeof(MkrUidType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Service provided on route segment
    /// </para>
    /// <para>
    /// Regular expression: (SrsUid, txtRmk?)
    /// </para>
    /// </summary>
    public partial class RouteSegmentServiceType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName SrsUidXName = System.Xml.Linq.XName.Get("SrsUid", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName txtRmkXName = System.Xml.Linq.XName.Get("txtRmk", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName sourceXName = System.Xml.Linq.XName.Get("source", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("RouteSegmentServiceType", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator RouteSegmentServiceType(XElement xe) { return XTypedServices.ToXTypedElement<RouteSegmentServiceType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static RouteSegmentServiceType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(SrsUidXName), new NamedContentModelEntity(txtRmkXName));
        }
        
        /// <summary>
        /// <para>
        /// Service provided on route segment
        /// </para>
        /// <para>
        /// Regular expression: (SrsUid, txtRmk?)
        /// </para>
        /// </summary>
        public RouteSegmentServiceType() {
        }
        
        /// <summary>
        /// <para>
        /// a version of Service provided on route segment
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (SrsUid, txtRmk?)
        /// </para>
        /// </summary>
        public virtual RouteSegmentServiceUidType SrsUid {
            get {
                XElement x = this.GetElement(SrsUidXName);
                return ((RouteSegmentServiceUidType)(x));
            }
            set {
                this.SetElement(SrsUidXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Remark
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (SrsUid, txtRmk?)
        /// </para>
        /// </summary>
        public virtual txtRmk txtRmk {
            get {
                XElement x = this.GetElement(txtRmkXName);
                return ((txtRmk)(x));
            }
            set {
                this.SetElement(txtRmkXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string source {
            get {
                XAttribute x = this.Attribute(sourceXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(sourceXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<RouteSegmentServiceType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(SrsUidXName, typeof(RouteSegmentServiceUidType));
            localElementDictionary.Add(txtRmkXName, typeof(txtRmk));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Service provided on route segment - UID
    /// </para>
    /// <para>
    /// Regular expression: (SerUid, RsgUid)
    /// </para>
    /// </summary>
    public partial class RouteSegmentServiceUidType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName SerUidXName = System.Xml.Linq.XName.Get("SerUid", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName RsgUidXName = System.Xml.Linq.XName.Get("RsgUid", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName midXName = System.Xml.Linq.XName.Get("mid", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("RouteSegmentServiceUidType", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator RouteSegmentServiceUidType(XElement xe) { return XTypedServices.ToXTypedElement<RouteSegmentServiceUidType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static RouteSegmentServiceUidType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(SerUidXName), new NamedContentModelEntity(RsgUidXName));
        }
        
        /// <summary>
        /// <para>
        /// Service provided on route segment - UID
        /// </para>
        /// <para>
        /// Regular expression: (SerUid, RsgUid)
        /// </para>
        /// </summary>
        public RouteSegmentServiceUidType() {
        }
        
        /// <summary>
        /// <para>
        /// Service provided on route segment is also Service
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (SerUid, RsgUid)
        /// </para>
        /// </summary>
        public virtual ServiceUidType SerUid {
            get {
                XElement x = this.GetElement(SerUidXName);
                return ((ServiceUidType)(x));
            }
            set {
                this.SetElement(SerUidXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Service provided on route segment is furnished on Route segment
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (SerUid, RsgUid)
        /// </para>
        /// </summary>
        public virtual RouteSegmentUidType RsgUid {
            get {
                XElement x = this.GetElement(RsgUidXName);
                return ((RouteSegmentUidType)(x));
            }
            set {
                this.SetElement(RsgUidXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string mid {
            get {
                XAttribute x = this.Attribute(midXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(midXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<RouteSegmentServiceUidType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(SerUidXName, typeof(ServiceUidType));
            localElementDictionary.Add(RsgUidXName, typeof(RouteSegmentUidType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Route segment
    /// </para>
    /// <para>
    /// Regular expression: (RsgUid, codeType, codeRnp?, codeLvl?, codeClassAcft?, codeIntl?, codeTypeFltRule?, codeCiv?, valDistVerUpper?, uomDistVerUpper?, codeDistVerUpper?, valDistVerLower?, uomDistVerLower?, codeDistVerLower?, valDistVerMnm?, uomDistVerMnm?, codeDistVerMnm?, valDistVerLowerOvrde?, uomDistVerLowerOvrde?, codeDistVerLowerOvrde?, valWid?, uomWid?, codeRepAtcStart?, codeRepAtcEnd?, codeRvsmStart?, codeRvsmEnd?, codeTypePath?, valTrueTrack?, valMagTrack?, valReversTrueTrack?, valReversMagTrack?, valLen?, valCopDist?, uomDist?, txtRmk?)
    /// </para>
    /// </summary>
    public partial class RouteSegmentType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName RsgUidXName = System.Xml.Linq.XName.Get("RsgUid", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName codeTypeXName = System.Xml.Linq.XName.Get("codeType", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName codeRnpXName = System.Xml.Linq.XName.Get("codeRnp", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName codeLvlXName = System.Xml.Linq.XName.Get("codeLvl", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName codeClassAcftXName = System.Xml.Linq.XName.Get("codeClassAcft", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName codeIntlXName = System.Xml.Linq.XName.Get("codeIntl", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName codeTypeFltRuleXName = System.Xml.Linq.XName.Get("codeTypeFltRule", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName codeCivXName = System.Xml.Linq.XName.Get("codeCiv", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName valDistVerUpperXName = System.Xml.Linq.XName.Get("valDistVerUpper", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName uomDistVerUpperXName = System.Xml.Linq.XName.Get("uomDistVerUpper", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName codeDistVerUpperXName = System.Xml.Linq.XName.Get("codeDistVerUpper", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName valDistVerLowerXName = System.Xml.Linq.XName.Get("valDistVerLower", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName uomDistVerLowerXName = System.Xml.Linq.XName.Get("uomDistVerLower", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName codeDistVerLowerXName = System.Xml.Linq.XName.Get("codeDistVerLower", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName valDistVerMnmXName = System.Xml.Linq.XName.Get("valDistVerMnm", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName uomDistVerMnmXName = System.Xml.Linq.XName.Get("uomDistVerMnm", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName codeDistVerMnmXName = System.Xml.Linq.XName.Get("codeDistVerMnm", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName valDistVerLowerOvrdeXName = System.Xml.Linq.XName.Get("valDistVerLowerOvrde", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName uomDistVerLowerOvrdeXName = System.Xml.Linq.XName.Get("uomDistVerLowerOvrde", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName codeDistVerLowerOvrdeXName = System.Xml.Linq.XName.Get("codeDistVerLowerOvrde", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName valWidXName = System.Xml.Linq.XName.Get("valWid", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName uomWidXName = System.Xml.Linq.XName.Get("uomWid", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName codeRepAtcStartXName = System.Xml.Linq.XName.Get("codeRepAtcStart", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName codeRepAtcEndXName = System.Xml.Linq.XName.Get("codeRepAtcEnd", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName codeRvsmStartXName = System.Xml.Linq.XName.Get("codeRvsmStart", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName codeRvsmEndXName = System.Xml.Linq.XName.Get("codeRvsmEnd", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName codeTypePathXName = System.Xml.Linq.XName.Get("codeTypePath", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName valTrueTrackXName = System.Xml.Linq.XName.Get("valTrueTrack", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName valMagTrackXName = System.Xml.Linq.XName.Get("valMagTrack", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName valReversTrueTrackXName = System.Xml.Linq.XName.Get("valReversTrueTrack", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName valReversMagTrackXName = System.Xml.Linq.XName.Get("valReversMagTrack", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName valLenXName = System.Xml.Linq.XName.Get("valLen", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName valCopDistXName = System.Xml.Linq.XName.Get("valCopDist", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName uomDistXName = System.Xml.Linq.XName.Get("uomDist", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName txtRmkXName = System.Xml.Linq.XName.Get("txtRmk", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName sourceXName = System.Xml.Linq.XName.Get("source", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("RouteSegmentType", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator RouteSegmentType(XElement xe) { return XTypedServices.ToXTypedElement<RouteSegmentType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static RouteSegmentType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(RsgUidXName), new NamedContentModelEntity(codeTypeXName), new NamedContentModelEntity(codeRnpXName), new NamedContentModelEntity(codeLvlXName), new NamedContentModelEntity(codeClassAcftXName), new NamedContentModelEntity(codeIntlXName), new NamedContentModelEntity(codeTypeFltRuleXName), new NamedContentModelEntity(codeCivXName), new NamedContentModelEntity(valDistVerUpperXName), new NamedContentModelEntity(uomDistVerUpperXName), new NamedContentModelEntity(codeDistVerUpperXName), new NamedContentModelEntity(valDistVerLowerXName), new NamedContentModelEntity(uomDistVerLowerXName), new NamedContentModelEntity(codeDistVerLowerXName), new NamedContentModelEntity(valDistVerMnmXName), new NamedContentModelEntity(uomDistVerMnmXName), new NamedContentModelEntity(codeDistVerMnmXName), new NamedContentModelEntity(valDistVerLowerOvrdeXName), new NamedContentModelEntity(uomDistVerLowerOvrdeXName), new NamedContentModelEntity(codeDistVerLowerOvrdeXName), new NamedContentModelEntity(valWidXName), new NamedContentModelEntity(uomWidXName), new NamedContentModelEntity(codeRepAtcStartXName), new NamedContentModelEntity(codeRepAtcEndXName), new NamedContentModelEntity(codeRvsmStartXName), new NamedContentModelEntity(codeRvsmEndXName), new NamedContentModelEntity(codeTypePathXName), new NamedContentModelEntity(valTrueTrackXName), new NamedContentModelEntity(valMagTrackXName), new NamedContentModelEntity(valReversTrueTrackXName), new NamedContentModelEntity(valReversMagTrackXName), new NamedContentModelEntity(valLenXName), new NamedContentModelEntity(valCopDistXName), new NamedContentModelEntity(uomDistXName), new NamedContentModelEntity(txtRmkXName));
        }
        
        /// <summary>
        /// <para>
        /// Route segment
        /// </para>
        /// <para>
        /// Regular expression: (RsgUid, codeType, codeRnp?, codeLvl?, codeClassAcft?, codeIntl?, codeTypeFltRule?, codeCiv?, valDistVerUpper?, uomDistVerUpper?, codeDistVerUpper?, valDistVerLower?, uomDistVerLower?, codeDistVerLower?, valDistVerMnm?, uomDistVerMnm?, codeDistVerMnm?, valDistVerLowerOvrde?, uomDistVerLowerOvrde?, codeDistVerLowerOvrde?, valWid?, uomWid?, codeRepAtcStart?, codeRepAtcEnd?, codeRvsmStart?, codeRvsmEnd?, codeTypePath?, valTrueTrack?, valMagTrack?, valReversTrueTrack?, valReversMagTrack?, valLen?, valCopDist?, uomDist?, txtRmk?)
        /// </para>
        /// </summary>
        public RouteSegmentType() {
        }
        
        /// <summary>
        /// <para>
        /// a version of Route segment
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (RsgUid, codeType, codeRnp?, codeLvl?, codeClassAcft?, codeIntl?, codeTypeFltRule?, codeCiv?, valDistVerUpper?, uomDistVerUpper?, codeDistVerUpper?, valDistVerLower?, uomDistVerLower?, codeDistVerLower?, valDistVerMnm?, uomDistVerMnm?, codeDistVerMnm?, valDistVerLowerOvrde?, uomDistVerLowerOvrde?, codeDistVerLowerOvrde?, valWid?, uomWid?, codeRepAtcStart?, codeRepAtcEnd?, codeRvsmStart?, codeRvsmEnd?, codeTypePath?, valTrueTrack?, valMagTrack?, valReversTrueTrack?, valReversMagTrack?, valLen?, valCopDist?, uomDist?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual RouteSegmentUidType RsgUid {
            get {
                XElement x = this.GetElement(RsgUidXName);
                return ((RouteSegmentUidType)(x));
            }
            set {
                this.SetElement(RsgUidXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Type
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (RsgUid, codeType, codeRnp?, codeLvl?, codeClassAcft?, codeIntl?, codeTypeFltRule?, codeCiv?, valDistVerUpper?, uomDistVerUpper?, codeDistVerUpper?, valDistVerLower?, uomDistVerLower?, codeDistVerLower?, valDistVerMnm?, uomDistVerMnm?, codeDistVerMnm?, valDistVerLowerOvrde?, uomDistVerLowerOvrde?, codeDistVerLowerOvrde?, valWid?, uomWid?, codeRepAtcStart?, codeRepAtcEnd?, codeRvsmStart?, codeRvsmEnd?, codeTypePath?, valTrueTrack?, valMagTrack?, valReversTrueTrack?, valReversMagTrack?, valLen?, valCopDist?, uomDist?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual codeTypeRte codeType {
            get {
                XElement x = this.GetElement(codeTypeXName);
                return ((codeTypeRte)(x));
            }
            set {
                this.SetElement(codeTypeXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Required navigation performance
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (RsgUid, codeType, codeRnp?, codeLvl?, codeClassAcft?, codeIntl?, codeTypeFltRule?, codeCiv?, valDistVerUpper?, uomDistVerUpper?, codeDistVerUpper?, valDistVerLower?, uomDistVerLower?, codeDistVerLower?, valDistVerMnm?, uomDistVerMnm?, codeDistVerMnm?, valDistVerLowerOvrde?, uomDistVerLowerOvrde?, codeDistVerLowerOvrde?, valWid?, uomWid?, codeRepAtcStart?, codeRepAtcEnd?, codeRvsmStart?, codeRvsmEnd?, codeTypePath?, valTrueTrack?, valMagTrack?, valReversTrueTrack?, valReversMagTrack?, valLen?, valCopDist?, uomDist?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual codeRnp codeRnp {
            get {
                XElement x = this.GetElement(codeRnpXName);
                return ((codeRnp)(x));
            }
            set {
                this.SetElement(codeRnpXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Level
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (RsgUid, codeType, codeRnp?, codeLvl?, codeClassAcft?, codeIntl?, codeTypeFltRule?, codeCiv?, valDistVerUpper?, uomDistVerUpper?, codeDistVerUpper?, valDistVerLower?, uomDistVerLower?, codeDistVerLower?, valDistVerMnm?, uomDistVerMnm?, codeDistVerMnm?, valDistVerLowerOvrde?, uomDistVerLowerOvrde?, codeDistVerLowerOvrde?, valWid?, uomWid?, codeRepAtcStart?, codeRepAtcEnd?, codeRvsmStart?, codeRvsmEnd?, codeTypePath?, valTrueTrack?, valMagTrack?, valReversTrueTrack?, valReversMagTrack?, valLen?, valCopDist?, uomDist?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual codeLvl codeLvl {
            get {
                XElement x = this.GetElement(codeLvlXName);
                return ((codeLvl)(x));
            }
            set {
                this.SetElement(codeLvlXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Class of aircraft
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (RsgUid, codeType, codeRnp?, codeLvl?, codeClassAcft?, codeIntl?, codeTypeFltRule?, codeCiv?, valDistVerUpper?, uomDistVerUpper?, codeDistVerUpper?, valDistVerLower?, uomDistVerLower?, codeDistVerLower?, valDistVerMnm?, uomDistVerMnm?, codeDistVerMnm?, valDistVerLowerOvrde?, uomDistVerLowerOvrde?, codeDistVerLowerOvrde?, valWid?, uomWid?, codeRepAtcStart?, codeRepAtcEnd?, codeRvsmStart?, codeRvsmEnd?, codeTypePath?, valTrueTrack?, valMagTrack?, valReversTrueTrack?, valReversMagTrack?, valLen?, valCopDist?, uomDist?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual codeClassAcft codeClassAcft {
            get {
                XElement x = this.GetElement(codeClassAcftXName);
                return ((codeClassAcft)(x));
            }
            set {
                this.SetElement(codeClassAcftXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Route classification
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (RsgUid, codeType, codeRnp?, codeLvl?, codeClassAcft?, codeIntl?, codeTypeFltRule?, codeCiv?, valDistVerUpper?, uomDistVerUpper?, codeDistVerUpper?, valDistVerLower?, uomDistVerLower?, codeDistVerLower?, valDistVerMnm?, uomDistVerMnm?, codeDistVerMnm?, valDistVerLowerOvrde?, uomDistVerLowerOvrde?, codeDistVerLowerOvrde?, valWid?, uomWid?, codeRepAtcStart?, codeRepAtcEnd?, codeRvsmStart?, codeRvsmEnd?, codeTypePath?, valTrueTrack?, valMagTrack?, valReversTrueTrack?, valReversMagTrack?, valLen?, valCopDist?, uomDist?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual codeIntlRte codeIntl {
            get {
                XElement x = this.GetElement(codeIntlXName);
                return ((codeIntlRte)(x));
            }
            set {
                this.SetElement(codeIntlXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Flight rules observation
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (RsgUid, codeType, codeRnp?, codeLvl?, codeClassAcft?, codeIntl?, codeTypeFltRule?, codeCiv?, valDistVerUpper?, uomDistVerUpper?, codeDistVerUpper?, valDistVerLower?, uomDistVerLower?, codeDistVerLower?, valDistVerMnm?, uomDistVerMnm?, codeDistVerMnm?, valDistVerLowerOvrde?, uomDistVerLowerOvrde?, codeDistVerLowerOvrde?, valWid?, uomWid?, codeRepAtcStart?, codeRepAtcEnd?, codeRvsmStart?, codeRvsmEnd?, codeTypePath?, valTrueTrack?, valMagTrack?, valReversTrueTrack?, valReversMagTrack?, valLen?, valCopDist?, uomDist?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual codeTypeFltRule codeTypeFltRule {
            get {
                XElement x = this.GetElement(codeTypeFltRuleXName);
                return ((codeTypeFltRule)(x));
            }
            set {
                this.SetElement(codeTypeFltRuleXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Civil / military status of route
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (RsgUid, codeType, codeRnp?, codeLvl?, codeClassAcft?, codeIntl?, codeTypeFltRule?, codeCiv?, valDistVerUpper?, uomDistVerUpper?, codeDistVerUpper?, valDistVerLower?, uomDistVerLower?, codeDistVerLower?, valDistVerMnm?, uomDistVerMnm?, codeDistVerMnm?, valDistVerLowerOvrde?, uomDistVerLowerOvrde?, codeDistVerLowerOvrde?, valWid?, uomWid?, codeRepAtcStart?, codeRepAtcEnd?, codeRvsmStart?, codeRvsmEnd?, codeTypePath?, valTrueTrack?, valMagTrack?, valReversTrueTrack?, valReversMagTrack?, valLen?, valCopDist?, uomDist?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual codeCivRte codeCiv {
            get {
                XElement x = this.GetElement(codeCivXName);
                return ((codeCivRte)(x));
            }
            set {
                this.SetElement(codeCivXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Upper limit
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (RsgUid, codeType, codeRnp?, codeLvl?, codeClassAcft?, codeIntl?, codeTypeFltRule?, codeCiv?, valDistVerUpper?, uomDistVerUpper?, codeDistVerUpper?, valDistVerLower?, uomDistVerLower?, codeDistVerLower?, valDistVerMnm?, uomDistVerMnm?, codeDistVerMnm?, valDistVerLowerOvrde?, uomDistVerLowerOvrde?, codeDistVerLowerOvrde?, valWid?, uomWid?, codeRepAtcStart?, codeRepAtcEnd?, codeRvsmStart?, codeRvsmEnd?, codeTypePath?, valTrueTrack?, valMagTrack?, valReversTrueTrack?, valReversMagTrack?, valLen?, valCopDist?, uomDist?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual valDistVer valDistVerUpper {
            get {
                XElement x = this.GetElement(valDistVerUpperXName);
                return ((valDistVer)(x));
            }
            set {
                this.SetElement(valDistVerUpperXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Unit of measurement [upper limit]
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (RsgUid, codeType, codeRnp?, codeLvl?, codeClassAcft?, codeIntl?, codeTypeFltRule?, codeCiv?, valDistVerUpper?, uomDistVerUpper?, codeDistVerUpper?, valDistVerLower?, uomDistVerLower?, codeDistVerLower?, valDistVerMnm?, uomDistVerMnm?, codeDistVerMnm?, valDistVerLowerOvrde?, uomDistVerLowerOvrde?, codeDistVerLowerOvrde?, valWid?, uomWid?, codeRepAtcStart?, codeRepAtcEnd?, codeRvsmStart?, codeRvsmEnd?, codeTypePath?, valTrueTrack?, valMagTrack?, valReversTrueTrack?, valReversMagTrack?, valLen?, valCopDist?, uomDist?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual uomDistVer uomDistVerUpper {
            get {
                XElement x = this.GetElement(uomDistVerUpperXName);
                return ((uomDistVer)(x));
            }
            set {
                this.SetElement(uomDistVerUpperXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Reference for upper limit
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (RsgUid, codeType, codeRnp?, codeLvl?, codeClassAcft?, codeIntl?, codeTypeFltRule?, codeCiv?, valDistVerUpper?, uomDistVerUpper?, codeDistVerUpper?, valDistVerLower?, uomDistVerLower?, codeDistVerLower?, valDistVerMnm?, uomDistVerMnm?, codeDistVerMnm?, valDistVerLowerOvrde?, uomDistVerLowerOvrde?, codeDistVerLowerOvrde?, valWid?, uomWid?, codeRepAtcStart?, codeRepAtcEnd?, codeRvsmStart?, codeRvsmEnd?, codeTypePath?, valTrueTrack?, valMagTrack?, valReversTrueTrack?, valReversMagTrack?, valLen?, valCopDist?, uomDist?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual codeDistVer codeDistVerUpper {
            get {
                XElement x = this.GetElement(codeDistVerUpperXName);
                return ((codeDistVer)(x));
            }
            set {
                this.SetElement(codeDistVerUpperXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Lower limit
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (RsgUid, codeType, codeRnp?, codeLvl?, codeClassAcft?, codeIntl?, codeTypeFltRule?, codeCiv?, valDistVerUpper?, uomDistVerUpper?, codeDistVerUpper?, valDistVerLower?, uomDistVerLower?, codeDistVerLower?, valDistVerMnm?, uomDistVerMnm?, codeDistVerMnm?, valDistVerLowerOvrde?, uomDistVerLowerOvrde?, codeDistVerLowerOvrde?, valWid?, uomWid?, codeRepAtcStart?, codeRepAtcEnd?, codeRvsmStart?, codeRvsmEnd?, codeTypePath?, valTrueTrack?, valMagTrack?, valReversTrueTrack?, valReversMagTrack?, valLen?, valCopDist?, uomDist?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual valDistVer valDistVerLower {
            get {
                XElement x = this.GetElement(valDistVerLowerXName);
                return ((valDistVer)(x));
            }
            set {
                this.SetElement(valDistVerLowerXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Unit of measurement [lower limit]
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (RsgUid, codeType, codeRnp?, codeLvl?, codeClassAcft?, codeIntl?, codeTypeFltRule?, codeCiv?, valDistVerUpper?, uomDistVerUpper?, codeDistVerUpper?, valDistVerLower?, uomDistVerLower?, codeDistVerLower?, valDistVerMnm?, uomDistVerMnm?, codeDistVerMnm?, valDistVerLowerOvrde?, uomDistVerLowerOvrde?, codeDistVerLowerOvrde?, valWid?, uomWid?, codeRepAtcStart?, codeRepAtcEnd?, codeRvsmStart?, codeRvsmEnd?, codeTypePath?, valTrueTrack?, valMagTrack?, valReversTrueTrack?, valReversMagTrack?, valLen?, valCopDist?, uomDist?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual uomDistVer uomDistVerLower {
            get {
                XElement x = this.GetElement(uomDistVerLowerXName);
                return ((uomDistVer)(x));
            }
            set {
                this.SetElement(uomDistVerLowerXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Reference for lower limit
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (RsgUid, codeType, codeRnp?, codeLvl?, codeClassAcft?, codeIntl?, codeTypeFltRule?, codeCiv?, valDistVerUpper?, uomDistVerUpper?, codeDistVerUpper?, valDistVerLower?, uomDistVerLower?, codeDistVerLower?, valDistVerMnm?, uomDistVerMnm?, codeDistVerMnm?, valDistVerLowerOvrde?, uomDistVerLowerOvrde?, codeDistVerLowerOvrde?, valWid?, uomWid?, codeRepAtcStart?, codeRepAtcEnd?, codeRvsmStart?, codeRvsmEnd?, codeTypePath?, valTrueTrack?, valMagTrack?, valReversTrueTrack?, valReversMagTrack?, valLen?, valCopDist?, uomDist?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual codeDistVer codeDistVerLower {
            get {
                XElement x = this.GetElement(codeDistVerLowerXName);
                return ((codeDistVer)(x));
            }
            set {
                this.SetElement(codeDistVerLowerXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Minimum limit
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (RsgUid, codeType, codeRnp?, codeLvl?, codeClassAcft?, codeIntl?, codeTypeFltRule?, codeCiv?, valDistVerUpper?, uomDistVerUpper?, codeDistVerUpper?, valDistVerLower?, uomDistVerLower?, codeDistVerLower?, valDistVerMnm?, uomDistVerMnm?, codeDistVerMnm?, valDistVerLowerOvrde?, uomDistVerLowerOvrde?, codeDistVerLowerOvrde?, valWid?, uomWid?, codeRepAtcStart?, codeRepAtcEnd?, codeRvsmStart?, codeRvsmEnd?, codeTypePath?, valTrueTrack?, valMagTrack?, valReversTrueTrack?, valReversMagTrack?, valLen?, valCopDist?, uomDist?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual valDistVer valDistVerMnm {
            get {
                XElement x = this.GetElement(valDistVerMnmXName);
                return ((valDistVer)(x));
            }
            set {
                this.SetElement(valDistVerMnmXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Unit of measurement [minimum limit]
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (RsgUid, codeType, codeRnp?, codeLvl?, codeClassAcft?, codeIntl?, codeTypeFltRule?, codeCiv?, valDistVerUpper?, uomDistVerUpper?, codeDistVerUpper?, valDistVerLower?, uomDistVerLower?, codeDistVerLower?, valDistVerMnm?, uomDistVerMnm?, codeDistVerMnm?, valDistVerLowerOvrde?, uomDistVerLowerOvrde?, codeDistVerLowerOvrde?, valWid?, uomWid?, codeRepAtcStart?, codeRepAtcEnd?, codeRvsmStart?, codeRvsmEnd?, codeTypePath?, valTrueTrack?, valMagTrack?, valReversTrueTrack?, valReversMagTrack?, valLen?, valCopDist?, uomDist?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual uomDistVer uomDistVerMnm {
            get {
                XElement x = this.GetElement(uomDistVerMnmXName);
                return ((uomDistVer)(x));
            }
            set {
                this.SetElement(uomDistVerMnmXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Reference for minimum limit
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (RsgUid, codeType, codeRnp?, codeLvl?, codeClassAcft?, codeIntl?, codeTypeFltRule?, codeCiv?, valDistVerUpper?, uomDistVerUpper?, codeDistVerUpper?, valDistVerLower?, uomDistVerLower?, codeDistVerLower?, valDistVerMnm?, uomDistVerMnm?, codeDistVerMnm?, valDistVerLowerOvrde?, uomDistVerLowerOvrde?, codeDistVerLowerOvrde?, valWid?, uomWid?, codeRepAtcStart?, codeRepAtcEnd?, codeRvsmStart?, codeRvsmEnd?, codeTypePath?, valTrueTrack?, valMagTrack?, valReversTrueTrack?, valReversMagTrack?, valLen?, valCopDist?, uomDist?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual codeDistVer codeDistVerMnm {
            get {
                XElement x = this.GetElement(codeDistVerMnmXName);
                return ((codeDistVer)(x));
            }
            set {
                this.SetElement(codeDistVerMnmXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Lower limit override
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (RsgUid, codeType, codeRnp?, codeLvl?, codeClassAcft?, codeIntl?, codeTypeFltRule?, codeCiv?, valDistVerUpper?, uomDistVerUpper?, codeDistVerUpper?, valDistVerLower?, uomDistVerLower?, codeDistVerLower?, valDistVerMnm?, uomDistVerMnm?, codeDistVerMnm?, valDistVerLowerOvrde?, uomDistVerLowerOvrde?, codeDistVerLowerOvrde?, valWid?, uomWid?, codeRepAtcStart?, codeRepAtcEnd?, codeRvsmStart?, codeRvsmEnd?, codeTypePath?, valTrueTrack?, valMagTrack?, valReversTrueTrack?, valReversMagTrack?, valLen?, valCopDist?, uomDist?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual valDistVer valDistVerLowerOvrde {
            get {
                XElement x = this.GetElement(valDistVerLowerOvrdeXName);
                return ((valDistVer)(x));
            }
            set {
                this.SetElement(valDistVerLowerOvrdeXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Unit of measurement [lower limit override]
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (RsgUid, codeType, codeRnp?, codeLvl?, codeClassAcft?, codeIntl?, codeTypeFltRule?, codeCiv?, valDistVerUpper?, uomDistVerUpper?, codeDistVerUpper?, valDistVerLower?, uomDistVerLower?, codeDistVerLower?, valDistVerMnm?, uomDistVerMnm?, codeDistVerMnm?, valDistVerLowerOvrde?, uomDistVerLowerOvrde?, codeDistVerLowerOvrde?, valWid?, uomWid?, codeRepAtcStart?, codeRepAtcEnd?, codeRvsmStart?, codeRvsmEnd?, codeTypePath?, valTrueTrack?, valMagTrack?, valReversTrueTrack?, valReversMagTrack?, valLen?, valCopDist?, uomDist?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual uomDistVer uomDistVerLowerOvrde {
            get {
                XElement x = this.GetElement(uomDistVerLowerOvrdeXName);
                return ((uomDistVer)(x));
            }
            set {
                this.SetElement(uomDistVerLowerOvrdeXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Reference for lower limit override
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (RsgUid, codeType, codeRnp?, codeLvl?, codeClassAcft?, codeIntl?, codeTypeFltRule?, codeCiv?, valDistVerUpper?, uomDistVerUpper?, codeDistVerUpper?, valDistVerLower?, uomDistVerLower?, codeDistVerLower?, valDistVerMnm?, uomDistVerMnm?, codeDistVerMnm?, valDistVerLowerOvrde?, uomDistVerLowerOvrde?, codeDistVerLowerOvrde?, valWid?, uomWid?, codeRepAtcStart?, codeRepAtcEnd?, codeRvsmStart?, codeRvsmEnd?, codeTypePath?, valTrueTrack?, valMagTrack?, valReversTrueTrack?, valReversMagTrack?, valLen?, valCopDist?, uomDist?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual codeDistVer codeDistVerLowerOvrde {
            get {
                XElement x = this.GetElement(codeDistVerLowerOvrdeXName);
                return ((codeDistVer)(x));
            }
            set {
                this.SetElement(codeDistVerLowerOvrdeXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Width
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (RsgUid, codeType, codeRnp?, codeLvl?, codeClassAcft?, codeIntl?, codeTypeFltRule?, codeCiv?, valDistVerUpper?, uomDistVerUpper?, codeDistVerUpper?, valDistVerLower?, uomDistVerLower?, codeDistVerLower?, valDistVerMnm?, uomDistVerMnm?, codeDistVerMnm?, valDistVerLowerOvrde?, uomDistVerLowerOvrde?, codeDistVerLowerOvrde?, valWid?, uomWid?, codeRepAtcStart?, codeRepAtcEnd?, codeRvsmStart?, codeRvsmEnd?, codeTypePath?, valTrueTrack?, valMagTrack?, valReversTrueTrack?, valReversMagTrack?, valLen?, valCopDist?, uomDist?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual valDistHorz valWid {
            get {
                XElement x = this.GetElement(valWidXName);
                return ((valDistHorz)(x));
            }
            set {
                this.SetElement(valWidXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Unit of measurement [width]
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (RsgUid, codeType, codeRnp?, codeLvl?, codeClassAcft?, codeIntl?, codeTypeFltRule?, codeCiv?, valDistVerUpper?, uomDistVerUpper?, codeDistVerUpper?, valDistVerLower?, uomDistVerLower?, codeDistVerLower?, valDistVerMnm?, uomDistVerMnm?, codeDistVerMnm?, valDistVerLowerOvrde?, uomDistVerLowerOvrde?, codeDistVerLowerOvrde?, valWid?, uomWid?, codeRepAtcStart?, codeRepAtcEnd?, codeRvsmStart?, codeRvsmEnd?, codeTypePath?, valTrueTrack?, valMagTrack?, valReversTrueTrack?, valReversMagTrack?, valLen?, valCopDist?, uomDist?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual uomDistHorz uomWid {
            get {
                XElement x = this.GetElement(uomWidXName);
                return ((uomDistHorz)(x));
            }
            set {
                this.SetElement(uomWidXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// ATC report at start point
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (RsgUid, codeType, codeRnp?, codeLvl?, codeClassAcft?, codeIntl?, codeTypeFltRule?, codeCiv?, valDistVerUpper?, uomDistVerUpper?, codeDistVerUpper?, valDistVerLower?, uomDistVerLower?, codeDistVerLower?, valDistVerMnm?, uomDistVerMnm?, codeDistVerMnm?, valDistVerLowerOvrde?, uomDistVerLowerOvrde?, codeDistVerLowerOvrde?, valWid?, uomWid?, codeRepAtcStart?, codeRepAtcEnd?, codeRvsmStart?, codeRvsmEnd?, codeTypePath?, valTrueTrack?, valMagTrack?, valReversTrueTrack?, valReversMagTrack?, valLen?, valCopDist?, uomDist?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual codeRepAtc codeRepAtcStart {
            get {
                XElement x = this.GetElement(codeRepAtcStartXName);
                return ((codeRepAtc)(x));
            }
            set {
                this.SetElement(codeRepAtcStartXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// ATC report at end point
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (RsgUid, codeType, codeRnp?, codeLvl?, codeClassAcft?, codeIntl?, codeTypeFltRule?, codeCiv?, valDistVerUpper?, uomDistVerUpper?, codeDistVerUpper?, valDistVerLower?, uomDistVerLower?, codeDistVerLower?, valDistVerMnm?, uomDistVerMnm?, codeDistVerMnm?, valDistVerLowerOvrde?, uomDistVerLowerOvrde?, codeDistVerLowerOvrde?, valWid?, uomWid?, codeRepAtcStart?, codeRepAtcEnd?, codeRvsmStart?, codeRvsmEnd?, codeTypePath?, valTrueTrack?, valMagTrack?, valReversTrueTrack?, valReversMagTrack?, valLen?, valCopDist?, uomDist?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual codeRepAtc codeRepAtcEnd {
            get {
                XElement x = this.GetElement(codeRepAtcEndXName);
                return ((codeRepAtc)(x));
            }
            set {
                this.SetElement(codeRepAtcEndXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// RVSM role of start point
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (RsgUid, codeType, codeRnp?, codeLvl?, codeClassAcft?, codeIntl?, codeTypeFltRule?, codeCiv?, valDistVerUpper?, uomDistVerUpper?, codeDistVerUpper?, valDistVerLower?, uomDistVerLower?, codeDistVerLower?, valDistVerMnm?, uomDistVerMnm?, codeDistVerMnm?, valDistVerLowerOvrde?, uomDistVerLowerOvrde?, codeDistVerLowerOvrde?, valWid?, uomWid?, codeRepAtcStart?, codeRepAtcEnd?, codeRvsmStart?, codeRvsmEnd?, codeTypePath?, valTrueTrack?, valMagTrack?, valReversTrueTrack?, valReversMagTrack?, valLen?, valCopDist?, uomDist?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual codeRvsmPoint codeRvsmStart {
            get {
                XElement x = this.GetElement(codeRvsmStartXName);
                return ((codeRvsmPoint)(x));
            }
            set {
                this.SetElement(codeRvsmStartXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// RVSM role of end point
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (RsgUid, codeType, codeRnp?, codeLvl?, codeClassAcft?, codeIntl?, codeTypeFltRule?, codeCiv?, valDistVerUpper?, uomDistVerUpper?, codeDistVerUpper?, valDistVerLower?, uomDistVerLower?, codeDistVerLower?, valDistVerMnm?, uomDistVerMnm?, codeDistVerMnm?, valDistVerLowerOvrde?, uomDistVerLowerOvrde?, codeDistVerLowerOvrde?, valWid?, uomWid?, codeRepAtcStart?, codeRepAtcEnd?, codeRvsmStart?, codeRvsmEnd?, codeTypePath?, valTrueTrack?, valMagTrack?, valReversTrueTrack?, valReversMagTrack?, valLen?, valCopDist?, uomDist?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual codeRvsmPoint codeRvsmEnd {
            get {
                XElement x = this.GetElement(codeRvsmEndXName);
                return ((codeRvsmPoint)(x));
            }
            set {
                this.SetElement(codeRvsmEndXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Type of segment path
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (RsgUid, codeType, codeRnp?, codeLvl?, codeClassAcft?, codeIntl?, codeTypeFltRule?, codeCiv?, valDistVerUpper?, uomDistVerUpper?, codeDistVerUpper?, valDistVerLower?, uomDistVerLower?, codeDistVerLower?, valDistVerMnm?, uomDistVerMnm?, codeDistVerMnm?, valDistVerLowerOvrde?, uomDistVerLowerOvrde?, codeDistVerLowerOvrde?, valWid?, uomWid?, codeRepAtcStart?, codeRepAtcEnd?, codeRvsmStart?, codeRvsmEnd?, codeTypePath?, valTrueTrack?, valMagTrack?, valReversTrueTrack?, valReversMagTrack?, valLen?, valCopDist?, uomDist?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual codeTypeSegPath codeTypePath {
            get {
                XElement x = this.GetElement(codeTypePathXName);
                return ((codeTypeSegPath)(x));
            }
            set {
                this.SetElement(codeTypePathXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Initial true track
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (RsgUid, codeType, codeRnp?, codeLvl?, codeClassAcft?, codeIntl?, codeTypeFltRule?, codeCiv?, valDistVerUpper?, uomDistVerUpper?, codeDistVerUpper?, valDistVerLower?, uomDistVerLower?, codeDistVerLower?, valDistVerMnm?, uomDistVerMnm?, codeDistVerMnm?, valDistVerLowerOvrde?, uomDistVerLowerOvrde?, codeDistVerLowerOvrde?, valWid?, uomWid?, codeRepAtcStart?, codeRepAtcEnd?, codeRvsmStart?, codeRvsmEnd?, codeTypePath?, valTrueTrack?, valMagTrack?, valReversTrueTrack?, valReversMagTrack?, valLen?, valCopDist?, uomDist?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual valAngleBrg valTrueTrack {
            get {
                XElement x = this.GetElement(valTrueTrackXName);
                return ((valAngleBrg)(x));
            }
            set {
                this.SetElement(valTrueTrackXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Initial magnetic track
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (RsgUid, codeType, codeRnp?, codeLvl?, codeClassAcft?, codeIntl?, codeTypeFltRule?, codeCiv?, valDistVerUpper?, uomDistVerUpper?, codeDistVerUpper?, valDistVerLower?, uomDistVerLower?, codeDistVerLower?, valDistVerMnm?, uomDistVerMnm?, codeDistVerMnm?, valDistVerLowerOvrde?, uomDistVerLowerOvrde?, codeDistVerLowerOvrde?, valWid?, uomWid?, codeRepAtcStart?, codeRepAtcEnd?, codeRvsmStart?, codeRvsmEnd?, codeTypePath?, valTrueTrack?, valMagTrack?, valReversTrueTrack?, valReversMagTrack?, valLen?, valCopDist?, uomDist?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual valAngleBrg valMagTrack {
            get {
                XElement x = this.GetElement(valMagTrackXName);
                return ((valAngleBrg)(x));
            }
            set {
                this.SetElement(valMagTrackXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Reverse initial true track
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (RsgUid, codeType, codeRnp?, codeLvl?, codeClassAcft?, codeIntl?, codeTypeFltRule?, codeCiv?, valDistVerUpper?, uomDistVerUpper?, codeDistVerUpper?, valDistVerLower?, uomDistVerLower?, codeDistVerLower?, valDistVerMnm?, uomDistVerMnm?, codeDistVerMnm?, valDistVerLowerOvrde?, uomDistVerLowerOvrde?, codeDistVerLowerOvrde?, valWid?, uomWid?, codeRepAtcStart?, codeRepAtcEnd?, codeRvsmStart?, codeRvsmEnd?, codeTypePath?, valTrueTrack?, valMagTrack?, valReversTrueTrack?, valReversMagTrack?, valLen?, valCopDist?, uomDist?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual valAngleBrg valReversTrueTrack {
            get {
                XElement x = this.GetElement(valReversTrueTrackXName);
                return ((valAngleBrg)(x));
            }
            set {
                this.SetElement(valReversTrueTrackXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Reverse initial magnetic track
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (RsgUid, codeType, codeRnp?, codeLvl?, codeClassAcft?, codeIntl?, codeTypeFltRule?, codeCiv?, valDistVerUpper?, uomDistVerUpper?, codeDistVerUpper?, valDistVerLower?, uomDistVerLower?, codeDistVerLower?, valDistVerMnm?, uomDistVerMnm?, codeDistVerMnm?, valDistVerLowerOvrde?, uomDistVerLowerOvrde?, codeDistVerLowerOvrde?, valWid?, uomWid?, codeRepAtcStart?, codeRepAtcEnd?, codeRvsmStart?, codeRvsmEnd?, codeTypePath?, valTrueTrack?, valMagTrack?, valReversTrueTrack?, valReversMagTrack?, valLen?, valCopDist?, uomDist?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual valAngleBrg valReversMagTrack {
            get {
                XElement x = this.GetElement(valReversMagTrackXName);
                return ((valAngleBrg)(x));
            }
            set {
                this.SetElement(valReversMagTrackXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Length
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (RsgUid, codeType, codeRnp?, codeLvl?, codeClassAcft?, codeIntl?, codeTypeFltRule?, codeCiv?, valDistVerUpper?, uomDistVerUpper?, codeDistVerUpper?, valDistVerLower?, uomDistVerLower?, codeDistVerLower?, valDistVerMnm?, uomDistVerMnm?, codeDistVerMnm?, valDistVerLowerOvrde?, uomDistVerLowerOvrde?, codeDistVerLowerOvrde?, valWid?, uomWid?, codeRepAtcStart?, codeRepAtcEnd?, codeRvsmStart?, codeRvsmEnd?, codeTypePath?, valTrueTrack?, valMagTrack?, valReversTrueTrack?, valReversMagTrack?, valLen?, valCopDist?, uomDist?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual valDistHorz valLen {
            get {
                XElement x = this.GetElement(valLenXName);
                return ((valDistHorz)(x));
            }
            set {
                this.SetElement(valLenXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Distance from the start to the change over point
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (RsgUid, codeType, codeRnp?, codeLvl?, codeClassAcft?, codeIntl?, codeTypeFltRule?, codeCiv?, valDistVerUpper?, uomDistVerUpper?, codeDistVerUpper?, valDistVerLower?, uomDistVerLower?, codeDistVerLower?, valDistVerMnm?, uomDistVerMnm?, codeDistVerMnm?, valDistVerLowerOvrde?, uomDistVerLowerOvrde?, codeDistVerLowerOvrde?, valWid?, uomWid?, codeRepAtcStart?, codeRepAtcEnd?, codeRvsmStart?, codeRvsmEnd?, codeTypePath?, valTrueTrack?, valMagTrack?, valReversTrueTrack?, valReversMagTrack?, valLen?, valCopDist?, uomDist?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual valDistHorz valCopDist {
            get {
                XElement x = this.GetElement(valCopDistXName);
                return ((valDistHorz)(x));
            }
            set {
                this.SetElement(valCopDistXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Unit of measurement [horizontal distance]
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (RsgUid, codeType, codeRnp?, codeLvl?, codeClassAcft?, codeIntl?, codeTypeFltRule?, codeCiv?, valDistVerUpper?, uomDistVerUpper?, codeDistVerUpper?, valDistVerLower?, uomDistVerLower?, codeDistVerLower?, valDistVerMnm?, uomDistVerMnm?, codeDistVerMnm?, valDistVerLowerOvrde?, uomDistVerLowerOvrde?, codeDistVerLowerOvrde?, valWid?, uomWid?, codeRepAtcStart?, codeRepAtcEnd?, codeRvsmStart?, codeRvsmEnd?, codeTypePath?, valTrueTrack?, valMagTrack?, valReversTrueTrack?, valReversMagTrack?, valLen?, valCopDist?, uomDist?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual uomDistHorz uomDist {
            get {
                XElement x = this.GetElement(uomDistXName);
                return ((uomDistHorz)(x));
            }
            set {
                this.SetElement(uomDistXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Remark
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (RsgUid, codeType, codeRnp?, codeLvl?, codeClassAcft?, codeIntl?, codeTypeFltRule?, codeCiv?, valDistVerUpper?, uomDistVerUpper?, codeDistVerUpper?, valDistVerLower?, uomDistVerLower?, codeDistVerLower?, valDistVerMnm?, uomDistVerMnm?, codeDistVerMnm?, valDistVerLowerOvrde?, uomDistVerLowerOvrde?, codeDistVerLowerOvrde?, valWid?, uomWid?, codeRepAtcStart?, codeRepAtcEnd?, codeRvsmStart?, codeRvsmEnd?, codeTypePath?, valTrueTrack?, valMagTrack?, valReversTrueTrack?, valReversMagTrack?, valLen?, valCopDist?, uomDist?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual txtRmk txtRmk {
            get {
                XElement x = this.GetElement(txtRmkXName);
                return ((txtRmk)(x));
            }
            set {
                this.SetElement(txtRmkXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string source {
            get {
                XAttribute x = this.Attribute(sourceXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(sourceXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<RouteSegmentType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(RsgUidXName, typeof(RouteSegmentUidType));
            localElementDictionary.Add(codeTypeXName, typeof(codeTypeRte));
            localElementDictionary.Add(codeRnpXName, typeof(codeRnp));
            localElementDictionary.Add(codeLvlXName, typeof(codeLvl));
            localElementDictionary.Add(codeClassAcftXName, typeof(codeClassAcft));
            localElementDictionary.Add(codeIntlXName, typeof(codeIntlRte));
            localElementDictionary.Add(codeTypeFltRuleXName, typeof(codeTypeFltRule));
            localElementDictionary.Add(codeCivXName, typeof(codeCivRte));
            localElementDictionary.Add(valDistVerUpperXName, typeof(valDistVer));
            localElementDictionary.Add(uomDistVerUpperXName, typeof(uomDistVer));
            localElementDictionary.Add(codeDistVerUpperXName, typeof(codeDistVer));
            localElementDictionary.Add(valDistVerLowerXName, typeof(valDistVer));
            localElementDictionary.Add(uomDistVerLowerXName, typeof(uomDistVer));
            localElementDictionary.Add(codeDistVerLowerXName, typeof(codeDistVer));
            localElementDictionary.Add(valDistVerMnmXName, typeof(valDistVer));
            localElementDictionary.Add(uomDistVerMnmXName, typeof(uomDistVer));
            localElementDictionary.Add(codeDistVerMnmXName, typeof(codeDistVer));
            localElementDictionary.Add(valDistVerLowerOvrdeXName, typeof(valDistVer));
            localElementDictionary.Add(uomDistVerLowerOvrdeXName, typeof(uomDistVer));
            localElementDictionary.Add(codeDistVerLowerOvrdeXName, typeof(codeDistVer));
            localElementDictionary.Add(valWidXName, typeof(valDistHorz));
            localElementDictionary.Add(uomWidXName, typeof(uomDistHorz));
            localElementDictionary.Add(codeRepAtcStartXName, typeof(codeRepAtc));
            localElementDictionary.Add(codeRepAtcEndXName, typeof(codeRepAtc));
            localElementDictionary.Add(codeRvsmStartXName, typeof(codeRvsmPoint));
            localElementDictionary.Add(codeRvsmEndXName, typeof(codeRvsmPoint));
            localElementDictionary.Add(codeTypePathXName, typeof(codeTypeSegPath));
            localElementDictionary.Add(valTrueTrackXName, typeof(valAngleBrg));
            localElementDictionary.Add(valMagTrackXName, typeof(valAngleBrg));
            localElementDictionary.Add(valReversTrueTrackXName, typeof(valAngleBrg));
            localElementDictionary.Add(valReversMagTrackXName, typeof(valAngleBrg));
            localElementDictionary.Add(valLenXName, typeof(valDistHorz));
            localElementDictionary.Add(valCopDistXName, typeof(valDistHorz));
            localElementDictionary.Add(uomDistXName, typeof(uomDistHorz));
            localElementDictionary.Add(txtRmkXName, typeof(txtRmk));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Route segment - UID
    /// </para>
    /// <para>
    /// Regular expression: (RteUid, (TcnUidSta | VorUidSta | DpnUidSta | NdbUidSta | DmeUidSta | MkrUidSta), (TcnUidEnd | VorUidEnd | DpnUidEnd | NdbUidEnd | DmeUidEnd | MkrUidEnd))
    /// </para>
    /// </summary>
    public partial class RouteSegmentUidType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName RteUidXName = System.Xml.Linq.XName.Get("RteUid", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TcnUidStaXName = System.Xml.Linq.XName.Get("TcnUidSta", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName VorUidStaXName = System.Xml.Linq.XName.Get("VorUidSta", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName DpnUidStaXName = System.Xml.Linq.XName.Get("DpnUidSta", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName NdbUidStaXName = System.Xml.Linq.XName.Get("NdbUidSta", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName DmeUidStaXName = System.Xml.Linq.XName.Get("DmeUidSta", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName MkrUidStaXName = System.Xml.Linq.XName.Get("MkrUidSta", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TcnUidEndXName = System.Xml.Linq.XName.Get("TcnUidEnd", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName VorUidEndXName = System.Xml.Linq.XName.Get("VorUidEnd", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName DpnUidEndXName = System.Xml.Linq.XName.Get("DpnUidEnd", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName NdbUidEndXName = System.Xml.Linq.XName.Get("NdbUidEnd", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName DmeUidEndXName = System.Xml.Linq.XName.Get("DmeUidEnd", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName MkrUidEndXName = System.Xml.Linq.XName.Get("MkrUidEnd", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName midXName = System.Xml.Linq.XName.Get("mid", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("RouteSegmentUidType", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator RouteSegmentUidType(XElement xe) { return XTypedServices.ToXTypedElement<RouteSegmentUidType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static RouteSegmentUidType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(RteUidXName), new ChoiceContentModelEntity(new NamedContentModelEntity(TcnUidStaXName), new NamedContentModelEntity(VorUidStaXName), new NamedContentModelEntity(DpnUidStaXName), new NamedContentModelEntity(NdbUidStaXName), new NamedContentModelEntity(DmeUidStaXName), new NamedContentModelEntity(MkrUidStaXName)), new ChoiceContentModelEntity(new NamedContentModelEntity(TcnUidEndXName), new NamedContentModelEntity(VorUidEndXName), new NamedContentModelEntity(DpnUidEndXName), new NamedContentModelEntity(NdbUidEndXName), new NamedContentModelEntity(DmeUidEndXName), new NamedContentModelEntity(MkrUidEndXName)));
        }
        
        /// <summary>
        /// <para>
        /// Route segment - UID
        /// </para>
        /// <para>
        /// Regular expression: (RteUid, (TcnUidSta | VorUidSta | DpnUidSta | NdbUidSta | DmeUidSta | MkrUidSta), (TcnUidEnd | VorUidEnd | DpnUidEnd | NdbUidEnd | DmeUidEnd | MkrUidEnd))
        /// </para>
        /// </summary>
        public RouteSegmentUidType() {
        }
        
        /// <summary>
        /// <para>
        /// Route segment is part of En-route route
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (RteUid, (TcnUidSta | VorUidSta | DpnUidSta | NdbUidSta | DmeUidSta | MkrUidSta), (TcnUidEnd | VorUidEnd | DpnUidEnd | NdbUidEnd | DmeUidEnd | MkrUidEnd))
        /// </para>
        /// </summary>
        public virtual EnrouteRouteUidType RteUid {
            get {
                XElement x = this.GetElement(RteUidXName);
                return ((EnrouteRouteUidType)(x));
            }
            set {
                this.SetElement(RteUidXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Start significant point is at Tactical air navigation beacon [TACAN]
        /// </para>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (RteUid, (TcnUidSta | VorUidSta | DpnUidSta | NdbUidSta | DmeUidSta | MkrUidSta), (TcnUidEnd | VorUidEnd | DpnUidEnd | NdbUidEnd | DmeUidEnd | MkrUidEnd))
        /// </para>
        /// </summary>
        public virtual TacanUidType TcnUidSta {
            get {
                XElement x = this.GetElement(TcnUidStaXName);
                return ((TacanUidType)(x));
            }
            set {
                this.SetElement(TcnUidStaXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Start significant point is at VHF omnidirectional radio range beacon [VOR]
        /// </para>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (RteUid, (TcnUidSta | VorUidSta | DpnUidSta | NdbUidSta | DmeUidSta | MkrUidSta), (TcnUidEnd | VorUidEnd | DpnUidEnd | NdbUidEnd | DmeUidEnd | MkrUidEnd))
        /// </para>
        /// </summary>
        public virtual VorUidType VorUidSta {
            get {
                XElement x = this.GetElement(VorUidStaXName);
                return ((VorUidType)(x));
            }
            set {
                this.SetElement(VorUidStaXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Start significant point is at Designated point
        /// </para>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (RteUid, (TcnUidSta | VorUidSta | DpnUidSta | NdbUidSta | DmeUidSta | MkrUidSta), (TcnUidEnd | VorUidEnd | DpnUidEnd | NdbUidEnd | DmeUidEnd | MkrUidEnd))
        /// </para>
        /// </summary>
        public virtual DesignatedPointUidType DpnUidSta {
            get {
                XElement x = this.GetElement(DpnUidStaXName);
                return ((DesignatedPointUidType)(x));
            }
            set {
                this.SetElement(DpnUidStaXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Start significant point is at Non-directional radio beacon [NDB]
        /// </para>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (RteUid, (TcnUidSta | VorUidSta | DpnUidSta | NdbUidSta | DmeUidSta | MkrUidSta), (TcnUidEnd | VorUidEnd | DpnUidEnd | NdbUidEnd | DmeUidEnd | MkrUidEnd))
        /// </para>
        /// </summary>
        public virtual NdbUidType NdbUidSta {
            get {
                XElement x = this.GetElement(NdbUidStaXName);
                return ((NdbUidType)(x));
            }
            set {
                this.SetElement(NdbUidStaXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Start significant point is at Distance measuring equipment [DME]
        /// </para>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (RteUid, (TcnUidSta | VorUidSta | DpnUidSta | NdbUidSta | DmeUidSta | MkrUidSta), (TcnUidEnd | VorUidEnd | DpnUidEnd | NdbUidEnd | DmeUidEnd | MkrUidEnd))
        /// </para>
        /// </summary>
        public virtual DmeUidType DmeUidSta {
            get {
                XElement x = this.GetElement(DmeUidStaXName);
                return ((DmeUidType)(x));
            }
            set {
                this.SetElement(DmeUidStaXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Start significant point is at Marker [MKR]
        /// </para>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (RteUid, (TcnUidSta | VorUidSta | DpnUidSta | NdbUidSta | DmeUidSta | MkrUidSta), (TcnUidEnd | VorUidEnd | DpnUidEnd | NdbUidEnd | DmeUidEnd | MkrUidEnd))
        /// </para>
        /// </summary>
        public virtual MkrUidType MkrUidSta {
            get {
                XElement x = this.GetElement(MkrUidStaXName);
                return ((MkrUidType)(x));
            }
            set {
                this.SetElement(MkrUidStaXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// End significant point is at Tactical air navigation beacon [TACAN]
        /// </para>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (RteUid, (TcnUidSta | VorUidSta | DpnUidSta | NdbUidSta | DmeUidSta | MkrUidSta), (TcnUidEnd | VorUidEnd | DpnUidEnd | NdbUidEnd | DmeUidEnd | MkrUidEnd))
        /// </para>
        /// </summary>
        public virtual TacanUidType TcnUidEnd {
            get {
                XElement x = this.GetElement(TcnUidEndXName);
                return ((TacanUidType)(x));
            }
            set {
                this.SetElement(TcnUidEndXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// End significant point is at VHF omnidirectional radio range beacon [VOR]
        /// </para>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (RteUid, (TcnUidSta | VorUidSta | DpnUidSta | NdbUidSta | DmeUidSta | MkrUidSta), (TcnUidEnd | VorUidEnd | DpnUidEnd | NdbUidEnd | DmeUidEnd | MkrUidEnd))
        /// </para>
        /// </summary>
        public virtual VorUidType VorUidEnd {
            get {
                XElement x = this.GetElement(VorUidEndXName);
                return ((VorUidType)(x));
            }
            set {
                this.SetElement(VorUidEndXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// End significant point is at Designated point
        /// </para>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (RteUid, (TcnUidSta | VorUidSta | DpnUidSta | NdbUidSta | DmeUidSta | MkrUidSta), (TcnUidEnd | VorUidEnd | DpnUidEnd | NdbUidEnd | DmeUidEnd | MkrUidEnd))
        /// </para>
        /// </summary>
        public virtual DesignatedPointUidType DpnUidEnd {
            get {
                XElement x = this.GetElement(DpnUidEndXName);
                return ((DesignatedPointUidType)(x));
            }
            set {
                this.SetElement(DpnUidEndXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// End significant point is at Non-directional radio beacon [NDB]
        /// </para>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (RteUid, (TcnUidSta | VorUidSta | DpnUidSta | NdbUidSta | DmeUidSta | MkrUidSta), (TcnUidEnd | VorUidEnd | DpnUidEnd | NdbUidEnd | DmeUidEnd | MkrUidEnd))
        /// </para>
        /// </summary>
        public virtual NdbUidType NdbUidEnd {
            get {
                XElement x = this.GetElement(NdbUidEndXName);
                return ((NdbUidType)(x));
            }
            set {
                this.SetElement(NdbUidEndXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// End significant point is at Distance measuring equipment [DME]
        /// </para>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (RteUid, (TcnUidSta | VorUidSta | DpnUidSta | NdbUidSta | DmeUidSta | MkrUidSta), (TcnUidEnd | VorUidEnd | DpnUidEnd | NdbUidEnd | DmeUidEnd | MkrUidEnd))
        /// </para>
        /// </summary>
        public virtual DmeUidType DmeUidEnd {
            get {
                XElement x = this.GetElement(DmeUidEndXName);
                return ((DmeUidType)(x));
            }
            set {
                this.SetElement(DmeUidEndXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// End significant point is at Marker [MKR]
        /// </para>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (RteUid, (TcnUidSta | VorUidSta | DpnUidSta | NdbUidSta | DmeUidSta | MkrUidSta), (TcnUidEnd | VorUidEnd | DpnUidEnd | NdbUidEnd | DmeUidEnd | MkrUidEnd))
        /// </para>
        /// </summary>
        public virtual MkrUidType MkrUidEnd {
            get {
                XElement x = this.GetElement(MkrUidEndXName);
                return ((MkrUidType)(x));
            }
            set {
                this.SetElement(MkrUidEndXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string mid {
            get {
                XAttribute x = this.Attribute(midXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(midXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<RouteSegmentUidType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(RteUidXName, typeof(EnrouteRouteUidType));
            localElementDictionary.Add(TcnUidStaXName, typeof(TacanUidType));
            localElementDictionary.Add(VorUidStaXName, typeof(VorUidType));
            localElementDictionary.Add(DpnUidStaXName, typeof(DesignatedPointUidType));
            localElementDictionary.Add(NdbUidStaXName, typeof(NdbUidType));
            localElementDictionary.Add(DmeUidStaXName, typeof(DmeUidType));
            localElementDictionary.Add(MkrUidStaXName, typeof(MkrUidType));
            localElementDictionary.Add(TcnUidEndXName, typeof(TacanUidType));
            localElementDictionary.Add(VorUidEndXName, typeof(VorUidType));
            localElementDictionary.Add(DpnUidEndXName, typeof(DesignatedPointUidType));
            localElementDictionary.Add(NdbUidEndXName, typeof(NdbUidType));
            localElementDictionary.Add(DmeUidEndXName, typeof(DmeUidType));
            localElementDictionary.Add(MkrUidEndXName, typeof(MkrUidType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Route segment usage condition
    /// </para>
    /// <para>
    /// Regular expression: (RsuUid, Rul*, Rst?, txtRmk?)
    /// </para>
    /// </summary>
    public partial class RouteSegmentUsageType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName RsuUidXName = System.Xml.Linq.XName.Get("RsuUid", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName RulXName = System.Xml.Linq.XName.Get("Rul", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<RouteSegmentUsageLevelType> RulField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName RstXName = System.Xml.Linq.XName.Get("Rst", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName txtRmkXName = System.Xml.Linq.XName.Get("txtRmk", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName sourceXName = System.Xml.Linq.XName.Get("source", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("RouteSegmentUsageType", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator RouteSegmentUsageType(XElement xe) { return XTypedServices.ToXTypedElement<RouteSegmentUsageType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static RouteSegmentUsageType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(RsuUidXName), new NamedContentModelEntity(RulXName), new NamedContentModelEntity(RstXName), new NamedContentModelEntity(txtRmkXName));
        }
        
        /// <summary>
        /// <para>
        /// Route segment usage condition
        /// </para>
        /// <para>
        /// Regular expression: (RsuUid, Rul*, Rst?, txtRmk?)
        /// </para>
        /// </summary>
        public RouteSegmentUsageType() {
        }
        
        /// <summary>
        /// <para>
        /// a version of Route segment usage condition
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (RsuUid, Rul*, Rst?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual RouteSegmentUsageUidType RsuUid {
            get {
                XElement x = this.GetElement(RsuUidXName);
                return ((RouteSegmentUsageUidType)(x));
            }
            set {
                this.SetElement(RsuUidXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Route segment usage condition is referring to Level associated with a route segment usage
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (RsuUid, Rul*, Rst?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual IList<RouteSegmentUsageLevelType> Rul {
            get {
                if ((this.RulField == null)) {
                    this.RulField = new XTypedList<RouteSegmentUsageLevelType>(this, LinqToXsdTypeManager.Instance, RulXName);
                }
                return this.RulField;
            }
            set {
                if ((value == null)) {
                    this.RulField = null;
                }
                else {
                    if ((this.RulField == null)) {
                        this.RulField = XTypedList<RouteSegmentUsageLevelType>.Initialize(this, LinqToXsdTypeManager.Instance, value, RulXName);
                    }
                    else {
                        XTypedServices.SetList<RouteSegmentUsageLevelType>(this.RulField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Route segment usage condition is associated with Route segment usage - Timetable
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (RsuUid, Rul*, Rst?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual TimetableType Rst {
            get {
                XElement x = this.GetElement(RstXName);
                return ((TimetableType)(x));
            }
            set {
                this.SetElement(RstXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Remark
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (RsuUid, Rul*, Rst?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual txtRmk txtRmk {
            get {
                XElement x = this.GetElement(txtRmkXName);
                return ((txtRmk)(x));
            }
            set {
                this.SetElement(txtRmkXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string source {
            get {
                XAttribute x = this.Attribute(sourceXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(sourceXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<RouteSegmentUsageType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(RsuUidXName, typeof(RouteSegmentUsageUidType));
            localElementDictionary.Add(RulXName, typeof(RouteSegmentUsageLevelType));
            localElementDictionary.Add(RstXName, typeof(TimetableType));
            localElementDictionary.Add(txtRmkXName, typeof(txtRmk));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Route segment usage condition - UID
    /// </para>
    /// <para>
    /// Regular expression: (RsgUid, codeRteAvbl, noSeq, codeDir)
    /// </para>
    /// </summary>
    public partial class RouteSegmentUsageUidType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName RsgUidXName = System.Xml.Linq.XName.Get("RsgUid", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName codeRteAvblXName = System.Xml.Linq.XName.Get("codeRteAvbl", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName noSeqXName = System.Xml.Linq.XName.Get("noSeq", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName codeDirXName = System.Xml.Linq.XName.Get("codeDir", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName midXName = System.Xml.Linq.XName.Get("mid", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("RouteSegmentUsageUidType", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator RouteSegmentUsageUidType(XElement xe) { return XTypedServices.ToXTypedElement<RouteSegmentUsageUidType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static RouteSegmentUsageUidType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(RsgUidXName), new NamedContentModelEntity(codeRteAvblXName), new NamedContentModelEntity(noSeqXName), new NamedContentModelEntity(codeDirXName));
        }
        
        /// <summary>
        /// <para>
        /// Route segment usage condition - UID
        /// </para>
        /// <para>
        /// Regular expression: (RsgUid, codeRteAvbl, noSeq, codeDir)
        /// </para>
        /// </summary>
        public RouteSegmentUsageUidType() {
        }
        
        /// <summary>
        /// <para>
        /// Route segment usage condition is based on Route segment
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (RsgUid, codeRteAvbl, noSeq, codeDir)
        /// </para>
        /// </summary>
        public virtual RouteSegmentUidType RsgUid {
            get {
                XElement x = this.GetElement(RsgUidXName);
                return ((RouteSegmentUidType)(x));
            }
            set {
                this.SetElement(RsgUidXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Availability of the route segment
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (RsgUid, codeRteAvbl, noSeq, codeDir)
        /// </para>
        /// </summary>
        public virtual codeRteAvbl codeRteAvbl {
            get {
                XElement x = this.GetElement(codeRteAvblXName);
                return ((codeRteAvbl)(x));
            }
            set {
                this.SetElement(codeRteAvblXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Sequence number
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (RsgUid, codeRteAvbl, noSeq, codeDir)
        /// </para>
        /// </summary>
        public virtual noSeq noSeq {
            get {
                XElement x = this.GetElement(noSeqXName);
                return ((noSeq)(x));
            }
            set {
                this.SetElement(noSeqXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Direction
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (RsgUid, codeRteAvbl, noSeq, codeDir)
        /// </para>
        /// </summary>
        public virtual codeDir codeDir {
            get {
                XElement x = this.GetElement(codeDirXName);
                return ((codeDir)(x));
            }
            set {
                this.SetElement(codeDirXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string mid {
            get {
                XAttribute x = this.Attribute(midXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(midXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<RouteSegmentUsageUidType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(RsgUidXName, typeof(RouteSegmentUidType));
            localElementDictionary.Add(codeRteAvblXName, typeof(codeRteAvbl));
            localElementDictionary.Add(noSeqXName, typeof(noSeq));
            localElementDictionary.Add(codeDirXName, typeof(codeDir));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Position on the centre line of a RWY
    /// </para>
    /// <para>
    /// Regular expression: (RcpUid, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, valElev?, valElevAccuracy?, valGeoidUndulation?, uomDistVer?, valCrc?, txtVerDatum?, txtRmk?)
    /// </para>
    /// </summary>
    public partial class RunwayCentreLinePositionType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName RcpUidXName = System.Xml.Linq.XName.Get("RcpUid", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName codeDatumXName = System.Xml.Linq.XName.Get("codeDatum", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName valGeoAccuracyXName = System.Xml.Linq.XName.Get("valGeoAccuracy", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName uomGeoAccuracyXName = System.Xml.Linq.XName.Get("uomGeoAccuracy", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName valElevXName = System.Xml.Linq.XName.Get("valElev", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName valElevAccuracyXName = System.Xml.Linq.XName.Get("valElevAccuracy", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName valGeoidUndulationXName = System.Xml.Linq.XName.Get("valGeoidUndulation", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName uomDistVerXName = System.Xml.Linq.XName.Get("uomDistVer", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName valCrcXName = System.Xml.Linq.XName.Get("valCrc", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName txtVerDatumXName = System.Xml.Linq.XName.Get("txtVerDatum", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName txtRmkXName = System.Xml.Linq.XName.Get("txtRmk", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName sourceXName = System.Xml.Linq.XName.Get("source", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("RunwayCentreLinePositionType", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator RunwayCentreLinePositionType(XElement xe) { return XTypedServices.ToXTypedElement<RunwayCentreLinePositionType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static RunwayCentreLinePositionType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(RcpUidXName), new NamedContentModelEntity(codeDatumXName), new NamedContentModelEntity(valGeoAccuracyXName), new NamedContentModelEntity(uomGeoAccuracyXName), new NamedContentModelEntity(valElevXName), new NamedContentModelEntity(valElevAccuracyXName), new NamedContentModelEntity(valGeoidUndulationXName), new NamedContentModelEntity(uomDistVerXName), new NamedContentModelEntity(valCrcXName), new NamedContentModelEntity(txtVerDatumXName), new NamedContentModelEntity(txtRmkXName));
        }
        
        /// <summary>
        /// <para>
        /// Position on the centre line of a RWY
        /// </para>
        /// <para>
        /// Regular expression: (RcpUid, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, valElev?, valElevAccuracy?, valGeoidUndulation?, uomDistVer?, valCrc?, txtVerDatum?, txtRmk?)
        /// </para>
        /// </summary>
        public RunwayCentreLinePositionType() {
        }
        
        /// <summary>
        /// <para>
        /// a version of Position on the centre line of a RWY
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (RcpUid, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, valElev?, valElevAccuracy?, valGeoidUndulation?, uomDistVer?, valCrc?, txtVerDatum?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual RunwayCentreLinePositionUidType RcpUid {
            get {
                XElement x = this.GetElement(RcpUidXName);
                return ((RunwayCentreLinePositionUidType)(x));
            }
            set {
                this.SetElement(RcpUidXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Datum
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (RcpUid, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, valElev?, valElevAccuracy?, valGeoidUndulation?, uomDistVer?, valCrc?, txtVerDatum?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual codeDatum codeDatum {
            get {
                XElement x = this.GetElement(codeDatumXName);
                return ((codeDatum)(x));
            }
            set {
                this.SetElement(codeDatumXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Geographical accuracy
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (RcpUid, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, valElev?, valElevAccuracy?, valGeoidUndulation?, uomDistVer?, valCrc?, txtVerDatum?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual valDistHorz valGeoAccuracy {
            get {
                XElement x = this.GetElement(valGeoAccuracyXName);
                return ((valDistHorz)(x));
            }
            set {
                this.SetElement(valGeoAccuracyXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Unit of measurement [geographical accuracy]
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (RcpUid, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, valElev?, valElevAccuracy?, valGeoidUndulation?, uomDistVer?, valCrc?, txtVerDatum?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual uomDistHorz uomGeoAccuracy {
            get {
                XElement x = this.GetElement(uomGeoAccuracyXName);
                return ((uomDistHorz)(x));
            }
            set {
                this.SetElement(uomGeoAccuracyXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Elevation
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (RcpUid, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, valElev?, valElevAccuracy?, valGeoidUndulation?, uomDistVer?, valCrc?, txtVerDatum?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual valDistVer valElev {
            get {
                XElement x = this.GetElement(valElevXName);
                return ((valDistVer)(x));
            }
            set {
                this.SetElement(valElevXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Elevation accuracy
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (RcpUid, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, valElev?, valElevAccuracy?, valGeoidUndulation?, uomDistVer?, valCrc?, txtVerDatum?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual valDistVer valElevAccuracy {
            get {
                XElement x = this.GetElement(valElevAccuracyXName);
                return ((valDistVer)(x));
            }
            set {
                this.SetElement(valElevAccuracyXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Geoid undulation
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (RcpUid, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, valElev?, valElevAccuracy?, valGeoidUndulation?, uomDistVer?, valCrc?, txtVerDatum?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual valDistVer valGeoidUndulation {
            get {
                XElement x = this.GetElement(valGeoidUndulationXName);
                return ((valDistVer)(x));
            }
            set {
                this.SetElement(valGeoidUndulationXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Unit of measurement [vertical distance]
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (RcpUid, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, valElev?, valElevAccuracy?, valGeoidUndulation?, uomDistVer?, valCrc?, txtVerDatum?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual uomElev uomDistVer {
            get {
                XElement x = this.GetElement(uomDistVerXName);
                return ((uomElev)(x));
            }
            set {
                this.SetElement(uomDistVerXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Cyclic redundancy check
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (RcpUid, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, valElev?, valElevAccuracy?, valGeoidUndulation?, uomDistVer?, valCrc?, txtVerDatum?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual valHex valCrc {
            get {
                XElement x = this.GetElement(valCrcXName);
                return ((valHex)(x));
            }
            set {
                this.SetElement(valCrcXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Vertical Datum
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (RcpUid, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, valElev?, valElevAccuracy?, valGeoidUndulation?, uomDistVer?, valCrc?, txtVerDatum?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual txtDescr txtVerDatum {
            get {
                XElement x = this.GetElement(txtVerDatumXName);
                return ((txtDescr)(x));
            }
            set {
                this.SetElement(txtVerDatumXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Remark
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (RcpUid, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, valElev?, valElevAccuracy?, valGeoidUndulation?, uomDistVer?, valCrc?, txtVerDatum?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual txtRmk txtRmk {
            get {
                XElement x = this.GetElement(txtRmkXName);
                return ((txtRmk)(x));
            }
            set {
                this.SetElement(txtRmkXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string source {
            get {
                XAttribute x = this.Attribute(sourceXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(sourceXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<RunwayCentreLinePositionType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(RcpUidXName, typeof(RunwayCentreLinePositionUidType));
            localElementDictionary.Add(codeDatumXName, typeof(codeDatum));
            localElementDictionary.Add(valGeoAccuracyXName, typeof(valDistHorz));
            localElementDictionary.Add(uomGeoAccuracyXName, typeof(uomDistHorz));
            localElementDictionary.Add(valElevXName, typeof(valDistVer));
            localElementDictionary.Add(valElevAccuracyXName, typeof(valDistVer));
            localElementDictionary.Add(valGeoidUndulationXName, typeof(valDistVer));
            localElementDictionary.Add(uomDistVerXName, typeof(uomElev));
            localElementDictionary.Add(valCrcXName, typeof(valHex));
            localElementDictionary.Add(txtVerDatumXName, typeof(txtDescr));
            localElementDictionary.Add(txtRmkXName, typeof(txtRmk));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Position on the centre line of a RWY - UID
    /// </para>
    /// <para>
    /// Regular expression: (RwyUid, geoLat, geoLong)
    /// </para>
    /// </summary>
    public partial class RunwayCentreLinePositionUidType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName RwyUidXName = System.Xml.Linq.XName.Get("RwyUid", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName geoLatXName = System.Xml.Linq.XName.Get("geoLat", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName geoLongXName = System.Xml.Linq.XName.Get("geoLong", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName midXName = System.Xml.Linq.XName.Get("mid", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("RunwayCentreLinePositionUidType", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator RunwayCentreLinePositionUidType(XElement xe) { return XTypedServices.ToXTypedElement<RunwayCentreLinePositionUidType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static RunwayCentreLinePositionUidType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(RwyUidXName), new NamedContentModelEntity(geoLatXName), new NamedContentModelEntity(geoLongXName));
        }
        
        /// <summary>
        /// <para>
        /// Position on the centre line of a RWY - UID
        /// </para>
        /// <para>
        /// Regular expression: (RwyUid, geoLat, geoLong)
        /// </para>
        /// </summary>
        public RunwayCentreLinePositionUidType() {
        }
        
        /// <summary>
        /// <para>
        /// Position on the centre line of a RWY is on the center line of Runway [RWY]
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (RwyUid, geoLat, geoLong)
        /// </para>
        /// </summary>
        public virtual RunwayUidType RwyUid {
            get {
                XElement x = this.GetElement(RwyUidXName);
                return ((RunwayUidType)(x));
            }
            set {
                this.SetElement(RwyUidXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Latitude
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (RwyUid, geoLat, geoLong)
        /// </para>
        /// </summary>
        public virtual geoLat geoLat {
            get {
                XElement x = this.GetElement(geoLatXName);
                return ((geoLat)(x));
            }
            set {
                this.SetElement(geoLatXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Longitude
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (RwyUid, geoLat, geoLong)
        /// </para>
        /// </summary>
        public virtual geoLong geoLong {
            get {
                XElement x = this.GetElement(geoLongXName);
                return ((geoLong)(x));
            }
            set {
                this.SetElement(geoLongXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string mid {
            get {
                XAttribute x = this.Attribute(midXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(midXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<RunwayCentreLinePositionUidType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(RwyUidXName, typeof(RunwayUidType));
            localElementDictionary.Add(geoLatXName, typeof(geoLat));
            localElementDictionary.Add(geoLongXName, typeof(geoLong));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// RWY direction approach lighting system
    /// </para>
    /// <para>
    /// Regular expression: (RdaUid, valLen?, uomLen?, codeIntst?, codeSequencedFlash?, txtDescrFlash?, txtRmk?)
    /// </para>
    /// </summary>
    public partial class RunwayDirectionApproachLightingSystemType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName RdaUidXName = System.Xml.Linq.XName.Get("RdaUid", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName valLenXName = System.Xml.Linq.XName.Get("valLen", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName uomLenXName = System.Xml.Linq.XName.Get("uomLen", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName codeIntstXName = System.Xml.Linq.XName.Get("codeIntst", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName codeSequencedFlashXName = System.Xml.Linq.XName.Get("codeSequencedFlash", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName txtDescrFlashXName = System.Xml.Linq.XName.Get("txtDescrFlash", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName txtRmkXName = System.Xml.Linq.XName.Get("txtRmk", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName sourceXName = System.Xml.Linq.XName.Get("source", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("RunwayDirectionApproachLightingSystemType", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator RunwayDirectionApproachLightingSystemType(XElement xe) { return XTypedServices.ToXTypedElement<RunwayDirectionApproachLightingSystemType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static RunwayDirectionApproachLightingSystemType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(RdaUidXName), new NamedContentModelEntity(valLenXName), new NamedContentModelEntity(uomLenXName), new NamedContentModelEntity(codeIntstXName), new NamedContentModelEntity(codeSequencedFlashXName), new NamedContentModelEntity(txtDescrFlashXName), new NamedContentModelEntity(txtRmkXName));
        }
        
        /// <summary>
        /// <para>
        /// RWY direction approach lighting system
        /// </para>
        /// <para>
        /// Regular expression: (RdaUid, valLen?, uomLen?, codeIntst?, codeSequencedFlash?, txtDescrFlash?, txtRmk?)
        /// </para>
        /// </summary>
        public RunwayDirectionApproachLightingSystemType() {
        }
        
        /// <summary>
        /// <para>
        /// a version of RWY direction approach lighting system
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (RdaUid, valLen?, uomLen?, codeIntst?, codeSequencedFlash?, txtDescrFlash?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual RunwayDirectionApproachLightingSystemUidType RdaUid {
            get {
                XElement x = this.GetElement(RdaUidXName);
                return ((RunwayDirectionApproachLightingSystemUidType)(x));
            }
            set {
                this.SetElement(RdaUidXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Length
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (RdaUid, valLen?, uomLen?, codeIntst?, codeSequencedFlash?, txtDescrFlash?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual valDistHorz valLen {
            get {
                XElement x = this.GetElement(valLenXName);
                return ((valDistHorz)(x));
            }
            set {
                this.SetElement(valLenXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Unit of measurement [length]
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (RdaUid, valLen?, uomLen?, codeIntst?, codeSequencedFlash?, txtDescrFlash?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual uomDistHorz uomLen {
            get {
                XElement x = this.GetElement(uomLenXName);
                return ((uomDistHorz)(x));
            }
            set {
                this.SetElement(uomLenXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Intensity
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (RdaUid, valLen?, uomLen?, codeIntst?, codeSequencedFlash?, txtDescrFlash?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual codeIntstLgt codeIntst {
            get {
                XElement x = this.GetElement(codeIntstXName);
                return ((codeIntstLgt)(x));
            }
            set {
                this.SetElement(codeIntstXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Sequenced flashing available
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (RdaUid, valLen?, uomLen?, codeIntst?, codeSequencedFlash?, txtDescrFlash?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual codeYesNo codeSequencedFlash {
            get {
                XElement x = this.GetElement(codeSequencedFlashXName);
                return ((codeYesNo)(x));
            }
            set {
                this.SetElement(codeSequencedFlashXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Flash description
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (RdaUid, valLen?, uomLen?, codeIntst?, codeSequencedFlash?, txtDescrFlash?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual txtDescr txtDescrFlash {
            get {
                XElement x = this.GetElement(txtDescrFlashXName);
                return ((txtDescr)(x));
            }
            set {
                this.SetElement(txtDescrFlashXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Remark
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (RdaUid, valLen?, uomLen?, codeIntst?, codeSequencedFlash?, txtDescrFlash?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual txtRmk txtRmk {
            get {
                XElement x = this.GetElement(txtRmkXName);
                return ((txtRmk)(x));
            }
            set {
                this.SetElement(txtRmkXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string source {
            get {
                XAttribute x = this.Attribute(sourceXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(sourceXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<RunwayDirectionApproachLightingSystemType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(RdaUidXName, typeof(RunwayDirectionApproachLightingSystemUidType));
            localElementDictionary.Add(valLenXName, typeof(valDistHorz));
            localElementDictionary.Add(uomLenXName, typeof(uomDistHorz));
            localElementDictionary.Add(codeIntstXName, typeof(codeIntstLgt));
            localElementDictionary.Add(codeSequencedFlashXName, typeof(codeYesNo));
            localElementDictionary.Add(txtDescrFlashXName, typeof(txtDescr));
            localElementDictionary.Add(txtRmkXName, typeof(txtRmk));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// RWY direction approach lighting system - UID
    /// </para>
    /// <para>
    /// Regular expression: (RdnUid, codeType)
    /// </para>
    /// </summary>
    public partial class RunwayDirectionApproachLightingSystemUidType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName RdnUidXName = System.Xml.Linq.XName.Get("RdnUid", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName codeTypeXName = System.Xml.Linq.XName.Get("codeType", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName midXName = System.Xml.Linq.XName.Get("mid", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("RunwayDirectionApproachLightingSystemUidType", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator RunwayDirectionApproachLightingSystemUidType(XElement xe) { return XTypedServices.ToXTypedElement<RunwayDirectionApproachLightingSystemUidType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static RunwayDirectionApproachLightingSystemUidType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(RdnUidXName), new NamedContentModelEntity(codeTypeXName));
        }
        
        /// <summary>
        /// <para>
        /// RWY direction approach lighting system - UID
        /// </para>
        /// <para>
        /// Regular expression: (RdnUid, codeType)
        /// </para>
        /// </summary>
        public RunwayDirectionApproachLightingSystemUidType() {
        }
        
        /// <summary>
        /// <para>
        /// RWY direction approach lighting system is serving RWY direction
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (RdnUid, codeType)
        /// </para>
        /// </summary>
        public virtual RunwayDirectionUidType RdnUid {
            get {
                XElement x = this.GetElement(RdnUidXName);
                return ((RunwayDirectionUidType)(x));
            }
            set {
                this.SetElement(RdnUidXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Type
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (RdnUid, codeType)
        /// </para>
        /// </summary>
        public virtual codeTypeAlsRwy codeType {
            get {
                XElement x = this.GetElement(codeTypeXName);
                return ((codeTypeAlsRwy)(x));
            }
            set {
                this.SetElement(codeTypeXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string mid {
            get {
                XAttribute x = this.Attribute(midXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(midXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<RunwayDirectionApproachLightingSystemUidType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(RdnUidXName, typeof(RunwayDirectionUidType));
            localElementDictionary.Add(codeTypeXName, typeof(codeTypeAlsRwy));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Declared distance for a RWY direction
    /// </para>
    /// <para>
    /// Regular expression: (RddUid, valDist, uomDist, txtRmk?)
    /// </para>
    /// </summary>
    public partial class RunwayDirectionDeclaredDistanceType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName RddUidXName = System.Xml.Linq.XName.Get("RddUid", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName valDistXName = System.Xml.Linq.XName.Get("valDist", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName uomDistXName = System.Xml.Linq.XName.Get("uomDist", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName txtRmkXName = System.Xml.Linq.XName.Get("txtRmk", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName sourceXName = System.Xml.Linq.XName.Get("source", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("RunwayDirectionDeclaredDistanceType", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator RunwayDirectionDeclaredDistanceType(XElement xe) { return XTypedServices.ToXTypedElement<RunwayDirectionDeclaredDistanceType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static RunwayDirectionDeclaredDistanceType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(RddUidXName), new NamedContentModelEntity(valDistXName), new NamedContentModelEntity(uomDistXName), new NamedContentModelEntity(txtRmkXName));
        }
        
        /// <summary>
        /// <para>
        /// Declared distance for a RWY direction
        /// </para>
        /// <para>
        /// Regular expression: (RddUid, valDist, uomDist, txtRmk?)
        /// </para>
        /// </summary>
        public RunwayDirectionDeclaredDistanceType() {
        }
        
        /// <summary>
        /// <para>
        /// a version of Declared distance for a RWY direction
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (RddUid, valDist, uomDist, txtRmk?)
        /// </para>
        /// </summary>
        public virtual RunwayDirectionDeclaredDistanceUidType RddUid {
            get {
                XElement x = this.GetElement(RddUidXName);
                return ((RunwayDirectionDeclaredDistanceUidType)(x));
            }
            set {
                this.SetElement(RddUidXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Declared distance
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (RddUid, valDist, uomDist, txtRmk?)
        /// </para>
        /// </summary>
        public virtual valDistHorz valDist {
            get {
                XElement x = this.GetElement(valDistXName);
                return ((valDistHorz)(x));
            }
            set {
                this.SetElement(valDistXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Unit of measurement [horizontal distance]
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (RddUid, valDist, uomDist, txtRmk?)
        /// </para>
        /// </summary>
        public virtual uomDistHorz uomDist {
            get {
                XElement x = this.GetElement(uomDistXName);
                return ((uomDistHorz)(x));
            }
            set {
                this.SetElement(uomDistXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Remark
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (RddUid, valDist, uomDist, txtRmk?)
        /// </para>
        /// </summary>
        public virtual txtRmk txtRmk {
            get {
                XElement x = this.GetElement(txtRmkXName);
                return ((txtRmk)(x));
            }
            set {
                this.SetElement(txtRmkXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string source {
            get {
                XAttribute x = this.Attribute(sourceXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(sourceXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<RunwayDirectionDeclaredDistanceType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(RddUidXName, typeof(RunwayDirectionDeclaredDistanceUidType));
            localElementDictionary.Add(valDistXName, typeof(valDistHorz));
            localElementDictionary.Add(uomDistXName, typeof(uomDistHorz));
            localElementDictionary.Add(txtRmkXName, typeof(txtRmk));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Declared distance for a RWY direction - UID
    /// </para>
    /// <para>
    /// Regular expression: (RdnUid, TwyUid?, codeType, codeDayPeriod)
    /// </para>
    /// </summary>
    public partial class RunwayDirectionDeclaredDistanceUidType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName RdnUidXName = System.Xml.Linq.XName.Get("RdnUid", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TwyUidXName = System.Xml.Linq.XName.Get("TwyUid", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName codeTypeXName = System.Xml.Linq.XName.Get("codeType", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName codeDayPeriodXName = System.Xml.Linq.XName.Get("codeDayPeriod", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName midXName = System.Xml.Linq.XName.Get("mid", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("RunwayDirectionDeclaredDistanceUidType", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator RunwayDirectionDeclaredDistanceUidType(XElement xe) { return XTypedServices.ToXTypedElement<RunwayDirectionDeclaredDistanceUidType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static RunwayDirectionDeclaredDistanceUidType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(RdnUidXName), new NamedContentModelEntity(TwyUidXName), new NamedContentModelEntity(codeTypeXName), new NamedContentModelEntity(codeDayPeriodXName));
        }
        
        /// <summary>
        /// <para>
        /// Declared distance for a RWY direction - UID
        /// </para>
        /// <para>
        /// Regular expression: (RdnUid, TwyUid?, codeType, codeDayPeriod)
        /// </para>
        /// </summary>
        public RunwayDirectionDeclaredDistanceUidType() {
        }
        
        /// <summary>
        /// <para>
        /// Declared distance for a RWY direction is for RWY direction
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (RdnUid, TwyUid?, codeType, codeDayPeriod)
        /// </para>
        /// </summary>
        public virtual RunwayDirectionUidType RdnUid {
            get {
                XElement x = this.GetElement(RdnUidXName);
                return ((RunwayDirectionUidType)(x));
            }
            set {
                this.SetElement(RdnUidXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Declared distance for a RWY direction is associated with Taxiway [TWY]
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (RdnUid, TwyUid?, codeType, codeDayPeriod)
        /// </para>
        /// </summary>
        public virtual TaxiwayUidType TwyUid {
            get {
                XElement x = this.GetElement(TwyUidXName);
                return ((TaxiwayUidType)(x));
            }
            set {
                this.SetElement(TwyUidXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Type
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (RdnUid, TwyUid?, codeType, codeDayPeriod)
        /// </para>
        /// </summary>
        public virtual codeTypeDeclDistRwy codeType {
            get {
                XElement x = this.GetElement(codeTypeXName);
                return ((codeTypeDeclDistRwy)(x));
            }
            set {
                this.SetElement(codeTypeXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Time period
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (RdnUid, TwyUid?, codeType, codeDayPeriod)
        /// </para>
        /// </summary>
        public virtual codeDayPeriod codeDayPeriod {
            get {
                XElement x = this.GetElement(codeDayPeriodXName);
                return ((codeDayPeriod)(x));
            }
            set {
                this.SetElement(codeDayPeriodXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string mid {
            get {
                XAttribute x = this.Attribute(midXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(midXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<RunwayDirectionDeclaredDistanceUidType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(RdnUidXName, typeof(RunwayDirectionUidType));
            localElementDictionary.Add(TwyUidXName, typeof(TaxiwayUidType));
            localElementDictionary.Add(codeTypeXName, typeof(codeTypeDeclDistRwy));
            localElementDictionary.Add(codeDayPeriodXName, typeof(codeDayPeriod));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// RWY direction lighting system
    /// </para>
    /// <para>
    /// Regular expression: (RlsUid, txtDescr?, txtDescrEmerg?, codeIntst?, codeColour?, txtRmk?, Rlg*)
    /// </para>
    /// </summary>
    public partial class RunwayDirectionLightingSystemType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName RlsUidXName = System.Xml.Linq.XName.Get("RlsUid", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName txtDescrXName = System.Xml.Linq.XName.Get("txtDescr", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName txtDescrEmergXName = System.Xml.Linq.XName.Get("txtDescrEmerg", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName codeIntstXName = System.Xml.Linq.XName.Get("codeIntst", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName codeColourXName = System.Xml.Linq.XName.Get("codeColour", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName txtRmkXName = System.Xml.Linq.XName.Get("txtRmk", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName RlgXName = System.Xml.Linq.XName.Get("Rlg", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<LightGroupType> RlgField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName sourceXName = System.Xml.Linq.XName.Get("source", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("RunwayDirectionLightingSystemType", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator RunwayDirectionLightingSystemType(XElement xe) { return XTypedServices.ToXTypedElement<RunwayDirectionLightingSystemType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static RunwayDirectionLightingSystemType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(RlsUidXName), new NamedContentModelEntity(txtDescrXName), new NamedContentModelEntity(txtDescrEmergXName), new NamedContentModelEntity(codeIntstXName), new NamedContentModelEntity(codeColourXName), new NamedContentModelEntity(txtRmkXName), new NamedContentModelEntity(RlgXName));
        }
        
        /// <summary>
        /// <para>
        /// RWY direction lighting system
        /// </para>
        /// <para>
        /// Regular expression: (RlsUid, txtDescr?, txtDescrEmerg?, codeIntst?, codeColour?, txtRmk?, Rlg*)
        /// </para>
        /// </summary>
        public RunwayDirectionLightingSystemType() {
        }
        
        /// <summary>
        /// <para>
        /// a version of RWY lighting system
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (RlsUid, txtDescr?, txtDescrEmerg?, codeIntst?, codeColour?, txtRmk?, Rlg*)
        /// </para>
        /// </summary>
        public virtual RunwayDirectionLightingSystemUidType RlsUid {
            get {
                XElement x = this.GetElement(RlsUidXName);
                return ((RunwayDirectionLightingSystemUidType)(x));
            }
            set {
                this.SetElement(RlsUidXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Description
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (RlsUid, txtDescr?, txtDescrEmerg?, codeIntst?, codeColour?, txtRmk?, Rlg*)
        /// </para>
        /// </summary>
        public virtual txtDescr txtDescr {
            get {
                XElement x = this.GetElement(txtDescrXName);
                return ((txtDescr)(x));
            }
            set {
                this.SetElement(txtDescrXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Availability of emergency lighting system description
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (RlsUid, txtDescr?, txtDescrEmerg?, codeIntst?, codeColour?, txtRmk?, Rlg*)
        /// </para>
        /// </summary>
        public virtual txtDescr txtDescrEmerg {
            get {
                XElement x = this.GetElement(txtDescrEmergXName);
                return ((txtDescr)(x));
            }
            set {
                this.SetElement(txtDescrEmergXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Intensity
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (RlsUid, txtDescr?, txtDescrEmerg?, codeIntst?, codeColour?, txtRmk?, Rlg*)
        /// </para>
        /// </summary>
        public virtual codeIntstLgt codeIntst {
            get {
                XElement x = this.GetElement(codeIntstXName);
                return ((codeIntstLgt)(x));
            }
            set {
                this.SetElement(codeIntstXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Colour
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (RlsUid, txtDescr?, txtDescrEmerg?, codeIntst?, codeColour?, txtRmk?, Rlg*)
        /// </para>
        /// </summary>
        public virtual codeColour codeColour {
            get {
                XElement x = this.GetElement(codeColourXName);
                return ((codeColour)(x));
            }
            set {
                this.SetElement(codeColourXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Remark
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (RlsUid, txtDescr?, txtDescrEmerg?, codeIntst?, codeColour?, txtRmk?, Rlg*)
        /// </para>
        /// </summary>
        public virtual txtRmk txtRmk {
            get {
                XElement x = this.GetElement(txtRmkXName);
                return ((txtRmk)(x));
            }
            set {
                this.SetElement(txtRmkXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// RWY direction lighting system is composed of lights group
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (RlsUid, txtDescr?, txtDescrEmerg?, codeIntst?, codeColour?, txtRmk?, Rlg*)
        /// </para>
        /// </summary>
        public virtual IList<LightGroupType> Rlg {
            get {
                if ((this.RlgField == null)) {
                    this.RlgField = new XTypedList<LightGroupType>(this, LinqToXsdTypeManager.Instance, RlgXName);
                }
                return this.RlgField;
            }
            set {
                if ((value == null)) {
                    this.RlgField = null;
                }
                else {
                    if ((this.RlgField == null)) {
                        this.RlgField = XTypedList<LightGroupType>.Initialize(this, LinqToXsdTypeManager.Instance, value, RlgXName);
                    }
                    else {
                        XTypedServices.SetList<LightGroupType>(this.RlgField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string source {
            get {
                XAttribute x = this.Attribute(sourceXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(sourceXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<RunwayDirectionLightingSystemType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(RlsUidXName, typeof(RunwayDirectionLightingSystemUidType));
            localElementDictionary.Add(txtDescrXName, typeof(txtDescr));
            localElementDictionary.Add(txtDescrEmergXName, typeof(txtDescr));
            localElementDictionary.Add(codeIntstXName, typeof(codeIntstLgt));
            localElementDictionary.Add(codeColourXName, typeof(codeColour));
            localElementDictionary.Add(txtRmkXName, typeof(txtRmk));
            localElementDictionary.Add(RlgXName, typeof(LightGroupType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// RWY lighting system - UID
    /// </para>
    /// <para>
    /// Regular expression: (RdnUid, codePsn)
    /// </para>
    /// </summary>
    public partial class RunwayDirectionLightingSystemUidType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName RdnUidXName = System.Xml.Linq.XName.Get("RdnUid", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName codePsnXName = System.Xml.Linq.XName.Get("codePsn", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName midXName = System.Xml.Linq.XName.Get("mid", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("RunwayDirectionLightingSystemUidType", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator RunwayDirectionLightingSystemUidType(XElement xe) { return XTypedServices.ToXTypedElement<RunwayDirectionLightingSystemUidType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static RunwayDirectionLightingSystemUidType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(RdnUidXName), new NamedContentModelEntity(codePsnXName));
        }
        
        /// <summary>
        /// <para>
        /// RWY lighting system - UID
        /// </para>
        /// <para>
        /// Regular expression: (RdnUid, codePsn)
        /// </para>
        /// </summary>
        public RunwayDirectionLightingSystemUidType() {
        }
        
        /// <summary>
        /// <para>
        /// RWY lighting system is owned by RWY direction
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (RdnUid, codePsn)
        /// </para>
        /// </summary>
        public virtual RunwayDirectionUidType RdnUid {
            get {
                XElement x = this.GetElement(RdnUidXName);
                return ((RunwayDirectionUidType)(x));
            }
            set {
                this.SetElement(RdnUidXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Position
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (RdnUid, codePsn)
        /// </para>
        /// </summary>
        public virtual codePsnRwy codePsn {
            get {
                XElement x = this.GetElement(codePsnXName);
                return ((codePsnRwy)(x));
            }
            set {
                this.SetElement(codePsnXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string mid {
            get {
                XAttribute x = this.Attribute(midXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(midXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<RunwayDirectionLightingSystemUidType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(RdnUidXName, typeof(RunwayDirectionUidType));
            localElementDictionary.Add(codePsnXName, typeof(codePsnRwy));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Obstacle for a RWY direction
    /// </para>
    /// <para>
    /// Regular expression: (RdoUid, codeTypeOps?, valDistThr?, valDistAlongCline?, valDistToCline?, uomDistHorz?, valBrgThr?, txtRmk?)
    /// </para>
    /// </summary>
    public partial class RunwayDirectionObstacleType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName RdoUidXName = System.Xml.Linq.XName.Get("RdoUid", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName codeTypeOpsXName = System.Xml.Linq.XName.Get("codeTypeOps", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName valDistThrXName = System.Xml.Linq.XName.Get("valDistThr", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName valDistAlongClineXName = System.Xml.Linq.XName.Get("valDistAlongCline", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName valDistToClineXName = System.Xml.Linq.XName.Get("valDistToCline", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName uomDistHorzXName = System.Xml.Linq.XName.Get("uomDistHorz", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName valBrgThrXName = System.Xml.Linq.XName.Get("valBrgThr", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName txtRmkXName = System.Xml.Linq.XName.Get("txtRmk", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName sourceXName = System.Xml.Linq.XName.Get("source", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("RunwayDirectionObstacleType", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator RunwayDirectionObstacleType(XElement xe) { return XTypedServices.ToXTypedElement<RunwayDirectionObstacleType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static RunwayDirectionObstacleType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(RdoUidXName), new NamedContentModelEntity(codeTypeOpsXName), new NamedContentModelEntity(valDistThrXName), new NamedContentModelEntity(valDistAlongClineXName), new NamedContentModelEntity(valDistToClineXName), new NamedContentModelEntity(uomDistHorzXName), new NamedContentModelEntity(valBrgThrXName), new NamedContentModelEntity(txtRmkXName));
        }
        
        /// <summary>
        /// <para>
        /// Obstacle for a RWY direction
        /// </para>
        /// <para>
        /// Regular expression: (RdoUid, codeTypeOps?, valDistThr?, valDistAlongCline?, valDistToCline?, uomDistHorz?, valBrgThr?, txtRmk?)
        /// </para>
        /// </summary>
        public RunwayDirectionObstacleType() {
        }
        
        /// <summary>
        /// <para>
        /// a version of Obstacle for a RWY direction
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (RdoUid, codeTypeOps?, valDistThr?, valDistAlongCline?, valDistToCline?, uomDistHorz?, valBrgThr?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual RunwayDirectionObstacleUidType RdoUid {
            get {
                XElement x = this.GetElement(RdoUidXName);
                return ((RunwayDirectionObstacleUidType)(x));
            }
            set {
                this.SetElement(RdoUidXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Operations affected
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (RdoUid, codeTypeOps?, valDistThr?, valDistAlongCline?, valDistToCline?, uomDistHorz?, valBrgThr?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual codeTypeOpsRwy codeTypeOps {
            get {
                XElement x = this.GetElement(codeTypeOpsXName);
                return ((codeTypeOpsRwy)(x));
            }
            set {
                this.SetElement(codeTypeOpsXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Obstacle distance to threshold
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (RdoUid, codeTypeOps?, valDistThr?, valDistAlongCline?, valDistToCline?, uomDistHorz?, valBrgThr?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual valDistHorz valDistThr {
            get {
                XElement x = this.GetElement(valDistThrXName);
                return ((valDistHorz)(x));
            }
            set {
                this.SetElement(valDistThrXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Obstacle distance along the center line
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (RdoUid, codeTypeOps?, valDistThr?, valDistAlongCline?, valDistToCline?, uomDistHorz?, valBrgThr?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual valDistHorz valDistAlongCline {
            get {
                XElement x = this.GetElement(valDistAlongClineXName);
                return ((valDistHorz)(x));
            }
            set {
                this.SetElement(valDistAlongClineXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Obstacle distance to the center line
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (RdoUid, codeTypeOps?, valDistThr?, valDistAlongCline?, valDistToCline?, uomDistHorz?, valBrgThr?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual valDistHorz valDistToCline {
            get {
                XElement x = this.GetElement(valDistToClineXName);
                return ((valDistHorz)(x));
            }
            set {
                this.SetElement(valDistToClineXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Unit of measurement [horizontal distance]
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (RdoUid, codeTypeOps?, valDistThr?, valDistAlongCline?, valDistToCline?, uomDistHorz?, valBrgThr?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual uomDistHorz uomDistHorz {
            get {
                XElement x = this.GetElement(uomDistHorzXName);
                return ((uomDistHorz)(x));
            }
            set {
                this.SetElement(uomDistHorzXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Magnetic bearing
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (RdoUid, codeTypeOps?, valDistThr?, valDistAlongCline?, valDistToCline?, uomDistHorz?, valBrgThr?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual valAngleBrg valBrgThr {
            get {
                XElement x = this.GetElement(valBrgThrXName);
                return ((valAngleBrg)(x));
            }
            set {
                this.SetElement(valBrgThrXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Remark
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (RdoUid, codeTypeOps?, valDistThr?, valDistAlongCline?, valDistToCline?, uomDistHorz?, valBrgThr?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual txtRmk txtRmk {
            get {
                XElement x = this.GetElement(txtRmkXName);
                return ((txtRmk)(x));
            }
            set {
                this.SetElement(txtRmkXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string source {
            get {
                XAttribute x = this.Attribute(sourceXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(sourceXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<RunwayDirectionObstacleType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(RdoUidXName, typeof(RunwayDirectionObstacleUidType));
            localElementDictionary.Add(codeTypeOpsXName, typeof(codeTypeOpsRwy));
            localElementDictionary.Add(valDistThrXName, typeof(valDistHorz));
            localElementDictionary.Add(valDistAlongClineXName, typeof(valDistHorz));
            localElementDictionary.Add(valDistToClineXName, typeof(valDistHorz));
            localElementDictionary.Add(uomDistHorzXName, typeof(uomDistHorz));
            localElementDictionary.Add(valBrgThrXName, typeof(valAngleBrg));
            localElementDictionary.Add(txtRmkXName, typeof(txtRmk));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Obstacle for a RWY direction - UID
    /// </para>
    /// <para>
    /// Regular expression: (ObsUid, RdnUid)
    /// </para>
    /// </summary>
    public partial class RunwayDirectionObstacleUidType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ObsUidXName = System.Xml.Linq.XName.Get("ObsUid", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName RdnUidXName = System.Xml.Linq.XName.Get("RdnUid", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName midXName = System.Xml.Linq.XName.Get("mid", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("RunwayDirectionObstacleUidType", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator RunwayDirectionObstacleUidType(XElement xe) { return XTypedServices.ToXTypedElement<RunwayDirectionObstacleUidType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static RunwayDirectionObstacleUidType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(ObsUidXName), new NamedContentModelEntity(RdnUidXName));
        }
        
        /// <summary>
        /// <para>
        /// Obstacle for a RWY direction - UID
        /// </para>
        /// <para>
        /// Regular expression: (ObsUid, RdnUid)
        /// </para>
        /// </summary>
        public RunwayDirectionObstacleUidType() {
        }
        
        /// <summary>
        /// <para>
        /// Obstacle for a RWY direction is also Obstacle
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (ObsUid, RdnUid)
        /// </para>
        /// </summary>
        public virtual ObstacleUidType ObsUid {
            get {
                XElement x = this.GetElement(ObsUidXName);
                return ((ObstacleUidType)(x));
            }
            set {
                this.SetElement(ObsUidXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Obstacle for a RWY direction is affecting RWY direction
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (ObsUid, RdnUid)
        /// </para>
        /// </summary>
        public virtual RunwayDirectionUidType RdnUid {
            get {
                XElement x = this.GetElement(RdnUidXName);
                return ((RunwayDirectionUidType)(x));
            }
            set {
                this.SetElement(RdnUidXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string mid {
            get {
                XAttribute x = this.Attribute(midXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(midXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<RunwayDirectionObstacleUidType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(ObsUidXName, typeof(ObstacleUidType));
            localElementDictionary.Add(RdnUidXName, typeof(RunwayDirectionUidType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// RWY direction STAR
    /// </para>
    /// <para>
    /// Regular expression: (RdsUid, txtRmk?)
    /// </para>
    /// </summary>
    public partial class RunwayDirectionStarType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName RdsUidXName = System.Xml.Linq.XName.Get("RdsUid", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName txtRmkXName = System.Xml.Linq.XName.Get("txtRmk", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName sourceXName = System.Xml.Linq.XName.Get("source", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("RunwayDirectionStarType", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator RunwayDirectionStarType(XElement xe) { return XTypedServices.ToXTypedElement<RunwayDirectionStarType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static RunwayDirectionStarType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(RdsUidXName), new NamedContentModelEntity(txtRmkXName));
        }
        
        /// <summary>
        /// <para>
        /// RWY direction STAR
        /// </para>
        /// <para>
        /// Regular expression: (RdsUid, txtRmk?)
        /// </para>
        /// </summary>
        public RunwayDirectionStarType() {
        }
        
        /// <summary>
        /// <para>
        /// a version of RWY direction STAR
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (RdsUid, txtRmk?)
        /// </para>
        /// </summary>
        public virtual RunwayDirectionStarUidType RdsUid {
            get {
                XElement x = this.GetElement(RdsUidXName);
                return ((RunwayDirectionStarUidType)(x));
            }
            set {
                this.SetElement(RdsUidXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Remark
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (RdsUid, txtRmk?)
        /// </para>
        /// </summary>
        public virtual txtRmk txtRmk {
            get {
                XElement x = this.GetElement(txtRmkXName);
                return ((txtRmk)(x));
            }
            set {
                this.SetElement(txtRmkXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string source {
            get {
                XAttribute x = this.Attribute(sourceXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(sourceXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<RunwayDirectionStarType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(RdsUidXName, typeof(RunwayDirectionStarUidType));
            localElementDictionary.Add(txtRmkXName, typeof(txtRmk));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// RWY direction STAR - UID
    /// </para>
    /// <para>
    /// Regular expression: (SiaUid, RdnUid)
    /// </para>
    /// </summary>
    public partial class RunwayDirectionStarUidType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName SiaUidXName = System.Xml.Linq.XName.Get("SiaUid", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName RdnUidXName = System.Xml.Linq.XName.Get("RdnUid", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName midXName = System.Xml.Linq.XName.Get("mid", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("RunwayDirectionStarUidType", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator RunwayDirectionStarUidType(XElement xe) { return XTypedServices.ToXTypedElement<RunwayDirectionStarUidType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static RunwayDirectionStarUidType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(SiaUidXName), new NamedContentModelEntity(RdnUidXName));
        }
        
        /// <summary>
        /// <para>
        /// RWY direction STAR - UID
        /// </para>
        /// <para>
        /// Regular expression: (SiaUid, RdnUid)
        /// </para>
        /// </summary>
        public RunwayDirectionStarUidType() {
        }
        
        /// <summary>
        /// <para>
        /// RWY direction STAR is also Standard instrument arrival [STAR]
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (SiaUid, RdnUid)
        /// </para>
        /// </summary>
        public virtual StarUidType SiaUid {
            get {
                XElement x = this.GetElement(SiaUidXName);
                return ((StarUidType)(x));
            }
            set {
                this.SetElement(SiaUidXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// RWY direction STAR is for RWY direction
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (SiaUid, RdnUid)
        /// </para>
        /// </summary>
        public virtual RunwayDirectionUidType RdnUid {
            get {
                XElement x = this.GetElement(RdnUidXName);
                return ((RunwayDirectionUidType)(x));
            }
            set {
                this.SetElement(RdnUidXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string mid {
            get {
                XAttribute x = this.Attribute(midXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(midXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<RunwayDirectionStarUidType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(SiaUidXName, typeof(StarUidType));
            localElementDictionary.Add(RdnUidXName, typeof(RunwayDirectionUidType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// RWY direction
    /// </para>
    /// <para>
    /// Regular expression: (RdnUid, geoLat?, geoLong?, valTrueBrg?, valMagBrg?, valElevTdz?, valElevTdzAccuracy?, uomElevTdz?, valDurTax?, codeTypeVasis?, codePsnVasis?, noBoxVasis?, codePortableVasis?, txtDescrPsnVasis?, valSlopeAngleGpVasis?, valMeht?, uomMeht?, txtDescrArstDvc?, txtDescrRvr?, codeVfrPattern?, txtRmk?)
    /// </para>
    /// </summary>
    public partial class RunwayDirectionType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName RdnUidXName = System.Xml.Linq.XName.Get("RdnUid", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName geoLatXName = System.Xml.Linq.XName.Get("geoLat", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName geoLongXName = System.Xml.Linq.XName.Get("geoLong", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName valTrueBrgXName = System.Xml.Linq.XName.Get("valTrueBrg", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName valMagBrgXName = System.Xml.Linq.XName.Get("valMagBrg", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName valElevTdzXName = System.Xml.Linq.XName.Get("valElevTdz", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName valElevTdzAccuracyXName = System.Xml.Linq.XName.Get("valElevTdzAccuracy", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName uomElevTdzXName = System.Xml.Linq.XName.Get("uomElevTdz", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName valDurTaxXName = System.Xml.Linq.XName.Get("valDurTax", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName codeTypeVasisXName = System.Xml.Linq.XName.Get("codeTypeVasis", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName codePsnVasisXName = System.Xml.Linq.XName.Get("codePsnVasis", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName noBoxVasisXName = System.Xml.Linq.XName.Get("noBoxVasis", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName codePortableVasisXName = System.Xml.Linq.XName.Get("codePortableVasis", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName txtDescrPsnVasisXName = System.Xml.Linq.XName.Get("txtDescrPsnVasis", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName valSlopeAngleGpVasisXName = System.Xml.Linq.XName.Get("valSlopeAngleGpVasis", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName valMehtXName = System.Xml.Linq.XName.Get("valMeht", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName uomMehtXName = System.Xml.Linq.XName.Get("uomMeht", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName txtDescrArstDvcXName = System.Xml.Linq.XName.Get("txtDescrArstDvc", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName txtDescrRvrXName = System.Xml.Linq.XName.Get("txtDescrRvr", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName codeVfrPatternXName = System.Xml.Linq.XName.Get("codeVfrPattern", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName txtRmkXName = System.Xml.Linq.XName.Get("txtRmk", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName sourceXName = System.Xml.Linq.XName.Get("source", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("RunwayDirectionType", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator RunwayDirectionType(XElement xe) { return XTypedServices.ToXTypedElement<RunwayDirectionType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static RunwayDirectionType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(RdnUidXName), new NamedContentModelEntity(geoLatXName), new NamedContentModelEntity(geoLongXName), new NamedContentModelEntity(valTrueBrgXName), new NamedContentModelEntity(valMagBrgXName), new NamedContentModelEntity(valElevTdzXName), new NamedContentModelEntity(valElevTdzAccuracyXName), new NamedContentModelEntity(uomElevTdzXName), new NamedContentModelEntity(valDurTaxXName), new NamedContentModelEntity(codeTypeVasisXName), new NamedContentModelEntity(codePsnVasisXName), new NamedContentModelEntity(noBoxVasisXName), new NamedContentModelEntity(codePortableVasisXName), new NamedContentModelEntity(txtDescrPsnVasisXName), new NamedContentModelEntity(valSlopeAngleGpVasisXName), new NamedContentModelEntity(valMehtXName), new NamedContentModelEntity(uomMehtXName), new NamedContentModelEntity(txtDescrArstDvcXName), new NamedContentModelEntity(txtDescrRvrXName), new NamedContentModelEntity(codeVfrPatternXName), new NamedContentModelEntity(txtRmkXName));
        }
        
        /// <summary>
        /// <para>
        /// RWY direction
        /// </para>
        /// <para>
        /// Regular expression: (RdnUid, geoLat?, geoLong?, valTrueBrg?, valMagBrg?, valElevTdz?, valElevTdzAccuracy?, uomElevTdz?, valDurTax?, codeTypeVasis?, codePsnVasis?, noBoxVasis?, codePortableVasis?, txtDescrPsnVasis?, valSlopeAngleGpVasis?, valMeht?, uomMeht?, txtDescrArstDvc?, txtDescrRvr?, codeVfrPattern?, txtRmk?)
        /// </para>
        /// </summary>
        public RunwayDirectionType() {
        }
        
        /// <summary>
        /// <para>
        /// a version of RWY direction
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (RdnUid, geoLat?, geoLong?, valTrueBrg?, valMagBrg?, valElevTdz?, valElevTdzAccuracy?, uomElevTdz?, valDurTax?, codeTypeVasis?, codePsnVasis?, noBoxVasis?, codePortableVasis?, txtDescrPsnVasis?, valSlopeAngleGpVasis?, valMeht?, uomMeht?, txtDescrArstDvc?, txtDescrRvr?, codeVfrPattern?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual RunwayDirectionUidType RdnUid {
            get {
                XElement x = this.GetElement(RdnUidXName);
                return ((RunwayDirectionUidType)(x));
            }
            set {
                this.SetElement(RdnUidXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Threshold latitude
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (RdnUid, geoLat?, geoLong?, valTrueBrg?, valMagBrg?, valElevTdz?, valElevTdzAccuracy?, uomElevTdz?, valDurTax?, codeTypeVasis?, codePsnVasis?, noBoxVasis?, codePortableVasis?, txtDescrPsnVasis?, valSlopeAngleGpVasis?, valMeht?, uomMeht?, txtDescrArstDvc?, txtDescrRvr?, codeVfrPattern?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual geoLat geoLat {
            get {
                XElement x = this.GetElement(geoLatXName);
                return ((geoLat)(x));
            }
            set {
                this.SetElement(geoLatXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Threshold longitude
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (RdnUid, geoLat?, geoLong?, valTrueBrg?, valMagBrg?, valElevTdz?, valElevTdzAccuracy?, uomElevTdz?, valDurTax?, codeTypeVasis?, codePsnVasis?, noBoxVasis?, codePortableVasis?, txtDescrPsnVasis?, valSlopeAngleGpVasis?, valMeht?, uomMeht?, txtDescrArstDvc?, txtDescrRvr?, codeVfrPattern?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual geoLong geoLong {
            get {
                XElement x = this.GetElement(geoLongXName);
                return ((geoLong)(x));
            }
            set {
                this.SetElement(geoLongXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// True bearing
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (RdnUid, geoLat?, geoLong?, valTrueBrg?, valMagBrg?, valElevTdz?, valElevTdzAccuracy?, uomElevTdz?, valDurTax?, codeTypeVasis?, codePsnVasis?, noBoxVasis?, codePortableVasis?, txtDescrPsnVasis?, valSlopeAngleGpVasis?, valMeht?, uomMeht?, txtDescrArstDvc?, txtDescrRvr?, codeVfrPattern?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual valAngleBrg valTrueBrg {
            get {
                XElement x = this.GetElement(valTrueBrgXName);
                return ((valAngleBrg)(x));
            }
            set {
                this.SetElement(valTrueBrgXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Magnetic bearing
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (RdnUid, geoLat?, geoLong?, valTrueBrg?, valMagBrg?, valElevTdz?, valElevTdzAccuracy?, uomElevTdz?, valDurTax?, codeTypeVasis?, codePsnVasis?, noBoxVasis?, codePortableVasis?, txtDescrPsnVasis?, valSlopeAngleGpVasis?, valMeht?, uomMeht?, txtDescrArstDvc?, txtDescrRvr?, codeVfrPattern?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual valAngleBrg valMagBrg {
            get {
                XElement x = this.GetElement(valMagBrgXName);
                return ((valAngleBrg)(x));
            }
            set {
                this.SetElement(valMagBrgXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Elevation of touch down zone
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (RdnUid, geoLat?, geoLong?, valTrueBrg?, valMagBrg?, valElevTdz?, valElevTdzAccuracy?, uomElevTdz?, valDurTax?, codeTypeVasis?, codePsnVasis?, noBoxVasis?, codePortableVasis?, txtDescrPsnVasis?, valSlopeAngleGpVasis?, valMeht?, uomMeht?, txtDescrArstDvc?, txtDescrRvr?, codeVfrPattern?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual valDistVer valElevTdz {
            get {
                XElement x = this.GetElement(valElevTdzXName);
                return ((valDistVer)(x));
            }
            set {
                this.SetElement(valElevTdzXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Accuracy of the touch down zone elevation
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (RdnUid, geoLat?, geoLong?, valTrueBrg?, valMagBrg?, valElevTdz?, valElevTdzAccuracy?, uomElevTdz?, valDurTax?, codeTypeVasis?, codePsnVasis?, noBoxVasis?, codePortableVasis?, txtDescrPsnVasis?, valSlopeAngleGpVasis?, valMeht?, uomMeht?, txtDescrArstDvc?, txtDescrRvr?, codeVfrPattern?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual valDistVer valElevTdzAccuracy {
            get {
                XElement x = this.GetElement(valElevTdzAccuracyXName);
                return ((valDistVer)(x));
            }
            set {
                this.SetElement(valElevTdzAccuracyXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Unit of measurement [touch down zone elevation]
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (RdnUid, geoLat?, geoLong?, valTrueBrg?, valMagBrg?, valElevTdz?, valElevTdzAccuracy?, uomElevTdz?, valDurTax?, codeTypeVasis?, codePsnVasis?, noBoxVasis?, codePortableVasis?, txtDescrPsnVasis?, valSlopeAngleGpVasis?, valMeht?, uomMeht?, txtDescrArstDvc?, txtDescrRvr?, codeVfrPattern?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual uomElev uomElevTdz {
            get {
                XElement x = this.GetElement(uomElevTdzXName);
                return ((uomElev)(x));
            }
            set {
                this.SetElement(uomElevTdzXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Taxi time estimation
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (RdnUid, geoLat?, geoLong?, valTrueBrg?, valMagBrg?, valElevTdz?, valElevTdzAccuracy?, uomElevTdz?, valDurTax?, codeTypeVasis?, codePsnVasis?, noBoxVasis?, codePortableVasis?, txtDescrPsnVasis?, valSlopeAngleGpVasis?, valMeht?, uomMeht?, txtDescrArstDvc?, txtDescrRvr?, codeVfrPattern?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual valDur valDurTax {
            get {
                XElement x = this.GetElement(valDurTaxXName);
                return ((valDur)(x));
            }
            set {
                this.SetElement(valDurTaxXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Type
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (RdnUid, geoLat?, geoLong?, valTrueBrg?, valMagBrg?, valElevTdz?, valElevTdzAccuracy?, uomElevTdz?, valDurTax?, codeTypeVasis?, codePsnVasis?, noBoxVasis?, codePortableVasis?, txtDescrPsnVasis?, valSlopeAngleGpVasis?, valMeht?, uomMeht?, txtDescrArstDvc?, txtDescrRvr?, codeVfrPattern?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual codeTypeVasis codeTypeVasis {
            get {
                XElement x = this.GetElement(codeTypeVasisXName);
                return ((codeTypeVasis)(x));
            }
            set {
                this.SetElement(codeTypeVasisXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Vasis position
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (RdnUid, geoLat?, geoLong?, valTrueBrg?, valMagBrg?, valElevTdz?, valElevTdzAccuracy?, uomElevTdz?, valDurTax?, codeTypeVasis?, codePsnVasis?, noBoxVasis?, codePortableVasis?, txtDescrPsnVasis?, valSlopeAngleGpVasis?, valMeht?, uomMeht?, txtDescrArstDvc?, txtDescrRvr?, codeVfrPattern?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual codePsnRelAxis codePsnVasis {
            get {
                XElement x = this.GetElement(codePsnVasisXName);
                return ((codePsnRelAxis)(x));
            }
            set {
                this.SetElement(codePsnVasisXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// VASIS number of boxes
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (RdnUid, geoLat?, geoLong?, valTrueBrg?, valMagBrg?, valElevTdz?, valElevTdzAccuracy?, uomElevTdz?, valDurTax?, codeTypeVasis?, codePsnVasis?, noBoxVasis?, codePortableVasis?, txtDescrPsnVasis?, valSlopeAngleGpVasis?, valMeht?, uomMeht?, txtDescrArstDvc?, txtDescrRvr?, codeVfrPattern?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual noNumber noBoxVasis {
            get {
                XElement x = this.GetElement(noBoxVasisXName);
                return ((noNumber)(x));
            }
            set {
                this.SetElement(noBoxVasisXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Portable VASIS
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (RdnUid, geoLat?, geoLong?, valTrueBrg?, valMagBrg?, valElevTdz?, valElevTdzAccuracy?, uomElevTdz?, valDurTax?, codeTypeVasis?, codePsnVasis?, noBoxVasis?, codePortableVasis?, txtDescrPsnVasis?, valSlopeAngleGpVasis?, valMeht?, uomMeht?, txtDescrArstDvc?, txtDescrRvr?, codeVfrPattern?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual codeYesNo codePortableVasis {
            get {
                XElement x = this.GetElement(codePortableVasisXName);
                return ((codeYesNo)(x));
            }
            set {
                this.SetElement(codePortableVasisXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// [Deprecated] VASIS position description
        /// </para>
        /// <para>
        /// DEPRECATED-4.5
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (RdnUid, geoLat?, geoLong?, valTrueBrg?, valMagBrg?, valElevTdz?, valElevTdzAccuracy?, uomElevTdz?, valDurTax?, codeTypeVasis?, codePsnVasis?, noBoxVasis?, codePortableVasis?, txtDescrPsnVasis?, valSlopeAngleGpVasis?, valMeht?, uomMeht?, txtDescrArstDvc?, txtDescrRvr?, codeVfrPattern?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual txtDescr txtDescrPsnVasis {
            get {
                XElement x = this.GetElement(txtDescrPsnVasisXName);
                return ((txtDescr)(x));
            }
            set {
                this.SetElement(txtDescrPsnVasisXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Approach slope angle
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (RdnUid, geoLat?, geoLong?, valTrueBrg?, valMagBrg?, valElevTdz?, valElevTdzAccuracy?, uomElevTdz?, valDurTax?, codeTypeVasis?, codePsnVasis?, noBoxVasis?, codePortableVasis?, txtDescrPsnVasis?, valSlopeAngleGpVasis?, valMeht?, uomMeht?, txtDescrArstDvc?, txtDescrRvr?, codeVfrPattern?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual valAngle valSlopeAngleGpVasis {
            get {
                XElement x = this.GetElement(valSlopeAngleGpVasisXName);
                return ((valAngle)(x));
            }
            set {
                this.SetElement(valSlopeAngleGpVasisXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Minimun eye height over threshold
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (RdnUid, geoLat?, geoLong?, valTrueBrg?, valMagBrg?, valElevTdz?, valElevTdzAccuracy?, uomElevTdz?, valDurTax?, codeTypeVasis?, codePsnVasis?, noBoxVasis?, codePortableVasis?, txtDescrPsnVasis?, valSlopeAngleGpVasis?, valMeht?, uomMeht?, txtDescrArstDvc?, txtDescrRvr?, codeVfrPattern?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual valDistHorz valMeht {
            get {
                XElement x = this.GetElement(valMehtXName);
                return ((valDistHorz)(x));
            }
            set {
                this.SetElement(valMehtXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Unit of measurement [minimum eye height over threshold]
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (RdnUid, geoLat?, geoLong?, valTrueBrg?, valMagBrg?, valElevTdz?, valElevTdzAccuracy?, uomElevTdz?, valDurTax?, codeTypeVasis?, codePsnVasis?, noBoxVasis?, codePortableVasis?, txtDescrPsnVasis?, valSlopeAngleGpVasis?, valMeht?, uomMeht?, txtDescrArstDvc?, txtDescrRvr?, codeVfrPattern?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual uomElev uomMeht {
            get {
                XElement x = this.GetElement(uomMehtXName);
                return ((uomElev)(x));
            }
            set {
                this.SetElement(uomMehtXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Arresting device
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (RdnUid, geoLat?, geoLong?, valTrueBrg?, valMagBrg?, valElevTdz?, valElevTdzAccuracy?, uomElevTdz?, valDurTax?, codeTypeVasis?, codePsnVasis?, noBoxVasis?, codePortableVasis?, txtDescrPsnVasis?, valSlopeAngleGpVasis?, valMeht?, uomMeht?, txtDescrArstDvc?, txtDescrRvr?, codeVfrPattern?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual txtDescr txtDescrArstDvc {
            get {
                XElement x = this.GetElement(txtDescrArstDvcXName);
                return ((txtDescr)(x));
            }
            set {
                this.SetElement(txtDescrArstDvcXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// RVR meteorological equipment
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (RdnUid, geoLat?, geoLong?, valTrueBrg?, valMagBrg?, valElevTdz?, valElevTdzAccuracy?, uomElevTdz?, valDurTax?, codeTypeVasis?, codePsnVasis?, noBoxVasis?, codePortableVasis?, txtDescrPsnVasis?, valSlopeAngleGpVasis?, valMeht?, uomMeht?, txtDescrArstDvc?, txtDescrRvr?, codeVfrPattern?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual txtDescr txtDescrRvr {
            get {
                XElement x = this.GetElement(txtDescrRvrXName);
                return ((txtDescr)(x));
            }
            set {
                this.SetElement(txtDescrRvrXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Direction of the VFR flight pattern
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (RdnUid, geoLat?, geoLong?, valTrueBrg?, valMagBrg?, valElevTdz?, valElevTdzAccuracy?, uomElevTdz?, valDurTax?, codeTypeVasis?, codePsnVasis?, noBoxVasis?, codePortableVasis?, txtDescrPsnVasis?, valSlopeAngleGpVasis?, valMeht?, uomMeht?, txtDescrArstDvc?, txtDescrRvr?, codeVfrPattern?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual codeDirTurn codeVfrPattern {
            get {
                XElement x = this.GetElement(codeVfrPatternXName);
                return ((codeDirTurn)(x));
            }
            set {
                this.SetElement(codeVfrPatternXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Remark
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (RdnUid, geoLat?, geoLong?, valTrueBrg?, valMagBrg?, valElevTdz?, valElevTdzAccuracy?, uomElevTdz?, valDurTax?, codeTypeVasis?, codePsnVasis?, noBoxVasis?, codePortableVasis?, txtDescrPsnVasis?, valSlopeAngleGpVasis?, valMeht?, uomMeht?, txtDescrArstDvc?, txtDescrRvr?, codeVfrPattern?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual txtRmk txtRmk {
            get {
                XElement x = this.GetElement(txtRmkXName);
                return ((txtRmk)(x));
            }
            set {
                this.SetElement(txtRmkXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string source {
            get {
                XAttribute x = this.Attribute(sourceXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(sourceXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<RunwayDirectionType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(RdnUidXName, typeof(RunwayDirectionUidType));
            localElementDictionary.Add(geoLatXName, typeof(geoLat));
            localElementDictionary.Add(geoLongXName, typeof(geoLong));
            localElementDictionary.Add(valTrueBrgXName, typeof(valAngleBrg));
            localElementDictionary.Add(valMagBrgXName, typeof(valAngleBrg));
            localElementDictionary.Add(valElevTdzXName, typeof(valDistVer));
            localElementDictionary.Add(valElevTdzAccuracyXName, typeof(valDistVer));
            localElementDictionary.Add(uomElevTdzXName, typeof(uomElev));
            localElementDictionary.Add(valDurTaxXName, typeof(valDur));
            localElementDictionary.Add(codeTypeVasisXName, typeof(codeTypeVasis));
            localElementDictionary.Add(codePsnVasisXName, typeof(codePsnRelAxis));
            localElementDictionary.Add(noBoxVasisXName, typeof(noNumber));
            localElementDictionary.Add(codePortableVasisXName, typeof(codeYesNo));
            localElementDictionary.Add(txtDescrPsnVasisXName, typeof(txtDescr));
            localElementDictionary.Add(valSlopeAngleGpVasisXName, typeof(valAngle));
            localElementDictionary.Add(valMehtXName, typeof(valDistHorz));
            localElementDictionary.Add(uomMehtXName, typeof(uomElev));
            localElementDictionary.Add(txtDescrArstDvcXName, typeof(txtDescr));
            localElementDictionary.Add(txtDescrRvrXName, typeof(txtDescr));
            localElementDictionary.Add(codeVfrPatternXName, typeof(codeDirTurn));
            localElementDictionary.Add(txtRmkXName, typeof(txtRmk));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// RWY direction - UID
    /// </para>
    /// <para>
    /// Regular expression: (RwyUid, txtDesig)
    /// </para>
    /// </summary>
    public partial class RunwayDirectionUidType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName RwyUidXName = System.Xml.Linq.XName.Get("RwyUid", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName txtDesigXName = System.Xml.Linq.XName.Get("txtDesig", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName midXName = System.Xml.Linq.XName.Get("mid", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("RunwayDirectionUidType", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator RunwayDirectionUidType(XElement xe) { return XTypedServices.ToXTypedElement<RunwayDirectionUidType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static RunwayDirectionUidType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(RwyUidXName), new NamedContentModelEntity(txtDesigXName));
        }
        
        /// <summary>
        /// <para>
        /// RWY direction - UID
        /// </para>
        /// <para>
        /// Regular expression: (RwyUid, txtDesig)
        /// </para>
        /// </summary>
        public RunwayDirectionUidType() {
        }
        
        /// <summary>
        /// <para>
        /// RWY direction is using Runway [RWY]
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (RwyUid, txtDesig)
        /// </para>
        /// </summary>
        public virtual RunwayUidType RwyUid {
            get {
                XElement x = this.GetElement(RwyUidXName);
                return ((RunwayUidType)(x));
            }
            set {
                this.SetElement(RwyUidXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Designator
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (RwyUid, txtDesig)
        /// </para>
        /// </summary>
        public virtual txtDesig txtDesig {
            get {
                XElement x = this.GetElement(txtDesigXName);
                return ((txtDesig)(x));
            }
            set {
                this.SetElement(txtDesigXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string mid {
            get {
                XAttribute x = this.Attribute(midXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(midXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<RunwayDirectionUidType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(RwyUidXName, typeof(RunwayUidType));
            localElementDictionary.Add(txtDesigXName, typeof(txtDesig));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// RWY protection area geometry point
    /// </para>
    /// <para>
    /// Regular expression: (codeType, geoLat, geoLong, geoLatArc?, geoLongArc?, valElev?)
    /// </para>
    /// </summary>
    public partial class RunwayProtectionAreaGeometryPointType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName codeTypeXName = System.Xml.Linq.XName.Get("codeType", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName geoLatXName = System.Xml.Linq.XName.Get("geoLat", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName geoLongXName = System.Xml.Linq.XName.Get("geoLong", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName geoLatArcXName = System.Xml.Linq.XName.Get("geoLatArc", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName geoLongArcXName = System.Xml.Linq.XName.Get("geoLongArc", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName valElevXName = System.Xml.Linq.XName.Get("valElev", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("RunwayProtectionAreaGeometryPointType", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator RunwayProtectionAreaGeometryPointType(XElement xe) { return XTypedServices.ToXTypedElement<RunwayProtectionAreaGeometryPointType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static RunwayProtectionAreaGeometryPointType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(codeTypeXName), new NamedContentModelEntity(geoLatXName), new NamedContentModelEntity(geoLongXName), new NamedContentModelEntity(geoLatArcXName), new NamedContentModelEntity(geoLongArcXName), new NamedContentModelEntity(valElevXName));
        }
        
        /// <summary>
        /// <para>
        /// RWY protection area geometry point
        /// </para>
        /// <para>
        /// Regular expression: (codeType, geoLat, geoLong, geoLatArc?, geoLongArc?, valElev?)
        /// </para>
        /// </summary>
        public RunwayProtectionAreaGeometryPointType() {
        }
        
        /// <summary>
        /// <para>
        /// Type
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (codeType, geoLat, geoLong, geoLatArc?, geoLongArc?, valElev?)
        /// </para>
        /// </summary>
        public virtual codeTypeVertex codeType {
            get {
                XElement x = this.GetElement(codeTypeXName);
                return ((codeTypeVertex)(x));
            }
            set {
                this.SetElement(codeTypeXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Latitude
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (codeType, geoLat, geoLong, geoLatArc?, geoLongArc?, valElev?)
        /// </para>
        /// </summary>
        public virtual geoLat geoLat {
            get {
                XElement x = this.GetElement(geoLatXName);
                return ((geoLat)(x));
            }
            set {
                this.SetElement(geoLatXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Longitude
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (codeType, geoLat, geoLong, geoLatArc?, geoLongArc?, valElev?)
        /// </para>
        /// </summary>
        public virtual geoLong geoLong {
            get {
                XElement x = this.GetElement(geoLongXName);
                return ((geoLong)(x));
            }
            set {
                this.SetElement(geoLongXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Latitude for arc
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (codeType, geoLat, geoLong, geoLatArc?, geoLongArc?, valElev?)
        /// </para>
        /// </summary>
        public virtual geoLat geoLatArc {
            get {
                XElement x = this.GetElement(geoLatArcXName);
                return ((geoLat)(x));
            }
            set {
                this.SetElement(geoLatArcXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Longitude for arc
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (codeType, geoLat, geoLong, geoLatArc?, geoLongArc?, valElev?)
        /// </para>
        /// </summary>
        public virtual geoLong geoLongArc {
            get {
                XElement x = this.GetElement(geoLongArcXName);
                return ((geoLong)(x));
            }
            set {
                this.SetElement(geoLongArcXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Elevation
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (codeType, geoLat, geoLong, geoLatArc?, geoLongArc?, valElev?)
        /// </para>
        /// </summary>
        public virtual valDistVer valElev {
            get {
                XElement x = this.GetElement(valElevXName);
                return ((valDistVer)(x));
            }
            set {
                this.SetElement(valElevXName, value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<RunwayProtectionAreaGeometryPointType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(codeTypeXName, typeof(codeTypeVertex));
            localElementDictionary.Add(geoLatXName, typeof(geoLat));
            localElementDictionary.Add(geoLongXName, typeof(geoLong));
            localElementDictionary.Add(geoLatArcXName, typeof(geoLat));
            localElementDictionary.Add(geoLongArcXName, typeof(geoLong));
            localElementDictionary.Add(valElevXName, typeof(valDistVer));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Runway protect area geometry
    /// </para>
    /// <para>
    /// Regular expression: (RpgUid, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, valElevAccuracy?, valGeoidUndulation?, uomDistVer?, txtRmk?, Rpp+)
    /// </para>
    /// </summary>
    public partial class RunwayProtectionAreaGeometryType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName RpgUidXName = System.Xml.Linq.XName.Get("RpgUid", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName codeDatumXName = System.Xml.Linq.XName.Get("codeDatum", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName valGeoAccuracyXName = System.Xml.Linq.XName.Get("valGeoAccuracy", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName uomGeoAccuracyXName = System.Xml.Linq.XName.Get("uomGeoAccuracy", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName valElevAccuracyXName = System.Xml.Linq.XName.Get("valElevAccuracy", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName valGeoidUndulationXName = System.Xml.Linq.XName.Get("valGeoidUndulation", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName uomDistVerXName = System.Xml.Linq.XName.Get("uomDistVer", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName txtRmkXName = System.Xml.Linq.XName.Get("txtRmk", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName RppXName = System.Xml.Linq.XName.Get("Rpp", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<RunwayProtectionAreaGeometryPointType> RppField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName sourceXName = System.Xml.Linq.XName.Get("source", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("RunwayProtectionAreaGeometryType", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator RunwayProtectionAreaGeometryType(XElement xe) { return XTypedServices.ToXTypedElement<RunwayProtectionAreaGeometryType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static RunwayProtectionAreaGeometryType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(RpgUidXName), new NamedContentModelEntity(codeDatumXName), new NamedContentModelEntity(valGeoAccuracyXName), new NamedContentModelEntity(uomGeoAccuracyXName), new NamedContentModelEntity(valElevAccuracyXName), new NamedContentModelEntity(valGeoidUndulationXName), new NamedContentModelEntity(uomDistVerXName), new NamedContentModelEntity(txtRmkXName), new NamedContentModelEntity(RppXName));
        }
        
        /// <summary>
        /// <para>
        /// Runway protect area geometry
        /// </para>
        /// <para>
        /// Regular expression: (RpgUid, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, valElevAccuracy?, valGeoidUndulation?, uomDistVer?, txtRmk?, Rpp+)
        /// </para>
        /// </summary>
        public RunwayProtectionAreaGeometryType() {
        }
        
        /// <summary>
        /// <para>
        /// a version of Runway protect area geometry
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (RpgUid, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, valElevAccuracy?, valGeoidUndulation?, uomDistVer?, txtRmk?, Rpp+)
        /// </para>
        /// </summary>
        public virtual RunwayProtectionAreaGeometryUidType RpgUid {
            get {
                XElement x = this.GetElement(RpgUidXName);
                return ((RunwayProtectionAreaGeometryUidType)(x));
            }
            set {
                this.SetElement(RpgUidXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Datum
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (RpgUid, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, valElevAccuracy?, valGeoidUndulation?, uomDistVer?, txtRmk?, Rpp+)
        /// </para>
        /// </summary>
        public virtual codeDatum codeDatum {
            get {
                XElement x = this.GetElement(codeDatumXName);
                return ((codeDatum)(x));
            }
            set {
                this.SetElement(codeDatumXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Geographical accuracy
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (RpgUid, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, valElevAccuracy?, valGeoidUndulation?, uomDistVer?, txtRmk?, Rpp+)
        /// </para>
        /// </summary>
        public virtual valDistHorz valGeoAccuracy {
            get {
                XElement x = this.GetElement(valGeoAccuracyXName);
                return ((valDistHorz)(x));
            }
            set {
                this.SetElement(valGeoAccuracyXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Unit of measurement [geographical accuracy]
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (RpgUid, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, valElevAccuracy?, valGeoidUndulation?, uomDistVer?, txtRmk?, Rpp+)
        /// </para>
        /// </summary>
        public virtual uomDistHorz uomGeoAccuracy {
            get {
                XElement x = this.GetElement(uomGeoAccuracyXName);
                return ((uomDistHorz)(x));
            }
            set {
                this.SetElement(uomGeoAccuracyXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Elevation accuracy
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (RpgUid, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, valElevAccuracy?, valGeoidUndulation?, uomDistVer?, txtRmk?, Rpp+)
        /// </para>
        /// </summary>
        public virtual valDistVer valElevAccuracy {
            get {
                XElement x = this.GetElement(valElevAccuracyXName);
                return ((valDistVer)(x));
            }
            set {
                this.SetElement(valElevAccuracyXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Geoid undulation
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (RpgUid, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, valElevAccuracy?, valGeoidUndulation?, uomDistVer?, txtRmk?, Rpp+)
        /// </para>
        /// </summary>
        public virtual valDistVer valGeoidUndulation {
            get {
                XElement x = this.GetElement(valGeoidUndulationXName);
                return ((valDistVer)(x));
            }
            set {
                this.SetElement(valGeoidUndulationXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Unit of measurement [vertical distance]
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (RpgUid, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, valElevAccuracy?, valGeoidUndulation?, uomDistVer?, txtRmk?, Rpp+)
        /// </para>
        /// </summary>
        public virtual uomElev uomDistVer {
            get {
                XElement x = this.GetElement(uomDistVerXName);
                return ((uomElev)(x));
            }
            set {
                this.SetElement(uomDistVerXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Remark
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (RpgUid, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, valElevAccuracy?, valGeoidUndulation?, uomDistVer?, txtRmk?, Rpp+)
        /// </para>
        /// </summary>
        public virtual txtRmk txtRmk {
            get {
                XElement x = this.GetElement(txtRmkXName);
                return ((txtRmk)(x));
            }
            set {
                this.SetElement(txtRmkXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Runway protect area geometry is described with RWY protection area geometry point
        /// </para>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (RpgUid, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, valElevAccuracy?, valGeoidUndulation?, uomDistVer?, txtRmk?, Rpp+)
        /// </para>
        /// </summary>
        public virtual IList<RunwayProtectionAreaGeometryPointType> Rpp {
            get {
                if ((this.RppField == null)) {
                    this.RppField = new XTypedList<RunwayProtectionAreaGeometryPointType>(this, LinqToXsdTypeManager.Instance, RppXName);
                }
                return this.RppField;
            }
            set {
                if ((value == null)) {
                    this.RppField = null;
                }
                else {
                    if ((this.RppField == null)) {
                        this.RppField = XTypedList<RunwayProtectionAreaGeometryPointType>.Initialize(this, LinqToXsdTypeManager.Instance, value, RppXName);
                    }
                    else {
                        XTypedServices.SetList<RunwayProtectionAreaGeometryPointType>(this.RppField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string source {
            get {
                XAttribute x = this.Attribute(sourceXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(sourceXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<RunwayProtectionAreaGeometryType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(RpgUidXName, typeof(RunwayProtectionAreaGeometryUidType));
            localElementDictionary.Add(codeDatumXName, typeof(codeDatum));
            localElementDictionary.Add(valGeoAccuracyXName, typeof(valDistHorz));
            localElementDictionary.Add(uomGeoAccuracyXName, typeof(uomDistHorz));
            localElementDictionary.Add(valElevAccuracyXName, typeof(valDistVer));
            localElementDictionary.Add(valGeoidUndulationXName, typeof(valDistVer));
            localElementDictionary.Add(uomDistVerXName, typeof(uomElev));
            localElementDictionary.Add(txtRmkXName, typeof(txtRmk));
            localElementDictionary.Add(RppXName, typeof(RunwayProtectionAreaGeometryPointType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Runway protect area geometry - UID
    /// </para>
    /// <para>
    /// Regular expression: (RpaUid)
    /// </para>
    /// </summary>
    public partial class RunwayProtectionAreaGeometryUidType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName RpaUidXName = System.Xml.Linq.XName.Get("RpaUid", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName midXName = System.Xml.Linq.XName.Get("mid", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("RunwayProtectionAreaGeometryUidType", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator RunwayProtectionAreaGeometryUidType(XElement xe) { return XTypedServices.ToXTypedElement<RunwayProtectionAreaGeometryUidType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static RunwayProtectionAreaGeometryUidType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(RpaUidXName));
        }
        
        /// <summary>
        /// <para>
        /// Runway protect area geometry - UID
        /// </para>
        /// <para>
        /// Regular expression: (RpaUid)
        /// </para>
        /// </summary>
        public RunwayProtectionAreaGeometryUidType() {
        }
        
        /// <summary>
        /// <para>
        /// Runway protect area geometry is associated with RWY Protection area
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (RpaUid)
        /// </para>
        /// </summary>
        public virtual RunwayProtectionAreaUidType RpaUid {
            get {
                XElement x = this.GetElement(RpaUidXName);
                return ((RunwayProtectionAreaUidType)(x));
            }
            set {
                this.SetElement(RpaUidXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string mid {
            get {
                XAttribute x = this.Attribute(midXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(midXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<RunwayProtectionAreaGeometryUidType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(RpaUidXName, typeof(RunwayProtectionAreaUidType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// RWY Protection area
    /// </para>
    /// <para>
    /// Regular expression: (RpaUid, valWid?, valLen?, uomDim?, codeComposition?, codePreparation?, codeCondSfc?, valPcnClass?, codePcnPavementType?, codePcnPavementSubgrade?, codePcnMaxTirePressure?, valPcnMaxTirePressure?, codePcnEvalMethod?, txtPcnNote?, valLcnClass?, valSiwlWeight?, uomSiwlWeight?, valSiwlTirePressure?, uomSiwlTirePressure?, valAuwWeight?, uomAuwWeight?, codeSts?, txtLgt?, txtRmk?)
    /// </para>
    /// </summary>
    public partial class RunwayProtectionAreaType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName RpaUidXName = System.Xml.Linq.XName.Get("RpaUid", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName valWidXName = System.Xml.Linq.XName.Get("valWid", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName valLenXName = System.Xml.Linq.XName.Get("valLen", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName uomDimXName = System.Xml.Linq.XName.Get("uomDim", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName codeCompositionXName = System.Xml.Linq.XName.Get("codeComposition", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName codePreparationXName = System.Xml.Linq.XName.Get("codePreparation", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName codeCondSfcXName = System.Xml.Linq.XName.Get("codeCondSfc", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName valPcnClassXName = System.Xml.Linq.XName.Get("valPcnClass", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName codePcnPavementTypeXName = System.Xml.Linq.XName.Get("codePcnPavementType", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName codePcnPavementSubgradeXName = System.Xml.Linq.XName.Get("codePcnPavementSubgrade", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName codePcnMaxTirePressureXName = System.Xml.Linq.XName.Get("codePcnMaxTirePressure", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName valPcnMaxTirePressureXName = System.Xml.Linq.XName.Get("valPcnMaxTirePressure", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName codePcnEvalMethodXName = System.Xml.Linq.XName.Get("codePcnEvalMethod", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName txtPcnNoteXName = System.Xml.Linq.XName.Get("txtPcnNote", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName valLcnClassXName = System.Xml.Linq.XName.Get("valLcnClass", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName valSiwlWeightXName = System.Xml.Linq.XName.Get("valSiwlWeight", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName uomSiwlWeightXName = System.Xml.Linq.XName.Get("uomSiwlWeight", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName valSiwlTirePressureXName = System.Xml.Linq.XName.Get("valSiwlTirePressure", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName uomSiwlTirePressureXName = System.Xml.Linq.XName.Get("uomSiwlTirePressure", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName valAuwWeightXName = System.Xml.Linq.XName.Get("valAuwWeight", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName uomAuwWeightXName = System.Xml.Linq.XName.Get("uomAuwWeight", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName codeStsXName = System.Xml.Linq.XName.Get("codeSts", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName txtLgtXName = System.Xml.Linq.XName.Get("txtLgt", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName txtRmkXName = System.Xml.Linq.XName.Get("txtRmk", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName sourceXName = System.Xml.Linq.XName.Get("source", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("RunwayProtectionAreaType", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator RunwayProtectionAreaType(XElement xe) { return XTypedServices.ToXTypedElement<RunwayProtectionAreaType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static RunwayProtectionAreaType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(RpaUidXName), new NamedContentModelEntity(valWidXName), new NamedContentModelEntity(valLenXName), new NamedContentModelEntity(uomDimXName), new NamedContentModelEntity(codeCompositionXName), new NamedContentModelEntity(codePreparationXName), new NamedContentModelEntity(codeCondSfcXName), new NamedContentModelEntity(valPcnClassXName), new NamedContentModelEntity(codePcnPavementTypeXName), new NamedContentModelEntity(codePcnPavementSubgradeXName), new NamedContentModelEntity(codePcnMaxTirePressureXName), new NamedContentModelEntity(valPcnMaxTirePressureXName), new NamedContentModelEntity(codePcnEvalMethodXName), new NamedContentModelEntity(txtPcnNoteXName), new NamedContentModelEntity(valLcnClassXName), new NamedContentModelEntity(valSiwlWeightXName), new NamedContentModelEntity(uomSiwlWeightXName), new NamedContentModelEntity(valSiwlTirePressureXName), new NamedContentModelEntity(uomSiwlTirePressureXName), new NamedContentModelEntity(valAuwWeightXName), new NamedContentModelEntity(uomAuwWeightXName), new NamedContentModelEntity(codeStsXName), new NamedContentModelEntity(txtLgtXName), new NamedContentModelEntity(txtRmkXName));
        }
        
        /// <summary>
        /// <para>
        /// RWY Protection area
        /// </para>
        /// <para>
        /// Regular expression: (RpaUid, valWid?, valLen?, uomDim?, codeComposition?, codePreparation?, codeCondSfc?, valPcnClass?, codePcnPavementType?, codePcnPavementSubgrade?, codePcnMaxTirePressure?, valPcnMaxTirePressure?, codePcnEvalMethod?, txtPcnNote?, valLcnClass?, valSiwlWeight?, uomSiwlWeight?, valSiwlTirePressure?, uomSiwlTirePressure?, valAuwWeight?, uomAuwWeight?, codeSts?, txtLgt?, txtRmk?)
        /// </para>
        /// </summary>
        public RunwayProtectionAreaType() {
        }
        
        /// <summary>
        /// <para>
        /// a version of RWY Protection area
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (RpaUid, valWid?, valLen?, uomDim?, codeComposition?, codePreparation?, codeCondSfc?, valPcnClass?, codePcnPavementType?, codePcnPavementSubgrade?, codePcnMaxTirePressure?, valPcnMaxTirePressure?, codePcnEvalMethod?, txtPcnNote?, valLcnClass?, valSiwlWeight?, uomSiwlWeight?, valSiwlTirePressure?, uomSiwlTirePressure?, valAuwWeight?, uomAuwWeight?, codeSts?, txtLgt?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual RunwayProtectionAreaUidType RpaUid {
            get {
                XElement x = this.GetElement(RpaUidXName);
                return ((RunwayProtectionAreaUidType)(x));
            }
            set {
                this.SetElement(RpaUidXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Width
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (RpaUid, valWid?, valLen?, uomDim?, codeComposition?, codePreparation?, codeCondSfc?, valPcnClass?, codePcnPavementType?, codePcnPavementSubgrade?, codePcnMaxTirePressure?, valPcnMaxTirePressure?, codePcnEvalMethod?, txtPcnNote?, valLcnClass?, valSiwlWeight?, uomSiwlWeight?, valSiwlTirePressure?, uomSiwlTirePressure?, valAuwWeight?, uomAuwWeight?, codeSts?, txtLgt?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual valDistHorz valWid {
            get {
                XElement x = this.GetElement(valWidXName);
                return ((valDistHorz)(x));
            }
            set {
                this.SetElement(valWidXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Length
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (RpaUid, valWid?, valLen?, uomDim?, codeComposition?, codePreparation?, codeCondSfc?, valPcnClass?, codePcnPavementType?, codePcnPavementSubgrade?, codePcnMaxTirePressure?, valPcnMaxTirePressure?, codePcnEvalMethod?, txtPcnNote?, valLcnClass?, valSiwlWeight?, uomSiwlWeight?, valSiwlTirePressure?, uomSiwlTirePressure?, valAuwWeight?, uomAuwWeight?, codeSts?, txtLgt?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual valDistHorz valLen {
            get {
                XElement x = this.GetElement(valLenXName);
                return ((valDistHorz)(x));
            }
            set {
                this.SetElement(valLenXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Unit of measurement [horizontal dimension]
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (RpaUid, valWid?, valLen?, uomDim?, codeComposition?, codePreparation?, codeCondSfc?, valPcnClass?, codePcnPavementType?, codePcnPavementSubgrade?, codePcnMaxTirePressure?, valPcnMaxTirePressure?, codePcnEvalMethod?, txtPcnNote?, valLcnClass?, valSiwlWeight?, uomSiwlWeight?, valSiwlTirePressure?, uomSiwlTirePressure?, valAuwWeight?, uomAuwWeight?, codeSts?, txtLgt?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual uomDistHorz uomDim {
            get {
                XElement x = this.GetElement(uomDimXName);
                return ((uomDistHorz)(x));
            }
            set {
                this.SetElement(uomDimXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Surface composition
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (RpaUid, valWid?, valLen?, uomDim?, codeComposition?, codePreparation?, codeCondSfc?, valPcnClass?, codePcnPavementType?, codePcnPavementSubgrade?, codePcnMaxTirePressure?, valPcnMaxTirePressure?, codePcnEvalMethod?, txtPcnNote?, valLcnClass?, valSiwlWeight?, uomSiwlWeight?, valSiwlTirePressure?, uomSiwlTirePressure?, valAuwWeight?, uomAuwWeight?, codeSts?, txtLgt?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual codeCompositionSfc codeComposition {
            get {
                XElement x = this.GetElement(codeCompositionXName);
                return ((codeCompositionSfc)(x));
            }
            set {
                this.SetElement(codeCompositionXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Surface preparation method
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (RpaUid, valWid?, valLen?, uomDim?, codeComposition?, codePreparation?, codeCondSfc?, valPcnClass?, codePcnPavementType?, codePcnPavementSubgrade?, codePcnMaxTirePressure?, valPcnMaxTirePressure?, codePcnEvalMethod?, txtPcnNote?, valLcnClass?, valSiwlWeight?, uomSiwlWeight?, valSiwlTirePressure?, uomSiwlTirePressure?, valAuwWeight?, uomAuwWeight?, codeSts?, txtLgt?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual codePreparationSfc codePreparation {
            get {
                XElement x = this.GetElement(codePreparationXName);
                return ((codePreparationSfc)(x));
            }
            set {
                this.SetElement(codePreparationXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Surface condition
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (RpaUid, valWid?, valLen?, uomDim?, codeComposition?, codePreparation?, codeCondSfc?, valPcnClass?, codePcnPavementType?, codePcnPavementSubgrade?, codePcnMaxTirePressure?, valPcnMaxTirePressure?, codePcnEvalMethod?, txtPcnNote?, valLcnClass?, valSiwlWeight?, uomSiwlWeight?, valSiwlTirePressure?, uomSiwlTirePressure?, valAuwWeight?, uomAuwWeight?, codeSts?, txtLgt?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual codeCondSfc codeCondSfc {
            get {
                XElement x = this.GetElement(codeCondSfcXName);
                return ((codeCondSfc)(x));
            }
            set {
                this.SetElement(codeCondSfcXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// PCN (Pavement Classification Number) value
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (RpaUid, valWid?, valLen?, uomDim?, codeComposition?, codePreparation?, codeCondSfc?, valPcnClass?, codePcnPavementType?, codePcnPavementSubgrade?, codePcnMaxTirePressure?, valPcnMaxTirePressure?, codePcnEvalMethod?, txtPcnNote?, valLcnClass?, valSiwlWeight?, uomSiwlWeight?, valSiwlTirePressure?, uomSiwlTirePressure?, valAuwWeight?, uomAuwWeight?, codeSts?, txtLgt?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual valPcnClass valPcnClass {
            get {
                XElement x = this.GetElement(valPcnClassXName);
                return ((valPcnClass)(x));
            }
            set {
                this.SetElement(valPcnClassXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// PCN pavement type
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (RpaUid, valWid?, valLen?, uomDim?, codeComposition?, codePreparation?, codeCondSfc?, valPcnClass?, codePcnPavementType?, codePcnPavementSubgrade?, codePcnMaxTirePressure?, valPcnMaxTirePressure?, codePcnEvalMethod?, txtPcnNote?, valLcnClass?, valSiwlWeight?, uomSiwlWeight?, valSiwlTirePressure?, uomSiwlTirePressure?, valAuwWeight?, uomAuwWeight?, codeSts?, txtLgt?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual codePcnPavementType codePcnPavementType {
            get {
                XElement x = this.GetElement(codePcnPavementTypeXName);
                return ((codePcnPavementType)(x));
            }
            set {
                this.SetElement(codePcnPavementTypeXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// PCN pavement subgrade
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (RpaUid, valWid?, valLen?, uomDim?, codeComposition?, codePreparation?, codeCondSfc?, valPcnClass?, codePcnPavementType?, codePcnPavementSubgrade?, codePcnMaxTirePressure?, valPcnMaxTirePressure?, codePcnEvalMethod?, txtPcnNote?, valLcnClass?, valSiwlWeight?, uomSiwlWeight?, valSiwlTirePressure?, uomSiwlTirePressure?, valAuwWeight?, uomAuwWeight?, codeSts?, txtLgt?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual codePcnPavementSubgrade codePcnPavementSubgrade {
            get {
                XElement x = this.GetElement(codePcnPavementSubgradeXName);
                return ((codePcnPavementSubgrade)(x));
            }
            set {
                this.SetElement(codePcnPavementSubgradeXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// PCN max tire pressure code
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (RpaUid, valWid?, valLen?, uomDim?, codeComposition?, codePreparation?, codeCondSfc?, valPcnClass?, codePcnPavementType?, codePcnPavementSubgrade?, codePcnMaxTirePressure?, valPcnMaxTirePressure?, codePcnEvalMethod?, txtPcnNote?, valLcnClass?, valSiwlWeight?, uomSiwlWeight?, valSiwlTirePressure?, uomSiwlTirePressure?, valAuwWeight?, uomAuwWeight?, codeSts?, txtLgt?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual codePcnMaxTirePressure codePcnMaxTirePressure {
            get {
                XElement x = this.GetElement(codePcnMaxTirePressureXName);
                return ((codePcnMaxTirePressure)(x));
            }
            set {
                this.SetElement(codePcnMaxTirePressureXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// PCN max tire pressure value
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (RpaUid, valWid?, valLen?, uomDim?, codeComposition?, codePreparation?, codeCondSfc?, valPcnClass?, codePcnPavementType?, codePcnPavementSubgrade?, codePcnMaxTirePressure?, valPcnMaxTirePressure?, codePcnEvalMethod?, txtPcnNote?, valLcnClass?, valSiwlWeight?, uomSiwlWeight?, valSiwlTirePressure?, uomSiwlTirePressure?, valAuwWeight?, uomAuwWeight?, codeSts?, txtLgt?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual valPressurePcnTire valPcnMaxTirePressure {
            get {
                XElement x = this.GetElement(valPcnMaxTirePressureXName);
                return ((valPressurePcnTire)(x));
            }
            set {
                this.SetElement(valPcnMaxTirePressureXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// PCN evaluation method
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (RpaUid, valWid?, valLen?, uomDim?, codeComposition?, codePreparation?, codeCondSfc?, valPcnClass?, codePcnPavementType?, codePcnPavementSubgrade?, codePcnMaxTirePressure?, valPcnMaxTirePressure?, codePcnEvalMethod?, txtPcnNote?, valLcnClass?, valSiwlWeight?, uomSiwlWeight?, valSiwlTirePressure?, uomSiwlTirePressure?, valAuwWeight?, uomAuwWeight?, codeSts?, txtLgt?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual codePcnEvalMethod codePcnEvalMethod {
            get {
                XElement x = this.GetElement(codePcnEvalMethodXName);
                return ((codePcnEvalMethod)(x));
            }
            set {
                this.SetElement(codePcnEvalMethodXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// PCN notes
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (RpaUid, valWid?, valLen?, uomDim?, codeComposition?, codePreparation?, codeCondSfc?, valPcnClass?, codePcnPavementType?, codePcnPavementSubgrade?, codePcnMaxTirePressure?, valPcnMaxTirePressure?, codePcnEvalMethod?, txtPcnNote?, valLcnClass?, valSiwlWeight?, uomSiwlWeight?, valSiwlTirePressure?, uomSiwlTirePressure?, valAuwWeight?, uomAuwWeight?, codeSts?, txtLgt?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual txtRmk txtPcnNote {
            get {
                XElement x = this.GetElement(txtPcnNoteXName);
                return ((txtRmk)(x));
            }
            set {
                this.SetElement(txtPcnNoteXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// LCN value
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (RpaUid, valWid?, valLen?, uomDim?, codeComposition?, codePreparation?, codeCondSfc?, valPcnClass?, codePcnPavementType?, codePcnPavementSubgrade?, codePcnMaxTirePressure?, valPcnMaxTirePressure?, codePcnEvalMethod?, txtPcnNote?, valLcnClass?, valSiwlWeight?, uomSiwlWeight?, valSiwlTirePressure?, uomSiwlTirePressure?, valAuwWeight?, uomAuwWeight?, codeSts?, txtLgt?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual valLcnClass valLcnClass {
            get {
                XElement x = this.GetElement(valLcnClassXName);
                return ((valLcnClass)(x));
            }
            set {
                this.SetElement(valLcnClassXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// SIWL weight
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (RpaUid, valWid?, valLen?, uomDim?, codeComposition?, codePreparation?, codeCondSfc?, valPcnClass?, codePcnPavementType?, codePcnPavementSubgrade?, codePcnMaxTirePressure?, valPcnMaxTirePressure?, codePcnEvalMethod?, txtPcnNote?, valLcnClass?, valSiwlWeight?, uomSiwlWeight?, valSiwlTirePressure?, uomSiwlTirePressure?, valAuwWeight?, uomAuwWeight?, codeSts?, txtLgt?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual valWeight valSiwlWeight {
            get {
                XElement x = this.GetElement(valSiwlWeightXName);
                return ((valWeight)(x));
            }
            set {
                this.SetElement(valSiwlWeightXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Unit of measurement [SIWL weight]
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (RpaUid, valWid?, valLen?, uomDim?, codeComposition?, codePreparation?, codeCondSfc?, valPcnClass?, codePcnPavementType?, codePcnPavementSubgrade?, codePcnMaxTirePressure?, valPcnMaxTirePressure?, codePcnEvalMethod?, txtPcnNote?, valLcnClass?, valSiwlWeight?, uomSiwlWeight?, valSiwlTirePressure?, uomSiwlTirePressure?, valAuwWeight?, uomAuwWeight?, codeSts?, txtLgt?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual uomWeight uomSiwlWeight {
            get {
                XElement x = this.GetElement(uomSiwlWeightXName);
                return ((uomWeight)(x));
            }
            set {
                this.SetElement(uomSiwlWeightXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// SIWL tire pressure
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (RpaUid, valWid?, valLen?, uomDim?, codeComposition?, codePreparation?, codeCondSfc?, valPcnClass?, codePcnPavementType?, codePcnPavementSubgrade?, codePcnMaxTirePressure?, valPcnMaxTirePressure?, codePcnEvalMethod?, txtPcnNote?, valLcnClass?, valSiwlWeight?, uomSiwlWeight?, valSiwlTirePressure?, uomSiwlTirePressure?, valAuwWeight?, uomAuwWeight?, codeSts?, txtLgt?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual valPressure valSiwlTirePressure {
            get {
                XElement x = this.GetElement(valSiwlTirePressureXName);
                return ((valPressure)(x));
            }
            set {
                this.SetElement(valSiwlTirePressureXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Unit of measurement [SIWL tire pressure]
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (RpaUid, valWid?, valLen?, uomDim?, codeComposition?, codePreparation?, codeCondSfc?, valPcnClass?, codePcnPavementType?, codePcnPavementSubgrade?, codePcnMaxTirePressure?, valPcnMaxTirePressure?, codePcnEvalMethod?, txtPcnNote?, valLcnClass?, valSiwlWeight?, uomSiwlWeight?, valSiwlTirePressure?, uomSiwlTirePressure?, valAuwWeight?, uomAuwWeight?, codeSts?, txtLgt?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual uomPressure uomSiwlTirePressure {
            get {
                XElement x = this.GetElement(uomSiwlTirePressureXName);
                return ((uomPressure)(x));
            }
            set {
                this.SetElement(uomSiwlTirePressureXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// All Up Wheel weight
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (RpaUid, valWid?, valLen?, uomDim?, codeComposition?, codePreparation?, codeCondSfc?, valPcnClass?, codePcnPavementType?, codePcnPavementSubgrade?, codePcnMaxTirePressure?, valPcnMaxTirePressure?, codePcnEvalMethod?, txtPcnNote?, valLcnClass?, valSiwlWeight?, uomSiwlWeight?, valSiwlTirePressure?, uomSiwlTirePressure?, valAuwWeight?, uomAuwWeight?, codeSts?, txtLgt?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual valWeight valAuwWeight {
            get {
                XElement x = this.GetElement(valAuwWeightXName);
                return ((valWeight)(x));
            }
            set {
                this.SetElement(valAuwWeightXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Unit of measurement [AUW weight]
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (RpaUid, valWid?, valLen?, uomDim?, codeComposition?, codePreparation?, codeCondSfc?, valPcnClass?, codePcnPavementType?, codePcnPavementSubgrade?, codePcnMaxTirePressure?, valPcnMaxTirePressure?, codePcnEvalMethod?, txtPcnNote?, valLcnClass?, valSiwlWeight?, uomSiwlWeight?, valSiwlTirePressure?, uomSiwlTirePressure?, valAuwWeight?, uomAuwWeight?, codeSts?, txtLgt?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual uomWeight uomAuwWeight {
            get {
                XElement x = this.GetElement(uomAuwWeightXName);
                return ((uomWeight)(x));
            }
            set {
                this.SetElement(uomAuwWeightXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Operational status
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (RpaUid, valWid?, valLen?, uomDim?, codeComposition?, codePreparation?, codeCondSfc?, valPcnClass?, codePcnPavementType?, codePcnPavementSubgrade?, codePcnMaxTirePressure?, valPcnMaxTirePressure?, codePcnEvalMethod?, txtPcnNote?, valLcnClass?, valSiwlWeight?, uomSiwlWeight?, valSiwlTirePressure?, uomSiwlTirePressure?, valAuwWeight?, uomAuwWeight?, codeSts?, txtLgt?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual codeStsSfc codeSts {
            get {
                XElement x = this.GetElement(codeStsXName);
                return ((codeStsSfc)(x));
            }
            set {
                this.SetElement(codeStsXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Lighting system description
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (RpaUid, valWid?, valLen?, uomDim?, codeComposition?, codePreparation?, codeCondSfc?, valPcnClass?, codePcnPavementType?, codePcnPavementSubgrade?, codePcnMaxTirePressure?, valPcnMaxTirePressure?, codePcnEvalMethod?, txtPcnNote?, valLcnClass?, valSiwlWeight?, uomSiwlWeight?, valSiwlTirePressure?, uomSiwlTirePressure?, valAuwWeight?, uomAuwWeight?, codeSts?, txtLgt?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual txtDescr txtLgt {
            get {
                XElement x = this.GetElement(txtLgtXName);
                return ((txtDescr)(x));
            }
            set {
                this.SetElement(txtLgtXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Remark
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (RpaUid, valWid?, valLen?, uomDim?, codeComposition?, codePreparation?, codeCondSfc?, valPcnClass?, codePcnPavementType?, codePcnPavementSubgrade?, codePcnMaxTirePressure?, valPcnMaxTirePressure?, codePcnEvalMethod?, txtPcnNote?, valLcnClass?, valSiwlWeight?, uomSiwlWeight?, valSiwlTirePressure?, uomSiwlTirePressure?, valAuwWeight?, uomAuwWeight?, codeSts?, txtLgt?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual txtRmk txtRmk {
            get {
                XElement x = this.GetElement(txtRmkXName);
                return ((txtRmk)(x));
            }
            set {
                this.SetElement(txtRmkXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string source {
            get {
                XAttribute x = this.Attribute(sourceXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(sourceXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<RunwayProtectionAreaType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(RpaUidXName, typeof(RunwayProtectionAreaUidType));
            localElementDictionary.Add(valWidXName, typeof(valDistHorz));
            localElementDictionary.Add(valLenXName, typeof(valDistHorz));
            localElementDictionary.Add(uomDimXName, typeof(uomDistHorz));
            localElementDictionary.Add(codeCompositionXName, typeof(codeCompositionSfc));
            localElementDictionary.Add(codePreparationXName, typeof(codePreparationSfc));
            localElementDictionary.Add(codeCondSfcXName, typeof(codeCondSfc));
            localElementDictionary.Add(valPcnClassXName, typeof(valPcnClass));
            localElementDictionary.Add(codePcnPavementTypeXName, typeof(codePcnPavementType));
            localElementDictionary.Add(codePcnPavementSubgradeXName, typeof(codePcnPavementSubgrade));
            localElementDictionary.Add(codePcnMaxTirePressureXName, typeof(codePcnMaxTirePressure));
            localElementDictionary.Add(valPcnMaxTirePressureXName, typeof(valPressurePcnTire));
            localElementDictionary.Add(codePcnEvalMethodXName, typeof(codePcnEvalMethod));
            localElementDictionary.Add(txtPcnNoteXName, typeof(txtRmk));
            localElementDictionary.Add(valLcnClassXName, typeof(valLcnClass));
            localElementDictionary.Add(valSiwlWeightXName, typeof(valWeight));
            localElementDictionary.Add(uomSiwlWeightXName, typeof(uomWeight));
            localElementDictionary.Add(valSiwlTirePressureXName, typeof(valPressure));
            localElementDictionary.Add(uomSiwlTirePressureXName, typeof(uomPressure));
            localElementDictionary.Add(valAuwWeightXName, typeof(valWeight));
            localElementDictionary.Add(uomAuwWeightXName, typeof(uomWeight));
            localElementDictionary.Add(codeStsXName, typeof(codeStsSfc));
            localElementDictionary.Add(txtLgtXName, typeof(txtDescr));
            localElementDictionary.Add(txtRmkXName, typeof(txtRmk));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// RWY Protection area - UID
    /// </para>
    /// <para>
    /// Regular expression: (RdnUid, codeType)
    /// </para>
    /// </summary>
    public partial class RunwayProtectionAreaUidType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName RdnUidXName = System.Xml.Linq.XName.Get("RdnUid", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName codeTypeXName = System.Xml.Linq.XName.Get("codeType", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName midXName = System.Xml.Linq.XName.Get("mid", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("RunwayProtectionAreaUidType", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator RunwayProtectionAreaUidType(XElement xe) { return XTypedServices.ToXTypedElement<RunwayProtectionAreaUidType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static RunwayProtectionAreaUidType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(RdnUidXName), new NamedContentModelEntity(codeTypeXName));
        }
        
        /// <summary>
        /// <para>
        /// RWY Protection area - UID
        /// </para>
        /// <para>
        /// Regular expression: (RdnUid, codeType)
        /// </para>
        /// </summary>
        public RunwayProtectionAreaUidType() {
        }
        
        /// <summary>
        /// <para>
        /// RWY Protection area is encompassing RWY direction
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (RdnUid, codeType)
        /// </para>
        /// </summary>
        public virtual RunwayDirectionUidType RdnUid {
            get {
                XElement x = this.GetElement(RdnUidXName);
                return ((RunwayDirectionUidType)(x));
            }
            set {
                this.SetElement(RdnUidXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Type
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (RdnUid, codeType)
        /// </para>
        /// </summary>
        public virtual codeTypeProtectAreaRwy codeType {
            get {
                XElement x = this.GetElement(codeTypeXName);
                return ((codeTypeProtectAreaRwy)(x));
            }
            set {
                this.SetElement(codeTypeXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string mid {
            get {
                XAttribute x = this.Attribute(midXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(midXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<RunwayProtectionAreaUidType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(RdnUidXName, typeof(RunwayDirectionUidType));
            localElementDictionary.Add(codeTypeXName, typeof(codeTypeProtectAreaRwy));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// RWY
    /// </para>
    /// <para>
    /// Regular expression: (RwyUid, valLen?, valWid?, uomDimRwy?, codeComposition?, codePreparation?, codeCondSfc?, valPcnClass?, codePcnPavementType?, codePcnPavementSubgrade?, codePcnMaxTirePressure?, valPcnMaxTirePressure?, codePcnEvalMethod?, txtPcnNote?, valLcnClass?, valSiwlWeight?, uomSiwlWeight?, valSiwlTirePressure?, uomSiwlTirePressure?, valAuwWeight?, uomAuwWeight?, codeStrength?, txtDescrStrength?, valLenStrip?, valWidStrip?, valLenOffset?, valWidOffset?, uomDimStrip?, codeSts?, txtProfile?, txtMarking?, txtRmk?)
    /// </para>
    /// </summary>
    public partial class RunwayType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName RwyUidXName = System.Xml.Linq.XName.Get("RwyUid", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName valLenXName = System.Xml.Linq.XName.Get("valLen", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName valWidXName = System.Xml.Linq.XName.Get("valWid", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName uomDimRwyXName = System.Xml.Linq.XName.Get("uomDimRwy", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName codeCompositionXName = System.Xml.Linq.XName.Get("codeComposition", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName codePreparationXName = System.Xml.Linq.XName.Get("codePreparation", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName codeCondSfcXName = System.Xml.Linq.XName.Get("codeCondSfc", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName valPcnClassXName = System.Xml.Linq.XName.Get("valPcnClass", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName codePcnPavementTypeXName = System.Xml.Linq.XName.Get("codePcnPavementType", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName codePcnPavementSubgradeXName = System.Xml.Linq.XName.Get("codePcnPavementSubgrade", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName codePcnMaxTirePressureXName = System.Xml.Linq.XName.Get("codePcnMaxTirePressure", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName valPcnMaxTirePressureXName = System.Xml.Linq.XName.Get("valPcnMaxTirePressure", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName codePcnEvalMethodXName = System.Xml.Linq.XName.Get("codePcnEvalMethod", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName txtPcnNoteXName = System.Xml.Linq.XName.Get("txtPcnNote", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName valLcnClassXName = System.Xml.Linq.XName.Get("valLcnClass", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName valSiwlWeightXName = System.Xml.Linq.XName.Get("valSiwlWeight", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName uomSiwlWeightXName = System.Xml.Linq.XName.Get("uomSiwlWeight", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName valSiwlTirePressureXName = System.Xml.Linq.XName.Get("valSiwlTirePressure", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName uomSiwlTirePressureXName = System.Xml.Linq.XName.Get("uomSiwlTirePressure", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName valAuwWeightXName = System.Xml.Linq.XName.Get("valAuwWeight", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName uomAuwWeightXName = System.Xml.Linq.XName.Get("uomAuwWeight", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName codeStrengthXName = System.Xml.Linq.XName.Get("codeStrength", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName txtDescrStrengthXName = System.Xml.Linq.XName.Get("txtDescrStrength", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName valLenStripXName = System.Xml.Linq.XName.Get("valLenStrip", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName valWidStripXName = System.Xml.Linq.XName.Get("valWidStrip", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName valLenOffsetXName = System.Xml.Linq.XName.Get("valLenOffset", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName valWidOffsetXName = System.Xml.Linq.XName.Get("valWidOffset", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName uomDimStripXName = System.Xml.Linq.XName.Get("uomDimStrip", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName codeStsXName = System.Xml.Linq.XName.Get("codeSts", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName txtProfileXName = System.Xml.Linq.XName.Get("txtProfile", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName txtMarkingXName = System.Xml.Linq.XName.Get("txtMarking", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName txtRmkXName = System.Xml.Linq.XName.Get("txtRmk", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName sourceXName = System.Xml.Linq.XName.Get("source", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("RunwayType", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator RunwayType(XElement xe) { return XTypedServices.ToXTypedElement<RunwayType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static RunwayType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(RwyUidXName), new NamedContentModelEntity(valLenXName), new NamedContentModelEntity(valWidXName), new NamedContentModelEntity(uomDimRwyXName), new NamedContentModelEntity(codeCompositionXName), new NamedContentModelEntity(codePreparationXName), new NamedContentModelEntity(codeCondSfcXName), new NamedContentModelEntity(valPcnClassXName), new NamedContentModelEntity(codePcnPavementTypeXName), new NamedContentModelEntity(codePcnPavementSubgradeXName), new NamedContentModelEntity(codePcnMaxTirePressureXName), new NamedContentModelEntity(valPcnMaxTirePressureXName), new NamedContentModelEntity(codePcnEvalMethodXName), new NamedContentModelEntity(txtPcnNoteXName), new NamedContentModelEntity(valLcnClassXName), new NamedContentModelEntity(valSiwlWeightXName), new NamedContentModelEntity(uomSiwlWeightXName), new NamedContentModelEntity(valSiwlTirePressureXName), new NamedContentModelEntity(uomSiwlTirePressureXName), new NamedContentModelEntity(valAuwWeightXName), new NamedContentModelEntity(uomAuwWeightXName), new NamedContentModelEntity(codeStrengthXName), new NamedContentModelEntity(txtDescrStrengthXName), new NamedContentModelEntity(valLenStripXName), new NamedContentModelEntity(valWidStripXName), new NamedContentModelEntity(valLenOffsetXName), new NamedContentModelEntity(valWidOffsetXName), new NamedContentModelEntity(uomDimStripXName), new NamedContentModelEntity(codeStsXName), new NamedContentModelEntity(txtProfileXName), new NamedContentModelEntity(txtMarkingXName), new NamedContentModelEntity(txtRmkXName));
        }
        
        /// <summary>
        /// <para>
        /// RWY
        /// </para>
        /// <para>
        /// Regular expression: (RwyUid, valLen?, valWid?, uomDimRwy?, codeComposition?, codePreparation?, codeCondSfc?, valPcnClass?, codePcnPavementType?, codePcnPavementSubgrade?, codePcnMaxTirePressure?, valPcnMaxTirePressure?, codePcnEvalMethod?, txtPcnNote?, valLcnClass?, valSiwlWeight?, uomSiwlWeight?, valSiwlTirePressure?, uomSiwlTirePressure?, valAuwWeight?, uomAuwWeight?, codeStrength?, txtDescrStrength?, valLenStrip?, valWidStrip?, valLenOffset?, valWidOffset?, uomDimStrip?, codeSts?, txtProfile?, txtMarking?, txtRmk?)
        /// </para>
        /// </summary>
        public RunwayType() {
        }
        
        /// <summary>
        /// <para>
        /// a version of Runway [RWY]
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (RwyUid, valLen?, valWid?, uomDimRwy?, codeComposition?, codePreparation?, codeCondSfc?, valPcnClass?, codePcnPavementType?, codePcnPavementSubgrade?, codePcnMaxTirePressure?, valPcnMaxTirePressure?, codePcnEvalMethod?, txtPcnNote?, valLcnClass?, valSiwlWeight?, uomSiwlWeight?, valSiwlTirePressure?, uomSiwlTirePressure?, valAuwWeight?, uomAuwWeight?, codeStrength?, txtDescrStrength?, valLenStrip?, valWidStrip?, valLenOffset?, valWidOffset?, uomDimStrip?, codeSts?, txtProfile?, txtMarking?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual RunwayUidType RwyUid {
            get {
                XElement x = this.GetElement(RwyUidXName);
                return ((RunwayUidType)(x));
            }
            set {
                this.SetElement(RwyUidXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Length
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (RwyUid, valLen?, valWid?, uomDimRwy?, codeComposition?, codePreparation?, codeCondSfc?, valPcnClass?, codePcnPavementType?, codePcnPavementSubgrade?, codePcnMaxTirePressure?, valPcnMaxTirePressure?, codePcnEvalMethod?, txtPcnNote?, valLcnClass?, valSiwlWeight?, uomSiwlWeight?, valSiwlTirePressure?, uomSiwlTirePressure?, valAuwWeight?, uomAuwWeight?, codeStrength?, txtDescrStrength?, valLenStrip?, valWidStrip?, valLenOffset?, valWidOffset?, uomDimStrip?, codeSts?, txtProfile?, txtMarking?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual valDistHorz valLen {
            get {
                XElement x = this.GetElement(valLenXName);
                return ((valDistHorz)(x));
            }
            set {
                this.SetElement(valLenXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Width
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (RwyUid, valLen?, valWid?, uomDimRwy?, codeComposition?, codePreparation?, codeCondSfc?, valPcnClass?, codePcnPavementType?, codePcnPavementSubgrade?, codePcnMaxTirePressure?, valPcnMaxTirePressure?, codePcnEvalMethod?, txtPcnNote?, valLcnClass?, valSiwlWeight?, uomSiwlWeight?, valSiwlTirePressure?, uomSiwlTirePressure?, valAuwWeight?, uomAuwWeight?, codeStrength?, txtDescrStrength?, valLenStrip?, valWidStrip?, valLenOffset?, valWidOffset?, uomDimStrip?, codeSts?, txtProfile?, txtMarking?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual valDistHorz valWid {
            get {
                XElement x = this.GetElement(valWidXName);
                return ((valDistHorz)(x));
            }
            set {
                this.SetElement(valWidXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Unit of measurement [horizontal dimension]
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (RwyUid, valLen?, valWid?, uomDimRwy?, codeComposition?, codePreparation?, codeCondSfc?, valPcnClass?, codePcnPavementType?, codePcnPavementSubgrade?, codePcnMaxTirePressure?, valPcnMaxTirePressure?, codePcnEvalMethod?, txtPcnNote?, valLcnClass?, valSiwlWeight?, uomSiwlWeight?, valSiwlTirePressure?, uomSiwlTirePressure?, valAuwWeight?, uomAuwWeight?, codeStrength?, txtDescrStrength?, valLenStrip?, valWidStrip?, valLenOffset?, valWidOffset?, uomDimStrip?, codeSts?, txtProfile?, txtMarking?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual uomDistHorz uomDimRwy {
            get {
                XElement x = this.GetElement(uomDimRwyXName);
                return ((uomDistHorz)(x));
            }
            set {
                this.SetElement(uomDimRwyXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Surface composition
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (RwyUid, valLen?, valWid?, uomDimRwy?, codeComposition?, codePreparation?, codeCondSfc?, valPcnClass?, codePcnPavementType?, codePcnPavementSubgrade?, codePcnMaxTirePressure?, valPcnMaxTirePressure?, codePcnEvalMethod?, txtPcnNote?, valLcnClass?, valSiwlWeight?, uomSiwlWeight?, valSiwlTirePressure?, uomSiwlTirePressure?, valAuwWeight?, uomAuwWeight?, codeStrength?, txtDescrStrength?, valLenStrip?, valWidStrip?, valLenOffset?, valWidOffset?, uomDimStrip?, codeSts?, txtProfile?, txtMarking?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual codeCompositionSfc codeComposition {
            get {
                XElement x = this.GetElement(codeCompositionXName);
                return ((codeCompositionSfc)(x));
            }
            set {
                this.SetElement(codeCompositionXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Surface preparation method
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (RwyUid, valLen?, valWid?, uomDimRwy?, codeComposition?, codePreparation?, codeCondSfc?, valPcnClass?, codePcnPavementType?, codePcnPavementSubgrade?, codePcnMaxTirePressure?, valPcnMaxTirePressure?, codePcnEvalMethod?, txtPcnNote?, valLcnClass?, valSiwlWeight?, uomSiwlWeight?, valSiwlTirePressure?, uomSiwlTirePressure?, valAuwWeight?, uomAuwWeight?, codeStrength?, txtDescrStrength?, valLenStrip?, valWidStrip?, valLenOffset?, valWidOffset?, uomDimStrip?, codeSts?, txtProfile?, txtMarking?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual codePreparationSfc codePreparation {
            get {
                XElement x = this.GetElement(codePreparationXName);
                return ((codePreparationSfc)(x));
            }
            set {
                this.SetElement(codePreparationXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Surface condition
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (RwyUid, valLen?, valWid?, uomDimRwy?, codeComposition?, codePreparation?, codeCondSfc?, valPcnClass?, codePcnPavementType?, codePcnPavementSubgrade?, codePcnMaxTirePressure?, valPcnMaxTirePressure?, codePcnEvalMethod?, txtPcnNote?, valLcnClass?, valSiwlWeight?, uomSiwlWeight?, valSiwlTirePressure?, uomSiwlTirePressure?, valAuwWeight?, uomAuwWeight?, codeStrength?, txtDescrStrength?, valLenStrip?, valWidStrip?, valLenOffset?, valWidOffset?, uomDimStrip?, codeSts?, txtProfile?, txtMarking?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual codeCondSfc codeCondSfc {
            get {
                XElement x = this.GetElement(codeCondSfcXName);
                return ((codeCondSfc)(x));
            }
            set {
                this.SetElement(codeCondSfcXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// PCN (Pavement Classification Number) value
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (RwyUid, valLen?, valWid?, uomDimRwy?, codeComposition?, codePreparation?, codeCondSfc?, valPcnClass?, codePcnPavementType?, codePcnPavementSubgrade?, codePcnMaxTirePressure?, valPcnMaxTirePressure?, codePcnEvalMethod?, txtPcnNote?, valLcnClass?, valSiwlWeight?, uomSiwlWeight?, valSiwlTirePressure?, uomSiwlTirePressure?, valAuwWeight?, uomAuwWeight?, codeStrength?, txtDescrStrength?, valLenStrip?, valWidStrip?, valLenOffset?, valWidOffset?, uomDimStrip?, codeSts?, txtProfile?, txtMarking?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual valPcnClass valPcnClass {
            get {
                XElement x = this.GetElement(valPcnClassXName);
                return ((valPcnClass)(x));
            }
            set {
                this.SetElement(valPcnClassXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// PCN pavement type
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (RwyUid, valLen?, valWid?, uomDimRwy?, codeComposition?, codePreparation?, codeCondSfc?, valPcnClass?, codePcnPavementType?, codePcnPavementSubgrade?, codePcnMaxTirePressure?, valPcnMaxTirePressure?, codePcnEvalMethod?, txtPcnNote?, valLcnClass?, valSiwlWeight?, uomSiwlWeight?, valSiwlTirePressure?, uomSiwlTirePressure?, valAuwWeight?, uomAuwWeight?, codeStrength?, txtDescrStrength?, valLenStrip?, valWidStrip?, valLenOffset?, valWidOffset?, uomDimStrip?, codeSts?, txtProfile?, txtMarking?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual codePcnPavementType codePcnPavementType {
            get {
                XElement x = this.GetElement(codePcnPavementTypeXName);
                return ((codePcnPavementType)(x));
            }
            set {
                this.SetElement(codePcnPavementTypeXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// PCN pavement subgrade
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (RwyUid, valLen?, valWid?, uomDimRwy?, codeComposition?, codePreparation?, codeCondSfc?, valPcnClass?, codePcnPavementType?, codePcnPavementSubgrade?, codePcnMaxTirePressure?, valPcnMaxTirePressure?, codePcnEvalMethod?, txtPcnNote?, valLcnClass?, valSiwlWeight?, uomSiwlWeight?, valSiwlTirePressure?, uomSiwlTirePressure?, valAuwWeight?, uomAuwWeight?, codeStrength?, txtDescrStrength?, valLenStrip?, valWidStrip?, valLenOffset?, valWidOffset?, uomDimStrip?, codeSts?, txtProfile?, txtMarking?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual codePcnPavementSubgrade codePcnPavementSubgrade {
            get {
                XElement x = this.GetElement(codePcnPavementSubgradeXName);
                return ((codePcnPavementSubgrade)(x));
            }
            set {
                this.SetElement(codePcnPavementSubgradeXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// PCN max tire pressure code
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (RwyUid, valLen?, valWid?, uomDimRwy?, codeComposition?, codePreparation?, codeCondSfc?, valPcnClass?, codePcnPavementType?, codePcnPavementSubgrade?, codePcnMaxTirePressure?, valPcnMaxTirePressure?, codePcnEvalMethod?, txtPcnNote?, valLcnClass?, valSiwlWeight?, uomSiwlWeight?, valSiwlTirePressure?, uomSiwlTirePressure?, valAuwWeight?, uomAuwWeight?, codeStrength?, txtDescrStrength?, valLenStrip?, valWidStrip?, valLenOffset?, valWidOffset?, uomDimStrip?, codeSts?, txtProfile?, txtMarking?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual codePcnMaxTirePressure codePcnMaxTirePressure {
            get {
                XElement x = this.GetElement(codePcnMaxTirePressureXName);
                return ((codePcnMaxTirePressure)(x));
            }
            set {
                this.SetElement(codePcnMaxTirePressureXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// PCN max tire pressure value
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (RwyUid, valLen?, valWid?, uomDimRwy?, codeComposition?, codePreparation?, codeCondSfc?, valPcnClass?, codePcnPavementType?, codePcnPavementSubgrade?, codePcnMaxTirePressure?, valPcnMaxTirePressure?, codePcnEvalMethod?, txtPcnNote?, valLcnClass?, valSiwlWeight?, uomSiwlWeight?, valSiwlTirePressure?, uomSiwlTirePressure?, valAuwWeight?, uomAuwWeight?, codeStrength?, txtDescrStrength?, valLenStrip?, valWidStrip?, valLenOffset?, valWidOffset?, uomDimStrip?, codeSts?, txtProfile?, txtMarking?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual valPressurePcnTire valPcnMaxTirePressure {
            get {
                XElement x = this.GetElement(valPcnMaxTirePressureXName);
                return ((valPressurePcnTire)(x));
            }
            set {
                this.SetElement(valPcnMaxTirePressureXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// PCN evaluation method
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (RwyUid, valLen?, valWid?, uomDimRwy?, codeComposition?, codePreparation?, codeCondSfc?, valPcnClass?, codePcnPavementType?, codePcnPavementSubgrade?, codePcnMaxTirePressure?, valPcnMaxTirePressure?, codePcnEvalMethod?, txtPcnNote?, valLcnClass?, valSiwlWeight?, uomSiwlWeight?, valSiwlTirePressure?, uomSiwlTirePressure?, valAuwWeight?, uomAuwWeight?, codeStrength?, txtDescrStrength?, valLenStrip?, valWidStrip?, valLenOffset?, valWidOffset?, uomDimStrip?, codeSts?, txtProfile?, txtMarking?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual codePcnEvalMethod codePcnEvalMethod {
            get {
                XElement x = this.GetElement(codePcnEvalMethodXName);
                return ((codePcnEvalMethod)(x));
            }
            set {
                this.SetElement(codePcnEvalMethodXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// PCN notes
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (RwyUid, valLen?, valWid?, uomDimRwy?, codeComposition?, codePreparation?, codeCondSfc?, valPcnClass?, codePcnPavementType?, codePcnPavementSubgrade?, codePcnMaxTirePressure?, valPcnMaxTirePressure?, codePcnEvalMethod?, txtPcnNote?, valLcnClass?, valSiwlWeight?, uomSiwlWeight?, valSiwlTirePressure?, uomSiwlTirePressure?, valAuwWeight?, uomAuwWeight?, codeStrength?, txtDescrStrength?, valLenStrip?, valWidStrip?, valLenOffset?, valWidOffset?, uomDimStrip?, codeSts?, txtProfile?, txtMarking?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual txtRmk txtPcnNote {
            get {
                XElement x = this.GetElement(txtPcnNoteXName);
                return ((txtRmk)(x));
            }
            set {
                this.SetElement(txtPcnNoteXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// LCN value
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (RwyUid, valLen?, valWid?, uomDimRwy?, codeComposition?, codePreparation?, codeCondSfc?, valPcnClass?, codePcnPavementType?, codePcnPavementSubgrade?, codePcnMaxTirePressure?, valPcnMaxTirePressure?, codePcnEvalMethod?, txtPcnNote?, valLcnClass?, valSiwlWeight?, uomSiwlWeight?, valSiwlTirePressure?, uomSiwlTirePressure?, valAuwWeight?, uomAuwWeight?, codeStrength?, txtDescrStrength?, valLenStrip?, valWidStrip?, valLenOffset?, valWidOffset?, uomDimStrip?, codeSts?, txtProfile?, txtMarking?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual valLcnClass valLcnClass {
            get {
                XElement x = this.GetElement(valLcnClassXName);
                return ((valLcnClass)(x));
            }
            set {
                this.SetElement(valLcnClassXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// SIWL weight
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (RwyUid, valLen?, valWid?, uomDimRwy?, codeComposition?, codePreparation?, codeCondSfc?, valPcnClass?, codePcnPavementType?, codePcnPavementSubgrade?, codePcnMaxTirePressure?, valPcnMaxTirePressure?, codePcnEvalMethod?, txtPcnNote?, valLcnClass?, valSiwlWeight?, uomSiwlWeight?, valSiwlTirePressure?, uomSiwlTirePressure?, valAuwWeight?, uomAuwWeight?, codeStrength?, txtDescrStrength?, valLenStrip?, valWidStrip?, valLenOffset?, valWidOffset?, uomDimStrip?, codeSts?, txtProfile?, txtMarking?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual valWeight valSiwlWeight {
            get {
                XElement x = this.GetElement(valSiwlWeightXName);
                return ((valWeight)(x));
            }
            set {
                this.SetElement(valSiwlWeightXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Unit of measurement [SIWL weight]
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (RwyUid, valLen?, valWid?, uomDimRwy?, codeComposition?, codePreparation?, codeCondSfc?, valPcnClass?, codePcnPavementType?, codePcnPavementSubgrade?, codePcnMaxTirePressure?, valPcnMaxTirePressure?, codePcnEvalMethod?, txtPcnNote?, valLcnClass?, valSiwlWeight?, uomSiwlWeight?, valSiwlTirePressure?, uomSiwlTirePressure?, valAuwWeight?, uomAuwWeight?, codeStrength?, txtDescrStrength?, valLenStrip?, valWidStrip?, valLenOffset?, valWidOffset?, uomDimStrip?, codeSts?, txtProfile?, txtMarking?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual uomWeight uomSiwlWeight {
            get {
                XElement x = this.GetElement(uomSiwlWeightXName);
                return ((uomWeight)(x));
            }
            set {
                this.SetElement(uomSiwlWeightXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// SIWL tire pressure
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (RwyUid, valLen?, valWid?, uomDimRwy?, codeComposition?, codePreparation?, codeCondSfc?, valPcnClass?, codePcnPavementType?, codePcnPavementSubgrade?, codePcnMaxTirePressure?, valPcnMaxTirePressure?, codePcnEvalMethod?, txtPcnNote?, valLcnClass?, valSiwlWeight?, uomSiwlWeight?, valSiwlTirePressure?, uomSiwlTirePressure?, valAuwWeight?, uomAuwWeight?, codeStrength?, txtDescrStrength?, valLenStrip?, valWidStrip?, valLenOffset?, valWidOffset?, uomDimStrip?, codeSts?, txtProfile?, txtMarking?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual valPressure valSiwlTirePressure {
            get {
                XElement x = this.GetElement(valSiwlTirePressureXName);
                return ((valPressure)(x));
            }
            set {
                this.SetElement(valSiwlTirePressureXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Unit of measurement [SIWL tire pressure]
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (RwyUid, valLen?, valWid?, uomDimRwy?, codeComposition?, codePreparation?, codeCondSfc?, valPcnClass?, codePcnPavementType?, codePcnPavementSubgrade?, codePcnMaxTirePressure?, valPcnMaxTirePressure?, codePcnEvalMethod?, txtPcnNote?, valLcnClass?, valSiwlWeight?, uomSiwlWeight?, valSiwlTirePressure?, uomSiwlTirePressure?, valAuwWeight?, uomAuwWeight?, codeStrength?, txtDescrStrength?, valLenStrip?, valWidStrip?, valLenOffset?, valWidOffset?, uomDimStrip?, codeSts?, txtProfile?, txtMarking?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual uomPressure uomSiwlTirePressure {
            get {
                XElement x = this.GetElement(uomSiwlTirePressureXName);
                return ((uomPressure)(x));
            }
            set {
                this.SetElement(uomSiwlTirePressureXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// All Up Wheel weight
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (RwyUid, valLen?, valWid?, uomDimRwy?, codeComposition?, codePreparation?, codeCondSfc?, valPcnClass?, codePcnPavementType?, codePcnPavementSubgrade?, codePcnMaxTirePressure?, valPcnMaxTirePressure?, codePcnEvalMethod?, txtPcnNote?, valLcnClass?, valSiwlWeight?, uomSiwlWeight?, valSiwlTirePressure?, uomSiwlTirePressure?, valAuwWeight?, uomAuwWeight?, codeStrength?, txtDescrStrength?, valLenStrip?, valWidStrip?, valLenOffset?, valWidOffset?, uomDimStrip?, codeSts?, txtProfile?, txtMarking?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual valWeight valAuwWeight {
            get {
                XElement x = this.GetElement(valAuwWeightXName);
                return ((valWeight)(x));
            }
            set {
                this.SetElement(valAuwWeightXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Unit of measurement [AUW weight]
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (RwyUid, valLen?, valWid?, uomDimRwy?, codeComposition?, codePreparation?, codeCondSfc?, valPcnClass?, codePcnPavementType?, codePcnPavementSubgrade?, codePcnMaxTirePressure?, valPcnMaxTirePressure?, codePcnEvalMethod?, txtPcnNote?, valLcnClass?, valSiwlWeight?, uomSiwlWeight?, valSiwlTirePressure?, uomSiwlTirePressure?, valAuwWeight?, uomAuwWeight?, codeStrength?, txtDescrStrength?, valLenStrip?, valWidStrip?, valLenOffset?, valWidOffset?, uomDimStrip?, codeSts?, txtProfile?, txtMarking?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual uomWeight uomAuwWeight {
            get {
                XElement x = this.GetElement(uomAuwWeightXName);
                return ((uomWeight)(x));
            }
            set {
                this.SetElement(uomAuwWeightXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// [Deprecated] Surface strength method
        /// </para>
        /// <para>
        /// DEPRECATED-4.5
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (RwyUid, valLen?, valWid?, uomDimRwy?, codeComposition?, codePreparation?, codeCondSfc?, valPcnClass?, codePcnPavementType?, codePcnPavementSubgrade?, codePcnMaxTirePressure?, valPcnMaxTirePressure?, codePcnEvalMethod?, txtPcnNote?, valLcnClass?, valSiwlWeight?, uomSiwlWeight?, valSiwlTirePressure?, uomSiwlTirePressure?, valAuwWeight?, uomAuwWeight?, codeStrength?, txtDescrStrength?, valLenStrip?, valWidStrip?, valLenOffset?, valWidOffset?, uomDimStrip?, codeSts?, txtProfile?, txtMarking?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual codeStrengthSfc codeStrength {
            get {
                XElement x = this.GetElement(codeStrengthXName);
                return ((codeStrengthSfc)(x));
            }
            set {
                this.SetElement(codeStrengthXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// [Deprecated] Surface strength
        /// </para>
        /// <para>
        /// DEPRECATED-4.5
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (RwyUid, valLen?, valWid?, uomDimRwy?, codeComposition?, codePreparation?, codeCondSfc?, valPcnClass?, codePcnPavementType?, codePcnPavementSubgrade?, codePcnMaxTirePressure?, valPcnMaxTirePressure?, codePcnEvalMethod?, txtPcnNote?, valLcnClass?, valSiwlWeight?, uomSiwlWeight?, valSiwlTirePressure?, uomSiwlTirePressure?, valAuwWeight?, uomAuwWeight?, codeStrength?, txtDescrStrength?, valLenStrip?, valWidStrip?, valLenOffset?, valWidOffset?, uomDimStrip?, codeSts?, txtProfile?, txtMarking?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual txtDescr txtDescrStrength {
            get {
                XElement x = this.GetElement(txtDescrStrengthXName);
                return ((txtDescr)(x));
            }
            set {
                this.SetElement(txtDescrStrengthXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Physical length of the strip
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (RwyUid, valLen?, valWid?, uomDimRwy?, codeComposition?, codePreparation?, codeCondSfc?, valPcnClass?, codePcnPavementType?, codePcnPavementSubgrade?, codePcnMaxTirePressure?, valPcnMaxTirePressure?, codePcnEvalMethod?, txtPcnNote?, valLcnClass?, valSiwlWeight?, uomSiwlWeight?, valSiwlTirePressure?, uomSiwlTirePressure?, valAuwWeight?, uomAuwWeight?, codeStrength?, txtDescrStrength?, valLenStrip?, valWidStrip?, valLenOffset?, valWidOffset?, uomDimStrip?, codeSts?, txtProfile?, txtMarking?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual valDistHorz valLenStrip {
            get {
                XElement x = this.GetElement(valLenStripXName);
                return ((valDistHorz)(x));
            }
            set {
                this.SetElement(valLenStripXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Physical width of the strip
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (RwyUid, valLen?, valWid?, uomDimRwy?, codeComposition?, codePreparation?, codeCondSfc?, valPcnClass?, codePcnPavementType?, codePcnPavementSubgrade?, codePcnMaxTirePressure?, valPcnMaxTirePressure?, codePcnEvalMethod?, txtPcnNote?, valLcnClass?, valSiwlWeight?, uomSiwlWeight?, valSiwlTirePressure?, uomSiwlTirePressure?, valAuwWeight?, uomAuwWeight?, codeStrength?, txtDescrStrength?, valLenStrip?, valWidStrip?, valLenOffset?, valWidOffset?, uomDimStrip?, codeSts?, txtProfile?, txtMarking?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual valDistHorz valWidStrip {
            get {
                XElement x = this.GetElement(valWidStripXName);
                return ((valDistHorz)(x));
            }
            set {
                this.SetElement(valWidStripXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Longitudinal offset of the strip
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (RwyUid, valLen?, valWid?, uomDimRwy?, codeComposition?, codePreparation?, codeCondSfc?, valPcnClass?, codePcnPavementType?, codePcnPavementSubgrade?, codePcnMaxTirePressure?, valPcnMaxTirePressure?, codePcnEvalMethod?, txtPcnNote?, valLcnClass?, valSiwlWeight?, uomSiwlWeight?, valSiwlTirePressure?, uomSiwlTirePressure?, valAuwWeight?, uomAuwWeight?, codeStrength?, txtDescrStrength?, valLenStrip?, valWidStrip?, valLenOffset?, valWidOffset?, uomDimStrip?, codeSts?, txtProfile?, txtMarking?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual valOffset valLenOffset {
            get {
                XElement x = this.GetElement(valLenOffsetXName);
                return ((valOffset)(x));
            }
            set {
                this.SetElement(valLenOffsetXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Lateral offset of the strip
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (RwyUid, valLen?, valWid?, uomDimRwy?, codeComposition?, codePreparation?, codeCondSfc?, valPcnClass?, codePcnPavementType?, codePcnPavementSubgrade?, codePcnMaxTirePressure?, valPcnMaxTirePressure?, codePcnEvalMethod?, txtPcnNote?, valLcnClass?, valSiwlWeight?, uomSiwlWeight?, valSiwlTirePressure?, uomSiwlTirePressure?, valAuwWeight?, uomAuwWeight?, codeStrength?, txtDescrStrength?, valLenStrip?, valWidStrip?, valLenOffset?, valWidOffset?, uomDimStrip?, codeSts?, txtProfile?, txtMarking?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual valOffset valWidOffset {
            get {
                XElement x = this.GetElement(valWidOffsetXName);
                return ((valOffset)(x));
            }
            set {
                this.SetElement(valWidOffsetXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Unit of measurement [strip dimension]
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (RwyUid, valLen?, valWid?, uomDimRwy?, codeComposition?, codePreparation?, codeCondSfc?, valPcnClass?, codePcnPavementType?, codePcnPavementSubgrade?, codePcnMaxTirePressure?, valPcnMaxTirePressure?, codePcnEvalMethod?, txtPcnNote?, valLcnClass?, valSiwlWeight?, uomSiwlWeight?, valSiwlTirePressure?, uomSiwlTirePressure?, valAuwWeight?, uomAuwWeight?, codeStrength?, txtDescrStrength?, valLenStrip?, valWidStrip?, valLenOffset?, valWidOffset?, uomDimStrip?, codeSts?, txtProfile?, txtMarking?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual uomDistHorz uomDimStrip {
            get {
                XElement x = this.GetElement(uomDimStripXName);
                return ((uomDistHorz)(x));
            }
            set {
                this.SetElement(uomDimStripXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Operational status
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (RwyUid, valLen?, valWid?, uomDimRwy?, codeComposition?, codePreparation?, codeCondSfc?, valPcnClass?, codePcnPavementType?, codePcnPavementSubgrade?, codePcnMaxTirePressure?, valPcnMaxTirePressure?, codePcnEvalMethod?, txtPcnNote?, valLcnClass?, valSiwlWeight?, uomSiwlWeight?, valSiwlTirePressure?, uomSiwlTirePressure?, valAuwWeight?, uomAuwWeight?, codeStrength?, txtDescrStrength?, valLenStrip?, valWidStrip?, valLenOffset?, valWidOffset?, uomDimStrip?, codeSts?, txtProfile?, txtMarking?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual codeStsSfc codeSts {
            get {
                XElement x = this.GetElement(codeStsXName);
                return ((codeStsSfc)(x));
            }
            set {
                this.SetElement(codeStsXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Profile description
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (RwyUid, valLen?, valWid?, uomDimRwy?, codeComposition?, codePreparation?, codeCondSfc?, valPcnClass?, codePcnPavementType?, codePcnPavementSubgrade?, codePcnMaxTirePressure?, valPcnMaxTirePressure?, codePcnEvalMethod?, txtPcnNote?, valLcnClass?, valSiwlWeight?, uomSiwlWeight?, valSiwlTirePressure?, uomSiwlTirePressure?, valAuwWeight?, uomAuwWeight?, codeStrength?, txtDescrStrength?, valLenStrip?, valWidStrip?, valLenOffset?, valWidOffset?, uomDimStrip?, codeSts?, txtProfile?, txtMarking?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual txtDescr txtProfile {
            get {
                XElement x = this.GetElement(txtProfileXName);
                return ((txtDescr)(x));
            }
            set {
                this.SetElement(txtProfileXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Marking
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (RwyUid, valLen?, valWid?, uomDimRwy?, codeComposition?, codePreparation?, codeCondSfc?, valPcnClass?, codePcnPavementType?, codePcnPavementSubgrade?, codePcnMaxTirePressure?, valPcnMaxTirePressure?, codePcnEvalMethod?, txtPcnNote?, valLcnClass?, valSiwlWeight?, uomSiwlWeight?, valSiwlTirePressure?, uomSiwlTirePressure?, valAuwWeight?, uomAuwWeight?, codeStrength?, txtDescrStrength?, valLenStrip?, valWidStrip?, valLenOffset?, valWidOffset?, uomDimStrip?, codeSts?, txtProfile?, txtMarking?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual txtDescr txtMarking {
            get {
                XElement x = this.GetElement(txtMarkingXName);
                return ((txtDescr)(x));
            }
            set {
                this.SetElement(txtMarkingXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Remark
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (RwyUid, valLen?, valWid?, uomDimRwy?, codeComposition?, codePreparation?, codeCondSfc?, valPcnClass?, codePcnPavementType?, codePcnPavementSubgrade?, codePcnMaxTirePressure?, valPcnMaxTirePressure?, codePcnEvalMethod?, txtPcnNote?, valLcnClass?, valSiwlWeight?, uomSiwlWeight?, valSiwlTirePressure?, uomSiwlTirePressure?, valAuwWeight?, uomAuwWeight?, codeStrength?, txtDescrStrength?, valLenStrip?, valWidStrip?, valLenOffset?, valWidOffset?, uomDimStrip?, codeSts?, txtProfile?, txtMarking?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual txtRmk txtRmk {
            get {
                XElement x = this.GetElement(txtRmkXName);
                return ((txtRmk)(x));
            }
            set {
                this.SetElement(txtRmkXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string source {
            get {
                XAttribute x = this.Attribute(sourceXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(sourceXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<RunwayType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(RwyUidXName, typeof(RunwayUidType));
            localElementDictionary.Add(valLenXName, typeof(valDistHorz));
            localElementDictionary.Add(valWidXName, typeof(valDistHorz));
            localElementDictionary.Add(uomDimRwyXName, typeof(uomDistHorz));
            localElementDictionary.Add(codeCompositionXName, typeof(codeCompositionSfc));
            localElementDictionary.Add(codePreparationXName, typeof(codePreparationSfc));
            localElementDictionary.Add(codeCondSfcXName, typeof(codeCondSfc));
            localElementDictionary.Add(valPcnClassXName, typeof(valPcnClass));
            localElementDictionary.Add(codePcnPavementTypeXName, typeof(codePcnPavementType));
            localElementDictionary.Add(codePcnPavementSubgradeXName, typeof(codePcnPavementSubgrade));
            localElementDictionary.Add(codePcnMaxTirePressureXName, typeof(codePcnMaxTirePressure));
            localElementDictionary.Add(valPcnMaxTirePressureXName, typeof(valPressurePcnTire));
            localElementDictionary.Add(codePcnEvalMethodXName, typeof(codePcnEvalMethod));
            localElementDictionary.Add(txtPcnNoteXName, typeof(txtRmk));
            localElementDictionary.Add(valLcnClassXName, typeof(valLcnClass));
            localElementDictionary.Add(valSiwlWeightXName, typeof(valWeight));
            localElementDictionary.Add(uomSiwlWeightXName, typeof(uomWeight));
            localElementDictionary.Add(valSiwlTirePressureXName, typeof(valPressure));
            localElementDictionary.Add(uomSiwlTirePressureXName, typeof(uomPressure));
            localElementDictionary.Add(valAuwWeightXName, typeof(valWeight));
            localElementDictionary.Add(uomAuwWeightXName, typeof(uomWeight));
            localElementDictionary.Add(codeStrengthXName, typeof(codeStrengthSfc));
            localElementDictionary.Add(txtDescrStrengthXName, typeof(txtDescr));
            localElementDictionary.Add(valLenStripXName, typeof(valDistHorz));
            localElementDictionary.Add(valWidStripXName, typeof(valDistHorz));
            localElementDictionary.Add(valLenOffsetXName, typeof(valOffset));
            localElementDictionary.Add(valWidOffsetXName, typeof(valOffset));
            localElementDictionary.Add(uomDimStripXName, typeof(uomDistHorz));
            localElementDictionary.Add(codeStsXName, typeof(codeStsSfc));
            localElementDictionary.Add(txtProfileXName, typeof(txtDescr));
            localElementDictionary.Add(txtMarkingXName, typeof(txtDescr));
            localElementDictionary.Add(txtRmkXName, typeof(txtRmk));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Runway [RWY] - UID
    /// </para>
    /// <para>
    /// Regular expression: (AhpUid, txtDesig)
    /// </para>
    /// </summary>
    public partial class RunwayUidType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName AhpUidXName = System.Xml.Linq.XName.Get("AhpUid", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName txtDesigXName = System.Xml.Linq.XName.Get("txtDesig", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName midXName = System.Xml.Linq.XName.Get("mid", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("RunwayUidType", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator RunwayUidType(XElement xe) { return XTypedServices.ToXTypedElement<RunwayUidType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static RunwayUidType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(AhpUidXName), new NamedContentModelEntity(txtDesigXName));
        }
        
        /// <summary>
        /// <para>
        /// Runway [RWY] - UID
        /// </para>
        /// <para>
        /// Regular expression: (AhpUid, txtDesig)
        /// </para>
        /// </summary>
        public RunwayUidType() {
        }
        
        /// <summary>
        /// <para>
        /// Runway [RWY] is situated at Aerodrome / Heliport
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (AhpUid, txtDesig)
        /// </para>
        /// </summary>
        public virtual AerodromeHeliportUidType AhpUid {
            get {
                XElement x = this.GetElement(AhpUidXName);
                return ((AerodromeHeliportUidType)(x));
            }
            set {
                this.SetElement(AhpUidXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Designator
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (AhpUid, txtDesig)
        /// </para>
        /// </summary>
        public virtual txtDesig txtDesig {
            get {
                XElement x = this.GetElement(txtDesigXName);
                return ((txtDesig)(x));
            }
            set {
                this.SetElement(txtDesigXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string mid {
            get {
                XAttribute x = this.Attribute(midXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(midXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<RunwayUidType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(AhpUidXName, typeof(AerodromeHeliportUidType));
            localElementDictionary.Add(txtDesigXName, typeof(txtDesig));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Service
    /// </para>
    /// <para>
    /// Regular expression: (SerUid, codeSource?, geoLat?, geoLong?, codeRadar?, codeDatum?, valGeoAccuracy?, uomGeoAccuracy?, valElev?, valElevAccuracy?, valGeoidUndulation?, uomDistVer?, valCrc?, txtVerDatum?, Stt?, txtRmk?)
    /// </para>
    /// </summary>
    public partial class ServiceType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName SerUidXName = System.Xml.Linq.XName.Get("SerUid", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName codeSourceXName = System.Xml.Linq.XName.Get("codeSource", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName geoLatXName = System.Xml.Linq.XName.Get("geoLat", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName geoLongXName = System.Xml.Linq.XName.Get("geoLong", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName codeRadarXName = System.Xml.Linq.XName.Get("codeRadar", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName codeDatumXName = System.Xml.Linq.XName.Get("codeDatum", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName valGeoAccuracyXName = System.Xml.Linq.XName.Get("valGeoAccuracy", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName uomGeoAccuracyXName = System.Xml.Linq.XName.Get("uomGeoAccuracy", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName valElevXName = System.Xml.Linq.XName.Get("valElev", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName valElevAccuracyXName = System.Xml.Linq.XName.Get("valElevAccuracy", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName valGeoidUndulationXName = System.Xml.Linq.XName.Get("valGeoidUndulation", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName uomDistVerXName = System.Xml.Linq.XName.Get("uomDistVer", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName valCrcXName = System.Xml.Linq.XName.Get("valCrc", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName txtVerDatumXName = System.Xml.Linq.XName.Get("txtVerDatum", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName SttXName = System.Xml.Linq.XName.Get("Stt", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName txtRmkXName = System.Xml.Linq.XName.Get("txtRmk", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName sourceXName = System.Xml.Linq.XName.Get("source", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("ServiceType", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator ServiceType(XElement xe) { return XTypedServices.ToXTypedElement<ServiceType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static ServiceType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(SerUidXName), new NamedContentModelEntity(codeSourceXName), new NamedContentModelEntity(geoLatXName), new NamedContentModelEntity(geoLongXName), new NamedContentModelEntity(codeRadarXName), new NamedContentModelEntity(codeDatumXName), new NamedContentModelEntity(valGeoAccuracyXName), new NamedContentModelEntity(uomGeoAccuracyXName), new NamedContentModelEntity(valElevXName), new NamedContentModelEntity(valElevAccuracyXName), new NamedContentModelEntity(valGeoidUndulationXName), new NamedContentModelEntity(uomDistVerXName), new NamedContentModelEntity(valCrcXName), new NamedContentModelEntity(txtVerDatumXName), new NamedContentModelEntity(SttXName), new NamedContentModelEntity(txtRmkXName));
        }
        
        /// <summary>
        /// <para>
        /// Service
        /// </para>
        /// <para>
        /// Regular expression: (SerUid, codeSource?, geoLat?, geoLong?, codeRadar?, codeDatum?, valGeoAccuracy?, uomGeoAccuracy?, valElev?, valElevAccuracy?, valGeoidUndulation?, uomDistVer?, valCrc?, txtVerDatum?, Stt?, txtRmk?)
        /// </para>
        /// </summary>
        public ServiceType() {
        }
        
        /// <summary>
        /// <para>
        /// a version of Service
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (SerUid, codeSource?, geoLat?, geoLong?, codeRadar?, codeDatum?, valGeoAccuracy?, uomGeoAccuracy?, valElev?, valElevAccuracy?, valGeoidUndulation?, uomDistVer?, valCrc?, txtVerDatum?, Stt?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual ServiceUidType SerUid {
            get {
                XElement x = this.GetElement(SerUidXName);
                return ((ServiceUidType)(x));
            }
            set {
                this.SetElement(SerUidXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Type defined by
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (SerUid, codeSource?, geoLat?, geoLong?, codeRadar?, codeDatum?, valGeoAccuracy?, uomGeoAccuracy?, valElev?, valElevAccuracy?, valGeoidUndulation?, uomDistVer?, valCrc?, txtVerDatum?, Stt?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual codeSourceSer codeSource {
            get {
                XElement x = this.GetElement(codeSourceXName);
                return ((codeSourceSer)(x));
            }
            set {
                this.SetElement(codeSourceXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Latitude
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (SerUid, codeSource?, geoLat?, geoLong?, codeRadar?, codeDatum?, valGeoAccuracy?, uomGeoAccuracy?, valElev?, valElevAccuracy?, valGeoidUndulation?, uomDistVer?, valCrc?, txtVerDatum?, Stt?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual geoLat geoLat {
            get {
                XElement x = this.GetElement(geoLatXName);
                return ((geoLat)(x));
            }
            set {
                this.SetElement(geoLatXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Longitude
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (SerUid, codeSource?, geoLat?, geoLong?, codeRadar?, codeDatum?, valGeoAccuracy?, uomGeoAccuracy?, valElev?, valElevAccuracy?, valGeoidUndulation?, uomDistVer?, valCrc?, txtVerDatum?, Stt?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual geoLong geoLong {
            get {
                XElement x = this.GetElement(geoLongXName);
                return ((geoLong)(x));
            }
            set {
                this.SetElement(geoLongXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Radar assisted
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (SerUid, codeSource?, geoLat?, geoLong?, codeRadar?, codeDatum?, valGeoAccuracy?, uomGeoAccuracy?, valElev?, valElevAccuracy?, valGeoidUndulation?, uomDistVer?, valCrc?, txtVerDatum?, Stt?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual codeYesNo codeRadar {
            get {
                XElement x = this.GetElement(codeRadarXName);
                return ((codeYesNo)(x));
            }
            set {
                this.SetElement(codeRadarXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Datum
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (SerUid, codeSource?, geoLat?, geoLong?, codeRadar?, codeDatum?, valGeoAccuracy?, uomGeoAccuracy?, valElev?, valElevAccuracy?, valGeoidUndulation?, uomDistVer?, valCrc?, txtVerDatum?, Stt?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual codeDatum codeDatum {
            get {
                XElement x = this.GetElement(codeDatumXName);
                return ((codeDatum)(x));
            }
            set {
                this.SetElement(codeDatumXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Geographical accuracy
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (SerUid, codeSource?, geoLat?, geoLong?, codeRadar?, codeDatum?, valGeoAccuracy?, uomGeoAccuracy?, valElev?, valElevAccuracy?, valGeoidUndulation?, uomDistVer?, valCrc?, txtVerDatum?, Stt?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual valDistHorz valGeoAccuracy {
            get {
                XElement x = this.GetElement(valGeoAccuracyXName);
                return ((valDistHorz)(x));
            }
            set {
                this.SetElement(valGeoAccuracyXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Unit of measurement [geographical accuracy]
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (SerUid, codeSource?, geoLat?, geoLong?, codeRadar?, codeDatum?, valGeoAccuracy?, uomGeoAccuracy?, valElev?, valElevAccuracy?, valGeoidUndulation?, uomDistVer?, valCrc?, txtVerDatum?, Stt?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual uomDistHorz uomGeoAccuracy {
            get {
                XElement x = this.GetElement(uomGeoAccuracyXName);
                return ((uomDistHorz)(x));
            }
            set {
                this.SetElement(uomGeoAccuracyXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Elevation
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (SerUid, codeSource?, geoLat?, geoLong?, codeRadar?, codeDatum?, valGeoAccuracy?, uomGeoAccuracy?, valElev?, valElevAccuracy?, valGeoidUndulation?, uomDistVer?, valCrc?, txtVerDatum?, Stt?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual valDistVer valElev {
            get {
                XElement x = this.GetElement(valElevXName);
                return ((valDistVer)(x));
            }
            set {
                this.SetElement(valElevXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Elevation accuracy
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (SerUid, codeSource?, geoLat?, geoLong?, codeRadar?, codeDatum?, valGeoAccuracy?, uomGeoAccuracy?, valElev?, valElevAccuracy?, valGeoidUndulation?, uomDistVer?, valCrc?, txtVerDatum?, Stt?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual valDistVer valElevAccuracy {
            get {
                XElement x = this.GetElement(valElevAccuracyXName);
                return ((valDistVer)(x));
            }
            set {
                this.SetElement(valElevAccuracyXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Geoid undulation
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (SerUid, codeSource?, geoLat?, geoLong?, codeRadar?, codeDatum?, valGeoAccuracy?, uomGeoAccuracy?, valElev?, valElevAccuracy?, valGeoidUndulation?, uomDistVer?, valCrc?, txtVerDatum?, Stt?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual valDistVer valGeoidUndulation {
            get {
                XElement x = this.GetElement(valGeoidUndulationXName);
                return ((valDistVer)(x));
            }
            set {
                this.SetElement(valGeoidUndulationXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Unit of measurement [vertical distance]
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (SerUid, codeSource?, geoLat?, geoLong?, codeRadar?, codeDatum?, valGeoAccuracy?, uomGeoAccuracy?, valElev?, valElevAccuracy?, valGeoidUndulation?, uomDistVer?, valCrc?, txtVerDatum?, Stt?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual uomElev uomDistVer {
            get {
                XElement x = this.GetElement(uomDistVerXName);
                return ((uomElev)(x));
            }
            set {
                this.SetElement(uomDistVerXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Cyclic redundancy check
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (SerUid, codeSource?, geoLat?, geoLong?, codeRadar?, codeDatum?, valGeoAccuracy?, uomGeoAccuracy?, valElev?, valElevAccuracy?, valGeoidUndulation?, uomDistVer?, valCrc?, txtVerDatum?, Stt?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual valHex valCrc {
            get {
                XElement x = this.GetElement(valCrcXName);
                return ((valHex)(x));
            }
            set {
                this.SetElement(valCrcXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Vertical Datum
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (SerUid, codeSource?, geoLat?, geoLong?, codeRadar?, codeDatum?, valGeoAccuracy?, uomGeoAccuracy?, valElev?, valElevAccuracy?, valGeoidUndulation?, uomDistVer?, valCrc?, txtVerDatum?, Stt?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual txtDescr txtVerDatum {
            get {
                XElement x = this.GetElement(txtVerDatumXName);
                return ((txtDescr)(x));
            }
            set {
                this.SetElement(txtVerDatumXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Service is available according to Service - Timetable
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (SerUid, codeSource?, geoLat?, geoLong?, codeRadar?, codeDatum?, valGeoAccuracy?, uomGeoAccuracy?, valElev?, valElevAccuracy?, valGeoidUndulation?, uomDistVer?, valCrc?, txtVerDatum?, Stt?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual TimetableType Stt {
            get {
                XElement x = this.GetElement(SttXName);
                return ((TimetableType)(x));
            }
            set {
                this.SetElement(SttXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Remark
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (SerUid, codeSource?, geoLat?, geoLong?, codeRadar?, codeDatum?, valGeoAccuracy?, uomGeoAccuracy?, valElev?, valElevAccuracy?, valGeoidUndulation?, uomDistVer?, valCrc?, txtVerDatum?, Stt?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual txtRmk txtRmk {
            get {
                XElement x = this.GetElement(txtRmkXName);
                return ((txtRmk)(x));
            }
            set {
                this.SetElement(txtRmkXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string source {
            get {
                XAttribute x = this.Attribute(sourceXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(sourceXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ServiceType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(SerUidXName, typeof(ServiceUidType));
            localElementDictionary.Add(codeSourceXName, typeof(codeSourceSer));
            localElementDictionary.Add(geoLatXName, typeof(geoLat));
            localElementDictionary.Add(geoLongXName, typeof(geoLong));
            localElementDictionary.Add(codeRadarXName, typeof(codeYesNo));
            localElementDictionary.Add(codeDatumXName, typeof(codeDatum));
            localElementDictionary.Add(valGeoAccuracyXName, typeof(valDistHorz));
            localElementDictionary.Add(uomGeoAccuracyXName, typeof(uomDistHorz));
            localElementDictionary.Add(valElevXName, typeof(valDistVer));
            localElementDictionary.Add(valElevAccuracyXName, typeof(valDistVer));
            localElementDictionary.Add(valGeoidUndulationXName, typeof(valDistVer));
            localElementDictionary.Add(uomDistVerXName, typeof(uomElev));
            localElementDictionary.Add(valCrcXName, typeof(valHex));
            localElementDictionary.Add(txtVerDatumXName, typeof(txtDescr));
            localElementDictionary.Add(SttXName, typeof(TimetableType));
            localElementDictionary.Add(txtRmkXName, typeof(txtRmk));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Service - UID
    /// </para>
    /// <para>
    /// Regular expression: (UniUid, codeType, noSeq)
    /// </para>
    /// </summary>
    public partial class ServiceUidType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName UniUidXName = System.Xml.Linq.XName.Get("UniUid", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName codeTypeXName = System.Xml.Linq.XName.Get("codeType", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName noSeqXName = System.Xml.Linq.XName.Get("noSeq", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName midXName = System.Xml.Linq.XName.Get("mid", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("ServiceUidType", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator ServiceUidType(XElement xe) { return XTypedServices.ToXTypedElement<ServiceUidType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static ServiceUidType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(UniUidXName), new NamedContentModelEntity(codeTypeXName), new NamedContentModelEntity(noSeqXName));
        }
        
        /// <summary>
        /// <para>
        /// Service - UID
        /// </para>
        /// <para>
        /// Regular expression: (UniUid, codeType, noSeq)
        /// </para>
        /// </summary>
        public ServiceUidType() {
        }
        
        /// <summary>
        /// <para>
        /// Service is provided by Organisation unit providing services
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (UniUid, codeType, noSeq)
        /// </para>
        /// </summary>
        public virtual UnitUidType UniUid {
            get {
                XElement x = this.GetElement(UniUidXName);
                return ((UnitUidType)(x));
            }
            set {
                this.SetElement(UniUidXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Type
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (UniUid, codeType, noSeq)
        /// </para>
        /// </summary>
        public virtual codeTypeSer codeType {
            get {
                XElement x = this.GetElement(codeTypeXName);
                return ((codeTypeSer)(x));
            }
            set {
                this.SetElement(codeTypeXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Sequence number
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (UniUid, codeType, noSeq)
        /// </para>
        /// </summary>
        public virtual noSeq noSeq {
            get {
                XElement x = this.GetElement(noSeqXName);
                return ((noSeq)(x));
            }
            set {
                this.SetElement(noSeqXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string mid {
            get {
                XAttribute x = this.Attribute(midXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(midXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ServiceUidType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(UniUidXName, typeof(UnitUidType));
            localElementDictionary.Add(codeTypeXName, typeof(codeTypeSer));
            localElementDictionary.Add(noSeqXName, typeof(noSeq));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Service provided on SID
    /// </para>
    /// <para>
    /// Regular expression: (SsdUid, txtRmk?)
    /// </para>
    /// </summary>
    public partial class SidServiceType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName SsdUidXName = System.Xml.Linq.XName.Get("SsdUid", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName txtRmkXName = System.Xml.Linq.XName.Get("txtRmk", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName sourceXName = System.Xml.Linq.XName.Get("source", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("SidServiceType", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator SidServiceType(XElement xe) { return XTypedServices.ToXTypedElement<SidServiceType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static SidServiceType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(SsdUidXName), new NamedContentModelEntity(txtRmkXName));
        }
        
        /// <summary>
        /// <para>
        /// Service provided on SID
        /// </para>
        /// <para>
        /// Regular expression: (SsdUid, txtRmk?)
        /// </para>
        /// </summary>
        public SidServiceType() {
        }
        
        /// <summary>
        /// <para>
        /// a version of Service provided on SID
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (SsdUid, txtRmk?)
        /// </para>
        /// </summary>
        public virtual SidServiceUidType SsdUid {
            get {
                XElement x = this.GetElement(SsdUidXName);
                return ((SidServiceUidType)(x));
            }
            set {
                this.SetElement(SsdUidXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Remark
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (SsdUid, txtRmk?)
        /// </para>
        /// </summary>
        public virtual txtRmk txtRmk {
            get {
                XElement x = this.GetElement(txtRmkXName);
                return ((txtRmk)(x));
            }
            set {
                this.SetElement(txtRmkXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string source {
            get {
                XAttribute x = this.Attribute(sourceXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(sourceXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<SidServiceType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(SsdUidXName, typeof(SidServiceUidType));
            localElementDictionary.Add(txtRmkXName, typeof(txtRmk));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Service provided on SID - UID
    /// </para>
    /// <para>
    /// Regular expression: (SidUid, SerUid)
    /// </para>
    /// </summary>
    public partial class SidServiceUidType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName SidUidXName = System.Xml.Linq.XName.Get("SidUid", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName SerUidXName = System.Xml.Linq.XName.Get("SerUid", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName midXName = System.Xml.Linq.XName.Get("mid", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("SidServiceUidType", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator SidServiceUidType(XElement xe) { return XTypedServices.ToXTypedElement<SidServiceUidType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static SidServiceUidType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(SidUidXName), new NamedContentModelEntity(SerUidXName));
        }
        
        /// <summary>
        /// <para>
        /// Service provided on SID - UID
        /// </para>
        /// <para>
        /// Regular expression: (SidUid, SerUid)
        /// </para>
        /// </summary>
        public SidServiceUidType() {
        }
        
        /// <summary>
        /// <para>
        /// Service provided on SID is furnished on Standard instrument departure [SID]
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (SidUid, SerUid)
        /// </para>
        /// </summary>
        public virtual SidUidType SidUid {
            get {
                XElement x = this.GetElement(SidUidXName);
                return ((SidUidType)(x));
            }
            set {
                this.SetElement(SidUidXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Service provided on SID is also Service
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (SidUid, SerUid)
        /// </para>
        /// </summary>
        public virtual ServiceUidType SerUid {
            get {
                XElement x = this.GetElement(SerUidXName);
                return ((ServiceUidType)(x));
            }
            set {
                this.SetElement(SerUidXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string mid {
            get {
                XAttribute x = this.Attribute(midXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(midXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<SidServiceUidType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(SidUidXName, typeof(SidUidType));
            localElementDictionary.Add(SerUidXName, typeof(ServiceUidType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// SID
    /// </para>
    /// <para>
    /// Regular expression: (SidUid, (RdnUid? | FdnUid?), MgpUid?, codeRnp?, txtDescrComFail?, codeTypeRte, txtDescr?, txtRmk?, Plg*)
    /// </para>
    /// </summary>
    public partial class SidType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName SidUidXName = System.Xml.Linq.XName.Get("SidUid", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName RdnUidXName = System.Xml.Linq.XName.Get("RdnUid", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName FdnUidXName = System.Xml.Linq.XName.Get("FdnUid", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName MgpUidXName = System.Xml.Linq.XName.Get("MgpUid", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName codeRnpXName = System.Xml.Linq.XName.Get("codeRnp", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName txtDescrComFailXName = System.Xml.Linq.XName.Get("txtDescrComFail", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName codeTypeRteXName = System.Xml.Linq.XName.Get("codeTypeRte", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName txtDescrXName = System.Xml.Linq.XName.Get("txtDescr", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName txtRmkXName = System.Xml.Linq.XName.Get("txtRmk", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName PlgXName = System.Xml.Linq.XName.Get("Plg", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ProcedureLegType> PlgField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName sourceXName = System.Xml.Linq.XName.Get("source", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("SidType", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator SidType(XElement xe) { return XTypedServices.ToXTypedElement<SidType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static SidType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(SidUidXName), new ChoiceContentModelEntity(new NamedContentModelEntity(RdnUidXName), new NamedContentModelEntity(FdnUidXName)), new NamedContentModelEntity(MgpUidXName), new NamedContentModelEntity(codeRnpXName), new NamedContentModelEntity(txtDescrComFailXName), new NamedContentModelEntity(codeTypeRteXName), new NamedContentModelEntity(txtDescrXName), new NamedContentModelEntity(txtRmkXName), new NamedContentModelEntity(PlgXName));
        }
        
        /// <summary>
        /// <para>
        /// SID
        /// </para>
        /// <para>
        /// Regular expression: (SidUid, (RdnUid? | FdnUid?), MgpUid?, codeRnp?, txtDescrComFail?, codeTypeRte, txtDescr?, txtRmk?, Plg*)
        /// </para>
        /// </summary>
        public SidType() {
        }
        
        /// <summary>
        /// <para>
        /// a version of Standard instrument departure [SID]
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (SidUid, (RdnUid? | FdnUid?), MgpUid?, codeRnp?, txtDescrComFail?, codeTypeRte, txtDescr?, txtRmk?, Plg*)
        /// </para>
        /// </summary>
        public virtual SidUidType SidUid {
            get {
                XElement x = this.GetElement(SidUidXName);
                return ((SidUidType)(x));
            }
            set {
                this.SetElement(SidUidXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// SID is for RWY direction
        /// </para>
        /// <para>
        /// Occurrence: optional, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (SidUid, (RdnUid? | FdnUid?), MgpUid?, codeRnp?, txtDescrComFail?, codeTypeRte, txtDescr?, txtRmk?, Plg*)
        /// </para>
        /// </summary>
        public virtual RunwayDirectionUidType RdnUid {
            get {
                XElement x = this.GetElement(RdnUidXName);
                return ((RunwayDirectionUidType)(x));
            }
            set {
                this.SetElement(RdnUidXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// SID is for Approach and take-off direction of a FATO
        /// </para>
        /// <para>
        /// Occurrence: optional, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (SidUid, (RdnUid? | FdnUid?), MgpUid?, codeRnp?, txtDescrComFail?, codeTypeRte, txtDescr?, txtRmk?, Plg*)
        /// </para>
        /// </summary>
        public virtual FatoDirectionUidType FdnUid {
            get {
                XElement x = this.GetElement(FdnUidXName);
                return ((FatoDirectionUidType)(x));
            }
            set {
                this.SetElement(FdnUidXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// SID is associated with MSA group
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (SidUid, (RdnUid? | FdnUid?), MgpUid?, codeRnp?, txtDescrComFail?, codeTypeRte, txtDescr?, txtRmk?, Plg*)
        /// </para>
        /// </summary>
        public virtual MsaGroupUidType MgpUid {
            get {
                XElement x = this.GetElement(MgpUidXName);
                return ((MsaGroupUidType)(x));
            }
            set {
                this.SetElement(MgpUidXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Required navigation performance
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (SidUid, (RdnUid? | FdnUid?), MgpUid?, codeRnp?, txtDescrComFail?, codeTypeRte, txtDescr?, txtRmk?, Plg*)
        /// </para>
        /// </summary>
        public virtual codeRnp codeRnp {
            get {
                XElement x = this.GetElement(codeRnpXName);
                return ((codeRnp)(x));
            }
            set {
                this.SetElement(codeRnpXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Communication failure description
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (SidUid, (RdnUid? | FdnUid?), MgpUid?, codeRnp?, txtDescrComFail?, codeTypeRte, txtDescr?, txtRmk?, Plg*)
        /// </para>
        /// </summary>
        public virtual txtDescr txtDescrComFail {
            get {
                XElement x = this.GetElement(txtDescrComFailXName);
                return ((txtDescr)(x));
            }
            set {
                this.SetElement(txtDescrComFailXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Type
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (SidUid, (RdnUid? | FdnUid?), MgpUid?, codeRnp?, txtDescrComFail?, codeTypeRte, txtDescr?, txtRmk?, Plg*)
        /// </para>
        /// </summary>
        public virtual codeTypeSid codeTypeRte {
            get {
                XElement x = this.GetElement(codeTypeRteXName);
                return ((codeTypeSid)(x));
            }
            set {
                this.SetElement(codeTypeRteXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Description
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (SidUid, (RdnUid? | FdnUid?), MgpUid?, codeRnp?, txtDescrComFail?, codeTypeRte, txtDescr?, txtRmk?, Plg*)
        /// </para>
        /// </summary>
        public virtual txtDescr txtDescr {
            get {
                XElement x = this.GetElement(txtDescrXName);
                return ((txtDescr)(x));
            }
            set {
                this.SetElement(txtDescrXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Remark
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (SidUid, (RdnUid? | FdnUid?), MgpUid?, codeRnp?, txtDescrComFail?, codeTypeRte, txtDescr?, txtRmk?, Plg*)
        /// </para>
        /// </summary>
        public virtual txtRmk txtRmk {
            get {
                XElement x = this.GetElement(txtRmkXName);
                return ((txtRmk)(x));
            }
            set {
                this.SetElement(txtRmkXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// SID is composed of Procedure leg
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (SidUid, (RdnUid? | FdnUid?), MgpUid?, codeRnp?, txtDescrComFail?, codeTypeRte, txtDescr?, txtRmk?, Plg*)
        /// </para>
        /// </summary>
        public virtual IList<ProcedureLegType> Plg {
            get {
                if ((this.PlgField == null)) {
                    this.PlgField = new XTypedList<ProcedureLegType>(this, LinqToXsdTypeManager.Instance, PlgXName);
                }
                return this.PlgField;
            }
            set {
                if ((value == null)) {
                    this.PlgField = null;
                }
                else {
                    if ((this.PlgField == null)) {
                        this.PlgField = XTypedList<ProcedureLegType>.Initialize(this, LinqToXsdTypeManager.Instance, value, PlgXName);
                    }
                    else {
                        XTypedServices.SetList<ProcedureLegType>(this.PlgField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string source {
            get {
                XAttribute x = this.Attribute(sourceXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(sourceXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<SidType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(SidUidXName, typeof(SidUidType));
            localElementDictionary.Add(RdnUidXName, typeof(RunwayDirectionUidType));
            localElementDictionary.Add(FdnUidXName, typeof(FatoDirectionUidType));
            localElementDictionary.Add(MgpUidXName, typeof(MsaGroupUidType));
            localElementDictionary.Add(codeRnpXName, typeof(codeRnp));
            localElementDictionary.Add(txtDescrComFailXName, typeof(txtDescr));
            localElementDictionary.Add(codeTypeRteXName, typeof(codeTypeSid));
            localElementDictionary.Add(txtDescrXName, typeof(txtDescr));
            localElementDictionary.Add(txtRmkXName, typeof(txtRmk));
            localElementDictionary.Add(PlgXName, typeof(ProcedureLegType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Standard instrument departure [SID] - UID
    /// </para>
    /// <para>
    /// Regular expression: (AhpUid, txtDesig, codeCatAcft?, codeTransId?)
    /// </para>
    /// </summary>
    public partial class SidUidType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName AhpUidXName = System.Xml.Linq.XName.Get("AhpUid", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName txtDesigXName = System.Xml.Linq.XName.Get("txtDesig", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName codeCatAcftXName = System.Xml.Linq.XName.Get("codeCatAcft", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName codeTransIdXName = System.Xml.Linq.XName.Get("codeTransId", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName midXName = System.Xml.Linq.XName.Get("mid", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("SidUidType", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator SidUidType(XElement xe) { return XTypedServices.ToXTypedElement<SidUidType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static SidUidType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(AhpUidXName), new NamedContentModelEntity(txtDesigXName), new NamedContentModelEntity(codeCatAcftXName), new NamedContentModelEntity(codeTransIdXName));
        }
        
        /// <summary>
        /// <para>
        /// Standard instrument departure [SID] - UID
        /// </para>
        /// <para>
        /// Regular expression: (AhpUid, txtDesig, codeCatAcft?, codeTransId?)
        /// </para>
        /// </summary>
        public SidUidType() {
        }
        
        /// <summary>
        /// <para>
        /// Standard instrument departure [SID] is for Aerodrome / Heliport
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (AhpUid, txtDesig, codeCatAcft?, codeTransId?)
        /// </para>
        /// </summary>
        public virtual AerodromeHeliportUidType AhpUid {
            get {
                XElement x = this.GetElement(AhpUidXName);
                return ((AerodromeHeliportUidType)(x));
            }
            set {
                this.SetElement(AhpUidXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Designator
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (AhpUid, txtDesig, codeCatAcft?, codeTransId?)
        /// </para>
        /// </summary>
        public virtual txtDesigIap txtDesig {
            get {
                XElement x = this.GetElement(txtDesigXName);
                return ((txtDesigIap)(x));
            }
            set {
                this.SetElement(txtDesigXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Aircraft category
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (AhpUid, txtDesig, codeCatAcft?, codeTransId?)
        /// </para>
        /// </summary>
        public virtual codeCatAcft codeCatAcft {
            get {
                XElement x = this.GetElement(codeCatAcftXName);
                return ((codeCatAcft)(x));
            }
            set {
                this.SetElement(codeCatAcftXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Transition identifier
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (AhpUid, txtDesig, codeCatAcft?, codeTransId?)
        /// </para>
        /// </summary>
        public virtual codeIdDesigPt codeTransId {
            get {
                XElement x = this.GetElement(codeTransIdXName);
                return ((codeIdDesigPt)(x));
            }
            set {
                this.SetElement(codeTransIdXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string mid {
            get {
                XAttribute x = this.Attribute(midXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(midXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<SidUidType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(AhpUidXName, typeof(AerodromeHeliportUidType));
            localElementDictionary.Add(txtDesigXName, typeof(txtDesigIap));
            localElementDictionary.Add(codeCatAcftXName, typeof(codeCatAcft));
            localElementDictionary.Add(codeTransIdXName, typeof(codeIdDesigPt));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// SID usage
    /// </para>
    /// <para>
    /// Regular expression: (SueUid, Sut?, txtRmk?)
    /// </para>
    /// </summary>
    public partial class SidUsageType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName SueUidXName = System.Xml.Linq.XName.Get("SueUid", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName SutXName = System.Xml.Linq.XName.Get("Sut", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName txtRmkXName = System.Xml.Linq.XName.Get("txtRmk", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName sourceXName = System.Xml.Linq.XName.Get("source", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("SidUsageType", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator SidUsageType(XElement xe) { return XTypedServices.ToXTypedElement<SidUsageType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static SidUsageType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(SueUidXName), new NamedContentModelEntity(SutXName), new NamedContentModelEntity(txtRmkXName));
        }
        
        /// <summary>
        /// <para>
        /// SID usage
        /// </para>
        /// <para>
        /// Regular expression: (SueUid, Sut?, txtRmk?)
        /// </para>
        /// </summary>
        public SidUsageType() {
        }
        
        /// <summary>
        /// <para>
        /// a version of SID usage
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (SueUid, Sut?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual SidUsageUidType SueUid {
            get {
                XElement x = this.GetElement(SueUidXName);
                return ((SidUsageUidType)(x));
            }
            set {
                this.SetElement(SueUidXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// SID usage is operating according to SID usage - Timetable
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (SueUid, Sut?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual TimetableType Sut {
            get {
                XElement x = this.GetElement(SutXName);
                return ((TimetableType)(x));
            }
            set {
                this.SetElement(SutXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Remark
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (SueUid, Sut?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual txtRmk txtRmk {
            get {
                XElement x = this.GetElement(txtRmkXName);
                return ((txtRmk)(x));
            }
            set {
                this.SetElement(txtRmkXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string source {
            get {
                XAttribute x = this.Attribute(sourceXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(sourceXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<SidUsageType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(SueUidXName, typeof(SidUsageUidType));
            localElementDictionary.Add(SutXName, typeof(TimetableType));
            localElementDictionary.Add(txtRmkXName, typeof(txtRmk));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// SID usage - UID
    /// </para>
    /// <para>
    /// Regular expression: (SidUid, codeRteAvbl)
    /// </para>
    /// </summary>
    public partial class SidUsageUidType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName SidUidXName = System.Xml.Linq.XName.Get("SidUid", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName codeRteAvblXName = System.Xml.Linq.XName.Get("codeRteAvbl", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName midXName = System.Xml.Linq.XName.Get("mid", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("SidUsageUidType", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator SidUsageUidType(XElement xe) { return XTypedServices.ToXTypedElement<SidUsageUidType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static SidUsageUidType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(SidUidXName), new NamedContentModelEntity(codeRteAvblXName));
        }
        
        /// <summary>
        /// <para>
        /// SID usage - UID
        /// </para>
        /// <para>
        /// Regular expression: (SidUid, codeRteAvbl)
        /// </para>
        /// </summary>
        public SidUsageUidType() {
        }
        
        /// <summary>
        /// <para>
        /// SID usage is based on Standard instrument departure [SID]
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (SidUid, codeRteAvbl)
        /// </para>
        /// </summary>
        public virtual SidUidType SidUid {
            get {
                XElement x = this.GetElement(SidUidXName);
                return ((SidUidType)(x));
            }
            set {
                this.SetElement(SidUidXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Usage of the standard instrument departure procedure within the flexible use of airspace context
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (SidUid, codeRteAvbl)
        /// </para>
        /// </summary>
        public virtual codeRteAvbl codeRteAvbl {
            get {
                XElement x = this.GetElement(codeRteAvblXName);
                return ((codeRteAvbl)(x));
            }
            set {
                this.SetElement(codeRteAvblXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string mid {
            get {
                XAttribute x = this.Attribute(midXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(midXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<SidUsageUidType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(SidUidXName, typeof(SidUidType));
            localElementDictionary.Add(codeRteAvblXName, typeof(codeRteAvbl));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Significant point in airspace
    /// </para>
    /// <para>
    /// Regular expression: (SpaUid, codeType?, txtRmk?)
    /// </para>
    /// </summary>
    public partial class SignificantPointAirspaceType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName SpaUidXName = System.Xml.Linq.XName.Get("SpaUid", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName codeTypeXName = System.Xml.Linq.XName.Get("codeType", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName txtRmkXName = System.Xml.Linq.XName.Get("txtRmk", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName sourceXName = System.Xml.Linq.XName.Get("source", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("SignificantPointAirspaceType", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator SignificantPointAirspaceType(XElement xe) { return XTypedServices.ToXTypedElement<SignificantPointAirspaceType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static SignificantPointAirspaceType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(SpaUidXName), new NamedContentModelEntity(codeTypeXName), new NamedContentModelEntity(txtRmkXName));
        }
        
        /// <summary>
        /// <para>
        /// Significant point in airspace
        /// </para>
        /// <para>
        /// Regular expression: (SpaUid, codeType?, txtRmk?)
        /// </para>
        /// </summary>
        public SignificantPointAirspaceType() {
        }
        
        /// <summary>
        /// <para>
        /// Significant point in airspace is a version of Significant point in airspace
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (SpaUid, codeType?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual SignificantPointAirspaceUidType SpaUid {
            get {
                XElement x = this.GetElement(SpaUidXName);
                return ((SignificantPointAirspaceUidType)(x));
            }
            set {
                this.SetElement(SpaUidXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Type
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (SpaUid, codeType?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual codeTypeAsSignpnt codeType {
            get {
                XElement x = this.GetElement(codeTypeXName);
                return ((codeTypeAsSignpnt)(x));
            }
            set {
                this.SetElement(codeTypeXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Remark
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (SpaUid, codeType?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual txtRmk txtRmk {
            get {
                XElement x = this.GetElement(txtRmkXName);
                return ((txtRmk)(x));
            }
            set {
                this.SetElement(txtRmkXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string source {
            get {
                XAttribute x = this.Attribute(sourceXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(sourceXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<SignificantPointAirspaceType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(SpaUidXName, typeof(SignificantPointAirspaceUidType));
            localElementDictionary.Add(codeTypeXName, typeof(codeTypeAsSignpnt));
            localElementDictionary.Add(txtRmkXName, typeof(txtRmk));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Significant point in airspace - UID
    /// </para>
    /// <para>
    /// Regular expression: ((TcnUidSpn | VorUidSpn | DpnUidSpn | NdbUidSpn | DmeUidSpn | MkrUidSpn), AseUid)
    /// </para>
    /// </summary>
    public partial class SignificantPointAirspaceUidType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TcnUidSpnXName = System.Xml.Linq.XName.Get("TcnUidSpn", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName VorUidSpnXName = System.Xml.Linq.XName.Get("VorUidSpn", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName DpnUidSpnXName = System.Xml.Linq.XName.Get("DpnUidSpn", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName NdbUidSpnXName = System.Xml.Linq.XName.Get("NdbUidSpn", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName DmeUidSpnXName = System.Xml.Linq.XName.Get("DmeUidSpn", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName MkrUidSpnXName = System.Xml.Linq.XName.Get("MkrUidSpn", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName AseUidXName = System.Xml.Linq.XName.Get("AseUid", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName midXName = System.Xml.Linq.XName.Get("mid", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("SignificantPointAirspaceUidType", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator SignificantPointAirspaceUidType(XElement xe) { return XTypedServices.ToXTypedElement<SignificantPointAirspaceUidType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static SignificantPointAirspaceUidType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new ChoiceContentModelEntity(new NamedContentModelEntity(TcnUidSpnXName), new NamedContentModelEntity(VorUidSpnXName), new NamedContentModelEntity(DpnUidSpnXName), new NamedContentModelEntity(NdbUidSpnXName), new NamedContentModelEntity(DmeUidSpnXName), new NamedContentModelEntity(MkrUidSpnXName)), new NamedContentModelEntity(AseUidXName));
        }
        
        /// <summary>
        /// <para>
        /// Significant point in airspace - UID
        /// </para>
        /// <para>
        /// Regular expression: ((TcnUidSpn | VorUidSpn | DpnUidSpn | NdbUidSpn | DmeUidSpn | MkrUidSpn), AseUid)
        /// </para>
        /// </summary>
        public SignificantPointAirspaceUidType() {
        }
        
        /// <summary>
        /// <para>
        /// Significant point is at Tactical air navigation beacon [TACAN]
        /// </para>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((TcnUidSpn | VorUidSpn | DpnUidSpn | NdbUidSpn | DmeUidSpn | MkrUidSpn), AseUid)
        /// </para>
        /// </summary>
        public virtual TacanUidType TcnUidSpn {
            get {
                XElement x = this.GetElement(TcnUidSpnXName);
                return ((TacanUidType)(x));
            }
            set {
                this.SetElement(TcnUidSpnXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Significant point is at VHF omnidirectional radio range beacon [VOR]
        /// </para>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((TcnUidSpn | VorUidSpn | DpnUidSpn | NdbUidSpn | DmeUidSpn | MkrUidSpn), AseUid)
        /// </para>
        /// </summary>
        public virtual VorUidType VorUidSpn {
            get {
                XElement x = this.GetElement(VorUidSpnXName);
                return ((VorUidType)(x));
            }
            set {
                this.SetElement(VorUidSpnXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Significant point is at Designated point
        /// </para>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((TcnUidSpn | VorUidSpn | DpnUidSpn | NdbUidSpn | DmeUidSpn | MkrUidSpn), AseUid)
        /// </para>
        /// </summary>
        public virtual DesignatedPointUidType DpnUidSpn {
            get {
                XElement x = this.GetElement(DpnUidSpnXName);
                return ((DesignatedPointUidType)(x));
            }
            set {
                this.SetElement(DpnUidSpnXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Significant point is at Non-directional radio beacon [NDB]
        /// </para>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((TcnUidSpn | VorUidSpn | DpnUidSpn | NdbUidSpn | DmeUidSpn | MkrUidSpn), AseUid)
        /// </para>
        /// </summary>
        public virtual NdbUidType NdbUidSpn {
            get {
                XElement x = this.GetElement(NdbUidSpnXName);
                return ((NdbUidType)(x));
            }
            set {
                this.SetElement(NdbUidSpnXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Significant point is at Distance measuring equipment [DME]
        /// </para>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((TcnUidSpn | VorUidSpn | DpnUidSpn | NdbUidSpn | DmeUidSpn | MkrUidSpn), AseUid)
        /// </para>
        /// </summary>
        public virtual DmeUidType DmeUidSpn {
            get {
                XElement x = this.GetElement(DmeUidSpnXName);
                return ((DmeUidType)(x));
            }
            set {
                this.SetElement(DmeUidSpnXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Significant point is at Marker [MKR]
        /// </para>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((TcnUidSpn | VorUidSpn | DpnUidSpn | NdbUidSpn | DmeUidSpn | MkrUidSpn), AseUid)
        /// </para>
        /// </summary>
        public virtual MkrUidType MkrUidSpn {
            get {
                XElement x = this.GetElement(MkrUidSpnXName);
                return ((MkrUidType)(x));
            }
            set {
                this.SetElement(MkrUidSpnXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Significant point in airspace is situated within Airspace
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: ((TcnUidSpn | VorUidSpn | DpnUidSpn | NdbUidSpn | DmeUidSpn | MkrUidSpn), AseUid)
        /// </para>
        /// </summary>
        public virtual AirspaceUidType AseUid {
            get {
                XElement x = this.GetElement(AseUidXName);
                return ((AirspaceUidType)(x));
            }
            set {
                this.SetElement(AseUidXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string mid {
            get {
                XAttribute x = this.Attribute(midXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(midXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<SignificantPointAirspaceUidType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(TcnUidSpnXName, typeof(TacanUidType));
            localElementDictionary.Add(VorUidSpnXName, typeof(VorUidType));
            localElementDictionary.Add(DpnUidSpnXName, typeof(DesignatedPointUidType));
            localElementDictionary.Add(NdbUidSpnXName, typeof(NdbUidType));
            localElementDictionary.Add(DmeUidSpnXName, typeof(DmeUidType));
            localElementDictionary.Add(MkrUidSpnXName, typeof(MkrUidType));
            localElementDictionary.Add(AseUidXName, typeof(AirspaceUidType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Special date
    /// </para>
    /// <para>
    /// Regular expression: (SpdUid, txtName?, txtRmk?)
    /// </para>
    /// </summary>
    public partial class SpecialDateType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName SpdUidXName = System.Xml.Linq.XName.Get("SpdUid", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName txtNameXName = System.Xml.Linq.XName.Get("txtName", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName txtRmkXName = System.Xml.Linq.XName.Get("txtRmk", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName sourceXName = System.Xml.Linq.XName.Get("source", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("SpecialDateType", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator SpecialDateType(XElement xe) { return XTypedServices.ToXTypedElement<SpecialDateType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static SpecialDateType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(SpdUidXName), new NamedContentModelEntity(txtNameXName), new NamedContentModelEntity(txtRmkXName));
        }
        
        /// <summary>
        /// <para>
        /// Special date
        /// </para>
        /// <para>
        /// Regular expression: (SpdUid, txtName?, txtRmk?)
        /// </para>
        /// </summary>
        public SpecialDateType() {
        }
        
        /// <summary>
        /// <para>
        /// a version of Special dates
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (SpdUid, txtName?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual SpecialDateUidType SpdUid {
            get {
                XElement x = this.GetElement(SpdUidXName);
                return ((SpecialDateUidType)(x));
            }
            set {
                this.SetElement(SpdUidXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Name
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (SpdUid, txtName?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual txtName txtName {
            get {
                XElement x = this.GetElement(txtNameXName);
                return ((txtName)(x));
            }
            set {
                this.SetElement(txtNameXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Remark
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (SpdUid, txtName?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual txtRmk txtRmk {
            get {
                XElement x = this.GetElement(txtRmkXName);
                return ((txtRmk)(x));
            }
            set {
                this.SetElement(txtRmkXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string source {
            get {
                XAttribute x = this.Attribute(sourceXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(sourceXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<SpecialDateType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(SpdUidXName, typeof(SpecialDateUidType));
            localElementDictionary.Add(txtNameXName, typeof(txtName));
            localElementDictionary.Add(txtRmkXName, typeof(txtRmk));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Special dates - UID
    /// </para>
    /// <para>
    /// Regular expression: (OrgUid, codeType, dateDay, dateYear?)
    /// </para>
    /// </summary>
    public partial class SpecialDateUidType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName OrgUidXName = System.Xml.Linq.XName.Get("OrgUid", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName codeTypeXName = System.Xml.Linq.XName.Get("codeType", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName dateDayXName = System.Xml.Linq.XName.Get("dateDay", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName dateYearXName = System.Xml.Linq.XName.Get("dateYear", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName midXName = System.Xml.Linq.XName.Get("mid", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("SpecialDateUidType", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator SpecialDateUidType(XElement xe) { return XTypedServices.ToXTypedElement<SpecialDateUidType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static SpecialDateUidType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(OrgUidXName), new NamedContentModelEntity(codeTypeXName), new NamedContentModelEntity(dateDayXName), new NamedContentModelEntity(dateYearXName));
        }
        
        /// <summary>
        /// <para>
        /// Special dates - UID
        /// </para>
        /// <para>
        /// Regular expression: (OrgUid, codeType, dateDay, dateYear?)
        /// </para>
        /// </summary>
        public SpecialDateUidType() {
        }
        
        /// <summary>
        /// <para>
        /// Special dates is associated with Organisaton or authority
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (OrgUid, codeType, dateDay, dateYear?)
        /// </para>
        /// </summary>
        public virtual OrganisationAuthorityUidType OrgUid {
            get {
                XElement x = this.GetElement(OrgUidXName);
                return ((OrganisationAuthorityUidType)(x));
            }
            set {
                this.SetElement(OrgUidXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Type
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (OrgUid, codeType, dateDay, dateYear?)
        /// </para>
        /// </summary>
        public virtual codeSpecialDate codeType {
            get {
                XElement x = this.GetElement(codeTypeXName);
                return ((codeSpecialDate)(x));
            }
            set {
                this.SetElement(codeTypeXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Date
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (OrgUid, codeType, dateDay, dateYear?)
        /// </para>
        /// </summary>
        public virtual dateMonthDay dateDay {
            get {
                XElement x = this.GetElement(dateDayXName);
                return ((dateMonthDay)(x));
            }
            set {
                this.SetElement(dateDayXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Year
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (OrgUid, codeType, dateDay, dateYear?)
        /// </para>
        /// </summary>
        public virtual dateYear dateYear {
            get {
                XElement x = this.GetElement(dateYearXName);
                return ((dateYear)(x));
            }
            set {
                this.SetElement(dateYearXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string mid {
            get {
                XAttribute x = this.Attribute(midXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(midXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<SpecialDateUidType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(OrgUidXName, typeof(OrganisationAuthorityUidType));
            localElementDictionary.Add(codeTypeXName, typeof(codeSpecialDate));
            localElementDictionary.Add(dateDayXName, typeof(dateMonthDay));
            localElementDictionary.Add(dateYearXName, typeof(dateYear));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Special navigation system station
    /// </para>
    /// <para>
    /// Regular expression: (SnsUid, OrgUid, codeTypeSer, valFreq?, uomFreq?, codeEm?, geoLat, geoLong, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, valElev?, valElevAccuracy?, valGeoidUndulation?, uomDistVer?, valCrc?, txtVerDatum?, Snt?, txtRmk?)
    /// </para>
    /// </summary>
    public partial class SpecialNavigationSystemStationType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName SnsUidXName = System.Xml.Linq.XName.Get("SnsUid", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName OrgUidXName = System.Xml.Linq.XName.Get("OrgUid", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName codeTypeSerXName = System.Xml.Linq.XName.Get("codeTypeSer", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName valFreqXName = System.Xml.Linq.XName.Get("valFreq", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName uomFreqXName = System.Xml.Linq.XName.Get("uomFreq", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName codeEmXName = System.Xml.Linq.XName.Get("codeEm", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName geoLatXName = System.Xml.Linq.XName.Get("geoLat", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName geoLongXName = System.Xml.Linq.XName.Get("geoLong", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName codeDatumXName = System.Xml.Linq.XName.Get("codeDatum", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName valGeoAccuracyXName = System.Xml.Linq.XName.Get("valGeoAccuracy", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName uomGeoAccuracyXName = System.Xml.Linq.XName.Get("uomGeoAccuracy", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName valElevXName = System.Xml.Linq.XName.Get("valElev", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName valElevAccuracyXName = System.Xml.Linq.XName.Get("valElevAccuracy", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName valGeoidUndulationXName = System.Xml.Linq.XName.Get("valGeoidUndulation", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName uomDistVerXName = System.Xml.Linq.XName.Get("uomDistVer", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName valCrcXName = System.Xml.Linq.XName.Get("valCrc", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName txtVerDatumXName = System.Xml.Linq.XName.Get("txtVerDatum", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName SntXName = System.Xml.Linq.XName.Get("Snt", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName txtRmkXName = System.Xml.Linq.XName.Get("txtRmk", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName sourceXName = System.Xml.Linq.XName.Get("source", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("SpecialNavigationSystemStationType", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator SpecialNavigationSystemStationType(XElement xe) { return XTypedServices.ToXTypedElement<SpecialNavigationSystemStationType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static SpecialNavigationSystemStationType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(SnsUidXName), new NamedContentModelEntity(OrgUidXName), new NamedContentModelEntity(codeTypeSerXName), new NamedContentModelEntity(valFreqXName), new NamedContentModelEntity(uomFreqXName), new NamedContentModelEntity(codeEmXName), new NamedContentModelEntity(geoLatXName), new NamedContentModelEntity(geoLongXName), new NamedContentModelEntity(codeDatumXName), new NamedContentModelEntity(valGeoAccuracyXName), new NamedContentModelEntity(uomGeoAccuracyXName), new NamedContentModelEntity(valElevXName), new NamedContentModelEntity(valElevAccuracyXName), new NamedContentModelEntity(valGeoidUndulationXName), new NamedContentModelEntity(uomDistVerXName), new NamedContentModelEntity(valCrcXName), new NamedContentModelEntity(txtVerDatumXName), new NamedContentModelEntity(SntXName), new NamedContentModelEntity(txtRmkXName));
        }
        
        /// <summary>
        /// <para>
        /// Special navigation system station
        /// </para>
        /// <para>
        /// Regular expression: (SnsUid, OrgUid, codeTypeSer, valFreq?, uomFreq?, codeEm?, geoLat, geoLong, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, valElev?, valElevAccuracy?, valGeoidUndulation?, uomDistVer?, valCrc?, txtVerDatum?, Snt?, txtRmk?)
        /// </para>
        /// </summary>
        public SpecialNavigationSystemStationType() {
        }
        
        /// <summary>
        /// <para>
        /// a version of Special navigation system station
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (SnsUid, OrgUid, codeTypeSer, valFreq?, uomFreq?, codeEm?, geoLat, geoLong, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, valElev?, valElevAccuracy?, valGeoidUndulation?, uomDistVer?, valCrc?, txtVerDatum?, Snt?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual SpecialNavigationSystemStationUidType SnsUid {
            get {
                XElement x = this.GetElement(SnsUidXName);
                return ((SpecialNavigationSystemStationUidType)(x));
            }
            set {
                this.SetElement(SnsUidXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Special navigation system station is under responsibility of Organisaton or authority
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (SnsUid, OrgUid, codeTypeSer, valFreq?, uomFreq?, codeEm?, geoLat, geoLong, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, valElev?, valElevAccuracy?, valGeoidUndulation?, uomDistVer?, valCrc?, txtVerDatum?, Snt?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual OrganisationAuthorityUidType OrgUid {
            get {
                XElement x = this.GetElement(OrgUidXName);
                return ((OrganisationAuthorityUidType)(x));
            }
            set {
                this.SetElement(OrgUidXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Type of service
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (SnsUid, OrgUid, codeTypeSer, valFreq?, uomFreq?, codeEm?, geoLat, geoLong, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, valElev?, valElevAccuracy?, valGeoidUndulation?, uomDistVer?, valCrc?, txtVerDatum?, Snt?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual codeTypeSerSpecNav codeTypeSer {
            get {
                XElement x = this.GetElement(codeTypeSerXName);
                return ((codeTypeSerSpecNav)(x));
            }
            set {
                this.SetElement(codeTypeSerXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Frequency
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (SnsUid, OrgUid, codeTypeSer, valFreq?, uomFreq?, codeEm?, geoLat, geoLong, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, valElev?, valElevAccuracy?, valGeoidUndulation?, uomDistVer?, valCrc?, txtVerDatum?, Snt?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual valFreq valFreq {
            get {
                XElement x = this.GetElement(valFreqXName);
                return ((valFreq)(x));
            }
            set {
                this.SetElement(valFreqXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Unit of measurement [frequency]
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (SnsUid, OrgUid, codeTypeSer, valFreq?, uomFreq?, codeEm?, geoLat, geoLong, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, valElev?, valElevAccuracy?, valGeoidUndulation?, uomDistVer?, valCrc?, txtVerDatum?, Snt?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual uomFreq uomFreq {
            get {
                XElement x = this.GetElement(uomFreqXName);
                return ((uomFreq)(x));
            }
            set {
                this.SetElement(uomFreqXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Emission
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (SnsUid, OrgUid, codeTypeSer, valFreq?, uomFreq?, codeEm?, geoLat, geoLong, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, valElev?, valElevAccuracy?, valGeoidUndulation?, uomDistVer?, valCrc?, txtVerDatum?, Snt?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual codeEmRdo codeEm {
            get {
                XElement x = this.GetElement(codeEmXName);
                return ((codeEmRdo)(x));
            }
            set {
                this.SetElement(codeEmXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Latitude
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (SnsUid, OrgUid, codeTypeSer, valFreq?, uomFreq?, codeEm?, geoLat, geoLong, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, valElev?, valElevAccuracy?, valGeoidUndulation?, uomDistVer?, valCrc?, txtVerDatum?, Snt?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual geoLat geoLat {
            get {
                XElement x = this.GetElement(geoLatXName);
                return ((geoLat)(x));
            }
            set {
                this.SetElement(geoLatXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Longitude
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (SnsUid, OrgUid, codeTypeSer, valFreq?, uomFreq?, codeEm?, geoLat, geoLong, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, valElev?, valElevAccuracy?, valGeoidUndulation?, uomDistVer?, valCrc?, txtVerDatum?, Snt?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual geoLong geoLong {
            get {
                XElement x = this.GetElement(geoLongXName);
                return ((geoLong)(x));
            }
            set {
                this.SetElement(geoLongXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Datum
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (SnsUid, OrgUid, codeTypeSer, valFreq?, uomFreq?, codeEm?, geoLat, geoLong, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, valElev?, valElevAccuracy?, valGeoidUndulation?, uomDistVer?, valCrc?, txtVerDatum?, Snt?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual codeDatum codeDatum {
            get {
                XElement x = this.GetElement(codeDatumXName);
                return ((codeDatum)(x));
            }
            set {
                this.SetElement(codeDatumXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Geographical accuracy
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (SnsUid, OrgUid, codeTypeSer, valFreq?, uomFreq?, codeEm?, geoLat, geoLong, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, valElev?, valElevAccuracy?, valGeoidUndulation?, uomDistVer?, valCrc?, txtVerDatum?, Snt?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual valDistHorz valGeoAccuracy {
            get {
                XElement x = this.GetElement(valGeoAccuracyXName);
                return ((valDistHorz)(x));
            }
            set {
                this.SetElement(valGeoAccuracyXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Unit of measurement [geographical accuracy]
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (SnsUid, OrgUid, codeTypeSer, valFreq?, uomFreq?, codeEm?, geoLat, geoLong, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, valElev?, valElevAccuracy?, valGeoidUndulation?, uomDistVer?, valCrc?, txtVerDatum?, Snt?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual uomDistHorz uomGeoAccuracy {
            get {
                XElement x = this.GetElement(uomGeoAccuracyXName);
                return ((uomDistHorz)(x));
            }
            set {
                this.SetElement(uomGeoAccuracyXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Elevation
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (SnsUid, OrgUid, codeTypeSer, valFreq?, uomFreq?, codeEm?, geoLat, geoLong, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, valElev?, valElevAccuracy?, valGeoidUndulation?, uomDistVer?, valCrc?, txtVerDatum?, Snt?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual valDistVer valElev {
            get {
                XElement x = this.GetElement(valElevXName);
                return ((valDistVer)(x));
            }
            set {
                this.SetElement(valElevXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Elevation accuracy
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (SnsUid, OrgUid, codeTypeSer, valFreq?, uomFreq?, codeEm?, geoLat, geoLong, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, valElev?, valElevAccuracy?, valGeoidUndulation?, uomDistVer?, valCrc?, txtVerDatum?, Snt?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual valDistVer valElevAccuracy {
            get {
                XElement x = this.GetElement(valElevAccuracyXName);
                return ((valDistVer)(x));
            }
            set {
                this.SetElement(valElevAccuracyXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Geoid undulation
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (SnsUid, OrgUid, codeTypeSer, valFreq?, uomFreq?, codeEm?, geoLat, geoLong, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, valElev?, valElevAccuracy?, valGeoidUndulation?, uomDistVer?, valCrc?, txtVerDatum?, Snt?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual valDistVer valGeoidUndulation {
            get {
                XElement x = this.GetElement(valGeoidUndulationXName);
                return ((valDistVer)(x));
            }
            set {
                this.SetElement(valGeoidUndulationXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Unit of measurement [vertical distance]
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (SnsUid, OrgUid, codeTypeSer, valFreq?, uomFreq?, codeEm?, geoLat, geoLong, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, valElev?, valElevAccuracy?, valGeoidUndulation?, uomDistVer?, valCrc?, txtVerDatum?, Snt?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual uomElev uomDistVer {
            get {
                XElement x = this.GetElement(uomDistVerXName);
                return ((uomElev)(x));
            }
            set {
                this.SetElement(uomDistVerXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Cyclic redundancy check
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (SnsUid, OrgUid, codeTypeSer, valFreq?, uomFreq?, codeEm?, geoLat, geoLong, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, valElev?, valElevAccuracy?, valGeoidUndulation?, uomDistVer?, valCrc?, txtVerDatum?, Snt?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual valHex valCrc {
            get {
                XElement x = this.GetElement(valCrcXName);
                return ((valHex)(x));
            }
            set {
                this.SetElement(valCrcXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Vertical Datum
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (SnsUid, OrgUid, codeTypeSer, valFreq?, uomFreq?, codeEm?, geoLat, geoLong, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, valElev?, valElevAccuracy?, valGeoidUndulation?, uomDistVer?, valCrc?, txtVerDatum?, Snt?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual txtDescr txtVerDatum {
            get {
                XElement x = this.GetElement(txtVerDatumXName);
                return ((txtDescr)(x));
            }
            set {
                this.SetElement(txtVerDatumXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Special navigation system station is operating according to Special navigation system station - Timetable
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (SnsUid, OrgUid, codeTypeSer, valFreq?, uomFreq?, codeEm?, geoLat, geoLong, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, valElev?, valElevAccuracy?, valGeoidUndulation?, uomDistVer?, valCrc?, txtVerDatum?, Snt?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual TimetableType Snt {
            get {
                XElement x = this.GetElement(SntXName);
                return ((TimetableType)(x));
            }
            set {
                this.SetElement(SntXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Remark
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (SnsUid, OrgUid, codeTypeSer, valFreq?, uomFreq?, codeEm?, geoLat, geoLong, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, valElev?, valElevAccuracy?, valGeoidUndulation?, uomDistVer?, valCrc?, txtVerDatum?, Snt?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual txtRmk txtRmk {
            get {
                XElement x = this.GetElement(txtRmkXName);
                return ((txtRmk)(x));
            }
            set {
                this.SetElement(txtRmkXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string source {
            get {
                XAttribute x = this.Attribute(sourceXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(sourceXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<SpecialNavigationSystemStationType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(SnsUidXName, typeof(SpecialNavigationSystemStationUidType));
            localElementDictionary.Add(OrgUidXName, typeof(OrganisationAuthorityUidType));
            localElementDictionary.Add(codeTypeSerXName, typeof(codeTypeSerSpecNav));
            localElementDictionary.Add(valFreqXName, typeof(valFreq));
            localElementDictionary.Add(uomFreqXName, typeof(uomFreq));
            localElementDictionary.Add(codeEmXName, typeof(codeEmRdo));
            localElementDictionary.Add(geoLatXName, typeof(geoLat));
            localElementDictionary.Add(geoLongXName, typeof(geoLong));
            localElementDictionary.Add(codeDatumXName, typeof(codeDatum));
            localElementDictionary.Add(valGeoAccuracyXName, typeof(valDistHorz));
            localElementDictionary.Add(uomGeoAccuracyXName, typeof(uomDistHorz));
            localElementDictionary.Add(valElevXName, typeof(valDistVer));
            localElementDictionary.Add(valElevAccuracyXName, typeof(valDistVer));
            localElementDictionary.Add(valGeoidUndulationXName, typeof(valDistVer));
            localElementDictionary.Add(uomDistVerXName, typeof(uomElev));
            localElementDictionary.Add(valCrcXName, typeof(valHex));
            localElementDictionary.Add(txtVerDatumXName, typeof(txtDescr));
            localElementDictionary.Add(SntXName, typeof(TimetableType));
            localElementDictionary.Add(txtRmkXName, typeof(txtRmk));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Special navigation system station - UID
    /// </para>
    /// <para>
    /// Regular expression: (SnyUid, txtName)
    /// </para>
    /// </summary>
    public partial class SpecialNavigationSystemStationUidType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName SnyUidXName = System.Xml.Linq.XName.Get("SnyUid", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName txtNameXName = System.Xml.Linq.XName.Get("txtName", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName midXName = System.Xml.Linq.XName.Get("mid", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("SpecialNavigationSystemStationUidType", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator SpecialNavigationSystemStationUidType(XElement xe) { return XTypedServices.ToXTypedElement<SpecialNavigationSystemStationUidType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static SpecialNavigationSystemStationUidType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(SnyUidXName), new NamedContentModelEntity(txtNameXName));
        }
        
        /// <summary>
        /// <para>
        /// Special navigation system station - UID
        /// </para>
        /// <para>
        /// Regular expression: (SnyUid, txtName)
        /// </para>
        /// </summary>
        public SpecialNavigationSystemStationUidType() {
        }
        
        /// <summary>
        /// <para>
        /// Special navigation system station is part of Special navigation system
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (SnyUid, txtName)
        /// </para>
        /// </summary>
        public virtual SpecialNavigationSystemUidType SnyUid {
            get {
                XElement x = this.GetElement(SnyUidXName);
                return ((SpecialNavigationSystemUidType)(x));
            }
            set {
                this.SetElement(SnyUidXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Name
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (SnyUid, txtName)
        /// </para>
        /// </summary>
        public virtual txtName txtName {
            get {
                XElement x = this.GetElement(txtNameXName);
                return ((txtName)(x));
            }
            set {
                this.SetElement(txtNameXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string mid {
            get {
                XAttribute x = this.Attribute(midXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(midXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<SpecialNavigationSystemStationUidType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(SnyUidXName, typeof(SpecialNavigationSystemUidType));
            localElementDictionary.Add(txtNameXName, typeof(txtName));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Special navigation system
    /// </para>
    /// <para>
    /// Regular expression: (SnyUid, OrgUid, txtName, txtRmk?)
    /// </para>
    /// </summary>
    public partial class SpecialNavigationSystemType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName SnyUidXName = System.Xml.Linq.XName.Get("SnyUid", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName OrgUidXName = System.Xml.Linq.XName.Get("OrgUid", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName txtNameXName = System.Xml.Linq.XName.Get("txtName", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName txtRmkXName = System.Xml.Linq.XName.Get("txtRmk", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName sourceXName = System.Xml.Linq.XName.Get("source", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("SpecialNavigationSystemType", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator SpecialNavigationSystemType(XElement xe) { return XTypedServices.ToXTypedElement<SpecialNavigationSystemType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static SpecialNavigationSystemType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(SnyUidXName), new NamedContentModelEntity(OrgUidXName), new NamedContentModelEntity(txtNameXName), new NamedContentModelEntity(txtRmkXName));
        }
        
        /// <summary>
        /// <para>
        /// Special navigation system
        /// </para>
        /// <para>
        /// Regular expression: (SnyUid, OrgUid, txtName, txtRmk?)
        /// </para>
        /// </summary>
        public SpecialNavigationSystemType() {
        }
        
        /// <summary>
        /// <para>
        /// a version of Special navigation system
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (SnyUid, OrgUid, txtName, txtRmk?)
        /// </para>
        /// </summary>
        public virtual SpecialNavigationSystemUidType SnyUid {
            get {
                XElement x = this.GetElement(SnyUidXName);
                return ((SpecialNavigationSystemUidType)(x));
            }
            set {
                this.SetElement(SnyUidXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Special navigation system is under the responsibility of Organisaton or authority
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (SnyUid, OrgUid, txtName, txtRmk?)
        /// </para>
        /// </summary>
        public virtual OrganisationAuthorityUidType OrgUid {
            get {
                XElement x = this.GetElement(OrgUidXName);
                return ((OrganisationAuthorityUidType)(x));
            }
            set {
                this.SetElement(OrgUidXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Name
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (SnyUid, OrgUid, txtName, txtRmk?)
        /// </para>
        /// </summary>
        public virtual txtName txtName {
            get {
                XElement x = this.GetElement(txtNameXName);
                return ((txtName)(x));
            }
            set {
                this.SetElement(txtNameXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Remark
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (SnyUid, OrgUid, txtName, txtRmk?)
        /// </para>
        /// </summary>
        public virtual txtRmk txtRmk {
            get {
                XElement x = this.GetElement(txtRmkXName);
                return ((txtRmk)(x));
            }
            set {
                this.SetElement(txtRmkXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string source {
            get {
                XAttribute x = this.Attribute(sourceXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(sourceXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<SpecialNavigationSystemType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(SnyUidXName, typeof(SpecialNavigationSystemUidType));
            localElementDictionary.Add(OrgUidXName, typeof(OrganisationAuthorityUidType));
            localElementDictionary.Add(txtNameXName, typeof(txtName));
            localElementDictionary.Add(txtRmkXName, typeof(txtRmk));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Special navigation system - UID
    /// </para>
    /// <para>
    /// Regular expression: (codeType, codeId)
    /// </para>
    /// </summary>
    public partial class SpecialNavigationSystemUidType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName codeTypeXName = System.Xml.Linq.XName.Get("codeType", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName codeIdXName = System.Xml.Linq.XName.Get("codeId", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName midXName = System.Xml.Linq.XName.Get("mid", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("SpecialNavigationSystemUidType", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator SpecialNavigationSystemUidType(XElement xe) { return XTypedServices.ToXTypedElement<SpecialNavigationSystemUidType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static SpecialNavigationSystemUidType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(codeTypeXName), new NamedContentModelEntity(codeIdXName));
        }
        
        /// <summary>
        /// <para>
        /// Special navigation system - UID
        /// </para>
        /// <para>
        /// Regular expression: (codeType, codeId)
        /// </para>
        /// </summary>
        public SpecialNavigationSystemUidType() {
        }
        
        /// <summary>
        /// <para>
        /// Type
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (codeType, codeId)
        /// </para>
        /// </summary>
        public virtual codeTypeSpecNavSys codeType {
            get {
                XElement x = this.GetElement(codeTypeXName);
                return ((codeTypeSpecNavSys)(x));
            }
            set {
                this.SetElement(codeTypeXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Identification
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (codeType, codeId)
        /// </para>
        /// </summary>
        public virtual codeIdChainSpecNav codeId {
            get {
                XElement x = this.GetElement(codeIdXName);
                return ((codeIdChainSpecNav)(x));
            }
            set {
                this.SetElement(codeIdXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string mid {
            get {
                XAttribute x = this.Attribute(midXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(midXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<SpecialNavigationSystemUidType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(codeTypeXName, typeof(codeTypeSpecNavSys));
            localElementDictionary.Add(codeIdXName, typeof(codeIdChainSpecNav));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Specified cruising level
    /// </para>
    /// <para>
    /// Regular expression: (valDistVer)
    /// </para>
    /// </summary>
    public partial class SpecifiedCruisingLevelType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName valDistVerXName = System.Xml.Linq.XName.Get("valDistVer", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("SpecifiedCruisingLevelType", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator SpecifiedCruisingLevelType(XElement xe) { return XTypedServices.ToXTypedElement<SpecifiedCruisingLevelType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static SpecifiedCruisingLevelType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(valDistVerXName));
        }
        
        /// <summary>
        /// <para>
        /// Specified cruising level
        /// </para>
        /// <para>
        /// Regular expression: (valDistVer)
        /// </para>
        /// </summary>
        public SpecifiedCruisingLevelType() {
        }
        
        /// <summary>
        /// <para>
        /// Minimum sector altitude
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (valDistVer)
        /// </para>
        /// </summary>
        public virtual valDistVer valDistVer {
            get {
                XElement x = this.GetElement(valDistVerXName);
                return ((valDistVer)(x));
            }
            set {
                this.SetElement(valDistVerXName, value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<SpecifiedCruisingLevelType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(valDistVerXName, typeof(valDistVer));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Service on STAR
    /// </para>
    /// <para>
    /// Regular expression: (SsrUid, txtRmk?)
    /// </para>
    /// </summary>
    public partial class StarServiceType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName SsrUidXName = System.Xml.Linq.XName.Get("SsrUid", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName txtRmkXName = System.Xml.Linq.XName.Get("txtRmk", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName sourceXName = System.Xml.Linq.XName.Get("source", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("StarServiceType", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator StarServiceType(XElement xe) { return XTypedServices.ToXTypedElement<StarServiceType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static StarServiceType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(SsrUidXName), new NamedContentModelEntity(txtRmkXName));
        }
        
        /// <summary>
        /// <para>
        /// Service on STAR
        /// </para>
        /// <para>
        /// Regular expression: (SsrUid, txtRmk?)
        /// </para>
        /// </summary>
        public StarServiceType() {
        }
        
        /// <summary>
        /// <para>
        /// a version of Service on STAR
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (SsrUid, txtRmk?)
        /// </para>
        /// </summary>
        public virtual StarServiceUidType SsrUid {
            get {
                XElement x = this.GetElement(SsrUidXName);
                return ((StarServiceUidType)(x));
            }
            set {
                this.SetElement(SsrUidXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Remark
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (SsrUid, txtRmk?)
        /// </para>
        /// </summary>
        public virtual txtRmk txtRmk {
            get {
                XElement x = this.GetElement(txtRmkXName);
                return ((txtRmk)(x));
            }
            set {
                this.SetElement(txtRmkXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string source {
            get {
                XAttribute x = this.Attribute(sourceXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(sourceXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<StarServiceType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(SsrUidXName, typeof(StarServiceUidType));
            localElementDictionary.Add(txtRmkXName, typeof(txtRmk));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Service on STAR - UID
    /// </para>
    /// <para>
    /// Regular expression: (SiaUid, SerUid)
    /// </para>
    /// </summary>
    public partial class StarServiceUidType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName SiaUidXName = System.Xml.Linq.XName.Get("SiaUid", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName SerUidXName = System.Xml.Linq.XName.Get("SerUid", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName midXName = System.Xml.Linq.XName.Get("mid", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("StarServiceUidType", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator StarServiceUidType(XElement xe) { return XTypedServices.ToXTypedElement<StarServiceUidType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static StarServiceUidType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(SiaUidXName), new NamedContentModelEntity(SerUidXName));
        }
        
        /// <summary>
        /// <para>
        /// Service on STAR - UID
        /// </para>
        /// <para>
        /// Regular expression: (SiaUid, SerUid)
        /// </para>
        /// </summary>
        public StarServiceUidType() {
        }
        
        /// <summary>
        /// <para>
        /// Service on STAR is furnished on Standard instrument arrival [STAR]
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (SiaUid, SerUid)
        /// </para>
        /// </summary>
        public virtual StarUidType SiaUid {
            get {
                XElement x = this.GetElement(SiaUidXName);
                return ((StarUidType)(x));
            }
            set {
                this.SetElement(SiaUidXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Service on STAR is also Service
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (SiaUid, SerUid)
        /// </para>
        /// </summary>
        public virtual ServiceUidType SerUid {
            get {
                XElement x = this.GetElement(SerUidXName);
                return ((ServiceUidType)(x));
            }
            set {
                this.SetElement(SerUidXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string mid {
            get {
                XAttribute x = this.Attribute(midXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(midXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<StarServiceUidType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(SiaUidXName, typeof(StarUidType));
            localElementDictionary.Add(SerUidXName, typeof(ServiceUidType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// STAR
    /// </para>
    /// <para>
    /// Regular expression: (SiaUid, MgpUid?, codeRnp?, txtDescrComFail?, codeTypeRte, txtDescr?, txtRmk?, Plg*)
    /// </para>
    /// </summary>
    public partial class StarType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName SiaUidXName = System.Xml.Linq.XName.Get("SiaUid", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName MgpUidXName = System.Xml.Linq.XName.Get("MgpUid", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName codeRnpXName = System.Xml.Linq.XName.Get("codeRnp", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName txtDescrComFailXName = System.Xml.Linq.XName.Get("txtDescrComFail", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName codeTypeRteXName = System.Xml.Linq.XName.Get("codeTypeRte", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName txtDescrXName = System.Xml.Linq.XName.Get("txtDescr", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName txtRmkXName = System.Xml.Linq.XName.Get("txtRmk", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName PlgXName = System.Xml.Linq.XName.Get("Plg", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ProcedureLegType> PlgField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName sourceXName = System.Xml.Linq.XName.Get("source", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("StarType", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator StarType(XElement xe) { return XTypedServices.ToXTypedElement<StarType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static StarType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(SiaUidXName), new NamedContentModelEntity(MgpUidXName), new NamedContentModelEntity(codeRnpXName), new NamedContentModelEntity(txtDescrComFailXName), new NamedContentModelEntity(codeTypeRteXName), new NamedContentModelEntity(txtDescrXName), new NamedContentModelEntity(txtRmkXName), new NamedContentModelEntity(PlgXName));
        }
        
        /// <summary>
        /// <para>
        /// STAR
        /// </para>
        /// <para>
        /// Regular expression: (SiaUid, MgpUid?, codeRnp?, txtDescrComFail?, codeTypeRte, txtDescr?, txtRmk?, Plg*)
        /// </para>
        /// </summary>
        public StarType() {
        }
        
        /// <summary>
        /// <para>
        /// a version of Standard instrument arrival [STAR]
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (SiaUid, MgpUid?, codeRnp?, txtDescrComFail?, codeTypeRte, txtDescr?, txtRmk?, Plg*)
        /// </para>
        /// </summary>
        public virtual StarUidType SiaUid {
            get {
                XElement x = this.GetElement(SiaUidXName);
                return ((StarUidType)(x));
            }
            set {
                this.SetElement(SiaUidXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// STAR is associated with MSA group
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (SiaUid, MgpUid?, codeRnp?, txtDescrComFail?, codeTypeRte, txtDescr?, txtRmk?, Plg*)
        /// </para>
        /// </summary>
        public virtual MsaGroupUidType MgpUid {
            get {
                XElement x = this.GetElement(MgpUidXName);
                return ((MsaGroupUidType)(x));
            }
            set {
                this.SetElement(MgpUidXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Required navigation performance
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (SiaUid, MgpUid?, codeRnp?, txtDescrComFail?, codeTypeRte, txtDescr?, txtRmk?, Plg*)
        /// </para>
        /// </summary>
        public virtual codeRnp codeRnp {
            get {
                XElement x = this.GetElement(codeRnpXName);
                return ((codeRnp)(x));
            }
            set {
                this.SetElement(codeRnpXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Communication failure description
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (SiaUid, MgpUid?, codeRnp?, txtDescrComFail?, codeTypeRte, txtDescr?, txtRmk?, Plg*)
        /// </para>
        /// </summary>
        public virtual txtDescr txtDescrComFail {
            get {
                XElement x = this.GetElement(txtDescrComFailXName);
                return ((txtDescr)(x));
            }
            set {
                this.SetElement(txtDescrComFailXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Type
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (SiaUid, MgpUid?, codeRnp?, txtDescrComFail?, codeTypeRte, txtDescr?, txtRmk?, Plg*)
        /// </para>
        /// </summary>
        public virtual codeTypeStar codeTypeRte {
            get {
                XElement x = this.GetElement(codeTypeRteXName);
                return ((codeTypeStar)(x));
            }
            set {
                this.SetElement(codeTypeRteXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Description
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (SiaUid, MgpUid?, codeRnp?, txtDescrComFail?, codeTypeRte, txtDescr?, txtRmk?, Plg*)
        /// </para>
        /// </summary>
        public virtual txtDescr txtDescr {
            get {
                XElement x = this.GetElement(txtDescrXName);
                return ((txtDescr)(x));
            }
            set {
                this.SetElement(txtDescrXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Remark
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (SiaUid, MgpUid?, codeRnp?, txtDescrComFail?, codeTypeRte, txtDescr?, txtRmk?, Plg*)
        /// </para>
        /// </summary>
        public virtual txtRmk txtRmk {
            get {
                XElement x = this.GetElement(txtRmkXName);
                return ((txtRmk)(x));
            }
            set {
                this.SetElement(txtRmkXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// STAR is composed of Procedure leg
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (SiaUid, MgpUid?, codeRnp?, txtDescrComFail?, codeTypeRte, txtDescr?, txtRmk?, Plg*)
        /// </para>
        /// </summary>
        public virtual IList<ProcedureLegType> Plg {
            get {
                if ((this.PlgField == null)) {
                    this.PlgField = new XTypedList<ProcedureLegType>(this, LinqToXsdTypeManager.Instance, PlgXName);
                }
                return this.PlgField;
            }
            set {
                if ((value == null)) {
                    this.PlgField = null;
                }
                else {
                    if ((this.PlgField == null)) {
                        this.PlgField = XTypedList<ProcedureLegType>.Initialize(this, LinqToXsdTypeManager.Instance, value, PlgXName);
                    }
                    else {
                        XTypedServices.SetList<ProcedureLegType>(this.PlgField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string source {
            get {
                XAttribute x = this.Attribute(sourceXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(sourceXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<StarType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(SiaUidXName, typeof(StarUidType));
            localElementDictionary.Add(MgpUidXName, typeof(MsaGroupUidType));
            localElementDictionary.Add(codeRnpXName, typeof(codeRnp));
            localElementDictionary.Add(txtDescrComFailXName, typeof(txtDescr));
            localElementDictionary.Add(codeTypeRteXName, typeof(codeTypeStar));
            localElementDictionary.Add(txtDescrXName, typeof(txtDescr));
            localElementDictionary.Add(txtRmkXName, typeof(txtRmk));
            localElementDictionary.Add(PlgXName, typeof(ProcedureLegType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Standard instrument arrival [STAR] - UID
    /// </para>
    /// <para>
    /// Regular expression: (AhpUid, txtDesig, codeCatAcft?, codeTransId?)
    /// </para>
    /// </summary>
    public partial class StarUidType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName AhpUidXName = System.Xml.Linq.XName.Get("AhpUid", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName txtDesigXName = System.Xml.Linq.XName.Get("txtDesig", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName codeCatAcftXName = System.Xml.Linq.XName.Get("codeCatAcft", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName codeTransIdXName = System.Xml.Linq.XName.Get("codeTransId", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName midXName = System.Xml.Linq.XName.Get("mid", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("StarUidType", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator StarUidType(XElement xe) { return XTypedServices.ToXTypedElement<StarUidType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static StarUidType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(AhpUidXName), new NamedContentModelEntity(txtDesigXName), new NamedContentModelEntity(codeCatAcftXName), new NamedContentModelEntity(codeTransIdXName));
        }
        
        /// <summary>
        /// <para>
        /// Standard instrument arrival [STAR] - UID
        /// </para>
        /// <para>
        /// Regular expression: (AhpUid, txtDesig, codeCatAcft?, codeTransId?)
        /// </para>
        /// </summary>
        public StarUidType() {
        }
        
        /// <summary>
        /// <para>
        /// Standard instrument arrival [STAR] is for Aerodrome / Heliport
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (AhpUid, txtDesig, codeCatAcft?, codeTransId?)
        /// </para>
        /// </summary>
        public virtual AerodromeHeliportUidType AhpUid {
            get {
                XElement x = this.GetElement(AhpUidXName);
                return ((AerodromeHeliportUidType)(x));
            }
            set {
                this.SetElement(AhpUidXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Designator
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (AhpUid, txtDesig, codeCatAcft?, codeTransId?)
        /// </para>
        /// </summary>
        public virtual txtDesigIap txtDesig {
            get {
                XElement x = this.GetElement(txtDesigXName);
                return ((txtDesigIap)(x));
            }
            set {
                this.SetElement(txtDesigXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Aircraft category
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (AhpUid, txtDesig, codeCatAcft?, codeTransId?)
        /// </para>
        /// </summary>
        public virtual codeCatAcft codeCatAcft {
            get {
                XElement x = this.GetElement(codeCatAcftXName);
                return ((codeCatAcft)(x));
            }
            set {
                this.SetElement(codeCatAcftXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Transition identifier
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (AhpUid, txtDesig, codeCatAcft?, codeTransId?)
        /// </para>
        /// </summary>
        public virtual codeIdDesigPt codeTransId {
            get {
                XElement x = this.GetElement(codeTransIdXName);
                return ((codeIdDesigPt)(x));
            }
            set {
                this.SetElement(codeTransIdXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string mid {
            get {
                XAttribute x = this.Attribute(midXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(midXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<StarUidType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(AhpUidXName, typeof(AerodromeHeliportUidType));
            localElementDictionary.Add(txtDesigXName, typeof(txtDesigIap));
            localElementDictionary.Add(codeCatAcftXName, typeof(codeCatAcft));
            localElementDictionary.Add(codeTransIdXName, typeof(codeIdDesigPt));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Usage of particular STAR
    /// </para>
    /// <para>
    /// Regular expression: (SseUid, Sst?, txtRmk?)
    /// </para>
    /// </summary>
    public partial class StarUsageType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName SseUidXName = System.Xml.Linq.XName.Get("SseUid", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName SstXName = System.Xml.Linq.XName.Get("Sst", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName txtRmkXName = System.Xml.Linq.XName.Get("txtRmk", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName sourceXName = System.Xml.Linq.XName.Get("source", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("StarUsageType", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator StarUsageType(XElement xe) { return XTypedServices.ToXTypedElement<StarUsageType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static StarUsageType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(SseUidXName), new NamedContentModelEntity(SstXName), new NamedContentModelEntity(txtRmkXName));
        }
        
        /// <summary>
        /// <para>
        /// Usage of particular STAR
        /// </para>
        /// <para>
        /// Regular expression: (SseUid, Sst?, txtRmk?)
        /// </para>
        /// </summary>
        public StarUsageType() {
        }
        
        /// <summary>
        /// <para>
        /// a version of Usage of particular STAR
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (SseUid, Sst?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual StarUsageUidType SseUid {
            get {
                XElement x = this.GetElement(SseUidXName);
                return ((StarUsageUidType)(x));
            }
            set {
                this.SetElement(SseUidXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Usage of particular STAR is operating according to Usage of particular STAR - Timetable
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (SseUid, Sst?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual TimetableType Sst {
            get {
                XElement x = this.GetElement(SstXName);
                return ((TimetableType)(x));
            }
            set {
                this.SetElement(SstXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Remark
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (SseUid, Sst?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual txtRmk txtRmk {
            get {
                XElement x = this.GetElement(txtRmkXName);
                return ((txtRmk)(x));
            }
            set {
                this.SetElement(txtRmkXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string source {
            get {
                XAttribute x = this.Attribute(sourceXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(sourceXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<StarUsageType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(SseUidXName, typeof(StarUsageUidType));
            localElementDictionary.Add(SstXName, typeof(TimetableType));
            localElementDictionary.Add(txtRmkXName, typeof(txtRmk));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Usage of particular STAR - UID
    /// </para>
    /// <para>
    /// Regular expression: (SiaUid, codeRteAvbl)
    /// </para>
    /// </summary>
    public partial class StarUsageUidType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName SiaUidXName = System.Xml.Linq.XName.Get("SiaUid", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName codeRteAvblXName = System.Xml.Linq.XName.Get("codeRteAvbl", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName midXName = System.Xml.Linq.XName.Get("mid", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("StarUsageUidType", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator StarUsageUidType(XElement xe) { return XTypedServices.ToXTypedElement<StarUsageUidType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static StarUsageUidType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(SiaUidXName), new NamedContentModelEntity(codeRteAvblXName));
        }
        
        /// <summary>
        /// <para>
        /// Usage of particular STAR - UID
        /// </para>
        /// <para>
        /// Regular expression: (SiaUid, codeRteAvbl)
        /// </para>
        /// </summary>
        public StarUsageUidType() {
        }
        
        /// <summary>
        /// <para>
        /// Usage of particular STAR is based on Standard instrument arrival [STAR]
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (SiaUid, codeRteAvbl)
        /// </para>
        /// </summary>
        public virtual StarUidType SiaUid {
            get {
                XElement x = this.GetElement(SiaUidXName);
                return ((StarUidType)(x));
            }
            set {
                this.SetElement(SiaUidXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Usage of the STAR procedure within the flexible use of airspace context
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (SiaUid, codeRteAvbl)
        /// </para>
        /// </summary>
        public virtual codeRteAvbl codeRteAvbl {
            get {
                XElement x = this.GetElement(codeRteAvblXName);
                return ((codeRteAvbl)(x));
            }
            set {
                this.SetElement(codeRteAvblXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string mid {
            get {
                XAttribute x = this.Attribute(midXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(midXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<StarUsageUidType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(SiaUidXName, typeof(StarUidType));
            localElementDictionary.Add(codeRteAvblXName, typeof(codeRteAvbl));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// SWY
    /// </para>
    /// <para>
    /// Regular expression: (SwyUid, valLen?, valWid?, uomDim?, codeComposition?, codePreparation?, codeCondSfc?, valPcnClass?, codePcnPavementType?, codePcnPavementSubgrade?, codePcnMaxTirePressure?, valPcnMaxTirePressure?, codePcnEvalMethod?, txtPcnNote?, valLcnClass?, valSiwlWeight?, uomSiwlWeight?, valSiwlTirePressure?, uomSiwlTirePressure?, valAuwWeight?, uomAuwWeight?, codeStrength?, txtDescrStrength?, codeSts?, txtProfile?, txtMarking?, txtRmk?)
    /// </para>
    /// </summary>
    public partial class StopwayType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName SwyUidXName = System.Xml.Linq.XName.Get("SwyUid", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName valLenXName = System.Xml.Linq.XName.Get("valLen", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName valWidXName = System.Xml.Linq.XName.Get("valWid", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName uomDimXName = System.Xml.Linq.XName.Get("uomDim", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName codeCompositionXName = System.Xml.Linq.XName.Get("codeComposition", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName codePreparationXName = System.Xml.Linq.XName.Get("codePreparation", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName codeCondSfcXName = System.Xml.Linq.XName.Get("codeCondSfc", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName valPcnClassXName = System.Xml.Linq.XName.Get("valPcnClass", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName codePcnPavementTypeXName = System.Xml.Linq.XName.Get("codePcnPavementType", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName codePcnPavementSubgradeXName = System.Xml.Linq.XName.Get("codePcnPavementSubgrade", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName codePcnMaxTirePressureXName = System.Xml.Linq.XName.Get("codePcnMaxTirePressure", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName valPcnMaxTirePressureXName = System.Xml.Linq.XName.Get("valPcnMaxTirePressure", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName codePcnEvalMethodXName = System.Xml.Linq.XName.Get("codePcnEvalMethod", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName txtPcnNoteXName = System.Xml.Linq.XName.Get("txtPcnNote", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName valLcnClassXName = System.Xml.Linq.XName.Get("valLcnClass", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName valSiwlWeightXName = System.Xml.Linq.XName.Get("valSiwlWeight", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName uomSiwlWeightXName = System.Xml.Linq.XName.Get("uomSiwlWeight", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName valSiwlTirePressureXName = System.Xml.Linq.XName.Get("valSiwlTirePressure", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName uomSiwlTirePressureXName = System.Xml.Linq.XName.Get("uomSiwlTirePressure", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName valAuwWeightXName = System.Xml.Linq.XName.Get("valAuwWeight", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName uomAuwWeightXName = System.Xml.Linq.XName.Get("uomAuwWeight", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName codeStrengthXName = System.Xml.Linq.XName.Get("codeStrength", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName txtDescrStrengthXName = System.Xml.Linq.XName.Get("txtDescrStrength", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName codeStsXName = System.Xml.Linq.XName.Get("codeSts", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName txtProfileXName = System.Xml.Linq.XName.Get("txtProfile", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName txtMarkingXName = System.Xml.Linq.XName.Get("txtMarking", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName txtRmkXName = System.Xml.Linq.XName.Get("txtRmk", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName sourceXName = System.Xml.Linq.XName.Get("source", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("StopwayType", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator StopwayType(XElement xe) { return XTypedServices.ToXTypedElement<StopwayType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static StopwayType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(SwyUidXName), new NamedContentModelEntity(valLenXName), new NamedContentModelEntity(valWidXName), new NamedContentModelEntity(uomDimXName), new NamedContentModelEntity(codeCompositionXName), new NamedContentModelEntity(codePreparationXName), new NamedContentModelEntity(codeCondSfcXName), new NamedContentModelEntity(valPcnClassXName), new NamedContentModelEntity(codePcnPavementTypeXName), new NamedContentModelEntity(codePcnPavementSubgradeXName), new NamedContentModelEntity(codePcnMaxTirePressureXName), new NamedContentModelEntity(valPcnMaxTirePressureXName), new NamedContentModelEntity(codePcnEvalMethodXName), new NamedContentModelEntity(txtPcnNoteXName), new NamedContentModelEntity(valLcnClassXName), new NamedContentModelEntity(valSiwlWeightXName), new NamedContentModelEntity(uomSiwlWeightXName), new NamedContentModelEntity(valSiwlTirePressureXName), new NamedContentModelEntity(uomSiwlTirePressureXName), new NamedContentModelEntity(valAuwWeightXName), new NamedContentModelEntity(uomAuwWeightXName), new NamedContentModelEntity(codeStrengthXName), new NamedContentModelEntity(txtDescrStrengthXName), new NamedContentModelEntity(codeStsXName), new NamedContentModelEntity(txtProfileXName), new NamedContentModelEntity(txtMarkingXName), new NamedContentModelEntity(txtRmkXName));
        }
        
        /// <summary>
        /// <para>
        /// SWY
        /// </para>
        /// <para>
        /// Regular expression: (SwyUid, valLen?, valWid?, uomDim?, codeComposition?, codePreparation?, codeCondSfc?, valPcnClass?, codePcnPavementType?, codePcnPavementSubgrade?, codePcnMaxTirePressure?, valPcnMaxTirePressure?, codePcnEvalMethod?, txtPcnNote?, valLcnClass?, valSiwlWeight?, uomSiwlWeight?, valSiwlTirePressure?, uomSiwlTirePressure?, valAuwWeight?, uomAuwWeight?, codeStrength?, txtDescrStrength?, codeSts?, txtProfile?, txtMarking?, txtRmk?)
        /// </para>
        /// </summary>
        public StopwayType() {
        }
        
        /// <summary>
        /// <para>
        /// a version of Stopway [SWY]
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (SwyUid, valLen?, valWid?, uomDim?, codeComposition?, codePreparation?, codeCondSfc?, valPcnClass?, codePcnPavementType?, codePcnPavementSubgrade?, codePcnMaxTirePressure?, valPcnMaxTirePressure?, codePcnEvalMethod?, txtPcnNote?, valLcnClass?, valSiwlWeight?, uomSiwlWeight?, valSiwlTirePressure?, uomSiwlTirePressure?, valAuwWeight?, uomAuwWeight?, codeStrength?, txtDescrStrength?, codeSts?, txtProfile?, txtMarking?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual StopwayUidType SwyUid {
            get {
                XElement x = this.GetElement(SwyUidXName);
                return ((StopwayUidType)(x));
            }
            set {
                this.SetElement(SwyUidXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Length
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (SwyUid, valLen?, valWid?, uomDim?, codeComposition?, codePreparation?, codeCondSfc?, valPcnClass?, codePcnPavementType?, codePcnPavementSubgrade?, codePcnMaxTirePressure?, valPcnMaxTirePressure?, codePcnEvalMethod?, txtPcnNote?, valLcnClass?, valSiwlWeight?, uomSiwlWeight?, valSiwlTirePressure?, uomSiwlTirePressure?, valAuwWeight?, uomAuwWeight?, codeStrength?, txtDescrStrength?, codeSts?, txtProfile?, txtMarking?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual valDistHorz valLen {
            get {
                XElement x = this.GetElement(valLenXName);
                return ((valDistHorz)(x));
            }
            set {
                this.SetElement(valLenXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Width
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (SwyUid, valLen?, valWid?, uomDim?, codeComposition?, codePreparation?, codeCondSfc?, valPcnClass?, codePcnPavementType?, codePcnPavementSubgrade?, codePcnMaxTirePressure?, valPcnMaxTirePressure?, codePcnEvalMethod?, txtPcnNote?, valLcnClass?, valSiwlWeight?, uomSiwlWeight?, valSiwlTirePressure?, uomSiwlTirePressure?, valAuwWeight?, uomAuwWeight?, codeStrength?, txtDescrStrength?, codeSts?, txtProfile?, txtMarking?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual valDistHorz valWid {
            get {
                XElement x = this.GetElement(valWidXName);
                return ((valDistHorz)(x));
            }
            set {
                this.SetElement(valWidXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Unit of measurement [horizontal dimension]
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (SwyUid, valLen?, valWid?, uomDim?, codeComposition?, codePreparation?, codeCondSfc?, valPcnClass?, codePcnPavementType?, codePcnPavementSubgrade?, codePcnMaxTirePressure?, valPcnMaxTirePressure?, codePcnEvalMethod?, txtPcnNote?, valLcnClass?, valSiwlWeight?, uomSiwlWeight?, valSiwlTirePressure?, uomSiwlTirePressure?, valAuwWeight?, uomAuwWeight?, codeStrength?, txtDescrStrength?, codeSts?, txtProfile?, txtMarking?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual uomDistHorz uomDim {
            get {
                XElement x = this.GetElement(uomDimXName);
                return ((uomDistHorz)(x));
            }
            set {
                this.SetElement(uomDimXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Surface composition
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (SwyUid, valLen?, valWid?, uomDim?, codeComposition?, codePreparation?, codeCondSfc?, valPcnClass?, codePcnPavementType?, codePcnPavementSubgrade?, codePcnMaxTirePressure?, valPcnMaxTirePressure?, codePcnEvalMethod?, txtPcnNote?, valLcnClass?, valSiwlWeight?, uomSiwlWeight?, valSiwlTirePressure?, uomSiwlTirePressure?, valAuwWeight?, uomAuwWeight?, codeStrength?, txtDescrStrength?, codeSts?, txtProfile?, txtMarking?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual codeCompositionSfc codeComposition {
            get {
                XElement x = this.GetElement(codeCompositionXName);
                return ((codeCompositionSfc)(x));
            }
            set {
                this.SetElement(codeCompositionXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Surface preparation method
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (SwyUid, valLen?, valWid?, uomDim?, codeComposition?, codePreparation?, codeCondSfc?, valPcnClass?, codePcnPavementType?, codePcnPavementSubgrade?, codePcnMaxTirePressure?, valPcnMaxTirePressure?, codePcnEvalMethod?, txtPcnNote?, valLcnClass?, valSiwlWeight?, uomSiwlWeight?, valSiwlTirePressure?, uomSiwlTirePressure?, valAuwWeight?, uomAuwWeight?, codeStrength?, txtDescrStrength?, codeSts?, txtProfile?, txtMarking?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual codePreparationSfc codePreparation {
            get {
                XElement x = this.GetElement(codePreparationXName);
                return ((codePreparationSfc)(x));
            }
            set {
                this.SetElement(codePreparationXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Surface condition
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (SwyUid, valLen?, valWid?, uomDim?, codeComposition?, codePreparation?, codeCondSfc?, valPcnClass?, codePcnPavementType?, codePcnPavementSubgrade?, codePcnMaxTirePressure?, valPcnMaxTirePressure?, codePcnEvalMethod?, txtPcnNote?, valLcnClass?, valSiwlWeight?, uomSiwlWeight?, valSiwlTirePressure?, uomSiwlTirePressure?, valAuwWeight?, uomAuwWeight?, codeStrength?, txtDescrStrength?, codeSts?, txtProfile?, txtMarking?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual codeCondSfc codeCondSfc {
            get {
                XElement x = this.GetElement(codeCondSfcXName);
                return ((codeCondSfc)(x));
            }
            set {
                this.SetElement(codeCondSfcXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// PCN (Pavement Classification Number) value
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (SwyUid, valLen?, valWid?, uomDim?, codeComposition?, codePreparation?, codeCondSfc?, valPcnClass?, codePcnPavementType?, codePcnPavementSubgrade?, codePcnMaxTirePressure?, valPcnMaxTirePressure?, codePcnEvalMethod?, txtPcnNote?, valLcnClass?, valSiwlWeight?, uomSiwlWeight?, valSiwlTirePressure?, uomSiwlTirePressure?, valAuwWeight?, uomAuwWeight?, codeStrength?, txtDescrStrength?, codeSts?, txtProfile?, txtMarking?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual valPcnClass valPcnClass {
            get {
                XElement x = this.GetElement(valPcnClassXName);
                return ((valPcnClass)(x));
            }
            set {
                this.SetElement(valPcnClassXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// PCN pavement type
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (SwyUid, valLen?, valWid?, uomDim?, codeComposition?, codePreparation?, codeCondSfc?, valPcnClass?, codePcnPavementType?, codePcnPavementSubgrade?, codePcnMaxTirePressure?, valPcnMaxTirePressure?, codePcnEvalMethod?, txtPcnNote?, valLcnClass?, valSiwlWeight?, uomSiwlWeight?, valSiwlTirePressure?, uomSiwlTirePressure?, valAuwWeight?, uomAuwWeight?, codeStrength?, txtDescrStrength?, codeSts?, txtProfile?, txtMarking?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual codePcnPavementType codePcnPavementType {
            get {
                XElement x = this.GetElement(codePcnPavementTypeXName);
                return ((codePcnPavementType)(x));
            }
            set {
                this.SetElement(codePcnPavementTypeXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// PCN pavement subgrade
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (SwyUid, valLen?, valWid?, uomDim?, codeComposition?, codePreparation?, codeCondSfc?, valPcnClass?, codePcnPavementType?, codePcnPavementSubgrade?, codePcnMaxTirePressure?, valPcnMaxTirePressure?, codePcnEvalMethod?, txtPcnNote?, valLcnClass?, valSiwlWeight?, uomSiwlWeight?, valSiwlTirePressure?, uomSiwlTirePressure?, valAuwWeight?, uomAuwWeight?, codeStrength?, txtDescrStrength?, codeSts?, txtProfile?, txtMarking?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual codePcnPavementSubgrade codePcnPavementSubgrade {
            get {
                XElement x = this.GetElement(codePcnPavementSubgradeXName);
                return ((codePcnPavementSubgrade)(x));
            }
            set {
                this.SetElement(codePcnPavementSubgradeXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// PCN max tire pressure code
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (SwyUid, valLen?, valWid?, uomDim?, codeComposition?, codePreparation?, codeCondSfc?, valPcnClass?, codePcnPavementType?, codePcnPavementSubgrade?, codePcnMaxTirePressure?, valPcnMaxTirePressure?, codePcnEvalMethod?, txtPcnNote?, valLcnClass?, valSiwlWeight?, uomSiwlWeight?, valSiwlTirePressure?, uomSiwlTirePressure?, valAuwWeight?, uomAuwWeight?, codeStrength?, txtDescrStrength?, codeSts?, txtProfile?, txtMarking?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual codePcnMaxTirePressure codePcnMaxTirePressure {
            get {
                XElement x = this.GetElement(codePcnMaxTirePressureXName);
                return ((codePcnMaxTirePressure)(x));
            }
            set {
                this.SetElement(codePcnMaxTirePressureXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// PCN max tire pressure value
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (SwyUid, valLen?, valWid?, uomDim?, codeComposition?, codePreparation?, codeCondSfc?, valPcnClass?, codePcnPavementType?, codePcnPavementSubgrade?, codePcnMaxTirePressure?, valPcnMaxTirePressure?, codePcnEvalMethod?, txtPcnNote?, valLcnClass?, valSiwlWeight?, uomSiwlWeight?, valSiwlTirePressure?, uomSiwlTirePressure?, valAuwWeight?, uomAuwWeight?, codeStrength?, txtDescrStrength?, codeSts?, txtProfile?, txtMarking?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual valPressurePcnTire valPcnMaxTirePressure {
            get {
                XElement x = this.GetElement(valPcnMaxTirePressureXName);
                return ((valPressurePcnTire)(x));
            }
            set {
                this.SetElement(valPcnMaxTirePressureXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// PCN evaluation method
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (SwyUid, valLen?, valWid?, uomDim?, codeComposition?, codePreparation?, codeCondSfc?, valPcnClass?, codePcnPavementType?, codePcnPavementSubgrade?, codePcnMaxTirePressure?, valPcnMaxTirePressure?, codePcnEvalMethod?, txtPcnNote?, valLcnClass?, valSiwlWeight?, uomSiwlWeight?, valSiwlTirePressure?, uomSiwlTirePressure?, valAuwWeight?, uomAuwWeight?, codeStrength?, txtDescrStrength?, codeSts?, txtProfile?, txtMarking?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual codePcnEvalMethod codePcnEvalMethod {
            get {
                XElement x = this.GetElement(codePcnEvalMethodXName);
                return ((codePcnEvalMethod)(x));
            }
            set {
                this.SetElement(codePcnEvalMethodXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// PCN notes
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (SwyUid, valLen?, valWid?, uomDim?, codeComposition?, codePreparation?, codeCondSfc?, valPcnClass?, codePcnPavementType?, codePcnPavementSubgrade?, codePcnMaxTirePressure?, valPcnMaxTirePressure?, codePcnEvalMethod?, txtPcnNote?, valLcnClass?, valSiwlWeight?, uomSiwlWeight?, valSiwlTirePressure?, uomSiwlTirePressure?, valAuwWeight?, uomAuwWeight?, codeStrength?, txtDescrStrength?, codeSts?, txtProfile?, txtMarking?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual txtRmk txtPcnNote {
            get {
                XElement x = this.GetElement(txtPcnNoteXName);
                return ((txtRmk)(x));
            }
            set {
                this.SetElement(txtPcnNoteXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// LCN value
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (SwyUid, valLen?, valWid?, uomDim?, codeComposition?, codePreparation?, codeCondSfc?, valPcnClass?, codePcnPavementType?, codePcnPavementSubgrade?, codePcnMaxTirePressure?, valPcnMaxTirePressure?, codePcnEvalMethod?, txtPcnNote?, valLcnClass?, valSiwlWeight?, uomSiwlWeight?, valSiwlTirePressure?, uomSiwlTirePressure?, valAuwWeight?, uomAuwWeight?, codeStrength?, txtDescrStrength?, codeSts?, txtProfile?, txtMarking?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual valLcnClass valLcnClass {
            get {
                XElement x = this.GetElement(valLcnClassXName);
                return ((valLcnClass)(x));
            }
            set {
                this.SetElement(valLcnClassXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// SIWL weight
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (SwyUid, valLen?, valWid?, uomDim?, codeComposition?, codePreparation?, codeCondSfc?, valPcnClass?, codePcnPavementType?, codePcnPavementSubgrade?, codePcnMaxTirePressure?, valPcnMaxTirePressure?, codePcnEvalMethod?, txtPcnNote?, valLcnClass?, valSiwlWeight?, uomSiwlWeight?, valSiwlTirePressure?, uomSiwlTirePressure?, valAuwWeight?, uomAuwWeight?, codeStrength?, txtDescrStrength?, codeSts?, txtProfile?, txtMarking?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual valWeight valSiwlWeight {
            get {
                XElement x = this.GetElement(valSiwlWeightXName);
                return ((valWeight)(x));
            }
            set {
                this.SetElement(valSiwlWeightXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Unit of measurement [SIWL weight]
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (SwyUid, valLen?, valWid?, uomDim?, codeComposition?, codePreparation?, codeCondSfc?, valPcnClass?, codePcnPavementType?, codePcnPavementSubgrade?, codePcnMaxTirePressure?, valPcnMaxTirePressure?, codePcnEvalMethod?, txtPcnNote?, valLcnClass?, valSiwlWeight?, uomSiwlWeight?, valSiwlTirePressure?, uomSiwlTirePressure?, valAuwWeight?, uomAuwWeight?, codeStrength?, txtDescrStrength?, codeSts?, txtProfile?, txtMarking?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual uomWeight uomSiwlWeight {
            get {
                XElement x = this.GetElement(uomSiwlWeightXName);
                return ((uomWeight)(x));
            }
            set {
                this.SetElement(uomSiwlWeightXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// SIWL tire pressure
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (SwyUid, valLen?, valWid?, uomDim?, codeComposition?, codePreparation?, codeCondSfc?, valPcnClass?, codePcnPavementType?, codePcnPavementSubgrade?, codePcnMaxTirePressure?, valPcnMaxTirePressure?, codePcnEvalMethod?, txtPcnNote?, valLcnClass?, valSiwlWeight?, uomSiwlWeight?, valSiwlTirePressure?, uomSiwlTirePressure?, valAuwWeight?, uomAuwWeight?, codeStrength?, txtDescrStrength?, codeSts?, txtProfile?, txtMarking?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual valPressure valSiwlTirePressure {
            get {
                XElement x = this.GetElement(valSiwlTirePressureXName);
                return ((valPressure)(x));
            }
            set {
                this.SetElement(valSiwlTirePressureXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Unit of measurement [SIWL tire pressure]
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (SwyUid, valLen?, valWid?, uomDim?, codeComposition?, codePreparation?, codeCondSfc?, valPcnClass?, codePcnPavementType?, codePcnPavementSubgrade?, codePcnMaxTirePressure?, valPcnMaxTirePressure?, codePcnEvalMethod?, txtPcnNote?, valLcnClass?, valSiwlWeight?, uomSiwlWeight?, valSiwlTirePressure?, uomSiwlTirePressure?, valAuwWeight?, uomAuwWeight?, codeStrength?, txtDescrStrength?, codeSts?, txtProfile?, txtMarking?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual uomPressure uomSiwlTirePressure {
            get {
                XElement x = this.GetElement(uomSiwlTirePressureXName);
                return ((uomPressure)(x));
            }
            set {
                this.SetElement(uomSiwlTirePressureXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// All Up Wheel weight
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (SwyUid, valLen?, valWid?, uomDim?, codeComposition?, codePreparation?, codeCondSfc?, valPcnClass?, codePcnPavementType?, codePcnPavementSubgrade?, codePcnMaxTirePressure?, valPcnMaxTirePressure?, codePcnEvalMethod?, txtPcnNote?, valLcnClass?, valSiwlWeight?, uomSiwlWeight?, valSiwlTirePressure?, uomSiwlTirePressure?, valAuwWeight?, uomAuwWeight?, codeStrength?, txtDescrStrength?, codeSts?, txtProfile?, txtMarking?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual valWeight valAuwWeight {
            get {
                XElement x = this.GetElement(valAuwWeightXName);
                return ((valWeight)(x));
            }
            set {
                this.SetElement(valAuwWeightXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Unit of measurement [AUW weight]
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (SwyUid, valLen?, valWid?, uomDim?, codeComposition?, codePreparation?, codeCondSfc?, valPcnClass?, codePcnPavementType?, codePcnPavementSubgrade?, codePcnMaxTirePressure?, valPcnMaxTirePressure?, codePcnEvalMethod?, txtPcnNote?, valLcnClass?, valSiwlWeight?, uomSiwlWeight?, valSiwlTirePressure?, uomSiwlTirePressure?, valAuwWeight?, uomAuwWeight?, codeStrength?, txtDescrStrength?, codeSts?, txtProfile?, txtMarking?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual uomWeight uomAuwWeight {
            get {
                XElement x = this.GetElement(uomAuwWeightXName);
                return ((uomWeight)(x));
            }
            set {
                this.SetElement(uomAuwWeightXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// [Deprecated] Surface strength method
        /// </para>
        /// <para>
        /// DEPRECATED-4.5
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (SwyUid, valLen?, valWid?, uomDim?, codeComposition?, codePreparation?, codeCondSfc?, valPcnClass?, codePcnPavementType?, codePcnPavementSubgrade?, codePcnMaxTirePressure?, valPcnMaxTirePressure?, codePcnEvalMethod?, txtPcnNote?, valLcnClass?, valSiwlWeight?, uomSiwlWeight?, valSiwlTirePressure?, uomSiwlTirePressure?, valAuwWeight?, uomAuwWeight?, codeStrength?, txtDescrStrength?, codeSts?, txtProfile?, txtMarking?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual codeStrengthSfc codeStrength {
            get {
                XElement x = this.GetElement(codeStrengthXName);
                return ((codeStrengthSfc)(x));
            }
            set {
                this.SetElement(codeStrengthXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// [Deprecated] Surface strength
        /// </para>
        /// <para>
        /// DEPRECATED-4.5
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (SwyUid, valLen?, valWid?, uomDim?, codeComposition?, codePreparation?, codeCondSfc?, valPcnClass?, codePcnPavementType?, codePcnPavementSubgrade?, codePcnMaxTirePressure?, valPcnMaxTirePressure?, codePcnEvalMethod?, txtPcnNote?, valLcnClass?, valSiwlWeight?, uomSiwlWeight?, valSiwlTirePressure?, uomSiwlTirePressure?, valAuwWeight?, uomAuwWeight?, codeStrength?, txtDescrStrength?, codeSts?, txtProfile?, txtMarking?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual txtDescr txtDescrStrength {
            get {
                XElement x = this.GetElement(txtDescrStrengthXName);
                return ((txtDescr)(x));
            }
            set {
                this.SetElement(txtDescrStrengthXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Operational status
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (SwyUid, valLen?, valWid?, uomDim?, codeComposition?, codePreparation?, codeCondSfc?, valPcnClass?, codePcnPavementType?, codePcnPavementSubgrade?, codePcnMaxTirePressure?, valPcnMaxTirePressure?, codePcnEvalMethod?, txtPcnNote?, valLcnClass?, valSiwlWeight?, uomSiwlWeight?, valSiwlTirePressure?, uomSiwlTirePressure?, valAuwWeight?, uomAuwWeight?, codeStrength?, txtDescrStrength?, codeSts?, txtProfile?, txtMarking?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual codeStsSfc codeSts {
            get {
                XElement x = this.GetElement(codeStsXName);
                return ((codeStsSfc)(x));
            }
            set {
                this.SetElement(codeStsXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Profile description
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (SwyUid, valLen?, valWid?, uomDim?, codeComposition?, codePreparation?, codeCondSfc?, valPcnClass?, codePcnPavementType?, codePcnPavementSubgrade?, codePcnMaxTirePressure?, valPcnMaxTirePressure?, codePcnEvalMethod?, txtPcnNote?, valLcnClass?, valSiwlWeight?, uomSiwlWeight?, valSiwlTirePressure?, uomSiwlTirePressure?, valAuwWeight?, uomAuwWeight?, codeStrength?, txtDescrStrength?, codeSts?, txtProfile?, txtMarking?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual txtDescr txtProfile {
            get {
                XElement x = this.GetElement(txtProfileXName);
                return ((txtDescr)(x));
            }
            set {
                this.SetElement(txtProfileXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Marking
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (SwyUid, valLen?, valWid?, uomDim?, codeComposition?, codePreparation?, codeCondSfc?, valPcnClass?, codePcnPavementType?, codePcnPavementSubgrade?, codePcnMaxTirePressure?, valPcnMaxTirePressure?, codePcnEvalMethod?, txtPcnNote?, valLcnClass?, valSiwlWeight?, uomSiwlWeight?, valSiwlTirePressure?, uomSiwlTirePressure?, valAuwWeight?, uomAuwWeight?, codeStrength?, txtDescrStrength?, codeSts?, txtProfile?, txtMarking?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual txtDescr txtMarking {
            get {
                XElement x = this.GetElement(txtMarkingXName);
                return ((txtDescr)(x));
            }
            set {
                this.SetElement(txtMarkingXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Remark
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (SwyUid, valLen?, valWid?, uomDim?, codeComposition?, codePreparation?, codeCondSfc?, valPcnClass?, codePcnPavementType?, codePcnPavementSubgrade?, codePcnMaxTirePressure?, valPcnMaxTirePressure?, codePcnEvalMethod?, txtPcnNote?, valLcnClass?, valSiwlWeight?, uomSiwlWeight?, valSiwlTirePressure?, uomSiwlTirePressure?, valAuwWeight?, uomAuwWeight?, codeStrength?, txtDescrStrength?, codeSts?, txtProfile?, txtMarking?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual txtRmk txtRmk {
            get {
                XElement x = this.GetElement(txtRmkXName);
                return ((txtRmk)(x));
            }
            set {
                this.SetElement(txtRmkXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string source {
            get {
                XAttribute x = this.Attribute(sourceXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(sourceXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<StopwayType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(SwyUidXName, typeof(StopwayUidType));
            localElementDictionary.Add(valLenXName, typeof(valDistHorz));
            localElementDictionary.Add(valWidXName, typeof(valDistHorz));
            localElementDictionary.Add(uomDimXName, typeof(uomDistHorz));
            localElementDictionary.Add(codeCompositionXName, typeof(codeCompositionSfc));
            localElementDictionary.Add(codePreparationXName, typeof(codePreparationSfc));
            localElementDictionary.Add(codeCondSfcXName, typeof(codeCondSfc));
            localElementDictionary.Add(valPcnClassXName, typeof(valPcnClass));
            localElementDictionary.Add(codePcnPavementTypeXName, typeof(codePcnPavementType));
            localElementDictionary.Add(codePcnPavementSubgradeXName, typeof(codePcnPavementSubgrade));
            localElementDictionary.Add(codePcnMaxTirePressureXName, typeof(codePcnMaxTirePressure));
            localElementDictionary.Add(valPcnMaxTirePressureXName, typeof(valPressurePcnTire));
            localElementDictionary.Add(codePcnEvalMethodXName, typeof(codePcnEvalMethod));
            localElementDictionary.Add(txtPcnNoteXName, typeof(txtRmk));
            localElementDictionary.Add(valLcnClassXName, typeof(valLcnClass));
            localElementDictionary.Add(valSiwlWeightXName, typeof(valWeight));
            localElementDictionary.Add(uomSiwlWeightXName, typeof(uomWeight));
            localElementDictionary.Add(valSiwlTirePressureXName, typeof(valPressure));
            localElementDictionary.Add(uomSiwlTirePressureXName, typeof(uomPressure));
            localElementDictionary.Add(valAuwWeightXName, typeof(valWeight));
            localElementDictionary.Add(uomAuwWeightXName, typeof(uomWeight));
            localElementDictionary.Add(codeStrengthXName, typeof(codeStrengthSfc));
            localElementDictionary.Add(txtDescrStrengthXName, typeof(txtDescr));
            localElementDictionary.Add(codeStsXName, typeof(codeStsSfc));
            localElementDictionary.Add(txtProfileXName, typeof(txtDescr));
            localElementDictionary.Add(txtMarkingXName, typeof(txtDescr));
            localElementDictionary.Add(txtRmkXName, typeof(txtRmk));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Stopway [SWY] - UID
    /// </para>
    /// <para>
    /// Regular expression: (RdnUid)
    /// </para>
    /// </summary>
    public partial class StopwayUidType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName RdnUidXName = System.Xml.Linq.XName.Get("RdnUid", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName midXName = System.Xml.Linq.XName.Get("mid", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("StopwayUidType", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator StopwayUidType(XElement xe) { return XTypedServices.ToXTypedElement<StopwayUidType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static StopwayUidType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(RdnUidXName));
        }
        
        /// <summary>
        /// <para>
        /// Stopway [SWY] - UID
        /// </para>
        /// <para>
        /// Regular expression: (RdnUid)
        /// </para>
        /// </summary>
        public StopwayUidType() {
        }
        
        /// <summary>
        /// <para>
        /// Stopway [SWY] is designed for RWY direction
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (RdnUid)
        /// </para>
        /// </summary>
        public virtual RunwayDirectionUidType RdnUid {
            get {
                XElement x = this.GetElement(RdnUidXName);
                return ((RunwayDirectionUidType)(x));
            }
            set {
                this.SetElement(RdnUidXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string mid {
            get {
                XAttribute x = this.Attribute(midXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(midXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<StopwayUidType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(RdnUidXName, typeof(RunwayDirectionUidType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// DEPRECATED-4.0
    /// </para>
    /// <para>
    /// [Deprecated] TACAN - Limitation
    /// </para>
    /// <para>
    /// Regular expression: (TlnUid, valDistOuter?, uomDistHorz, valDistVerUpper?, uomDistVerUpper?, codeDistVerUpper?, uomDistVerLower, codeDistVerLower, valAngleScallop?, txtRmk?)
    /// </para>
    /// </summary>
    public partial class TacanLimitationType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TlnUidXName = System.Xml.Linq.XName.Get("TlnUid", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName valDistOuterXName = System.Xml.Linq.XName.Get("valDistOuter", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName uomDistHorzXName = System.Xml.Linq.XName.Get("uomDistHorz", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName valDistVerUpperXName = System.Xml.Linq.XName.Get("valDistVerUpper", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName uomDistVerUpperXName = System.Xml.Linq.XName.Get("uomDistVerUpper", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName codeDistVerUpperXName = System.Xml.Linq.XName.Get("codeDistVerUpper", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName uomDistVerLowerXName = System.Xml.Linq.XName.Get("uomDistVerLower", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName codeDistVerLowerXName = System.Xml.Linq.XName.Get("codeDistVerLower", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName valAngleScallopXName = System.Xml.Linq.XName.Get("valAngleScallop", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName txtRmkXName = System.Xml.Linq.XName.Get("txtRmk", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName sourceXName = System.Xml.Linq.XName.Get("source", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("TacanLimitationType", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator TacanLimitationType(XElement xe) { return XTypedServices.ToXTypedElement<TacanLimitationType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static TacanLimitationType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(TlnUidXName), new NamedContentModelEntity(valDistOuterXName), new NamedContentModelEntity(uomDistHorzXName), new NamedContentModelEntity(valDistVerUpperXName), new NamedContentModelEntity(uomDistVerUpperXName), new NamedContentModelEntity(codeDistVerUpperXName), new NamedContentModelEntity(uomDistVerLowerXName), new NamedContentModelEntity(codeDistVerLowerXName), new NamedContentModelEntity(valAngleScallopXName), new NamedContentModelEntity(txtRmkXName));
        }
        
        /// <summary>
        /// <para>
        /// DEPRECATED-4.0
        /// </para>
        /// <para>
        /// [Deprecated] TACAN - Limitation
        /// </para>
        /// <para>
        /// Regular expression: (TlnUid, valDistOuter?, uomDistHorz, valDistVerUpper?, uomDistVerUpper?, codeDistVerUpper?, uomDistVerLower, codeDistVerLower, valAngleScallop?, txtRmk?)
        /// </para>
        /// </summary>
        public TacanLimitationType() {
        }
        
        /// <summary>
        /// <para>
        /// a version of TACAN - Limitation
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (TlnUid, valDistOuter?, uomDistHorz, valDistVerUpper?, uomDistVerUpper?, codeDistVerUpper?, uomDistVerLower, codeDistVerLower, valAngleScallop?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual TacanLimitationUidType TlnUid {
            get {
                XElement x = this.GetElement(TlnUidXName);
                return ((TacanLimitationUidType)(x));
            }
            set {
                this.SetElement(TlnUidXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Angle sector volume outer limit
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (TlnUid, valDistOuter?, uomDistHorz, valDistVerUpper?, uomDistVerUpper?, codeDistVerUpper?, uomDistVerLower, codeDistVerLower, valAngleScallop?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual valDistHorz valDistOuter {
            get {
                XElement x = this.GetElement(valDistOuterXName);
                return ((valDistHorz)(x));
            }
            set {
                this.SetElement(valDistOuterXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Unit of measurement [horizontal distance]
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (TlnUid, valDistOuter?, uomDistHorz, valDistVerUpper?, uomDistVerUpper?, codeDistVerUpper?, uomDistVerLower, codeDistVerLower, valAngleScallop?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual uomDistHorz uomDistHorz {
            get {
                XElement x = this.GetElement(uomDistHorzXName);
                return ((uomDistHorz)(x));
            }
            set {
                this.SetElement(uomDistHorzXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Upper limit
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (TlnUid, valDistOuter?, uomDistHorz, valDistVerUpper?, uomDistVerUpper?, codeDistVerUpper?, uomDistVerLower, codeDistVerLower, valAngleScallop?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual valDistVer valDistVerUpper {
            get {
                XElement x = this.GetElement(valDistVerUpperXName);
                return ((valDistVer)(x));
            }
            set {
                this.SetElement(valDistVerUpperXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Unit of measurement [upper limit]
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (TlnUid, valDistOuter?, uomDistHorz, valDistVerUpper?, uomDistVerUpper?, codeDistVerUpper?, uomDistVerLower, codeDistVerLower, valAngleScallop?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual uomDistVer uomDistVerUpper {
            get {
                XElement x = this.GetElement(uomDistVerUpperXName);
                return ((uomDistVer)(x));
            }
            set {
                this.SetElement(uomDistVerUpperXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Reference for upper limit
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (TlnUid, valDistOuter?, uomDistHorz, valDistVerUpper?, uomDistVerUpper?, codeDistVerUpper?, uomDistVerLower, codeDistVerLower, valAngleScallop?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual codeDistVer codeDistVerUpper {
            get {
                XElement x = this.GetElement(codeDistVerUpperXName);
                return ((codeDistVer)(x));
            }
            set {
                this.SetElement(codeDistVerUpperXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Unit of measurement [lower limit]
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (TlnUid, valDistOuter?, uomDistHorz, valDistVerUpper?, uomDistVerUpper?, codeDistVerUpper?, uomDistVerLower, codeDistVerLower, valAngleScallop?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual uomDistVer uomDistVerLower {
            get {
                XElement x = this.GetElement(uomDistVerLowerXName);
                return ((uomDistVer)(x));
            }
            set {
                this.SetElement(uomDistVerLowerXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Reference for lower limit
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (TlnUid, valDistOuter?, uomDistHorz, valDistVerUpper?, uomDistVerUpper?, codeDistVerUpper?, uomDistVerLower, codeDistVerLower, valAngleScallop?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual codeDistVer codeDistVerLower {
            get {
                XElement x = this.GetElement(codeDistVerLowerXName);
                return ((codeDistVer)(x));
            }
            set {
                this.SetElement(codeDistVerLowerXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Scalloping angle
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (TlnUid, valDistOuter?, uomDistHorz, valDistVerUpper?, uomDistVerUpper?, codeDistVerUpper?, uomDistVerLower, codeDistVerLower, valAngleScallop?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual valAngle valAngleScallop {
            get {
                XElement x = this.GetElement(valAngleScallopXName);
                return ((valAngle)(x));
            }
            set {
                this.SetElement(valAngleScallopXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Remark
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (TlnUid, valDistOuter?, uomDistHorz, valDistVerUpper?, uomDistVerUpper?, codeDistVerUpper?, uomDistVerLower, codeDistVerLower, valAngleScallop?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual txtRmk txtRmk {
            get {
                XElement x = this.GetElement(txtRmkXName);
                return ((txtRmk)(x));
            }
            set {
                this.SetElement(txtRmkXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string source {
            get {
                XAttribute x = this.Attribute(sourceXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(sourceXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<TacanLimitationType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(TlnUidXName, typeof(TacanLimitationUidType));
            localElementDictionary.Add(valDistOuterXName, typeof(valDistHorz));
            localElementDictionary.Add(uomDistHorzXName, typeof(uomDistHorz));
            localElementDictionary.Add(valDistVerUpperXName, typeof(valDistVer));
            localElementDictionary.Add(uomDistVerUpperXName, typeof(uomDistVer));
            localElementDictionary.Add(codeDistVerUpperXName, typeof(codeDistVer));
            localElementDictionary.Add(uomDistVerLowerXName, typeof(uomDistVer));
            localElementDictionary.Add(codeDistVerLowerXName, typeof(codeDistVer));
            localElementDictionary.Add(valAngleScallopXName, typeof(valAngle));
            localElementDictionary.Add(txtRmkXName, typeof(txtRmk));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// DEPRECATED-4.0
    /// </para>
    /// <para>
    /// [Deprecated] TACAN - Limitation - UID
    /// </para>
    /// <para>
    /// Regular expression: (TcnUid, codeComponent, codeType, valAngleFm, valAngleTo, valDistInner, valDistVerLower)
    /// </para>
    /// </summary>
    public partial class TacanLimitationUidType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TcnUidXName = System.Xml.Linq.XName.Get("TcnUid", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName codeComponentXName = System.Xml.Linq.XName.Get("codeComponent", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName codeTypeXName = System.Xml.Linq.XName.Get("codeType", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName valAngleFmXName = System.Xml.Linq.XName.Get("valAngleFm", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName valAngleToXName = System.Xml.Linq.XName.Get("valAngleTo", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName valDistInnerXName = System.Xml.Linq.XName.Get("valDistInner", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName valDistVerLowerXName = System.Xml.Linq.XName.Get("valDistVerLower", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName midXName = System.Xml.Linq.XName.Get("mid", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("TacanLimitationUidType", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator TacanLimitationUidType(XElement xe) { return XTypedServices.ToXTypedElement<TacanLimitationUidType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static TacanLimitationUidType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(TcnUidXName), new NamedContentModelEntity(codeComponentXName), new NamedContentModelEntity(codeTypeXName), new NamedContentModelEntity(valAngleFmXName), new NamedContentModelEntity(valAngleToXName), new NamedContentModelEntity(valDistInnerXName), new NamedContentModelEntity(valDistVerLowerXName));
        }
        
        /// <summary>
        /// <para>
        /// DEPRECATED-4.0
        /// </para>
        /// <para>
        /// [Deprecated] TACAN - Limitation - UID
        /// </para>
        /// <para>
        /// Regular expression: (TcnUid, codeComponent, codeType, valAngleFm, valAngleTo, valDistInner, valDistVerLower)
        /// </para>
        /// </summary>
        public TacanLimitationUidType() {
        }
        
        /// <summary>
        /// <para>
        /// TACAN - Limitation is limiting Tactical air navigation beacon [TACAN]
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (TcnUid, codeComponent, codeType, valAngleFm, valAngleTo, valDistInner, valDistVerLower)
        /// </para>
        /// </summary>
        public virtual TacanUidType TcnUid {
            get {
                XElement x = this.GetElement(TcnUidXName);
                return ((TacanUidType)(x));
            }
            set {
                this.SetElement(TcnUidXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Component
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (TcnUid, codeComponent, codeType, valAngleFm, valAngleTo, valDistInner, valDistVerLower)
        /// </para>
        /// </summary>
        public virtual codeComponentTacan codeComponent {
            get {
                XElement x = this.GetElement(codeComponentXName);
                return ((codeComponentTacan)(x));
            }
            set {
                this.SetElement(codeComponentXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Type
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (TcnUid, codeComponent, codeType, valAngleFm, valAngleTo, valDistInner, valDistVerLower)
        /// </para>
        /// </summary>
        public virtual codeTypeNavAidLimit codeType {
            get {
                XElement x = this.GetElement(codeTypeXName);
                return ((codeTypeNavAidLimit)(x));
            }
            set {
                this.SetElement(codeTypeXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Beginning of angle
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (TcnUid, codeComponent, codeType, valAngleFm, valAngleTo, valDistInner, valDistVerLower)
        /// </para>
        /// </summary>
        public virtual valAngleBrg valAngleFm {
            get {
                XElement x = this.GetElement(valAngleFmXName);
                return ((valAngleBrg)(x));
            }
            set {
                this.SetElement(valAngleFmXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Ending of angle
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (TcnUid, codeComponent, codeType, valAngleFm, valAngleTo, valDistInner, valDistVerLower)
        /// </para>
        /// </summary>
        public virtual valAngleBrg valAngleTo {
            get {
                XElement x = this.GetElement(valAngleToXName);
                return ((valAngleBrg)(x));
            }
            set {
                this.SetElement(valAngleToXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Angle sector volume inner limit
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (TcnUid, codeComponent, codeType, valAngleFm, valAngleTo, valDistInner, valDistVerLower)
        /// </para>
        /// </summary>
        public virtual valDistHorz valDistInner {
            get {
                XElement x = this.GetElement(valDistInnerXName);
                return ((valDistHorz)(x));
            }
            set {
                this.SetElement(valDistInnerXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Lower limit
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (TcnUid, codeComponent, codeType, valAngleFm, valAngleTo, valDistInner, valDistVerLower)
        /// </para>
        /// </summary>
        public virtual valDistVer valDistVerLower {
            get {
                XElement x = this.GetElement(valDistVerLowerXName);
                return ((valDistVer)(x));
            }
            set {
                this.SetElement(valDistVerLowerXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string mid {
            get {
                XAttribute x = this.Attribute(midXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(midXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<TacanLimitationUidType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(TcnUidXName, typeof(TacanUidType));
            localElementDictionary.Add(codeComponentXName, typeof(codeComponentTacan));
            localElementDictionary.Add(codeTypeXName, typeof(codeTypeNavAidLimit));
            localElementDictionary.Add(valAngleFmXName, typeof(valAngleBrg));
            localElementDictionary.Add(valAngleToXName, typeof(valAngleBrg));
            localElementDictionary.Add(valDistInnerXName, typeof(valDistHorz));
            localElementDictionary.Add(valDistVerLowerXName, typeof(valDistVer));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// TACAN
    /// </para>
    /// <para>
    /// Regular expression: (TcnUid, OrgUid, VorUid?, txtName?, codeChannel, valGhostFreq?, uomGhostFreq?, valDeclination?, valMagVar?, dateMagVar?, codeEm?, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, valElev?, valElevAccuracy?, valGeoidUndulation?, uomDistVer?, valCrc?, txtVerDatum?, Ttt?, txtRmk?)
    /// </para>
    /// </summary>
    public partial class TacanType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TcnUidXName = System.Xml.Linq.XName.Get("TcnUid", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName OrgUidXName = System.Xml.Linq.XName.Get("OrgUid", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName VorUidXName = System.Xml.Linq.XName.Get("VorUid", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName txtNameXName = System.Xml.Linq.XName.Get("txtName", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName codeChannelXName = System.Xml.Linq.XName.Get("codeChannel", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName valGhostFreqXName = System.Xml.Linq.XName.Get("valGhostFreq", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName uomGhostFreqXName = System.Xml.Linq.XName.Get("uomGhostFreq", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName valDeclinationXName = System.Xml.Linq.XName.Get("valDeclination", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName valMagVarXName = System.Xml.Linq.XName.Get("valMagVar", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName dateMagVarXName = System.Xml.Linq.XName.Get("dateMagVar", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName codeEmXName = System.Xml.Linq.XName.Get("codeEm", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName codeDatumXName = System.Xml.Linq.XName.Get("codeDatum", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName valGeoAccuracyXName = System.Xml.Linq.XName.Get("valGeoAccuracy", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName uomGeoAccuracyXName = System.Xml.Linq.XName.Get("uomGeoAccuracy", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName valElevXName = System.Xml.Linq.XName.Get("valElev", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName valElevAccuracyXName = System.Xml.Linq.XName.Get("valElevAccuracy", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName valGeoidUndulationXName = System.Xml.Linq.XName.Get("valGeoidUndulation", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName uomDistVerXName = System.Xml.Linq.XName.Get("uomDistVer", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName valCrcXName = System.Xml.Linq.XName.Get("valCrc", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName txtVerDatumXName = System.Xml.Linq.XName.Get("txtVerDatum", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TttXName = System.Xml.Linq.XName.Get("Ttt", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName txtRmkXName = System.Xml.Linq.XName.Get("txtRmk", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName sourceXName = System.Xml.Linq.XName.Get("source", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("TacanType", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator TacanType(XElement xe) { return XTypedServices.ToXTypedElement<TacanType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static TacanType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(TcnUidXName), new NamedContentModelEntity(OrgUidXName), new NamedContentModelEntity(VorUidXName), new NamedContentModelEntity(txtNameXName), new NamedContentModelEntity(codeChannelXName), new NamedContentModelEntity(valGhostFreqXName), new NamedContentModelEntity(uomGhostFreqXName), new NamedContentModelEntity(valDeclinationXName), new NamedContentModelEntity(valMagVarXName), new NamedContentModelEntity(dateMagVarXName), new NamedContentModelEntity(codeEmXName), new NamedContentModelEntity(codeDatumXName), new NamedContentModelEntity(valGeoAccuracyXName), new NamedContentModelEntity(uomGeoAccuracyXName), new NamedContentModelEntity(valElevXName), new NamedContentModelEntity(valElevAccuracyXName), new NamedContentModelEntity(valGeoidUndulationXName), new NamedContentModelEntity(uomDistVerXName), new NamedContentModelEntity(valCrcXName), new NamedContentModelEntity(txtVerDatumXName), new NamedContentModelEntity(TttXName), new NamedContentModelEntity(txtRmkXName));
        }
        
        /// <summary>
        /// <para>
        /// TACAN
        /// </para>
        /// <para>
        /// Regular expression: (TcnUid, OrgUid, VorUid?, txtName?, codeChannel, valGhostFreq?, uomGhostFreq?, valDeclination?, valMagVar?, dateMagVar?, codeEm?, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, valElev?, valElevAccuracy?, valGeoidUndulation?, uomDistVer?, valCrc?, txtVerDatum?, Ttt?, txtRmk?)
        /// </para>
        /// </summary>
        public TacanType() {
        }
        
        /// <summary>
        /// <para>
        /// a version of Tactical air navigation beacon [TACAN]
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (TcnUid, OrgUid, VorUid?, txtName?, codeChannel, valGhostFreq?, uomGhostFreq?, valDeclination?, valMagVar?, dateMagVar?, codeEm?, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, valElev?, valElevAccuracy?, valGeoidUndulation?, uomDistVer?, valCrc?, txtVerDatum?, Ttt?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual TacanUidType TcnUid {
            get {
                XElement x = this.GetElement(TcnUidXName);
                return ((TacanUidType)(x));
            }
            set {
                this.SetElement(TcnUidXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// TACAN is under the responsibility of Organisaton or authority
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (TcnUid, OrgUid, VorUid?, txtName?, codeChannel, valGhostFreq?, uomGhostFreq?, valDeclination?, valMagVar?, dateMagVar?, codeEm?, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, valElev?, valElevAccuracy?, valGeoidUndulation?, uomDistVer?, valCrc?, txtVerDatum?, Ttt?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual OrganisationAuthorityUidType OrgUid {
            get {
                XElement x = this.GetElement(OrgUidXName);
                return ((OrganisationAuthorityUidType)(x));
            }
            set {
                this.SetElement(OrgUidXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// TACAN is co-located with VHF omnidirectional radio range beacon [VOR]
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (TcnUid, OrgUid, VorUid?, txtName?, codeChannel, valGhostFreq?, uomGhostFreq?, valDeclination?, valMagVar?, dateMagVar?, codeEm?, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, valElev?, valElevAccuracy?, valGeoidUndulation?, uomDistVer?, valCrc?, txtVerDatum?, Ttt?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual VorUidType VorUid {
            get {
                XElement x = this.GetElement(VorUidXName);
                return ((VorUidType)(x));
            }
            set {
                this.SetElement(VorUidXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Name
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (TcnUid, OrgUid, VorUid?, txtName?, codeChannel, valGhostFreq?, uomGhostFreq?, valDeclination?, valMagVar?, dateMagVar?, codeEm?, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, valElev?, valElevAccuracy?, valGeoidUndulation?, uomDistVer?, valCrc?, txtVerDatum?, Ttt?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual txtName txtName {
            get {
                XElement x = this.GetElement(txtNameXName);
                return ((txtName)(x));
            }
            set {
                this.SetElement(txtNameXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Channel
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (TcnUid, OrgUid, VorUid?, txtName?, codeChannel, valGhostFreq?, uomGhostFreq?, valDeclination?, valMagVar?, dateMagVar?, codeEm?, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, valElev?, valElevAccuracy?, valGeoidUndulation?, uomDistVer?, valCrc?, txtVerDatum?, Ttt?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual codeChannelTacan codeChannel {
            get {
                XElement x = this.GetElement(codeChannelXName);
                return ((codeChannelTacan)(x));
            }
            set {
                this.SetElement(codeChannelXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Frequency of virtual VHF facility
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (TcnUid, OrgUid, VorUid?, txtName?, codeChannel, valGhostFreq?, uomGhostFreq?, valDeclination?, valMagVar?, dateMagVar?, codeEm?, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, valElev?, valElevAccuracy?, valGeoidUndulation?, uomDistVer?, valCrc?, txtVerDatum?, Ttt?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual valFreq valGhostFreq {
            get {
                XElement x = this.GetElement(valGhostFreqXName);
                return ((valFreq)(x));
            }
            set {
                this.SetElement(valGhostFreqXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Unit of measurement [frequency of virtual VHF facility]
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (TcnUid, OrgUid, VorUid?, txtName?, codeChannel, valGhostFreq?, uomGhostFreq?, valDeclination?, valMagVar?, dateMagVar?, codeEm?, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, valElev?, valElevAccuracy?, valGeoidUndulation?, uomDistVer?, valCrc?, txtVerDatum?, Ttt?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual uomFreq uomGhostFreq {
            get {
                XElement x = this.GetElement(uomGhostFreqXName);
                return ((uomFreq)(x));
            }
            set {
                this.SetElement(uomGhostFreqXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Station declination
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (TcnUid, OrgUid, VorUid?, txtName?, codeChannel, valGhostFreq?, uomGhostFreq?, valDeclination?, valMagVar?, dateMagVar?, codeEm?, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, valElev?, valElevAccuracy?, valGeoidUndulation?, uomDistVer?, valCrc?, txtVerDatum?, Ttt?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual valAngleMagVar valDeclination {
            get {
                XElement x = this.GetElement(valDeclinationXName);
                return ((valAngleMagVar)(x));
            }
            set {
                this.SetElement(valDeclinationXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Magnetic variation
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (TcnUid, OrgUid, VorUid?, txtName?, codeChannel, valGhostFreq?, uomGhostFreq?, valDeclination?, valMagVar?, dateMagVar?, codeEm?, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, valElev?, valElevAccuracy?, valGeoidUndulation?, uomDistVer?, valCrc?, txtVerDatum?, Ttt?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual valAngleMagVar valMagVar {
            get {
                XElement x = this.GetElement(valMagVarXName);
                return ((valAngleMagVar)(x));
            }
            set {
                this.SetElement(valMagVarXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Magnetic variation date
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (TcnUid, OrgUid, VorUid?, txtName?, codeChannel, valGhostFreq?, uomGhostFreq?, valDeclination?, valMagVar?, dateMagVar?, codeEm?, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, valElev?, valElevAccuracy?, valGeoidUndulation?, uomDistVer?, valCrc?, txtVerDatum?, Ttt?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual dateYear dateMagVar {
            get {
                XElement x = this.GetElement(dateMagVarXName);
                return ((dateYear)(x));
            }
            set {
                this.SetElement(dateMagVarXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Emission
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (TcnUid, OrgUid, VorUid?, txtName?, codeChannel, valGhostFreq?, uomGhostFreq?, valDeclination?, valMagVar?, dateMagVar?, codeEm?, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, valElev?, valElevAccuracy?, valGeoidUndulation?, uomDistVer?, valCrc?, txtVerDatum?, Ttt?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual codeEmRdo codeEm {
            get {
                XElement x = this.GetElement(codeEmXName);
                return ((codeEmRdo)(x));
            }
            set {
                this.SetElement(codeEmXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Datum
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (TcnUid, OrgUid, VorUid?, txtName?, codeChannel, valGhostFreq?, uomGhostFreq?, valDeclination?, valMagVar?, dateMagVar?, codeEm?, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, valElev?, valElevAccuracy?, valGeoidUndulation?, uomDistVer?, valCrc?, txtVerDatum?, Ttt?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual codeDatum codeDatum {
            get {
                XElement x = this.GetElement(codeDatumXName);
                return ((codeDatum)(x));
            }
            set {
                this.SetElement(codeDatumXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Geographical accuracy
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (TcnUid, OrgUid, VorUid?, txtName?, codeChannel, valGhostFreq?, uomGhostFreq?, valDeclination?, valMagVar?, dateMagVar?, codeEm?, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, valElev?, valElevAccuracy?, valGeoidUndulation?, uomDistVer?, valCrc?, txtVerDatum?, Ttt?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual valDistHorz valGeoAccuracy {
            get {
                XElement x = this.GetElement(valGeoAccuracyXName);
                return ((valDistHorz)(x));
            }
            set {
                this.SetElement(valGeoAccuracyXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Unit of measurement [geographical accuracy]
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (TcnUid, OrgUid, VorUid?, txtName?, codeChannel, valGhostFreq?, uomGhostFreq?, valDeclination?, valMagVar?, dateMagVar?, codeEm?, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, valElev?, valElevAccuracy?, valGeoidUndulation?, uomDistVer?, valCrc?, txtVerDatum?, Ttt?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual uomDistHorz uomGeoAccuracy {
            get {
                XElement x = this.GetElement(uomGeoAccuracyXName);
                return ((uomDistHorz)(x));
            }
            set {
                this.SetElement(uomGeoAccuracyXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Elevation
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (TcnUid, OrgUid, VorUid?, txtName?, codeChannel, valGhostFreq?, uomGhostFreq?, valDeclination?, valMagVar?, dateMagVar?, codeEm?, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, valElev?, valElevAccuracy?, valGeoidUndulation?, uomDistVer?, valCrc?, txtVerDatum?, Ttt?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual valDistVer valElev {
            get {
                XElement x = this.GetElement(valElevXName);
                return ((valDistVer)(x));
            }
            set {
                this.SetElement(valElevXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Elevation accuracy
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (TcnUid, OrgUid, VorUid?, txtName?, codeChannel, valGhostFreq?, uomGhostFreq?, valDeclination?, valMagVar?, dateMagVar?, codeEm?, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, valElev?, valElevAccuracy?, valGeoidUndulation?, uomDistVer?, valCrc?, txtVerDatum?, Ttt?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual valDistVer valElevAccuracy {
            get {
                XElement x = this.GetElement(valElevAccuracyXName);
                return ((valDistVer)(x));
            }
            set {
                this.SetElement(valElevAccuracyXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Geoid undulation
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (TcnUid, OrgUid, VorUid?, txtName?, codeChannel, valGhostFreq?, uomGhostFreq?, valDeclination?, valMagVar?, dateMagVar?, codeEm?, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, valElev?, valElevAccuracy?, valGeoidUndulation?, uomDistVer?, valCrc?, txtVerDatum?, Ttt?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual valDistVer valGeoidUndulation {
            get {
                XElement x = this.GetElement(valGeoidUndulationXName);
                return ((valDistVer)(x));
            }
            set {
                this.SetElement(valGeoidUndulationXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Unit of measurement [vertical distance]
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (TcnUid, OrgUid, VorUid?, txtName?, codeChannel, valGhostFreq?, uomGhostFreq?, valDeclination?, valMagVar?, dateMagVar?, codeEm?, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, valElev?, valElevAccuracy?, valGeoidUndulation?, uomDistVer?, valCrc?, txtVerDatum?, Ttt?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual uomElev uomDistVer {
            get {
                XElement x = this.GetElement(uomDistVerXName);
                return ((uomElev)(x));
            }
            set {
                this.SetElement(uomDistVerXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Cyclic redundancy check
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (TcnUid, OrgUid, VorUid?, txtName?, codeChannel, valGhostFreq?, uomGhostFreq?, valDeclination?, valMagVar?, dateMagVar?, codeEm?, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, valElev?, valElevAccuracy?, valGeoidUndulation?, uomDistVer?, valCrc?, txtVerDatum?, Ttt?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual valHex valCrc {
            get {
                XElement x = this.GetElement(valCrcXName);
                return ((valHex)(x));
            }
            set {
                this.SetElement(valCrcXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Vertical Datum
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (TcnUid, OrgUid, VorUid?, txtName?, codeChannel, valGhostFreq?, uomGhostFreq?, valDeclination?, valMagVar?, dateMagVar?, codeEm?, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, valElev?, valElevAccuracy?, valGeoidUndulation?, uomDistVer?, valCrc?, txtVerDatum?, Ttt?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual txtDescr txtVerDatum {
            get {
                XElement x = this.GetElement(txtVerDatumXName);
                return ((txtDescr)(x));
            }
            set {
                this.SetElement(txtVerDatumXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// TACAN is operating according to TACAN - Timetable
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (TcnUid, OrgUid, VorUid?, txtName?, codeChannel, valGhostFreq?, uomGhostFreq?, valDeclination?, valMagVar?, dateMagVar?, codeEm?, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, valElev?, valElevAccuracy?, valGeoidUndulation?, uomDistVer?, valCrc?, txtVerDatum?, Ttt?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual TimetableNavaidType Ttt {
            get {
                XElement x = this.GetElement(TttXName);
                return ((TimetableNavaidType)(x));
            }
            set {
                this.SetElement(TttXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Remark
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (TcnUid, OrgUid, VorUid?, txtName?, codeChannel, valGhostFreq?, uomGhostFreq?, valDeclination?, valMagVar?, dateMagVar?, codeEm?, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, valElev?, valElevAccuracy?, valGeoidUndulation?, uomDistVer?, valCrc?, txtVerDatum?, Ttt?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual txtRmk txtRmk {
            get {
                XElement x = this.GetElement(txtRmkXName);
                return ((txtRmk)(x));
            }
            set {
                this.SetElement(txtRmkXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string source {
            get {
                XAttribute x = this.Attribute(sourceXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(sourceXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<TacanType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(TcnUidXName, typeof(TacanUidType));
            localElementDictionary.Add(OrgUidXName, typeof(OrganisationAuthorityUidType));
            localElementDictionary.Add(VorUidXName, typeof(VorUidType));
            localElementDictionary.Add(txtNameXName, typeof(txtName));
            localElementDictionary.Add(codeChannelXName, typeof(codeChannelTacan));
            localElementDictionary.Add(valGhostFreqXName, typeof(valFreq));
            localElementDictionary.Add(uomGhostFreqXName, typeof(uomFreq));
            localElementDictionary.Add(valDeclinationXName, typeof(valAngleMagVar));
            localElementDictionary.Add(valMagVarXName, typeof(valAngleMagVar));
            localElementDictionary.Add(dateMagVarXName, typeof(dateYear));
            localElementDictionary.Add(codeEmXName, typeof(codeEmRdo));
            localElementDictionary.Add(codeDatumXName, typeof(codeDatum));
            localElementDictionary.Add(valGeoAccuracyXName, typeof(valDistHorz));
            localElementDictionary.Add(uomGeoAccuracyXName, typeof(uomDistHorz));
            localElementDictionary.Add(valElevXName, typeof(valDistVer));
            localElementDictionary.Add(valElevAccuracyXName, typeof(valDistVer));
            localElementDictionary.Add(valGeoidUndulationXName, typeof(valDistVer));
            localElementDictionary.Add(uomDistVerXName, typeof(uomElev));
            localElementDictionary.Add(valCrcXName, typeof(valHex));
            localElementDictionary.Add(txtVerDatumXName, typeof(txtDescr));
            localElementDictionary.Add(TttXName, typeof(TimetableNavaidType));
            localElementDictionary.Add(txtRmkXName, typeof(txtRmk));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Tactical air navigation beacon [TACAN] - UID
    /// </para>
    /// <para>
    /// Regular expression: (codeId, geoLat, geoLong)
    /// </para>
    /// </summary>
    public partial class TacanUidType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName codeIdXName = System.Xml.Linq.XName.Get("codeId", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName geoLatXName = System.Xml.Linq.XName.Get("geoLat", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName geoLongXName = System.Xml.Linq.XName.Get("geoLong", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName midXName = System.Xml.Linq.XName.Get("mid", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName regionXName = System.Xml.Linq.XName.Get("region", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("TacanUidType", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator TacanUidType(XElement xe) { return XTypedServices.ToXTypedElement<TacanUidType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static TacanUidType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(codeIdXName), new NamedContentModelEntity(geoLatXName), new NamedContentModelEntity(geoLongXName));
        }
        
        /// <summary>
        /// <para>
        /// Tactical air navigation beacon [TACAN] - UID
        /// </para>
        /// <para>
        /// Regular expression: (codeId, geoLat, geoLong)
        /// </para>
        /// </summary>
        public TacanUidType() {
        }
        
        /// <summary>
        /// <para>
        /// Identification
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (codeId, geoLat, geoLong)
        /// </para>
        /// </summary>
        public virtual codeIdNavAid codeId {
            get {
                XElement x = this.GetElement(codeIdXName);
                return ((codeIdNavAid)(x));
            }
            set {
                this.SetElement(codeIdXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Latitude
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (codeId, geoLat, geoLong)
        /// </para>
        /// </summary>
        public virtual geoLat geoLat {
            get {
                XElement x = this.GetElement(geoLatXName);
                return ((geoLat)(x));
            }
            set {
                this.SetElement(geoLatXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Longitude
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (codeId, geoLat, geoLong)
        /// </para>
        /// </summary>
        public virtual geoLong geoLong {
            get {
                XElement x = this.GetElement(geoLongXName);
                return ((geoLong)(x));
            }
            set {
                this.SetElement(geoLongXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string mid {
            get {
                XAttribute x = this.Attribute(midXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(midXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual string region {
            get {
                XAttribute x = this.Attribute(regionXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(regionXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<TacanUidType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(codeIdXName, typeof(codeIdNavAid));
            localElementDictionary.Add(geoLatXName, typeof(geoLat));
            localElementDictionary.Add(geoLongXName, typeof(geoLong));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// TACAN usage limitation
    /// </para>
    /// <para>
    /// Regular expression: (TliUid, txtRmk?, UsageLimit*)
    /// </para>
    /// </summary>
    public partial class TacanUsageLimitationType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TliUidXName = System.Xml.Linq.XName.Get("TliUid", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName txtRmkXName = System.Xml.Linq.XName.Get("txtRmk", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName UsageLimitXName = System.Xml.Linq.XName.Get("UsageLimit", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<NavaidLimitationType> UsageLimitField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName sourceXName = System.Xml.Linq.XName.Get("source", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("TacanUsageLimitationType", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator TacanUsageLimitationType(XElement xe) { return XTypedServices.ToXTypedElement<TacanUsageLimitationType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static TacanUsageLimitationType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(TliUidXName), new NamedContentModelEntity(txtRmkXName), new NamedContentModelEntity(UsageLimitXName));
        }
        
        /// <summary>
        /// <para>
        /// TACAN usage limitation
        /// </para>
        /// <para>
        /// Regular expression: (TliUid, txtRmk?, UsageLimit*)
        /// </para>
        /// </summary>
        public TacanUsageLimitationType() {
        }
        
        /// <summary>
        /// <para>
        /// a version of TACAN usage limitation
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (TliUid, txtRmk?, UsageLimit*)
        /// </para>
        /// </summary>
        public virtual TacanUsageLimitationUidType TliUid {
            get {
                XElement x = this.GetElement(TliUidXName);
                return ((TacanUsageLimitationUidType)(x));
            }
            set {
                this.SetElement(TliUidXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Remarks
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (TliUid, txtRmk?, UsageLimit*)
        /// </para>
        /// </summary>
        public virtual txtRmk txtRmk {
            get {
                XElement x = this.GetElement(txtRmkXName);
                return ((txtRmk)(x));
            }
            set {
                this.SetElement(txtRmkXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (TliUid, txtRmk?, UsageLimit*)
        /// </para>
        /// </summary>
        public virtual IList<NavaidLimitationType> UsageLimit {
            get {
                if ((this.UsageLimitField == null)) {
                    this.UsageLimitField = new XTypedList<NavaidLimitationType>(this, LinqToXsdTypeManager.Instance, UsageLimitXName);
                }
                return this.UsageLimitField;
            }
            set {
                if ((value == null)) {
                    this.UsageLimitField = null;
                }
                else {
                    if ((this.UsageLimitField == null)) {
                        this.UsageLimitField = XTypedList<NavaidLimitationType>.Initialize(this, LinqToXsdTypeManager.Instance, value, UsageLimitXName);
                    }
                    else {
                        XTypedServices.SetList<NavaidLimitationType>(this.UsageLimitField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string source {
            get {
                XAttribute x = this.Attribute(sourceXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(sourceXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<TacanUsageLimitationType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(TliUidXName, typeof(TacanUsageLimitationUidType));
            localElementDictionary.Add(txtRmkXName, typeof(txtRmk));
            localElementDictionary.Add(UsageLimitXName, typeof(NavaidLimitationType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// TACAN Usage Limitation - UID
    /// </para>
    /// <para>
    /// Regular expression: (TcnUid, codeType, codeComp)
    /// </para>
    /// </summary>
    public partial class TacanUsageLimitationUidType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TcnUidXName = System.Xml.Linq.XName.Get("TcnUid", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName codeTypeXName = System.Xml.Linq.XName.Get("codeType", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName codeCompXName = System.Xml.Linq.XName.Get("codeComp", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName midXName = System.Xml.Linq.XName.Get("mid", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("TacanUsageLimitationUidType", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator TacanUsageLimitationUidType(XElement xe) { return XTypedServices.ToXTypedElement<TacanUsageLimitationUidType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static TacanUsageLimitationUidType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(TcnUidXName), new NamedContentModelEntity(codeTypeXName), new NamedContentModelEntity(codeCompXName));
        }
        
        /// <summary>
        /// <para>
        /// TACAN Usage Limitation - UID
        /// </para>
        /// <para>
        /// Regular expression: (TcnUid, codeType, codeComp)
        /// </para>
        /// </summary>
        public TacanUsageLimitationUidType() {
        }
        
        /// <summary>
        /// <para>
        /// Tacan Usage Limitation is limiting the use of one Tacan
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (TcnUid, codeType, codeComp)
        /// </para>
        /// </summary>
        public virtual TacanUidType TcnUid {
            get {
                XElement x = this.GetElement(TcnUidXName);
                return ((TacanUidType)(x));
            }
            set {
                this.SetElement(TcnUidXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Limitation Type
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (TcnUid, codeType, codeComp)
        /// </para>
        /// </summary>
        public virtual codeTypeNavAidLimit codeType {
            get {
                XElement x = this.GetElement(codeTypeXName);
                return ((codeTypeNavAidLimit)(x));
            }
            set {
                this.SetElement(codeTypeXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Component
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (TcnUid, codeType, codeComp)
        /// </para>
        /// </summary>
        public virtual codeComponentTacan codeComp {
            get {
                XElement x = this.GetElement(codeCompXName);
                return ((codeComponentTacan)(x));
            }
            set {
                this.SetElement(codeCompXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string mid {
            get {
                XAttribute x = this.Attribute(midXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(midXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<TacanUsageLimitationUidType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(TcnUidXName, typeof(TacanUidType));
            localElementDictionary.Add(codeTypeXName, typeof(codeTypeNavAidLimit));
            localElementDictionary.Add(codeCompXName, typeof(codeComponentTacan));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Position on the centre line of a TWY
    /// </para>
    /// <para>
    /// Regular expression: (TcpUid, noSeq, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, valElev?, valElevAccuracy?, valGeoidUndulation?, uomDistVer?, valCrc?, txtVerDatum?, txtRmk?)
    /// </para>
    /// </summary>
    public partial class TaxiwayCentreLinePositionType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TcpUidXName = System.Xml.Linq.XName.Get("TcpUid", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName noSeqXName = System.Xml.Linq.XName.Get("noSeq", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName codeDatumXName = System.Xml.Linq.XName.Get("codeDatum", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName valGeoAccuracyXName = System.Xml.Linq.XName.Get("valGeoAccuracy", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName uomGeoAccuracyXName = System.Xml.Linq.XName.Get("uomGeoAccuracy", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName valElevXName = System.Xml.Linq.XName.Get("valElev", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName valElevAccuracyXName = System.Xml.Linq.XName.Get("valElevAccuracy", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName valGeoidUndulationXName = System.Xml.Linq.XName.Get("valGeoidUndulation", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName uomDistVerXName = System.Xml.Linq.XName.Get("uomDistVer", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName valCrcXName = System.Xml.Linq.XName.Get("valCrc", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName txtVerDatumXName = System.Xml.Linq.XName.Get("txtVerDatum", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName txtRmkXName = System.Xml.Linq.XName.Get("txtRmk", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName sourceXName = System.Xml.Linq.XName.Get("source", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("TaxiwayCentreLinePositionType", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator TaxiwayCentreLinePositionType(XElement xe) { return XTypedServices.ToXTypedElement<TaxiwayCentreLinePositionType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static TaxiwayCentreLinePositionType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(TcpUidXName), new NamedContentModelEntity(noSeqXName), new NamedContentModelEntity(codeDatumXName), new NamedContentModelEntity(valGeoAccuracyXName), new NamedContentModelEntity(uomGeoAccuracyXName), new NamedContentModelEntity(valElevXName), new NamedContentModelEntity(valElevAccuracyXName), new NamedContentModelEntity(valGeoidUndulationXName), new NamedContentModelEntity(uomDistVerXName), new NamedContentModelEntity(valCrcXName), new NamedContentModelEntity(txtVerDatumXName), new NamedContentModelEntity(txtRmkXName));
        }
        
        /// <summary>
        /// <para>
        /// Position on the centre line of a TWY
        /// </para>
        /// <para>
        /// Regular expression: (TcpUid, noSeq, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, valElev?, valElevAccuracy?, valGeoidUndulation?, uomDistVer?, valCrc?, txtVerDatum?, txtRmk?)
        /// </para>
        /// </summary>
        public TaxiwayCentreLinePositionType() {
        }
        
        /// <summary>
        /// <para>
        /// a version of Position on the centre line of a TWY
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (TcpUid, noSeq, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, valElev?, valElevAccuracy?, valGeoidUndulation?, uomDistVer?, valCrc?, txtVerDatum?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual TaxiwayCentreLinePositionUidType TcpUid {
            get {
                XElement x = this.GetElement(TcpUidXName);
                return ((TaxiwayCentreLinePositionUidType)(x));
            }
            set {
                this.SetElement(TcpUidXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Sequence number
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (TcpUid, noSeq, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, valElev?, valElevAccuracy?, valGeoidUndulation?, uomDistVer?, valCrc?, txtVerDatum?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual noSeq noSeq {
            get {
                XElement x = this.GetElement(noSeqXName);
                return ((noSeq)(x));
            }
            set {
                this.SetElement(noSeqXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Datum
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (TcpUid, noSeq, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, valElev?, valElevAccuracy?, valGeoidUndulation?, uomDistVer?, valCrc?, txtVerDatum?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual codeDatum codeDatum {
            get {
                XElement x = this.GetElement(codeDatumXName);
                return ((codeDatum)(x));
            }
            set {
                this.SetElement(codeDatumXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Geographical accuracy
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (TcpUid, noSeq, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, valElev?, valElevAccuracy?, valGeoidUndulation?, uomDistVer?, valCrc?, txtVerDatum?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual valDistHorz valGeoAccuracy {
            get {
                XElement x = this.GetElement(valGeoAccuracyXName);
                return ((valDistHorz)(x));
            }
            set {
                this.SetElement(valGeoAccuracyXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Unit of measurement [geographical accuracy]
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (TcpUid, noSeq, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, valElev?, valElevAccuracy?, valGeoidUndulation?, uomDistVer?, valCrc?, txtVerDatum?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual uomDistHorz uomGeoAccuracy {
            get {
                XElement x = this.GetElement(uomGeoAccuracyXName);
                return ((uomDistHorz)(x));
            }
            set {
                this.SetElement(uomGeoAccuracyXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Elevation
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (TcpUid, noSeq, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, valElev?, valElevAccuracy?, valGeoidUndulation?, uomDistVer?, valCrc?, txtVerDatum?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual valDistVer valElev {
            get {
                XElement x = this.GetElement(valElevXName);
                return ((valDistVer)(x));
            }
            set {
                this.SetElement(valElevXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Elevation accuracy
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (TcpUid, noSeq, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, valElev?, valElevAccuracy?, valGeoidUndulation?, uomDistVer?, valCrc?, txtVerDatum?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual valDistVer valElevAccuracy {
            get {
                XElement x = this.GetElement(valElevAccuracyXName);
                return ((valDistVer)(x));
            }
            set {
                this.SetElement(valElevAccuracyXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Geoid undulation
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (TcpUid, noSeq, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, valElev?, valElevAccuracy?, valGeoidUndulation?, uomDistVer?, valCrc?, txtVerDatum?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual valDistVer valGeoidUndulation {
            get {
                XElement x = this.GetElement(valGeoidUndulationXName);
                return ((valDistVer)(x));
            }
            set {
                this.SetElement(valGeoidUndulationXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Unit of measurement [vertical distance]
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (TcpUid, noSeq, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, valElev?, valElevAccuracy?, valGeoidUndulation?, uomDistVer?, valCrc?, txtVerDatum?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual uomElev uomDistVer {
            get {
                XElement x = this.GetElement(uomDistVerXName);
                return ((uomElev)(x));
            }
            set {
                this.SetElement(uomDistVerXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Cyclic redundancy check
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (TcpUid, noSeq, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, valElev?, valElevAccuracy?, valGeoidUndulation?, uomDistVer?, valCrc?, txtVerDatum?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual valHex valCrc {
            get {
                XElement x = this.GetElement(valCrcXName);
                return ((valHex)(x));
            }
            set {
                this.SetElement(valCrcXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Vertical Datum
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (TcpUid, noSeq, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, valElev?, valElevAccuracy?, valGeoidUndulation?, uomDistVer?, valCrc?, txtVerDatum?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual txtDescr txtVerDatum {
            get {
                XElement x = this.GetElement(txtVerDatumXName);
                return ((txtDescr)(x));
            }
            set {
                this.SetElement(txtVerDatumXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Remark
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (TcpUid, noSeq, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, valElev?, valElevAccuracy?, valGeoidUndulation?, uomDistVer?, valCrc?, txtVerDatum?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual txtRmk txtRmk {
            get {
                XElement x = this.GetElement(txtRmkXName);
                return ((txtRmk)(x));
            }
            set {
                this.SetElement(txtRmkXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string source {
            get {
                XAttribute x = this.Attribute(sourceXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(sourceXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<TaxiwayCentreLinePositionType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(TcpUidXName, typeof(TaxiwayCentreLinePositionUidType));
            localElementDictionary.Add(noSeqXName, typeof(noSeq));
            localElementDictionary.Add(codeDatumXName, typeof(codeDatum));
            localElementDictionary.Add(valGeoAccuracyXName, typeof(valDistHorz));
            localElementDictionary.Add(uomGeoAccuracyXName, typeof(uomDistHorz));
            localElementDictionary.Add(valElevXName, typeof(valDistVer));
            localElementDictionary.Add(valElevAccuracyXName, typeof(valDistVer));
            localElementDictionary.Add(valGeoidUndulationXName, typeof(valDistVer));
            localElementDictionary.Add(uomDistVerXName, typeof(uomElev));
            localElementDictionary.Add(valCrcXName, typeof(valHex));
            localElementDictionary.Add(txtVerDatumXName, typeof(txtDescr));
            localElementDictionary.Add(txtRmkXName, typeof(txtRmk));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Position on the centre line of a TWY - UID
    /// </para>
    /// <para>
    /// Regular expression: (TwyUid, geoLat, geoLong)
    /// </para>
    /// </summary>
    public partial class TaxiwayCentreLinePositionUidType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TwyUidXName = System.Xml.Linq.XName.Get("TwyUid", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName geoLatXName = System.Xml.Linq.XName.Get("geoLat", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName geoLongXName = System.Xml.Linq.XName.Get("geoLong", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName midXName = System.Xml.Linq.XName.Get("mid", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("TaxiwayCentreLinePositionUidType", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator TaxiwayCentreLinePositionUidType(XElement xe) { return XTypedServices.ToXTypedElement<TaxiwayCentreLinePositionUidType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static TaxiwayCentreLinePositionUidType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(TwyUidXName), new NamedContentModelEntity(geoLatXName), new NamedContentModelEntity(geoLongXName));
        }
        
        /// <summary>
        /// <para>
        /// Position on the centre line of a TWY - UID
        /// </para>
        /// <para>
        /// Regular expression: (TwyUid, geoLat, geoLong)
        /// </para>
        /// </summary>
        public TaxiwayCentreLinePositionUidType() {
        }
        
        /// <summary>
        /// <para>
        /// Position on the centre line of a TWY is on the centreline of Taxiway [TWY]
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (TwyUid, geoLat, geoLong)
        /// </para>
        /// </summary>
        public virtual TaxiwayUidType TwyUid {
            get {
                XElement x = this.GetElement(TwyUidXName);
                return ((TaxiwayUidType)(x));
            }
            set {
                this.SetElement(TwyUidXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Latitude
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (TwyUid, geoLat, geoLong)
        /// </para>
        /// </summary>
        public virtual geoLat geoLat {
            get {
                XElement x = this.GetElement(geoLatXName);
                return ((geoLat)(x));
            }
            set {
                this.SetElement(geoLatXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Longitude
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (TwyUid, geoLat, geoLong)
        /// </para>
        /// </summary>
        public virtual geoLong geoLong {
            get {
                XElement x = this.GetElement(geoLongXName);
                return ((geoLong)(x));
            }
            set {
                this.SetElement(geoLongXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string mid {
            get {
                XAttribute x = this.Attribute(midXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(midXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<TaxiwayCentreLinePositionUidType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(TwyUidXName, typeof(TaxiwayUidType));
            localElementDictionary.Add(geoLatXName, typeof(geoLat));
            localElementDictionary.Add(geoLongXName, typeof(geoLong));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// TWY holding position
    /// </para>
    /// <para>
    /// Regular expression: (ThpUid, txtMarking?, txtLgt?, txtRmk?)
    /// </para>
    /// </summary>
    public partial class TaxiwayHoldingPositionType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ThpUidXName = System.Xml.Linq.XName.Get("ThpUid", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName txtMarkingXName = System.Xml.Linq.XName.Get("txtMarking", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName txtLgtXName = System.Xml.Linq.XName.Get("txtLgt", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName txtRmkXName = System.Xml.Linq.XName.Get("txtRmk", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName sourceXName = System.Xml.Linq.XName.Get("source", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("TaxiwayHoldingPositionType", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator TaxiwayHoldingPositionType(XElement xe) { return XTypedServices.ToXTypedElement<TaxiwayHoldingPositionType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static TaxiwayHoldingPositionType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(ThpUidXName), new NamedContentModelEntity(txtMarkingXName), new NamedContentModelEntity(txtLgtXName), new NamedContentModelEntity(txtRmkXName));
        }
        
        /// <summary>
        /// <para>
        /// TWY holding position
        /// </para>
        /// <para>
        /// Regular expression: (ThpUid, txtMarking?, txtLgt?, txtRmk?)
        /// </para>
        /// </summary>
        public TaxiwayHoldingPositionType() {
        }
        
        /// <summary>
        /// <para>
        /// a version of TWY holding position
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (ThpUid, txtMarking?, txtLgt?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual TaxiwayHoldingPositionUidType ThpUid {
            get {
                XElement x = this.GetElement(ThpUidXName);
                return ((TaxiwayHoldingPositionUidType)(x));
            }
            set {
                this.SetElement(ThpUidXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Marking system description
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (ThpUid, txtMarking?, txtLgt?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual txtDescr txtMarking {
            get {
                XElement x = this.GetElement(txtMarkingXName);
                return ((txtDescr)(x));
            }
            set {
                this.SetElement(txtMarkingXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Lighting system description
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (ThpUid, txtMarking?, txtLgt?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual txtDescr txtLgt {
            get {
                XElement x = this.GetElement(txtLgtXName);
                return ((txtDescr)(x));
            }
            set {
                this.SetElement(txtLgtXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Remark
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (ThpUid, txtMarking?, txtLgt?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual txtRmk txtRmk {
            get {
                XElement x = this.GetElement(txtRmkXName);
                return ((txtRmk)(x));
            }
            set {
                this.SetElement(txtRmkXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string source {
            get {
                XAttribute x = this.Attribute(sourceXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(sourceXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<TaxiwayHoldingPositionType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(ThpUidXName, typeof(TaxiwayHoldingPositionUidType));
            localElementDictionary.Add(txtMarkingXName, typeof(txtDescr));
            localElementDictionary.Add(txtLgtXName, typeof(txtDescr));
            localElementDictionary.Add(txtRmkXName, typeof(txtRmk));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// TWY holding position - UID
    /// </para>
    /// <para>
    /// Regular expression: (TcpUid)
    /// </para>
    /// </summary>
    public partial class TaxiwayHoldingPositionUidType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TcpUidXName = System.Xml.Linq.XName.Get("TcpUid", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName midXName = System.Xml.Linq.XName.Get("mid", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("TaxiwayHoldingPositionUidType", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator TaxiwayHoldingPositionUidType(XElement xe) { return XTypedServices.ToXTypedElement<TaxiwayHoldingPositionUidType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static TaxiwayHoldingPositionUidType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(TcpUidXName));
        }
        
        /// <summary>
        /// <para>
        /// TWY holding position - UID
        /// </para>
        /// <para>
        /// Regular expression: (TcpUid)
        /// </para>
        /// </summary>
        public TaxiwayHoldingPositionUidType() {
        }
        
        /// <summary>
        /// <para>
        /// TWY holding position is at Position on the centre line of a TWY
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (TcpUid)
        /// </para>
        /// </summary>
        public virtual TaxiwayCentreLinePositionUidType TcpUid {
            get {
                XElement x = this.GetElement(TcpUidXName);
                return ((TaxiwayCentreLinePositionUidType)(x));
            }
            set {
                this.SetElement(TcpUidXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string mid {
            get {
                XAttribute x = this.Attribute(midXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(midXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<TaxiwayHoldingPositionUidType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(TcpUidXName, typeof(TaxiwayCentreLinePositionUidType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// TWY lighting system
    /// </para>
    /// <para>
    /// Regular expression: (TlyUid, txtDescr?, txtDescrEmerg?, codeIntst?, codeColour?, txtRmk?, Tyg*)
    /// </para>
    /// </summary>
    public partial class TaxiwayLightingSystemType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TlyUidXName = System.Xml.Linq.XName.Get("TlyUid", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName txtDescrXName = System.Xml.Linq.XName.Get("txtDescr", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName txtDescrEmergXName = System.Xml.Linq.XName.Get("txtDescrEmerg", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName codeIntstXName = System.Xml.Linq.XName.Get("codeIntst", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName codeColourXName = System.Xml.Linq.XName.Get("codeColour", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName txtRmkXName = System.Xml.Linq.XName.Get("txtRmk", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TygXName = System.Xml.Linq.XName.Get("Tyg", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<LightGroupType> TygField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName sourceXName = System.Xml.Linq.XName.Get("source", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("TaxiwayLightingSystemType", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator TaxiwayLightingSystemType(XElement xe) { return XTypedServices.ToXTypedElement<TaxiwayLightingSystemType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static TaxiwayLightingSystemType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(TlyUidXName), new NamedContentModelEntity(txtDescrXName), new NamedContentModelEntity(txtDescrEmergXName), new NamedContentModelEntity(codeIntstXName), new NamedContentModelEntity(codeColourXName), new NamedContentModelEntity(txtRmkXName), new NamedContentModelEntity(TygXName));
        }
        
        /// <summary>
        /// <para>
        /// TWY lighting system
        /// </para>
        /// <para>
        /// Regular expression: (TlyUid, txtDescr?, txtDescrEmerg?, codeIntst?, codeColour?, txtRmk?, Tyg*)
        /// </para>
        /// </summary>
        public TaxiwayLightingSystemType() {
        }
        
        /// <summary>
        /// <para>
        /// a version of TWY lighting system
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (TlyUid, txtDescr?, txtDescrEmerg?, codeIntst?, codeColour?, txtRmk?, Tyg*)
        /// </para>
        /// </summary>
        public virtual TaxiwayLightingSystemUidType TlyUid {
            get {
                XElement x = this.GetElement(TlyUidXName);
                return ((TaxiwayLightingSystemUidType)(x));
            }
            set {
                this.SetElement(TlyUidXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Description
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (TlyUid, txtDescr?, txtDescrEmerg?, codeIntst?, codeColour?, txtRmk?, Tyg*)
        /// </para>
        /// </summary>
        public virtual txtDescr txtDescr {
            get {
                XElement x = this.GetElement(txtDescrXName);
                return ((txtDescr)(x));
            }
            set {
                this.SetElement(txtDescrXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Availability of emergency lighting system description
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (TlyUid, txtDescr?, txtDescrEmerg?, codeIntst?, codeColour?, txtRmk?, Tyg*)
        /// </para>
        /// </summary>
        public virtual txtDescr txtDescrEmerg {
            get {
                XElement x = this.GetElement(txtDescrEmergXName);
                return ((txtDescr)(x));
            }
            set {
                this.SetElement(txtDescrEmergXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Intensity
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (TlyUid, txtDescr?, txtDescrEmerg?, codeIntst?, codeColour?, txtRmk?, Tyg*)
        /// </para>
        /// </summary>
        public virtual codeIntstLgt codeIntst {
            get {
                XElement x = this.GetElement(codeIntstXName);
                return ((codeIntstLgt)(x));
            }
            set {
                this.SetElement(codeIntstXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Colour
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (TlyUid, txtDescr?, txtDescrEmerg?, codeIntst?, codeColour?, txtRmk?, Tyg*)
        /// </para>
        /// </summary>
        public virtual codeColour codeColour {
            get {
                XElement x = this.GetElement(codeColourXName);
                return ((codeColour)(x));
            }
            set {
                this.SetElement(codeColourXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Remark
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (TlyUid, txtDescr?, txtDescrEmerg?, codeIntst?, codeColour?, txtRmk?, Tyg*)
        /// </para>
        /// </summary>
        public virtual txtRmk txtRmk {
            get {
                XElement x = this.GetElement(txtRmkXName);
                return ((txtRmk)(x));
            }
            set {
                this.SetElement(txtRmkXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// TWY lighting system is composed of Group of ligthing system
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (TlyUid, txtDescr?, txtDescrEmerg?, codeIntst?, codeColour?, txtRmk?, Tyg*)
        /// </para>
        /// </summary>
        public virtual IList<LightGroupType> Tyg {
            get {
                if ((this.TygField == null)) {
                    this.TygField = new XTypedList<LightGroupType>(this, LinqToXsdTypeManager.Instance, TygXName);
                }
                return this.TygField;
            }
            set {
                if ((value == null)) {
                    this.TygField = null;
                }
                else {
                    if ((this.TygField == null)) {
                        this.TygField = XTypedList<LightGroupType>.Initialize(this, LinqToXsdTypeManager.Instance, value, TygXName);
                    }
                    else {
                        XTypedServices.SetList<LightGroupType>(this.TygField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string source {
            get {
                XAttribute x = this.Attribute(sourceXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(sourceXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<TaxiwayLightingSystemType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(TlyUidXName, typeof(TaxiwayLightingSystemUidType));
            localElementDictionary.Add(txtDescrXName, typeof(txtDescr));
            localElementDictionary.Add(txtDescrEmergXName, typeof(txtDescr));
            localElementDictionary.Add(codeIntstXName, typeof(codeIntstLgt));
            localElementDictionary.Add(codeColourXName, typeof(codeColour));
            localElementDictionary.Add(txtRmkXName, typeof(txtRmk));
            localElementDictionary.Add(TygXName, typeof(LightGroupType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// TWY lighting system - UID
    /// </para>
    /// <para>
    /// Regular expression: (TwyUid, codePsn)
    /// </para>
    /// </summary>
    public partial class TaxiwayLightingSystemUidType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TwyUidXName = System.Xml.Linq.XName.Get("TwyUid", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName codePsnXName = System.Xml.Linq.XName.Get("codePsn", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName midXName = System.Xml.Linq.XName.Get("mid", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("TaxiwayLightingSystemUidType", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator TaxiwayLightingSystemUidType(XElement xe) { return XTypedServices.ToXTypedElement<TaxiwayLightingSystemUidType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static TaxiwayLightingSystemUidType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(TwyUidXName), new NamedContentModelEntity(codePsnXName));
        }
        
        /// <summary>
        /// <para>
        /// TWY lighting system - UID
        /// </para>
        /// <para>
        /// Regular expression: (TwyUid, codePsn)
        /// </para>
        /// </summary>
        public TaxiwayLightingSystemUidType() {
        }
        
        /// <summary>
        /// <para>
        /// TWY lighting system is owned by Taxiway [TWY]
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (TwyUid, codePsn)
        /// </para>
        /// </summary>
        public virtual TaxiwayUidType TwyUid {
            get {
                XElement x = this.GetElement(TwyUidXName);
                return ((TaxiwayUidType)(x));
            }
            set {
                this.SetElement(TwyUidXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Part
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (TwyUid, codePsn)
        /// </para>
        /// </summary>
        public virtual codePsnTwy codePsn {
            get {
                XElement x = this.GetElement(codePsnXName);
                return ((codePsnTwy)(x));
            }
            set {
                this.SetElement(codePsnXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string mid {
            get {
                XAttribute x = this.Attribute(midXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(midXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<TaxiwayLightingSystemUidType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(TwyUidXName, typeof(TaxiwayUidType));
            localElementDictionary.Add(codePsnXName, typeof(codePsnTwy));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// TWY
    /// </para>
    /// <para>
    /// Regular expression: (TwyUid, codeType, valWid?, uomWid?, codeComposition?, codePreparation?, codeCondSfc?, valPcnClass?, codePcnPavementType?, codePcnPavementSubgrade?, codePcnMaxTirePressure?, valPcnMaxTirePressure?, codePcnEvalMethod?, txtPcnNote?, valLcnClass?, valSiwlWeight?, uomSiwlWeight?, valSiwlTirePressure?, uomSiwlTirePressure?, valAuwWeight?, uomAuwWeight?, codeStrength?, txtDescrStrength?, codeSts?, txtMarking?, txtRmk?)
    /// </para>
    /// </summary>
    public partial class TaxiwayType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TwyUidXName = System.Xml.Linq.XName.Get("TwyUid", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName codeTypeXName = System.Xml.Linq.XName.Get("codeType", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName valWidXName = System.Xml.Linq.XName.Get("valWid", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName uomWidXName = System.Xml.Linq.XName.Get("uomWid", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName codeCompositionXName = System.Xml.Linq.XName.Get("codeComposition", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName codePreparationXName = System.Xml.Linq.XName.Get("codePreparation", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName codeCondSfcXName = System.Xml.Linq.XName.Get("codeCondSfc", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName valPcnClassXName = System.Xml.Linq.XName.Get("valPcnClass", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName codePcnPavementTypeXName = System.Xml.Linq.XName.Get("codePcnPavementType", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName codePcnPavementSubgradeXName = System.Xml.Linq.XName.Get("codePcnPavementSubgrade", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName codePcnMaxTirePressureXName = System.Xml.Linq.XName.Get("codePcnMaxTirePressure", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName valPcnMaxTirePressureXName = System.Xml.Linq.XName.Get("valPcnMaxTirePressure", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName codePcnEvalMethodXName = System.Xml.Linq.XName.Get("codePcnEvalMethod", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName txtPcnNoteXName = System.Xml.Linq.XName.Get("txtPcnNote", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName valLcnClassXName = System.Xml.Linq.XName.Get("valLcnClass", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName valSiwlWeightXName = System.Xml.Linq.XName.Get("valSiwlWeight", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName uomSiwlWeightXName = System.Xml.Linq.XName.Get("uomSiwlWeight", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName valSiwlTirePressureXName = System.Xml.Linq.XName.Get("valSiwlTirePressure", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName uomSiwlTirePressureXName = System.Xml.Linq.XName.Get("uomSiwlTirePressure", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName valAuwWeightXName = System.Xml.Linq.XName.Get("valAuwWeight", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName uomAuwWeightXName = System.Xml.Linq.XName.Get("uomAuwWeight", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName codeStrengthXName = System.Xml.Linq.XName.Get("codeStrength", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName txtDescrStrengthXName = System.Xml.Linq.XName.Get("txtDescrStrength", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName codeStsXName = System.Xml.Linq.XName.Get("codeSts", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName txtMarkingXName = System.Xml.Linq.XName.Get("txtMarking", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName txtRmkXName = System.Xml.Linq.XName.Get("txtRmk", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName sourceXName = System.Xml.Linq.XName.Get("source", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("TaxiwayType", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator TaxiwayType(XElement xe) { return XTypedServices.ToXTypedElement<TaxiwayType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static TaxiwayType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(TwyUidXName), new NamedContentModelEntity(codeTypeXName), new NamedContentModelEntity(valWidXName), new NamedContentModelEntity(uomWidXName), new NamedContentModelEntity(codeCompositionXName), new NamedContentModelEntity(codePreparationXName), new NamedContentModelEntity(codeCondSfcXName), new NamedContentModelEntity(valPcnClassXName), new NamedContentModelEntity(codePcnPavementTypeXName), new NamedContentModelEntity(codePcnPavementSubgradeXName), new NamedContentModelEntity(codePcnMaxTirePressureXName), new NamedContentModelEntity(valPcnMaxTirePressureXName), new NamedContentModelEntity(codePcnEvalMethodXName), new NamedContentModelEntity(txtPcnNoteXName), new NamedContentModelEntity(valLcnClassXName), new NamedContentModelEntity(valSiwlWeightXName), new NamedContentModelEntity(uomSiwlWeightXName), new NamedContentModelEntity(valSiwlTirePressureXName), new NamedContentModelEntity(uomSiwlTirePressureXName), new NamedContentModelEntity(valAuwWeightXName), new NamedContentModelEntity(uomAuwWeightXName), new NamedContentModelEntity(codeStrengthXName), new NamedContentModelEntity(txtDescrStrengthXName), new NamedContentModelEntity(codeStsXName), new NamedContentModelEntity(txtMarkingXName), new NamedContentModelEntity(txtRmkXName));
        }
        
        /// <summary>
        /// <para>
        /// TWY
        /// </para>
        /// <para>
        /// Regular expression: (TwyUid, codeType, valWid?, uomWid?, codeComposition?, codePreparation?, codeCondSfc?, valPcnClass?, codePcnPavementType?, codePcnPavementSubgrade?, codePcnMaxTirePressure?, valPcnMaxTirePressure?, codePcnEvalMethod?, txtPcnNote?, valLcnClass?, valSiwlWeight?, uomSiwlWeight?, valSiwlTirePressure?, uomSiwlTirePressure?, valAuwWeight?, uomAuwWeight?, codeStrength?, txtDescrStrength?, codeSts?, txtMarking?, txtRmk?)
        /// </para>
        /// </summary>
        public TaxiwayType() {
        }
        
        /// <summary>
        /// <para>
        /// a version of Taxiway [TWY]
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (TwyUid, codeType, valWid?, uomWid?, codeComposition?, codePreparation?, codeCondSfc?, valPcnClass?, codePcnPavementType?, codePcnPavementSubgrade?, codePcnMaxTirePressure?, valPcnMaxTirePressure?, codePcnEvalMethod?, txtPcnNote?, valLcnClass?, valSiwlWeight?, uomSiwlWeight?, valSiwlTirePressure?, uomSiwlTirePressure?, valAuwWeight?, uomAuwWeight?, codeStrength?, txtDescrStrength?, codeSts?, txtMarking?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual TaxiwayUidType TwyUid {
            get {
                XElement x = this.GetElement(TwyUidXName);
                return ((TaxiwayUidType)(x));
            }
            set {
                this.SetElement(TwyUidXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Type
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (TwyUid, codeType, valWid?, uomWid?, codeComposition?, codePreparation?, codeCondSfc?, valPcnClass?, codePcnPavementType?, codePcnPavementSubgrade?, codePcnMaxTirePressure?, valPcnMaxTirePressure?, codePcnEvalMethod?, txtPcnNote?, valLcnClass?, valSiwlWeight?, uomSiwlWeight?, valSiwlTirePressure?, uomSiwlTirePressure?, valAuwWeight?, uomAuwWeight?, codeStrength?, txtDescrStrength?, codeSts?, txtMarking?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual codeTypeTwy codeType {
            get {
                XElement x = this.GetElement(codeTypeXName);
                return ((codeTypeTwy)(x));
            }
            set {
                this.SetElement(codeTypeXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Width
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (TwyUid, codeType, valWid?, uomWid?, codeComposition?, codePreparation?, codeCondSfc?, valPcnClass?, codePcnPavementType?, codePcnPavementSubgrade?, codePcnMaxTirePressure?, valPcnMaxTirePressure?, codePcnEvalMethod?, txtPcnNote?, valLcnClass?, valSiwlWeight?, uomSiwlWeight?, valSiwlTirePressure?, uomSiwlTirePressure?, valAuwWeight?, uomAuwWeight?, codeStrength?, txtDescrStrength?, codeSts?, txtMarking?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual valDistHorz valWid {
            get {
                XElement x = this.GetElement(valWidXName);
                return ((valDistHorz)(x));
            }
            set {
                this.SetElement(valWidXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Unit of measurement [width]
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (TwyUid, codeType, valWid?, uomWid?, codeComposition?, codePreparation?, codeCondSfc?, valPcnClass?, codePcnPavementType?, codePcnPavementSubgrade?, codePcnMaxTirePressure?, valPcnMaxTirePressure?, codePcnEvalMethod?, txtPcnNote?, valLcnClass?, valSiwlWeight?, uomSiwlWeight?, valSiwlTirePressure?, uomSiwlTirePressure?, valAuwWeight?, uomAuwWeight?, codeStrength?, txtDescrStrength?, codeSts?, txtMarking?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual uomDistHorz uomWid {
            get {
                XElement x = this.GetElement(uomWidXName);
                return ((uomDistHorz)(x));
            }
            set {
                this.SetElement(uomWidXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Surface composition
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (TwyUid, codeType, valWid?, uomWid?, codeComposition?, codePreparation?, codeCondSfc?, valPcnClass?, codePcnPavementType?, codePcnPavementSubgrade?, codePcnMaxTirePressure?, valPcnMaxTirePressure?, codePcnEvalMethod?, txtPcnNote?, valLcnClass?, valSiwlWeight?, uomSiwlWeight?, valSiwlTirePressure?, uomSiwlTirePressure?, valAuwWeight?, uomAuwWeight?, codeStrength?, txtDescrStrength?, codeSts?, txtMarking?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual codeCompositionSfc codeComposition {
            get {
                XElement x = this.GetElement(codeCompositionXName);
                return ((codeCompositionSfc)(x));
            }
            set {
                this.SetElement(codeCompositionXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Surface preparation method
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (TwyUid, codeType, valWid?, uomWid?, codeComposition?, codePreparation?, codeCondSfc?, valPcnClass?, codePcnPavementType?, codePcnPavementSubgrade?, codePcnMaxTirePressure?, valPcnMaxTirePressure?, codePcnEvalMethod?, txtPcnNote?, valLcnClass?, valSiwlWeight?, uomSiwlWeight?, valSiwlTirePressure?, uomSiwlTirePressure?, valAuwWeight?, uomAuwWeight?, codeStrength?, txtDescrStrength?, codeSts?, txtMarking?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual codePreparationSfc codePreparation {
            get {
                XElement x = this.GetElement(codePreparationXName);
                return ((codePreparationSfc)(x));
            }
            set {
                this.SetElement(codePreparationXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Surface condition
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (TwyUid, codeType, valWid?, uomWid?, codeComposition?, codePreparation?, codeCondSfc?, valPcnClass?, codePcnPavementType?, codePcnPavementSubgrade?, codePcnMaxTirePressure?, valPcnMaxTirePressure?, codePcnEvalMethod?, txtPcnNote?, valLcnClass?, valSiwlWeight?, uomSiwlWeight?, valSiwlTirePressure?, uomSiwlTirePressure?, valAuwWeight?, uomAuwWeight?, codeStrength?, txtDescrStrength?, codeSts?, txtMarking?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual codeCondSfc codeCondSfc {
            get {
                XElement x = this.GetElement(codeCondSfcXName);
                return ((codeCondSfc)(x));
            }
            set {
                this.SetElement(codeCondSfcXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// PCN (Pavement Classification Number) value
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (TwyUid, codeType, valWid?, uomWid?, codeComposition?, codePreparation?, codeCondSfc?, valPcnClass?, codePcnPavementType?, codePcnPavementSubgrade?, codePcnMaxTirePressure?, valPcnMaxTirePressure?, codePcnEvalMethod?, txtPcnNote?, valLcnClass?, valSiwlWeight?, uomSiwlWeight?, valSiwlTirePressure?, uomSiwlTirePressure?, valAuwWeight?, uomAuwWeight?, codeStrength?, txtDescrStrength?, codeSts?, txtMarking?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual valPcnClass valPcnClass {
            get {
                XElement x = this.GetElement(valPcnClassXName);
                return ((valPcnClass)(x));
            }
            set {
                this.SetElement(valPcnClassXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// PCN pavement type
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (TwyUid, codeType, valWid?, uomWid?, codeComposition?, codePreparation?, codeCondSfc?, valPcnClass?, codePcnPavementType?, codePcnPavementSubgrade?, codePcnMaxTirePressure?, valPcnMaxTirePressure?, codePcnEvalMethod?, txtPcnNote?, valLcnClass?, valSiwlWeight?, uomSiwlWeight?, valSiwlTirePressure?, uomSiwlTirePressure?, valAuwWeight?, uomAuwWeight?, codeStrength?, txtDescrStrength?, codeSts?, txtMarking?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual codePcnPavementType codePcnPavementType {
            get {
                XElement x = this.GetElement(codePcnPavementTypeXName);
                return ((codePcnPavementType)(x));
            }
            set {
                this.SetElement(codePcnPavementTypeXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// PCN pavement subgrade
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (TwyUid, codeType, valWid?, uomWid?, codeComposition?, codePreparation?, codeCondSfc?, valPcnClass?, codePcnPavementType?, codePcnPavementSubgrade?, codePcnMaxTirePressure?, valPcnMaxTirePressure?, codePcnEvalMethod?, txtPcnNote?, valLcnClass?, valSiwlWeight?, uomSiwlWeight?, valSiwlTirePressure?, uomSiwlTirePressure?, valAuwWeight?, uomAuwWeight?, codeStrength?, txtDescrStrength?, codeSts?, txtMarking?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual codePcnPavementSubgrade codePcnPavementSubgrade {
            get {
                XElement x = this.GetElement(codePcnPavementSubgradeXName);
                return ((codePcnPavementSubgrade)(x));
            }
            set {
                this.SetElement(codePcnPavementSubgradeXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// PCN max tire pressure code
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (TwyUid, codeType, valWid?, uomWid?, codeComposition?, codePreparation?, codeCondSfc?, valPcnClass?, codePcnPavementType?, codePcnPavementSubgrade?, codePcnMaxTirePressure?, valPcnMaxTirePressure?, codePcnEvalMethod?, txtPcnNote?, valLcnClass?, valSiwlWeight?, uomSiwlWeight?, valSiwlTirePressure?, uomSiwlTirePressure?, valAuwWeight?, uomAuwWeight?, codeStrength?, txtDescrStrength?, codeSts?, txtMarking?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual codePcnMaxTirePressure codePcnMaxTirePressure {
            get {
                XElement x = this.GetElement(codePcnMaxTirePressureXName);
                return ((codePcnMaxTirePressure)(x));
            }
            set {
                this.SetElement(codePcnMaxTirePressureXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// PCN max tire pressure value
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (TwyUid, codeType, valWid?, uomWid?, codeComposition?, codePreparation?, codeCondSfc?, valPcnClass?, codePcnPavementType?, codePcnPavementSubgrade?, codePcnMaxTirePressure?, valPcnMaxTirePressure?, codePcnEvalMethod?, txtPcnNote?, valLcnClass?, valSiwlWeight?, uomSiwlWeight?, valSiwlTirePressure?, uomSiwlTirePressure?, valAuwWeight?, uomAuwWeight?, codeStrength?, txtDescrStrength?, codeSts?, txtMarking?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual valPressurePcnTire valPcnMaxTirePressure {
            get {
                XElement x = this.GetElement(valPcnMaxTirePressureXName);
                return ((valPressurePcnTire)(x));
            }
            set {
                this.SetElement(valPcnMaxTirePressureXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// PCN evaluation method
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (TwyUid, codeType, valWid?, uomWid?, codeComposition?, codePreparation?, codeCondSfc?, valPcnClass?, codePcnPavementType?, codePcnPavementSubgrade?, codePcnMaxTirePressure?, valPcnMaxTirePressure?, codePcnEvalMethod?, txtPcnNote?, valLcnClass?, valSiwlWeight?, uomSiwlWeight?, valSiwlTirePressure?, uomSiwlTirePressure?, valAuwWeight?, uomAuwWeight?, codeStrength?, txtDescrStrength?, codeSts?, txtMarking?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual codePcnEvalMethod codePcnEvalMethod {
            get {
                XElement x = this.GetElement(codePcnEvalMethodXName);
                return ((codePcnEvalMethod)(x));
            }
            set {
                this.SetElement(codePcnEvalMethodXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// PCN notes
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (TwyUid, codeType, valWid?, uomWid?, codeComposition?, codePreparation?, codeCondSfc?, valPcnClass?, codePcnPavementType?, codePcnPavementSubgrade?, codePcnMaxTirePressure?, valPcnMaxTirePressure?, codePcnEvalMethod?, txtPcnNote?, valLcnClass?, valSiwlWeight?, uomSiwlWeight?, valSiwlTirePressure?, uomSiwlTirePressure?, valAuwWeight?, uomAuwWeight?, codeStrength?, txtDescrStrength?, codeSts?, txtMarking?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual txtRmk txtPcnNote {
            get {
                XElement x = this.GetElement(txtPcnNoteXName);
                return ((txtRmk)(x));
            }
            set {
                this.SetElement(txtPcnNoteXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// LCN value
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (TwyUid, codeType, valWid?, uomWid?, codeComposition?, codePreparation?, codeCondSfc?, valPcnClass?, codePcnPavementType?, codePcnPavementSubgrade?, codePcnMaxTirePressure?, valPcnMaxTirePressure?, codePcnEvalMethod?, txtPcnNote?, valLcnClass?, valSiwlWeight?, uomSiwlWeight?, valSiwlTirePressure?, uomSiwlTirePressure?, valAuwWeight?, uomAuwWeight?, codeStrength?, txtDescrStrength?, codeSts?, txtMarking?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual valLcnClass valLcnClass {
            get {
                XElement x = this.GetElement(valLcnClassXName);
                return ((valLcnClass)(x));
            }
            set {
                this.SetElement(valLcnClassXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// SIWL weight
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (TwyUid, codeType, valWid?, uomWid?, codeComposition?, codePreparation?, codeCondSfc?, valPcnClass?, codePcnPavementType?, codePcnPavementSubgrade?, codePcnMaxTirePressure?, valPcnMaxTirePressure?, codePcnEvalMethod?, txtPcnNote?, valLcnClass?, valSiwlWeight?, uomSiwlWeight?, valSiwlTirePressure?, uomSiwlTirePressure?, valAuwWeight?, uomAuwWeight?, codeStrength?, txtDescrStrength?, codeSts?, txtMarking?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual valWeight valSiwlWeight {
            get {
                XElement x = this.GetElement(valSiwlWeightXName);
                return ((valWeight)(x));
            }
            set {
                this.SetElement(valSiwlWeightXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Unit of measurement [SIWL weight]
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (TwyUid, codeType, valWid?, uomWid?, codeComposition?, codePreparation?, codeCondSfc?, valPcnClass?, codePcnPavementType?, codePcnPavementSubgrade?, codePcnMaxTirePressure?, valPcnMaxTirePressure?, codePcnEvalMethod?, txtPcnNote?, valLcnClass?, valSiwlWeight?, uomSiwlWeight?, valSiwlTirePressure?, uomSiwlTirePressure?, valAuwWeight?, uomAuwWeight?, codeStrength?, txtDescrStrength?, codeSts?, txtMarking?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual uomWeight uomSiwlWeight {
            get {
                XElement x = this.GetElement(uomSiwlWeightXName);
                return ((uomWeight)(x));
            }
            set {
                this.SetElement(uomSiwlWeightXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// SIWL tire pressure
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (TwyUid, codeType, valWid?, uomWid?, codeComposition?, codePreparation?, codeCondSfc?, valPcnClass?, codePcnPavementType?, codePcnPavementSubgrade?, codePcnMaxTirePressure?, valPcnMaxTirePressure?, codePcnEvalMethod?, txtPcnNote?, valLcnClass?, valSiwlWeight?, uomSiwlWeight?, valSiwlTirePressure?, uomSiwlTirePressure?, valAuwWeight?, uomAuwWeight?, codeStrength?, txtDescrStrength?, codeSts?, txtMarking?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual valPressure valSiwlTirePressure {
            get {
                XElement x = this.GetElement(valSiwlTirePressureXName);
                return ((valPressure)(x));
            }
            set {
                this.SetElement(valSiwlTirePressureXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Unit of measurement [SIWL tire pressure]
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (TwyUid, codeType, valWid?, uomWid?, codeComposition?, codePreparation?, codeCondSfc?, valPcnClass?, codePcnPavementType?, codePcnPavementSubgrade?, codePcnMaxTirePressure?, valPcnMaxTirePressure?, codePcnEvalMethod?, txtPcnNote?, valLcnClass?, valSiwlWeight?, uomSiwlWeight?, valSiwlTirePressure?, uomSiwlTirePressure?, valAuwWeight?, uomAuwWeight?, codeStrength?, txtDescrStrength?, codeSts?, txtMarking?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual uomPressure uomSiwlTirePressure {
            get {
                XElement x = this.GetElement(uomSiwlTirePressureXName);
                return ((uomPressure)(x));
            }
            set {
                this.SetElement(uomSiwlTirePressureXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// All Up Wheel weight
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (TwyUid, codeType, valWid?, uomWid?, codeComposition?, codePreparation?, codeCondSfc?, valPcnClass?, codePcnPavementType?, codePcnPavementSubgrade?, codePcnMaxTirePressure?, valPcnMaxTirePressure?, codePcnEvalMethod?, txtPcnNote?, valLcnClass?, valSiwlWeight?, uomSiwlWeight?, valSiwlTirePressure?, uomSiwlTirePressure?, valAuwWeight?, uomAuwWeight?, codeStrength?, txtDescrStrength?, codeSts?, txtMarking?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual valWeight valAuwWeight {
            get {
                XElement x = this.GetElement(valAuwWeightXName);
                return ((valWeight)(x));
            }
            set {
                this.SetElement(valAuwWeightXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Unit of measurement [AUW weight]
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (TwyUid, codeType, valWid?, uomWid?, codeComposition?, codePreparation?, codeCondSfc?, valPcnClass?, codePcnPavementType?, codePcnPavementSubgrade?, codePcnMaxTirePressure?, valPcnMaxTirePressure?, codePcnEvalMethod?, txtPcnNote?, valLcnClass?, valSiwlWeight?, uomSiwlWeight?, valSiwlTirePressure?, uomSiwlTirePressure?, valAuwWeight?, uomAuwWeight?, codeStrength?, txtDescrStrength?, codeSts?, txtMarking?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual uomWeight uomAuwWeight {
            get {
                XElement x = this.GetElement(uomAuwWeightXName);
                return ((uomWeight)(x));
            }
            set {
                this.SetElement(uomAuwWeightXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// [Deprecated] Surface strength method
        /// </para>
        /// <para>
        /// DEPRECATED-4.5
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (TwyUid, codeType, valWid?, uomWid?, codeComposition?, codePreparation?, codeCondSfc?, valPcnClass?, codePcnPavementType?, codePcnPavementSubgrade?, codePcnMaxTirePressure?, valPcnMaxTirePressure?, codePcnEvalMethod?, txtPcnNote?, valLcnClass?, valSiwlWeight?, uomSiwlWeight?, valSiwlTirePressure?, uomSiwlTirePressure?, valAuwWeight?, uomAuwWeight?, codeStrength?, txtDescrStrength?, codeSts?, txtMarking?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual codeStrengthSfc codeStrength {
            get {
                XElement x = this.GetElement(codeStrengthXName);
                return ((codeStrengthSfc)(x));
            }
            set {
                this.SetElement(codeStrengthXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// [Deprecated] Surface strength
        /// </para>
        /// <para>
        /// DEPRECATED-4.5
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (TwyUid, codeType, valWid?, uomWid?, codeComposition?, codePreparation?, codeCondSfc?, valPcnClass?, codePcnPavementType?, codePcnPavementSubgrade?, codePcnMaxTirePressure?, valPcnMaxTirePressure?, codePcnEvalMethod?, txtPcnNote?, valLcnClass?, valSiwlWeight?, uomSiwlWeight?, valSiwlTirePressure?, uomSiwlTirePressure?, valAuwWeight?, uomAuwWeight?, codeStrength?, txtDescrStrength?, codeSts?, txtMarking?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual txtDescr txtDescrStrength {
            get {
                XElement x = this.GetElement(txtDescrStrengthXName);
                return ((txtDescr)(x));
            }
            set {
                this.SetElement(txtDescrStrengthXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Operational status
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (TwyUid, codeType, valWid?, uomWid?, codeComposition?, codePreparation?, codeCondSfc?, valPcnClass?, codePcnPavementType?, codePcnPavementSubgrade?, codePcnMaxTirePressure?, valPcnMaxTirePressure?, codePcnEvalMethod?, txtPcnNote?, valLcnClass?, valSiwlWeight?, uomSiwlWeight?, valSiwlTirePressure?, uomSiwlTirePressure?, valAuwWeight?, uomAuwWeight?, codeStrength?, txtDescrStrength?, codeSts?, txtMarking?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual codeStsSfc codeSts {
            get {
                XElement x = this.GetElement(codeStsXName);
                return ((codeStsSfc)(x));
            }
            set {
                this.SetElement(codeStsXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Marking system description
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (TwyUid, codeType, valWid?, uomWid?, codeComposition?, codePreparation?, codeCondSfc?, valPcnClass?, codePcnPavementType?, codePcnPavementSubgrade?, codePcnMaxTirePressure?, valPcnMaxTirePressure?, codePcnEvalMethod?, txtPcnNote?, valLcnClass?, valSiwlWeight?, uomSiwlWeight?, valSiwlTirePressure?, uomSiwlTirePressure?, valAuwWeight?, uomAuwWeight?, codeStrength?, txtDescrStrength?, codeSts?, txtMarking?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual txtDescr txtMarking {
            get {
                XElement x = this.GetElement(txtMarkingXName);
                return ((txtDescr)(x));
            }
            set {
                this.SetElement(txtMarkingXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Remark
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (TwyUid, codeType, valWid?, uomWid?, codeComposition?, codePreparation?, codeCondSfc?, valPcnClass?, codePcnPavementType?, codePcnPavementSubgrade?, codePcnMaxTirePressure?, valPcnMaxTirePressure?, codePcnEvalMethod?, txtPcnNote?, valLcnClass?, valSiwlWeight?, uomSiwlWeight?, valSiwlTirePressure?, uomSiwlTirePressure?, valAuwWeight?, uomAuwWeight?, codeStrength?, txtDescrStrength?, codeSts?, txtMarking?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual txtRmk txtRmk {
            get {
                XElement x = this.GetElement(txtRmkXName);
                return ((txtRmk)(x));
            }
            set {
                this.SetElement(txtRmkXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string source {
            get {
                XAttribute x = this.Attribute(sourceXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(sourceXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<TaxiwayType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(TwyUidXName, typeof(TaxiwayUidType));
            localElementDictionary.Add(codeTypeXName, typeof(codeTypeTwy));
            localElementDictionary.Add(valWidXName, typeof(valDistHorz));
            localElementDictionary.Add(uomWidXName, typeof(uomDistHorz));
            localElementDictionary.Add(codeCompositionXName, typeof(codeCompositionSfc));
            localElementDictionary.Add(codePreparationXName, typeof(codePreparationSfc));
            localElementDictionary.Add(codeCondSfcXName, typeof(codeCondSfc));
            localElementDictionary.Add(valPcnClassXName, typeof(valPcnClass));
            localElementDictionary.Add(codePcnPavementTypeXName, typeof(codePcnPavementType));
            localElementDictionary.Add(codePcnPavementSubgradeXName, typeof(codePcnPavementSubgrade));
            localElementDictionary.Add(codePcnMaxTirePressureXName, typeof(codePcnMaxTirePressure));
            localElementDictionary.Add(valPcnMaxTirePressureXName, typeof(valPressurePcnTire));
            localElementDictionary.Add(codePcnEvalMethodXName, typeof(codePcnEvalMethod));
            localElementDictionary.Add(txtPcnNoteXName, typeof(txtRmk));
            localElementDictionary.Add(valLcnClassXName, typeof(valLcnClass));
            localElementDictionary.Add(valSiwlWeightXName, typeof(valWeight));
            localElementDictionary.Add(uomSiwlWeightXName, typeof(uomWeight));
            localElementDictionary.Add(valSiwlTirePressureXName, typeof(valPressure));
            localElementDictionary.Add(uomSiwlTirePressureXName, typeof(uomPressure));
            localElementDictionary.Add(valAuwWeightXName, typeof(valWeight));
            localElementDictionary.Add(uomAuwWeightXName, typeof(uomWeight));
            localElementDictionary.Add(codeStrengthXName, typeof(codeStrengthSfc));
            localElementDictionary.Add(txtDescrStrengthXName, typeof(txtDescr));
            localElementDictionary.Add(codeStsXName, typeof(codeStsSfc));
            localElementDictionary.Add(txtMarkingXName, typeof(txtDescr));
            localElementDictionary.Add(txtRmkXName, typeof(txtRmk));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Taxiway [TWY] - UID
    /// </para>
    /// <para>
    /// Regular expression: (AhpUid, txtDesig)
    /// </para>
    /// </summary>
    public partial class TaxiwayUidType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName AhpUidXName = System.Xml.Linq.XName.Get("AhpUid", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName txtDesigXName = System.Xml.Linq.XName.Get("txtDesig", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName midXName = System.Xml.Linq.XName.Get("mid", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("TaxiwayUidType", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator TaxiwayUidType(XElement xe) { return XTypedServices.ToXTypedElement<TaxiwayUidType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static TaxiwayUidType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(AhpUidXName), new NamedContentModelEntity(txtDesigXName));
        }
        
        /// <summary>
        /// <para>
        /// Taxiway [TWY] - UID
        /// </para>
        /// <para>
        /// Regular expression: (AhpUid, txtDesig)
        /// </para>
        /// </summary>
        public TaxiwayUidType() {
        }
        
        /// <summary>
        /// <para>
        /// Taxiway [TWY] is situated at Aerodrome / Heliport
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (AhpUid, txtDesig)
        /// </para>
        /// </summary>
        public virtual AerodromeHeliportUidType AhpUid {
            get {
                XElement x = this.GetElement(AhpUidXName);
                return ((AerodromeHeliportUidType)(x));
            }
            set {
                this.SetElement(AhpUidXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Designator
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (AhpUid, txtDesig)
        /// </para>
        /// </summary>
        public virtual txtDesig txtDesig {
            get {
                XElement x = this.GetElement(txtDesigXName);
                return ((txtDesig)(x));
            }
            set {
                this.SetElement(txtDesigXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string mid {
            get {
                XAttribute x = this.Attribute(midXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(midXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<TaxiwayUidType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(AhpUidXName, typeof(AerodromeHeliportUidType));
            localElementDictionary.Add(txtDesigXName, typeof(txtDesig));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Timetable for navaids
    /// </para>
    /// <para>
    /// Regular expression: (codeWorkHr, Timsh*, txtRmkWorkHr?)
    /// </para>
    /// </summary>
    public partial class TimetableNavaidType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName codeWorkHrXName = System.Xml.Linq.XName.Get("codeWorkHr", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TimshXName = System.Xml.Linq.XName.Get("Timsh", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<TimshLocalType> TimshField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName txtRmkWorkHrXName = System.Xml.Linq.XName.Get("txtRmkWorkHr", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("TimetableNavaidType", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator TimetableNavaidType(XElement xe) { return XTypedServices.ToXTypedElement<TimetableNavaidType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static TimetableNavaidType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(codeWorkHrXName), new NamedContentModelEntity(TimshXName), new NamedContentModelEntity(txtRmkWorkHrXName));
        }
        
        /// <summary>
        /// <para>
        /// Timetable for navaids
        /// </para>
        /// <para>
        /// Regular expression: (codeWorkHr, Timsh*, txtRmkWorkHr?)
        /// </para>
        /// </summary>
        public TimetableNavaidType() {
        }
        
        /// <summary>
        /// <para>
        /// Coded working hours
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (codeWorkHr, Timsh*, txtRmkWorkHr?)
        /// </para>
        /// </summary>
        public virtual codeTypeTimetable codeWorkHr {
            get {
                XElement x = this.GetElement(codeWorkHrXName);
                return ((codeTypeTimetable)(x));
            }
            set {
                this.SetElement(codeWorkHrXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Timesheet
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (codeWorkHr, Timsh*, txtRmkWorkHr?)
        /// </para>
        /// </summary>
        public virtual IList<OFMX.TimetableNavaidType.TimshLocalType> Timsh {
            get {
                if ((this.TimshField == null)) {
                    this.TimshField = new XTypedList<TimshLocalType>(this, LinqToXsdTypeManager.Instance, TimshXName);
                }
                return this.TimshField;
            }
            set {
                if ((value == null)) {
                    this.TimshField = null;
                }
                else {
                    if ((this.TimshField == null)) {
                        this.TimshField = XTypedList<TimshLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, TimshXName);
                    }
                    else {
                        XTypedServices.SetList<TimshLocalType>(this.TimshField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Remark to timetable
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (codeWorkHr, Timsh*, txtRmkWorkHr?)
        /// </para>
        /// </summary>
        public virtual txtRmk txtRmkWorkHr {
            get {
                XElement x = this.GetElement(txtRmkWorkHrXName);
                return ((txtRmk)(x));
            }
            set {
                this.SetElement(txtRmkWorkHrXName, value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<TimetableNavaidType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(codeWorkHrXName, typeof(codeTypeTimetable));
            localElementDictionary.Add(TimshXName, typeof(TimshLocalType));
            localElementDictionary.Add(txtRmkWorkHrXName, typeof(txtRmk));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (codeTimeRef, codeType?, dateValidWef, dateYearValidWef?, dateValidTil, dateYearValidTil?, codeDay, codeDayTil?, timeWef?, codeEventWef?, timeRelEventWef?, codeCombWef?, timeTil?, codeEventTil?, timeRelEventTil?, codeCombTil?)
        /// </para>
        /// </summary>
        public partial class TimshLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName codeTimeRefXName = System.Xml.Linq.XName.Get("codeTimeRef", "");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName codeTypeXName = System.Xml.Linq.XName.Get("codeType", "");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName dateValidWefXName = System.Xml.Linq.XName.Get("dateValidWef", "");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName dateYearValidWefXName = System.Xml.Linq.XName.Get("dateYearValidWef", "");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName dateValidTilXName = System.Xml.Linq.XName.Get("dateValidTil", "");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName dateYearValidTilXName = System.Xml.Linq.XName.Get("dateYearValidTil", "");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName codeDayXName = System.Xml.Linq.XName.Get("codeDay", "");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName codeDayTilXName = System.Xml.Linq.XName.Get("codeDayTil", "");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName timeWefXName = System.Xml.Linq.XName.Get("timeWef", "");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName codeEventWefXName = System.Xml.Linq.XName.Get("codeEventWef", "");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName timeRelEventWefXName = System.Xml.Linq.XName.Get("timeRelEventWef", "");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName codeCombWefXName = System.Xml.Linq.XName.Get("codeCombWef", "");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName timeTilXName = System.Xml.Linq.XName.Get("timeTil", "");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName codeEventTilXName = System.Xml.Linq.XName.Get("codeEventTil", "");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName timeRelEventTilXName = System.Xml.Linq.XName.Get("timeRelEventTil", "");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName codeCombTilXName = System.Xml.Linq.XName.Get("codeCombTil", "");
            
            private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("Timsh", "");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;
            
		public static explicit operator TimshLocalType(XElement xe) { return XTypedServices.ToXTypedElement<TimshLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static TimshLocalType() {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(codeTimeRefXName), new NamedContentModelEntity(codeTypeXName), new NamedContentModelEntity(dateValidWefXName), new NamedContentModelEntity(dateYearValidWefXName), new NamedContentModelEntity(dateValidTilXName), new NamedContentModelEntity(dateYearValidTilXName), new NamedContentModelEntity(codeDayXName), new NamedContentModelEntity(codeDayTilXName), new NamedContentModelEntity(timeWefXName), new NamedContentModelEntity(codeEventWefXName), new NamedContentModelEntity(timeRelEventWefXName), new NamedContentModelEntity(codeCombWefXName), new NamedContentModelEntity(timeTilXName), new NamedContentModelEntity(codeEventTilXName), new NamedContentModelEntity(timeRelEventTilXName), new NamedContentModelEntity(codeCombTilXName));
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (codeTimeRef, codeType?, dateValidWef, dateYearValidWef?, dateValidTil, dateYearValidTil?, codeDay, codeDayTil?, timeWef?, codeEventWef?, timeRelEventWef?, codeCombWef?, timeTil?, codeEventTil?, timeRelEventTil?, codeCombTil?)
            /// </para>
            /// </summary>
            public TimshLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Time reference system
            /// </para>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (codeTimeRef, codeType?, dateValidWef, dateYearValidWef?, dateValidTil, dateYearValidTil?, codeDay, codeDayTil?, timeWef?, codeEventWef?, timeRelEventWef?, codeCombWef?, timeTil?, codeEventTil?, timeRelEventTil?, codeCombTil?)
            /// </para>
            /// </summary>
            public virtual codeTimeRef codeTimeRef {
                get {
                    XElement x = this.GetElement(codeTimeRefXName);
                    return ((codeTimeRef)(x));
                }
                set {
                    this.SetElement(codeTimeRefXName, value);
                }
            }
            
            /// <summary>
            /// <para>
            /// Type
            /// </para>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (codeTimeRef, codeType?, dateValidWef, dateYearValidWef?, dateValidTil, dateYearValidTil?, codeDay, codeDayTil?, timeWef?, codeEventWef?, timeRelEventWef?, codeCombWef?, timeTil?, codeEventTil?, timeRelEventTil?, codeCombTil?)
            /// </para>
            /// </summary>
            public virtual codeTypeHrNavAid codeType {
                get {
                    XElement x = this.GetElement(codeTypeXName);
                    return ((codeTypeHrNavAid)(x));
                }
                set {
                    this.SetElement(codeTypeXName, value);
                }
            }
            
            /// <summary>
            /// <para>
            /// (Yearly) start date
            /// </para>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (codeTimeRef, codeType?, dateValidWef, dateYearValidWef?, dateValidTil, dateYearValidTil?, codeDay, codeDayTil?, timeWef?, codeEventWef?, timeRelEventWef?, codeCombWef?, timeTil?, codeEventTil?, timeRelEventTil?, codeCombTil?)
            /// </para>
            /// </summary>
            public virtual dateMonthDay dateValidWef {
                get {
                    XElement x = this.GetElement(dateValidWefXName);
                    return ((dateMonthDay)(x));
                }
                set {
                    this.SetElement(dateValidWefXName, value);
                }
            }
            
            /// <summary>
            /// <para>
            /// Year of start date
            /// </para>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (codeTimeRef, codeType?, dateValidWef, dateYearValidWef?, dateValidTil, dateYearValidTil?, codeDay, codeDayTil?, timeWef?, codeEventWef?, timeRelEventWef?, codeCombWef?, timeTil?, codeEventTil?, timeRelEventTil?, codeCombTil?)
            /// </para>
            /// </summary>
            public virtual dateYear dateYearValidWef {
                get {
                    XElement x = this.GetElement(dateYearValidWefXName);
                    return ((dateYear)(x));
                }
                set {
                    this.SetElement(dateYearValidWefXName, value);
                }
            }
            
            /// <summary>
            /// <para>
            /// (Yearly) end date
            /// </para>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (codeTimeRef, codeType?, dateValidWef, dateYearValidWef?, dateValidTil, dateYearValidTil?, codeDay, codeDayTil?, timeWef?, codeEventWef?, timeRelEventWef?, codeCombWef?, timeTil?, codeEventTil?, timeRelEventTil?, codeCombTil?)
            /// </para>
            /// </summary>
            public virtual dateMonthDay dateValidTil {
                get {
                    XElement x = this.GetElement(dateValidTilXName);
                    return ((dateMonthDay)(x));
                }
                set {
                    this.SetElement(dateValidTilXName, value);
                }
            }
            
            /// <summary>
            /// <para>
            /// Year of end date
            /// </para>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (codeTimeRef, codeType?, dateValidWef, dateYearValidWef?, dateValidTil, dateYearValidTil?, codeDay, codeDayTil?, timeWef?, codeEventWef?, timeRelEventWef?, codeCombWef?, timeTil?, codeEventTil?, timeRelEventTil?, codeCombTil?)
            /// </para>
            /// </summary>
            public virtual dateYear dateYearValidTil {
                get {
                    XElement x = this.GetElement(dateYearValidTilXName);
                    return ((dateYear)(x));
                }
                set {
                    this.SetElement(dateYearValidTilXName, value);
                }
            }
            
            /// <summary>
            /// <para>
            /// Affected day or start of affected period
            /// </para>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (codeTimeRef, codeType?, dateValidWef, dateYearValidWef?, dateValidTil, dateYearValidTil?, codeDay, codeDayTil?, timeWef?, codeEventWef?, timeRelEventWef?, codeCombWef?, timeTil?, codeEventTil?, timeRelEventTil?, codeCombTil?)
            /// </para>
            /// </summary>
            public virtual codeDay codeDay {
                get {
                    XElement x = this.GetElement(codeDayXName);
                    return ((codeDay)(x));
                }
                set {
                    this.SetElement(codeDayXName, value);
                }
            }
            
            /// <summary>
            /// <para>
            /// End of affected period
            /// </para>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (codeTimeRef, codeType?, dateValidWef, dateYearValidWef?, dateValidTil, dateYearValidTil?, codeDay, codeDayTil?, timeWef?, codeEventWef?, timeRelEventWef?, codeCombWef?, timeTil?, codeEventTil?, timeRelEventTil?, codeCombTil?)
            /// </para>
            /// </summary>
            public virtual codeDay codeDayTil {
                get {
                    XElement x = this.GetElement(codeDayTilXName);
                    return ((codeDay)(x));
                }
                set {
                    this.SetElement(codeDayTilXName, value);
                }
            }
            
            /// <summary>
            /// <para>
            /// Start - Time
            /// </para>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (codeTimeRef, codeType?, dateValidWef, dateYearValidWef?, dateValidTil, dateYearValidTil?, codeDay, codeDayTil?, timeWef?, codeEventWef?, timeRelEventWef?, codeCombWef?, timeTil?, codeEventTil?, timeRelEventTil?, codeCombTil?)
            /// </para>
            /// </summary>
            public virtual time timeWef {
                get {
                    XElement x = this.GetElement(timeWefXName);
                    return ((time)(x));
                }
                set {
                    this.SetElement(timeWefXName, value);
                }
            }
            
            /// <summary>
            /// <para>
            /// Start - Event
            /// </para>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (codeTimeRef, codeType?, dateValidWef, dateYearValidWef?, dateValidTil, dateYearValidTil?, codeDay, codeDayTil?, timeWef?, codeEventWef?, timeRelEventWef?, codeCombWef?, timeTil?, codeEventTil?, timeRelEventTil?, codeCombTil?)
            /// </para>
            /// </summary>
            public virtual codeTimeEvent codeEventWef {
                get {
                    XElement x = this.GetElement(codeEventWefXName);
                    return ((codeTimeEvent)(x));
                }
                set {
                    this.SetElement(codeEventWefXName, value);
                }
            }
            
            /// <summary>
            /// <para>
            /// Start - Relative to event
            /// </para>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (codeTimeRef, codeType?, dateValidWef, dateYearValidWef?, dateValidTil, dateYearValidTil?, codeDay, codeDayTil?, timeWef?, codeEventWef?, timeRelEventWef?, codeCombWef?, timeTil?, codeEventTil?, timeRelEventTil?, codeCombTil?)
            /// </para>
            /// </summary>
            public virtual timeLap timeRelEventWef {
                get {
                    XElement x = this.GetElement(timeRelEventWefXName);
                    return ((timeLap)(x));
                }
                set {
                    this.SetElement(timeRelEventWefXName, value);
                }
            }
            
            /// <summary>
            /// <para>
            /// Start - Interpretation
            /// </para>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (codeTimeRef, codeType?, dateValidWef, dateYearValidWef?, dateValidTil, dateYearValidTil?, codeDay, codeDayTil?, timeWef?, codeEventWef?, timeRelEventWef?, codeCombWef?, timeTil?, codeEventTil?, timeRelEventTil?, codeCombTil?)
            /// </para>
            /// </summary>
            public virtual codeCombTimeEvent codeCombWef {
                get {
                    XElement x = this.GetElement(codeCombWefXName);
                    return ((codeCombTimeEvent)(x));
                }
                set {
                    this.SetElement(codeCombWefXName, value);
                }
            }
            
            /// <summary>
            /// <para>
            /// End - Time
            /// </para>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (codeTimeRef, codeType?, dateValidWef, dateYearValidWef?, dateValidTil, dateYearValidTil?, codeDay, codeDayTil?, timeWef?, codeEventWef?, timeRelEventWef?, codeCombWef?, timeTil?, codeEventTil?, timeRelEventTil?, codeCombTil?)
            /// </para>
            /// </summary>
            public virtual time timeTil {
                get {
                    XElement x = this.GetElement(timeTilXName);
                    return ((time)(x));
                }
                set {
                    this.SetElement(timeTilXName, value);
                }
            }
            
            /// <summary>
            /// <para>
            /// End - Event
            /// </para>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (codeTimeRef, codeType?, dateValidWef, dateYearValidWef?, dateValidTil, dateYearValidTil?, codeDay, codeDayTil?, timeWef?, codeEventWef?, timeRelEventWef?, codeCombWef?, timeTil?, codeEventTil?, timeRelEventTil?, codeCombTil?)
            /// </para>
            /// </summary>
            public virtual codeTimeEvent codeEventTil {
                get {
                    XElement x = this.GetElement(codeEventTilXName);
                    return ((codeTimeEvent)(x));
                }
                set {
                    this.SetElement(codeEventTilXName, value);
                }
            }
            
            /// <summary>
            /// <para>
            /// End - Relative to event
            /// </para>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (codeTimeRef, codeType?, dateValidWef, dateYearValidWef?, dateValidTil, dateYearValidTil?, codeDay, codeDayTil?, timeWef?, codeEventWef?, timeRelEventWef?, codeCombWef?, timeTil?, codeEventTil?, timeRelEventTil?, codeCombTil?)
            /// </para>
            /// </summary>
            public virtual timeLap timeRelEventTil {
                get {
                    XElement x = this.GetElement(timeRelEventTilXName);
                    return ((timeLap)(x));
                }
                set {
                    this.SetElement(timeRelEventTilXName, value);
                }
            }
            
            /// <summary>
            /// <para>
            /// End - Interpretation
            /// </para>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (codeTimeRef, codeType?, dateValidWef, dateYearValidWef?, dateValidTil, dateYearValidTil?, codeDay, codeDayTil?, timeWef?, codeEventWef?, timeRelEventWef?, codeCombWef?, timeTil?, codeEventTil?, timeRelEventTil?, codeCombTil?)
            /// </para>
            /// </summary>
            public virtual codeCombTimeEvent codeCombTil {
                get {
                    XElement x = this.GetElement(codeCombTilXName);
                    return ((codeCombTimeEvent)(x));
                }
                set {
                    this.SetElement(codeCombTilXName, value);
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            System.Xml.Linq.XName IXMetaData.SchemaName {
                get {
                    return xName;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<TimshLocalType>(this);
            }
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(codeTimeRefXName, typeof(codeTimeRef));
                localElementDictionary.Add(codeTypeXName, typeof(codeTypeHrNavAid));
                localElementDictionary.Add(dateValidWefXName, typeof(dateMonthDay));
                localElementDictionary.Add(dateYearValidWefXName, typeof(dateYear));
                localElementDictionary.Add(dateValidTilXName, typeof(dateMonthDay));
                localElementDictionary.Add(dateYearValidTilXName, typeof(dateYear));
                localElementDictionary.Add(codeDayXName, typeof(codeDay));
                localElementDictionary.Add(codeDayTilXName, typeof(codeDay));
                localElementDictionary.Add(timeWefXName, typeof(time));
                localElementDictionary.Add(codeEventWefXName, typeof(codeTimeEvent));
                localElementDictionary.Add(timeRelEventWefXName, typeof(timeLap));
                localElementDictionary.Add(codeCombWefXName, typeof(codeCombTimeEvent));
                localElementDictionary.Add(timeTilXName, typeof(time));
                localElementDictionary.Add(codeEventTilXName, typeof(codeTimeEvent));
                localElementDictionary.Add(timeRelEventTilXName, typeof(timeLap));
                localElementDictionary.Add(codeCombTilXName, typeof(codeCombTimeEvent));
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return contentModel;
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Timetable
    /// </para>
    /// <para>
    /// Regular expression: (codeWorkHr, Timsh*, txtRmkWorkHr?)
    /// </para>
    /// </summary>
    public partial class TimetableType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName codeWorkHrXName = System.Xml.Linq.XName.Get("codeWorkHr", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TimshXName = System.Xml.Linq.XName.Get("Timsh", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<TimshLocalType> TimshField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName txtRmkWorkHrXName = System.Xml.Linq.XName.Get("txtRmkWorkHr", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("TimetableType", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator TimetableType(XElement xe) { return XTypedServices.ToXTypedElement<TimetableType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static TimetableType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(codeWorkHrXName), new NamedContentModelEntity(TimshXName), new NamedContentModelEntity(txtRmkWorkHrXName));
        }
        
        /// <summary>
        /// <para>
        /// Timetable
        /// </para>
        /// <para>
        /// Regular expression: (codeWorkHr, Timsh*, txtRmkWorkHr?)
        /// </para>
        /// </summary>
        public TimetableType() {
        }
        
        /// <summary>
        /// <para>
        /// Coded applicability hours
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (codeWorkHr, Timsh*, txtRmkWorkHr?)
        /// </para>
        /// </summary>
        public virtual codeTypeTimetable codeWorkHr {
            get {
                XElement x = this.GetElement(codeWorkHrXName);
                return ((codeTypeTimetable)(x));
            }
            set {
                this.SetElement(codeWorkHrXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Timesheet
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (codeWorkHr, Timsh*, txtRmkWorkHr?)
        /// </para>
        /// </summary>
        public virtual IList<OFMX.TimetableType.TimshLocalType> Timsh {
            get {
                if ((this.TimshField == null)) {
                    this.TimshField = new XTypedList<TimshLocalType>(this, LinqToXsdTypeManager.Instance, TimshXName);
                }
                return this.TimshField;
            }
            set {
                if ((value == null)) {
                    this.TimshField = null;
                }
                else {
                    if ((this.TimshField == null)) {
                        this.TimshField = XTypedList<TimshLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, TimshXName);
                    }
                    else {
                        XTypedServices.SetList<TimshLocalType>(this.TimshField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Remark to timetable
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (codeWorkHr, Timsh*, txtRmkWorkHr?)
        /// </para>
        /// </summary>
        public virtual txtRmk txtRmkWorkHr {
            get {
                XElement x = this.GetElement(txtRmkWorkHrXName);
                return ((txtRmk)(x));
            }
            set {
                this.SetElement(txtRmkWorkHrXName, value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<TimetableType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(codeWorkHrXName, typeof(codeTypeTimetable));
            localElementDictionary.Add(TimshXName, typeof(TimshLocalType));
            localElementDictionary.Add(txtRmkWorkHrXName, typeof(txtRmk));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (codeTimeRef, dateValidWef, dateYearValidWef?, dateValidTil, dateYearValidTil?, codeDay, codeDayTil?, timeWef?, codeEventWef?, timeRelEventWef?, codeCombWef?, timeTil?, codeEventTil?, timeRelEventTil?, codeCombTil?)
        /// </para>
        /// </summary>
        public partial class TimshLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName codeTimeRefXName = System.Xml.Linq.XName.Get("codeTimeRef", "");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName dateValidWefXName = System.Xml.Linq.XName.Get("dateValidWef", "");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName dateYearValidWefXName = System.Xml.Linq.XName.Get("dateYearValidWef", "");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName dateValidTilXName = System.Xml.Linq.XName.Get("dateValidTil", "");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName dateYearValidTilXName = System.Xml.Linq.XName.Get("dateYearValidTil", "");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName codeDayXName = System.Xml.Linq.XName.Get("codeDay", "");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName codeDayTilXName = System.Xml.Linq.XName.Get("codeDayTil", "");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName timeWefXName = System.Xml.Linq.XName.Get("timeWef", "");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName codeEventWefXName = System.Xml.Linq.XName.Get("codeEventWef", "");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName timeRelEventWefXName = System.Xml.Linq.XName.Get("timeRelEventWef", "");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName codeCombWefXName = System.Xml.Linq.XName.Get("codeCombWef", "");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName timeTilXName = System.Xml.Linq.XName.Get("timeTil", "");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName codeEventTilXName = System.Xml.Linq.XName.Get("codeEventTil", "");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName timeRelEventTilXName = System.Xml.Linq.XName.Get("timeRelEventTil", "");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName codeCombTilXName = System.Xml.Linq.XName.Get("codeCombTil", "");
            
            private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("Timsh", "");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;
            
		public static explicit operator TimshLocalType(XElement xe) { return XTypedServices.ToXTypedElement<TimshLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static TimshLocalType() {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(codeTimeRefXName), new NamedContentModelEntity(dateValidWefXName), new NamedContentModelEntity(dateYearValidWefXName), new NamedContentModelEntity(dateValidTilXName), new NamedContentModelEntity(dateYearValidTilXName), new NamedContentModelEntity(codeDayXName), new NamedContentModelEntity(codeDayTilXName), new NamedContentModelEntity(timeWefXName), new NamedContentModelEntity(codeEventWefXName), new NamedContentModelEntity(timeRelEventWefXName), new NamedContentModelEntity(codeCombWefXName), new NamedContentModelEntity(timeTilXName), new NamedContentModelEntity(codeEventTilXName), new NamedContentModelEntity(timeRelEventTilXName), new NamedContentModelEntity(codeCombTilXName));
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (codeTimeRef, dateValidWef, dateYearValidWef?, dateValidTil, dateYearValidTil?, codeDay, codeDayTil?, timeWef?, codeEventWef?, timeRelEventWef?, codeCombWef?, timeTil?, codeEventTil?, timeRelEventTil?, codeCombTil?)
            /// </para>
            /// </summary>
            public TimshLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Time reference system
            /// </para>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (codeTimeRef, dateValidWef, dateYearValidWef?, dateValidTil, dateYearValidTil?, codeDay, codeDayTil?, timeWef?, codeEventWef?, timeRelEventWef?, codeCombWef?, timeTil?, codeEventTil?, timeRelEventTil?, codeCombTil?)
            /// </para>
            /// </summary>
            public virtual codeTimeRef codeTimeRef {
                get {
                    XElement x = this.GetElement(codeTimeRefXName);
                    return ((codeTimeRef)(x));
                }
                set {
                    this.SetElement(codeTimeRefXName, value);
                }
            }
            
            /// <summary>
            /// <para>
            /// (Yearly) start date
            /// </para>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (codeTimeRef, dateValidWef, dateYearValidWef?, dateValidTil, dateYearValidTil?, codeDay, codeDayTil?, timeWef?, codeEventWef?, timeRelEventWef?, codeCombWef?, timeTil?, codeEventTil?, timeRelEventTil?, codeCombTil?)
            /// </para>
            /// </summary>
            public virtual dateMonthDay dateValidWef {
                get {
                    XElement x = this.GetElement(dateValidWefXName);
                    return ((dateMonthDay)(x));
                }
                set {
                    this.SetElement(dateValidWefXName, value);
                }
            }
            
            /// <summary>
            /// <para>
            /// Year of start date
            /// </para>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (codeTimeRef, dateValidWef, dateYearValidWef?, dateValidTil, dateYearValidTil?, codeDay, codeDayTil?, timeWef?, codeEventWef?, timeRelEventWef?, codeCombWef?, timeTil?, codeEventTil?, timeRelEventTil?, codeCombTil?)
            /// </para>
            /// </summary>
            public virtual dateYear dateYearValidWef {
                get {
                    XElement x = this.GetElement(dateYearValidWefXName);
                    return ((dateYear)(x));
                }
                set {
                    this.SetElement(dateYearValidWefXName, value);
                }
            }
            
            /// <summary>
            /// <para>
            /// (Yearly) end date
            /// </para>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (codeTimeRef, dateValidWef, dateYearValidWef?, dateValidTil, dateYearValidTil?, codeDay, codeDayTil?, timeWef?, codeEventWef?, timeRelEventWef?, codeCombWef?, timeTil?, codeEventTil?, timeRelEventTil?, codeCombTil?)
            /// </para>
            /// </summary>
            public virtual dateMonthDay dateValidTil {
                get {
                    XElement x = this.GetElement(dateValidTilXName);
                    return ((dateMonthDay)(x));
                }
                set {
                    this.SetElement(dateValidTilXName, value);
                }
            }
            
            /// <summary>
            /// <para>
            /// Year of end date
            /// </para>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (codeTimeRef, dateValidWef, dateYearValidWef?, dateValidTil, dateYearValidTil?, codeDay, codeDayTil?, timeWef?, codeEventWef?, timeRelEventWef?, codeCombWef?, timeTil?, codeEventTil?, timeRelEventTil?, codeCombTil?)
            /// </para>
            /// </summary>
            public virtual dateYear dateYearValidTil {
                get {
                    XElement x = this.GetElement(dateYearValidTilXName);
                    return ((dateYear)(x));
                }
                set {
                    this.SetElement(dateYearValidTilXName, value);
                }
            }
            
            /// <summary>
            /// <para>
            /// Affected day or start of affected period
            /// </para>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (codeTimeRef, dateValidWef, dateYearValidWef?, dateValidTil, dateYearValidTil?, codeDay, codeDayTil?, timeWef?, codeEventWef?, timeRelEventWef?, codeCombWef?, timeTil?, codeEventTil?, timeRelEventTil?, codeCombTil?)
            /// </para>
            /// </summary>
            public virtual codeDay codeDay {
                get {
                    XElement x = this.GetElement(codeDayXName);
                    return ((codeDay)(x));
                }
                set {
                    this.SetElement(codeDayXName, value);
                }
            }
            
            /// <summary>
            /// <para>
            /// End of affected period
            /// </para>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (codeTimeRef, dateValidWef, dateYearValidWef?, dateValidTil, dateYearValidTil?, codeDay, codeDayTil?, timeWef?, codeEventWef?, timeRelEventWef?, codeCombWef?, timeTil?, codeEventTil?, timeRelEventTil?, codeCombTil?)
            /// </para>
            /// </summary>
            public virtual codeDay codeDayTil {
                get {
                    XElement x = this.GetElement(codeDayTilXName);
                    return ((codeDay)(x));
                }
                set {
                    this.SetElement(codeDayTilXName, value);
                }
            }
            
            /// <summary>
            /// <para>
            /// Start - Time
            /// </para>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (codeTimeRef, dateValidWef, dateYearValidWef?, dateValidTil, dateYearValidTil?, codeDay, codeDayTil?, timeWef?, codeEventWef?, timeRelEventWef?, codeCombWef?, timeTil?, codeEventTil?, timeRelEventTil?, codeCombTil?)
            /// </para>
            /// </summary>
            public virtual time timeWef {
                get {
                    XElement x = this.GetElement(timeWefXName);
                    return ((time)(x));
                }
                set {
                    this.SetElement(timeWefXName, value);
                }
            }
            
            /// <summary>
            /// <para>
            /// Start - Event
            /// </para>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (codeTimeRef, dateValidWef, dateYearValidWef?, dateValidTil, dateYearValidTil?, codeDay, codeDayTil?, timeWef?, codeEventWef?, timeRelEventWef?, codeCombWef?, timeTil?, codeEventTil?, timeRelEventTil?, codeCombTil?)
            /// </para>
            /// </summary>
            public virtual codeTimeEvent codeEventWef {
                get {
                    XElement x = this.GetElement(codeEventWefXName);
                    return ((codeTimeEvent)(x));
                }
                set {
                    this.SetElement(codeEventWefXName, value);
                }
            }
            
            /// <summary>
            /// <para>
            /// Start - Relative to event
            /// </para>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (codeTimeRef, dateValidWef, dateYearValidWef?, dateValidTil, dateYearValidTil?, codeDay, codeDayTil?, timeWef?, codeEventWef?, timeRelEventWef?, codeCombWef?, timeTil?, codeEventTil?, timeRelEventTil?, codeCombTil?)
            /// </para>
            /// </summary>
            public virtual timeLap timeRelEventWef {
                get {
                    XElement x = this.GetElement(timeRelEventWefXName);
                    return ((timeLap)(x));
                }
                set {
                    this.SetElement(timeRelEventWefXName, value);
                }
            }
            
            /// <summary>
            /// <para>
            /// Start - Interpretation
            /// </para>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (codeTimeRef, dateValidWef, dateYearValidWef?, dateValidTil, dateYearValidTil?, codeDay, codeDayTil?, timeWef?, codeEventWef?, timeRelEventWef?, codeCombWef?, timeTil?, codeEventTil?, timeRelEventTil?, codeCombTil?)
            /// </para>
            /// </summary>
            public virtual codeCombTimeEvent codeCombWef {
                get {
                    XElement x = this.GetElement(codeCombWefXName);
                    return ((codeCombTimeEvent)(x));
                }
                set {
                    this.SetElement(codeCombWefXName, value);
                }
            }
            
            /// <summary>
            /// <para>
            /// End - Time
            /// </para>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (codeTimeRef, dateValidWef, dateYearValidWef?, dateValidTil, dateYearValidTil?, codeDay, codeDayTil?, timeWef?, codeEventWef?, timeRelEventWef?, codeCombWef?, timeTil?, codeEventTil?, timeRelEventTil?, codeCombTil?)
            /// </para>
            /// </summary>
            public virtual time timeTil {
                get {
                    XElement x = this.GetElement(timeTilXName);
                    return ((time)(x));
                }
                set {
                    this.SetElement(timeTilXName, value);
                }
            }
            
            /// <summary>
            /// <para>
            /// End - Event
            /// </para>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (codeTimeRef, dateValidWef, dateYearValidWef?, dateValidTil, dateYearValidTil?, codeDay, codeDayTil?, timeWef?, codeEventWef?, timeRelEventWef?, codeCombWef?, timeTil?, codeEventTil?, timeRelEventTil?, codeCombTil?)
            /// </para>
            /// </summary>
            public virtual codeTimeEvent codeEventTil {
                get {
                    XElement x = this.GetElement(codeEventTilXName);
                    return ((codeTimeEvent)(x));
                }
                set {
                    this.SetElement(codeEventTilXName, value);
                }
            }
            
            /// <summary>
            /// <para>
            /// End - Relative to event
            /// </para>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (codeTimeRef, dateValidWef, dateYearValidWef?, dateValidTil, dateYearValidTil?, codeDay, codeDayTil?, timeWef?, codeEventWef?, timeRelEventWef?, codeCombWef?, timeTil?, codeEventTil?, timeRelEventTil?, codeCombTil?)
            /// </para>
            /// </summary>
            public virtual timeLap timeRelEventTil {
                get {
                    XElement x = this.GetElement(timeRelEventTilXName);
                    return ((timeLap)(x));
                }
                set {
                    this.SetElement(timeRelEventTilXName, value);
                }
            }
            
            /// <summary>
            /// <para>
            /// End - Interpretation
            /// </para>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (codeTimeRef, dateValidWef, dateYearValidWef?, dateValidTil, dateYearValidTil?, codeDay, codeDayTil?, timeWef?, codeEventWef?, timeRelEventWef?, codeCombWef?, timeTil?, codeEventTil?, timeRelEventTil?, codeCombTil?)
            /// </para>
            /// </summary>
            public virtual codeCombTimeEvent codeCombTil {
                get {
                    XElement x = this.GetElement(codeCombTilXName);
                    return ((codeCombTimeEvent)(x));
                }
                set {
                    this.SetElement(codeCombTilXName, value);
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            System.Xml.Linq.XName IXMetaData.SchemaName {
                get {
                    return xName;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<TimshLocalType>(this);
            }
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(codeTimeRefXName, typeof(codeTimeRef));
                localElementDictionary.Add(dateValidWefXName, typeof(dateMonthDay));
                localElementDictionary.Add(dateYearValidWefXName, typeof(dateYear));
                localElementDictionary.Add(dateValidTilXName, typeof(dateMonthDay));
                localElementDictionary.Add(dateYearValidTilXName, typeof(dateYear));
                localElementDictionary.Add(codeDayXName, typeof(codeDay));
                localElementDictionary.Add(codeDayTilXName, typeof(codeDay));
                localElementDictionary.Add(timeWefXName, typeof(time));
                localElementDictionary.Add(codeEventWefXName, typeof(codeTimeEvent));
                localElementDictionary.Add(timeRelEventWefXName, typeof(timeLap));
                localElementDictionary.Add(codeCombWefXName, typeof(codeCombTimeEvent));
                localElementDictionary.Add(timeTilXName, typeof(time));
                localElementDictionary.Add(codeEventTilXName, typeof(codeTimeEvent));
                localElementDictionary.Add(timeRelEventTilXName, typeof(timeLap));
                localElementDictionary.Add(codeCombTilXName, typeof(codeCombTimeEvent));
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return contentModel;
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// TLOF geometry point
    /// </para>
    /// <para>
    /// Regular expression: (codeType, geoLat, geoLong, geoLatArc?, geoLongArc?, valElev?)
    /// </para>
    /// </summary>
    public partial class TlofGeometryPointType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName codeTypeXName = System.Xml.Linq.XName.Get("codeType", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName geoLatXName = System.Xml.Linq.XName.Get("geoLat", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName geoLongXName = System.Xml.Linq.XName.Get("geoLong", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName geoLatArcXName = System.Xml.Linq.XName.Get("geoLatArc", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName geoLongArcXName = System.Xml.Linq.XName.Get("geoLongArc", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName valElevXName = System.Xml.Linq.XName.Get("valElev", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("TlofGeometryPointType", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator TlofGeometryPointType(XElement xe) { return XTypedServices.ToXTypedElement<TlofGeometryPointType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static TlofGeometryPointType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(codeTypeXName), new NamedContentModelEntity(geoLatXName), new NamedContentModelEntity(geoLongXName), new NamedContentModelEntity(geoLatArcXName), new NamedContentModelEntity(geoLongArcXName), new NamedContentModelEntity(valElevXName));
        }
        
        /// <summary>
        /// <para>
        /// TLOF geometry point
        /// </para>
        /// <para>
        /// Regular expression: (codeType, geoLat, geoLong, geoLatArc?, geoLongArc?, valElev?)
        /// </para>
        /// </summary>
        public TlofGeometryPointType() {
        }
        
        /// <summary>
        /// <para>
        /// Type
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (codeType, geoLat, geoLong, geoLatArc?, geoLongArc?, valElev?)
        /// </para>
        /// </summary>
        public virtual codeTypeTlofVertex codeType {
            get {
                XElement x = this.GetElement(codeTypeXName);
                return ((codeTypeTlofVertex)(x));
            }
            set {
                this.SetElement(codeTypeXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Latitude
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (codeType, geoLat, geoLong, geoLatArc?, geoLongArc?, valElev?)
        /// </para>
        /// </summary>
        public virtual geoLat geoLat {
            get {
                XElement x = this.GetElement(geoLatXName);
                return ((geoLat)(x));
            }
            set {
                this.SetElement(geoLatXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Longitude
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (codeType, geoLat, geoLong, geoLatArc?, geoLongArc?, valElev?)
        /// </para>
        /// </summary>
        public virtual geoLong geoLong {
            get {
                XElement x = this.GetElement(geoLongXName);
                return ((geoLong)(x));
            }
            set {
                this.SetElement(geoLongXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Latitude for arc
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (codeType, geoLat, geoLong, geoLatArc?, geoLongArc?, valElev?)
        /// </para>
        /// </summary>
        public virtual geoLat geoLatArc {
            get {
                XElement x = this.GetElement(geoLatArcXName);
                return ((geoLat)(x));
            }
            set {
                this.SetElement(geoLatArcXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Longitude for arc
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (codeType, geoLat, geoLong, geoLatArc?, geoLongArc?, valElev?)
        /// </para>
        /// </summary>
        public virtual geoLong geoLongArc {
            get {
                XElement x = this.GetElement(geoLongArcXName);
                return ((geoLong)(x));
            }
            set {
                this.SetElement(geoLongArcXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Elevation
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (codeType, geoLat, geoLong, geoLatArc?, geoLongArc?, valElev?)
        /// </para>
        /// </summary>
        public virtual valDistVer valElev {
            get {
                XElement x = this.GetElement(valElevXName);
                return ((valDistVer)(x));
            }
            set {
                this.SetElement(valElevXName, value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<TlofGeometryPointType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(codeTypeXName, typeof(codeTypeTlofVertex));
            localElementDictionary.Add(geoLatXName, typeof(geoLat));
            localElementDictionary.Add(geoLongXName, typeof(geoLong));
            localElementDictionary.Add(geoLatArcXName, typeof(geoLat));
            localElementDictionary.Add(geoLongArcXName, typeof(geoLong));
            localElementDictionary.Add(valElevXName, typeof(valDistVer));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// TLOF Geometry
    /// </para>
    /// <para>
    /// Regular expression: (TlgUid, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, valElevAccuracy?, valGeoidUndulation?, uomDistVer?, txtRmk?, Tsp+)
    /// </para>
    /// </summary>
    public partial class TlofGeometryType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TlgUidXName = System.Xml.Linq.XName.Get("TlgUid", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName codeDatumXName = System.Xml.Linq.XName.Get("codeDatum", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName valGeoAccuracyXName = System.Xml.Linq.XName.Get("valGeoAccuracy", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName uomGeoAccuracyXName = System.Xml.Linq.XName.Get("uomGeoAccuracy", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName valElevAccuracyXName = System.Xml.Linq.XName.Get("valElevAccuracy", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName valGeoidUndulationXName = System.Xml.Linq.XName.Get("valGeoidUndulation", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName uomDistVerXName = System.Xml.Linq.XName.Get("uomDistVer", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName txtRmkXName = System.Xml.Linq.XName.Get("txtRmk", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TspXName = System.Xml.Linq.XName.Get("Tsp", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<TlofGeometryPointType> TspField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName sourceXName = System.Xml.Linq.XName.Get("source", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("TlofGeometryType", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator TlofGeometryType(XElement xe) { return XTypedServices.ToXTypedElement<TlofGeometryType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static TlofGeometryType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(TlgUidXName), new NamedContentModelEntity(codeDatumXName), new NamedContentModelEntity(valGeoAccuracyXName), new NamedContentModelEntity(uomGeoAccuracyXName), new NamedContentModelEntity(valElevAccuracyXName), new NamedContentModelEntity(valGeoidUndulationXName), new NamedContentModelEntity(uomDistVerXName), new NamedContentModelEntity(txtRmkXName), new NamedContentModelEntity(TspXName));
        }
        
        /// <summary>
        /// <para>
        /// TLOF Geometry
        /// </para>
        /// <para>
        /// Regular expression: (TlgUid, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, valElevAccuracy?, valGeoidUndulation?, uomDistVer?, txtRmk?, Tsp+)
        /// </para>
        /// </summary>
        public TlofGeometryType() {
        }
        
        /// <summary>
        /// <para>
        /// a version of TLOF Geometry
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (TlgUid, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, valElevAccuracy?, valGeoidUndulation?, uomDistVer?, txtRmk?, Tsp+)
        /// </para>
        /// </summary>
        public virtual TlofGeometryUidType TlgUid {
            get {
                XElement x = this.GetElement(TlgUidXName);
                return ((TlofGeometryUidType)(x));
            }
            set {
                this.SetElement(TlgUidXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Datum
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (TlgUid, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, valElevAccuracy?, valGeoidUndulation?, uomDistVer?, txtRmk?, Tsp+)
        /// </para>
        /// </summary>
        public virtual codeDatum codeDatum {
            get {
                XElement x = this.GetElement(codeDatumXName);
                return ((codeDatum)(x));
            }
            set {
                this.SetElement(codeDatumXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Geographical accuracy
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (TlgUid, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, valElevAccuracy?, valGeoidUndulation?, uomDistVer?, txtRmk?, Tsp+)
        /// </para>
        /// </summary>
        public virtual valDistHorz valGeoAccuracy {
            get {
                XElement x = this.GetElement(valGeoAccuracyXName);
                return ((valDistHorz)(x));
            }
            set {
                this.SetElement(valGeoAccuracyXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Unit of measurement [geographical accuracy]
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (TlgUid, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, valElevAccuracy?, valGeoidUndulation?, uomDistVer?, txtRmk?, Tsp+)
        /// </para>
        /// </summary>
        public virtual uomDistHorz uomGeoAccuracy {
            get {
                XElement x = this.GetElement(uomGeoAccuracyXName);
                return ((uomDistHorz)(x));
            }
            set {
                this.SetElement(uomGeoAccuracyXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Elevation accuracy
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (TlgUid, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, valElevAccuracy?, valGeoidUndulation?, uomDistVer?, txtRmk?, Tsp+)
        /// </para>
        /// </summary>
        public virtual valDistVer valElevAccuracy {
            get {
                XElement x = this.GetElement(valElevAccuracyXName);
                return ((valDistVer)(x));
            }
            set {
                this.SetElement(valElevAccuracyXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Geoid undulation
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (TlgUid, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, valElevAccuracy?, valGeoidUndulation?, uomDistVer?, txtRmk?, Tsp+)
        /// </para>
        /// </summary>
        public virtual valDistVer valGeoidUndulation {
            get {
                XElement x = this.GetElement(valGeoidUndulationXName);
                return ((valDistVer)(x));
            }
            set {
                this.SetElement(valGeoidUndulationXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Unit of measurement [vertical distance]
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (TlgUid, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, valElevAccuracy?, valGeoidUndulation?, uomDistVer?, txtRmk?, Tsp+)
        /// </para>
        /// </summary>
        public virtual uomDistVer uomDistVer {
            get {
                XElement x = this.GetElement(uomDistVerXName);
                return ((uomDistVer)(x));
            }
            set {
                this.SetElement(uomDistVerXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Remark
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (TlgUid, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, valElevAccuracy?, valGeoidUndulation?, uomDistVer?, txtRmk?, Tsp+)
        /// </para>
        /// </summary>
        public virtual txtRmk txtRmk {
            get {
                XElement x = this.GetElement(txtRmkXName);
                return ((txtRmk)(x));
            }
            set {
                this.SetElement(txtRmkXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// TLOF Geometry is described with TLOF geometry point
        /// </para>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (TlgUid, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, valElevAccuracy?, valGeoidUndulation?, uomDistVer?, txtRmk?, Tsp+)
        /// </para>
        /// </summary>
        public virtual IList<TlofGeometryPointType> Tsp {
            get {
                if ((this.TspField == null)) {
                    this.TspField = new XTypedList<TlofGeometryPointType>(this, LinqToXsdTypeManager.Instance, TspXName);
                }
                return this.TspField;
            }
            set {
                if ((value == null)) {
                    this.TspField = null;
                }
                else {
                    if ((this.TspField == null)) {
                        this.TspField = XTypedList<TlofGeometryPointType>.Initialize(this, LinqToXsdTypeManager.Instance, value, TspXName);
                    }
                    else {
                        XTypedServices.SetList<TlofGeometryPointType>(this.TspField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string source {
            get {
                XAttribute x = this.Attribute(sourceXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(sourceXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<TlofGeometryType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(TlgUidXName, typeof(TlofGeometryUidType));
            localElementDictionary.Add(codeDatumXName, typeof(codeDatum));
            localElementDictionary.Add(valGeoAccuracyXName, typeof(valDistHorz));
            localElementDictionary.Add(uomGeoAccuracyXName, typeof(uomDistHorz));
            localElementDictionary.Add(valElevAccuracyXName, typeof(valDistVer));
            localElementDictionary.Add(valGeoidUndulationXName, typeof(valDistVer));
            localElementDictionary.Add(uomDistVerXName, typeof(uomDistVer));
            localElementDictionary.Add(txtRmkXName, typeof(txtRmk));
            localElementDictionary.Add(TspXName, typeof(TlofGeometryPointType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// TLOF Geometry - UID
    /// </para>
    /// <para>
    /// Regular expression: (TlaUid)
    /// </para>
    /// </summary>
    public partial class TlofGeometryUidType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TlaUidXName = System.Xml.Linq.XName.Get("TlaUid", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName midXName = System.Xml.Linq.XName.Get("mid", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("TlofGeometryUidType", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator TlofGeometryUidType(XElement xe) { return XTypedServices.ToXTypedElement<TlofGeometryUidType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static TlofGeometryUidType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(TlaUidXName));
        }
        
        /// <summary>
        /// <para>
        /// TLOF Geometry - UID
        /// </para>
        /// <para>
        /// Regular expression: (TlaUid)
        /// </para>
        /// </summary>
        public TlofGeometryUidType() {
        }
        
        /// <summary>
        /// <para>
        /// TLOF Geometry is associated with Touch down and lift off area [TLOF]
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (TlaUid)
        /// </para>
        /// </summary>
        public virtual TlofUidType TlaUid {
            get {
                XElement x = this.GetElement(TlaUidXName);
                return ((TlofUidType)(x));
            }
            set {
                this.SetElement(TlaUidXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string mid {
            get {
                XAttribute x = this.Attribute(midXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(midXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<TlofGeometryUidType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(TlaUidXName, typeof(TlofUidType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// TLOF lighting system
    /// </para>
    /// <para>
    /// Regular expression: (TlsUid, txtDescr?, txtDescrEmerg?, codeIntst?, codeColour?, txtRmk?, Tlg*)
    /// </para>
    /// </summary>
    public partial class TlofLightingSystemType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TlsUidXName = System.Xml.Linq.XName.Get("TlsUid", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName txtDescrXName = System.Xml.Linq.XName.Get("txtDescr", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName txtDescrEmergXName = System.Xml.Linq.XName.Get("txtDescrEmerg", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName codeIntstXName = System.Xml.Linq.XName.Get("codeIntst", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName codeColourXName = System.Xml.Linq.XName.Get("codeColour", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName txtRmkXName = System.Xml.Linq.XName.Get("txtRmk", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TlgXName = System.Xml.Linq.XName.Get("Tlg", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<LightGroupType> TlgField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName sourceXName = System.Xml.Linq.XName.Get("source", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("TlofLightingSystemType", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator TlofLightingSystemType(XElement xe) { return XTypedServices.ToXTypedElement<TlofLightingSystemType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static TlofLightingSystemType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(TlsUidXName), new NamedContentModelEntity(txtDescrXName), new NamedContentModelEntity(txtDescrEmergXName), new NamedContentModelEntity(codeIntstXName), new NamedContentModelEntity(codeColourXName), new NamedContentModelEntity(txtRmkXName), new NamedContentModelEntity(TlgXName));
        }
        
        /// <summary>
        /// <para>
        /// TLOF lighting system
        /// </para>
        /// <para>
        /// Regular expression: (TlsUid, txtDescr?, txtDescrEmerg?, codeIntst?, codeColour?, txtRmk?, Tlg*)
        /// </para>
        /// </summary>
        public TlofLightingSystemType() {
        }
        
        /// <summary>
        /// <para>
        /// a version of TLOF lighting system
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (TlsUid, txtDescr?, txtDescrEmerg?, codeIntst?, codeColour?, txtRmk?, Tlg*)
        /// </para>
        /// </summary>
        public virtual TlofLightingSystemUidType TlsUid {
            get {
                XElement x = this.GetElement(TlsUidXName);
                return ((TlofLightingSystemUidType)(x));
            }
            set {
                this.SetElement(TlsUidXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Description
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (TlsUid, txtDescr?, txtDescrEmerg?, codeIntst?, codeColour?, txtRmk?, Tlg*)
        /// </para>
        /// </summary>
        public virtual txtDescr txtDescr {
            get {
                XElement x = this.GetElement(txtDescrXName);
                return ((txtDescr)(x));
            }
            set {
                this.SetElement(txtDescrXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Description of emergency lighting
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (TlsUid, txtDescr?, txtDescrEmerg?, codeIntst?, codeColour?, txtRmk?, Tlg*)
        /// </para>
        /// </summary>
        public virtual txtDescr txtDescrEmerg {
            get {
                XElement x = this.GetElement(txtDescrEmergXName);
                return ((txtDescr)(x));
            }
            set {
                this.SetElement(txtDescrEmergXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Intensity
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (TlsUid, txtDescr?, txtDescrEmerg?, codeIntst?, codeColour?, txtRmk?, Tlg*)
        /// </para>
        /// </summary>
        public virtual codeIntstLgt codeIntst {
            get {
                XElement x = this.GetElement(codeIntstXName);
                return ((codeIntstLgt)(x));
            }
            set {
                this.SetElement(codeIntstXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Colour
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (TlsUid, txtDescr?, txtDescrEmerg?, codeIntst?, codeColour?, txtRmk?, Tlg*)
        /// </para>
        /// </summary>
        public virtual codeColour codeColour {
            get {
                XElement x = this.GetElement(codeColourXName);
                return ((codeColour)(x));
            }
            set {
                this.SetElement(codeColourXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Remark
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (TlsUid, txtDescr?, txtDescrEmerg?, codeIntst?, codeColour?, txtRmk?, Tlg*)
        /// </para>
        /// </summary>
        public virtual txtRmk txtRmk {
            get {
                XElement x = this.GetElement(txtRmkXName);
                return ((txtRmk)(x));
            }
            set {
                this.SetElement(txtRmkXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// TLOF lighting system is composed of Group of ligthing system
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (TlsUid, txtDescr?, txtDescrEmerg?, codeIntst?, codeColour?, txtRmk?, Tlg*)
        /// </para>
        /// </summary>
        public virtual IList<LightGroupType> Tlg {
            get {
                if ((this.TlgField == null)) {
                    this.TlgField = new XTypedList<LightGroupType>(this, LinqToXsdTypeManager.Instance, TlgXName);
                }
                return this.TlgField;
            }
            set {
                if ((value == null)) {
                    this.TlgField = null;
                }
                else {
                    if ((this.TlgField == null)) {
                        this.TlgField = XTypedList<LightGroupType>.Initialize(this, LinqToXsdTypeManager.Instance, value, TlgXName);
                    }
                    else {
                        XTypedServices.SetList<LightGroupType>(this.TlgField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string source {
            get {
                XAttribute x = this.Attribute(sourceXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(sourceXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<TlofLightingSystemType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(TlsUidXName, typeof(TlofLightingSystemUidType));
            localElementDictionary.Add(txtDescrXName, typeof(txtDescr));
            localElementDictionary.Add(txtDescrEmergXName, typeof(txtDescr));
            localElementDictionary.Add(codeIntstXName, typeof(codeIntstLgt));
            localElementDictionary.Add(codeColourXName, typeof(codeColour));
            localElementDictionary.Add(txtRmkXName, typeof(txtRmk));
            localElementDictionary.Add(TlgXName, typeof(LightGroupType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// TLOF lighting system - UID
    /// </para>
    /// <para>
    /// Regular expression: (TlaUid, codePsn)
    /// </para>
    /// </summary>
    public partial class TlofLightingSystemUidType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TlaUidXName = System.Xml.Linq.XName.Get("TlaUid", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName codePsnXName = System.Xml.Linq.XName.Get("codePsn", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName midXName = System.Xml.Linq.XName.Get("mid", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("TlofLightingSystemUidType", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator TlofLightingSystemUidType(XElement xe) { return XTypedServices.ToXTypedElement<TlofLightingSystemUidType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static TlofLightingSystemUidType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(TlaUidXName), new NamedContentModelEntity(codePsnXName));
        }
        
        /// <summary>
        /// <para>
        /// TLOF lighting system - UID
        /// </para>
        /// <para>
        /// Regular expression: (TlaUid, codePsn)
        /// </para>
        /// </summary>
        public TlofLightingSystemUidType() {
        }
        
        /// <summary>
        /// <para>
        /// TLOF lighting system is owned by Touch down and lift off area [TLOF]
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (TlaUid, codePsn)
        /// </para>
        /// </summary>
        public virtual TlofUidType TlaUid {
            get {
                XElement x = this.GetElement(TlaUidXName);
                return ((TlofUidType)(x));
            }
            set {
                this.SetElement(TlaUidXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Part
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (TlaUid, codePsn)
        /// </para>
        /// </summary>
        public virtual codePsnTlof codePsn {
            get {
                XElement x = this.GetElement(codePsnXName);
                return ((codePsnTlof)(x));
            }
            set {
                this.SetElement(codePsnXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string mid {
            get {
                XAttribute x = this.Attribute(midXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(midXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<TlofLightingSystemUidType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(TlaUidXName, typeof(TlofUidType));
            localElementDictionary.Add(codePsnXName, typeof(codePsnTlof));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// TLOF safe area geometry point
    /// </para>
    /// <para>
    /// Regular expression: (codeType, geoLat, geoLong, geoLatArc?, geoLongArc?, valElev?)
    /// </para>
    /// </summary>
    public partial class TlofSafeAreaGeometryPointType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName codeTypeXName = System.Xml.Linq.XName.Get("codeType", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName geoLatXName = System.Xml.Linq.XName.Get("geoLat", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName geoLongXName = System.Xml.Linq.XName.Get("geoLong", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName geoLatArcXName = System.Xml.Linq.XName.Get("geoLatArc", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName geoLongArcXName = System.Xml.Linq.XName.Get("geoLongArc", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName valElevXName = System.Xml.Linq.XName.Get("valElev", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("TlofSafeAreaGeometryPointType", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator TlofSafeAreaGeometryPointType(XElement xe) { return XTypedServices.ToXTypedElement<TlofSafeAreaGeometryPointType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static TlofSafeAreaGeometryPointType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(codeTypeXName), new NamedContentModelEntity(geoLatXName), new NamedContentModelEntity(geoLongXName), new NamedContentModelEntity(geoLatArcXName), new NamedContentModelEntity(geoLongArcXName), new NamedContentModelEntity(valElevXName));
        }
        
        /// <summary>
        /// <para>
        /// TLOF safe area geometry point
        /// </para>
        /// <para>
        /// Regular expression: (codeType, geoLat, geoLong, geoLatArc?, geoLongArc?, valElev?)
        /// </para>
        /// </summary>
        public TlofSafeAreaGeometryPointType() {
        }
        
        /// <summary>
        /// <para>
        /// Type
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (codeType, geoLat, geoLong, geoLatArc?, geoLongArc?, valElev?)
        /// </para>
        /// </summary>
        public virtual codeTypeTlofVertex codeType {
            get {
                XElement x = this.GetElement(codeTypeXName);
                return ((codeTypeTlofVertex)(x));
            }
            set {
                this.SetElement(codeTypeXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Latitude
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (codeType, geoLat, geoLong, geoLatArc?, geoLongArc?, valElev?)
        /// </para>
        /// </summary>
        public virtual geoLat geoLat {
            get {
                XElement x = this.GetElement(geoLatXName);
                return ((geoLat)(x));
            }
            set {
                this.SetElement(geoLatXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Longitude
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (codeType, geoLat, geoLong, geoLatArc?, geoLongArc?, valElev?)
        /// </para>
        /// </summary>
        public virtual geoLong geoLong {
            get {
                XElement x = this.GetElement(geoLongXName);
                return ((geoLong)(x));
            }
            set {
                this.SetElement(geoLongXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Latitude for arc
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (codeType, geoLat, geoLong, geoLatArc?, geoLongArc?, valElev?)
        /// </para>
        /// </summary>
        public virtual geoLat geoLatArc {
            get {
                XElement x = this.GetElement(geoLatArcXName);
                return ((geoLat)(x));
            }
            set {
                this.SetElement(geoLatArcXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Longitude for arc
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (codeType, geoLat, geoLong, geoLatArc?, geoLongArc?, valElev?)
        /// </para>
        /// </summary>
        public virtual geoLong geoLongArc {
            get {
                XElement x = this.GetElement(geoLongArcXName);
                return ((geoLong)(x));
            }
            set {
                this.SetElement(geoLongArcXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Elevation
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (codeType, geoLat, geoLong, geoLatArc?, geoLongArc?, valElev?)
        /// </para>
        /// </summary>
        public virtual valDistVer valElev {
            get {
                XElement x = this.GetElement(valElevXName);
                return ((valDistVer)(x));
            }
            set {
                this.SetElement(valElevXName, value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<TlofSafeAreaGeometryPointType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(codeTypeXName, typeof(codeTypeTlofVertex));
            localElementDictionary.Add(geoLatXName, typeof(geoLat));
            localElementDictionary.Add(geoLongXName, typeof(geoLong));
            localElementDictionary.Add(geoLatArcXName, typeof(geoLat));
            localElementDictionary.Add(geoLongArcXName, typeof(geoLong));
            localElementDictionary.Add(valElevXName, typeof(valDistVer));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// TLOF safe area geometry
    /// </para>
    /// <para>
    /// Regular expression: (TsgUid, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, valElevAccuracy?, valGeoidUndulation?, uomDistVer?, txtRmk?, Tap+)
    /// </para>
    /// </summary>
    public partial class TlofSafeAreaGeometryType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TsgUidXName = System.Xml.Linq.XName.Get("TsgUid", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName codeDatumXName = System.Xml.Linq.XName.Get("codeDatum", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName valGeoAccuracyXName = System.Xml.Linq.XName.Get("valGeoAccuracy", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName uomGeoAccuracyXName = System.Xml.Linq.XName.Get("uomGeoAccuracy", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName valElevAccuracyXName = System.Xml.Linq.XName.Get("valElevAccuracy", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName valGeoidUndulationXName = System.Xml.Linq.XName.Get("valGeoidUndulation", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName uomDistVerXName = System.Xml.Linq.XName.Get("uomDistVer", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName txtRmkXName = System.Xml.Linq.XName.Get("txtRmk", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TapXName = System.Xml.Linq.XName.Get("Tap", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<TlofSafeAreaGeometryPointType> TapField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName sourceXName = System.Xml.Linq.XName.Get("source", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("TlofSafeAreaGeometryType", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator TlofSafeAreaGeometryType(XElement xe) { return XTypedServices.ToXTypedElement<TlofSafeAreaGeometryType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static TlofSafeAreaGeometryType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(TsgUidXName), new NamedContentModelEntity(codeDatumXName), new NamedContentModelEntity(valGeoAccuracyXName), new NamedContentModelEntity(uomGeoAccuracyXName), new NamedContentModelEntity(valElevAccuracyXName), new NamedContentModelEntity(valGeoidUndulationXName), new NamedContentModelEntity(uomDistVerXName), new NamedContentModelEntity(txtRmkXName), new NamedContentModelEntity(TapXName));
        }
        
        /// <summary>
        /// <para>
        /// TLOF safe area geometry
        /// </para>
        /// <para>
        /// Regular expression: (TsgUid, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, valElevAccuracy?, valGeoidUndulation?, uomDistVer?, txtRmk?, Tap+)
        /// </para>
        /// </summary>
        public TlofSafeAreaGeometryType() {
        }
        
        /// <summary>
        /// <para>
        /// a version of TLOF safe area geometry
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (TsgUid, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, valElevAccuracy?, valGeoidUndulation?, uomDistVer?, txtRmk?, Tap+)
        /// </para>
        /// </summary>
        public virtual TlofSafeAreaGeometryUidType TsgUid {
            get {
                XElement x = this.GetElement(TsgUidXName);
                return ((TlofSafeAreaGeometryUidType)(x));
            }
            set {
                this.SetElement(TsgUidXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Datum
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (TsgUid, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, valElevAccuracy?, valGeoidUndulation?, uomDistVer?, txtRmk?, Tap+)
        /// </para>
        /// </summary>
        public virtual codeDatum codeDatum {
            get {
                XElement x = this.GetElement(codeDatumXName);
                return ((codeDatum)(x));
            }
            set {
                this.SetElement(codeDatumXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Geographical accuracy
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (TsgUid, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, valElevAccuracy?, valGeoidUndulation?, uomDistVer?, txtRmk?, Tap+)
        /// </para>
        /// </summary>
        public virtual valDistHorz valGeoAccuracy {
            get {
                XElement x = this.GetElement(valGeoAccuracyXName);
                return ((valDistHorz)(x));
            }
            set {
                this.SetElement(valGeoAccuracyXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Unit of measurement [geographical accuracy]
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (TsgUid, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, valElevAccuracy?, valGeoidUndulation?, uomDistVer?, txtRmk?, Tap+)
        /// </para>
        /// </summary>
        public virtual uomDistHorz uomGeoAccuracy {
            get {
                XElement x = this.GetElement(uomGeoAccuracyXName);
                return ((uomDistHorz)(x));
            }
            set {
                this.SetElement(uomGeoAccuracyXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Elevation accuracy
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (TsgUid, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, valElevAccuracy?, valGeoidUndulation?, uomDistVer?, txtRmk?, Tap+)
        /// </para>
        /// </summary>
        public virtual valDistVer valElevAccuracy {
            get {
                XElement x = this.GetElement(valElevAccuracyXName);
                return ((valDistVer)(x));
            }
            set {
                this.SetElement(valElevAccuracyXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Geoid undulation
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (TsgUid, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, valElevAccuracy?, valGeoidUndulation?, uomDistVer?, txtRmk?, Tap+)
        /// </para>
        /// </summary>
        public virtual valDistVer valGeoidUndulation {
            get {
                XElement x = this.GetElement(valGeoidUndulationXName);
                return ((valDistVer)(x));
            }
            set {
                this.SetElement(valGeoidUndulationXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Unit of measurement [vertical distance]
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (TsgUid, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, valElevAccuracy?, valGeoidUndulation?, uomDistVer?, txtRmk?, Tap+)
        /// </para>
        /// </summary>
        public virtual uomElev uomDistVer {
            get {
                XElement x = this.GetElement(uomDistVerXName);
                return ((uomElev)(x));
            }
            set {
                this.SetElement(uomDistVerXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Remark
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (TsgUid, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, valElevAccuracy?, valGeoidUndulation?, uomDistVer?, txtRmk?, Tap+)
        /// </para>
        /// </summary>
        public virtual txtRmk txtRmk {
            get {
                XElement x = this.GetElement(txtRmkXName);
                return ((txtRmk)(x));
            }
            set {
                this.SetElement(txtRmkXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// TLOF safe area geometry is described with TLOF safe area geometry point
        /// </para>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (TsgUid, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, valElevAccuracy?, valGeoidUndulation?, uomDistVer?, txtRmk?, Tap+)
        /// </para>
        /// </summary>
        public virtual IList<TlofSafeAreaGeometryPointType> Tap {
            get {
                if ((this.TapField == null)) {
                    this.TapField = new XTypedList<TlofSafeAreaGeometryPointType>(this, LinqToXsdTypeManager.Instance, TapXName);
                }
                return this.TapField;
            }
            set {
                if ((value == null)) {
                    this.TapField = null;
                }
                else {
                    if ((this.TapField == null)) {
                        this.TapField = XTypedList<TlofSafeAreaGeometryPointType>.Initialize(this, LinqToXsdTypeManager.Instance, value, TapXName);
                    }
                    else {
                        XTypedServices.SetList<TlofSafeAreaGeometryPointType>(this.TapField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string source {
            get {
                XAttribute x = this.Attribute(sourceXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(sourceXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<TlofSafeAreaGeometryType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(TsgUidXName, typeof(TlofSafeAreaGeometryUidType));
            localElementDictionary.Add(codeDatumXName, typeof(codeDatum));
            localElementDictionary.Add(valGeoAccuracyXName, typeof(valDistHorz));
            localElementDictionary.Add(uomGeoAccuracyXName, typeof(uomDistHorz));
            localElementDictionary.Add(valElevAccuracyXName, typeof(valDistVer));
            localElementDictionary.Add(valGeoidUndulationXName, typeof(valDistVer));
            localElementDictionary.Add(uomDistVerXName, typeof(uomElev));
            localElementDictionary.Add(txtRmkXName, typeof(txtRmk));
            localElementDictionary.Add(TapXName, typeof(TlofSafeAreaGeometryPointType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// TLOF safe area geometry - UID
    /// </para>
    /// <para>
    /// Regular expression: (TsaUid)
    /// </para>
    /// </summary>
    public partial class TlofSafeAreaGeometryUidType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TsaUidXName = System.Xml.Linq.XName.Get("TsaUid", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName midXName = System.Xml.Linq.XName.Get("mid", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("TlofSafeAreaGeometryUidType", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator TlofSafeAreaGeometryUidType(XElement xe) { return XTypedServices.ToXTypedElement<TlofSafeAreaGeometryUidType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static TlofSafeAreaGeometryUidType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(TsaUidXName));
        }
        
        /// <summary>
        /// <para>
        /// TLOF safe area geometry - UID
        /// </para>
        /// <para>
        /// Regular expression: (TsaUid)
        /// </para>
        /// </summary>
        public TlofSafeAreaGeometryUidType() {
        }
        
        /// <summary>
        /// <para>
        /// TLOF safe area geometry is associated with TLOF safe area
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (TsaUid)
        /// </para>
        /// </summary>
        public virtual TlofSafeAreaUidType TsaUid {
            get {
                XElement x = this.GetElement(TsaUidXName);
                return ((TlofSafeAreaUidType)(x));
            }
            set {
                this.SetElement(TsaUidXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string mid {
            get {
                XAttribute x = this.Attribute(midXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(midXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<TlofSafeAreaGeometryUidType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(TsaUidXName, typeof(TlofSafeAreaUidType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// TLOF safe area
    /// </para>
    /// <para>
    /// Regular expression: (TsaUid, valWid?, valLen?, uomDim?, codeComposition?, codePreparation?, codeCondSfc?, valPcnClass?, codePcnPavementType?, codePcnPavementSubgrade?, codePcnMaxTirePressure?, valPcnMaxTirePressure?, codePcnEvalMethod?, txtPcnNote?, valLcnClass?, valSiwlWeight?, uomSiwlWeight?, valSiwlTirePressure?, uomSiwlTirePressure?, valAuwWeight?, uomAuwWeight?, codeSts?, txtLgt?, txtRmk?)
    /// </para>
    /// </summary>
    public partial class TlofSafeAreaType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TsaUidXName = System.Xml.Linq.XName.Get("TsaUid", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName valWidXName = System.Xml.Linq.XName.Get("valWid", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName valLenXName = System.Xml.Linq.XName.Get("valLen", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName uomDimXName = System.Xml.Linq.XName.Get("uomDim", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName codeCompositionXName = System.Xml.Linq.XName.Get("codeComposition", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName codePreparationXName = System.Xml.Linq.XName.Get("codePreparation", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName codeCondSfcXName = System.Xml.Linq.XName.Get("codeCondSfc", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName valPcnClassXName = System.Xml.Linq.XName.Get("valPcnClass", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName codePcnPavementTypeXName = System.Xml.Linq.XName.Get("codePcnPavementType", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName codePcnPavementSubgradeXName = System.Xml.Linq.XName.Get("codePcnPavementSubgrade", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName codePcnMaxTirePressureXName = System.Xml.Linq.XName.Get("codePcnMaxTirePressure", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName valPcnMaxTirePressureXName = System.Xml.Linq.XName.Get("valPcnMaxTirePressure", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName codePcnEvalMethodXName = System.Xml.Linq.XName.Get("codePcnEvalMethod", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName txtPcnNoteXName = System.Xml.Linq.XName.Get("txtPcnNote", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName valLcnClassXName = System.Xml.Linq.XName.Get("valLcnClass", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName valSiwlWeightXName = System.Xml.Linq.XName.Get("valSiwlWeight", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName uomSiwlWeightXName = System.Xml.Linq.XName.Get("uomSiwlWeight", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName valSiwlTirePressureXName = System.Xml.Linq.XName.Get("valSiwlTirePressure", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName uomSiwlTirePressureXName = System.Xml.Linq.XName.Get("uomSiwlTirePressure", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName valAuwWeightXName = System.Xml.Linq.XName.Get("valAuwWeight", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName uomAuwWeightXName = System.Xml.Linq.XName.Get("uomAuwWeight", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName codeStsXName = System.Xml.Linq.XName.Get("codeSts", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName txtLgtXName = System.Xml.Linq.XName.Get("txtLgt", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName txtRmkXName = System.Xml.Linq.XName.Get("txtRmk", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName sourceXName = System.Xml.Linq.XName.Get("source", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("TlofSafeAreaType", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator TlofSafeAreaType(XElement xe) { return XTypedServices.ToXTypedElement<TlofSafeAreaType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static TlofSafeAreaType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(TsaUidXName), new NamedContentModelEntity(valWidXName), new NamedContentModelEntity(valLenXName), new NamedContentModelEntity(uomDimXName), new NamedContentModelEntity(codeCompositionXName), new NamedContentModelEntity(codePreparationXName), new NamedContentModelEntity(codeCondSfcXName), new NamedContentModelEntity(valPcnClassXName), new NamedContentModelEntity(codePcnPavementTypeXName), new NamedContentModelEntity(codePcnPavementSubgradeXName), new NamedContentModelEntity(codePcnMaxTirePressureXName), new NamedContentModelEntity(valPcnMaxTirePressureXName), new NamedContentModelEntity(codePcnEvalMethodXName), new NamedContentModelEntity(txtPcnNoteXName), new NamedContentModelEntity(valLcnClassXName), new NamedContentModelEntity(valSiwlWeightXName), new NamedContentModelEntity(uomSiwlWeightXName), new NamedContentModelEntity(valSiwlTirePressureXName), new NamedContentModelEntity(uomSiwlTirePressureXName), new NamedContentModelEntity(valAuwWeightXName), new NamedContentModelEntity(uomAuwWeightXName), new NamedContentModelEntity(codeStsXName), new NamedContentModelEntity(txtLgtXName), new NamedContentModelEntity(txtRmkXName));
        }
        
        /// <summary>
        /// <para>
        /// TLOF safe area
        /// </para>
        /// <para>
        /// Regular expression: (TsaUid, valWid?, valLen?, uomDim?, codeComposition?, codePreparation?, codeCondSfc?, valPcnClass?, codePcnPavementType?, codePcnPavementSubgrade?, codePcnMaxTirePressure?, valPcnMaxTirePressure?, codePcnEvalMethod?, txtPcnNote?, valLcnClass?, valSiwlWeight?, uomSiwlWeight?, valSiwlTirePressure?, uomSiwlTirePressure?, valAuwWeight?, uomAuwWeight?, codeSts?, txtLgt?, txtRmk?)
        /// </para>
        /// </summary>
        public TlofSafeAreaType() {
        }
        
        /// <summary>
        /// <para>
        /// a version of TLOF safe area
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (TsaUid, valWid?, valLen?, uomDim?, codeComposition?, codePreparation?, codeCondSfc?, valPcnClass?, codePcnPavementType?, codePcnPavementSubgrade?, codePcnMaxTirePressure?, valPcnMaxTirePressure?, codePcnEvalMethod?, txtPcnNote?, valLcnClass?, valSiwlWeight?, uomSiwlWeight?, valSiwlTirePressure?, uomSiwlTirePressure?, valAuwWeight?, uomAuwWeight?, codeSts?, txtLgt?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual TlofSafeAreaUidType TsaUid {
            get {
                XElement x = this.GetElement(TsaUidXName);
                return ((TlofSafeAreaUidType)(x));
            }
            set {
                this.SetElement(TsaUidXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Width
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (TsaUid, valWid?, valLen?, uomDim?, codeComposition?, codePreparation?, codeCondSfc?, valPcnClass?, codePcnPavementType?, codePcnPavementSubgrade?, codePcnMaxTirePressure?, valPcnMaxTirePressure?, codePcnEvalMethod?, txtPcnNote?, valLcnClass?, valSiwlWeight?, uomSiwlWeight?, valSiwlTirePressure?, uomSiwlTirePressure?, valAuwWeight?, uomAuwWeight?, codeSts?, txtLgt?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual valDistHorz valWid {
            get {
                XElement x = this.GetElement(valWidXName);
                return ((valDistHorz)(x));
            }
            set {
                this.SetElement(valWidXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Length
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (TsaUid, valWid?, valLen?, uomDim?, codeComposition?, codePreparation?, codeCondSfc?, valPcnClass?, codePcnPavementType?, codePcnPavementSubgrade?, codePcnMaxTirePressure?, valPcnMaxTirePressure?, codePcnEvalMethod?, txtPcnNote?, valLcnClass?, valSiwlWeight?, uomSiwlWeight?, valSiwlTirePressure?, uomSiwlTirePressure?, valAuwWeight?, uomAuwWeight?, codeSts?, txtLgt?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual valDistHorz valLen {
            get {
                XElement x = this.GetElement(valLenXName);
                return ((valDistHorz)(x));
            }
            set {
                this.SetElement(valLenXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Unit of measurement [horizontal dimension]
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (TsaUid, valWid?, valLen?, uomDim?, codeComposition?, codePreparation?, codeCondSfc?, valPcnClass?, codePcnPavementType?, codePcnPavementSubgrade?, codePcnMaxTirePressure?, valPcnMaxTirePressure?, codePcnEvalMethod?, txtPcnNote?, valLcnClass?, valSiwlWeight?, uomSiwlWeight?, valSiwlTirePressure?, uomSiwlTirePressure?, valAuwWeight?, uomAuwWeight?, codeSts?, txtLgt?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual uomDistHorz uomDim {
            get {
                XElement x = this.GetElement(uomDimXName);
                return ((uomDistHorz)(x));
            }
            set {
                this.SetElement(uomDimXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Surface composition
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (TsaUid, valWid?, valLen?, uomDim?, codeComposition?, codePreparation?, codeCondSfc?, valPcnClass?, codePcnPavementType?, codePcnPavementSubgrade?, codePcnMaxTirePressure?, valPcnMaxTirePressure?, codePcnEvalMethod?, txtPcnNote?, valLcnClass?, valSiwlWeight?, uomSiwlWeight?, valSiwlTirePressure?, uomSiwlTirePressure?, valAuwWeight?, uomAuwWeight?, codeSts?, txtLgt?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual codeCompositionSfc codeComposition {
            get {
                XElement x = this.GetElement(codeCompositionXName);
                return ((codeCompositionSfc)(x));
            }
            set {
                this.SetElement(codeCompositionXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Surface preparation method
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (TsaUid, valWid?, valLen?, uomDim?, codeComposition?, codePreparation?, codeCondSfc?, valPcnClass?, codePcnPavementType?, codePcnPavementSubgrade?, codePcnMaxTirePressure?, valPcnMaxTirePressure?, codePcnEvalMethod?, txtPcnNote?, valLcnClass?, valSiwlWeight?, uomSiwlWeight?, valSiwlTirePressure?, uomSiwlTirePressure?, valAuwWeight?, uomAuwWeight?, codeSts?, txtLgt?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual codePreparationSfc codePreparation {
            get {
                XElement x = this.GetElement(codePreparationXName);
                return ((codePreparationSfc)(x));
            }
            set {
                this.SetElement(codePreparationXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Surface condition
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (TsaUid, valWid?, valLen?, uomDim?, codeComposition?, codePreparation?, codeCondSfc?, valPcnClass?, codePcnPavementType?, codePcnPavementSubgrade?, codePcnMaxTirePressure?, valPcnMaxTirePressure?, codePcnEvalMethod?, txtPcnNote?, valLcnClass?, valSiwlWeight?, uomSiwlWeight?, valSiwlTirePressure?, uomSiwlTirePressure?, valAuwWeight?, uomAuwWeight?, codeSts?, txtLgt?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual codeCondSfc codeCondSfc {
            get {
                XElement x = this.GetElement(codeCondSfcXName);
                return ((codeCondSfc)(x));
            }
            set {
                this.SetElement(codeCondSfcXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// PCN (Pavement Classification Number) value
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (TsaUid, valWid?, valLen?, uomDim?, codeComposition?, codePreparation?, codeCondSfc?, valPcnClass?, codePcnPavementType?, codePcnPavementSubgrade?, codePcnMaxTirePressure?, valPcnMaxTirePressure?, codePcnEvalMethod?, txtPcnNote?, valLcnClass?, valSiwlWeight?, uomSiwlWeight?, valSiwlTirePressure?, uomSiwlTirePressure?, valAuwWeight?, uomAuwWeight?, codeSts?, txtLgt?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual valPcnClass valPcnClass {
            get {
                XElement x = this.GetElement(valPcnClassXName);
                return ((valPcnClass)(x));
            }
            set {
                this.SetElement(valPcnClassXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// PCN pavement type
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (TsaUid, valWid?, valLen?, uomDim?, codeComposition?, codePreparation?, codeCondSfc?, valPcnClass?, codePcnPavementType?, codePcnPavementSubgrade?, codePcnMaxTirePressure?, valPcnMaxTirePressure?, codePcnEvalMethod?, txtPcnNote?, valLcnClass?, valSiwlWeight?, uomSiwlWeight?, valSiwlTirePressure?, uomSiwlTirePressure?, valAuwWeight?, uomAuwWeight?, codeSts?, txtLgt?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual codePcnPavementType codePcnPavementType {
            get {
                XElement x = this.GetElement(codePcnPavementTypeXName);
                return ((codePcnPavementType)(x));
            }
            set {
                this.SetElement(codePcnPavementTypeXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// PCN pavement subgrade
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (TsaUid, valWid?, valLen?, uomDim?, codeComposition?, codePreparation?, codeCondSfc?, valPcnClass?, codePcnPavementType?, codePcnPavementSubgrade?, codePcnMaxTirePressure?, valPcnMaxTirePressure?, codePcnEvalMethod?, txtPcnNote?, valLcnClass?, valSiwlWeight?, uomSiwlWeight?, valSiwlTirePressure?, uomSiwlTirePressure?, valAuwWeight?, uomAuwWeight?, codeSts?, txtLgt?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual codePcnPavementSubgrade codePcnPavementSubgrade {
            get {
                XElement x = this.GetElement(codePcnPavementSubgradeXName);
                return ((codePcnPavementSubgrade)(x));
            }
            set {
                this.SetElement(codePcnPavementSubgradeXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// PCN max tire pressure code
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (TsaUid, valWid?, valLen?, uomDim?, codeComposition?, codePreparation?, codeCondSfc?, valPcnClass?, codePcnPavementType?, codePcnPavementSubgrade?, codePcnMaxTirePressure?, valPcnMaxTirePressure?, codePcnEvalMethod?, txtPcnNote?, valLcnClass?, valSiwlWeight?, uomSiwlWeight?, valSiwlTirePressure?, uomSiwlTirePressure?, valAuwWeight?, uomAuwWeight?, codeSts?, txtLgt?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual codePcnMaxTirePressure codePcnMaxTirePressure {
            get {
                XElement x = this.GetElement(codePcnMaxTirePressureXName);
                return ((codePcnMaxTirePressure)(x));
            }
            set {
                this.SetElement(codePcnMaxTirePressureXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// PCN max tire pressure value
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (TsaUid, valWid?, valLen?, uomDim?, codeComposition?, codePreparation?, codeCondSfc?, valPcnClass?, codePcnPavementType?, codePcnPavementSubgrade?, codePcnMaxTirePressure?, valPcnMaxTirePressure?, codePcnEvalMethod?, txtPcnNote?, valLcnClass?, valSiwlWeight?, uomSiwlWeight?, valSiwlTirePressure?, uomSiwlTirePressure?, valAuwWeight?, uomAuwWeight?, codeSts?, txtLgt?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual valPressurePcnTire valPcnMaxTirePressure {
            get {
                XElement x = this.GetElement(valPcnMaxTirePressureXName);
                return ((valPressurePcnTire)(x));
            }
            set {
                this.SetElement(valPcnMaxTirePressureXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// PCN evaluation method
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (TsaUid, valWid?, valLen?, uomDim?, codeComposition?, codePreparation?, codeCondSfc?, valPcnClass?, codePcnPavementType?, codePcnPavementSubgrade?, codePcnMaxTirePressure?, valPcnMaxTirePressure?, codePcnEvalMethod?, txtPcnNote?, valLcnClass?, valSiwlWeight?, uomSiwlWeight?, valSiwlTirePressure?, uomSiwlTirePressure?, valAuwWeight?, uomAuwWeight?, codeSts?, txtLgt?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual codePcnEvalMethod codePcnEvalMethod {
            get {
                XElement x = this.GetElement(codePcnEvalMethodXName);
                return ((codePcnEvalMethod)(x));
            }
            set {
                this.SetElement(codePcnEvalMethodXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// PCN notes
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (TsaUid, valWid?, valLen?, uomDim?, codeComposition?, codePreparation?, codeCondSfc?, valPcnClass?, codePcnPavementType?, codePcnPavementSubgrade?, codePcnMaxTirePressure?, valPcnMaxTirePressure?, codePcnEvalMethod?, txtPcnNote?, valLcnClass?, valSiwlWeight?, uomSiwlWeight?, valSiwlTirePressure?, uomSiwlTirePressure?, valAuwWeight?, uomAuwWeight?, codeSts?, txtLgt?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual txtRmk txtPcnNote {
            get {
                XElement x = this.GetElement(txtPcnNoteXName);
                return ((txtRmk)(x));
            }
            set {
                this.SetElement(txtPcnNoteXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// LCN value
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (TsaUid, valWid?, valLen?, uomDim?, codeComposition?, codePreparation?, codeCondSfc?, valPcnClass?, codePcnPavementType?, codePcnPavementSubgrade?, codePcnMaxTirePressure?, valPcnMaxTirePressure?, codePcnEvalMethod?, txtPcnNote?, valLcnClass?, valSiwlWeight?, uomSiwlWeight?, valSiwlTirePressure?, uomSiwlTirePressure?, valAuwWeight?, uomAuwWeight?, codeSts?, txtLgt?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual valLcnClass valLcnClass {
            get {
                XElement x = this.GetElement(valLcnClassXName);
                return ((valLcnClass)(x));
            }
            set {
                this.SetElement(valLcnClassXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// SIWL weight
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (TsaUid, valWid?, valLen?, uomDim?, codeComposition?, codePreparation?, codeCondSfc?, valPcnClass?, codePcnPavementType?, codePcnPavementSubgrade?, codePcnMaxTirePressure?, valPcnMaxTirePressure?, codePcnEvalMethod?, txtPcnNote?, valLcnClass?, valSiwlWeight?, uomSiwlWeight?, valSiwlTirePressure?, uomSiwlTirePressure?, valAuwWeight?, uomAuwWeight?, codeSts?, txtLgt?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual valWeight valSiwlWeight {
            get {
                XElement x = this.GetElement(valSiwlWeightXName);
                return ((valWeight)(x));
            }
            set {
                this.SetElement(valSiwlWeightXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Unit of measurement [SIWL weight]
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (TsaUid, valWid?, valLen?, uomDim?, codeComposition?, codePreparation?, codeCondSfc?, valPcnClass?, codePcnPavementType?, codePcnPavementSubgrade?, codePcnMaxTirePressure?, valPcnMaxTirePressure?, codePcnEvalMethod?, txtPcnNote?, valLcnClass?, valSiwlWeight?, uomSiwlWeight?, valSiwlTirePressure?, uomSiwlTirePressure?, valAuwWeight?, uomAuwWeight?, codeSts?, txtLgt?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual uomWeight uomSiwlWeight {
            get {
                XElement x = this.GetElement(uomSiwlWeightXName);
                return ((uomWeight)(x));
            }
            set {
                this.SetElement(uomSiwlWeightXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// SIWL tire pressure
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (TsaUid, valWid?, valLen?, uomDim?, codeComposition?, codePreparation?, codeCondSfc?, valPcnClass?, codePcnPavementType?, codePcnPavementSubgrade?, codePcnMaxTirePressure?, valPcnMaxTirePressure?, codePcnEvalMethod?, txtPcnNote?, valLcnClass?, valSiwlWeight?, uomSiwlWeight?, valSiwlTirePressure?, uomSiwlTirePressure?, valAuwWeight?, uomAuwWeight?, codeSts?, txtLgt?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual valPressure valSiwlTirePressure {
            get {
                XElement x = this.GetElement(valSiwlTirePressureXName);
                return ((valPressure)(x));
            }
            set {
                this.SetElement(valSiwlTirePressureXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Unit of measurement [SIWL tire pressure]
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (TsaUid, valWid?, valLen?, uomDim?, codeComposition?, codePreparation?, codeCondSfc?, valPcnClass?, codePcnPavementType?, codePcnPavementSubgrade?, codePcnMaxTirePressure?, valPcnMaxTirePressure?, codePcnEvalMethod?, txtPcnNote?, valLcnClass?, valSiwlWeight?, uomSiwlWeight?, valSiwlTirePressure?, uomSiwlTirePressure?, valAuwWeight?, uomAuwWeight?, codeSts?, txtLgt?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual uomPressure uomSiwlTirePressure {
            get {
                XElement x = this.GetElement(uomSiwlTirePressureXName);
                return ((uomPressure)(x));
            }
            set {
                this.SetElement(uomSiwlTirePressureXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// All Up Wheel weight
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (TsaUid, valWid?, valLen?, uomDim?, codeComposition?, codePreparation?, codeCondSfc?, valPcnClass?, codePcnPavementType?, codePcnPavementSubgrade?, codePcnMaxTirePressure?, valPcnMaxTirePressure?, codePcnEvalMethod?, txtPcnNote?, valLcnClass?, valSiwlWeight?, uomSiwlWeight?, valSiwlTirePressure?, uomSiwlTirePressure?, valAuwWeight?, uomAuwWeight?, codeSts?, txtLgt?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual valWeight valAuwWeight {
            get {
                XElement x = this.GetElement(valAuwWeightXName);
                return ((valWeight)(x));
            }
            set {
                this.SetElement(valAuwWeightXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Unit of measurement [AUW weight]
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (TsaUid, valWid?, valLen?, uomDim?, codeComposition?, codePreparation?, codeCondSfc?, valPcnClass?, codePcnPavementType?, codePcnPavementSubgrade?, codePcnMaxTirePressure?, valPcnMaxTirePressure?, codePcnEvalMethod?, txtPcnNote?, valLcnClass?, valSiwlWeight?, uomSiwlWeight?, valSiwlTirePressure?, uomSiwlTirePressure?, valAuwWeight?, uomAuwWeight?, codeSts?, txtLgt?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual uomWeight uomAuwWeight {
            get {
                XElement x = this.GetElement(uomAuwWeightXName);
                return ((uomWeight)(x));
            }
            set {
                this.SetElement(uomAuwWeightXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Operational status
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (TsaUid, valWid?, valLen?, uomDim?, codeComposition?, codePreparation?, codeCondSfc?, valPcnClass?, codePcnPavementType?, codePcnPavementSubgrade?, codePcnMaxTirePressure?, valPcnMaxTirePressure?, codePcnEvalMethod?, txtPcnNote?, valLcnClass?, valSiwlWeight?, uomSiwlWeight?, valSiwlTirePressure?, uomSiwlTirePressure?, valAuwWeight?, uomAuwWeight?, codeSts?, txtLgt?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual codeStsSfc codeSts {
            get {
                XElement x = this.GetElement(codeStsXName);
                return ((codeStsSfc)(x));
            }
            set {
                this.SetElement(codeStsXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Lighting system description
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (TsaUid, valWid?, valLen?, uomDim?, codeComposition?, codePreparation?, codeCondSfc?, valPcnClass?, codePcnPavementType?, codePcnPavementSubgrade?, codePcnMaxTirePressure?, valPcnMaxTirePressure?, codePcnEvalMethod?, txtPcnNote?, valLcnClass?, valSiwlWeight?, uomSiwlWeight?, valSiwlTirePressure?, uomSiwlTirePressure?, valAuwWeight?, uomAuwWeight?, codeSts?, txtLgt?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual txtDescr txtLgt {
            get {
                XElement x = this.GetElement(txtLgtXName);
                return ((txtDescr)(x));
            }
            set {
                this.SetElement(txtLgtXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Remark
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (TsaUid, valWid?, valLen?, uomDim?, codeComposition?, codePreparation?, codeCondSfc?, valPcnClass?, codePcnPavementType?, codePcnPavementSubgrade?, codePcnMaxTirePressure?, valPcnMaxTirePressure?, codePcnEvalMethod?, txtPcnNote?, valLcnClass?, valSiwlWeight?, uomSiwlWeight?, valSiwlTirePressure?, uomSiwlTirePressure?, valAuwWeight?, uomAuwWeight?, codeSts?, txtLgt?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual txtRmk txtRmk {
            get {
                XElement x = this.GetElement(txtRmkXName);
                return ((txtRmk)(x));
            }
            set {
                this.SetElement(txtRmkXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string source {
            get {
                XAttribute x = this.Attribute(sourceXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(sourceXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<TlofSafeAreaType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(TsaUidXName, typeof(TlofSafeAreaUidType));
            localElementDictionary.Add(valWidXName, typeof(valDistHorz));
            localElementDictionary.Add(valLenXName, typeof(valDistHorz));
            localElementDictionary.Add(uomDimXName, typeof(uomDistHorz));
            localElementDictionary.Add(codeCompositionXName, typeof(codeCompositionSfc));
            localElementDictionary.Add(codePreparationXName, typeof(codePreparationSfc));
            localElementDictionary.Add(codeCondSfcXName, typeof(codeCondSfc));
            localElementDictionary.Add(valPcnClassXName, typeof(valPcnClass));
            localElementDictionary.Add(codePcnPavementTypeXName, typeof(codePcnPavementType));
            localElementDictionary.Add(codePcnPavementSubgradeXName, typeof(codePcnPavementSubgrade));
            localElementDictionary.Add(codePcnMaxTirePressureXName, typeof(codePcnMaxTirePressure));
            localElementDictionary.Add(valPcnMaxTirePressureXName, typeof(valPressurePcnTire));
            localElementDictionary.Add(codePcnEvalMethodXName, typeof(codePcnEvalMethod));
            localElementDictionary.Add(txtPcnNoteXName, typeof(txtRmk));
            localElementDictionary.Add(valLcnClassXName, typeof(valLcnClass));
            localElementDictionary.Add(valSiwlWeightXName, typeof(valWeight));
            localElementDictionary.Add(uomSiwlWeightXName, typeof(uomWeight));
            localElementDictionary.Add(valSiwlTirePressureXName, typeof(valPressure));
            localElementDictionary.Add(uomSiwlTirePressureXName, typeof(uomPressure));
            localElementDictionary.Add(valAuwWeightXName, typeof(valWeight));
            localElementDictionary.Add(uomAuwWeightXName, typeof(uomWeight));
            localElementDictionary.Add(codeStsXName, typeof(codeStsSfc));
            localElementDictionary.Add(txtLgtXName, typeof(txtDescr));
            localElementDictionary.Add(txtRmkXName, typeof(txtRmk));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// TLOF safe area - UID
    /// </para>
    /// <para>
    /// Regular expression: (TlaUid)
    /// </para>
    /// </summary>
    public partial class TlofSafeAreaUidType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TlaUidXName = System.Xml.Linq.XName.Get("TlaUid", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName midXName = System.Xml.Linq.XName.Get("mid", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("TlofSafeAreaUidType", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator TlofSafeAreaUidType(XElement xe) { return XTypedServices.ToXTypedElement<TlofSafeAreaUidType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static TlofSafeAreaUidType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(TlaUidXName));
        }
        
        /// <summary>
        /// <para>
        /// TLOF safe area - UID
        /// </para>
        /// <para>
        /// Regular expression: (TlaUid)
        /// </para>
        /// </summary>
        public TlofSafeAreaUidType() {
        }
        
        /// <summary>
        /// <para>
        /// TLOF safe area is encompassing Touch down and lift off area [TLOF]
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (TlaUid)
        /// </para>
        /// </summary>
        public virtual TlofUidType TlaUid {
            get {
                XElement x = this.GetElement(TlaUidXName);
                return ((TlofUidType)(x));
            }
            set {
                this.SetElement(TlaUidXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string mid {
            get {
                XAttribute x = this.Attribute(midXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(midXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<TlofSafeAreaUidType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(TlaUidXName, typeof(TlofUidType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// TLOF
    /// </para>
    /// <para>
    /// Regular expression: (TlaUid, FtoUid?, geoLat, geoLong, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, valElev?, valElevAccuracy?, valGeoidUndulation?, uomDistVer?, valCrc?, txtVerDatum?, valLen?, valWid?, uomDim?, valSlope?, codeComposition?, codePreparation?, codeCondSfc?, valPcnClass?, codePcnPavementType?, codePcnPavementSubgrade?, codePcnMaxTirePressure?, valPcnMaxTirePressure?, codePcnEvalMethod?, txtPcnNote?, valLcnClass?, valSiwlWeight?, uomSiwlWeight?, valSiwlTirePressure?, uomSiwlTirePressure?, valAuwWeight?, uomAuwWeight?, codeStrength?, txtDescrStrength?, codeClassHel?, txtMarking?, codeSts?, txtRmk?)
    /// </para>
    /// </summary>
    public partial class TlofType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TlaUidXName = System.Xml.Linq.XName.Get("TlaUid", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName FtoUidXName = System.Xml.Linq.XName.Get("FtoUid", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName geoLatXName = System.Xml.Linq.XName.Get("geoLat", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName geoLongXName = System.Xml.Linq.XName.Get("geoLong", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName codeDatumXName = System.Xml.Linq.XName.Get("codeDatum", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName valGeoAccuracyXName = System.Xml.Linq.XName.Get("valGeoAccuracy", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName uomGeoAccuracyXName = System.Xml.Linq.XName.Get("uomGeoAccuracy", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName valElevXName = System.Xml.Linq.XName.Get("valElev", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName valElevAccuracyXName = System.Xml.Linq.XName.Get("valElevAccuracy", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName valGeoidUndulationXName = System.Xml.Linq.XName.Get("valGeoidUndulation", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName uomDistVerXName = System.Xml.Linq.XName.Get("uomDistVer", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName valCrcXName = System.Xml.Linq.XName.Get("valCrc", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName txtVerDatumXName = System.Xml.Linq.XName.Get("txtVerDatum", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName valLenXName = System.Xml.Linq.XName.Get("valLen", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName valWidXName = System.Xml.Linq.XName.Get("valWid", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName uomDimXName = System.Xml.Linq.XName.Get("uomDim", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName valSlopeXName = System.Xml.Linq.XName.Get("valSlope", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName codeCompositionXName = System.Xml.Linq.XName.Get("codeComposition", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName codePreparationXName = System.Xml.Linq.XName.Get("codePreparation", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName codeCondSfcXName = System.Xml.Linq.XName.Get("codeCondSfc", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName valPcnClassXName = System.Xml.Linq.XName.Get("valPcnClass", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName codePcnPavementTypeXName = System.Xml.Linq.XName.Get("codePcnPavementType", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName codePcnPavementSubgradeXName = System.Xml.Linq.XName.Get("codePcnPavementSubgrade", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName codePcnMaxTirePressureXName = System.Xml.Linq.XName.Get("codePcnMaxTirePressure", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName valPcnMaxTirePressureXName = System.Xml.Linq.XName.Get("valPcnMaxTirePressure", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName codePcnEvalMethodXName = System.Xml.Linq.XName.Get("codePcnEvalMethod", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName txtPcnNoteXName = System.Xml.Linq.XName.Get("txtPcnNote", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName valLcnClassXName = System.Xml.Linq.XName.Get("valLcnClass", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName valSiwlWeightXName = System.Xml.Linq.XName.Get("valSiwlWeight", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName uomSiwlWeightXName = System.Xml.Linq.XName.Get("uomSiwlWeight", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName valSiwlTirePressureXName = System.Xml.Linq.XName.Get("valSiwlTirePressure", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName uomSiwlTirePressureXName = System.Xml.Linq.XName.Get("uomSiwlTirePressure", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName valAuwWeightXName = System.Xml.Linq.XName.Get("valAuwWeight", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName uomAuwWeightXName = System.Xml.Linq.XName.Get("uomAuwWeight", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName codeStrengthXName = System.Xml.Linq.XName.Get("codeStrength", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName txtDescrStrengthXName = System.Xml.Linq.XName.Get("txtDescrStrength", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName codeClassHelXName = System.Xml.Linq.XName.Get("codeClassHel", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName txtMarkingXName = System.Xml.Linq.XName.Get("txtMarking", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName codeStsXName = System.Xml.Linq.XName.Get("codeSts", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName txtRmkXName = System.Xml.Linq.XName.Get("txtRmk", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName sourceXName = System.Xml.Linq.XName.Get("source", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("TlofType", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator TlofType(XElement xe) { return XTypedServices.ToXTypedElement<TlofType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static TlofType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(TlaUidXName), new NamedContentModelEntity(FtoUidXName), new NamedContentModelEntity(geoLatXName), new NamedContentModelEntity(geoLongXName), new NamedContentModelEntity(codeDatumXName), new NamedContentModelEntity(valGeoAccuracyXName), new NamedContentModelEntity(uomGeoAccuracyXName), new NamedContentModelEntity(valElevXName), new NamedContentModelEntity(valElevAccuracyXName), new NamedContentModelEntity(valGeoidUndulationXName), new NamedContentModelEntity(uomDistVerXName), new NamedContentModelEntity(valCrcXName), new NamedContentModelEntity(txtVerDatumXName), new NamedContentModelEntity(valLenXName), new NamedContentModelEntity(valWidXName), new NamedContentModelEntity(uomDimXName), new NamedContentModelEntity(valSlopeXName), new NamedContentModelEntity(codeCompositionXName), new NamedContentModelEntity(codePreparationXName), new NamedContentModelEntity(codeCondSfcXName), new NamedContentModelEntity(valPcnClassXName), new NamedContentModelEntity(codePcnPavementTypeXName), new NamedContentModelEntity(codePcnPavementSubgradeXName), new NamedContentModelEntity(codePcnMaxTirePressureXName), new NamedContentModelEntity(valPcnMaxTirePressureXName), new NamedContentModelEntity(codePcnEvalMethodXName), new NamedContentModelEntity(txtPcnNoteXName), new NamedContentModelEntity(valLcnClassXName), new NamedContentModelEntity(valSiwlWeightXName), new NamedContentModelEntity(uomSiwlWeightXName), new NamedContentModelEntity(valSiwlTirePressureXName), new NamedContentModelEntity(uomSiwlTirePressureXName), new NamedContentModelEntity(valAuwWeightXName), new NamedContentModelEntity(uomAuwWeightXName), new NamedContentModelEntity(codeStrengthXName), new NamedContentModelEntity(txtDescrStrengthXName), new NamedContentModelEntity(codeClassHelXName), new NamedContentModelEntity(txtMarkingXName), new NamedContentModelEntity(codeStsXName), new NamedContentModelEntity(txtRmkXName));
        }
        
        /// <summary>
        /// <para>
        /// TLOF
        /// </para>
        /// <para>
        /// Regular expression: (TlaUid, FtoUid?, geoLat, geoLong, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, valElev?, valElevAccuracy?, valGeoidUndulation?, uomDistVer?, valCrc?, txtVerDatum?, valLen?, valWid?, uomDim?, valSlope?, codeComposition?, codePreparation?, codeCondSfc?, valPcnClass?, codePcnPavementType?, codePcnPavementSubgrade?, codePcnMaxTirePressure?, valPcnMaxTirePressure?, codePcnEvalMethod?, txtPcnNote?, valLcnClass?, valSiwlWeight?, uomSiwlWeight?, valSiwlTirePressure?, uomSiwlTirePressure?, valAuwWeight?, uomAuwWeight?, codeStrength?, txtDescrStrength?, codeClassHel?, txtMarking?, codeSts?, txtRmk?)
        /// </para>
        /// </summary>
        public TlofType() {
        }
        
        /// <summary>
        /// <para>
        /// a version of Touch down and lift off area [TLOF]
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (TlaUid, FtoUid?, geoLat, geoLong, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, valElev?, valElevAccuracy?, valGeoidUndulation?, uomDistVer?, valCrc?, txtVerDatum?, valLen?, valWid?, uomDim?, valSlope?, codeComposition?, codePreparation?, codeCondSfc?, valPcnClass?, codePcnPavementType?, codePcnPavementSubgrade?, codePcnMaxTirePressure?, valPcnMaxTirePressure?, codePcnEvalMethod?, txtPcnNote?, valLcnClass?, valSiwlWeight?, uomSiwlWeight?, valSiwlTirePressure?, uomSiwlTirePressure?, valAuwWeight?, uomAuwWeight?, codeStrength?, txtDescrStrength?, codeClassHel?, txtMarking?, codeSts?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual TlofUidType TlaUid {
            get {
                XElement x = this.GetElement(TlaUidXName);
                return ((TlofUidType)(x));
            }
            set {
                this.SetElement(TlaUidXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// a version of final approach and take-off area [FATO]
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (TlaUid, FtoUid?, geoLat, geoLong, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, valElev?, valElevAccuracy?, valGeoidUndulation?, uomDistVer?, valCrc?, txtVerDatum?, valLen?, valWid?, uomDim?, valSlope?, codeComposition?, codePreparation?, codeCondSfc?, valPcnClass?, codePcnPavementType?, codePcnPavementSubgrade?, codePcnMaxTirePressure?, valPcnMaxTirePressure?, codePcnEvalMethod?, txtPcnNote?, valLcnClass?, valSiwlWeight?, uomSiwlWeight?, valSiwlTirePressure?, uomSiwlTirePressure?, valAuwWeight?, uomAuwWeight?, codeStrength?, txtDescrStrength?, codeClassHel?, txtMarking?, codeSts?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual FatoUidType FtoUid {
            get {
                XElement x = this.GetElement(FtoUidXName);
                return ((FatoUidType)(x));
            }
            set {
                this.SetElement(FtoUidXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Latitude
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (TlaUid, FtoUid?, geoLat, geoLong, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, valElev?, valElevAccuracy?, valGeoidUndulation?, uomDistVer?, valCrc?, txtVerDatum?, valLen?, valWid?, uomDim?, valSlope?, codeComposition?, codePreparation?, codeCondSfc?, valPcnClass?, codePcnPavementType?, codePcnPavementSubgrade?, codePcnMaxTirePressure?, valPcnMaxTirePressure?, codePcnEvalMethod?, txtPcnNote?, valLcnClass?, valSiwlWeight?, uomSiwlWeight?, valSiwlTirePressure?, uomSiwlTirePressure?, valAuwWeight?, uomAuwWeight?, codeStrength?, txtDescrStrength?, codeClassHel?, txtMarking?, codeSts?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual geoLat geoLat {
            get {
                XElement x = this.GetElement(geoLatXName);
                return ((geoLat)(x));
            }
            set {
                this.SetElement(geoLatXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Longitude
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (TlaUid, FtoUid?, geoLat, geoLong, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, valElev?, valElevAccuracy?, valGeoidUndulation?, uomDistVer?, valCrc?, txtVerDatum?, valLen?, valWid?, uomDim?, valSlope?, codeComposition?, codePreparation?, codeCondSfc?, valPcnClass?, codePcnPavementType?, codePcnPavementSubgrade?, codePcnMaxTirePressure?, valPcnMaxTirePressure?, codePcnEvalMethod?, txtPcnNote?, valLcnClass?, valSiwlWeight?, uomSiwlWeight?, valSiwlTirePressure?, uomSiwlTirePressure?, valAuwWeight?, uomAuwWeight?, codeStrength?, txtDescrStrength?, codeClassHel?, txtMarking?, codeSts?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual geoLong geoLong {
            get {
                XElement x = this.GetElement(geoLongXName);
                return ((geoLong)(x));
            }
            set {
                this.SetElement(geoLongXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Datum
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (TlaUid, FtoUid?, geoLat, geoLong, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, valElev?, valElevAccuracy?, valGeoidUndulation?, uomDistVer?, valCrc?, txtVerDatum?, valLen?, valWid?, uomDim?, valSlope?, codeComposition?, codePreparation?, codeCondSfc?, valPcnClass?, codePcnPavementType?, codePcnPavementSubgrade?, codePcnMaxTirePressure?, valPcnMaxTirePressure?, codePcnEvalMethod?, txtPcnNote?, valLcnClass?, valSiwlWeight?, uomSiwlWeight?, valSiwlTirePressure?, uomSiwlTirePressure?, valAuwWeight?, uomAuwWeight?, codeStrength?, txtDescrStrength?, codeClassHel?, txtMarking?, codeSts?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual codeDatum codeDatum {
            get {
                XElement x = this.GetElement(codeDatumXName);
                return ((codeDatum)(x));
            }
            set {
                this.SetElement(codeDatumXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Geographical accuracy
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (TlaUid, FtoUid?, geoLat, geoLong, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, valElev?, valElevAccuracy?, valGeoidUndulation?, uomDistVer?, valCrc?, txtVerDatum?, valLen?, valWid?, uomDim?, valSlope?, codeComposition?, codePreparation?, codeCondSfc?, valPcnClass?, codePcnPavementType?, codePcnPavementSubgrade?, codePcnMaxTirePressure?, valPcnMaxTirePressure?, codePcnEvalMethod?, txtPcnNote?, valLcnClass?, valSiwlWeight?, uomSiwlWeight?, valSiwlTirePressure?, uomSiwlTirePressure?, valAuwWeight?, uomAuwWeight?, codeStrength?, txtDescrStrength?, codeClassHel?, txtMarking?, codeSts?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual valDistHorz valGeoAccuracy {
            get {
                XElement x = this.GetElement(valGeoAccuracyXName);
                return ((valDistHorz)(x));
            }
            set {
                this.SetElement(valGeoAccuracyXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Unit of measurement [geographical accuracy]
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (TlaUid, FtoUid?, geoLat, geoLong, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, valElev?, valElevAccuracy?, valGeoidUndulation?, uomDistVer?, valCrc?, txtVerDatum?, valLen?, valWid?, uomDim?, valSlope?, codeComposition?, codePreparation?, codeCondSfc?, valPcnClass?, codePcnPavementType?, codePcnPavementSubgrade?, codePcnMaxTirePressure?, valPcnMaxTirePressure?, codePcnEvalMethod?, txtPcnNote?, valLcnClass?, valSiwlWeight?, uomSiwlWeight?, valSiwlTirePressure?, uomSiwlTirePressure?, valAuwWeight?, uomAuwWeight?, codeStrength?, txtDescrStrength?, codeClassHel?, txtMarking?, codeSts?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual uomDistHorz uomGeoAccuracy {
            get {
                XElement x = this.GetElement(uomGeoAccuracyXName);
                return ((uomDistHorz)(x));
            }
            set {
                this.SetElement(uomGeoAccuracyXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Elevation
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (TlaUid, FtoUid?, geoLat, geoLong, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, valElev?, valElevAccuracy?, valGeoidUndulation?, uomDistVer?, valCrc?, txtVerDatum?, valLen?, valWid?, uomDim?, valSlope?, codeComposition?, codePreparation?, codeCondSfc?, valPcnClass?, codePcnPavementType?, codePcnPavementSubgrade?, codePcnMaxTirePressure?, valPcnMaxTirePressure?, codePcnEvalMethod?, txtPcnNote?, valLcnClass?, valSiwlWeight?, uomSiwlWeight?, valSiwlTirePressure?, uomSiwlTirePressure?, valAuwWeight?, uomAuwWeight?, codeStrength?, txtDescrStrength?, codeClassHel?, txtMarking?, codeSts?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual valDistVer valElev {
            get {
                XElement x = this.GetElement(valElevXName);
                return ((valDistVer)(x));
            }
            set {
                this.SetElement(valElevXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Elevation accuracy
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (TlaUid, FtoUid?, geoLat, geoLong, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, valElev?, valElevAccuracy?, valGeoidUndulation?, uomDistVer?, valCrc?, txtVerDatum?, valLen?, valWid?, uomDim?, valSlope?, codeComposition?, codePreparation?, codeCondSfc?, valPcnClass?, codePcnPavementType?, codePcnPavementSubgrade?, codePcnMaxTirePressure?, valPcnMaxTirePressure?, codePcnEvalMethod?, txtPcnNote?, valLcnClass?, valSiwlWeight?, uomSiwlWeight?, valSiwlTirePressure?, uomSiwlTirePressure?, valAuwWeight?, uomAuwWeight?, codeStrength?, txtDescrStrength?, codeClassHel?, txtMarking?, codeSts?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual valDistVer valElevAccuracy {
            get {
                XElement x = this.GetElement(valElevAccuracyXName);
                return ((valDistVer)(x));
            }
            set {
                this.SetElement(valElevAccuracyXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Geoid undulation
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (TlaUid, FtoUid?, geoLat, geoLong, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, valElev?, valElevAccuracy?, valGeoidUndulation?, uomDistVer?, valCrc?, txtVerDatum?, valLen?, valWid?, uomDim?, valSlope?, codeComposition?, codePreparation?, codeCondSfc?, valPcnClass?, codePcnPavementType?, codePcnPavementSubgrade?, codePcnMaxTirePressure?, valPcnMaxTirePressure?, codePcnEvalMethod?, txtPcnNote?, valLcnClass?, valSiwlWeight?, uomSiwlWeight?, valSiwlTirePressure?, uomSiwlTirePressure?, valAuwWeight?, uomAuwWeight?, codeStrength?, txtDescrStrength?, codeClassHel?, txtMarking?, codeSts?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual valDistVer valGeoidUndulation {
            get {
                XElement x = this.GetElement(valGeoidUndulationXName);
                return ((valDistVer)(x));
            }
            set {
                this.SetElement(valGeoidUndulationXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Unit of measurement [vertical distance]
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (TlaUid, FtoUid?, geoLat, geoLong, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, valElev?, valElevAccuracy?, valGeoidUndulation?, uomDistVer?, valCrc?, txtVerDatum?, valLen?, valWid?, uomDim?, valSlope?, codeComposition?, codePreparation?, codeCondSfc?, valPcnClass?, codePcnPavementType?, codePcnPavementSubgrade?, codePcnMaxTirePressure?, valPcnMaxTirePressure?, codePcnEvalMethod?, txtPcnNote?, valLcnClass?, valSiwlWeight?, uomSiwlWeight?, valSiwlTirePressure?, uomSiwlTirePressure?, valAuwWeight?, uomAuwWeight?, codeStrength?, txtDescrStrength?, codeClassHel?, txtMarking?, codeSts?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual uomElev uomDistVer {
            get {
                XElement x = this.GetElement(uomDistVerXName);
                return ((uomElev)(x));
            }
            set {
                this.SetElement(uomDistVerXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Cyclic redundancy check
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (TlaUid, FtoUid?, geoLat, geoLong, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, valElev?, valElevAccuracy?, valGeoidUndulation?, uomDistVer?, valCrc?, txtVerDatum?, valLen?, valWid?, uomDim?, valSlope?, codeComposition?, codePreparation?, codeCondSfc?, valPcnClass?, codePcnPavementType?, codePcnPavementSubgrade?, codePcnMaxTirePressure?, valPcnMaxTirePressure?, codePcnEvalMethod?, txtPcnNote?, valLcnClass?, valSiwlWeight?, uomSiwlWeight?, valSiwlTirePressure?, uomSiwlTirePressure?, valAuwWeight?, uomAuwWeight?, codeStrength?, txtDescrStrength?, codeClassHel?, txtMarking?, codeSts?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual valHex valCrc {
            get {
                XElement x = this.GetElement(valCrcXName);
                return ((valHex)(x));
            }
            set {
                this.SetElement(valCrcXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Vertical Datum
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (TlaUid, FtoUid?, geoLat, geoLong, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, valElev?, valElevAccuracy?, valGeoidUndulation?, uomDistVer?, valCrc?, txtVerDatum?, valLen?, valWid?, uomDim?, valSlope?, codeComposition?, codePreparation?, codeCondSfc?, valPcnClass?, codePcnPavementType?, codePcnPavementSubgrade?, codePcnMaxTirePressure?, valPcnMaxTirePressure?, codePcnEvalMethod?, txtPcnNote?, valLcnClass?, valSiwlWeight?, uomSiwlWeight?, valSiwlTirePressure?, uomSiwlTirePressure?, valAuwWeight?, uomAuwWeight?, codeStrength?, txtDescrStrength?, codeClassHel?, txtMarking?, codeSts?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual txtDescr txtVerDatum {
            get {
                XElement x = this.GetElement(txtVerDatumXName);
                return ((txtDescr)(x));
            }
            set {
                this.SetElement(txtVerDatumXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Length
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (TlaUid, FtoUid?, geoLat, geoLong, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, valElev?, valElevAccuracy?, valGeoidUndulation?, uomDistVer?, valCrc?, txtVerDatum?, valLen?, valWid?, uomDim?, valSlope?, codeComposition?, codePreparation?, codeCondSfc?, valPcnClass?, codePcnPavementType?, codePcnPavementSubgrade?, codePcnMaxTirePressure?, valPcnMaxTirePressure?, codePcnEvalMethod?, txtPcnNote?, valLcnClass?, valSiwlWeight?, uomSiwlWeight?, valSiwlTirePressure?, uomSiwlTirePressure?, valAuwWeight?, uomAuwWeight?, codeStrength?, txtDescrStrength?, codeClassHel?, txtMarking?, codeSts?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual valDistHorz valLen {
            get {
                XElement x = this.GetElement(valLenXName);
                return ((valDistHorz)(x));
            }
            set {
                this.SetElement(valLenXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Width
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (TlaUid, FtoUid?, geoLat, geoLong, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, valElev?, valElevAccuracy?, valGeoidUndulation?, uomDistVer?, valCrc?, txtVerDatum?, valLen?, valWid?, uomDim?, valSlope?, codeComposition?, codePreparation?, codeCondSfc?, valPcnClass?, codePcnPavementType?, codePcnPavementSubgrade?, codePcnMaxTirePressure?, valPcnMaxTirePressure?, codePcnEvalMethod?, txtPcnNote?, valLcnClass?, valSiwlWeight?, uomSiwlWeight?, valSiwlTirePressure?, uomSiwlTirePressure?, valAuwWeight?, uomAuwWeight?, codeStrength?, txtDescrStrength?, codeClassHel?, txtMarking?, codeSts?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual valDistHorz valWid {
            get {
                XElement x = this.GetElement(valWidXName);
                return ((valDistHorz)(x));
            }
            set {
                this.SetElement(valWidXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Unit of measurement [horizontal dimension]
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (TlaUid, FtoUid?, geoLat, geoLong, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, valElev?, valElevAccuracy?, valGeoidUndulation?, uomDistVer?, valCrc?, txtVerDatum?, valLen?, valWid?, uomDim?, valSlope?, codeComposition?, codePreparation?, codeCondSfc?, valPcnClass?, codePcnPavementType?, codePcnPavementSubgrade?, codePcnMaxTirePressure?, valPcnMaxTirePressure?, codePcnEvalMethod?, txtPcnNote?, valLcnClass?, valSiwlWeight?, uomSiwlWeight?, valSiwlTirePressure?, uomSiwlTirePressure?, valAuwWeight?, uomAuwWeight?, codeStrength?, txtDescrStrength?, codeClassHel?, txtMarking?, codeSts?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual uomDistHorz uomDim {
            get {
                XElement x = this.GetElement(uomDimXName);
                return ((uomDistHorz)(x));
            }
            set {
                this.SetElement(uomDimXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Slope angle
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (TlaUid, FtoUid?, geoLat, geoLong, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, valElev?, valElevAccuracy?, valGeoidUndulation?, uomDistVer?, valCrc?, txtVerDatum?, valLen?, valWid?, uomDim?, valSlope?, codeComposition?, codePreparation?, codeCondSfc?, valPcnClass?, codePcnPavementType?, codePcnPavementSubgrade?, codePcnMaxTirePressure?, valPcnMaxTirePressure?, codePcnEvalMethod?, txtPcnNote?, valLcnClass?, valSiwlWeight?, uomSiwlWeight?, valSiwlTirePressure?, uomSiwlTirePressure?, valAuwWeight?, uomAuwWeight?, codeStrength?, txtDescrStrength?, codeClassHel?, txtMarking?, codeSts?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual valSlope valSlope {
            get {
                XElement x = this.GetElement(valSlopeXName);
                return ((valSlope)(x));
            }
            set {
                this.SetElement(valSlopeXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Surface composition
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (TlaUid, FtoUid?, geoLat, geoLong, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, valElev?, valElevAccuracy?, valGeoidUndulation?, uomDistVer?, valCrc?, txtVerDatum?, valLen?, valWid?, uomDim?, valSlope?, codeComposition?, codePreparation?, codeCondSfc?, valPcnClass?, codePcnPavementType?, codePcnPavementSubgrade?, codePcnMaxTirePressure?, valPcnMaxTirePressure?, codePcnEvalMethod?, txtPcnNote?, valLcnClass?, valSiwlWeight?, uomSiwlWeight?, valSiwlTirePressure?, uomSiwlTirePressure?, valAuwWeight?, uomAuwWeight?, codeStrength?, txtDescrStrength?, codeClassHel?, txtMarking?, codeSts?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual codeCompositionSfc codeComposition {
            get {
                XElement x = this.GetElement(codeCompositionXName);
                return ((codeCompositionSfc)(x));
            }
            set {
                this.SetElement(codeCompositionXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Surface preparation method
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (TlaUid, FtoUid?, geoLat, geoLong, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, valElev?, valElevAccuracy?, valGeoidUndulation?, uomDistVer?, valCrc?, txtVerDatum?, valLen?, valWid?, uomDim?, valSlope?, codeComposition?, codePreparation?, codeCondSfc?, valPcnClass?, codePcnPavementType?, codePcnPavementSubgrade?, codePcnMaxTirePressure?, valPcnMaxTirePressure?, codePcnEvalMethod?, txtPcnNote?, valLcnClass?, valSiwlWeight?, uomSiwlWeight?, valSiwlTirePressure?, uomSiwlTirePressure?, valAuwWeight?, uomAuwWeight?, codeStrength?, txtDescrStrength?, codeClassHel?, txtMarking?, codeSts?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual codePreparationSfc codePreparation {
            get {
                XElement x = this.GetElement(codePreparationXName);
                return ((codePreparationSfc)(x));
            }
            set {
                this.SetElement(codePreparationXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Surface condition
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (TlaUid, FtoUid?, geoLat, geoLong, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, valElev?, valElevAccuracy?, valGeoidUndulation?, uomDistVer?, valCrc?, txtVerDatum?, valLen?, valWid?, uomDim?, valSlope?, codeComposition?, codePreparation?, codeCondSfc?, valPcnClass?, codePcnPavementType?, codePcnPavementSubgrade?, codePcnMaxTirePressure?, valPcnMaxTirePressure?, codePcnEvalMethod?, txtPcnNote?, valLcnClass?, valSiwlWeight?, uomSiwlWeight?, valSiwlTirePressure?, uomSiwlTirePressure?, valAuwWeight?, uomAuwWeight?, codeStrength?, txtDescrStrength?, codeClassHel?, txtMarking?, codeSts?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual codeCondSfc codeCondSfc {
            get {
                XElement x = this.GetElement(codeCondSfcXName);
                return ((codeCondSfc)(x));
            }
            set {
                this.SetElement(codeCondSfcXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// PCN (Pavement Classification Number) value
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (TlaUid, FtoUid?, geoLat, geoLong, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, valElev?, valElevAccuracy?, valGeoidUndulation?, uomDistVer?, valCrc?, txtVerDatum?, valLen?, valWid?, uomDim?, valSlope?, codeComposition?, codePreparation?, codeCondSfc?, valPcnClass?, codePcnPavementType?, codePcnPavementSubgrade?, codePcnMaxTirePressure?, valPcnMaxTirePressure?, codePcnEvalMethod?, txtPcnNote?, valLcnClass?, valSiwlWeight?, uomSiwlWeight?, valSiwlTirePressure?, uomSiwlTirePressure?, valAuwWeight?, uomAuwWeight?, codeStrength?, txtDescrStrength?, codeClassHel?, txtMarking?, codeSts?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual valPcnClass valPcnClass {
            get {
                XElement x = this.GetElement(valPcnClassXName);
                return ((valPcnClass)(x));
            }
            set {
                this.SetElement(valPcnClassXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// PCN pavement type
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (TlaUid, FtoUid?, geoLat, geoLong, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, valElev?, valElevAccuracy?, valGeoidUndulation?, uomDistVer?, valCrc?, txtVerDatum?, valLen?, valWid?, uomDim?, valSlope?, codeComposition?, codePreparation?, codeCondSfc?, valPcnClass?, codePcnPavementType?, codePcnPavementSubgrade?, codePcnMaxTirePressure?, valPcnMaxTirePressure?, codePcnEvalMethod?, txtPcnNote?, valLcnClass?, valSiwlWeight?, uomSiwlWeight?, valSiwlTirePressure?, uomSiwlTirePressure?, valAuwWeight?, uomAuwWeight?, codeStrength?, txtDescrStrength?, codeClassHel?, txtMarking?, codeSts?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual codePcnPavementType codePcnPavementType {
            get {
                XElement x = this.GetElement(codePcnPavementTypeXName);
                return ((codePcnPavementType)(x));
            }
            set {
                this.SetElement(codePcnPavementTypeXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// PCN pavement subgrade
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (TlaUid, FtoUid?, geoLat, geoLong, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, valElev?, valElevAccuracy?, valGeoidUndulation?, uomDistVer?, valCrc?, txtVerDatum?, valLen?, valWid?, uomDim?, valSlope?, codeComposition?, codePreparation?, codeCondSfc?, valPcnClass?, codePcnPavementType?, codePcnPavementSubgrade?, codePcnMaxTirePressure?, valPcnMaxTirePressure?, codePcnEvalMethod?, txtPcnNote?, valLcnClass?, valSiwlWeight?, uomSiwlWeight?, valSiwlTirePressure?, uomSiwlTirePressure?, valAuwWeight?, uomAuwWeight?, codeStrength?, txtDescrStrength?, codeClassHel?, txtMarking?, codeSts?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual codePcnPavementSubgrade codePcnPavementSubgrade {
            get {
                XElement x = this.GetElement(codePcnPavementSubgradeXName);
                return ((codePcnPavementSubgrade)(x));
            }
            set {
                this.SetElement(codePcnPavementSubgradeXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// PCN max tire pressure code
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (TlaUid, FtoUid?, geoLat, geoLong, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, valElev?, valElevAccuracy?, valGeoidUndulation?, uomDistVer?, valCrc?, txtVerDatum?, valLen?, valWid?, uomDim?, valSlope?, codeComposition?, codePreparation?, codeCondSfc?, valPcnClass?, codePcnPavementType?, codePcnPavementSubgrade?, codePcnMaxTirePressure?, valPcnMaxTirePressure?, codePcnEvalMethod?, txtPcnNote?, valLcnClass?, valSiwlWeight?, uomSiwlWeight?, valSiwlTirePressure?, uomSiwlTirePressure?, valAuwWeight?, uomAuwWeight?, codeStrength?, txtDescrStrength?, codeClassHel?, txtMarking?, codeSts?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual codePcnMaxTirePressure codePcnMaxTirePressure {
            get {
                XElement x = this.GetElement(codePcnMaxTirePressureXName);
                return ((codePcnMaxTirePressure)(x));
            }
            set {
                this.SetElement(codePcnMaxTirePressureXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// PCN max tire pressure value
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (TlaUid, FtoUid?, geoLat, geoLong, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, valElev?, valElevAccuracy?, valGeoidUndulation?, uomDistVer?, valCrc?, txtVerDatum?, valLen?, valWid?, uomDim?, valSlope?, codeComposition?, codePreparation?, codeCondSfc?, valPcnClass?, codePcnPavementType?, codePcnPavementSubgrade?, codePcnMaxTirePressure?, valPcnMaxTirePressure?, codePcnEvalMethod?, txtPcnNote?, valLcnClass?, valSiwlWeight?, uomSiwlWeight?, valSiwlTirePressure?, uomSiwlTirePressure?, valAuwWeight?, uomAuwWeight?, codeStrength?, txtDescrStrength?, codeClassHel?, txtMarking?, codeSts?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual valPressurePcnTire valPcnMaxTirePressure {
            get {
                XElement x = this.GetElement(valPcnMaxTirePressureXName);
                return ((valPressurePcnTire)(x));
            }
            set {
                this.SetElement(valPcnMaxTirePressureXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// PCN evaluation method
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (TlaUid, FtoUid?, geoLat, geoLong, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, valElev?, valElevAccuracy?, valGeoidUndulation?, uomDistVer?, valCrc?, txtVerDatum?, valLen?, valWid?, uomDim?, valSlope?, codeComposition?, codePreparation?, codeCondSfc?, valPcnClass?, codePcnPavementType?, codePcnPavementSubgrade?, codePcnMaxTirePressure?, valPcnMaxTirePressure?, codePcnEvalMethod?, txtPcnNote?, valLcnClass?, valSiwlWeight?, uomSiwlWeight?, valSiwlTirePressure?, uomSiwlTirePressure?, valAuwWeight?, uomAuwWeight?, codeStrength?, txtDescrStrength?, codeClassHel?, txtMarking?, codeSts?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual codePcnEvalMethod codePcnEvalMethod {
            get {
                XElement x = this.GetElement(codePcnEvalMethodXName);
                return ((codePcnEvalMethod)(x));
            }
            set {
                this.SetElement(codePcnEvalMethodXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// PCN notes
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (TlaUid, FtoUid?, geoLat, geoLong, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, valElev?, valElevAccuracy?, valGeoidUndulation?, uomDistVer?, valCrc?, txtVerDatum?, valLen?, valWid?, uomDim?, valSlope?, codeComposition?, codePreparation?, codeCondSfc?, valPcnClass?, codePcnPavementType?, codePcnPavementSubgrade?, codePcnMaxTirePressure?, valPcnMaxTirePressure?, codePcnEvalMethod?, txtPcnNote?, valLcnClass?, valSiwlWeight?, uomSiwlWeight?, valSiwlTirePressure?, uomSiwlTirePressure?, valAuwWeight?, uomAuwWeight?, codeStrength?, txtDescrStrength?, codeClassHel?, txtMarking?, codeSts?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual txtRmk txtPcnNote {
            get {
                XElement x = this.GetElement(txtPcnNoteXName);
                return ((txtRmk)(x));
            }
            set {
                this.SetElement(txtPcnNoteXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// LCN value
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (TlaUid, FtoUid?, geoLat, geoLong, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, valElev?, valElevAccuracy?, valGeoidUndulation?, uomDistVer?, valCrc?, txtVerDatum?, valLen?, valWid?, uomDim?, valSlope?, codeComposition?, codePreparation?, codeCondSfc?, valPcnClass?, codePcnPavementType?, codePcnPavementSubgrade?, codePcnMaxTirePressure?, valPcnMaxTirePressure?, codePcnEvalMethod?, txtPcnNote?, valLcnClass?, valSiwlWeight?, uomSiwlWeight?, valSiwlTirePressure?, uomSiwlTirePressure?, valAuwWeight?, uomAuwWeight?, codeStrength?, txtDescrStrength?, codeClassHel?, txtMarking?, codeSts?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual valLcnClass valLcnClass {
            get {
                XElement x = this.GetElement(valLcnClassXName);
                return ((valLcnClass)(x));
            }
            set {
                this.SetElement(valLcnClassXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// SIWL weight
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (TlaUid, FtoUid?, geoLat, geoLong, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, valElev?, valElevAccuracy?, valGeoidUndulation?, uomDistVer?, valCrc?, txtVerDatum?, valLen?, valWid?, uomDim?, valSlope?, codeComposition?, codePreparation?, codeCondSfc?, valPcnClass?, codePcnPavementType?, codePcnPavementSubgrade?, codePcnMaxTirePressure?, valPcnMaxTirePressure?, codePcnEvalMethod?, txtPcnNote?, valLcnClass?, valSiwlWeight?, uomSiwlWeight?, valSiwlTirePressure?, uomSiwlTirePressure?, valAuwWeight?, uomAuwWeight?, codeStrength?, txtDescrStrength?, codeClassHel?, txtMarking?, codeSts?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual valWeight valSiwlWeight {
            get {
                XElement x = this.GetElement(valSiwlWeightXName);
                return ((valWeight)(x));
            }
            set {
                this.SetElement(valSiwlWeightXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Unit of measurement [SIWL weight]
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (TlaUid, FtoUid?, geoLat, geoLong, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, valElev?, valElevAccuracy?, valGeoidUndulation?, uomDistVer?, valCrc?, txtVerDatum?, valLen?, valWid?, uomDim?, valSlope?, codeComposition?, codePreparation?, codeCondSfc?, valPcnClass?, codePcnPavementType?, codePcnPavementSubgrade?, codePcnMaxTirePressure?, valPcnMaxTirePressure?, codePcnEvalMethod?, txtPcnNote?, valLcnClass?, valSiwlWeight?, uomSiwlWeight?, valSiwlTirePressure?, uomSiwlTirePressure?, valAuwWeight?, uomAuwWeight?, codeStrength?, txtDescrStrength?, codeClassHel?, txtMarking?, codeSts?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual uomWeight uomSiwlWeight {
            get {
                XElement x = this.GetElement(uomSiwlWeightXName);
                return ((uomWeight)(x));
            }
            set {
                this.SetElement(uomSiwlWeightXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// SIWL tire pressure
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (TlaUid, FtoUid?, geoLat, geoLong, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, valElev?, valElevAccuracy?, valGeoidUndulation?, uomDistVer?, valCrc?, txtVerDatum?, valLen?, valWid?, uomDim?, valSlope?, codeComposition?, codePreparation?, codeCondSfc?, valPcnClass?, codePcnPavementType?, codePcnPavementSubgrade?, codePcnMaxTirePressure?, valPcnMaxTirePressure?, codePcnEvalMethod?, txtPcnNote?, valLcnClass?, valSiwlWeight?, uomSiwlWeight?, valSiwlTirePressure?, uomSiwlTirePressure?, valAuwWeight?, uomAuwWeight?, codeStrength?, txtDescrStrength?, codeClassHel?, txtMarking?, codeSts?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual valPressure valSiwlTirePressure {
            get {
                XElement x = this.GetElement(valSiwlTirePressureXName);
                return ((valPressure)(x));
            }
            set {
                this.SetElement(valSiwlTirePressureXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Unit of measurement [SIWL tire pressure]
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (TlaUid, FtoUid?, geoLat, geoLong, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, valElev?, valElevAccuracy?, valGeoidUndulation?, uomDistVer?, valCrc?, txtVerDatum?, valLen?, valWid?, uomDim?, valSlope?, codeComposition?, codePreparation?, codeCondSfc?, valPcnClass?, codePcnPavementType?, codePcnPavementSubgrade?, codePcnMaxTirePressure?, valPcnMaxTirePressure?, codePcnEvalMethod?, txtPcnNote?, valLcnClass?, valSiwlWeight?, uomSiwlWeight?, valSiwlTirePressure?, uomSiwlTirePressure?, valAuwWeight?, uomAuwWeight?, codeStrength?, txtDescrStrength?, codeClassHel?, txtMarking?, codeSts?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual uomPressure uomSiwlTirePressure {
            get {
                XElement x = this.GetElement(uomSiwlTirePressureXName);
                return ((uomPressure)(x));
            }
            set {
                this.SetElement(uomSiwlTirePressureXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// All Up Wheel weight
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (TlaUid, FtoUid?, geoLat, geoLong, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, valElev?, valElevAccuracy?, valGeoidUndulation?, uomDistVer?, valCrc?, txtVerDatum?, valLen?, valWid?, uomDim?, valSlope?, codeComposition?, codePreparation?, codeCondSfc?, valPcnClass?, codePcnPavementType?, codePcnPavementSubgrade?, codePcnMaxTirePressure?, valPcnMaxTirePressure?, codePcnEvalMethod?, txtPcnNote?, valLcnClass?, valSiwlWeight?, uomSiwlWeight?, valSiwlTirePressure?, uomSiwlTirePressure?, valAuwWeight?, uomAuwWeight?, codeStrength?, txtDescrStrength?, codeClassHel?, txtMarking?, codeSts?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual valWeight valAuwWeight {
            get {
                XElement x = this.GetElement(valAuwWeightXName);
                return ((valWeight)(x));
            }
            set {
                this.SetElement(valAuwWeightXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Unit of measurement [AUW weight]
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (TlaUid, FtoUid?, geoLat, geoLong, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, valElev?, valElevAccuracy?, valGeoidUndulation?, uomDistVer?, valCrc?, txtVerDatum?, valLen?, valWid?, uomDim?, valSlope?, codeComposition?, codePreparation?, codeCondSfc?, valPcnClass?, codePcnPavementType?, codePcnPavementSubgrade?, codePcnMaxTirePressure?, valPcnMaxTirePressure?, codePcnEvalMethod?, txtPcnNote?, valLcnClass?, valSiwlWeight?, uomSiwlWeight?, valSiwlTirePressure?, uomSiwlTirePressure?, valAuwWeight?, uomAuwWeight?, codeStrength?, txtDescrStrength?, codeClassHel?, txtMarking?, codeSts?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual uomWeight uomAuwWeight {
            get {
                XElement x = this.GetElement(uomAuwWeightXName);
                return ((uomWeight)(x));
            }
            set {
                this.SetElement(uomAuwWeightXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// [Deprecated] Surface strength method
        /// </para>
        /// <para>
        /// DEPRECATED-4.5
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (TlaUid, FtoUid?, geoLat, geoLong, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, valElev?, valElevAccuracy?, valGeoidUndulation?, uomDistVer?, valCrc?, txtVerDatum?, valLen?, valWid?, uomDim?, valSlope?, codeComposition?, codePreparation?, codeCondSfc?, valPcnClass?, codePcnPavementType?, codePcnPavementSubgrade?, codePcnMaxTirePressure?, valPcnMaxTirePressure?, codePcnEvalMethod?, txtPcnNote?, valLcnClass?, valSiwlWeight?, uomSiwlWeight?, valSiwlTirePressure?, uomSiwlTirePressure?, valAuwWeight?, uomAuwWeight?, codeStrength?, txtDescrStrength?, codeClassHel?, txtMarking?, codeSts?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual codeStrengthSfc codeStrength {
            get {
                XElement x = this.GetElement(codeStrengthXName);
                return ((codeStrengthSfc)(x));
            }
            set {
                this.SetElement(codeStrengthXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// [Deprecated] Surface strength
        /// </para>
        /// <para>
        /// DEPRECATED-4.5
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (TlaUid, FtoUid?, geoLat, geoLong, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, valElev?, valElevAccuracy?, valGeoidUndulation?, uomDistVer?, valCrc?, txtVerDatum?, valLen?, valWid?, uomDim?, valSlope?, codeComposition?, codePreparation?, codeCondSfc?, valPcnClass?, codePcnPavementType?, codePcnPavementSubgrade?, codePcnMaxTirePressure?, valPcnMaxTirePressure?, codePcnEvalMethod?, txtPcnNote?, valLcnClass?, valSiwlWeight?, uomSiwlWeight?, valSiwlTirePressure?, uomSiwlTirePressure?, valAuwWeight?, uomAuwWeight?, codeStrength?, txtDescrStrength?, codeClassHel?, txtMarking?, codeSts?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual txtDescr txtDescrStrength {
            get {
                XElement x = this.GetElement(txtDescrStrengthXName);
                return ((txtDescr)(x));
            }
            set {
                this.SetElement(txtDescrStrengthXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Class of helicopter
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (TlaUid, FtoUid?, geoLat, geoLong, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, valElev?, valElevAccuracy?, valGeoidUndulation?, uomDistVer?, valCrc?, txtVerDatum?, valLen?, valWid?, uomDim?, valSlope?, codeComposition?, codePreparation?, codeCondSfc?, valPcnClass?, codePcnPavementType?, codePcnPavementSubgrade?, codePcnMaxTirePressure?, valPcnMaxTirePressure?, codePcnEvalMethod?, txtPcnNote?, valLcnClass?, valSiwlWeight?, uomSiwlWeight?, valSiwlTirePressure?, uomSiwlTirePressure?, valAuwWeight?, uomAuwWeight?, codeStrength?, txtDescrStrength?, codeClassHel?, txtMarking?, codeSts?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual codeClassHel codeClassHel {
            get {
                XElement x = this.GetElement(codeClassHelXName);
                return ((codeClassHel)(x));
            }
            set {
                this.SetElement(codeClassHelXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Marking
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (TlaUid, FtoUid?, geoLat, geoLong, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, valElev?, valElevAccuracy?, valGeoidUndulation?, uomDistVer?, valCrc?, txtVerDatum?, valLen?, valWid?, uomDim?, valSlope?, codeComposition?, codePreparation?, codeCondSfc?, valPcnClass?, codePcnPavementType?, codePcnPavementSubgrade?, codePcnMaxTirePressure?, valPcnMaxTirePressure?, codePcnEvalMethod?, txtPcnNote?, valLcnClass?, valSiwlWeight?, uomSiwlWeight?, valSiwlTirePressure?, uomSiwlTirePressure?, valAuwWeight?, uomAuwWeight?, codeStrength?, txtDescrStrength?, codeClassHel?, txtMarking?, codeSts?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual txtDescr txtMarking {
            get {
                XElement x = this.GetElement(txtMarkingXName);
                return ((txtDescr)(x));
            }
            set {
                this.SetElement(txtMarkingXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Operational status
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (TlaUid, FtoUid?, geoLat, geoLong, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, valElev?, valElevAccuracy?, valGeoidUndulation?, uomDistVer?, valCrc?, txtVerDatum?, valLen?, valWid?, uomDim?, valSlope?, codeComposition?, codePreparation?, codeCondSfc?, valPcnClass?, codePcnPavementType?, codePcnPavementSubgrade?, codePcnMaxTirePressure?, valPcnMaxTirePressure?, codePcnEvalMethod?, txtPcnNote?, valLcnClass?, valSiwlWeight?, uomSiwlWeight?, valSiwlTirePressure?, uomSiwlTirePressure?, valAuwWeight?, uomAuwWeight?, codeStrength?, txtDescrStrength?, codeClassHel?, txtMarking?, codeSts?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual codeStsSfc codeSts {
            get {
                XElement x = this.GetElement(codeStsXName);
                return ((codeStsSfc)(x));
            }
            set {
                this.SetElement(codeStsXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Remark
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (TlaUid, FtoUid?, geoLat, geoLong, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, valElev?, valElevAccuracy?, valGeoidUndulation?, uomDistVer?, valCrc?, txtVerDatum?, valLen?, valWid?, uomDim?, valSlope?, codeComposition?, codePreparation?, codeCondSfc?, valPcnClass?, codePcnPavementType?, codePcnPavementSubgrade?, codePcnMaxTirePressure?, valPcnMaxTirePressure?, codePcnEvalMethod?, txtPcnNote?, valLcnClass?, valSiwlWeight?, uomSiwlWeight?, valSiwlTirePressure?, uomSiwlTirePressure?, valAuwWeight?, uomAuwWeight?, codeStrength?, txtDescrStrength?, codeClassHel?, txtMarking?, codeSts?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual txtRmk txtRmk {
            get {
                XElement x = this.GetElement(txtRmkXName);
                return ((txtRmk)(x));
            }
            set {
                this.SetElement(txtRmkXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string source {
            get {
                XAttribute x = this.Attribute(sourceXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(sourceXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<TlofType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(TlaUidXName, typeof(TlofUidType));
            localElementDictionary.Add(FtoUidXName, typeof(FatoUidType));
            localElementDictionary.Add(geoLatXName, typeof(geoLat));
            localElementDictionary.Add(geoLongXName, typeof(geoLong));
            localElementDictionary.Add(codeDatumXName, typeof(codeDatum));
            localElementDictionary.Add(valGeoAccuracyXName, typeof(valDistHorz));
            localElementDictionary.Add(uomGeoAccuracyXName, typeof(uomDistHorz));
            localElementDictionary.Add(valElevXName, typeof(valDistVer));
            localElementDictionary.Add(valElevAccuracyXName, typeof(valDistVer));
            localElementDictionary.Add(valGeoidUndulationXName, typeof(valDistVer));
            localElementDictionary.Add(uomDistVerXName, typeof(uomElev));
            localElementDictionary.Add(valCrcXName, typeof(valHex));
            localElementDictionary.Add(txtVerDatumXName, typeof(txtDescr));
            localElementDictionary.Add(valLenXName, typeof(valDistHorz));
            localElementDictionary.Add(valWidXName, typeof(valDistHorz));
            localElementDictionary.Add(uomDimXName, typeof(uomDistHorz));
            localElementDictionary.Add(valSlopeXName, typeof(valSlope));
            localElementDictionary.Add(codeCompositionXName, typeof(codeCompositionSfc));
            localElementDictionary.Add(codePreparationXName, typeof(codePreparationSfc));
            localElementDictionary.Add(codeCondSfcXName, typeof(codeCondSfc));
            localElementDictionary.Add(valPcnClassXName, typeof(valPcnClass));
            localElementDictionary.Add(codePcnPavementTypeXName, typeof(codePcnPavementType));
            localElementDictionary.Add(codePcnPavementSubgradeXName, typeof(codePcnPavementSubgrade));
            localElementDictionary.Add(codePcnMaxTirePressureXName, typeof(codePcnMaxTirePressure));
            localElementDictionary.Add(valPcnMaxTirePressureXName, typeof(valPressurePcnTire));
            localElementDictionary.Add(codePcnEvalMethodXName, typeof(codePcnEvalMethod));
            localElementDictionary.Add(txtPcnNoteXName, typeof(txtRmk));
            localElementDictionary.Add(valLcnClassXName, typeof(valLcnClass));
            localElementDictionary.Add(valSiwlWeightXName, typeof(valWeight));
            localElementDictionary.Add(uomSiwlWeightXName, typeof(uomWeight));
            localElementDictionary.Add(valSiwlTirePressureXName, typeof(valPressure));
            localElementDictionary.Add(uomSiwlTirePressureXName, typeof(uomPressure));
            localElementDictionary.Add(valAuwWeightXName, typeof(valWeight));
            localElementDictionary.Add(uomAuwWeightXName, typeof(uomWeight));
            localElementDictionary.Add(codeStrengthXName, typeof(codeStrengthSfc));
            localElementDictionary.Add(txtDescrStrengthXName, typeof(txtDescr));
            localElementDictionary.Add(codeClassHelXName, typeof(codeClassHel));
            localElementDictionary.Add(txtMarkingXName, typeof(txtDescr));
            localElementDictionary.Add(codeStsXName, typeof(codeStsSfc));
            localElementDictionary.Add(txtRmkXName, typeof(txtRmk));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Touch down and lift off area [TLOF] - UID
    /// </para>
    /// <para>
    /// Regular expression: (AhpUid, txtDesig)
    /// </para>
    /// </summary>
    public partial class TlofUidType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName AhpUidXName = System.Xml.Linq.XName.Get("AhpUid", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName txtDesigXName = System.Xml.Linq.XName.Get("txtDesig", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName midXName = System.Xml.Linq.XName.Get("mid", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("TlofUidType", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator TlofUidType(XElement xe) { return XTypedServices.ToXTypedElement<TlofUidType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static TlofUidType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(AhpUidXName), new NamedContentModelEntity(txtDesigXName));
        }
        
        /// <summary>
        /// <para>
        /// Touch down and lift off area [TLOF] - UID
        /// </para>
        /// <para>
        /// Regular expression: (AhpUid, txtDesig)
        /// </para>
        /// </summary>
        public TlofUidType() {
        }
        
        /// <summary>
        /// <para>
        /// Touch down and lift off area [TLOF] is situated at Aerodrome / Heliport
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (AhpUid, txtDesig)
        /// </para>
        /// </summary>
        public virtual AerodromeHeliportUidType AhpUid {
            get {
                XElement x = this.GetElement(AhpUidXName);
                return ((AerodromeHeliportUidType)(x));
            }
            set {
                this.SetElement(AhpUidXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Designator
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (AhpUid, txtDesig)
        /// </para>
        /// </summary>
        public virtual txtDesig txtDesig {
            get {
                XElement x = this.GetElement(txtDesigXName);
                return ((txtDesig)(x));
            }
            set {
                this.SetElement(txtDesigXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string mid {
            get {
                XAttribute x = this.Attribute(midXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(midXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<TlofUidType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(AhpUidXName, typeof(AerodromeHeliportUidType));
            localElementDictionary.Add(txtDesigXName, typeof(txtDesig));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Traffic flow restriction
    /// </para>
    /// <para>
    /// Regular expression: (TfrUid, codeType, txtOprGoal?, txtDescr?, Tft?, txtRemark?, Fcc, Tre*)
    /// </para>
    /// </summary>
    public partial class TrafficFlowRestrictionType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TfrUidXName = System.Xml.Linq.XName.Get("TfrUid", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName codeTypeXName = System.Xml.Linq.XName.Get("codeType", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName txtOprGoalXName = System.Xml.Linq.XName.Get("txtOprGoal", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName txtDescrXName = System.Xml.Linq.XName.Get("txtDescr", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TftXName = System.Xml.Linq.XName.Get("Tft", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName txtRemarkXName = System.Xml.Linq.XName.Get("txtRemark", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName FccXName = System.Xml.Linq.XName.Get("Fcc", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TreXName = System.Xml.Linq.XName.Get("Tre", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<FlowRoutingType> TreField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName sourceXName = System.Xml.Linq.XName.Get("source", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("TrafficFlowRestrictionType", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator TrafficFlowRestrictionType(XElement xe) { return XTypedServices.ToXTypedElement<TrafficFlowRestrictionType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static TrafficFlowRestrictionType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(TfrUidXName), new NamedContentModelEntity(codeTypeXName), new NamedContentModelEntity(txtOprGoalXName), new NamedContentModelEntity(txtDescrXName), new NamedContentModelEntity(TftXName), new NamedContentModelEntity(txtRemarkXName), new NamedContentModelEntity(FccXName), new NamedContentModelEntity(TreXName));
        }
        
        /// <summary>
        /// <para>
        /// Traffic flow restriction
        /// </para>
        /// <para>
        /// Regular expression: (TfrUid, codeType, txtOprGoal?, txtDescr?, Tft?, txtRemark?, Fcc, Tre*)
        /// </para>
        /// </summary>
        public TrafficFlowRestrictionType() {
        }
        
        /// <summary>
        /// <para>
        /// a version of Traffic flow restriction
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (TfrUid, codeType, txtOprGoal?, txtDescr?, Tft?, txtRemark?, Fcc, Tre*)
        /// </para>
        /// </summary>
        public virtual TrafficFlowRestrictionUidType TfrUid {
            get {
                XElement x = this.GetElement(TfrUidXName);
                return ((TrafficFlowRestrictionUidType)(x));
            }
            set {
                this.SetElement(TfrUidXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Restriction type
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (TfrUid, codeType, txtOprGoal?, txtDescr?, Tft?, txtRemark?, Fcc, Tre*)
        /// </para>
        /// </summary>
        public virtual codeTypeRestr codeType {
            get {
                XElement x = this.GetElement(codeTypeXName);
                return ((codeTypeRestr)(x));
            }
            set {
                this.SetElement(codeTypeXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Operational goal
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (TfrUid, codeType, txtOprGoal?, txtDescr?, Tft?, txtRemark?, Fcc, Tre*)
        /// </para>
        /// </summary>
        public virtual txtDescr txtOprGoal {
            get {
                XElement x = this.GetElement(txtOprGoalXName);
                return ((txtDescr)(x));
            }
            set {
                this.SetElement(txtOprGoalXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Textual description
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (TfrUid, codeType, txtOprGoal?, txtDescr?, Tft?, txtRemark?, Fcc, Tre*)
        /// </para>
        /// </summary>
        public virtual txtDescr txtDescr {
            get {
                XElement x = this.GetElement(txtDescrXName);
                return ((txtDescr)(x));
            }
            set {
                this.SetElement(txtDescrXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Traffic flow restriction is applicable according to Traffic flow restriction - Timetable
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (TfrUid, codeType, txtOprGoal?, txtDescr?, Tft?, txtRemark?, Fcc, Tre*)
        /// </para>
        /// </summary>
        public virtual TimetableType Tft {
            get {
                XElement x = this.GetElement(TftXName);
                return ((TimetableType)(x));
            }
            set {
                this.SetElement(TftXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Remark
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (TfrUid, codeType, txtOprGoal?, txtDescr?, Tft?, txtRemark?, Fcc, Tre*)
        /// </para>
        /// </summary>
        public virtual txtRmk txtRemark {
            get {
                XElement x = this.GetElement(txtRemarkXName);
                return ((txtRmk)(x));
            }
            set {
                this.SetElement(txtRemarkXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Traffic flow restriction is defined by Flow conditions combination
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (TfrUid, codeType, txtOprGoal?, txtDescr?, Tft?, txtRemark?, Fcc, Tre*)
        /// </para>
        /// </summary>
        public virtual FlowConditionsCombinationType Fcc {
            get {
                XElement x = this.GetElement(FccXName);
                return ((FlowConditionsCombinationType)(x));
            }
            set {
                this.SetElement(FccXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Traffic flow restriction is regulating the use of Flow routing
        /// </para>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (TfrUid, codeType, txtOprGoal?, txtDescr?, Tft?, txtRemark?, Fcc, Tre*)
        /// </para>
        /// </summary>
        public virtual IList<FlowRoutingType> Tre {
            get {
                if ((this.TreField == null)) {
                    this.TreField = new XTypedList<FlowRoutingType>(this, LinqToXsdTypeManager.Instance, TreXName);
                }
                return this.TreField;
            }
            set {
                if ((value == null)) {
                    this.TreField = null;
                }
                else {
                    if ((this.TreField == null)) {
                        this.TreField = XTypedList<FlowRoutingType>.Initialize(this, LinqToXsdTypeManager.Instance, value, TreXName);
                    }
                    else {
                        XTypedServices.SetList<FlowRoutingType>(this.TreField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string source {
            get {
                XAttribute x = this.Attribute(sourceXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(sourceXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<TrafficFlowRestrictionType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(TfrUidXName, typeof(TrafficFlowRestrictionUidType));
            localElementDictionary.Add(codeTypeXName, typeof(codeTypeRestr));
            localElementDictionary.Add(txtOprGoalXName, typeof(txtDescr));
            localElementDictionary.Add(txtDescrXName, typeof(txtDescr));
            localElementDictionary.Add(TftXName, typeof(TimetableType));
            localElementDictionary.Add(txtRemarkXName, typeof(txtRmk));
            localElementDictionary.Add(FccXName, typeof(FlowConditionsCombinationType));
            localElementDictionary.Add(TreXName, typeof(FlowRoutingType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Traffic flow restriction - UID
    /// </para>
    /// <para>
    /// Regular expression: (codeId)
    /// </para>
    /// </summary>
    public partial class TrafficFlowRestrictionUidType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName codeIdXName = System.Xml.Linq.XName.Get("codeId", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName midXName = System.Xml.Linq.XName.Get("mid", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("TrafficFlowRestrictionUidType", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator TrafficFlowRestrictionUidType(XElement xe) { return XTypedServices.ToXTypedElement<TrafficFlowRestrictionUidType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static TrafficFlowRestrictionUidType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(codeIdXName));
        }
        
        /// <summary>
        /// <para>
        /// Traffic flow restriction - UID
        /// </para>
        /// <para>
        /// Regular expression: (codeId)
        /// </para>
        /// </summary>
        public TrafficFlowRestrictionUidType() {
        }
        
        /// <summary>
        /// <para>
        /// Identifier
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (codeId)
        /// </para>
        /// </summary>
        public virtual codeIdRestr codeId {
            get {
                XElement x = this.GetElement(codeIdXName);
                return ((codeIdRestr)(x));
            }
            set {
                this.SetElement(codeIdXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string mid {
            get {
                XAttribute x = this.Attribute(midXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(midXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<TrafficFlowRestrictionUidType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(codeIdXName, typeof(codeIdRestr));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Unit association
    /// </para>
    /// <para>
    /// Regular expression: (UacUid, Uat?, txtRmk?)
    /// </para>
    /// </summary>
    public partial class UnitAssociationType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName UacUidXName = System.Xml.Linq.XName.Get("UacUid", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName UatXName = System.Xml.Linq.XName.Get("Uat", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName txtRmkXName = System.Xml.Linq.XName.Get("txtRmk", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName sourceXName = System.Xml.Linq.XName.Get("source", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("UnitAssociationType", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator UnitAssociationType(XElement xe) { return XTypedServices.ToXTypedElement<UnitAssociationType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static UnitAssociationType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(UacUidXName), new NamedContentModelEntity(UatXName), new NamedContentModelEntity(txtRmkXName));
        }
        
        /// <summary>
        /// <para>
        /// Unit association
        /// </para>
        /// <para>
        /// Regular expression: (UacUid, Uat?, txtRmk?)
        /// </para>
        /// </summary>
        public UnitAssociationType() {
        }
        
        /// <summary>
        /// <para>
        /// a version of Unit association
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (UacUid, Uat?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual UnitAssociationUidType UacUid {
            get {
                XElement x = this.GetElement(UacUidXName);
                return ((UnitAssociationUidType)(x));
            }
            set {
                this.SetElement(UacUidXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Unit association is active according to Unit association - Timetable
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (UacUid, Uat?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual TimetableType Uat {
            get {
                XElement x = this.GetElement(UatXName);
                return ((TimetableType)(x));
            }
            set {
                this.SetElement(UatXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Remark
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (UacUid, Uat?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual txtRmk txtRmk {
            get {
                XElement x = this.GetElement(txtRmkXName);
                return ((txtRmk)(x));
            }
            set {
                this.SetElement(txtRmkXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string source {
            get {
                XAttribute x = this.Attribute(sourceXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(sourceXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<UnitAssociationType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(UacUidXName, typeof(UnitAssociationUidType));
            localElementDictionary.Add(UatXName, typeof(TimetableType));
            localElementDictionary.Add(txtRmkXName, typeof(txtRmk));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Unit association - UID
    /// </para>
    /// <para>
    /// Regular expression: (UniUidChi, UniUidPar, codeType)
    /// </para>
    /// </summary>
    public partial class UnitAssociationUidType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName UniUidChiXName = System.Xml.Linq.XName.Get("UniUidChi", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName UniUidParXName = System.Xml.Linq.XName.Get("UniUidPar", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName codeTypeXName = System.Xml.Linq.XName.Get("codeType", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName midXName = System.Xml.Linq.XName.Get("mid", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("UnitAssociationUidType", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator UnitAssociationUidType(XElement xe) { return XTypedServices.ToXTypedElement<UnitAssociationUidType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static UnitAssociationUidType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(UniUidChiXName), new NamedContentModelEntity(UniUidParXName), new NamedContentModelEntity(codeTypeXName));
        }
        
        /// <summary>
        /// <para>
        /// Unit association - UID
        /// </para>
        /// <para>
        /// Regular expression: (UniUidChi, UniUidPar, codeType)
        /// </para>
        /// </summary>
        public UnitAssociationUidType() {
        }
        
        /// <summary>
        /// <para>
        /// Unit association is having as child Organisation unit providing services
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (UniUidChi, UniUidPar, codeType)
        /// </para>
        /// </summary>
        public virtual UnitUidType UniUidChi {
            get {
                XElement x = this.GetElement(UniUidChiXName);
                return ((UnitUidType)(x));
            }
            set {
                this.SetElement(UniUidChiXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Unit association is having as parent Organisation unit providing services
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (UniUidChi, UniUidPar, codeType)
        /// </para>
        /// </summary>
        public virtual UnitUidType UniUidPar {
            get {
                XElement x = this.GetElement(UniUidParXName);
                return ((UnitUidType)(x));
            }
            set {
                this.SetElement(UniUidParXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Type
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (UniUidChi, UniUidPar, codeType)
        /// </para>
        /// </summary>
        public virtual codeTypeAssocUnit codeType {
            get {
                XElement x = this.GetElement(codeTypeXName);
                return ((codeTypeAssocUnit)(x));
            }
            set {
                this.SetElement(codeTypeXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string mid {
            get {
                XAttribute x = this.Attribute(midXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(midXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<UnitAssociationUidType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(UniUidChiXName, typeof(UnitUidType));
            localElementDictionary.Add(UniUidParXName, typeof(UnitUidType));
            localElementDictionary.Add(codeTypeXName, typeof(codeTypeAssocUnit));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Unit contact address
    /// </para>
    /// <para>
    /// Regular expression: (UasUid, txtAddress, txtRmk?)
    /// </para>
    /// </summary>
    public partial class UnitContactAddressType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName UasUidXName = System.Xml.Linq.XName.Get("UasUid", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName txtAddressXName = System.Xml.Linq.XName.Get("txtAddress", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName txtRmkXName = System.Xml.Linq.XName.Get("txtRmk", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName sourceXName = System.Xml.Linq.XName.Get("source", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("UnitContactAddressType", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator UnitContactAddressType(XElement xe) { return XTypedServices.ToXTypedElement<UnitContactAddressType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static UnitContactAddressType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(UasUidXName), new NamedContentModelEntity(txtAddressXName), new NamedContentModelEntity(txtRmkXName));
        }
        
        /// <summary>
        /// <para>
        /// Unit contact address
        /// </para>
        /// <para>
        /// Regular expression: (UasUid, txtAddress, txtRmk?)
        /// </para>
        /// </summary>
        public UnitContactAddressType() {
        }
        
        /// <summary>
        /// <para>
        /// a version of Unit contact address
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (UasUid, txtAddress, txtRmk?)
        /// </para>
        /// </summary>
        public virtual UnitContactAddressUidType UasUid {
            get {
                XElement x = this.GetElement(UasUidXName);
                return ((UnitContactAddressUidType)(x));
            }
            set {
                this.SetElement(UasUidXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Full address
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (UasUid, txtAddress, txtRmk?)
        /// </para>
        /// </summary>
        public virtual txtAddress txtAddress {
            get {
                XElement x = this.GetElement(txtAddressXName);
                return ((txtAddress)(x));
            }
            set {
                this.SetElement(txtAddressXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Remark
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (UasUid, txtAddress, txtRmk?)
        /// </para>
        /// </summary>
        public virtual txtRmk txtRmk {
            get {
                XElement x = this.GetElement(txtRmkXName);
                return ((txtRmk)(x));
            }
            set {
                this.SetElement(txtRmkXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string source {
            get {
                XAttribute x = this.Attribute(sourceXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(sourceXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<UnitContactAddressType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(UasUidXName, typeof(UnitContactAddressUidType));
            localElementDictionary.Add(txtAddressXName, typeof(txtAddress));
            localElementDictionary.Add(txtRmkXName, typeof(txtRmk));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Unit contact address - UID
    /// </para>
    /// <para>
    /// Regular expression: (UniUid, codeType, noSeq)
    /// </para>
    /// </summary>
    public partial class UnitContactAddressUidType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName UniUidXName = System.Xml.Linq.XName.Get("UniUid", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName codeTypeXName = System.Xml.Linq.XName.Get("codeType", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName noSeqXName = System.Xml.Linq.XName.Get("noSeq", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName midXName = System.Xml.Linq.XName.Get("mid", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("UnitContactAddressUidType", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator UnitContactAddressUidType(XElement xe) { return XTypedServices.ToXTypedElement<UnitContactAddressUidType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static UnitContactAddressUidType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(UniUidXName), new NamedContentModelEntity(codeTypeXName), new NamedContentModelEntity(noSeqXName));
        }
        
        /// <summary>
        /// <para>
        /// Unit contact address - UID
        /// </para>
        /// <para>
        /// Regular expression: (UniUid, codeType, noSeq)
        /// </para>
        /// </summary>
        public UnitContactAddressUidType() {
        }
        
        /// <summary>
        /// <para>
        /// Unit contact address is for Organisation unit providing services
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (UniUid, codeType, noSeq)
        /// </para>
        /// </summary>
        public virtual UnitUidType UniUid {
            get {
                XElement x = this.GetElement(UniUidXName);
                return ((UnitUidType)(x));
            }
            set {
                this.SetElement(UniUidXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Type
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (UniUid, codeType, noSeq)
        /// </para>
        /// </summary>
        public virtual codeTypeAddress codeType {
            get {
                XElement x = this.GetElement(codeTypeXName);
                return ((codeTypeAddress)(x));
            }
            set {
                this.SetElement(codeTypeXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Sequence number
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (UniUid, codeType, noSeq)
        /// </para>
        /// </summary>
        public virtual noSeq noSeq {
            get {
                XElement x = this.GetElement(noSeqXName);
                return ((noSeq)(x));
            }
            set {
                this.SetElement(noSeqXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string mid {
            get {
                XAttribute x = this.Attribute(midXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(midXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<UnitContactAddressUidType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(UniUidXName, typeof(UnitUidType));
            localElementDictionary.Add(codeTypeXName, typeof(codeTypeAddress));
            localElementDictionary.Add(noSeqXName, typeof(noSeq));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Organisation unit providing services
    /// </para>
    /// <para>
    /// Regular expression: (UniUid, OrgUid, AhpUid?, codeClass, codeId?, geoLat?, geoLong?, codeDatum?, txtRmk?)
    /// </para>
    /// </summary>
    public partial class UnitType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName UniUidXName = System.Xml.Linq.XName.Get("UniUid", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName OrgUidXName = System.Xml.Linq.XName.Get("OrgUid", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName AhpUidXName = System.Xml.Linq.XName.Get("AhpUid", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName codeClassXName = System.Xml.Linq.XName.Get("codeClass", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName codeIdXName = System.Xml.Linq.XName.Get("codeId", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName geoLatXName = System.Xml.Linq.XName.Get("geoLat", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName geoLongXName = System.Xml.Linq.XName.Get("geoLong", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName codeDatumXName = System.Xml.Linq.XName.Get("codeDatum", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName txtRmkXName = System.Xml.Linq.XName.Get("txtRmk", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName sourceXName = System.Xml.Linq.XName.Get("source", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("UnitType", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator UnitType(XElement xe) { return XTypedServices.ToXTypedElement<UnitType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static UnitType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(UniUidXName), new NamedContentModelEntity(OrgUidXName), new NamedContentModelEntity(AhpUidXName), new NamedContentModelEntity(codeClassXName), new NamedContentModelEntity(codeIdXName), new NamedContentModelEntity(geoLatXName), new NamedContentModelEntity(geoLongXName), new NamedContentModelEntity(codeDatumXName), new NamedContentModelEntity(txtRmkXName));
        }
        
        /// <summary>
        /// <para>
        /// Organisation unit providing services
        /// </para>
        /// <para>
        /// Regular expression: (UniUid, OrgUid, AhpUid?, codeClass, codeId?, geoLat?, geoLong?, codeDatum?, txtRmk?)
        /// </para>
        /// </summary>
        public UnitType() {
        }
        
        /// <summary>
        /// <para>
        /// a version of Organisation unit providing services
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (UniUid, OrgUid, AhpUid?, codeClass, codeId?, geoLat?, geoLong?, codeDatum?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual UnitUidType UniUid {
            get {
                XElement x = this.GetElement(UniUidXName);
                return ((UnitUidType)(x));
            }
            set {
                this.SetElement(UniUidXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Organisation unit providing services is supervised by Organisaton or authority
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (UniUid, OrgUid, AhpUid?, codeClass, codeId?, geoLat?, geoLong?, codeDatum?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual OrganisationAuthorityUidType OrgUid {
            get {
                XElement x = this.GetElement(OrgUidXName);
                return ((OrganisationAuthorityUidType)(x));
            }
            set {
                this.SetElement(OrgUidXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Organisation unit providing services is located at Aerodrome / Heliport
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (UniUid, OrgUid, AhpUid?, codeClass, codeId?, geoLat?, geoLong?, codeDatum?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual AerodromeHeliportUidType AhpUid {
            get {
                XElement x = this.GetElement(AhpUidXName);
                return ((AerodromeHeliportUidType)(x));
            }
            set {
                this.SetElement(AhpUidXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Classification
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (UniUid, OrgUid, AhpUid?, codeClass, codeId?, geoLat?, geoLong?, codeDatum?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual codeClassUnit codeClass {
            get {
                XElement x = this.GetElement(codeClassXName);
                return ((codeClassUnit)(x));
            }
            set {
                this.SetElement(codeClassXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// A coded identifier associated with the Unit. For example, the ICAO Location Indicator of an ACC, as listed in DOC 7910
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (UniUid, OrgUid, AhpUid?, codeClass, codeId?, geoLat?, geoLong?, codeDatum?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual codeIdOrg codeId {
            get {
                XElement x = this.GetElement(codeIdXName);
                return ((codeIdOrg)(x));
            }
            set {
                this.SetElement(codeIdXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Latitude
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (UniUid, OrgUid, AhpUid?, codeClass, codeId?, geoLat?, geoLong?, codeDatum?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual geoLat geoLat {
            get {
                XElement x = this.GetElement(geoLatXName);
                return ((geoLat)(x));
            }
            set {
                this.SetElement(geoLatXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Longitude
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (UniUid, OrgUid, AhpUid?, codeClass, codeId?, geoLat?, geoLong?, codeDatum?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual geoLong geoLong {
            get {
                XElement x = this.GetElement(geoLongXName);
                return ((geoLong)(x));
            }
            set {
                this.SetElement(geoLongXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Datum
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (UniUid, OrgUid, AhpUid?, codeClass, codeId?, geoLat?, geoLong?, codeDatum?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual codeDatum codeDatum {
            get {
                XElement x = this.GetElement(codeDatumXName);
                return ((codeDatum)(x));
            }
            set {
                this.SetElement(codeDatumXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Remark
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (UniUid, OrgUid, AhpUid?, codeClass, codeId?, geoLat?, geoLong?, codeDatum?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual txtRmk txtRmk {
            get {
                XElement x = this.GetElement(txtRmkXName);
                return ((txtRmk)(x));
            }
            set {
                this.SetElement(txtRmkXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string source {
            get {
                XAttribute x = this.Attribute(sourceXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(sourceXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<UnitType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(UniUidXName, typeof(UnitUidType));
            localElementDictionary.Add(OrgUidXName, typeof(OrganisationAuthorityUidType));
            localElementDictionary.Add(AhpUidXName, typeof(AerodromeHeliportUidType));
            localElementDictionary.Add(codeClassXName, typeof(codeClassUnit));
            localElementDictionary.Add(codeIdXName, typeof(codeIdOrg));
            localElementDictionary.Add(geoLatXName, typeof(geoLat));
            localElementDictionary.Add(geoLongXName, typeof(geoLong));
            localElementDictionary.Add(codeDatumXName, typeof(codeDatum));
            localElementDictionary.Add(txtRmkXName, typeof(txtRmk));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Organisation unit providing services - UID
    /// </para>
    /// <para>
    /// Regular expression: (txtName, codeType)
    /// </para>
    /// </summary>
    public partial class UnitUidType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName txtNameXName = System.Xml.Linq.XName.Get("txtName", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName codeTypeXName = System.Xml.Linq.XName.Get("codeType", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName midXName = System.Xml.Linq.XName.Get("mid", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName regionXName = System.Xml.Linq.XName.Get("region", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("UnitUidType", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator UnitUidType(XElement xe) { return XTypedServices.ToXTypedElement<UnitUidType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static UnitUidType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(txtNameXName), new NamedContentModelEntity(codeTypeXName));
        }
        
        /// <summary>
        /// <para>
        /// Organisation unit providing services - UID
        /// </para>
        /// <para>
        /// Regular expression: (txtName, codeType)
        /// </para>
        /// </summary>
        public UnitUidType() {
        }
        
        /// <summary>
        /// <para>
        /// Name
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (txtName, codeType)
        /// </para>
        /// </summary>
        public virtual txtName txtName {
            get {
                XElement x = this.GetElement(txtNameXName);
                return ((txtName)(x));
            }
            set {
                this.SetElement(txtNameXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Type
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (txtName, codeType)
        /// </para>
        /// </summary>
        public virtual codeTypeUnit codeType {
            get {
                XElement x = this.GetElement(codeTypeXName);
                return ((codeTypeUnit)(x));
            }
            set {
                this.SetElement(codeTypeXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string mid {
            get {
                XAttribute x = this.Attribute(midXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(midXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual string region {
            get {
                XAttribute x = this.Attribute(regionXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(regionXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<UnitUidType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(txtNameXName, typeof(txtName));
            localElementDictionary.Add(codeTypeXName, typeof(codeTypeUnit));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// DEPRECATED-4.0
    /// </para>
    /// <para>
    /// [Deprecated] VOR limitation
    /// </para>
    /// <para>
    /// Regular expression: (VlnUid, valDistOuter?, uomDistHorz, valDistVerUpper?, uomDistVerUpper?, codeDistVerUpper?, uomDistVerLower, codeDistVerLower, valAngleScallop?, txtRmk?)
    /// </para>
    /// </summary>
    public partial class VorLimitationType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName VlnUidXName = System.Xml.Linq.XName.Get("VlnUid", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName valDistOuterXName = System.Xml.Linq.XName.Get("valDistOuter", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName uomDistHorzXName = System.Xml.Linq.XName.Get("uomDistHorz", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName valDistVerUpperXName = System.Xml.Linq.XName.Get("valDistVerUpper", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName uomDistVerUpperXName = System.Xml.Linq.XName.Get("uomDistVerUpper", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName codeDistVerUpperXName = System.Xml.Linq.XName.Get("codeDistVerUpper", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName uomDistVerLowerXName = System.Xml.Linq.XName.Get("uomDistVerLower", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName codeDistVerLowerXName = System.Xml.Linq.XName.Get("codeDistVerLower", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName valAngleScallopXName = System.Xml.Linq.XName.Get("valAngleScallop", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName txtRmkXName = System.Xml.Linq.XName.Get("txtRmk", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName sourceXName = System.Xml.Linq.XName.Get("source", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("VorLimitationType", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator VorLimitationType(XElement xe) { return XTypedServices.ToXTypedElement<VorLimitationType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static VorLimitationType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(VlnUidXName), new NamedContentModelEntity(valDistOuterXName), new NamedContentModelEntity(uomDistHorzXName), new NamedContentModelEntity(valDistVerUpperXName), new NamedContentModelEntity(uomDistVerUpperXName), new NamedContentModelEntity(codeDistVerUpperXName), new NamedContentModelEntity(uomDistVerLowerXName), new NamedContentModelEntity(codeDistVerLowerXName), new NamedContentModelEntity(valAngleScallopXName), new NamedContentModelEntity(txtRmkXName));
        }
        
        /// <summary>
        /// <para>
        /// DEPRECATED-4.0
        /// </para>
        /// <para>
        /// [Deprecated] VOR limitation
        /// </para>
        /// <para>
        /// Regular expression: (VlnUid, valDistOuter?, uomDistHorz, valDistVerUpper?, uomDistVerUpper?, codeDistVerUpper?, uomDistVerLower, codeDistVerLower, valAngleScallop?, txtRmk?)
        /// </para>
        /// </summary>
        public VorLimitationType() {
        }
        
        /// <summary>
        /// <para>
        /// a version of VOR limitation
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (VlnUid, valDistOuter?, uomDistHorz, valDistVerUpper?, uomDistVerUpper?, codeDistVerUpper?, uomDistVerLower, codeDistVerLower, valAngleScallop?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual VorLimitationUidType VlnUid {
            get {
                XElement x = this.GetElement(VlnUidXName);
                return ((VorLimitationUidType)(x));
            }
            set {
                this.SetElement(VlnUidXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Angle sector volume outer limit
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (VlnUid, valDistOuter?, uomDistHorz, valDistVerUpper?, uomDistVerUpper?, codeDistVerUpper?, uomDistVerLower, codeDistVerLower, valAngleScallop?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual valDistHorz valDistOuter {
            get {
                XElement x = this.GetElement(valDistOuterXName);
                return ((valDistHorz)(x));
            }
            set {
                this.SetElement(valDistOuterXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Unit of measurement [horizontal distance]
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (VlnUid, valDistOuter?, uomDistHorz, valDistVerUpper?, uomDistVerUpper?, codeDistVerUpper?, uomDistVerLower, codeDistVerLower, valAngleScallop?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual uomDistHorz uomDistHorz {
            get {
                XElement x = this.GetElement(uomDistHorzXName);
                return ((uomDistHorz)(x));
            }
            set {
                this.SetElement(uomDistHorzXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Upper limit
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (VlnUid, valDistOuter?, uomDistHorz, valDistVerUpper?, uomDistVerUpper?, codeDistVerUpper?, uomDistVerLower, codeDistVerLower, valAngleScallop?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual valDistVer valDistVerUpper {
            get {
                XElement x = this.GetElement(valDistVerUpperXName);
                return ((valDistVer)(x));
            }
            set {
                this.SetElement(valDistVerUpperXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Unit of measurement [upper limit]
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (VlnUid, valDistOuter?, uomDistHorz, valDistVerUpper?, uomDistVerUpper?, codeDistVerUpper?, uomDistVerLower, codeDistVerLower, valAngleScallop?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual uomDistVer uomDistVerUpper {
            get {
                XElement x = this.GetElement(uomDistVerUpperXName);
                return ((uomDistVer)(x));
            }
            set {
                this.SetElement(uomDistVerUpperXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Reference for upper limit
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (VlnUid, valDistOuter?, uomDistHorz, valDistVerUpper?, uomDistVerUpper?, codeDistVerUpper?, uomDistVerLower, codeDistVerLower, valAngleScallop?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual codeDistVer codeDistVerUpper {
            get {
                XElement x = this.GetElement(codeDistVerUpperXName);
                return ((codeDistVer)(x));
            }
            set {
                this.SetElement(codeDistVerUpperXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Unit of measurement [lower limit]
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (VlnUid, valDistOuter?, uomDistHorz, valDistVerUpper?, uomDistVerUpper?, codeDistVerUpper?, uomDistVerLower, codeDistVerLower, valAngleScallop?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual uomDistVer uomDistVerLower {
            get {
                XElement x = this.GetElement(uomDistVerLowerXName);
                return ((uomDistVer)(x));
            }
            set {
                this.SetElement(uomDistVerLowerXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Reference for lower limit
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (VlnUid, valDistOuter?, uomDistHorz, valDistVerUpper?, uomDistVerUpper?, codeDistVerUpper?, uomDistVerLower, codeDistVerLower, valAngleScallop?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual codeDistVer codeDistVerLower {
            get {
                XElement x = this.GetElement(codeDistVerLowerXName);
                return ((codeDistVer)(x));
            }
            set {
                this.SetElement(codeDistVerLowerXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Scalloping angle
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (VlnUid, valDistOuter?, uomDistHorz, valDistVerUpper?, uomDistVerUpper?, codeDistVerUpper?, uomDistVerLower, codeDistVerLower, valAngleScallop?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual valAngle valAngleScallop {
            get {
                XElement x = this.GetElement(valAngleScallopXName);
                return ((valAngle)(x));
            }
            set {
                this.SetElement(valAngleScallopXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Remark
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (VlnUid, valDistOuter?, uomDistHorz, valDistVerUpper?, uomDistVerUpper?, codeDistVerUpper?, uomDistVerLower, codeDistVerLower, valAngleScallop?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual txtRmk txtRmk {
            get {
                XElement x = this.GetElement(txtRmkXName);
                return ((txtRmk)(x));
            }
            set {
                this.SetElement(txtRmkXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string source {
            get {
                XAttribute x = this.Attribute(sourceXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(sourceXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<VorLimitationType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(VlnUidXName, typeof(VorLimitationUidType));
            localElementDictionary.Add(valDistOuterXName, typeof(valDistHorz));
            localElementDictionary.Add(uomDistHorzXName, typeof(uomDistHorz));
            localElementDictionary.Add(valDistVerUpperXName, typeof(valDistVer));
            localElementDictionary.Add(uomDistVerUpperXName, typeof(uomDistVer));
            localElementDictionary.Add(codeDistVerUpperXName, typeof(codeDistVer));
            localElementDictionary.Add(uomDistVerLowerXName, typeof(uomDistVer));
            localElementDictionary.Add(codeDistVerLowerXName, typeof(codeDistVer));
            localElementDictionary.Add(valAngleScallopXName, typeof(valAngle));
            localElementDictionary.Add(txtRmkXName, typeof(txtRmk));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// DEPRECATED-4.0
    /// </para>
    /// <para>
    /// [Deprecated] VOR limitation - UID
    /// </para>
    /// <para>
    /// Regular expression: (VorUid, codeType, valAngleFm, valAngleTo, valDistInner, valDistVerLower)
    /// </para>
    /// </summary>
    public partial class VorLimitationUidType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName VorUidXName = System.Xml.Linq.XName.Get("VorUid", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName codeTypeXName = System.Xml.Linq.XName.Get("codeType", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName valAngleFmXName = System.Xml.Linq.XName.Get("valAngleFm", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName valAngleToXName = System.Xml.Linq.XName.Get("valAngleTo", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName valDistInnerXName = System.Xml.Linq.XName.Get("valDistInner", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName valDistVerLowerXName = System.Xml.Linq.XName.Get("valDistVerLower", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName midXName = System.Xml.Linq.XName.Get("mid", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("VorLimitationUidType", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator VorLimitationUidType(XElement xe) { return XTypedServices.ToXTypedElement<VorLimitationUidType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static VorLimitationUidType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(VorUidXName), new NamedContentModelEntity(codeTypeXName), new NamedContentModelEntity(valAngleFmXName), new NamedContentModelEntity(valAngleToXName), new NamedContentModelEntity(valDistInnerXName), new NamedContentModelEntity(valDistVerLowerXName));
        }
        
        /// <summary>
        /// <para>
        /// DEPRECATED-4.0
        /// </para>
        /// <para>
        /// [Deprecated] VOR limitation - UID
        /// </para>
        /// <para>
        /// Regular expression: (VorUid, codeType, valAngleFm, valAngleTo, valDistInner, valDistVerLower)
        /// </para>
        /// </summary>
        public VorLimitationUidType() {
        }
        
        /// <summary>
        /// <para>
        /// VOR limitation is limiting VHF omnidirectional radio range beacon [VOR]
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (VorUid, codeType, valAngleFm, valAngleTo, valDistInner, valDistVerLower)
        /// </para>
        /// </summary>
        public virtual VorUidType VorUid {
            get {
                XElement x = this.GetElement(VorUidXName);
                return ((VorUidType)(x));
            }
            set {
                this.SetElement(VorUidXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Type
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (VorUid, codeType, valAngleFm, valAngleTo, valDistInner, valDistVerLower)
        /// </para>
        /// </summary>
        public virtual codeTypeNavAidLimit codeType {
            get {
                XElement x = this.GetElement(codeTypeXName);
                return ((codeTypeNavAidLimit)(x));
            }
            set {
                this.SetElement(codeTypeXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Beginning of angle
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (VorUid, codeType, valAngleFm, valAngleTo, valDistInner, valDistVerLower)
        /// </para>
        /// </summary>
        public virtual valAngleBrg valAngleFm {
            get {
                XElement x = this.GetElement(valAngleFmXName);
                return ((valAngleBrg)(x));
            }
            set {
                this.SetElement(valAngleFmXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Ending of angle
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (VorUid, codeType, valAngleFm, valAngleTo, valDistInner, valDistVerLower)
        /// </para>
        /// </summary>
        public virtual valAngleBrg valAngleTo {
            get {
                XElement x = this.GetElement(valAngleToXName);
                return ((valAngleBrg)(x));
            }
            set {
                this.SetElement(valAngleToXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Angle sector volume inner limit
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (VorUid, codeType, valAngleFm, valAngleTo, valDistInner, valDistVerLower)
        /// </para>
        /// </summary>
        public virtual valDistHorz valDistInner {
            get {
                XElement x = this.GetElement(valDistInnerXName);
                return ((valDistHorz)(x));
            }
            set {
                this.SetElement(valDistInnerXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Lower limit
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (VorUid, codeType, valAngleFm, valAngleTo, valDistInner, valDistVerLower)
        /// </para>
        /// </summary>
        public virtual valDistVer valDistVerLower {
            get {
                XElement x = this.GetElement(valDistVerLowerXName);
                return ((valDistVer)(x));
            }
            set {
                this.SetElement(valDistVerLowerXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string mid {
            get {
                XAttribute x = this.Attribute(midXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(midXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<VorLimitationUidType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(VorUidXName, typeof(VorUidType));
            localElementDictionary.Add(codeTypeXName, typeof(codeTypeNavAidLimit));
            localElementDictionary.Add(valAngleFmXName, typeof(valAngleBrg));
            localElementDictionary.Add(valAngleToXName, typeof(valAngleBrg));
            localElementDictionary.Add(valDistInnerXName, typeof(valDistHorz));
            localElementDictionary.Add(valDistVerLowerXName, typeof(valDistVer));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// VOR
    /// </para>
    /// <para>
    /// Regular expression: (VorUid, OrgUid, SerUid?, txtName?, codeType, valFreq, uomFreq, codeTypeNorth, valDeclination?, valMagVar?, dateMagVar?, valMagVarChg?, codeEm?, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, valElev?, valElevAccuracy?, valGeoidUndulation?, uomDistVer?, valCrc?, txtVerDatum?, Vtt?, txtRmk?)
    /// </para>
    /// </summary>
    public partial class VorType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName VorUidXName = System.Xml.Linq.XName.Get("VorUid", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName OrgUidXName = System.Xml.Linq.XName.Get("OrgUid", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName SerUidXName = System.Xml.Linq.XName.Get("SerUid", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName txtNameXName = System.Xml.Linq.XName.Get("txtName", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName codeTypeXName = System.Xml.Linq.XName.Get("codeType", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName valFreqXName = System.Xml.Linq.XName.Get("valFreq", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName uomFreqXName = System.Xml.Linq.XName.Get("uomFreq", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName codeTypeNorthXName = System.Xml.Linq.XName.Get("codeTypeNorth", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName valDeclinationXName = System.Xml.Linq.XName.Get("valDeclination", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName valMagVarXName = System.Xml.Linq.XName.Get("valMagVar", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName dateMagVarXName = System.Xml.Linq.XName.Get("dateMagVar", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName valMagVarChgXName = System.Xml.Linq.XName.Get("valMagVarChg", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName codeEmXName = System.Xml.Linq.XName.Get("codeEm", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName codeDatumXName = System.Xml.Linq.XName.Get("codeDatum", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName valGeoAccuracyXName = System.Xml.Linq.XName.Get("valGeoAccuracy", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName uomGeoAccuracyXName = System.Xml.Linq.XName.Get("uomGeoAccuracy", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName valElevXName = System.Xml.Linq.XName.Get("valElev", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName valElevAccuracyXName = System.Xml.Linq.XName.Get("valElevAccuracy", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName valGeoidUndulationXName = System.Xml.Linq.XName.Get("valGeoidUndulation", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName uomDistVerXName = System.Xml.Linq.XName.Get("uomDistVer", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName valCrcXName = System.Xml.Linq.XName.Get("valCrc", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName txtVerDatumXName = System.Xml.Linq.XName.Get("txtVerDatum", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName VttXName = System.Xml.Linq.XName.Get("Vtt", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName txtRmkXName = System.Xml.Linq.XName.Get("txtRmk", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName sourceXName = System.Xml.Linq.XName.Get("source", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("VorType", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator VorType(XElement xe) { return XTypedServices.ToXTypedElement<VorType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static VorType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(VorUidXName), new NamedContentModelEntity(OrgUidXName), new NamedContentModelEntity(SerUidXName), new NamedContentModelEntity(txtNameXName), new NamedContentModelEntity(codeTypeXName), new NamedContentModelEntity(valFreqXName), new NamedContentModelEntity(uomFreqXName), new NamedContentModelEntity(codeTypeNorthXName), new NamedContentModelEntity(valDeclinationXName), new NamedContentModelEntity(valMagVarXName), new NamedContentModelEntity(dateMagVarXName), new NamedContentModelEntity(valMagVarChgXName), new NamedContentModelEntity(codeEmXName), new NamedContentModelEntity(codeDatumXName), new NamedContentModelEntity(valGeoAccuracyXName), new NamedContentModelEntity(uomGeoAccuracyXName), new NamedContentModelEntity(valElevXName), new NamedContentModelEntity(valElevAccuracyXName), new NamedContentModelEntity(valGeoidUndulationXName), new NamedContentModelEntity(uomDistVerXName), new NamedContentModelEntity(valCrcXName), new NamedContentModelEntity(txtVerDatumXName), new NamedContentModelEntity(VttXName), new NamedContentModelEntity(txtRmkXName));
        }
        
        /// <summary>
        /// <para>
        /// VOR
        /// </para>
        /// <para>
        /// Regular expression: (VorUid, OrgUid, SerUid?, txtName?, codeType, valFreq, uomFreq, codeTypeNorth, valDeclination?, valMagVar?, dateMagVar?, valMagVarChg?, codeEm?, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, valElev?, valElevAccuracy?, valGeoidUndulation?, uomDistVer?, valCrc?, txtVerDatum?, Vtt?, txtRmk?)
        /// </para>
        /// </summary>
        public VorType() {
        }
        
        /// <summary>
        /// <para>
        /// a version of VHF omnidirectional radio range beacon [VOR]
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (VorUid, OrgUid, SerUid?, txtName?, codeType, valFreq, uomFreq, codeTypeNorth, valDeclination?, valMagVar?, dateMagVar?, valMagVarChg?, codeEm?, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, valElev?, valElevAccuracy?, valGeoidUndulation?, uomDistVer?, valCrc?, txtVerDatum?, Vtt?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual VorUidType VorUid {
            get {
                XElement x = this.GetElement(VorUidXName);
                return ((VorUidType)(x));
            }
            set {
                this.SetElement(VorUidXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// VOR is under the responsibility of Organisaton or authority
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (VorUid, OrgUid, SerUid?, txtName?, codeType, valFreq, uomFreq, codeTypeNorth, valDeclination?, valMagVar?, dateMagVar?, valMagVarChg?, codeEm?, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, valElev?, valElevAccuracy?, valGeoidUndulation?, uomDistVer?, valCrc?, txtVerDatum?, Vtt?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual OrganisationAuthorityUidType OrgUid {
            get {
                XElement x = this.GetElement(OrgUidXName);
                return ((OrganisationAuthorityUidType)(x));
            }
            set {
                this.SetElement(OrgUidXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// VOR is also broadcasting Service
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (VorUid, OrgUid, SerUid?, txtName?, codeType, valFreq, uomFreq, codeTypeNorth, valDeclination?, valMagVar?, dateMagVar?, valMagVarChg?, codeEm?, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, valElev?, valElevAccuracy?, valGeoidUndulation?, uomDistVer?, valCrc?, txtVerDatum?, Vtt?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual ServiceUidType SerUid {
            get {
                XElement x = this.GetElement(SerUidXName);
                return ((ServiceUidType)(x));
            }
            set {
                this.SetElement(SerUidXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Name
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (VorUid, OrgUid, SerUid?, txtName?, codeType, valFreq, uomFreq, codeTypeNorth, valDeclination?, valMagVar?, dateMagVar?, valMagVarChg?, codeEm?, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, valElev?, valElevAccuracy?, valGeoidUndulation?, uomDistVer?, valCrc?, txtVerDatum?, Vtt?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual txtName txtName {
            get {
                XElement x = this.GetElement(txtNameXName);
                return ((txtName)(x));
            }
            set {
                this.SetElement(txtNameXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Type
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (VorUid, OrgUid, SerUid?, txtName?, codeType, valFreq, uomFreq, codeTypeNorth, valDeclination?, valMagVar?, dateMagVar?, valMagVarChg?, codeEm?, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, valElev?, valElevAccuracy?, valGeoidUndulation?, uomDistVer?, valCrc?, txtVerDatum?, Vtt?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual codeTypeVor codeType {
            get {
                XElement x = this.GetElement(codeTypeXName);
                return ((codeTypeVor)(x));
            }
            set {
                this.SetElement(codeTypeXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Frequency
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (VorUid, OrgUid, SerUid?, txtName?, codeType, valFreq, uomFreq, codeTypeNorth, valDeclination?, valMagVar?, dateMagVar?, valMagVarChg?, codeEm?, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, valElev?, valElevAccuracy?, valGeoidUndulation?, uomDistVer?, valCrc?, txtVerDatum?, Vtt?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual valFreq valFreq {
            get {
                XElement x = this.GetElement(valFreqXName);
                return ((valFreq)(x));
            }
            set {
                this.SetElement(valFreqXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Unit of measurement [frequency]
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (VorUid, OrgUid, SerUid?, txtName?, codeType, valFreq, uomFreq, codeTypeNorth, valDeclination?, valMagVar?, dateMagVar?, valMagVarChg?, codeEm?, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, valElev?, valElevAccuracy?, valGeoidUndulation?, uomDistVer?, valCrc?, txtVerDatum?, Vtt?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual uomFreq uomFreq {
            get {
                XElement x = this.GetElement(uomFreqXName);
                return ((uomFreq)(x));
            }
            set {
                this.SetElement(uomFreqXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// North reference
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (VorUid, OrgUid, SerUid?, txtName?, codeType, valFreq, uomFreq, codeTypeNorth, valDeclination?, valMagVar?, dateMagVar?, valMagVarChg?, codeEm?, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, valElev?, valElevAccuracy?, valGeoidUndulation?, uomDistVer?, valCrc?, txtVerDatum?, Vtt?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual codeTypeNorth codeTypeNorth {
            get {
                XElement x = this.GetElement(codeTypeNorthXName);
                return ((codeTypeNorth)(x));
            }
            set {
                this.SetElement(codeTypeNorthXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Station declination
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (VorUid, OrgUid, SerUid?, txtName?, codeType, valFreq, uomFreq, codeTypeNorth, valDeclination?, valMagVar?, dateMagVar?, valMagVarChg?, codeEm?, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, valElev?, valElevAccuracy?, valGeoidUndulation?, uomDistVer?, valCrc?, txtVerDatum?, Vtt?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual valAngleMagVar valDeclination {
            get {
                XElement x = this.GetElement(valDeclinationXName);
                return ((valAngleMagVar)(x));
            }
            set {
                this.SetElement(valDeclinationXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Magnetic variation
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (VorUid, OrgUid, SerUid?, txtName?, codeType, valFreq, uomFreq, codeTypeNorth, valDeclination?, valMagVar?, dateMagVar?, valMagVarChg?, codeEm?, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, valElev?, valElevAccuracy?, valGeoidUndulation?, uomDistVer?, valCrc?, txtVerDatum?, Vtt?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual valAngleMagVar valMagVar {
            get {
                XElement x = this.GetElement(valMagVarXName);
                return ((valAngleMagVar)(x));
            }
            set {
                this.SetElement(valMagVarXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Magnetic variation date
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (VorUid, OrgUid, SerUid?, txtName?, codeType, valFreq, uomFreq, codeTypeNorth, valDeclination?, valMagVar?, dateMagVar?, valMagVarChg?, codeEm?, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, valElev?, valElevAccuracy?, valGeoidUndulation?, uomDistVer?, valCrc?, txtVerDatum?, Vtt?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual dateYear dateMagVar {
            get {
                XElement x = this.GetElement(dateMagVarXName);
                return ((dateYear)(x));
            }
            set {
                this.SetElement(dateMagVarXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Annual rate of change of magnetic variation
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (VorUid, OrgUid, SerUid?, txtName?, codeType, valFreq, uomFreq, codeTypeNorth, valDeclination?, valMagVar?, dateMagVar?, valMagVarChg?, codeEm?, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, valElev?, valElevAccuracy?, valGeoidUndulation?, uomDistVer?, valCrc?, txtVerDatum?, Vtt?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual valAngleMagVarChg valMagVarChg {
            get {
                XElement x = this.GetElement(valMagVarChgXName);
                return ((valAngleMagVarChg)(x));
            }
            set {
                this.SetElement(valMagVarChgXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Emission
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (VorUid, OrgUid, SerUid?, txtName?, codeType, valFreq, uomFreq, codeTypeNorth, valDeclination?, valMagVar?, dateMagVar?, valMagVarChg?, codeEm?, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, valElev?, valElevAccuracy?, valGeoidUndulation?, uomDistVer?, valCrc?, txtVerDatum?, Vtt?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual codeEmRdo codeEm {
            get {
                XElement x = this.GetElement(codeEmXName);
                return ((codeEmRdo)(x));
            }
            set {
                this.SetElement(codeEmXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Datum
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (VorUid, OrgUid, SerUid?, txtName?, codeType, valFreq, uomFreq, codeTypeNorth, valDeclination?, valMagVar?, dateMagVar?, valMagVarChg?, codeEm?, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, valElev?, valElevAccuracy?, valGeoidUndulation?, uomDistVer?, valCrc?, txtVerDatum?, Vtt?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual codeDatum codeDatum {
            get {
                XElement x = this.GetElement(codeDatumXName);
                return ((codeDatum)(x));
            }
            set {
                this.SetElement(codeDatumXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Geographical accuracy
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (VorUid, OrgUid, SerUid?, txtName?, codeType, valFreq, uomFreq, codeTypeNorth, valDeclination?, valMagVar?, dateMagVar?, valMagVarChg?, codeEm?, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, valElev?, valElevAccuracy?, valGeoidUndulation?, uomDistVer?, valCrc?, txtVerDatum?, Vtt?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual valDistHorz valGeoAccuracy {
            get {
                XElement x = this.GetElement(valGeoAccuracyXName);
                return ((valDistHorz)(x));
            }
            set {
                this.SetElement(valGeoAccuracyXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Unit of measurement [geographical accuracy]
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (VorUid, OrgUid, SerUid?, txtName?, codeType, valFreq, uomFreq, codeTypeNorth, valDeclination?, valMagVar?, dateMagVar?, valMagVarChg?, codeEm?, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, valElev?, valElevAccuracy?, valGeoidUndulation?, uomDistVer?, valCrc?, txtVerDatum?, Vtt?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual uomDistHorz uomGeoAccuracy {
            get {
                XElement x = this.GetElement(uomGeoAccuracyXName);
                return ((uomDistHorz)(x));
            }
            set {
                this.SetElement(uomGeoAccuracyXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Elevation
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (VorUid, OrgUid, SerUid?, txtName?, codeType, valFreq, uomFreq, codeTypeNorth, valDeclination?, valMagVar?, dateMagVar?, valMagVarChg?, codeEm?, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, valElev?, valElevAccuracy?, valGeoidUndulation?, uomDistVer?, valCrc?, txtVerDatum?, Vtt?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual valDistVer valElev {
            get {
                XElement x = this.GetElement(valElevXName);
                return ((valDistVer)(x));
            }
            set {
                this.SetElement(valElevXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Elevation accuracy
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (VorUid, OrgUid, SerUid?, txtName?, codeType, valFreq, uomFreq, codeTypeNorth, valDeclination?, valMagVar?, dateMagVar?, valMagVarChg?, codeEm?, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, valElev?, valElevAccuracy?, valGeoidUndulation?, uomDistVer?, valCrc?, txtVerDatum?, Vtt?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual valDistVer valElevAccuracy {
            get {
                XElement x = this.GetElement(valElevAccuracyXName);
                return ((valDistVer)(x));
            }
            set {
                this.SetElement(valElevAccuracyXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Geoid undulation
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (VorUid, OrgUid, SerUid?, txtName?, codeType, valFreq, uomFreq, codeTypeNorth, valDeclination?, valMagVar?, dateMagVar?, valMagVarChg?, codeEm?, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, valElev?, valElevAccuracy?, valGeoidUndulation?, uomDistVer?, valCrc?, txtVerDatum?, Vtt?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual valDistVer valGeoidUndulation {
            get {
                XElement x = this.GetElement(valGeoidUndulationXName);
                return ((valDistVer)(x));
            }
            set {
                this.SetElement(valGeoidUndulationXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Unit of measurement [vertical distance]
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (VorUid, OrgUid, SerUid?, txtName?, codeType, valFreq, uomFreq, codeTypeNorth, valDeclination?, valMagVar?, dateMagVar?, valMagVarChg?, codeEm?, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, valElev?, valElevAccuracy?, valGeoidUndulation?, uomDistVer?, valCrc?, txtVerDatum?, Vtt?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual uomElev uomDistVer {
            get {
                XElement x = this.GetElement(uomDistVerXName);
                return ((uomElev)(x));
            }
            set {
                this.SetElement(uomDistVerXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Cyclic redundancy check
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (VorUid, OrgUid, SerUid?, txtName?, codeType, valFreq, uomFreq, codeTypeNorth, valDeclination?, valMagVar?, dateMagVar?, valMagVarChg?, codeEm?, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, valElev?, valElevAccuracy?, valGeoidUndulation?, uomDistVer?, valCrc?, txtVerDatum?, Vtt?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual valHex valCrc {
            get {
                XElement x = this.GetElement(valCrcXName);
                return ((valHex)(x));
            }
            set {
                this.SetElement(valCrcXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Vertical Datum
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (VorUid, OrgUid, SerUid?, txtName?, codeType, valFreq, uomFreq, codeTypeNorth, valDeclination?, valMagVar?, dateMagVar?, valMagVarChg?, codeEm?, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, valElev?, valElevAccuracy?, valGeoidUndulation?, uomDistVer?, valCrc?, txtVerDatum?, Vtt?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual txtDescr txtVerDatum {
            get {
                XElement x = this.GetElement(txtVerDatumXName);
                return ((txtDescr)(x));
            }
            set {
                this.SetElement(txtVerDatumXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// VOR is operating according to VOR - Timetable
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (VorUid, OrgUid, SerUid?, txtName?, codeType, valFreq, uomFreq, codeTypeNorth, valDeclination?, valMagVar?, dateMagVar?, valMagVarChg?, codeEm?, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, valElev?, valElevAccuracy?, valGeoidUndulation?, uomDistVer?, valCrc?, txtVerDatum?, Vtt?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual TimetableNavaidType Vtt {
            get {
                XElement x = this.GetElement(VttXName);
                return ((TimetableNavaidType)(x));
            }
            set {
                this.SetElement(VttXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Remark
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (VorUid, OrgUid, SerUid?, txtName?, codeType, valFreq, uomFreq, codeTypeNorth, valDeclination?, valMagVar?, dateMagVar?, valMagVarChg?, codeEm?, codeDatum, valGeoAccuracy?, uomGeoAccuracy?, valElev?, valElevAccuracy?, valGeoidUndulation?, uomDistVer?, valCrc?, txtVerDatum?, Vtt?, txtRmk?)
        /// </para>
        /// </summary>
        public virtual txtRmk txtRmk {
            get {
                XElement x = this.GetElement(txtRmkXName);
                return ((txtRmk)(x));
            }
            set {
                this.SetElement(txtRmkXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string source {
            get {
                XAttribute x = this.Attribute(sourceXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(sourceXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<VorType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(VorUidXName, typeof(VorUidType));
            localElementDictionary.Add(OrgUidXName, typeof(OrganisationAuthorityUidType));
            localElementDictionary.Add(SerUidXName, typeof(ServiceUidType));
            localElementDictionary.Add(txtNameXName, typeof(txtName));
            localElementDictionary.Add(codeTypeXName, typeof(codeTypeVor));
            localElementDictionary.Add(valFreqXName, typeof(valFreq));
            localElementDictionary.Add(uomFreqXName, typeof(uomFreq));
            localElementDictionary.Add(codeTypeNorthXName, typeof(codeTypeNorth));
            localElementDictionary.Add(valDeclinationXName, typeof(valAngleMagVar));
            localElementDictionary.Add(valMagVarXName, typeof(valAngleMagVar));
            localElementDictionary.Add(dateMagVarXName, typeof(dateYear));
            localElementDictionary.Add(valMagVarChgXName, typeof(valAngleMagVarChg));
            localElementDictionary.Add(codeEmXName, typeof(codeEmRdo));
            localElementDictionary.Add(codeDatumXName, typeof(codeDatum));
            localElementDictionary.Add(valGeoAccuracyXName, typeof(valDistHorz));
            localElementDictionary.Add(uomGeoAccuracyXName, typeof(uomDistHorz));
            localElementDictionary.Add(valElevXName, typeof(valDistVer));
            localElementDictionary.Add(valElevAccuracyXName, typeof(valDistVer));
            localElementDictionary.Add(valGeoidUndulationXName, typeof(valDistVer));
            localElementDictionary.Add(uomDistVerXName, typeof(uomElev));
            localElementDictionary.Add(valCrcXName, typeof(valHex));
            localElementDictionary.Add(txtVerDatumXName, typeof(txtDescr));
            localElementDictionary.Add(VttXName, typeof(TimetableNavaidType));
            localElementDictionary.Add(txtRmkXName, typeof(txtRmk));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// VHF omnidirectional radio range beacon [VOR] - UID
    /// </para>
    /// <para>
    /// Regular expression: (codeId, geoLat, geoLong)
    /// </para>
    /// </summary>
    public partial class VorUidType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName codeIdXName = System.Xml.Linq.XName.Get("codeId", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName geoLatXName = System.Xml.Linq.XName.Get("geoLat", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName geoLongXName = System.Xml.Linq.XName.Get("geoLong", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName midXName = System.Xml.Linq.XName.Get("mid", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName regionXName = System.Xml.Linq.XName.Get("region", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("VorUidType", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator VorUidType(XElement xe) { return XTypedServices.ToXTypedElement<VorUidType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static VorUidType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(codeIdXName), new NamedContentModelEntity(geoLatXName), new NamedContentModelEntity(geoLongXName));
        }
        
        /// <summary>
        /// <para>
        /// VHF omnidirectional radio range beacon [VOR] - UID
        /// </para>
        /// <para>
        /// Regular expression: (codeId, geoLat, geoLong)
        /// </para>
        /// </summary>
        public VorUidType() {
        }
        
        /// <summary>
        /// <para>
        /// Identification
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (codeId, geoLat, geoLong)
        /// </para>
        /// </summary>
        public virtual codeIdNavAid codeId {
            get {
                XElement x = this.GetElement(codeIdXName);
                return ((codeIdNavAid)(x));
            }
            set {
                this.SetElement(codeIdXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Latitude
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (codeId, geoLat, geoLong)
        /// </para>
        /// </summary>
        public virtual geoLat geoLat {
            get {
                XElement x = this.GetElement(geoLatXName);
                return ((geoLat)(x));
            }
            set {
                this.SetElement(geoLatXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Longitude
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (codeId, geoLat, geoLong)
        /// </para>
        /// </summary>
        public virtual geoLong geoLong {
            get {
                XElement x = this.GetElement(geoLongXName);
                return ((geoLong)(x));
            }
            set {
                this.SetElement(geoLongXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string mid {
            get {
                XAttribute x = this.Attribute(midXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(midXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual string region {
            get {
                XAttribute x = this.Attribute(regionXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(regionXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<VorUidType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(codeIdXName, typeof(codeIdNavAid));
            localElementDictionary.Add(geoLatXName, typeof(geoLat));
            localElementDictionary.Add(geoLongXName, typeof(geoLong));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// VOR usage limitation
    /// </para>
    /// <para>
    /// Regular expression: (VliUid, txtRmk?, UsageLimit*)
    /// </para>
    /// </summary>
    public partial class VorUsageLimitationType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName VliUidXName = System.Xml.Linq.XName.Get("VliUid", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName txtRmkXName = System.Xml.Linq.XName.Get("txtRmk", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName UsageLimitXName = System.Xml.Linq.XName.Get("UsageLimit", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<NavaidLimitationType> UsageLimitField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName sourceXName = System.Xml.Linq.XName.Get("source", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("VorUsageLimitationType", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator VorUsageLimitationType(XElement xe) { return XTypedServices.ToXTypedElement<VorUsageLimitationType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static VorUsageLimitationType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(VliUidXName), new NamedContentModelEntity(txtRmkXName), new NamedContentModelEntity(UsageLimitXName));
        }
        
        /// <summary>
        /// <para>
        /// VOR usage limitation
        /// </para>
        /// <para>
        /// Regular expression: (VliUid, txtRmk?, UsageLimit*)
        /// </para>
        /// </summary>
        public VorUsageLimitationType() {
        }
        
        /// <summary>
        /// <para>
        /// VOR usage limitation - Uid
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (VliUid, txtRmk?, UsageLimit*)
        /// </para>
        /// </summary>
        public virtual VorUsageLimitationUidType VliUid {
            get {
                XElement x = this.GetElement(VliUidXName);
                return ((VorUsageLimitationUidType)(x));
            }
            set {
                this.SetElement(VliUidXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Remarks
        /// </para>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (VliUid, txtRmk?, UsageLimit*)
        /// </para>
        /// </summary>
        public virtual txtRmk txtRmk {
            get {
                XElement x = this.GetElement(txtRmkXName);
                return ((txtRmk)(x));
            }
            set {
                this.SetElement(txtRmkXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (VliUid, txtRmk?, UsageLimit*)
        /// </para>
        /// </summary>
        public virtual IList<NavaidLimitationType> UsageLimit {
            get {
                if ((this.UsageLimitField == null)) {
                    this.UsageLimitField = new XTypedList<NavaidLimitationType>(this, LinqToXsdTypeManager.Instance, UsageLimitXName);
                }
                return this.UsageLimitField;
            }
            set {
                if ((value == null)) {
                    this.UsageLimitField = null;
                }
                else {
                    if ((this.UsageLimitField == null)) {
                        this.UsageLimitField = XTypedList<NavaidLimitationType>.Initialize(this, LinqToXsdTypeManager.Instance, value, UsageLimitXName);
                    }
                    else {
                        XTypedServices.SetList<NavaidLimitationType>(this.UsageLimitField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string source {
            get {
                XAttribute x = this.Attribute(sourceXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(sourceXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<VorUsageLimitationType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(VliUidXName, typeof(VorUsageLimitationUidType));
            localElementDictionary.Add(txtRmkXName, typeof(txtRmk));
            localElementDictionary.Add(UsageLimitXName, typeof(NavaidLimitationType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// VOR Usage Limitation - UID
    /// </para>
    /// <para>
    /// Regular expression: (VorUid, codeType)
    /// </para>
    /// </summary>
    public partial class VorUsageLimitationUidType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName VorUidXName = System.Xml.Linq.XName.Get("VorUid", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName codeTypeXName = System.Xml.Linq.XName.Get("codeType", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName midXName = System.Xml.Linq.XName.Get("mid", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("VorUsageLimitationUidType", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator VorUsageLimitationUidType(XElement xe) { return XTypedServices.ToXTypedElement<VorUsageLimitationUidType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static VorUsageLimitationUidType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(VorUidXName), new NamedContentModelEntity(codeTypeXName));
        }
        
        /// <summary>
        /// <para>
        /// VOR Usage Limitation - UID
        /// </para>
        /// <para>
        /// Regular expression: (VorUid, codeType)
        /// </para>
        /// </summary>
        public VorUsageLimitationUidType() {
        }
        
        /// <summary>
        /// <para>
        /// VOR Usage Limitation is limiting the use of one VOR
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (VorUid, codeType)
        /// </para>
        /// </summary>
        public virtual VorUidType VorUid {
            get {
                XElement x = this.GetElement(VorUidXName);
                return ((VorUidType)(x));
            }
            set {
                this.SetElement(VorUidXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Limitation type
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (VorUid, codeType)
        /// </para>
        /// </summary>
        public virtual codeTypeNavAidLimit codeType {
            get {
                XElement x = this.GetElement(codeTypeXName);
                return ((codeTypeNavAidLimit)(x));
            }
            set {
                this.SetElement(codeTypeXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string mid {
            get {
                XAttribute x = this.Attribute(midXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(midXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<VorUsageLimitationUidType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(VorUidXName, typeof(VorUidType));
            localElementDictionary.Add(codeTypeXName, typeof(codeTypeNavAidLimit));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Label marker
    /// </para>
    /// <para>
    /// Regular expression: (LbmUid, txtValueLabel, geoLat, geoLong, codeDatum, ZoomLevel+)
    /// </para>
    /// </summary>
    public partial class LabelMarkerType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName LbmUidXName = System.Xml.Linq.XName.Get("LbmUid", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName txtValueLabelXName = System.Xml.Linq.XName.Get("txtValueLabel", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName geoLatXName = System.Xml.Linq.XName.Get("geoLat", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName geoLongXName = System.Xml.Linq.XName.Get("geoLong", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName codeDatumXName = System.Xml.Linq.XName.Get("codeDatum", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ZoomLevelXName = System.Xml.Linq.XName.Get("ZoomLevel", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ZoomLevelLocalType> ZoomLevelField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName sourceXName = System.Xml.Linq.XName.Get("source", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("LabelMarkerType", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator LabelMarkerType(XElement xe) { return XTypedServices.ToXTypedElement<LabelMarkerType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static LabelMarkerType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(LbmUidXName), new NamedContentModelEntity(txtValueLabelXName), new NamedContentModelEntity(geoLatXName), new NamedContentModelEntity(geoLongXName), new NamedContentModelEntity(codeDatumXName), new NamedContentModelEntity(ZoomLevelXName));
        }
        
        /// <summary>
        /// <para>
        /// Label marker
        /// </para>
        /// <para>
        /// Regular expression: (LbmUid, txtValueLabel, geoLat, geoLong, codeDatum, ZoomLevel+)
        /// </para>
        /// </summary>
        public LabelMarkerType() {
        }
        
        /// <summary>
        /// <para>
        /// a version of label marker
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (LbmUid, txtValueLabel, geoLat, geoLong, codeDatum, ZoomLevel+)
        /// </para>
        /// </summary>
        public virtual LabelMarkerUidType LbmUid {
            get {
                XElement x = this.GetElement(LbmUidXName);
                return ((LabelMarkerUidType)(x));
            }
            set {
                this.SetElement(LbmUidXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Name
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (LbmUid, txtValueLabel, geoLat, geoLong, codeDatum, ZoomLevel+)
        /// </para>
        /// </summary>
        public virtual txtRmk txtValueLabel {
            get {
                XElement x = this.GetElement(txtValueLabelXName);
                return ((txtRmk)(x));
            }
            set {
                this.SetElement(txtValueLabelXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Latitude
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (LbmUid, txtValueLabel, geoLat, geoLong, codeDatum, ZoomLevel+)
        /// </para>
        /// </summary>
        public virtual geoLat geoLat {
            get {
                XElement x = this.GetElement(geoLatXName);
                return ((geoLat)(x));
            }
            set {
                this.SetElement(geoLatXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Longitude
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (LbmUid, txtValueLabel, geoLat, geoLong, codeDatum, ZoomLevel+)
        /// </para>
        /// </summary>
        public virtual geoLong geoLong {
            get {
                XElement x = this.GetElement(geoLongXName);
                return ((geoLong)(x));
            }
            set {
                this.SetElement(geoLongXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Datum
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (LbmUid, txtValueLabel, geoLat, geoLong, codeDatum, ZoomLevel+)
        /// </para>
        /// </summary>
        public virtual codeDatum codeDatum {
            get {
                XElement x = this.GetElement(codeDatumXName);
                return ((codeDatum)(x));
            }
            set {
                this.SetElement(codeDatumXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Divergent position and label value based on the zoom level.
        /// </para>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (LbmUid, txtValueLabel, geoLat, geoLong, codeDatum, ZoomLevel+)
        /// </para>
        /// </summary>
        public virtual IList<OFMX.LabelMarkerType.ZoomLevelLocalType> ZoomLevel {
            get {
                if ((this.ZoomLevelField == null)) {
                    this.ZoomLevelField = new XTypedList<ZoomLevelLocalType>(this, LinqToXsdTypeManager.Instance, ZoomLevelXName);
                }
                return this.ZoomLevelField;
            }
            set {
                if ((value == null)) {
                    this.ZoomLevelField = null;
                }
                else {
                    if ((this.ZoomLevelField == null)) {
                        this.ZoomLevelField = XTypedList<ZoomLevelLocalType>.Initialize(this, LinqToXsdTypeManager.Instance, value, ZoomLevelXName);
                    }
                    else {
                        XTypedServices.SetList<ZoomLevelLocalType>(this.ZoomLevelField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string source {
            get {
                XAttribute x = this.Attribute(sourceXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(sourceXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<LabelMarkerType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(LbmUidXName, typeof(LabelMarkerUidType));
            localElementDictionary.Add(txtValueLabelXName, typeof(txtRmk));
            localElementDictionary.Add(geoLatXName, typeof(geoLat));
            localElementDictionary.Add(geoLongXName, typeof(geoLong));
            localElementDictionary.Add(codeDatumXName, typeof(codeDatum));
            localElementDictionary.Add(ZoomLevelXName, typeof(ZoomLevelLocalType));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (valZoomLevel, txtValueLabel?, geoLat?, geoLong?)
        /// </para>
        /// </summary>
        public partial class ZoomLevelLocalType : XTypedElement, IXMetaData {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName valZoomLevelXName = System.Xml.Linq.XName.Get("valZoomLevel", "");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName txtValueLabelXName = System.Xml.Linq.XName.Get("txtValueLabel", "");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName geoLatXName = System.Xml.Linq.XName.Get("geoLat", "");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            [EditorBrowsable(EditorBrowsableState.Never)]
            internal static readonly System.Xml.Linq.XName geoLongXName = System.Xml.Linq.XName.Get("geoLong", "");
            
            private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("ZoomLevel", "");
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            private static ContentModelEntity contentModel;
            
		public static explicit operator ZoomLevelLocalType(XElement xe) { return XTypedServices.ToXTypedElement<ZoomLevelLocalType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
            
            static ZoomLevelLocalType() {
                BuildElementDictionary();
                contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(valZoomLevelXName), new NamedContentModelEntity(txtValueLabelXName), new NamedContentModelEntity(geoLatXName), new NamedContentModelEntity(geoLongXName));
            }
            
            /// <summary>
            /// <para>
            /// Regular expression: (valZoomLevel, txtValueLabel?, geoLat?, geoLong?)
            /// </para>
            /// </summary>
            public ZoomLevelLocalType() {
            }
            
            /// <summary>
            /// <para>
            /// Zoom level
            /// </para>
            /// <para>
            /// Occurrence: required
            /// </para>
            /// <para>
            /// Regular expression: (valZoomLevel, txtValueLabel?, geoLat?, geoLong?)
            /// </para>
            /// </summary>
            public virtual valZoomLevel valZoomLevel {
                get {
                    XElement x = this.GetElement(valZoomLevelXName);
                    return ((valZoomLevel)(x));
                }
                set {
                    this.SetElement(valZoomLevelXName, value);
                }
            }
            
            /// <summary>
            /// <para>
            /// Name
            /// </para>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (valZoomLevel, txtValueLabel?, geoLat?, geoLong?)
            /// </para>
            /// </summary>
            public virtual txtRmk txtValueLabel {
                get {
                    XElement x = this.GetElement(txtValueLabelXName);
                    return ((txtRmk)(x));
                }
                set {
                    this.SetElement(txtValueLabelXName, value);
                }
            }
            
            /// <summary>
            /// <para>
            /// Latitude
            /// </para>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (valZoomLevel, txtValueLabel?, geoLat?, geoLong?)
            /// </para>
            /// </summary>
            public virtual geoLat geoLat {
                get {
                    XElement x = this.GetElement(geoLatXName);
                    return ((geoLat)(x));
                }
                set {
                    this.SetElement(geoLatXName, value);
                }
            }
            
            /// <summary>
            /// <para>
            /// Longitude
            /// </para>
            /// <para>
            /// Occurrence: optional
            /// </para>
            /// <para>
            /// Regular expression: (valZoomLevel, txtValueLabel?, geoLat?, geoLong?)
            /// </para>
            /// </summary>
            public virtual geoLong geoLong {
                get {
                    XElement x = this.GetElement(geoLongXName);
                    return ((geoLong)(x));
                }
                set {
                    this.SetElement(geoLongXName, value);
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
                get {
                    return localElementDictionary;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            System.Xml.Linq.XName IXMetaData.SchemaName {
                get {
                    return xName;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            SchemaOrigin IXMetaData.TypeOrigin {
                get {
                    return SchemaOrigin.Fragment;
                }
            }
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            ILinqToXsdTypeManager IXMetaData.TypeManager {
                get {
                    return LinqToXsdTypeManager.Instance;
                }
            }
            
            public override XTypedElement Clone() {
                return XTypedServices.CloneXTypedElement<ZoomLevelLocalType>(this);
            }
            
            private static void BuildElementDictionary() {
                localElementDictionary.Add(valZoomLevelXName, typeof(valZoomLevel));
                localElementDictionary.Add(txtValueLabelXName, typeof(txtRmk));
                localElementDictionary.Add(geoLatXName, typeof(geoLat));
                localElementDictionary.Add(geoLongXName, typeof(geoLong));
            }
            
            ContentModelEntity IXMetaData.GetContentModel() {
                return contentModel;
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Label marker - UID
    /// </para>
    /// <para>
    /// Regular expression: (codeType, txtName)
    /// </para>
    /// </summary>
    public partial class LabelMarkerUidType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName codeTypeXName = System.Xml.Linq.XName.Get("codeType", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName txtNameXName = System.Xml.Linq.XName.Get("txtName", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName midXName = System.Xml.Linq.XName.Get("mid", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName regionXName = System.Xml.Linq.XName.Get("region", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("LabelMarkerUidType", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator LabelMarkerUidType(XElement xe) { return XTypedServices.ToXTypedElement<LabelMarkerUidType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static LabelMarkerUidType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(codeTypeXName), new NamedContentModelEntity(txtNameXName));
        }
        
        /// <summary>
        /// <para>
        /// Label marker - UID
        /// </para>
        /// <para>
        /// Regular expression: (codeType, txtName)
        /// </para>
        /// </summary>
        public LabelMarkerUidType() {
        }
        
        /// <summary>
        /// <para>
        /// Type
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (codeType, txtName)
        /// </para>
        /// </summary>
        public virtual codeTypeLabelMarker codeType {
            get {
                XElement x = this.GetElement(codeTypeXName);
                return ((codeTypeLabelMarker)(x));
            }
            set {
                this.SetElement(codeTypeXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Name
        /// </para>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (codeType, txtName)
        /// </para>
        /// </summary>
        public virtual txtName txtName {
            get {
                XElement x = this.GetElement(txtNameXName);
                return ((txtName)(x));
            }
            set {
                this.SetElement(txtNameXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string mid {
            get {
                XAttribute x = this.Attribute(midXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(midXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual string region {
            get {
                XAttribute x = this.Attribute(regionXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(regionXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<LabelMarkerUidType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(codeTypeXName, typeof(codeTypeLabelMarker));
            localElementDictionary.Add(txtNameXName, typeof(txtName));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    public class LinqToXsdTypeManager : ILinqToXsdTypeManager {
        
        private static Dictionary<System.Xml.Linq.XName, System.Type> typeDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        private static Dictionary<System.Xml.Linq.XName, System.Type> elementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        private static XmlSchemaSet schemaSet;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static LinqToXsdTypeManager typeManagerSingleton = new LinqToXsdTypeManager();
        
        static LinqToXsdTypeManager() {
            BuildTypeDictionary();
            BuildElementDictionary();
        }
        
        private LinqToXsdTypeManager() {
        }
        
        XmlSchemaSet ILinqToXsdTypeManager.Schemas {
            get {
                if ((schemaSet == null)) {
                    XmlSchemaSet tempSet = new XmlSchemaSet();
                    System.Threading.Interlocked.CompareExchange(ref schemaSet, tempSet, null);
                }
                return schemaSet;
            }
            set {
                schemaSet = value;
            }
        }
        
        Dictionary<System.Xml.Linq.XName, System.Type> ILinqToXsdTypeManager.GlobalTypeDictionary {
            get {
                return typeDictionary;
            }
        }
        
        Dictionary<System.Xml.Linq.XName, System.Type> ILinqToXsdTypeManager.GlobalElementDictionary {
            get {
                return elementDictionary;
            }
        }
        
        Dictionary<System.Type, System.Type> ILinqToXsdTypeManager.RootContentTypeMapping {
            get {
                return XTypedServices.EmptyTypeMappingDictionary;
            }
        }
        
        public static LinqToXsdTypeManager Instance {
            get {
                return typeManagerSingleton;
            }
        }
        
        private static void BuildTypeDictionary() {
            typeDictionary.Add(System.Xml.Linq.XName.Get("codeAcftEngineNo", ""), typeof(global::OFMX.codeAcftEngineNo));
            typeDictionary.Add(System.Xml.Linq.XName.Get("codeActivity", ""), typeof(global::OFMX.codeActivity));
            typeDictionary.Add(System.Xml.Linq.XName.Get("codeCatAcft", ""), typeof(global::OFMX.codeCatAcft));
            typeDictionary.Add(System.Xml.Linq.XName.Get("codeCatFireAd", ""), typeof(global::OFMX.codeCatFireAd));
            typeDictionary.Add(System.Xml.Linq.XName.Get("codeCatFuel", ""), typeof(global::OFMX.codeCatFuel));
            typeDictionary.Add(System.Xml.Linq.XName.Get("codeCatLdgAid", ""), typeof(global::OFMX.codeCatLdgAid));
            typeDictionary.Add(System.Xml.Linq.XName.Get("codeCatOil", ""), typeof(global::OFMX.codeCatOil));
            typeDictionary.Add(System.Xml.Linq.XName.Get("codeChannelDme", ""), typeof(global::OFMX.codeChannelDme));
            typeDictionary.Add(System.Xml.Linq.XName.Get("codeChannelMls", ""), typeof(global::OFMX.codeChannelMls));
            typeDictionary.Add(System.Xml.Linq.XName.Get("codeChannelTacan", ""), typeof(global::OFMX.codeChannelTacan));
            typeDictionary.Add(System.Xml.Linq.XName.Get("codeCivRte", ""), typeof(global::OFMX.codeCivRte));
            typeDictionary.Add(System.Xml.Linq.XName.Get("codeClassAcft", ""), typeof(global::OFMX.codeClassAcft));
            typeDictionary.Add(System.Xml.Linq.XName.Get("codeClassAs", ""), typeof(global::OFMX.codeClassAs));
            typeDictionary.Add(System.Xml.Linq.XName.Get("codeClassHel", ""), typeof(global::OFMX.codeClassHel));
            typeDictionary.Add(System.Xml.Linq.XName.Get("codeClassMkr", ""), typeof(global::OFMX.codeClassMkr));
            typeDictionary.Add(System.Xml.Linq.XName.Get("codeClassNdb", ""), typeof(global::OFMX.codeClassNdb));
            typeDictionary.Add(System.Xml.Linq.XName.Get("codeClassUnit", ""), typeof(global::OFMX.codeClassUnit));
            typeDictionary.Add(System.Xml.Linq.XName.Get("codeColour", ""), typeof(global::OFMX.codeColour));
            typeDictionary.Add(System.Xml.Linq.XName.Get("codeCombTimeEvent", ""), typeof(global::OFMX.codeCombTimeEvent));
            typeDictionary.Add(System.Xml.Linq.XName.Get("codeComparison", ""), typeof(global::OFMX.codeComparison));
            typeDictionary.Add(System.Xml.Linq.XName.Get("codeComponentTacan", ""), typeof(global::OFMX.codeComponentTacan));
            typeDictionary.Add(System.Xml.Linq.XName.Get("codeCompositionSfc", ""), typeof(global::OFMX.codeCompositionSfc));
            typeDictionary.Add(System.Xml.Linq.XName.Get("codeCondSfc", ""), typeof(global::OFMX.codeCondSfc));
            typeDictionary.Add(System.Xml.Linq.XName.Get("codeDatum", ""), typeof(global::OFMX.codeDatum));
            typeDictionary.Add(System.Xml.Linq.XName.Get("codeDay", ""), typeof(global::OFMX.codeDay));
            typeDictionary.Add(System.Xml.Linq.XName.Get("codeDayPeriod", ""), typeof(global::OFMX.codeDayPeriod));
            typeDictionary.Add(System.Xml.Linq.XName.Get("codeDescrDistVer", ""), typeof(global::OFMX.codeDescrDistVer));
            typeDictionary.Add(System.Xml.Linq.XName.Get("codeDir", ""), typeof(global::OFMX.codeDir));
            typeDictionary.Add(System.Xml.Linq.XName.Get("codeDirRef", ""), typeof(global::OFMX.codeDirRef));
            typeDictionary.Add(System.Xml.Linq.XName.Get("codeDirTurn", ""), typeof(global::OFMX.codeDirTurn));
            typeDictionary.Add(System.Xml.Linq.XName.Get("codeDistVer", ""), typeof(global::OFMX.codeDistVer));
            typeDictionary.Add(System.Xml.Linq.XName.Get("codeEmRdo", ""), typeof(global::OFMX.codeEmRdo));
            typeDictionary.Add(System.Xml.Linq.XName.Get("codeFltStatus", ""), typeof(global::OFMX.codeFltStatus));
            typeDictionary.Add(System.Xml.Linq.XName.Get("codeFltType", ""), typeof(global::OFMX.codeFltType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("codeIapFix", ""), typeof(global::OFMX.codeIapFix));
            typeDictionary.Add(System.Xml.Linq.XName.Get("codeIcaoAircraftType", ""), typeof(global::OFMX.codeIcaoAircraftType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("codeIdAdHp", ""), typeof(global::OFMX.codeIdAdHp));
            typeDictionary.Add(System.Xml.Linq.XName.Get("codeIdAs", ""), typeof(global::OFMX.codeIdAs));
            typeDictionary.Add(System.Xml.Linq.XName.Get("codeIdChainSpecNav", ""), typeof(global::OFMX.codeIdChainSpecNav));
            typeDictionary.Add(System.Xml.Linq.XName.Get("codeIdDesigPt", ""), typeof(global::OFMX.codeIdDesigPt));
            typeDictionary.Add(System.Xml.Linq.XName.Get("codeIdIlsMls", ""), typeof(global::OFMX.codeIdIlsMls));
            typeDictionary.Add(System.Xml.Linq.XName.Get("codeIdLvlClmn", ""), typeof(global::OFMX.codeIdLvlClmn));
            typeDictionary.Add(System.Xml.Linq.XName.Get("codeIdLvlTbl", ""), typeof(global::OFMX.codeIdLvlTbl));
            typeDictionary.Add(System.Xml.Linq.XName.Get("codeIdMkr", ""), typeof(global::OFMX.codeIdMkr));
            typeDictionary.Add(System.Xml.Linq.XName.Get("codeIdNavAid", ""), typeof(global::OFMX.codeIdNavAid));
            typeDictionary.Add(System.Xml.Linq.XName.Get("codeIdOrg", ""), typeof(global::OFMX.codeIdOrg));
            typeDictionary.Add(System.Xml.Linq.XName.Get("codeIdRestr", ""), typeof(global::OFMX.codeIdRestr));
            typeDictionary.Add(System.Xml.Linq.XName.Get("codeIntlRte", ""), typeof(global::OFMX.codeIntlRte));
            typeDictionary.Add(System.Xml.Linq.XName.Get("codeIntstLgt", ""), typeof(global::OFMX.codeIntstLgt));
            typeDictionary.Add(System.Xml.Linq.XName.Get("codeLang", ""), typeof(global::OFMX.codeLang));
            typeDictionary.Add(System.Xml.Linq.XName.Get("codeLocIndIata", ""), typeof(global::OFMX.codeLocIndIata));
            typeDictionary.Add(System.Xml.Linq.XName.Get("codeLocIndIcao", ""), typeof(global::OFMX.codeLocIndIcao));
            typeDictionary.Add(System.Xml.Linq.XName.Get("codeLocIndGps", ""), typeof(global::OFMX.codeLocIndGps));
            typeDictionary.Add(System.Xml.Linq.XName.Get("codeLovReference", ""), typeof(global::OFMX.codeLovReference));
            typeDictionary.Add(System.Xml.Linq.XName.Get("codeLvl", ""), typeof(global::OFMX.codeLvl));
            typeDictionary.Add(System.Xml.Linq.XName.Get("codeMil", ""), typeof(global::OFMX.codeMil));
            typeDictionary.Add(System.Xml.Linq.XName.Get("codeOpr", ""), typeof(global::OFMX.codeOpr));
            typeDictionary.Add(System.Xml.Linq.XName.Get("codeOprAs", ""), typeof(global::OFMX.codeOprAs));
            typeDictionary.Add(System.Xml.Linq.XName.Get("codeOrigin", ""), typeof(global::OFMX.codeOrigin));
            typeDictionary.Add(System.Xml.Linq.XName.Get("codePcnEvalMethod", ""), typeof(global::OFMX.codePcnEvalMethod));
            typeDictionary.Add(System.Xml.Linq.XName.Get("codePcnPavementType", ""), typeof(global::OFMX.codePcnPavementType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("codePcnPavementSubgrade", ""), typeof(global::OFMX.codePcnPavementSubgrade));
            typeDictionary.Add(System.Xml.Linq.XName.Get("codePcnMaxTirePressure", ""), typeof(global::OFMX.codePcnMaxTirePressure));
            typeDictionary.Add(System.Xml.Linq.XName.Get("codePhaseProc", ""), typeof(global::OFMX.codePhaseProc));
            typeDictionary.Add(System.Xml.Linq.XName.Get("codePreparationSfc", ""), typeof(global::OFMX.codePreparationSfc));
            typeDictionary.Add(System.Xml.Linq.XName.Get("codePsnApron", ""), typeof(global::OFMX.codePsnApron));
            typeDictionary.Add(System.Xml.Linq.XName.Get("codePsnIls", ""), typeof(global::OFMX.codePsnIls));
            typeDictionary.Add(System.Xml.Linq.XName.Get("codePsnRelAxis", ""), typeof(global::OFMX.codePsnRelAxis));
            typeDictionary.Add(System.Xml.Linq.XName.Get("codePsnRwy", ""), typeof(global::OFMX.codePsnRwy));
            typeDictionary.Add(System.Xml.Linq.XName.Get("codePsnTlof", ""), typeof(global::OFMX.codePsnTlof));
            typeDictionary.Add(System.Xml.Linq.XName.Get("codePsnTwy", ""), typeof(global::OFMX.codePsnTwy));
            typeDictionary.Add(System.Xml.Linq.XName.Get("codePurpose", ""), typeof(global::OFMX.codePurpose));
            typeDictionary.Add(System.Xml.Linq.XName.Get("codeRefOch", ""), typeof(global::OFMX.codeRefOch));
            typeDictionary.Add(System.Xml.Linq.XName.Get("codeRepAtc", ""), typeof(global::OFMX.codeRepAtc));
            typeDictionary.Add(System.Xml.Linq.XName.Get("codeRnp", ""), typeof(global::OFMX.codeRnp));
            typeDictionary.Add(System.Xml.Linq.XName.Get("codeRteAvbl", ""), typeof(global::OFMX.codeRteAvbl));
            typeDictionary.Add(System.Xml.Linq.XName.Get("codeRvsmPoint", ""), typeof(global::OFMX.codeRvsmPoint));
            typeDictionary.Add(System.Xml.Linq.XName.Get("codeSourceSer", ""), typeof(global::OFMX.codeSourceSer));
            typeDictionary.Add(System.Xml.Linq.XName.Get("codeSpecialDate", ""), typeof(global::OFMX.codeSpecialDate));
            typeDictionary.Add(System.Xml.Linq.XName.Get("codeSpeedRef", ""), typeof(global::OFMX.codeSpeedRef));
            typeDictionary.Add(System.Xml.Linq.XName.Get("codeStrengthSfc", ""), typeof(global::OFMX.codeStrengthSfc));
            typeDictionary.Add(System.Xml.Linq.XName.Get("codeStsSfc", ""), typeof(global::OFMX.codeStsSfc));
            typeDictionary.Add(System.Xml.Linq.XName.Get("codeTimeEvent", ""), typeof(global::OFMX.codeTimeEvent));
            typeDictionary.Add(System.Xml.Linq.XName.Get("codeTimeRef", ""), typeof(global::OFMX.codeTimeRef));
            typeDictionary.Add(System.Xml.Linq.XName.Get("codeTypeAcft", ""), typeof(global::OFMX.codeTypeAcft));
            typeDictionary.Add(System.Xml.Linq.XName.Get("codeTypeAcftCap", ""), typeof(global::OFMX.codeTypeAcftCap));
            typeDictionary.Add(System.Xml.Linq.XName.Get("codeTypeAcftEngine", ""), typeof(global::OFMX.codeTypeAcftEngine));
            typeDictionary.Add(System.Xml.Linq.XName.Get("codeTypeAddress", ""), typeof(global::OFMX.codeTypeAddress));
            typeDictionary.Add(System.Xml.Linq.XName.Get("codeTypeAdHp", ""), typeof(global::OFMX.codeTypeAdHp));
            typeDictionary.Add(System.Xml.Linq.XName.Get("codeTypeAdHpClc", ""), typeof(global::OFMX.codeTypeAdHpClc));
            typeDictionary.Add(System.Xml.Linq.XName.Get("codeTypeAeroLgt", ""), typeof(global::OFMX.codeTypeAeroLgt));
            typeDictionary.Add(System.Xml.Linq.XName.Get("codeTypeAirspaceVertex", ""), typeof(global::OFMX.codeTypeAirspaceVertex));
            typeDictionary.Add(System.Xml.Linq.XName.Get("codeTypeAlsFato", ""), typeof(global::OFMX.codeTypeAlsFato));
            typeDictionary.Add(System.Xml.Linq.XName.Get("codeTypeAlsRwy", ""), typeof(global::OFMX.codeTypeAlsRwy));
            typeDictionary.Add(System.Xml.Linq.XName.Get("codeTypeAngleBrg", ""), typeof(global::OFMX.codeTypeAngleBrg));
            typeDictionary.Add(System.Xml.Linq.XName.Get("codeTypeApchProc", ""), typeof(global::OFMX.codeTypeApchProc));
            typeDictionary.Add(System.Xml.Linq.XName.Get("codeTypeAs", ""), typeof(global::OFMX.codeTypeAs));
            typeDictionary.Add(System.Xml.Linq.XName.Get("codeTypeAssocAs", ""), typeof(global::OFMX.codeTypeAssocAs));
            typeDictionary.Add(System.Xml.Linq.XName.Get("codeTypeAssocOrg", ""), typeof(global::OFMX.codeTypeAssocOrg));
            typeDictionary.Add(System.Xml.Linq.XName.Get("codeTypeAssocUnit", ""), typeof(global::OFMX.codeTypeAssocUnit));
            typeDictionary.Add(System.Xml.Linq.XName.Get("codeTypeAsAuth", ""), typeof(global::OFMX.codeTypeAsAuth));
            typeDictionary.Add(System.Xml.Linq.XName.Get("codeTypeAsSignpnt", ""), typeof(global::OFMX.codeTypeAsSignpnt));
            typeDictionary.Add(System.Xml.Linq.XName.Get("codeTypeAzm", ""), typeof(global::OFMX.codeTypeAzm));
            typeDictionary.Add(System.Xml.Linq.XName.Get("codeTypeBorderVertex", ""), typeof(global::OFMX.codeTypeBorderVertex));
            typeDictionary.Add(System.Xml.Linq.XName.Get("codeTypeClineVertex", ""), typeof(global::OFMX.codeTypeClineVertex));
            typeDictionary.Add(System.Xml.Linq.XName.Get("codeTypeCourse", ""), typeof(global::OFMX.codeTypeCourse));
            typeDictionary.Add(System.Xml.Linq.XName.Get("codeTypeDeclDistFato", ""), typeof(global::OFMX.codeTypeDeclDistFato));
            typeDictionary.Add(System.Xml.Linq.XName.Get("codeTypeDeclDistRwy", ""), typeof(global::OFMX.codeTypeDeclDistRwy));
            typeDictionary.Add(System.Xml.Linq.XName.Get("codeTypeDesigPt", ""), typeof(global::OFMX.codeTypeDesigPt));
            typeDictionary.Add(System.Xml.Linq.XName.Get("codeTypeDme", ""), typeof(global::OFMX.codeTypeDme));
            typeDictionary.Add(System.Xml.Linq.XName.Get("codeTypeFltRule", ""), typeof(global::OFMX.codeTypeFltRule));
            typeDictionary.Add(System.Xml.Linq.XName.Get("codeTypeFreq", ""), typeof(global::OFMX.codeTypeFreq));
            typeDictionary.Add(System.Xml.Linq.XName.Get("codeTypeGeoBdr", ""), typeof(global::OFMX.codeTypeGeoBdr));
            typeDictionary.Add(System.Xml.Linq.XName.Get("codeTypeHoldProc", ""), typeof(global::OFMX.codeTypeHoldProc));
            typeDictionary.Add(System.Xml.Linq.XName.Get("codeTypeHrNavAid", ""), typeof(global::OFMX.codeTypeHrNavAid));
            typeDictionary.Add(System.Xml.Linq.XName.Get("codeTypeIap", ""), typeof(global::OFMX.codeTypeIap));
            typeDictionary.Add(System.Xml.Linq.XName.Get("codeTypeLight", ""), typeof(global::OFMX.codeTypeLight));
            typeDictionary.Add(System.Xml.Linq.XName.Get("codeTypeMilOps", ""), typeof(global::OFMX.codeTypeMilOps));
            typeDictionary.Add(System.Xml.Linq.XName.Get("codeTypeNavAidLimit", ""), typeof(global::OFMX.codeTypeNavAidLimit));
            typeDictionary.Add(System.Xml.Linq.XName.Get("codeTypeNavCkPt", ""), typeof(global::OFMX.codeTypeNavCkPt));
            typeDictionary.Add(System.Xml.Linq.XName.Get("codeTypeNitrogen", ""), typeof(global::OFMX.codeTypeNitrogen));
            typeDictionary.Add(System.Xml.Linq.XName.Get("codeTypeNorth", ""), typeof(global::OFMX.codeTypeNorth));
            typeDictionary.Add(System.Xml.Linq.XName.Get("codeTypeObstacle", ""), typeof(global::OFMX.codeTypeObstacle));
            typeDictionary.Add(System.Xml.Linq.XName.Get("codeTypeObstacleLink", ""), typeof(global::OFMX.codeTypeObstacleLink));
            typeDictionary.Add(System.Xml.Linq.XName.Get("codeTypeOpsRwy", ""), typeof(global::OFMX.codeTypeOpsRwy));
            typeDictionary.Add(System.Xml.Linq.XName.Get("codeTypeOrg", ""), typeof(global::OFMX.codeTypeOrg));
            typeDictionary.Add(System.Xml.Linq.XName.Get("codeTypeOxygen", ""), typeof(global::OFMX.codeTypeOxygen));
            typeDictionary.Add(System.Xml.Linq.XName.Get("codeTypePaxFac", ""), typeof(global::OFMX.codeTypePaxFac));
            typeDictionary.Add(System.Xml.Linq.XName.Get("codeTypeProcPath", ""), typeof(global::OFMX.codeTypeProcPath));
            typeDictionary.Add(System.Xml.Linq.XName.Get("codeTypeProtectAreaFato", ""), typeof(global::OFMX.codeTypeProtectAreaFato));
            typeDictionary.Add(System.Xml.Linq.XName.Get("codeTypeProtectAreaRwy", ""), typeof(global::OFMX.codeTypeProtectAreaRwy));
            typeDictionary.Add(System.Xml.Linq.XName.Get("codeTypeRelAs", ""), typeof(global::OFMX.codeTypeRelAs));
            typeDictionary.Add(System.Xml.Linq.XName.Get("codeTypeRestr", ""), typeof(global::OFMX.codeTypeRestr));
            typeDictionary.Add(System.Xml.Linq.XName.Get("codeTypeRte", ""), typeof(global::OFMX.codeTypeRte));
            typeDictionary.Add(System.Xml.Linq.XName.Get("codeTypeSegPath", ""), typeof(global::OFMX.codeTypeSegPath));
            typeDictionary.Add(System.Xml.Linq.XName.Get("codeTypeSer", ""), typeof(global::OFMX.codeTypeSer));
            typeDictionary.Add(System.Xml.Linq.XName.Get("codeTypeSerAd", ""), typeof(global::OFMX.codeTypeSerAd));
            typeDictionary.Add(System.Xml.Linq.XName.Get("codeTypeSerSpecNav", ""), typeof(global::OFMX.codeTypeSerSpecNav));
            typeDictionary.Add(System.Xml.Linq.XName.Get("codeTypeSid", ""), typeof(global::OFMX.codeTypeSid));
            typeDictionary.Add(System.Xml.Linq.XName.Get("codeTypeSpecNavSys", ""), typeof(global::OFMX.codeTypeSpecNavSys));
            typeDictionary.Add(System.Xml.Linq.XName.Get("codeTypeStand", ""), typeof(global::OFMX.codeTypeStand));
            typeDictionary.Add(System.Xml.Linq.XName.Get("codeTypeStar", ""), typeof(global::OFMX.codeTypeStar));
            typeDictionary.Add(System.Xml.Linq.XName.Get("codeTypeTimetable", ""), typeof(global::OFMX.codeTypeTimetable));
            typeDictionary.Add(System.Xml.Linq.XName.Get("codeTypeTlofVertex", ""), typeof(global::OFMX.codeTypeTlofVertex));
            typeDictionary.Add(System.Xml.Linq.XName.Get("codeTypeTwy", ""), typeof(global::OFMX.codeTypeTwy));
            typeDictionary.Add(System.Xml.Linq.XName.Get("codeTypeUnit", ""), typeof(global::OFMX.codeTypeUnit));
            typeDictionary.Add(System.Xml.Linq.XName.Get("codeTypeUseBackIls", ""), typeof(global::OFMX.codeTypeUseBackIls));
            typeDictionary.Add(System.Xml.Linq.XName.Get("codeTypeVasis", ""), typeof(global::OFMX.codeTypeVasis));
            typeDictionary.Add(System.Xml.Linq.XName.Get("codeTypeVertex", ""), typeof(global::OFMX.codeTypeVertex));
            typeDictionary.Add(System.Xml.Linq.XName.Get("codeTypeVor", ""), typeof(global::OFMX.codeTypeVor));
            typeDictionary.Add(System.Xml.Linq.XName.Get("codeTypeLabelMarker", ""), typeof(global::OFMX.codeTypeLabelMarker));
            typeDictionary.Add(System.Xml.Linq.XName.Get("valZoomLevel", ""), typeof(global::OFMX.valZoomLevel));
            typeDictionary.Add(System.Xml.Linq.XName.Get("codeUsageLimitation", ""), typeof(global::OFMX.codeUsageLimitation));
            typeDictionary.Add(System.Xml.Linq.XName.Get("codeYesNo", ""), typeof(global::OFMX.codeYesNo));
            typeDictionary.Add(System.Xml.Linq.XName.Get("codeCodingMode", ""), typeof(global::OFMX.codeCodingMode));
            typeDictionary.Add(System.Xml.Linq.XName.Get("dateMonthDay", ""), typeof(global::OFMX.dateMonthDay));
            typeDictionary.Add(System.Xml.Linq.XName.Get("dateYear", ""), typeof(global::OFMX.dateYear));
            typeDictionary.Add(System.Xml.Linq.XName.Get("geoLat", ""), typeof(global::OFMX.geoLat));
            typeDictionary.Add(System.Xml.Linq.XName.Get("geoLong", ""), typeof(global::OFMX.geoLong));
            typeDictionary.Add(System.Xml.Linq.XName.Get("line", ""), typeof(global::OFMX.line));
            typeDictionary.Add(System.Xml.Linq.XName.Get("bezierCurve", ""), typeof(global::OFMX.bezierCurve));
            typeDictionary.Add(System.Xml.Linq.XName.Get("noNumber", ""), typeof(global::OFMX.noNumber));
            typeDictionary.Add(System.Xml.Linq.XName.Get("noSeq", ""), typeof(global::OFMX.noSeq));
            typeDictionary.Add(System.Xml.Linq.XName.Get("time", ""), typeof(global::OFMX.time));
            typeDictionary.Add(System.Xml.Linq.XName.Get("timeLap", ""), typeof(global::OFMX.timeLap));
            typeDictionary.Add(System.Xml.Linq.XName.Get("txtAddress", ""), typeof(global::OFMX.txtAddress));
            typeDictionary.Add(System.Xml.Linq.XName.Get("txtDescr", ""), typeof(global::OFMX.txtDescr));
            typeDictionary.Add(System.Xml.Linq.XName.Get("txtDesig", ""), typeof(global::OFMX.txtDesig));
            typeDictionary.Add(System.Xml.Linq.XName.Get("txtDesigIap", ""), typeof(global::OFMX.txtDesigIap));
            typeDictionary.Add(System.Xml.Linq.XName.Get("txtDesigRte", ""), typeof(global::OFMX.txtDesigRte));
            typeDictionary.Add(System.Xml.Linq.XName.Get("txtGroupName", ""), typeof(global::OFMX.txtGroupName));
            typeDictionary.Add(System.Xml.Linq.XName.Get("txtName", ""), typeof(global::OFMX.txtName));
            typeDictionary.Add(System.Xml.Linq.XName.Get("txtRmk", ""), typeof(global::OFMX.txtRmk));
            typeDictionary.Add(System.Xml.Linq.XName.Get("uomDistHorz", ""), typeof(global::OFMX.uomDistHorz));
            typeDictionary.Add(System.Xml.Linq.XName.Get("uomDistVer", ""), typeof(global::OFMX.uomDistVer));
            typeDictionary.Add(System.Xml.Linq.XName.Get("uomDur", ""), typeof(global::OFMX.uomDur));
            typeDictionary.Add(System.Xml.Linq.XName.Get("uomElev", ""), typeof(global::OFMX.uomElev));
            typeDictionary.Add(System.Xml.Linq.XName.Get("uomFreq", ""), typeof(global::OFMX.uomFreq));
            typeDictionary.Add(System.Xml.Linq.XName.Get("uomPressure", ""), typeof(global::OFMX.uomPressure));
            typeDictionary.Add(System.Xml.Linq.XName.Get("uomSpeed", ""), typeof(global::OFMX.uomSpeed));
            typeDictionary.Add(System.Xml.Linq.XName.Get("uomT", ""), typeof(global::OFMX.uomT));
            typeDictionary.Add(System.Xml.Linq.XName.Get("uomWeight", ""), typeof(global::OFMX.uomWeight));
            typeDictionary.Add(System.Xml.Linq.XName.Get("valAngle", ""), typeof(global::OFMX.valAngle));
            typeDictionary.Add(System.Xml.Linq.XName.Get("valAngleBrg", ""), typeof(global::OFMX.valAngleBrg));
            typeDictionary.Add(System.Xml.Linq.XName.Get("valAngleMagVar", ""), typeof(global::OFMX.valAngleMagVar));
            typeDictionary.Add(System.Xml.Linq.XName.Get("valAngleMagVarChg", ""), typeof(global::OFMX.valAngleMagVarChg));
            typeDictionary.Add(System.Xml.Linq.XName.Get("valDistHorz", ""), typeof(global::OFMX.valDistHorz));
            typeDictionary.Add(System.Xml.Linq.XName.Get("valDistVer", ""), typeof(global::OFMX.valDistVer));
            typeDictionary.Add(System.Xml.Linq.XName.Get("valDur", ""), typeof(global::OFMX.valDur));
            typeDictionary.Add(System.Xml.Linq.XName.Get("valFl", ""), typeof(global::OFMX.valFl));
            typeDictionary.Add(System.Xml.Linq.XName.Get("valFreq", ""), typeof(global::OFMX.valFreq));
            typeDictionary.Add(System.Xml.Linq.XName.Get("valHex", ""), typeof(global::OFMX.valHex));
            typeDictionary.Add(System.Xml.Linq.XName.Get("valLcnClass", ""), typeof(global::OFMX.valLcnClass));
            typeDictionary.Add(System.Xml.Linq.XName.Get("valOffset", ""), typeof(global::OFMX.valOffset));
            typeDictionary.Add(System.Xml.Linq.XName.Get("valPcnClass", ""), typeof(global::OFMX.valPcnClass));
            typeDictionary.Add(System.Xml.Linq.XName.Get("valPressurePcnTire", ""), typeof(global::OFMX.valPressurePcnTire));
            typeDictionary.Add(System.Xml.Linq.XName.Get("valSlope", ""), typeof(global::OFMX.valSlope));
            typeDictionary.Add(System.Xml.Linq.XName.Get("valPressure", ""), typeof(global::OFMX.valPressure));
            typeDictionary.Add(System.Xml.Linq.XName.Get("valSpeed", ""), typeof(global::OFMX.valSpeed));
            typeDictionary.Add(System.Xml.Linq.XName.Get("valT", ""), typeof(global::OFMX.valT));
            typeDictionary.Add(System.Xml.Linq.XName.Get("valWeight", ""), typeof(global::OFMX.valWeight));
            typeDictionary.Add(System.Xml.Linq.XName.Get("AerodromeHeliportAddressType", ""), typeof(global::OFMX.AerodromeHeliportAddressType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("AerodromeHeliportAddressUidType", ""), typeof(global::OFMX.AerodromeHeliportAddressUidType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("AerodromeHeliportCollocationType", ""), typeof(global::OFMX.AerodromeHeliportCollocationType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("AerodromeHeliportCollocationUidType", ""), typeof(global::OFMX.AerodromeHeliportCollocationUidType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("AerodromeHeliportNavaidType", ""), typeof(global::OFMX.AerodromeHeliportNavaidType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("AerodromeHeliportNavaidUidType", ""), typeof(global::OFMX.AerodromeHeliportNavaidUidType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("AerodromeHeliportObstacleType", ""), typeof(global::OFMX.AerodromeHeliportObstacleType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("AerodromeHeliportObstacleUidType", ""), typeof(global::OFMX.AerodromeHeliportObstacleUidType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("AerodromeHeliportServiceType", ""), typeof(global::OFMX.AerodromeHeliportServiceType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("AerodromeHeliportServiceUidType", ""), typeof(global::OFMX.AerodromeHeliportServiceUidType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("AerodromeHeliportType", ""), typeof(global::OFMX.AerodromeHeliportType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("AerodromeHeliportUidType", ""), typeof(global::OFMX.AerodromeHeliportUidType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("AerodromeHeliportUsageType", ""), typeof(global::OFMX.AerodromeHeliportUsageType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("AerodromeHeliportUsageUidType", ""), typeof(global::OFMX.AerodromeHeliportUsageUidType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("AeronauticalGroundLightType", ""), typeof(global::OFMX.AeronauticalGroundLightType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("AeronauticalGroundLightUidType", ""), typeof(global::OFMX.AeronauticalGroundLightUidType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("AircraftClassType", ""), typeof(global::OFMX.AircraftClassType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("AirspaceAssociationType", ""), typeof(global::OFMX.AirspaceAssociationType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("AirspaceAssociationUidType", ""), typeof(global::OFMX.AirspaceAssociationUidType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("AirspaceAssocType", ""), typeof(global::OFMX.AirspaceAssocType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("AirspaceAssocUidType", ""), typeof(global::OFMX.AirspaceAssocUidType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("AirspaceAuthorityType", ""), typeof(global::OFMX.AirspaceAuthorityType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("AirspaceAuthorityUidType", ""), typeof(global::OFMX.AirspaceAuthorityUidType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("AirspaceBorderCrossingType", ""), typeof(global::OFMX.AirspaceBorderCrossingType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("AirspaceBorderType", ""), typeof(global::OFMX.AirspaceBorderType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("AirspaceBorderUidType", ""), typeof(global::OFMX.AirspaceBorderUidType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("AirspaceBorderVertexType", ""), typeof(global::OFMX.AirspaceBorderVertexType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("AirspaceCentrelineVertexType", ""), typeof(global::OFMX.AirspaceCentrelineVertexType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("AirspaceCircularVertexType", ""), typeof(global::OFMX.AirspaceCircularVertexType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("AirspaceCorridorType", ""), typeof(global::OFMX.AirspaceCorridorType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("AirspaceCorridorUidType", ""), typeof(global::OFMX.AirspaceCorridorUidType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("AirspaceDerivedGeometryType", ""), typeof(global::OFMX.AirspaceDerivedGeometryType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("AirspaceDerivedGeometryUidType", ""), typeof(global::OFMX.AirspaceDerivedGeometryUidType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("AirspaceObstacleType", ""), typeof(global::OFMX.AirspaceObstacleType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("AirspaceObstacleUidType", ""), typeof(global::OFMX.AirspaceObstacleUidType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("AirspaceServiceType", ""), typeof(global::OFMX.AirspaceServiceType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("AirspaceServiceUidType", ""), typeof(global::OFMX.AirspaceServiceUidType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("AirspaceType", ""), typeof(global::OFMX.AirspaceType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("AirspaceUidType", ""), typeof(global::OFMX.AirspaceUidType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("ApronGeometryPointType", ""), typeof(global::OFMX.ApronGeometryPointType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("ApronGeometryType", ""), typeof(global::OFMX.ApronGeometryType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("ApronGeometryUidType", ""), typeof(global::OFMX.ApronGeometryUidType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("ApronLightingSystemType", ""), typeof(global::OFMX.ApronLightingSystemType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("ApronLightingSystemUidType", ""), typeof(global::OFMX.ApronLightingSystemUidType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("ApronType", ""), typeof(global::OFMX.ApronType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("ApronUidType", ""), typeof(global::OFMX.ApronUidType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("CallsignType", ""), typeof(global::OFMX.CallsignType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("CheckpointType", ""), typeof(global::OFMX.CheckpointType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("CheckpointUidType", ""), typeof(global::OFMX.CheckpointUidType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("CruisingLevelsColumnType", ""), typeof(global::OFMX.CruisingLevelsColumnType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("CruisingLevelsColumnUidType", ""), typeof(global::OFMX.CruisingLevelsColumnUidType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("CruisingLevelsTableType", ""), typeof(global::OFMX.CruisingLevelsTableType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("CruisingLevelsTableUidType", ""), typeof(global::OFMX.CruisingLevelsTableUidType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("DesignatedPointType", ""), typeof(global::OFMX.DesignatedPointType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("DesignatedPointUidType", ""), typeof(global::OFMX.DesignatedPointUidType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("DirectFlightClassType", ""), typeof(global::OFMX.DirectFlightClassType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("DirectSegmentType", ""), typeof(global::OFMX.DirectSegmentType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("DmeLimitationType", ""), typeof(global::OFMX.DmeLimitationType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("DmeLimitationUidType", ""), typeof(global::OFMX.DmeLimitationUidType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("DmeType", ""), typeof(global::OFMX.DmeType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("DmeUidType", ""), typeof(global::OFMX.DmeUidType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("DmeUsageLimitationType", ""), typeof(global::OFMX.DmeUsageLimitationType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("DmeUsageLimitationUidType", ""), typeof(global::OFMX.DmeUsageLimitationUidType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("EnrouteRouteType", ""), typeof(global::OFMX.EnrouteRouteType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("EnrouteRouteUidType", ""), typeof(global::OFMX.EnrouteRouteUidType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("FatoCentreLinePositionType", ""), typeof(global::OFMX.FatoCentreLinePositionType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("FatoCentreLinePositionUidType", ""), typeof(global::OFMX.FatoCentreLinePositionUidType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("FatoDirectionApproachLightingType", ""), typeof(global::OFMX.FatoDirectionApproachLightingType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("FatoDirectionApproachLightingUidType", ""), typeof(global::OFMX.FatoDirectionApproachLightingUidType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("FatoDirectionDeclaredDistanceType", ""), typeof(global::OFMX.FatoDirectionDeclaredDistanceType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("FatoDirectionDeclaredDistanceUidType", ""), typeof(global::OFMX.FatoDirectionDeclaredDistanceUidType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("FatoDirectionObstacleType", ""), typeof(global::OFMX.FatoDirectionObstacleType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("FatoDirectionObstacleUidType", ""), typeof(global::OFMX.FatoDirectionObstacleUidType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("FatoDirectionStarType", ""), typeof(global::OFMX.FatoDirectionStarType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("FatoDirectionStarUidType", ""), typeof(global::OFMX.FatoDirectionStarUidType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("FatoDirectionType", ""), typeof(global::OFMX.FatoDirectionType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("FatoDirectionUidType", ""), typeof(global::OFMX.FatoDirectionUidType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("FatoLightingSystemType", ""), typeof(global::OFMX.FatoLightingSystemType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("FatoLightingSystemUidType", ""), typeof(global::OFMX.FatoLightingSystemUidType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("FatoOldType", ""), typeof(global::OFMX.FatoOldType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("FatoOldUidType", ""), typeof(global::OFMX.FatoOldUidType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("FatoProtectionAreaGeometryPointType", ""), typeof(global::OFMX.FatoProtectionAreaGeometryPointType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("FatoProtectionAreaGeometryType", ""), typeof(global::OFMX.FatoProtectionAreaGeometryType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("FatoProtectionAreaGeometryUidType", ""), typeof(global::OFMX.FatoProtectionAreaGeometryUidType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("FatoProtectionAreaType", ""), typeof(global::OFMX.FatoProtectionAreaType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("FatoProtectionAreaUidType", ""), typeof(global::OFMX.FatoProtectionAreaUidType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("FatoType", ""), typeof(global::OFMX.FatoType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("FatoUidType", ""), typeof(global::OFMX.FatoUidType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("FlightClassType", ""), typeof(global::OFMX.FlightClassType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("FlowConditionElementLevelType", ""), typeof(global::OFMX.FlowConditionElementLevelType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("FlowConditionElementType", ""), typeof(global::OFMX.FlowConditionElementType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("FlowConditionsCombinationType", ""), typeof(global::OFMX.FlowConditionsCombinationType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("FlowRoutingElementLevelType", ""), typeof(global::OFMX.FlowRoutingElementLevelType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("FlowRoutingElementType", ""), typeof(global::OFMX.FlowRoutingElementType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("FlowRoutingType", ""), typeof(global::OFMX.FlowRoutingType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("FrequencyType", ""), typeof(global::OFMX.FrequencyType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("FrequencyUidType", ""), typeof(global::OFMX.FrequencyUidType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("FuelType", ""), typeof(global::OFMX.FuelType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("FuelUidType", ""), typeof(global::OFMX.FuelUidType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("GateStandType", ""), typeof(global::OFMX.GateStandType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("GateStandUidType", ""), typeof(global::OFMX.GateStandUidType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("GeographicalBorderType", ""), typeof(global::OFMX.GeographicalBorderType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("GeographicalBorderUidType", ""), typeof(global::OFMX.GeographicalBorderUidType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("GeographicalBorderVertexType", ""), typeof(global::OFMX.GeographicalBorderVertexType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("GroundServiceAddressType", ""), typeof(global::OFMX.GroundServiceAddressType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("GroundServiceAddressUidType", ""), typeof(global::OFMX.GroundServiceAddressUidType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("GroundServiceType", ""), typeof(global::OFMX.GroundServiceType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("GroundServiceUidType", ""), typeof(global::OFMX.GroundServiceUidType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("HoldingProcedureServiceType", ""), typeof(global::OFMX.HoldingProcedureServiceType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("HoldingProcedureServiceUidType", ""), typeof(global::OFMX.HoldingProcedureServiceUidType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("HoldingProcedureType", ""), typeof(global::OFMX.HoldingProcedureType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("HoldingProcedureUidType", ""), typeof(global::OFMX.HoldingProcedureUidType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("IlsGlidePathType", ""), typeof(global::OFMX.IlsGlidePathType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("IlsLocalizerType", ""), typeof(global::OFMX.IlsLocalizerType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("IlsType", ""), typeof(global::OFMX.IlsType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("IlsUidType", ""), typeof(global::OFMX.IlsUidType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("InstrumentApproachServiceType", ""), typeof(global::OFMX.InstrumentApproachServiceType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("InstrumentApproachServiceUidType", ""), typeof(global::OFMX.InstrumentApproachServiceUidType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("InstrumentApproachType", ""), typeof(global::OFMX.InstrumentApproachType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("InstrumentApproachUidType", ""), typeof(global::OFMX.InstrumentApproachUidType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("InstrumentApproachUsageConditionType", ""), typeof(global::OFMX.InstrumentApproachUsageConditionType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("InstrumentApproachUsageConditionUidType", ""), typeof(global::OFMX.InstrumentApproachUsageConditionUidType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("LightGroupType", ""), typeof(global::OFMX.LightGroupType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("MkrType", ""), typeof(global::OFMX.MkrType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("MkrUidType", ""), typeof(global::OFMX.MkrUidType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("MlsAzimuthType", ""), typeof(global::OFMX.MlsAzimuthType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("MlsElevationType", ""), typeof(global::OFMX.MlsElevationType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("MlsType", ""), typeof(global::OFMX.MlsType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("MlsUidType", ""), typeof(global::OFMX.MlsUidType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("MsaGroupType", ""), typeof(global::OFMX.MsaGroupType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("MsaGroupUidType", ""), typeof(global::OFMX.MsaGroupUidType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("MsaType", ""), typeof(global::OFMX.MsaType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("NavaidAngularReferenceType", ""), typeof(global::OFMX.NavaidAngularReferenceType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("NavaidAngularReferenceUidType", ""), typeof(global::OFMX.NavaidAngularReferenceUidType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("NavaidDistanceIndicationType", ""), typeof(global::OFMX.NavaidDistanceIndicationType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("NavaidDistanceIndicationUidType", ""), typeof(global::OFMX.NavaidDistanceIndicationUidType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("NavaidLimitationType", ""), typeof(global::OFMX.NavaidLimitationType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("NdbLimitationType", ""), typeof(global::OFMX.NdbLimitationType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("NdbLimitationUidType", ""), typeof(global::OFMX.NdbLimitationUidType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("NdbType", ""), typeof(global::OFMX.NdbType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("NdbUidType", ""), typeof(global::OFMX.NdbUidType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("NdbUsageLimitationType", ""), typeof(global::OFMX.NdbUsageLimitationType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("NdbUsageLimitationUidType", ""), typeof(global::OFMX.NdbUsageLimitationUidType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("NitrogenType", ""), typeof(global::OFMX.NitrogenType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("NitrogenUidType", ""), typeof(global::OFMX.NitrogenUidType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("ObstacleClearanceAltitudeHeightType", ""), typeof(global::OFMX.ObstacleClearanceAltitudeHeightType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("ObstacleGroupType", ""), typeof(global::OFMX.ObstacleGroupType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("ObstacleGroupUidType", ""), typeof(global::OFMX.ObstacleGroupUidType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("ObstacleType", ""), typeof(global::OFMX.ObstacleType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("ObstacleUidType", ""), typeof(global::OFMX.ObstacleUidType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("OilType", ""), typeof(global::OFMX.OilType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("OilUidType", ""), typeof(global::OFMX.OilUidType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("OrganisationAuthorityAddressType", ""), typeof(global::OFMX.OrganisationAuthorityAddressType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("OrganisationAuthorityAddressUidType", ""), typeof(global::OFMX.OrganisationAuthorityAddressUidType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("OrganisationAuthorityAssociationType", ""), typeof(global::OFMX.OrganisationAuthorityAssociationType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("OrganisationAuthorityAssociationUidType", ""), typeof(global::OFMX.OrganisationAuthorityAssociationUidType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("OrganisationAuthorityType", ""), typeof(global::OFMX.OrganisationAuthorityType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("OrganisationAuthorityUidType", ""), typeof(global::OFMX.OrganisationAuthorityUidType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("OxygenType", ""), typeof(global::OFMX.OxygenType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("OxygenUidType", ""), typeof(global::OFMX.OxygenUidType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("PassengerFacilityType", ""), typeof(global::OFMX.PassengerFacilityType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("PassengerFacilityUidType", ""), typeof(global::OFMX.PassengerFacilityUidType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("ProcedureLegType", ""), typeof(global::OFMX.ProcedureLegType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("RouteSegmentUsageLevelType", ""), typeof(global::OFMX.RouteSegmentUsageLevelType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("RoutePortionType", ""), typeof(global::OFMX.RoutePortionType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("RouteSegmentServiceType", ""), typeof(global::OFMX.RouteSegmentServiceType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("RouteSegmentServiceUidType", ""), typeof(global::OFMX.RouteSegmentServiceUidType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("RouteSegmentType", ""), typeof(global::OFMX.RouteSegmentType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("RouteSegmentUidType", ""), typeof(global::OFMX.RouteSegmentUidType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("RouteSegmentUsageType", ""), typeof(global::OFMX.RouteSegmentUsageType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("RouteSegmentUsageUidType", ""), typeof(global::OFMX.RouteSegmentUsageUidType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("RunwayCentreLinePositionType", ""), typeof(global::OFMX.RunwayCentreLinePositionType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("RunwayCentreLinePositionUidType", ""), typeof(global::OFMX.RunwayCentreLinePositionUidType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("RunwayDirectionApproachLightingSystemType", ""), typeof(global::OFMX.RunwayDirectionApproachLightingSystemType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("RunwayDirectionApproachLightingSystemUidType", ""), typeof(global::OFMX.RunwayDirectionApproachLightingSystemUidType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("RunwayDirectionDeclaredDistanceType", ""), typeof(global::OFMX.RunwayDirectionDeclaredDistanceType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("RunwayDirectionDeclaredDistanceUidType", ""), typeof(global::OFMX.RunwayDirectionDeclaredDistanceUidType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("RunwayDirectionLightingSystemType", ""), typeof(global::OFMX.RunwayDirectionLightingSystemType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("RunwayDirectionLightingSystemUidType", ""), typeof(global::OFMX.RunwayDirectionLightingSystemUidType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("RunwayDirectionObstacleType", ""), typeof(global::OFMX.RunwayDirectionObstacleType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("RunwayDirectionObstacleUidType", ""), typeof(global::OFMX.RunwayDirectionObstacleUidType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("RunwayDirectionStarType", ""), typeof(global::OFMX.RunwayDirectionStarType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("RunwayDirectionStarUidType", ""), typeof(global::OFMX.RunwayDirectionStarUidType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("RunwayDirectionType", ""), typeof(global::OFMX.RunwayDirectionType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("RunwayDirectionUidType", ""), typeof(global::OFMX.RunwayDirectionUidType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("RunwayProtectionAreaGeometryPointType", ""), typeof(global::OFMX.RunwayProtectionAreaGeometryPointType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("RunwayProtectionAreaGeometryType", ""), typeof(global::OFMX.RunwayProtectionAreaGeometryType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("RunwayProtectionAreaGeometryUidType", ""), typeof(global::OFMX.RunwayProtectionAreaGeometryUidType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("RunwayProtectionAreaType", ""), typeof(global::OFMX.RunwayProtectionAreaType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("RunwayProtectionAreaUidType", ""), typeof(global::OFMX.RunwayProtectionAreaUidType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("RunwayType", ""), typeof(global::OFMX.RunwayType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("RunwayUidType", ""), typeof(global::OFMX.RunwayUidType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("ServiceType", ""), typeof(global::OFMX.ServiceType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("ServiceUidType", ""), typeof(global::OFMX.ServiceUidType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("SidServiceType", ""), typeof(global::OFMX.SidServiceType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("SidServiceUidType", ""), typeof(global::OFMX.SidServiceUidType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("SidType", ""), typeof(global::OFMX.SidType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("SidUidType", ""), typeof(global::OFMX.SidUidType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("SidUsageType", ""), typeof(global::OFMX.SidUsageType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("SidUsageUidType", ""), typeof(global::OFMX.SidUsageUidType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("SignificantPointAirspaceType", ""), typeof(global::OFMX.SignificantPointAirspaceType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("SignificantPointAirspaceUidType", ""), typeof(global::OFMX.SignificantPointAirspaceUidType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("SpecialDateType", ""), typeof(global::OFMX.SpecialDateType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("SpecialDateUidType", ""), typeof(global::OFMX.SpecialDateUidType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("SpecialNavigationSystemStationType", ""), typeof(global::OFMX.SpecialNavigationSystemStationType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("SpecialNavigationSystemStationUidType", ""), typeof(global::OFMX.SpecialNavigationSystemStationUidType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("SpecialNavigationSystemType", ""), typeof(global::OFMX.SpecialNavigationSystemType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("SpecialNavigationSystemUidType", ""), typeof(global::OFMX.SpecialNavigationSystemUidType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("SpecifiedCruisingLevelType", ""), typeof(global::OFMX.SpecifiedCruisingLevelType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("StarServiceType", ""), typeof(global::OFMX.StarServiceType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("StarServiceUidType", ""), typeof(global::OFMX.StarServiceUidType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("StarType", ""), typeof(global::OFMX.StarType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("StarUidType", ""), typeof(global::OFMX.StarUidType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("StarUsageType", ""), typeof(global::OFMX.StarUsageType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("StarUsageUidType", ""), typeof(global::OFMX.StarUsageUidType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("StopwayType", ""), typeof(global::OFMX.StopwayType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("StopwayUidType", ""), typeof(global::OFMX.StopwayUidType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("TacanLimitationType", ""), typeof(global::OFMX.TacanLimitationType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("TacanLimitationUidType", ""), typeof(global::OFMX.TacanLimitationUidType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("TacanType", ""), typeof(global::OFMX.TacanType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("TacanUidType", ""), typeof(global::OFMX.TacanUidType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("TacanUsageLimitationType", ""), typeof(global::OFMX.TacanUsageLimitationType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("TacanUsageLimitationUidType", ""), typeof(global::OFMX.TacanUsageLimitationUidType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("TaxiwayCentreLinePositionType", ""), typeof(global::OFMX.TaxiwayCentreLinePositionType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("TaxiwayCentreLinePositionUidType", ""), typeof(global::OFMX.TaxiwayCentreLinePositionUidType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("TaxiwayHoldingPositionType", ""), typeof(global::OFMX.TaxiwayHoldingPositionType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("TaxiwayHoldingPositionUidType", ""), typeof(global::OFMX.TaxiwayHoldingPositionUidType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("TaxiwayLightingSystemType", ""), typeof(global::OFMX.TaxiwayLightingSystemType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("TaxiwayLightingSystemUidType", ""), typeof(global::OFMX.TaxiwayLightingSystemUidType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("TaxiwayType", ""), typeof(global::OFMX.TaxiwayType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("TaxiwayUidType", ""), typeof(global::OFMX.TaxiwayUidType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("TimetableNavaidType", ""), typeof(global::OFMX.TimetableNavaidType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("TimetableType", ""), typeof(global::OFMX.TimetableType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("TlofGeometryPointType", ""), typeof(global::OFMX.TlofGeometryPointType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("TlofGeometryType", ""), typeof(global::OFMX.TlofGeometryType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("TlofGeometryUidType", ""), typeof(global::OFMX.TlofGeometryUidType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("TlofLightingSystemType", ""), typeof(global::OFMX.TlofLightingSystemType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("TlofLightingSystemUidType", ""), typeof(global::OFMX.TlofLightingSystemUidType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("TlofSafeAreaGeometryPointType", ""), typeof(global::OFMX.TlofSafeAreaGeometryPointType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("TlofSafeAreaGeometryType", ""), typeof(global::OFMX.TlofSafeAreaGeometryType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("TlofSafeAreaGeometryUidType", ""), typeof(global::OFMX.TlofSafeAreaGeometryUidType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("TlofSafeAreaType", ""), typeof(global::OFMX.TlofSafeAreaType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("TlofSafeAreaUidType", ""), typeof(global::OFMX.TlofSafeAreaUidType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("TlofType", ""), typeof(global::OFMX.TlofType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("TlofUidType", ""), typeof(global::OFMX.TlofUidType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("TrafficFlowRestrictionType", ""), typeof(global::OFMX.TrafficFlowRestrictionType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("TrafficFlowRestrictionUidType", ""), typeof(global::OFMX.TrafficFlowRestrictionUidType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("UnitAssociationType", ""), typeof(global::OFMX.UnitAssociationType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("UnitAssociationUidType", ""), typeof(global::OFMX.UnitAssociationUidType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("UnitContactAddressType", ""), typeof(global::OFMX.UnitContactAddressType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("UnitContactAddressUidType", ""), typeof(global::OFMX.UnitContactAddressUidType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("UnitType", ""), typeof(global::OFMX.UnitType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("UnitUidType", ""), typeof(global::OFMX.UnitUidType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("VorLimitationType", ""), typeof(global::OFMX.VorLimitationType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("VorLimitationUidType", ""), typeof(global::OFMX.VorLimitationUidType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("VorType", ""), typeof(global::OFMX.VorType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("VorUidType", ""), typeof(global::OFMX.VorUidType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("VorUsageLimitationType", ""), typeof(global::OFMX.VorUsageLimitationType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("VorUsageLimitationUidType", ""), typeof(global::OFMX.VorUsageLimitationUidType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("LabelMarkerType", ""), typeof(global::OFMX.LabelMarkerType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("LabelMarkerUidType", ""), typeof(global::OFMX.LabelMarkerUidType));
        }
        
        private static void BuildElementDictionary() {
            elementDictionary.Add(System.Xml.Linq.XName.Get("OFMX-Snapshot", ""), typeof(global::OFMX.OFMXSnapshot));
        }
        
        protected internal static void AddSchemas(XmlSchemaSet schemas) {
            schemas.Add(schemaSet);
        }
        
        public static System.Type GetRootType() {
            return elementDictionary[System.Xml.Linq.XName.Get("OFMX-Snapshot", "")];
        }
    }
    
    public partial class XRootNamespace {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XDocument doc;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedElement rootObject;
        

		public OFMXSnapshot OFMXSnapshot {  get {return rootObject as OFMXSnapshot; } }
        
        private XRootNamespace() {
        }
        
        public XRootNamespace(OFMXSnapshot root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public virtual XDocument XDocument {
            get {
                return doc;
            }
        }
        
        public virtual XTypedElement Root {
            get {
                return rootObject;
            }
        }
        
        public static XRootNamespace Load(string xmlFile) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(xmlFile);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRootNamespace Load(string xmlFile, LoadOptions options) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(xmlFile, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRootNamespace Load(TextReader textReader) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(textReader);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRootNamespace Load(TextReader textReader, LoadOptions options) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(textReader, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRootNamespace Load(XmlReader xmlReader) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(xmlReader);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRootNamespace Parse(string text) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Parse(text);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRootNamespace Parse(string text, LoadOptions options) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Parse(text, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public virtual void Save(string fileName) {
            doc.Save(fileName);
        }
        
        public virtual void Save(TextWriter textWriter) {
            doc.Save(textWriter);
        }
        
        public virtual void Save(XmlWriter writer) {
            doc.Save(writer);
        }
        
        public virtual void Save(TextWriter textWriter, SaveOptions options) {
            doc.Save(textWriter, options);
        }
        
        public virtual void Save(string fileName, SaveOptions options) {
            doc.Save(fileName, options);
        }
    }
    
    public partial class XRoot {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XDocument doc;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedElement rootObject;
        

		public global::OFMX.OFMXSnapshot OFMXSnapshot {  get {return rootObject as global::OFMX.OFMXSnapshot; } }
        
        private XRoot() {
        }
        
        public XRoot(global::OFMX.OFMXSnapshot root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public virtual XDocument XDocument {
            get {
                return doc;
            }
        }
        
        public virtual XTypedElement Root {
            get {
                return rootObject;
            }
        }
        
        public static XRoot Load(string xmlFile) {
            XRoot root = new XRoot();
            root.doc = XDocument.Load(xmlFile);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRoot Load(string xmlFile, LoadOptions options) {
            XRoot root = new XRoot();
            root.doc = XDocument.Load(xmlFile, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRoot Load(TextReader textReader) {
            XRoot root = new XRoot();
            root.doc = XDocument.Load(textReader);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRoot Load(TextReader textReader, LoadOptions options) {
            XRoot root = new XRoot();
            root.doc = XDocument.Load(textReader, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRoot Load(XmlReader xmlReader) {
            XRoot root = new XRoot();
            root.doc = XDocument.Load(xmlReader);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRoot Parse(string text) {
            XRoot root = new XRoot();
            root.doc = XDocument.Parse(text);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRoot Parse(string text, LoadOptions options) {
            XRoot root = new XRoot();
            root.doc = XDocument.Parse(text, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public virtual void Save(string fileName) {
            doc.Save(fileName);
        }
        
        public virtual void Save(TextWriter textWriter) {
            doc.Save(textWriter);
        }
        
        public virtual void Save(XmlWriter writer) {
            doc.Save(writer);
        }
        
        public virtual void Save(TextWriter textWriter, SaveOptions options) {
            doc.Save(textWriter, options);
        }
        
        public virtual void Save(string fileName, SaveOptions options) {
            doc.Save(fileName, options);
        }
    }
}
