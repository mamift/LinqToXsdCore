//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace LandXml.v1_2 {
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.ComponentModel;
    using System.IO;
    using System.Linq;
    using System.Diagnostics;
    using System.Xml;
    using System.Xml.Schema;
    using System.Xml.Linq;
    using Xml.Schema.Linq;
    
    
    /// <summary>
    /// <para>
    /// Regular expression: (Units | CoordinateSystem? | Project? | Application* | Alignments* | CgPoints* | Amendment* | GradeModel* | Monuments* | Parcels* | PlanFeatures* | PipeNetworks* | Roadways* | Surfaces* | Survey* | FeatureDictionary* | any)+
    /// </para>
    /// </summary>
    public partial class LandXML : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName UnitsXName = System.Xml.Linq.XName.Get("Units", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<Units> UnitsField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName CoordinateSystemXName = System.Xml.Linq.XName.Get("CoordinateSystem", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<CoordinateSystem> CoordinateSystemField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ProjectXName = System.Xml.Linq.XName.Get("Project", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<Project> ProjectField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ApplicationXName = System.Xml.Linq.XName.Get("Application", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<Application> ApplicationField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName AlignmentsXName = System.Xml.Linq.XName.Get("Alignments", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<Alignments> AlignmentsField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName CgPointsXName = System.Xml.Linq.XName.Get("CgPoints", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<CgPoints> CgPointsField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName AmendmentXName = System.Xml.Linq.XName.Get("Amendment", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<Amendment> AmendmentField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName GradeModelXName = System.Xml.Linq.XName.Get("GradeModel", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<GradeModel> GradeModelField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName MonumentsXName = System.Xml.Linq.XName.Get("Monuments", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<Monuments> MonumentsField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ParcelsXName = System.Xml.Linq.XName.Get("Parcels", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<Parcels> ParcelsField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName PlanFeaturesXName = System.Xml.Linq.XName.Get("PlanFeatures", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<PlanFeatures> PlanFeaturesField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName PipeNetworksXName = System.Xml.Linq.XName.Get("PipeNetworks", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<PipeNetworks> PipeNetworksField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName RoadwaysXName = System.Xml.Linq.XName.Get("Roadways", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<Roadways> RoadwaysField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName SurfacesXName = System.Xml.Linq.XName.Get("Surfaces", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<Surfaces> SurfacesField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName SurveyXName = System.Xml.Linq.XName.Get("Survey", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<Survey> SurveyField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName FeatureDictionaryXName = System.Xml.Linq.XName.Get("FeatureDictionary", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<FeatureDictionary> FeatureDictionaryField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName dateXName = System.Xml.Linq.XName.Get("date", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName timeXName = System.Xml.Linq.XName.Get("time", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName versionXName = System.Xml.Linq.XName.Get("version", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName languageXName = System.Xml.Linq.XName.Get("language", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName readOnlyXName = System.Xml.Linq.XName.Get("readOnly", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName LandXMLIdXName = System.Xml.Linq.XName.Get("LandXMLId", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName crcXName = System.Xml.Linq.XName.Get("crc", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("LandXML", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static FSM validationStates;
        
		public static explicit operator LandXML(XElement xe) { return XTypedServices.ToXTypedElement<LandXML>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static LandXML() {
            BuildElementDictionary();
            InitFSM();
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Units | CoordinateSystem? | Project? | Application* | Alignments* | CgPoints* | Amendment* | GradeModel* | Monuments* | Parcels* | PlanFeatures* | PipeNetworks* | Roadways* | Surfaces* | Survey* | FeatureDictionary* | any)+
        /// </para>
        /// </summary>
        public LandXML() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (Units | CoordinateSystem? | Project? | Application* | Alignments* | CgPoints* | Amendment* | GradeModel* | Monuments* | Parcels* | PlanFeatures* | PipeNetworks* | Roadways* | Surfaces* | Survey* | FeatureDictionary* | any)+
        /// </para>
        /// </summary>
        public virtual IList<Units> Units {
            get {
                if ((this.UnitsField == null)) {
                    this.UnitsField = new XTypedList<Units>(this, LinqToXsdTypeManager.Instance, UnitsXName);
                }
                return this.UnitsField;
            }
            set {
                if ((value == null)) {
                    this.UnitsField = null;
                }
                else {
                    if ((this.UnitsField == null)) {
                        this.UnitsField = XTypedList<Units>.Initialize(this, LinqToXsdTypeManager.Instance, value, UnitsXName);
                    }
                    else {
                        XTypedServices.SetList<Units>(this.UnitsField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, choice
        /// </para>
        /// <para>
        /// Regular expression: (Units | CoordinateSystem? | Project? | Application* | Alignments* | CgPoints* | Amendment* | GradeModel* | Monuments* | Parcels* | PlanFeatures* | PipeNetworks* | Roadways* | Surfaces* | Survey* | FeatureDictionary* | any)+
        /// </para>
        /// </summary>
        public virtual IList<CoordinateSystem> CoordinateSystem {
            get {
                if ((this.CoordinateSystemField == null)) {
                    this.CoordinateSystemField = new XTypedList<CoordinateSystem>(this, LinqToXsdTypeManager.Instance, CoordinateSystemXName);
                }
                return this.CoordinateSystemField;
            }
            set {
                if ((value == null)) {
                    this.CoordinateSystemField = null;
                }
                else {
                    if ((this.CoordinateSystemField == null)) {
                        this.CoordinateSystemField = XTypedList<CoordinateSystem>.Initialize(this, LinqToXsdTypeManager.Instance, value, CoordinateSystemXName);
                    }
                    else {
                        XTypedServices.SetList<CoordinateSystem>(this.CoordinateSystemField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, choice
        /// </para>
        /// <para>
        /// Regular expression: (Units | CoordinateSystem? | Project? | Application* | Alignments* | CgPoints* | Amendment* | GradeModel* | Monuments* | Parcels* | PlanFeatures* | PipeNetworks* | Roadways* | Surfaces* | Survey* | FeatureDictionary* | any)+
        /// </para>
        /// </summary>
        public virtual IList<Project> Project {
            get {
                if ((this.ProjectField == null)) {
                    this.ProjectField = new XTypedList<Project>(this, LinqToXsdTypeManager.Instance, ProjectXName);
                }
                return this.ProjectField;
            }
            set {
                if ((value == null)) {
                    this.ProjectField = null;
                }
                else {
                    if ((this.ProjectField == null)) {
                        this.ProjectField = XTypedList<Project>.Initialize(this, LinqToXsdTypeManager.Instance, value, ProjectXName);
                    }
                    else {
                        XTypedServices.SetList<Project>(this.ProjectField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating, choice
        /// </para>
        /// <para>
        /// Regular expression: (Units | CoordinateSystem? | Project? | Application* | Alignments* | CgPoints* | Amendment* | GradeModel* | Monuments* | Parcels* | PlanFeatures* | PipeNetworks* | Roadways* | Surfaces* | Survey* | FeatureDictionary* | any)+
        /// </para>
        /// </summary>
        public virtual IList<Application> Application {
            get {
                if ((this.ApplicationField == null)) {
                    this.ApplicationField = new XTypedList<Application>(this, LinqToXsdTypeManager.Instance, ApplicationXName);
                }
                return this.ApplicationField;
            }
            set {
                if ((value == null)) {
                    this.ApplicationField = null;
                }
                else {
                    if ((this.ApplicationField == null)) {
                        this.ApplicationField = XTypedList<Application>.Initialize(this, LinqToXsdTypeManager.Instance, value, ApplicationXName);
                    }
                    else {
                        XTypedServices.SetList<Application>(this.ApplicationField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating, choice
        /// </para>
        /// <para>
        /// Regular expression: (Units | CoordinateSystem? | Project? | Application* | Alignments* | CgPoints* | Amendment* | GradeModel* | Monuments* | Parcels* | PlanFeatures* | PipeNetworks* | Roadways* | Surfaces* | Survey* | FeatureDictionary* | any)+
        /// </para>
        /// </summary>
        public virtual IList<Alignments> Alignments {
            get {
                if ((this.AlignmentsField == null)) {
                    this.AlignmentsField = new XTypedList<Alignments>(this, LinqToXsdTypeManager.Instance, AlignmentsXName);
                }
                return this.AlignmentsField;
            }
            set {
                if ((value == null)) {
                    this.AlignmentsField = null;
                }
                else {
                    if ((this.AlignmentsField == null)) {
                        this.AlignmentsField = XTypedList<Alignments>.Initialize(this, LinqToXsdTypeManager.Instance, value, AlignmentsXName);
                    }
                    else {
                        XTypedServices.SetList<Alignments>(this.AlignmentsField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating, choice
        /// </para>
        /// <para>
        /// Regular expression: (Units | CoordinateSystem? | Project? | Application* | Alignments* | CgPoints* | Amendment* | GradeModel* | Monuments* | Parcels* | PlanFeatures* | PipeNetworks* | Roadways* | Surfaces* | Survey* | FeatureDictionary* | any)+
        /// </para>
        /// </summary>
        public virtual IList<CgPoints> CgPoints {
            get {
                if ((this.CgPointsField == null)) {
                    this.CgPointsField = new XTypedList<CgPoints>(this, LinqToXsdTypeManager.Instance, CgPointsXName);
                }
                return this.CgPointsField;
            }
            set {
                if ((value == null)) {
                    this.CgPointsField = null;
                }
                else {
                    if ((this.CgPointsField == null)) {
                        this.CgPointsField = XTypedList<CgPoints>.Initialize(this, LinqToXsdTypeManager.Instance, value, CgPointsXName);
                    }
                    else {
                        XTypedServices.SetList<CgPoints>(this.CgPointsField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating, choice
        /// </para>
        /// <para>
        /// Regular expression: (Units | CoordinateSystem? | Project? | Application* | Alignments* | CgPoints* | Amendment* | GradeModel* | Monuments* | Parcels* | PlanFeatures* | PipeNetworks* | Roadways* | Surfaces* | Survey* | FeatureDictionary* | any)+
        /// </para>
        /// </summary>
        public virtual IList<Amendment> Amendment {
            get {
                if ((this.AmendmentField == null)) {
                    this.AmendmentField = new XTypedList<Amendment>(this, LinqToXsdTypeManager.Instance, AmendmentXName);
                }
                return this.AmendmentField;
            }
            set {
                if ((value == null)) {
                    this.AmendmentField = null;
                }
                else {
                    if ((this.AmendmentField == null)) {
                        this.AmendmentField = XTypedList<Amendment>.Initialize(this, LinqToXsdTypeManager.Instance, value, AmendmentXName);
                    }
                    else {
                        XTypedServices.SetList<Amendment>(this.AmendmentField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating, choice
        /// </para>
        /// <para>
        /// Regular expression: (Units | CoordinateSystem? | Project? | Application* | Alignments* | CgPoints* | Amendment* | GradeModel* | Monuments* | Parcels* | PlanFeatures* | PipeNetworks* | Roadways* | Surfaces* | Survey* | FeatureDictionary* | any)+
        /// </para>
        /// </summary>
        public virtual IList<GradeModel> GradeModel {
            get {
                if ((this.GradeModelField == null)) {
                    this.GradeModelField = new XTypedList<GradeModel>(this, LinqToXsdTypeManager.Instance, GradeModelXName);
                }
                return this.GradeModelField;
            }
            set {
                if ((value == null)) {
                    this.GradeModelField = null;
                }
                else {
                    if ((this.GradeModelField == null)) {
                        this.GradeModelField = XTypedList<GradeModel>.Initialize(this, LinqToXsdTypeManager.Instance, value, GradeModelXName);
                    }
                    else {
                        XTypedServices.SetList<GradeModel>(this.GradeModelField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating, choice
        /// </para>
        /// <para>
        /// Regular expression: (Units | CoordinateSystem? | Project? | Application* | Alignments* | CgPoints* | Amendment* | GradeModel* | Monuments* | Parcels* | PlanFeatures* | PipeNetworks* | Roadways* | Surfaces* | Survey* | FeatureDictionary* | any)+
        /// </para>
        /// </summary>
        public virtual IList<Monuments> Monuments {
            get {
                if ((this.MonumentsField == null)) {
                    this.MonumentsField = new XTypedList<Monuments>(this, LinqToXsdTypeManager.Instance, MonumentsXName);
                }
                return this.MonumentsField;
            }
            set {
                if ((value == null)) {
                    this.MonumentsField = null;
                }
                else {
                    if ((this.MonumentsField == null)) {
                        this.MonumentsField = XTypedList<Monuments>.Initialize(this, LinqToXsdTypeManager.Instance, value, MonumentsXName);
                    }
                    else {
                        XTypedServices.SetList<Monuments>(this.MonumentsField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating, choice
        /// </para>
        /// <para>
        /// Regular expression: (Units | CoordinateSystem? | Project? | Application* | Alignments* | CgPoints* | Amendment* | GradeModel* | Monuments* | Parcels* | PlanFeatures* | PipeNetworks* | Roadways* | Surfaces* | Survey* | FeatureDictionary* | any)+
        /// </para>
        /// </summary>
        public virtual IList<Parcels> Parcels {
            get {
                if ((this.ParcelsField == null)) {
                    this.ParcelsField = new XTypedList<Parcels>(this, LinqToXsdTypeManager.Instance, ParcelsXName);
                }
                return this.ParcelsField;
            }
            set {
                if ((value == null)) {
                    this.ParcelsField = null;
                }
                else {
                    if ((this.ParcelsField == null)) {
                        this.ParcelsField = XTypedList<Parcels>.Initialize(this, LinqToXsdTypeManager.Instance, value, ParcelsXName);
                    }
                    else {
                        XTypedServices.SetList<Parcels>(this.ParcelsField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating, choice
        /// </para>
        /// <para>
        /// Regular expression: (Units | CoordinateSystem? | Project? | Application* | Alignments* | CgPoints* | Amendment* | GradeModel* | Monuments* | Parcels* | PlanFeatures* | PipeNetworks* | Roadways* | Surfaces* | Survey* | FeatureDictionary* | any)+
        /// </para>
        /// </summary>
        public virtual IList<PlanFeatures> PlanFeatures {
            get {
                if ((this.PlanFeaturesField == null)) {
                    this.PlanFeaturesField = new XTypedList<PlanFeatures>(this, LinqToXsdTypeManager.Instance, PlanFeaturesXName);
                }
                return this.PlanFeaturesField;
            }
            set {
                if ((value == null)) {
                    this.PlanFeaturesField = null;
                }
                else {
                    if ((this.PlanFeaturesField == null)) {
                        this.PlanFeaturesField = XTypedList<PlanFeatures>.Initialize(this, LinqToXsdTypeManager.Instance, value, PlanFeaturesXName);
                    }
                    else {
                        XTypedServices.SetList<PlanFeatures>(this.PlanFeaturesField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating, choice
        /// </para>
        /// <para>
        /// Regular expression: (Units | CoordinateSystem? | Project? | Application* | Alignments* | CgPoints* | Amendment* | GradeModel* | Monuments* | Parcels* | PlanFeatures* | PipeNetworks* | Roadways* | Surfaces* | Survey* | FeatureDictionary* | any)+
        /// </para>
        /// </summary>
        public virtual IList<PipeNetworks> PipeNetworks {
            get {
                if ((this.PipeNetworksField == null)) {
                    this.PipeNetworksField = new XTypedList<PipeNetworks>(this, LinqToXsdTypeManager.Instance, PipeNetworksXName);
                }
                return this.PipeNetworksField;
            }
            set {
                if ((value == null)) {
                    this.PipeNetworksField = null;
                }
                else {
                    if ((this.PipeNetworksField == null)) {
                        this.PipeNetworksField = XTypedList<PipeNetworks>.Initialize(this, LinqToXsdTypeManager.Instance, value, PipeNetworksXName);
                    }
                    else {
                        XTypedServices.SetList<PipeNetworks>(this.PipeNetworksField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating, choice
        /// </para>
        /// <para>
        /// Regular expression: (Units | CoordinateSystem? | Project? | Application* | Alignments* | CgPoints* | Amendment* | GradeModel* | Monuments* | Parcels* | PlanFeatures* | PipeNetworks* | Roadways* | Surfaces* | Survey* | FeatureDictionary* | any)+
        /// </para>
        /// </summary>
        public virtual IList<Roadways> Roadways {
            get {
                if ((this.RoadwaysField == null)) {
                    this.RoadwaysField = new XTypedList<Roadways>(this, LinqToXsdTypeManager.Instance, RoadwaysXName);
                }
                return this.RoadwaysField;
            }
            set {
                if ((value == null)) {
                    this.RoadwaysField = null;
                }
                else {
                    if ((this.RoadwaysField == null)) {
                        this.RoadwaysField = XTypedList<Roadways>.Initialize(this, LinqToXsdTypeManager.Instance, value, RoadwaysXName);
                    }
                    else {
                        XTypedServices.SetList<Roadways>(this.RoadwaysField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating, choice
        /// </para>
        /// <para>
        /// Regular expression: (Units | CoordinateSystem? | Project? | Application* | Alignments* | CgPoints* | Amendment* | GradeModel* | Monuments* | Parcels* | PlanFeatures* | PipeNetworks* | Roadways* | Surfaces* | Survey* | FeatureDictionary* | any)+
        /// </para>
        /// </summary>
        public virtual IList<Surfaces> Surfaces {
            get {
                if ((this.SurfacesField == null)) {
                    this.SurfacesField = new XTypedList<Surfaces>(this, LinqToXsdTypeManager.Instance, SurfacesXName);
                }
                return this.SurfacesField;
            }
            set {
                if ((value == null)) {
                    this.SurfacesField = null;
                }
                else {
                    if ((this.SurfacesField == null)) {
                        this.SurfacesField = XTypedList<Surfaces>.Initialize(this, LinqToXsdTypeManager.Instance, value, SurfacesXName);
                    }
                    else {
                        XTypedServices.SetList<Surfaces>(this.SurfacesField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating, choice
        /// </para>
        /// <para>
        /// Regular expression: (Units | CoordinateSystem? | Project? | Application* | Alignments* | CgPoints* | Amendment* | GradeModel* | Monuments* | Parcels* | PlanFeatures* | PipeNetworks* | Roadways* | Surfaces* | Survey* | FeatureDictionary* | any)+
        /// </para>
        /// </summary>
        public virtual IList<Survey> Survey {
            get {
                if ((this.SurveyField == null)) {
                    this.SurveyField = new XTypedList<Survey>(this, LinqToXsdTypeManager.Instance, SurveyXName);
                }
                return this.SurveyField;
            }
            set {
                if ((value == null)) {
                    this.SurveyField = null;
                }
                else {
                    if ((this.SurveyField == null)) {
                        this.SurveyField = XTypedList<Survey>.Initialize(this, LinqToXsdTypeManager.Instance, value, SurveyXName);
                    }
                    else {
                        XTypedServices.SetList<Survey>(this.SurveyField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating, choice
        /// </para>
        /// <para>
        /// Regular expression: (Units | CoordinateSystem? | Project? | Application* | Alignments* | CgPoints* | Amendment* | GradeModel* | Monuments* | Parcels* | PlanFeatures* | PipeNetworks* | Roadways* | Surfaces* | Survey* | FeatureDictionary* | any)+
        /// </para>
        /// </summary>
        public virtual IList<FeatureDictionary> FeatureDictionary {
            get {
                if ((this.FeatureDictionaryField == null)) {
                    this.FeatureDictionaryField = new XTypedList<FeatureDictionary>(this, LinqToXsdTypeManager.Instance, FeatureDictionaryXName);
                }
                return this.FeatureDictionaryField;
            }
            set {
                if ((value == null)) {
                    this.FeatureDictionaryField = null;
                }
                else {
                    if ((this.FeatureDictionaryField == null)) {
                        this.FeatureDictionaryField = XTypedList<FeatureDictionary>.Initialize(this, LinqToXsdTypeManager.Instance, value, FeatureDictionaryXName);
                    }
                    else {
                        XTypedServices.SetList<FeatureDictionary>(this.FeatureDictionaryField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Units | CoordinateSystem? | Project? | Application* | Alignments* | CgPoints* | Amendment* | GradeModel* | Monuments* | Parcels* | PlanFeatures* | PipeNetworks* | Roadways* | Surfaces* | Survey* | FeatureDictionary* | any)+
        /// </para>
        /// </summary>
        public virtual IEnumerable<XElement> Any {
            get {
                return this.GetWildCards(WildCard.DefaultWildCard);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual System.DateTime date {
            get {
                XAttribute x = this.Attribute(dateXName);
                return XTypedServices.ParseValue<System.DateTime>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date).Datatype);
            }
            set {
                this.SetAttribute(dateXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual System.DateTime time {
            get {
                XAttribute x = this.Attribute(timeXName);
                return XTypedServices.ParseValue<System.DateTime>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Time).Datatype);
            }
            set {
                this.SetAttribute(timeXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Time).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual string version {
            get {
                XAttribute x = this.Attribute(versionXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(versionXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string language {
            get {
                XAttribute x = this.Attribute(languageXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(languageXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Boolean? readOnly {
            get {
                XAttribute x = this.Attribute(readOnlyXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
            set {
                this.SetAttribute(readOnlyXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Int32? LandXMLId {
            get {
                XAttribute x = this.Attribute(LandXMLIdXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<int>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
            set {
                this.SetAttribute(LandXMLIdXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Decimal? crc {
            get {
                XAttribute x = this.Attribute(crcXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                this.SetAttribute(crcXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static LandXML Load(string xmlFile) {
            return XTypedServices.Load<LandXML>(xmlFile);
        }
        
        public static LandXML Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<LandXML>(xmlFile);
        }
        
        public static LandXML Parse(string xml) {
            return XTypedServices.Parse<LandXML>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<LandXML>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(UnitsXName, typeof(Units));
            localElementDictionary.Add(CoordinateSystemXName, typeof(CoordinateSystem));
            localElementDictionary.Add(ProjectXName, typeof(Project));
            localElementDictionary.Add(ApplicationXName, typeof(Application));
            localElementDictionary.Add(AlignmentsXName, typeof(Alignments));
            localElementDictionary.Add(CgPointsXName, typeof(CgPoints));
            localElementDictionary.Add(AmendmentXName, typeof(Amendment));
            localElementDictionary.Add(GradeModelXName, typeof(GradeModel));
            localElementDictionary.Add(MonumentsXName, typeof(Monuments));
            localElementDictionary.Add(ParcelsXName, typeof(Parcels));
            localElementDictionary.Add(PlanFeaturesXName, typeof(PlanFeatures));
            localElementDictionary.Add(PipeNetworksXName, typeof(PipeNetworks));
            localElementDictionary.Add(RoadwaysXName, typeof(Roadways));
            localElementDictionary.Add(SurfacesXName, typeof(Surfaces));
            localElementDictionary.Add(SurveyXName, typeof(Survey));
            localElementDictionary.Add(FeatureDictionaryXName, typeof(FeatureDictionary));
        }
        
        FSM IXMetaData.GetValidationStates() {
            return validationStates;
        }
        
        private static void InitFSM() {
            Dictionary<int, Transitions> transitions = new Dictionary<int, Transitions>();
            transitions.Add(1, new Transitions(new SingleTransition(System.Xml.Linq.XName.Get("Units", "http://www.landxml.org/schema/LandXML-1.2"), 2), new SingleTransition(System.Xml.Linq.XName.Get("CoordinateSystem", "http://www.landxml.org/schema/LandXML-1.2"), 4), new SingleTransition(System.Xml.Linq.XName.Get("Project", "http://www.landxml.org/schema/LandXML-1.2"), 6), new SingleTransition(System.Xml.Linq.XName.Get("Application", "http://www.landxml.org/schema/LandXML-1.2"), 7), new SingleTransition(System.Xml.Linq.XName.Get("Alignments", "http://www.landxml.org/schema/LandXML-1.2"), 9), new SingleTransition(System.Xml.Linq.XName.Get("CgPoints", "http://www.landxml.org/schema/LandXML-1.2"), 11), new SingleTransition(System.Xml.Linq.XName.Get("Amendment", "http://www.landxml.org/schema/LandXML-1.2"), 13), new SingleTransition(System.Xml.Linq.XName.Get("GradeModel", "http://www.landxml.org/schema/LandXML-1.2"), 15), new SingleTransition(System.Xml.Linq.XName.Get("Monuments", "http://www.landxml.org/schema/LandXML-1.2"), 17), new SingleTransition(System.Xml.Linq.XName.Get("Parcels", "http://www.landxml.org/schema/LandXML-1.2"), 19), new SingleTransition(System.Xml.Linq.XName.Get("PlanFeatures", "http://www.landxml.org/schema/LandXML-1.2"), 21), new SingleTransition(System.Xml.Linq.XName.Get("PipeNetworks", "http://www.landxml.org/schema/LandXML-1.2"), 23), new SingleTransition(System.Xml.Linq.XName.Get("Roadways", "http://www.landxml.org/schema/LandXML-1.2"), 25), new SingleTransition(System.Xml.Linq.XName.Get("Surfaces", "http://www.landxml.org/schema/LandXML-1.2"), 27), new SingleTransition(System.Xml.Linq.XName.Get("Survey", "http://www.landxml.org/schema/LandXML-1.2"), 29), new SingleTransition(System.Xml.Linq.XName.Get("FeatureDictionary", "http://www.landxml.org/schema/LandXML-1.2"), 31), new SingleTransition(new WildCard("##other", "http://www.landxml.org/schema/LandXML-1.2"), 34)));
            transitions.Add(2, new Transitions(new SingleTransition(System.Xml.Linq.XName.Get("Units", "http://www.landxml.org/schema/LandXML-1.2"), 2), new SingleTransition(System.Xml.Linq.XName.Get("CoordinateSystem", "http://www.landxml.org/schema/LandXML-1.2"), 4), new SingleTransition(System.Xml.Linq.XName.Get("Project", "http://www.landxml.org/schema/LandXML-1.2"), 6), new SingleTransition(System.Xml.Linq.XName.Get("Application", "http://www.landxml.org/schema/LandXML-1.2"), 7), new SingleTransition(System.Xml.Linq.XName.Get("Alignments", "http://www.landxml.org/schema/LandXML-1.2"), 9), new SingleTransition(System.Xml.Linq.XName.Get("CgPoints", "http://www.landxml.org/schema/LandXML-1.2"), 11), new SingleTransition(System.Xml.Linq.XName.Get("Amendment", "http://www.landxml.org/schema/LandXML-1.2"), 13), new SingleTransition(System.Xml.Linq.XName.Get("GradeModel", "http://www.landxml.org/schema/LandXML-1.2"), 15), new SingleTransition(System.Xml.Linq.XName.Get("Monuments", "http://www.landxml.org/schema/LandXML-1.2"), 17), new SingleTransition(System.Xml.Linq.XName.Get("Parcels", "http://www.landxml.org/schema/LandXML-1.2"), 19), new SingleTransition(System.Xml.Linq.XName.Get("PlanFeatures", "http://www.landxml.org/schema/LandXML-1.2"), 21), new SingleTransition(System.Xml.Linq.XName.Get("PipeNetworks", "http://www.landxml.org/schema/LandXML-1.2"), 23), new SingleTransition(System.Xml.Linq.XName.Get("Roadways", "http://www.landxml.org/schema/LandXML-1.2"), 25), new SingleTransition(System.Xml.Linq.XName.Get("Surfaces", "http://www.landxml.org/schema/LandXML-1.2"), 27), new SingleTransition(System.Xml.Linq.XName.Get("Survey", "http://www.landxml.org/schema/LandXML-1.2"), 29), new SingleTransition(System.Xml.Linq.XName.Get("FeatureDictionary", "http://www.landxml.org/schema/LandXML-1.2"), 31), new SingleTransition(new WildCard("##other", "http://www.landxml.org/schema/LandXML-1.2"), 34)));
            transitions.Add(4, new Transitions(new SingleTransition(System.Xml.Linq.XName.Get("Units", "http://www.landxml.org/schema/LandXML-1.2"), 2), new SingleTransition(System.Xml.Linq.XName.Get("CoordinateSystem", "http://www.landxml.org/schema/LandXML-1.2"), 4), new SingleTransition(System.Xml.Linq.XName.Get("Project", "http://www.landxml.org/schema/LandXML-1.2"), 6), new SingleTransition(System.Xml.Linq.XName.Get("Application", "http://www.landxml.org/schema/LandXML-1.2"), 7), new SingleTransition(System.Xml.Linq.XName.Get("Alignments", "http://www.landxml.org/schema/LandXML-1.2"), 9), new SingleTransition(System.Xml.Linq.XName.Get("CgPoints", "http://www.landxml.org/schema/LandXML-1.2"), 11), new SingleTransition(System.Xml.Linq.XName.Get("Amendment", "http://www.landxml.org/schema/LandXML-1.2"), 13), new SingleTransition(System.Xml.Linq.XName.Get("GradeModel", "http://www.landxml.org/schema/LandXML-1.2"), 15), new SingleTransition(System.Xml.Linq.XName.Get("Monuments", "http://www.landxml.org/schema/LandXML-1.2"), 17), new SingleTransition(System.Xml.Linq.XName.Get("Parcels", "http://www.landxml.org/schema/LandXML-1.2"), 19), new SingleTransition(System.Xml.Linq.XName.Get("PlanFeatures", "http://www.landxml.org/schema/LandXML-1.2"), 21), new SingleTransition(System.Xml.Linq.XName.Get("PipeNetworks", "http://www.landxml.org/schema/LandXML-1.2"), 23), new SingleTransition(System.Xml.Linq.XName.Get("Roadways", "http://www.landxml.org/schema/LandXML-1.2"), 25), new SingleTransition(System.Xml.Linq.XName.Get("Surfaces", "http://www.landxml.org/schema/LandXML-1.2"), 27), new SingleTransition(System.Xml.Linq.XName.Get("Survey", "http://www.landxml.org/schema/LandXML-1.2"), 29), new SingleTransition(System.Xml.Linq.XName.Get("FeatureDictionary", "http://www.landxml.org/schema/LandXML-1.2"), 31), new SingleTransition(new WildCard("##other", "http://www.landxml.org/schema/LandXML-1.2"), 34)));
            transitions.Add(6, new Transitions(new SingleTransition(System.Xml.Linq.XName.Get("Units", "http://www.landxml.org/schema/LandXML-1.2"), 2), new SingleTransition(System.Xml.Linq.XName.Get("CoordinateSystem", "http://www.landxml.org/schema/LandXML-1.2"), 4), new SingleTransition(System.Xml.Linq.XName.Get("Project", "http://www.landxml.org/schema/LandXML-1.2"), 6), new SingleTransition(System.Xml.Linq.XName.Get("Application", "http://www.landxml.org/schema/LandXML-1.2"), 7), new SingleTransition(System.Xml.Linq.XName.Get("Alignments", "http://www.landxml.org/schema/LandXML-1.2"), 9), new SingleTransition(System.Xml.Linq.XName.Get("CgPoints", "http://www.landxml.org/schema/LandXML-1.2"), 11), new SingleTransition(System.Xml.Linq.XName.Get("Amendment", "http://www.landxml.org/schema/LandXML-1.2"), 13), new SingleTransition(System.Xml.Linq.XName.Get("GradeModel", "http://www.landxml.org/schema/LandXML-1.2"), 15), new SingleTransition(System.Xml.Linq.XName.Get("Monuments", "http://www.landxml.org/schema/LandXML-1.2"), 17), new SingleTransition(System.Xml.Linq.XName.Get("Parcels", "http://www.landxml.org/schema/LandXML-1.2"), 19), new SingleTransition(System.Xml.Linq.XName.Get("PlanFeatures", "http://www.landxml.org/schema/LandXML-1.2"), 21), new SingleTransition(System.Xml.Linq.XName.Get("PipeNetworks", "http://www.landxml.org/schema/LandXML-1.2"), 23), new SingleTransition(System.Xml.Linq.XName.Get("Roadways", "http://www.landxml.org/schema/LandXML-1.2"), 25), new SingleTransition(System.Xml.Linq.XName.Get("Surfaces", "http://www.landxml.org/schema/LandXML-1.2"), 27), new SingleTransition(System.Xml.Linq.XName.Get("Survey", "http://www.landxml.org/schema/LandXML-1.2"), 29), new SingleTransition(System.Xml.Linq.XName.Get("FeatureDictionary", "http://www.landxml.org/schema/LandXML-1.2"), 31), new SingleTransition(new WildCard("##other", "http://www.landxml.org/schema/LandXML-1.2"), 34)));
            transitions.Add(7, new Transitions(new SingleTransition(System.Xml.Linq.XName.Get("Application", "http://www.landxml.org/schema/LandXML-1.2"), 7), new SingleTransition(System.Xml.Linq.XName.Get("Units", "http://www.landxml.org/schema/LandXML-1.2"), 2), new SingleTransition(System.Xml.Linq.XName.Get("CoordinateSystem", "http://www.landxml.org/schema/LandXML-1.2"), 4), new SingleTransition(System.Xml.Linq.XName.Get("Project", "http://www.landxml.org/schema/LandXML-1.2"), 6), new SingleTransition(System.Xml.Linq.XName.Get("Alignments", "http://www.landxml.org/schema/LandXML-1.2"), 9), new SingleTransition(System.Xml.Linq.XName.Get("CgPoints", "http://www.landxml.org/schema/LandXML-1.2"), 11), new SingleTransition(System.Xml.Linq.XName.Get("Amendment", "http://www.landxml.org/schema/LandXML-1.2"), 13), new SingleTransition(System.Xml.Linq.XName.Get("GradeModel", "http://www.landxml.org/schema/LandXML-1.2"), 15), new SingleTransition(System.Xml.Linq.XName.Get("Monuments", "http://www.landxml.org/schema/LandXML-1.2"), 17), new SingleTransition(System.Xml.Linq.XName.Get("Parcels", "http://www.landxml.org/schema/LandXML-1.2"), 19), new SingleTransition(System.Xml.Linq.XName.Get("PlanFeatures", "http://www.landxml.org/schema/LandXML-1.2"), 21), new SingleTransition(System.Xml.Linq.XName.Get("PipeNetworks", "http://www.landxml.org/schema/LandXML-1.2"), 23), new SingleTransition(System.Xml.Linq.XName.Get("Roadways", "http://www.landxml.org/schema/LandXML-1.2"), 25), new SingleTransition(System.Xml.Linq.XName.Get("Surfaces", "http://www.landxml.org/schema/LandXML-1.2"), 27), new SingleTransition(System.Xml.Linq.XName.Get("Survey", "http://www.landxml.org/schema/LandXML-1.2"), 29), new SingleTransition(System.Xml.Linq.XName.Get("FeatureDictionary", "http://www.landxml.org/schema/LandXML-1.2"), 31), new SingleTransition(new WildCard("##other", "http://www.landxml.org/schema/LandXML-1.2"), 34)));
            transitions.Add(9, new Transitions(new SingleTransition(System.Xml.Linq.XName.Get("Alignments", "http://www.landxml.org/schema/LandXML-1.2"), 9), new SingleTransition(System.Xml.Linq.XName.Get("Units", "http://www.landxml.org/schema/LandXML-1.2"), 2), new SingleTransition(System.Xml.Linq.XName.Get("CoordinateSystem", "http://www.landxml.org/schema/LandXML-1.2"), 4), new SingleTransition(System.Xml.Linq.XName.Get("Project", "http://www.landxml.org/schema/LandXML-1.2"), 6), new SingleTransition(System.Xml.Linq.XName.Get("Application", "http://www.landxml.org/schema/LandXML-1.2"), 7), new SingleTransition(System.Xml.Linq.XName.Get("CgPoints", "http://www.landxml.org/schema/LandXML-1.2"), 11), new SingleTransition(System.Xml.Linq.XName.Get("Amendment", "http://www.landxml.org/schema/LandXML-1.2"), 13), new SingleTransition(System.Xml.Linq.XName.Get("GradeModel", "http://www.landxml.org/schema/LandXML-1.2"), 15), new SingleTransition(System.Xml.Linq.XName.Get("Monuments", "http://www.landxml.org/schema/LandXML-1.2"), 17), new SingleTransition(System.Xml.Linq.XName.Get("Parcels", "http://www.landxml.org/schema/LandXML-1.2"), 19), new SingleTransition(System.Xml.Linq.XName.Get("PlanFeatures", "http://www.landxml.org/schema/LandXML-1.2"), 21), new SingleTransition(System.Xml.Linq.XName.Get("PipeNetworks", "http://www.landxml.org/schema/LandXML-1.2"), 23), new SingleTransition(System.Xml.Linq.XName.Get("Roadways", "http://www.landxml.org/schema/LandXML-1.2"), 25), new SingleTransition(System.Xml.Linq.XName.Get("Surfaces", "http://www.landxml.org/schema/LandXML-1.2"), 27), new SingleTransition(System.Xml.Linq.XName.Get("Survey", "http://www.landxml.org/schema/LandXML-1.2"), 29), new SingleTransition(System.Xml.Linq.XName.Get("FeatureDictionary", "http://www.landxml.org/schema/LandXML-1.2"), 31), new SingleTransition(new WildCard("##other", "http://www.landxml.org/schema/LandXML-1.2"), 34)));
            transitions.Add(11, new Transitions(new SingleTransition(System.Xml.Linq.XName.Get("CgPoints", "http://www.landxml.org/schema/LandXML-1.2"), 11), new SingleTransition(System.Xml.Linq.XName.Get("Units", "http://www.landxml.org/schema/LandXML-1.2"), 2), new SingleTransition(System.Xml.Linq.XName.Get("CoordinateSystem", "http://www.landxml.org/schema/LandXML-1.2"), 4), new SingleTransition(System.Xml.Linq.XName.Get("Project", "http://www.landxml.org/schema/LandXML-1.2"), 6), new SingleTransition(System.Xml.Linq.XName.Get("Application", "http://www.landxml.org/schema/LandXML-1.2"), 7), new SingleTransition(System.Xml.Linq.XName.Get("Alignments", "http://www.landxml.org/schema/LandXML-1.2"), 9), new SingleTransition(System.Xml.Linq.XName.Get("Amendment", "http://www.landxml.org/schema/LandXML-1.2"), 13), new SingleTransition(System.Xml.Linq.XName.Get("GradeModel", "http://www.landxml.org/schema/LandXML-1.2"), 15), new SingleTransition(System.Xml.Linq.XName.Get("Monuments", "http://www.landxml.org/schema/LandXML-1.2"), 17), new SingleTransition(System.Xml.Linq.XName.Get("Parcels", "http://www.landxml.org/schema/LandXML-1.2"), 19), new SingleTransition(System.Xml.Linq.XName.Get("PlanFeatures", "http://www.landxml.org/schema/LandXML-1.2"), 21), new SingleTransition(System.Xml.Linq.XName.Get("PipeNetworks", "http://www.landxml.org/schema/LandXML-1.2"), 23), new SingleTransition(System.Xml.Linq.XName.Get("Roadways", "http://www.landxml.org/schema/LandXML-1.2"), 25), new SingleTransition(System.Xml.Linq.XName.Get("Surfaces", "http://www.landxml.org/schema/LandXML-1.2"), 27), new SingleTransition(System.Xml.Linq.XName.Get("Survey", "http://www.landxml.org/schema/LandXML-1.2"), 29), new SingleTransition(System.Xml.Linq.XName.Get("FeatureDictionary", "http://www.landxml.org/schema/LandXML-1.2"), 31), new SingleTransition(new WildCard("##other", "http://www.landxml.org/schema/LandXML-1.2"), 34)));
            transitions.Add(13, new Transitions(new SingleTransition(System.Xml.Linq.XName.Get("Amendment", "http://www.landxml.org/schema/LandXML-1.2"), 13), new SingleTransition(System.Xml.Linq.XName.Get("Units", "http://www.landxml.org/schema/LandXML-1.2"), 2), new SingleTransition(System.Xml.Linq.XName.Get("CoordinateSystem", "http://www.landxml.org/schema/LandXML-1.2"), 4), new SingleTransition(System.Xml.Linq.XName.Get("Project", "http://www.landxml.org/schema/LandXML-1.2"), 6), new SingleTransition(System.Xml.Linq.XName.Get("Application", "http://www.landxml.org/schema/LandXML-1.2"), 7), new SingleTransition(System.Xml.Linq.XName.Get("Alignments", "http://www.landxml.org/schema/LandXML-1.2"), 9), new SingleTransition(System.Xml.Linq.XName.Get("CgPoints", "http://www.landxml.org/schema/LandXML-1.2"), 11), new SingleTransition(System.Xml.Linq.XName.Get("GradeModel", "http://www.landxml.org/schema/LandXML-1.2"), 15), new SingleTransition(System.Xml.Linq.XName.Get("Monuments", "http://www.landxml.org/schema/LandXML-1.2"), 17), new SingleTransition(System.Xml.Linq.XName.Get("Parcels", "http://www.landxml.org/schema/LandXML-1.2"), 19), new SingleTransition(System.Xml.Linq.XName.Get("PlanFeatures", "http://www.landxml.org/schema/LandXML-1.2"), 21), new SingleTransition(System.Xml.Linq.XName.Get("PipeNetworks", "http://www.landxml.org/schema/LandXML-1.2"), 23), new SingleTransition(System.Xml.Linq.XName.Get("Roadways", "http://www.landxml.org/schema/LandXML-1.2"), 25), new SingleTransition(System.Xml.Linq.XName.Get("Surfaces", "http://www.landxml.org/schema/LandXML-1.2"), 27), new SingleTransition(System.Xml.Linq.XName.Get("Survey", "http://www.landxml.org/schema/LandXML-1.2"), 29), new SingleTransition(System.Xml.Linq.XName.Get("FeatureDictionary", "http://www.landxml.org/schema/LandXML-1.2"), 31), new SingleTransition(new WildCard("##other", "http://www.landxml.org/schema/LandXML-1.2"), 34)));
            transitions.Add(15, new Transitions(new SingleTransition(System.Xml.Linq.XName.Get("GradeModel", "http://www.landxml.org/schema/LandXML-1.2"), 15), new SingleTransition(System.Xml.Linq.XName.Get("Units", "http://www.landxml.org/schema/LandXML-1.2"), 2), new SingleTransition(System.Xml.Linq.XName.Get("CoordinateSystem", "http://www.landxml.org/schema/LandXML-1.2"), 4), new SingleTransition(System.Xml.Linq.XName.Get("Project", "http://www.landxml.org/schema/LandXML-1.2"), 6), new SingleTransition(System.Xml.Linq.XName.Get("Application", "http://www.landxml.org/schema/LandXML-1.2"), 7), new SingleTransition(System.Xml.Linq.XName.Get("Alignments", "http://www.landxml.org/schema/LandXML-1.2"), 9), new SingleTransition(System.Xml.Linq.XName.Get("CgPoints", "http://www.landxml.org/schema/LandXML-1.2"), 11), new SingleTransition(System.Xml.Linq.XName.Get("Amendment", "http://www.landxml.org/schema/LandXML-1.2"), 13), new SingleTransition(System.Xml.Linq.XName.Get("Monuments", "http://www.landxml.org/schema/LandXML-1.2"), 17), new SingleTransition(System.Xml.Linq.XName.Get("Parcels", "http://www.landxml.org/schema/LandXML-1.2"), 19), new SingleTransition(System.Xml.Linq.XName.Get("PlanFeatures", "http://www.landxml.org/schema/LandXML-1.2"), 21), new SingleTransition(System.Xml.Linq.XName.Get("PipeNetworks", "http://www.landxml.org/schema/LandXML-1.2"), 23), new SingleTransition(System.Xml.Linq.XName.Get("Roadways", "http://www.landxml.org/schema/LandXML-1.2"), 25), new SingleTransition(System.Xml.Linq.XName.Get("Surfaces", "http://www.landxml.org/schema/LandXML-1.2"), 27), new SingleTransition(System.Xml.Linq.XName.Get("Survey", "http://www.landxml.org/schema/LandXML-1.2"), 29), new SingleTransition(System.Xml.Linq.XName.Get("FeatureDictionary", "http://www.landxml.org/schema/LandXML-1.2"), 31), new SingleTransition(new WildCard("##other", "http://www.landxml.org/schema/LandXML-1.2"), 34)));
            transitions.Add(17, new Transitions(new SingleTransition(System.Xml.Linq.XName.Get("Monuments", "http://www.landxml.org/schema/LandXML-1.2"), 17), new SingleTransition(System.Xml.Linq.XName.Get("Units", "http://www.landxml.org/schema/LandXML-1.2"), 2), new SingleTransition(System.Xml.Linq.XName.Get("CoordinateSystem", "http://www.landxml.org/schema/LandXML-1.2"), 4), new SingleTransition(System.Xml.Linq.XName.Get("Project", "http://www.landxml.org/schema/LandXML-1.2"), 6), new SingleTransition(System.Xml.Linq.XName.Get("Application", "http://www.landxml.org/schema/LandXML-1.2"), 7), new SingleTransition(System.Xml.Linq.XName.Get("Alignments", "http://www.landxml.org/schema/LandXML-1.2"), 9), new SingleTransition(System.Xml.Linq.XName.Get("CgPoints", "http://www.landxml.org/schema/LandXML-1.2"), 11), new SingleTransition(System.Xml.Linq.XName.Get("Amendment", "http://www.landxml.org/schema/LandXML-1.2"), 13), new SingleTransition(System.Xml.Linq.XName.Get("GradeModel", "http://www.landxml.org/schema/LandXML-1.2"), 15), new SingleTransition(System.Xml.Linq.XName.Get("Parcels", "http://www.landxml.org/schema/LandXML-1.2"), 19), new SingleTransition(System.Xml.Linq.XName.Get("PlanFeatures", "http://www.landxml.org/schema/LandXML-1.2"), 21), new SingleTransition(System.Xml.Linq.XName.Get("PipeNetworks", "http://www.landxml.org/schema/LandXML-1.2"), 23), new SingleTransition(System.Xml.Linq.XName.Get("Roadways", "http://www.landxml.org/schema/LandXML-1.2"), 25), new SingleTransition(System.Xml.Linq.XName.Get("Surfaces", "http://www.landxml.org/schema/LandXML-1.2"), 27), new SingleTransition(System.Xml.Linq.XName.Get("Survey", "http://www.landxml.org/schema/LandXML-1.2"), 29), new SingleTransition(System.Xml.Linq.XName.Get("FeatureDictionary", "http://www.landxml.org/schema/LandXML-1.2"), 31), new SingleTransition(new WildCard("##other", "http://www.landxml.org/schema/LandXML-1.2"), 34)));
            transitions.Add(19, new Transitions(new SingleTransition(System.Xml.Linq.XName.Get("Parcels", "http://www.landxml.org/schema/LandXML-1.2"), 19), new SingleTransition(System.Xml.Linq.XName.Get("Units", "http://www.landxml.org/schema/LandXML-1.2"), 2), new SingleTransition(System.Xml.Linq.XName.Get("CoordinateSystem", "http://www.landxml.org/schema/LandXML-1.2"), 4), new SingleTransition(System.Xml.Linq.XName.Get("Project", "http://www.landxml.org/schema/LandXML-1.2"), 6), new SingleTransition(System.Xml.Linq.XName.Get("Application", "http://www.landxml.org/schema/LandXML-1.2"), 7), new SingleTransition(System.Xml.Linq.XName.Get("Alignments", "http://www.landxml.org/schema/LandXML-1.2"), 9), new SingleTransition(System.Xml.Linq.XName.Get("CgPoints", "http://www.landxml.org/schema/LandXML-1.2"), 11), new SingleTransition(System.Xml.Linq.XName.Get("Amendment", "http://www.landxml.org/schema/LandXML-1.2"), 13), new SingleTransition(System.Xml.Linq.XName.Get("GradeModel", "http://www.landxml.org/schema/LandXML-1.2"), 15), new SingleTransition(System.Xml.Linq.XName.Get("Monuments", "http://www.landxml.org/schema/LandXML-1.2"), 17), new SingleTransition(System.Xml.Linq.XName.Get("PlanFeatures", "http://www.landxml.org/schema/LandXML-1.2"), 21), new SingleTransition(System.Xml.Linq.XName.Get("PipeNetworks", "http://www.landxml.org/schema/LandXML-1.2"), 23), new SingleTransition(System.Xml.Linq.XName.Get("Roadways", "http://www.landxml.org/schema/LandXML-1.2"), 25), new SingleTransition(System.Xml.Linq.XName.Get("Surfaces", "http://www.landxml.org/schema/LandXML-1.2"), 27), new SingleTransition(System.Xml.Linq.XName.Get("Survey", "http://www.landxml.org/schema/LandXML-1.2"), 29), new SingleTransition(System.Xml.Linq.XName.Get("FeatureDictionary", "http://www.landxml.org/schema/LandXML-1.2"), 31), new SingleTransition(new WildCard("##other", "http://www.landxml.org/schema/LandXML-1.2"), 34)));
            transitions.Add(21, new Transitions(new SingleTransition(System.Xml.Linq.XName.Get("PlanFeatures", "http://www.landxml.org/schema/LandXML-1.2"), 21), new SingleTransition(System.Xml.Linq.XName.Get("Units", "http://www.landxml.org/schema/LandXML-1.2"), 2), new SingleTransition(System.Xml.Linq.XName.Get("CoordinateSystem", "http://www.landxml.org/schema/LandXML-1.2"), 4), new SingleTransition(System.Xml.Linq.XName.Get("Project", "http://www.landxml.org/schema/LandXML-1.2"), 6), new SingleTransition(System.Xml.Linq.XName.Get("Application", "http://www.landxml.org/schema/LandXML-1.2"), 7), new SingleTransition(System.Xml.Linq.XName.Get("Alignments", "http://www.landxml.org/schema/LandXML-1.2"), 9), new SingleTransition(System.Xml.Linq.XName.Get("CgPoints", "http://www.landxml.org/schema/LandXML-1.2"), 11), new SingleTransition(System.Xml.Linq.XName.Get("Amendment", "http://www.landxml.org/schema/LandXML-1.2"), 13), new SingleTransition(System.Xml.Linq.XName.Get("GradeModel", "http://www.landxml.org/schema/LandXML-1.2"), 15), new SingleTransition(System.Xml.Linq.XName.Get("Monuments", "http://www.landxml.org/schema/LandXML-1.2"), 17), new SingleTransition(System.Xml.Linq.XName.Get("Parcels", "http://www.landxml.org/schema/LandXML-1.2"), 19), new SingleTransition(System.Xml.Linq.XName.Get("PipeNetworks", "http://www.landxml.org/schema/LandXML-1.2"), 23), new SingleTransition(System.Xml.Linq.XName.Get("Roadways", "http://www.landxml.org/schema/LandXML-1.2"), 25), new SingleTransition(System.Xml.Linq.XName.Get("Surfaces", "http://www.landxml.org/schema/LandXML-1.2"), 27), new SingleTransition(System.Xml.Linq.XName.Get("Survey", "http://www.landxml.org/schema/LandXML-1.2"), 29), new SingleTransition(System.Xml.Linq.XName.Get("FeatureDictionary", "http://www.landxml.org/schema/LandXML-1.2"), 31), new SingleTransition(new WildCard("##other", "http://www.landxml.org/schema/LandXML-1.2"), 34)));
            transitions.Add(23, new Transitions(new SingleTransition(System.Xml.Linq.XName.Get("PipeNetworks", "http://www.landxml.org/schema/LandXML-1.2"), 23), new SingleTransition(System.Xml.Linq.XName.Get("Units", "http://www.landxml.org/schema/LandXML-1.2"), 2), new SingleTransition(System.Xml.Linq.XName.Get("CoordinateSystem", "http://www.landxml.org/schema/LandXML-1.2"), 4), new SingleTransition(System.Xml.Linq.XName.Get("Project", "http://www.landxml.org/schema/LandXML-1.2"), 6), new SingleTransition(System.Xml.Linq.XName.Get("Application", "http://www.landxml.org/schema/LandXML-1.2"), 7), new SingleTransition(System.Xml.Linq.XName.Get("Alignments", "http://www.landxml.org/schema/LandXML-1.2"), 9), new SingleTransition(System.Xml.Linq.XName.Get("CgPoints", "http://www.landxml.org/schema/LandXML-1.2"), 11), new SingleTransition(System.Xml.Linq.XName.Get("Amendment", "http://www.landxml.org/schema/LandXML-1.2"), 13), new SingleTransition(System.Xml.Linq.XName.Get("GradeModel", "http://www.landxml.org/schema/LandXML-1.2"), 15), new SingleTransition(System.Xml.Linq.XName.Get("Monuments", "http://www.landxml.org/schema/LandXML-1.2"), 17), new SingleTransition(System.Xml.Linq.XName.Get("Parcels", "http://www.landxml.org/schema/LandXML-1.2"), 19), new SingleTransition(System.Xml.Linq.XName.Get("PlanFeatures", "http://www.landxml.org/schema/LandXML-1.2"), 21), new SingleTransition(System.Xml.Linq.XName.Get("Roadways", "http://www.landxml.org/schema/LandXML-1.2"), 25), new SingleTransition(System.Xml.Linq.XName.Get("Surfaces", "http://www.landxml.org/schema/LandXML-1.2"), 27), new SingleTransition(System.Xml.Linq.XName.Get("Survey", "http://www.landxml.org/schema/LandXML-1.2"), 29), new SingleTransition(System.Xml.Linq.XName.Get("FeatureDictionary", "http://www.landxml.org/schema/LandXML-1.2"), 31), new SingleTransition(new WildCard("##other", "http://www.landxml.org/schema/LandXML-1.2"), 34)));
            transitions.Add(25, new Transitions(new SingleTransition(System.Xml.Linq.XName.Get("Roadways", "http://www.landxml.org/schema/LandXML-1.2"), 25), new SingleTransition(System.Xml.Linq.XName.Get("Units", "http://www.landxml.org/schema/LandXML-1.2"), 2), new SingleTransition(System.Xml.Linq.XName.Get("CoordinateSystem", "http://www.landxml.org/schema/LandXML-1.2"), 4), new SingleTransition(System.Xml.Linq.XName.Get("Project", "http://www.landxml.org/schema/LandXML-1.2"), 6), new SingleTransition(System.Xml.Linq.XName.Get("Application", "http://www.landxml.org/schema/LandXML-1.2"), 7), new SingleTransition(System.Xml.Linq.XName.Get("Alignments", "http://www.landxml.org/schema/LandXML-1.2"), 9), new SingleTransition(System.Xml.Linq.XName.Get("CgPoints", "http://www.landxml.org/schema/LandXML-1.2"), 11), new SingleTransition(System.Xml.Linq.XName.Get("Amendment", "http://www.landxml.org/schema/LandXML-1.2"), 13), new SingleTransition(System.Xml.Linq.XName.Get("GradeModel", "http://www.landxml.org/schema/LandXML-1.2"), 15), new SingleTransition(System.Xml.Linq.XName.Get("Monuments", "http://www.landxml.org/schema/LandXML-1.2"), 17), new SingleTransition(System.Xml.Linq.XName.Get("Parcels", "http://www.landxml.org/schema/LandXML-1.2"), 19), new SingleTransition(System.Xml.Linq.XName.Get("PlanFeatures", "http://www.landxml.org/schema/LandXML-1.2"), 21), new SingleTransition(System.Xml.Linq.XName.Get("PipeNetworks", "http://www.landxml.org/schema/LandXML-1.2"), 23), new SingleTransition(System.Xml.Linq.XName.Get("Surfaces", "http://www.landxml.org/schema/LandXML-1.2"), 27), new SingleTransition(System.Xml.Linq.XName.Get("Survey", "http://www.landxml.org/schema/LandXML-1.2"), 29), new SingleTransition(System.Xml.Linq.XName.Get("FeatureDictionary", "http://www.landxml.org/schema/LandXML-1.2"), 31), new SingleTransition(new WildCard("##other", "http://www.landxml.org/schema/LandXML-1.2"), 34)));
            transitions.Add(27, new Transitions(new SingleTransition(System.Xml.Linq.XName.Get("Surfaces", "http://www.landxml.org/schema/LandXML-1.2"), 27), new SingleTransition(System.Xml.Linq.XName.Get("Units", "http://www.landxml.org/schema/LandXML-1.2"), 2), new SingleTransition(System.Xml.Linq.XName.Get("CoordinateSystem", "http://www.landxml.org/schema/LandXML-1.2"), 4), new SingleTransition(System.Xml.Linq.XName.Get("Project", "http://www.landxml.org/schema/LandXML-1.2"), 6), new SingleTransition(System.Xml.Linq.XName.Get("Application", "http://www.landxml.org/schema/LandXML-1.2"), 7), new SingleTransition(System.Xml.Linq.XName.Get("Alignments", "http://www.landxml.org/schema/LandXML-1.2"), 9), new SingleTransition(System.Xml.Linq.XName.Get("CgPoints", "http://www.landxml.org/schema/LandXML-1.2"), 11), new SingleTransition(System.Xml.Linq.XName.Get("Amendment", "http://www.landxml.org/schema/LandXML-1.2"), 13), new SingleTransition(System.Xml.Linq.XName.Get("GradeModel", "http://www.landxml.org/schema/LandXML-1.2"), 15), new SingleTransition(System.Xml.Linq.XName.Get("Monuments", "http://www.landxml.org/schema/LandXML-1.2"), 17), new SingleTransition(System.Xml.Linq.XName.Get("Parcels", "http://www.landxml.org/schema/LandXML-1.2"), 19), new SingleTransition(System.Xml.Linq.XName.Get("PlanFeatures", "http://www.landxml.org/schema/LandXML-1.2"), 21), new SingleTransition(System.Xml.Linq.XName.Get("PipeNetworks", "http://www.landxml.org/schema/LandXML-1.2"), 23), new SingleTransition(System.Xml.Linq.XName.Get("Roadways", "http://www.landxml.org/schema/LandXML-1.2"), 25), new SingleTransition(System.Xml.Linq.XName.Get("Survey", "http://www.landxml.org/schema/LandXML-1.2"), 29), new SingleTransition(System.Xml.Linq.XName.Get("FeatureDictionary", "http://www.landxml.org/schema/LandXML-1.2"), 31), new SingleTransition(new WildCard("##other", "http://www.landxml.org/schema/LandXML-1.2"), 34)));
            transitions.Add(29, new Transitions(new SingleTransition(System.Xml.Linq.XName.Get("Survey", "http://www.landxml.org/schema/LandXML-1.2"), 29), new SingleTransition(System.Xml.Linq.XName.Get("Units", "http://www.landxml.org/schema/LandXML-1.2"), 2), new SingleTransition(System.Xml.Linq.XName.Get("CoordinateSystem", "http://www.landxml.org/schema/LandXML-1.2"), 4), new SingleTransition(System.Xml.Linq.XName.Get("Project", "http://www.landxml.org/schema/LandXML-1.2"), 6), new SingleTransition(System.Xml.Linq.XName.Get("Application", "http://www.landxml.org/schema/LandXML-1.2"), 7), new SingleTransition(System.Xml.Linq.XName.Get("Alignments", "http://www.landxml.org/schema/LandXML-1.2"), 9), new SingleTransition(System.Xml.Linq.XName.Get("CgPoints", "http://www.landxml.org/schema/LandXML-1.2"), 11), new SingleTransition(System.Xml.Linq.XName.Get("Amendment", "http://www.landxml.org/schema/LandXML-1.2"), 13), new SingleTransition(System.Xml.Linq.XName.Get("GradeModel", "http://www.landxml.org/schema/LandXML-1.2"), 15), new SingleTransition(System.Xml.Linq.XName.Get("Monuments", "http://www.landxml.org/schema/LandXML-1.2"), 17), new SingleTransition(System.Xml.Linq.XName.Get("Parcels", "http://www.landxml.org/schema/LandXML-1.2"), 19), new SingleTransition(System.Xml.Linq.XName.Get("PlanFeatures", "http://www.landxml.org/schema/LandXML-1.2"), 21), new SingleTransition(System.Xml.Linq.XName.Get("PipeNetworks", "http://www.landxml.org/schema/LandXML-1.2"), 23), new SingleTransition(System.Xml.Linq.XName.Get("Roadways", "http://www.landxml.org/schema/LandXML-1.2"), 25), new SingleTransition(System.Xml.Linq.XName.Get("Surfaces", "http://www.landxml.org/schema/LandXML-1.2"), 27), new SingleTransition(System.Xml.Linq.XName.Get("FeatureDictionary", "http://www.landxml.org/schema/LandXML-1.2"), 31), new SingleTransition(new WildCard("##other", "http://www.landxml.org/schema/LandXML-1.2"), 34)));
            transitions.Add(31, new Transitions(new SingleTransition(System.Xml.Linq.XName.Get("FeatureDictionary", "http://www.landxml.org/schema/LandXML-1.2"), 31), new SingleTransition(System.Xml.Linq.XName.Get("Units", "http://www.landxml.org/schema/LandXML-1.2"), 2), new SingleTransition(System.Xml.Linq.XName.Get("CoordinateSystem", "http://www.landxml.org/schema/LandXML-1.2"), 4), new SingleTransition(System.Xml.Linq.XName.Get("Project", "http://www.landxml.org/schema/LandXML-1.2"), 6), new SingleTransition(System.Xml.Linq.XName.Get("Application", "http://www.landxml.org/schema/LandXML-1.2"), 7), new SingleTransition(System.Xml.Linq.XName.Get("Alignments", "http://www.landxml.org/schema/LandXML-1.2"), 9), new SingleTransition(System.Xml.Linq.XName.Get("CgPoints", "http://www.landxml.org/schema/LandXML-1.2"), 11), new SingleTransition(System.Xml.Linq.XName.Get("Amendment", "http://www.landxml.org/schema/LandXML-1.2"), 13), new SingleTransition(System.Xml.Linq.XName.Get("GradeModel", "http://www.landxml.org/schema/LandXML-1.2"), 15), new SingleTransition(System.Xml.Linq.XName.Get("Monuments", "http://www.landxml.org/schema/LandXML-1.2"), 17), new SingleTransition(System.Xml.Linq.XName.Get("Parcels", "http://www.landxml.org/schema/LandXML-1.2"), 19), new SingleTransition(System.Xml.Linq.XName.Get("PlanFeatures", "http://www.landxml.org/schema/LandXML-1.2"), 21), new SingleTransition(System.Xml.Linq.XName.Get("PipeNetworks", "http://www.landxml.org/schema/LandXML-1.2"), 23), new SingleTransition(System.Xml.Linq.XName.Get("Roadways", "http://www.landxml.org/schema/LandXML-1.2"), 25), new SingleTransition(System.Xml.Linq.XName.Get("Surfaces", "http://www.landxml.org/schema/LandXML-1.2"), 27), new SingleTransition(System.Xml.Linq.XName.Get("Survey", "http://www.landxml.org/schema/LandXML-1.2"), 29), new SingleTransition(new WildCard("##other", "http://www.landxml.org/schema/LandXML-1.2"), 34)));
            transitions.Add(34, new Transitions(new SingleTransition(System.Xml.Linq.XName.Get("Units", "http://www.landxml.org/schema/LandXML-1.2"), 2), new SingleTransition(System.Xml.Linq.XName.Get("CoordinateSystem", "http://www.landxml.org/schema/LandXML-1.2"), 4), new SingleTransition(System.Xml.Linq.XName.Get("Project", "http://www.landxml.org/schema/LandXML-1.2"), 6), new SingleTransition(System.Xml.Linq.XName.Get("Application", "http://www.landxml.org/schema/LandXML-1.2"), 7), new SingleTransition(System.Xml.Linq.XName.Get("Alignments", "http://www.landxml.org/schema/LandXML-1.2"), 9), new SingleTransition(System.Xml.Linq.XName.Get("CgPoints", "http://www.landxml.org/schema/LandXML-1.2"), 11), new SingleTransition(System.Xml.Linq.XName.Get("Amendment", "http://www.landxml.org/schema/LandXML-1.2"), 13), new SingleTransition(System.Xml.Linq.XName.Get("GradeModel", "http://www.landxml.org/schema/LandXML-1.2"), 15), new SingleTransition(System.Xml.Linq.XName.Get("Monuments", "http://www.landxml.org/schema/LandXML-1.2"), 17), new SingleTransition(System.Xml.Linq.XName.Get("Parcels", "http://www.landxml.org/schema/LandXML-1.2"), 19), new SingleTransition(System.Xml.Linq.XName.Get("PlanFeatures", "http://www.landxml.org/schema/LandXML-1.2"), 21), new SingleTransition(System.Xml.Linq.XName.Get("PipeNetworks", "http://www.landxml.org/schema/LandXML-1.2"), 23), new SingleTransition(System.Xml.Linq.XName.Get("Roadways", "http://www.landxml.org/schema/LandXML-1.2"), 25), new SingleTransition(System.Xml.Linq.XName.Get("Surfaces", "http://www.landxml.org/schema/LandXML-1.2"), 27), new SingleTransition(System.Xml.Linq.XName.Get("Survey", "http://www.landxml.org/schema/LandXML-1.2"), 29), new SingleTransition(System.Xml.Linq.XName.Get("FeatureDictionary", "http://www.landxml.org/schema/LandXML-1.2"), 31), new SingleTransition(new WildCard("##other", "http://www.landxml.org/schema/LandXML-1.2"), 34)));
            validationStates = new FSM(1, new Set<int>(new int[] {
                            2,
                            1,
                            4,
                            6,
                            7,
                            9,
                            11,
                            13,
                            15,
                            17,
                            19,
                            21,
                            23,
                            25,
                            27,
                            29,
                            31,
                            34}), transitions);
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (CgPoint*, CgPoints1*, Feature*)
    /// </para>
    /// </summary>
    public partial class CgPoints : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName CgPointXName = System.Xml.Linq.XName.Get("CgPoint", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<CgPoint> CgPointField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName CgPoints1XName = System.Xml.Linq.XName.Get("CgPoints", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<CgPoints> CgPoints1Field;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName FeatureXName = System.Xml.Linq.XName.Get("Feature", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<Feature> FeatureField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName descXName = System.Xml.Linq.XName.Get("desc", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName nameXName = System.Xml.Linq.XName.Get("name", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName stateXName = System.Xml.Linq.XName.Get("state", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName codeXName = System.Xml.Linq.XName.Get("code", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName zoneNumberXName = System.Xml.Linq.XName.Get("zoneNumber", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName DTMAttributeXName = System.Xml.Linq.XName.Get("DTMAttribute", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("CgPoints", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator CgPoints(XElement xe) { return XTypedServices.ToXTypedElement<CgPoints>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static CgPoints() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(CgPointXName), new NamedContentModelEntity(CgPoints1XName), new NamedContentModelEntity(FeatureXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (CgPoint*, CgPoints1*, Feature*)
        /// </para>
        /// </summary>
        public CgPoints() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (CgPoint*, CgPoints1*, Feature*)
        /// </para>
        /// </summary>
        public virtual IList<CgPoint> CgPoint {
            get {
                if ((this.CgPointField == null)) {
                    this.CgPointField = new XTypedList<CgPoint>(this, LinqToXsdTypeManager.Instance, CgPointXName);
                }
                return this.CgPointField;
            }
            set {
                if ((value == null)) {
                    this.CgPointField = null;
                }
                else {
                    if ((this.CgPointField == null)) {
                        this.CgPointField = XTypedList<CgPoint>.Initialize(this, LinqToXsdTypeManager.Instance, value, CgPointXName);
                    }
                    else {
                        XTypedServices.SetList<CgPoint>(this.CgPointField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (CgPoint*, CgPoints1*, Feature*)
        /// </para>
        /// </summary>
        public virtual IList<CgPoints> CgPoints1 {
            get {
                if ((this.CgPoints1Field == null)) {
                    this.CgPoints1Field = new XTypedList<CgPoints>(this, LinqToXsdTypeManager.Instance, CgPoints1XName);
                }
                return this.CgPoints1Field;
            }
            set {
                if ((value == null)) {
                    this.CgPoints1Field = null;
                }
                else {
                    if ((this.CgPoints1Field == null)) {
                        this.CgPoints1Field = XTypedList<CgPoints>.Initialize(this, LinqToXsdTypeManager.Instance, value, CgPoints1XName);
                    }
                    else {
                        XTypedServices.SetList<CgPoints>(this.CgPoints1Field, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (CgPoint*, CgPoints1*, Feature*)
        /// </para>
        /// </summary>
        public virtual IList<Feature> Feature {
            get {
                if ((this.FeatureField == null)) {
                    this.FeatureField = new XTypedList<Feature>(this, LinqToXsdTypeManager.Instance, FeatureXName);
                }
                return this.FeatureField;
            }
            set {
                if ((value == null)) {
                    this.FeatureField = null;
                }
                else {
                    if ((this.FeatureField == null)) {
                        this.FeatureField = XTypedList<Feature>.Initialize(this, LinqToXsdTypeManager.Instance, value, FeatureXName);
                    }
                    else {
                        XTypedServices.SetList<Feature>(this.FeatureField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string desc {
            get {
                XAttribute x = this.Attribute(descXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(descXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string name {
            get {
                XAttribute x = this.Attribute(nameXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(nameXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual LandXml.v1_2.stateType? state {
            get {
                XAttribute x = this.Attribute(stateXName);
                if ((x == null)) {
                    return null;
                }
                return ((LandXml.v1_2.stateType)(Enum.Parse(typeof(LandXml.v1_2.stateType), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetAttribute(stateXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string code {
            get {
                XAttribute x = this.Attribute(codeXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(codeXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Decimal? zoneNumber {
            get {
                XAttribute x = this.Attribute(zoneNumberXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.PositiveInteger).Datatype);
            }
            set {
                this.SetAttribute(zoneNumberXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.PositiveInteger).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string DTMAttribute {
            get {
                XAttribute x = this.Attribute(DTMAttributeXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(DTMAttributeXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static CgPoints Load(string xmlFile) {
            return XTypedServices.Load<CgPoints>(xmlFile);
        }
        
        public static CgPoints Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<CgPoints>(xmlFile);
        }
        
        public static CgPoints Parse(string xml) {
            return XTypedServices.Parse<CgPoints>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<CgPoints>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(CgPointXName, typeof(CgPoint));
            localElementDictionary.Add(CgPoints1XName, typeof(CgPoints));
            localElementDictionary.Add(FeatureXName, typeof(Feature));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    public partial class CgPoint : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName oIDXName = System.Xml.Linq.XName.Get("oID", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName surveyOrderXName = System.Xml.Linq.XName.Get("surveyOrder", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName pntSurvXName = System.Xml.Linq.XName.Get("pntSurv", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName zoneNumberXName = System.Xml.Linq.XName.Get("zoneNumber", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName surveyHorizontalOrderXName = System.Xml.Linq.XName.Get("surveyHorizontalOrder", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName surveyVerticalOrderXName = System.Xml.Linq.XName.Get("surveyVerticalOrder", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName localUncertainityXName = System.Xml.Linq.XName.Get("localUncertainity", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName positionalUncertainityXName = System.Xml.Linq.XName.Get("positionalUncertainity", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName nameXName = System.Xml.Linq.XName.Get("name", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName descXName = System.Xml.Linq.XName.Get("desc", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName codeXName = System.Xml.Linq.XName.Get("code", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName stateXName = System.Xml.Linq.XName.Get("state", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName pntRefXName = System.Xml.Linq.XName.Get("pntRef", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName featureRefXName = System.Xml.Linq.XName.Get("featureRef", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName pointGeometryXName = System.Xml.Linq.XName.Get("pointGeometry", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName DTMAttributeXName = System.Xml.Linq.XName.Get("DTMAttribute", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName timeStampXName = System.Xml.Linq.XName.Get("timeStamp", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName roleXName = System.Xml.Linq.XName.Get("role", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName determinedTimeStampXName = System.Xml.Linq.XName.Get("determinedTimeStamp", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ellipsoidHeightXName = System.Xml.Linq.XName.Get("ellipsoidHeight", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName latitudeXName = System.Xml.Linq.XName.Get("latitude", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName longitudeXName = System.Xml.Linq.XName.Get("longitude", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName zoneXName = System.Xml.Linq.XName.Get("zone", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName northingStdErrorXName = System.Xml.Linq.XName.Get("northingStdError", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName eastingStdErrorXName = System.Xml.Linq.XName.Get("eastingStdError", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName elevationStdErrorXName = System.Xml.Linq.XName.Get("elevationStdError", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("CgPoint", "http://www.landxml.org/schema/LandXML-1.2");
        
		public static explicit operator CgPoint(XElement xe) { return XTypedServices.ToXTypedElement<CgPoint>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public CgPoint() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string oID {
            get {
                XAttribute x = this.Attribute(oIDXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(oIDXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string surveyOrder {
            get {
                XAttribute x = this.Attribute(surveyOrderXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(surveyOrderXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string pntSurv {
            get {
                XAttribute x = this.Attribute(pntSurvXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(pntSurvXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Decimal? zoneNumber {
            get {
                XAttribute x = this.Attribute(zoneNumberXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.PositiveInteger).Datatype);
            }
            set {
                this.SetAttribute(zoneNumberXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.PositiveInteger).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string surveyHorizontalOrder {
            get {
                XAttribute x = this.Attribute(surveyHorizontalOrderXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(surveyHorizontalOrderXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string surveyVerticalOrder {
            get {
                XAttribute x = this.Attribute(surveyVerticalOrderXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(surveyVerticalOrderXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Double? localUncertainity {
            get {
                XAttribute x = this.Attribute(localUncertainityXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetAttribute(localUncertainityXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Double? positionalUncertainity {
            get {
                XAttribute x = this.Attribute(positionalUncertainityXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetAttribute(positionalUncertainityXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string name {
            get {
                XAttribute x = this.Attribute(nameXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(nameXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string desc {
            get {
                XAttribute x = this.Attribute(descXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(descXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string code {
            get {
                XAttribute x = this.Attribute(codeXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(codeXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual LandXml.v1_2.stateType? state {
            get {
                XAttribute x = this.Attribute(stateXName);
                if ((x == null)) {
                    return null;
                }
                return ((LandXml.v1_2.stateType)(Enum.Parse(typeof(LandXml.v1_2.stateType), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetAttribute(stateXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string pntRef {
            get {
                XAttribute x = this.Attribute(pntRefXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(pntRefXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string featureRef {
            get {
                XAttribute x = this.Attribute(featureRefXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(featureRefXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual LandXml.v1_2.pointGeometryType? pointGeometry {
            get {
                XAttribute x = this.Attribute(pointGeometryXName);
                if ((x == null)) {
                    return null;
                }
                return ((LandXml.v1_2.pointGeometryType)(Enum.Parse(typeof(LandXml.v1_2.pointGeometryType), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetAttribute(pointGeometryXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string DTMAttribute {
            get {
                XAttribute x = this.Attribute(DTMAttributeXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(DTMAttributeXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.DateTime? timeStamp {
            get {
                XAttribute x = this.Attribute(timeStampXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<System.DateTime>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.DateTime).Datatype);
            }
            set {
                this.SetAttribute(timeStampXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.DateTime).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string role {
            get {
                XAttribute x = this.Attribute(roleXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(roleXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.DateTime? determinedTimeStamp {
            get {
                XAttribute x = this.Attribute(determinedTimeStampXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<System.DateTime>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.DateTime).Datatype);
            }
            set {
                this.SetAttribute(determinedTimeStampXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.DateTime).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Double? ellipsoidHeight {
            get {
                XAttribute x = this.Attribute(ellipsoidHeightXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetAttribute(ellipsoidHeightXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Double? latitude {
            get {
                XAttribute x = this.Attribute(latitudeXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetAttribute(latitudeXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Double? longitude {
            get {
                XAttribute x = this.Attribute(longitudeXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetAttribute(longitudeXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string zone {
            get {
                XAttribute x = this.Attribute(zoneXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(zoneXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Double? northingStdError {
            get {
                XAttribute x = this.Attribute(northingStdErrorXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetAttribute(northingStdErrorXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Double? eastingStdError {
            get {
                XAttribute x = this.Attribute(eastingStdErrorXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetAttribute(eastingStdErrorXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Double? elevationStdError {
            get {
                XAttribute x = this.Attribute(elevationStdErrorXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetAttribute(elevationStdErrorXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static CgPoint Load(string xmlFile) {
            return XTypedServices.Load<CgPoint>(xmlFile);
        }
        
        public static CgPoint Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<CgPoint>(xmlFile);
        }
        
        public static CgPoint Parse(string xml) {
            return XTypedServices.Parse<CgPoint>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<CgPoint>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class DocFileRef : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName nameXName = System.Xml.Linq.XName.Get("name", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName locationXName = System.Xml.Linq.XName.Get("location", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName fileTypeXName = System.Xml.Linq.XName.Get("fileType", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName fileFormatXName = System.Xml.Linq.XName.Get("fileFormat", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("DocFileRef", "http://www.landxml.org/schema/LandXML-1.2");
        
		public static explicit operator DocFileRef(XElement xe) { return XTypedServices.ToXTypedElement<DocFileRef>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public DocFileRef() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual string name {
            get {
                XAttribute x = this.Attribute(nameXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(nameXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual System.Uri location {
            get {
                XAttribute x = this.Attribute(locationXName);
                return XTypedServices.ParseValue<System.Uri>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyUri).Datatype);
            }
            set {
                this.SetAttribute(locationXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyUri).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string fileType {
            get {
                XAttribute x = this.Attribute(fileTypeXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(fileTypeXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string fileFormat {
            get {
                XAttribute x = this.Attribute(fileFormatXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(fileFormatXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static DocFileRef Load(string xmlFile) {
            return XTypedServices.Load<DocFileRef>(xmlFile);
        }
        
        public static DocFileRef Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<DocFileRef>(xmlFile);
        }
        
        public static DocFileRef Parse(string xml) {
            return XTypedServices.Parse<DocFileRef>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<DocFileRef>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class Property : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName labelXName = System.Xml.Linq.XName.Get("label", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName valueXName = System.Xml.Linq.XName.Get("value", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("Property", "http://www.landxml.org/schema/LandXML-1.2");
        
		public static explicit operator Property(XElement xe) { return XTypedServices.ToXTypedElement<Property>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public Property() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual string label {
            get {
                XAttribute x = this.Attribute(labelXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(labelXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual string value {
            get {
                XAttribute x = this.Attribute(valueXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(valueXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static Property Load(string xmlFile) {
            return XTypedServices.Load<Property>(xmlFile);
        }
        
        public static Property Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<Property>(xmlFile);
        }
        
        public static Property Parse(string xml) {
            return XTypedServices.Parse<Property>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<Property>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Property*, DocFileRef*, Feature1*)
    /// </para>
    /// </summary>
    public partial class Feature : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName PropertyXName = System.Xml.Linq.XName.Get("Property", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<Property> PropertyField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName DocFileRefXName = System.Xml.Linq.XName.Get("DocFileRef", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<DocFileRef> DocFileRefField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName Feature1XName = System.Xml.Linq.XName.Get("Feature", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<Feature> Feature1Field;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName nameXName = System.Xml.Linq.XName.Get("name", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName codeXName = System.Xml.Linq.XName.Get("code", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName sourceXName = System.Xml.Linq.XName.Get("source", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("Feature", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator Feature(XElement xe) { return XTypedServices.ToXTypedElement<Feature>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static Feature() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(PropertyXName), new NamedContentModelEntity(DocFileRefXName), new NamedContentModelEntity(Feature1XName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Property*, DocFileRef*, Feature1*)
        /// </para>
        /// </summary>
        public Feature() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Property*, DocFileRef*, Feature1*)
        /// </para>
        /// </summary>
        public virtual IList<Property> Property {
            get {
                if ((this.PropertyField == null)) {
                    this.PropertyField = new XTypedList<Property>(this, LinqToXsdTypeManager.Instance, PropertyXName);
                }
                return this.PropertyField;
            }
            set {
                if ((value == null)) {
                    this.PropertyField = null;
                }
                else {
                    if ((this.PropertyField == null)) {
                        this.PropertyField = XTypedList<Property>.Initialize(this, LinqToXsdTypeManager.Instance, value, PropertyXName);
                    }
                    else {
                        XTypedServices.SetList<Property>(this.PropertyField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Property*, DocFileRef*, Feature1*)
        /// </para>
        /// </summary>
        public virtual IList<DocFileRef> DocFileRef {
            get {
                if ((this.DocFileRefField == null)) {
                    this.DocFileRefField = new XTypedList<DocFileRef>(this, LinqToXsdTypeManager.Instance, DocFileRefXName);
                }
                return this.DocFileRefField;
            }
            set {
                if ((value == null)) {
                    this.DocFileRefField = null;
                }
                else {
                    if ((this.DocFileRefField == null)) {
                        this.DocFileRefField = XTypedList<DocFileRef>.Initialize(this, LinqToXsdTypeManager.Instance, value, DocFileRefXName);
                    }
                    else {
                        XTypedServices.SetList<DocFileRef>(this.DocFileRefField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Property*, DocFileRef*, Feature1*)
        /// </para>
        /// </summary>
        public virtual IList<Feature> Feature1 {
            get {
                if ((this.Feature1Field == null)) {
                    this.Feature1Field = new XTypedList<Feature>(this, LinqToXsdTypeManager.Instance, Feature1XName);
                }
                return this.Feature1Field;
            }
            set {
                if ((value == null)) {
                    this.Feature1Field = null;
                }
                else {
                    if ((this.Feature1Field == null)) {
                        this.Feature1Field = XTypedList<Feature>.Initialize(this, LinqToXsdTypeManager.Instance, value, Feature1XName);
                    }
                    else {
                        XTypedServices.SetList<Feature>(this.Feature1Field, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string name {
            get {
                XAttribute x = this.Attribute(nameXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(nameXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string code {
            get {
                XAttribute x = this.Attribute(codeXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(codeXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string source {
            get {
                XAttribute x = this.Attribute(sourceXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(sourceXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static Feature Load(string xmlFile) {
            return XTypedServices.Load<Feature>(xmlFile);
        }
        
        public static Feature Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<Feature>(xmlFile);
        }
        
        public static Feature Parse(string xml) {
            return XTypedServices.Parse<Feature>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<Feature>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(PropertyXName, typeof(Property));
            localElementDictionary.Add(DocFileRefXName, typeof(DocFileRef));
            localElementDictionary.Add(Feature1XName, typeof(Feature));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (DocFileRef*)
    /// </para>
    /// </summary>
    public partial class FeatureDictionary : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName DocFileRefXName = System.Xml.Linq.XName.Get("DocFileRef", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<DocFileRef> DocFileRefField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName nameXName = System.Xml.Linq.XName.Get("name", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName versionXName = System.Xml.Linq.XName.Get("version", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("FeatureDictionary", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator FeatureDictionary(XElement xe) { return XTypedServices.ToXTypedElement<FeatureDictionary>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static FeatureDictionary() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(DocFileRefXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (DocFileRef*)
        /// </para>
        /// </summary>
        public FeatureDictionary() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (DocFileRef*)
        /// </para>
        /// </summary>
        public virtual IList<DocFileRef> DocFileRef {
            get {
                if ((this.DocFileRefField == null)) {
                    this.DocFileRefField = new XTypedList<DocFileRef>(this, LinqToXsdTypeManager.Instance, DocFileRefXName);
                }
                return this.DocFileRefField;
            }
            set {
                if ((value == null)) {
                    this.DocFileRefField = null;
                }
                else {
                    if ((this.DocFileRefField == null)) {
                        this.DocFileRefField = XTypedList<DocFileRef>.Initialize(this, LinqToXsdTypeManager.Instance, value, DocFileRefXName);
                    }
                    else {
                        XTypedServices.SetList<DocFileRef>(this.DocFileRefField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual string name {
            get {
                XAttribute x = this.Attribute(nameXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(nameXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string version {
            get {
                XAttribute x = this.Attribute(versionXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(versionXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static FeatureDictionary Load(string xmlFile) {
            return XTypedServices.Load<FeatureDictionary>(xmlFile);
        }
        
        public static FeatureDictionary Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<FeatureDictionary>(xmlFile);
        }
        
        public static FeatureDictionary Parse(string xml) {
            return XTypedServices.Parse<FeatureDictionary>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<FeatureDictionary>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(DocFileRefXName, typeof(DocFileRef));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    public partial class PntList2D : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TypedValueXName = System.Xml.Linq.XName.Get("TypedValue", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("PntList2D", "http://www.landxml.org/schema/LandXML-1.2");
        
		public static explicit operator PntList2D(XElement xe) { return XTypedServices.ToXTypedElement<PntList2D>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public PntList2D() {
        }
        
        public virtual IList<double> TypedValue {
            get {
                XElement x = this.Untyped;
                return XTypedServices.ParseListValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetListValueWithValidation(value, "TypedValue", PntList2D1LocalType.TypeDefinition);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static PntList2D Load(string xmlFile) {
            return XTypedServices.Load<PntList2D>(xmlFile);
        }
        
        public static PntList2D Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<PntList2D>(xmlFile);
        }
        
        public static PntList2D Parse(string xml) {
            return XTypedServices.Parse<PntList2D>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<PntList2D>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
        
        private class PntList2D1LocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.ListSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(2)), null, 0, 0, null, null, 0, null, null, 2, null, 0, XmlSchemaWhiteSpace.Collapse), new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double), null));
            
            private PntList2D1LocalType() {
            }
        }
    }
    
    public partial class PntList3D : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TypedValueXName = System.Xml.Linq.XName.Get("TypedValue", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("PntList3D", "http://www.landxml.org/schema/LandXML-1.2");
        
		public static explicit operator PntList3D(XElement xe) { return XTypedServices.ToXTypedElement<PntList3D>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public PntList3D() {
        }
        
        public virtual IList<double> TypedValue {
            get {
                XElement x = this.Untyped;
                return XTypedServices.ParseListValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetListValueWithValidation(value, "TypedValue", PntList3D1LocalType.TypeDefinition);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static PntList3D Load(string xmlFile) {
            return XTypedServices.Load<PntList3D>(xmlFile);
        }
        
        public static PntList3D Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<PntList3D>(xmlFile);
        }
        
        public static PntList3D Parse(string xml) {
            return XTypedServices.Parse<PntList3D>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<PntList3D>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
        
        private class PntList3D1LocalType {
            
            [DebuggerBrowsable(DebuggerBrowsableState.Never)]
            public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.ListSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(2)), null, 0, 0, null, null, 0, null, null, 3, null, 0, XmlSchemaWhiteSpace.Collapse), new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double), null));
            
            private PntList3D1LocalType() {
            }
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Start, End, (PntList2D | PntList3D), Feature*)
    /// </para>
    /// </summary>
    public partial class IrregularLine : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName StartXName = System.Xml.Linq.XName.Get("Start", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName EndXName = System.Xml.Linq.XName.Get("End", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName PntList2DXName = System.Xml.Linq.XName.Get("PntList2D", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName PntList3DXName = System.Xml.Linq.XName.Get("PntList3D", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName FeatureXName = System.Xml.Linq.XName.Get("Feature", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<Feature> FeatureField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName descXName = System.Xml.Linq.XName.Get("desc", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName dirXName = System.Xml.Linq.XName.Get("dir", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName lengthXName = System.Xml.Linq.XName.Get("length", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName nameXName = System.Xml.Linq.XName.Get("name", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName staStartXName = System.Xml.Linq.XName.Get("staStart", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName stateXName = System.Xml.Linq.XName.Get("state", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName oIDXName = System.Xml.Linq.XName.Get("oID", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName sourceXName = System.Xml.Linq.XName.Get("source", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName noteXName = System.Xml.Linq.XName.Get("note", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("IrregularLine", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator IrregularLine(XElement xe) { return XTypedServices.ToXTypedElement<IrregularLine>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static IrregularLine() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(StartXName), new NamedContentModelEntity(EndXName), new ChoiceContentModelEntity(new NamedContentModelEntity(PntList2DXName), new NamedContentModelEntity(PntList3DXName)), new NamedContentModelEntity(FeatureXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Start, End, (PntList2D | PntList3D), Feature*)
        /// </para>
        /// </summary>
        public IrregularLine() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (Start, End, (PntList2D | PntList3D), Feature*)
        /// </para>
        /// </summary>
        public virtual Start Start {
            get {
                XElement x = this.GetElement(StartXName);
                return ((Start)(x));
            }
            set {
                this.SetElement(StartXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (Start, End, (PntList2D | PntList3D), Feature*)
        /// </para>
        /// </summary>
        public virtual End End {
            get {
                XElement x = this.GetElement(EndXName);
                return ((End)(x));
            }
            set {
                this.SetElement(EndXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (Start, End, (PntList2D | PntList3D), Feature*)
        /// </para>
        /// </summary>
        public virtual PntList2D PntList2D {
            get {
                XElement x = this.GetElement(PntList2DXName);
                return ((PntList2D)(x));
            }
            set {
                this.SetElement(PntList2DXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (Start, End, (PntList2D | PntList3D), Feature*)
        /// </para>
        /// </summary>
        public virtual PntList3D PntList3D {
            get {
                XElement x = this.GetElement(PntList3DXName);
                return ((PntList3D)(x));
            }
            set {
                this.SetElement(PntList3DXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Start, End, (PntList2D | PntList3D), Feature*)
        /// </para>
        /// </summary>
        public virtual IList<Feature> Feature {
            get {
                if ((this.FeatureField == null)) {
                    this.FeatureField = new XTypedList<Feature>(this, LinqToXsdTypeManager.Instance, FeatureXName);
                }
                return this.FeatureField;
            }
            set {
                if ((value == null)) {
                    this.FeatureField = null;
                }
                else {
                    if ((this.FeatureField == null)) {
                        this.FeatureField = XTypedList<Feature>.Initialize(this, LinqToXsdTypeManager.Instance, value, FeatureXName);
                    }
                    else {
                        XTypedServices.SetList<Feature>(this.FeatureField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string desc {
            get {
                XAttribute x = this.Attribute(descXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(descXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Double? dir {
            get {
                XAttribute x = this.Attribute(dirXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetAttribute(dirXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Double? length {
            get {
                XAttribute x = this.Attribute(lengthXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetAttribute(lengthXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string name {
            get {
                XAttribute x = this.Attribute(nameXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(nameXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Double? staStart {
            get {
                XAttribute x = this.Attribute(staStartXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetAttribute(staStartXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual LandXml.v1_2.stateType? state {
            get {
                XAttribute x = this.Attribute(stateXName);
                if ((x == null)) {
                    return null;
                }
                return ((LandXml.v1_2.stateType)(Enum.Parse(typeof(LandXml.v1_2.stateType), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetAttribute(stateXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string oID {
            get {
                XAttribute x = this.Attribute(oIDXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(oIDXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string source {
            get {
                XAttribute x = this.Attribute(sourceXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(sourceXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string note {
            get {
                XAttribute x = this.Attribute(noteXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(noteXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static IrregularLine Load(string xmlFile) {
            return XTypedServices.Load<IrregularLine>(xmlFile);
        }
        
        public static IrregularLine Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<IrregularLine>(xmlFile);
        }
        
        public static IrregularLine Parse(string xml) {
            return XTypedServices.Parse<IrregularLine>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<IrregularLine>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(StartXName, typeof(Start));
            localElementDictionary.Add(EndXName, typeof(End));
            localElementDictionary.Add(PntList2DXName, typeof(PntList2D));
            localElementDictionary.Add(PntList3DXName, typeof(PntList3D));
            localElementDictionary.Add(FeatureXName, typeof(Feature));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    public partial class Chain : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TypedValueXName = System.Xml.Linq.XName.Get("TypedValue", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName nameXName = System.Xml.Linq.XName.Get("name", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName descXName = System.Xml.Linq.XName.Get("desc", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName codeXName = System.Xml.Linq.XName.Get("code", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName stateXName = System.Xml.Linq.XName.Get("state", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName pointGeometryXName = System.Xml.Linq.XName.Get("pointGeometry", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName DTMAttributeXName = System.Xml.Linq.XName.Get("DTMAttribute", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName timeStampXName = System.Xml.Linq.XName.Get("timeStamp", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName roleXName = System.Xml.Linq.XName.Get("role", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName stationXName = System.Xml.Linq.XName.Get("station", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName zoneXName = System.Xml.Linq.XName.Get("zone", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName statusXName = System.Xml.Linq.XName.Get("status", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("Chain", "http://www.landxml.org/schema/LandXML-1.2");
        
		public static explicit operator Chain(XElement xe) { return XTypedServices.ToXTypedElement<Chain>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public Chain() {
        }
        
        public virtual IList<string> TypedValue {
            get {
                XElement x = this.Untyped;
                return XTypedServices.ParseListValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetListValueWithValidation(value, "TypedValue", global::LandXml.v1_2.ChainType.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string name {
            get {
                XAttribute x = this.Attribute(nameXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(nameXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string desc {
            get {
                XAttribute x = this.Attribute(descXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(descXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string code {
            get {
                XAttribute x = this.Attribute(codeXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(codeXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual LandXml.v1_2.stateType? state {
            get {
                XAttribute x = this.Attribute(stateXName);
                if ((x == null)) {
                    return null;
                }
                return ((LandXml.v1_2.stateType)(Enum.Parse(typeof(LandXml.v1_2.stateType), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetAttribute(stateXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual LandXml.v1_2.pointGeometryType? pointGeometry {
            get {
                XAttribute x = this.Attribute(pointGeometryXName);
                if ((x == null)) {
                    return null;
                }
                return ((LandXml.v1_2.pointGeometryType)(Enum.Parse(typeof(LandXml.v1_2.pointGeometryType), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetAttribute(pointGeometryXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string DTMAttribute {
            get {
                XAttribute x = this.Attribute(DTMAttributeXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(DTMAttributeXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.DateTime? timeStamp {
            get {
                XAttribute x = this.Attribute(timeStampXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<System.DateTime>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.DateTime).Datatype);
            }
            set {
                this.SetAttribute(timeStampXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.DateTime).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string role {
            get {
                XAttribute x = this.Attribute(roleXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(roleXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Double? station {
            get {
                XAttribute x = this.Attribute(stationXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetAttribute(stationXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string zone {
            get {
                XAttribute x = this.Attribute(zoneXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(zoneXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual LandXml.v1_2.observationStatusType? status {
            get {
                XAttribute x = this.Attribute(statusXName);
                if ((x == null)) {
                    return null;
                }
                return ((LandXml.v1_2.observationStatusType)(Enum.Parse(typeof(LandXml.v1_2.observationStatusType), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetAttribute(statusXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static Chain Load(string xmlFile) {
            return XTypedServices.Load<Chain>(xmlFile);
        }
        
        public static Chain Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<Chain>(xmlFile);
        }
        
        public static Chain Parse(string xml) {
            return XTypedServices.Parse<Chain>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<Chain>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Start | Center | End | PI? | Feature*)+
    /// </para>
    /// </summary>
    public partial class Curve : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName StartXName = System.Xml.Linq.XName.Get("Start", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<Start> StartField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName CenterXName = System.Xml.Linq.XName.Get("Center", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<Center> CenterField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName EndXName = System.Xml.Linq.XName.Get("End", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<End> EndField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName PIXName = System.Xml.Linq.XName.Get("PI", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<PI> PIField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName FeatureXName = System.Xml.Linq.XName.Get("Feature", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<Feature> FeatureField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName rotXName = System.Xml.Linq.XName.Get("rot", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName chordXName = System.Xml.Linq.XName.Get("chord", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName crvTypeXName = System.Xml.Linq.XName.Get("crvType", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName deltaXName = System.Xml.Linq.XName.Get("delta", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName descXName = System.Xml.Linq.XName.Get("desc", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName dirEndXName = System.Xml.Linq.XName.Get("dirEnd", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName dirStartXName = System.Xml.Linq.XName.Get("dirStart", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName externalXName = System.Xml.Linq.XName.Get("external", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName lengthXName = System.Xml.Linq.XName.Get("length", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName midOrdXName = System.Xml.Linq.XName.Get("midOrd", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName nameXName = System.Xml.Linq.XName.Get("name", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName radiusXName = System.Xml.Linq.XName.Get("radius", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName staStartXName = System.Xml.Linq.XName.Get("staStart", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName stateXName = System.Xml.Linq.XName.Get("state", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName tangentXName = System.Xml.Linq.XName.Get("tangent", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName oIDXName = System.Xml.Linq.XName.Get("oID", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName noteXName = System.Xml.Linq.XName.Get("note", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("Curve", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator Curve(XElement xe) { return XTypedServices.ToXTypedElement<Curve>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static Curve() {
            BuildElementDictionary();
            contentModel = new ChoiceContentModelEntity(new NamedContentModelEntity(StartXName), new NamedContentModelEntity(CenterXName), new NamedContentModelEntity(EndXName), new NamedContentModelEntity(PIXName), new NamedContentModelEntity(FeatureXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Start | Center | End | PI? | Feature*)+
        /// </para>
        /// </summary>
        public Curve() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (Start | Center | End | PI? | Feature*)+
        /// </para>
        /// </summary>
        public virtual IList<Start> Start {
            get {
                if ((this.StartField == null)) {
                    this.StartField = new XTypedList<Start>(this, LinqToXsdTypeManager.Instance, StartXName);
                }
                return this.StartField;
            }
            set {
                if ((value == null)) {
                    this.StartField = null;
                }
                else {
                    if ((this.StartField == null)) {
                        this.StartField = XTypedList<Start>.Initialize(this, LinqToXsdTypeManager.Instance, value, StartXName);
                    }
                    else {
                        XTypedServices.SetList<Start>(this.StartField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (Start | Center | End | PI? | Feature*)+
        /// </para>
        /// </summary>
        public virtual IList<Center> Center {
            get {
                if ((this.CenterField == null)) {
                    this.CenterField = new XTypedList<Center>(this, LinqToXsdTypeManager.Instance, CenterXName);
                }
                return this.CenterField;
            }
            set {
                if ((value == null)) {
                    this.CenterField = null;
                }
                else {
                    if ((this.CenterField == null)) {
                        this.CenterField = XTypedList<Center>.Initialize(this, LinqToXsdTypeManager.Instance, value, CenterXName);
                    }
                    else {
                        XTypedServices.SetList<Center>(this.CenterField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (Start | Center | End | PI? | Feature*)+
        /// </para>
        /// </summary>
        public virtual IList<End> End {
            get {
                if ((this.EndField == null)) {
                    this.EndField = new XTypedList<End>(this, LinqToXsdTypeManager.Instance, EndXName);
                }
                return this.EndField;
            }
            set {
                if ((value == null)) {
                    this.EndField = null;
                }
                else {
                    if ((this.EndField == null)) {
                        this.EndField = XTypedList<End>.Initialize(this, LinqToXsdTypeManager.Instance, value, EndXName);
                    }
                    else {
                        XTypedServices.SetList<End>(this.EndField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, choice
        /// </para>
        /// <para>
        /// Regular expression: (Start | Center | End | PI? | Feature*)+
        /// </para>
        /// </summary>
        public virtual IList<PI> PI {
            get {
                if ((this.PIField == null)) {
                    this.PIField = new XTypedList<PI>(this, LinqToXsdTypeManager.Instance, PIXName);
                }
                return this.PIField;
            }
            set {
                if ((value == null)) {
                    this.PIField = null;
                }
                else {
                    if ((this.PIField == null)) {
                        this.PIField = XTypedList<PI>.Initialize(this, LinqToXsdTypeManager.Instance, value, PIXName);
                    }
                    else {
                        XTypedServices.SetList<PI>(this.PIField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating, choice
        /// </para>
        /// <para>
        /// Regular expression: (Start | Center | End | PI? | Feature*)+
        /// </para>
        /// </summary>
        public virtual IList<Feature> Feature {
            get {
                if ((this.FeatureField == null)) {
                    this.FeatureField = new XTypedList<Feature>(this, LinqToXsdTypeManager.Instance, FeatureXName);
                }
                return this.FeatureField;
            }
            set {
                if ((value == null)) {
                    this.FeatureField = null;
                }
                else {
                    if ((this.FeatureField == null)) {
                        this.FeatureField = XTypedList<Feature>.Initialize(this, LinqToXsdTypeManager.Instance, value, FeatureXName);
                    }
                    else {
                        XTypedServices.SetList<Feature>(this.FeatureField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual LandXml.v1_2.clockwise rot {
            get {
                XAttribute x = this.Attribute(rotXName);
                return ((LandXml.v1_2.clockwise)(Enum.Parse(typeof(LandXml.v1_2.clockwise), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetAttribute(rotXName, value.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Double? chord {
            get {
                XAttribute x = this.Attribute(chordXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetAttribute(chordXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual LandXml.v1_2.curveType? crvType {
            get {
                XAttribute x = this.Attribute(crvTypeXName);
                if ((x == null)) {
                    return null;
                }
                return ((LandXml.v1_2.curveType)(Enum.Parse(typeof(LandXml.v1_2.curveType), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetAttribute(crvTypeXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Double? delta {
            get {
                XAttribute x = this.Attribute(deltaXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetAttribute(deltaXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string desc {
            get {
                XAttribute x = this.Attribute(descXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(descXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Double? dirEnd {
            get {
                XAttribute x = this.Attribute(dirEndXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetAttribute(dirEndXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Double? dirStart {
            get {
                XAttribute x = this.Attribute(dirStartXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetAttribute(dirStartXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Double? external {
            get {
                XAttribute x = this.Attribute(externalXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetAttribute(externalXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Double? length {
            get {
                XAttribute x = this.Attribute(lengthXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetAttribute(lengthXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Double? midOrd {
            get {
                XAttribute x = this.Attribute(midOrdXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetAttribute(midOrdXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string name {
            get {
                XAttribute x = this.Attribute(nameXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(nameXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Double? radius {
            get {
                XAttribute x = this.Attribute(radiusXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetAttribute(radiusXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Double? staStart {
            get {
                XAttribute x = this.Attribute(staStartXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetAttribute(staStartXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual LandXml.v1_2.stateType? state {
            get {
                XAttribute x = this.Attribute(stateXName);
                if ((x == null)) {
                    return null;
                }
                return ((LandXml.v1_2.stateType)(Enum.Parse(typeof(LandXml.v1_2.stateType), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetAttribute(stateXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Double? tangent {
            get {
                XAttribute x = this.Attribute(tangentXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetAttribute(tangentXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string oID {
            get {
                XAttribute x = this.Attribute(oIDXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(oIDXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string note {
            get {
                XAttribute x = this.Attribute(noteXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(noteXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static Curve Load(string xmlFile) {
            return XTypedServices.Load<Curve>(xmlFile);
        }
        
        public static Curve Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<Curve>(xmlFile);
        }
        
        public static Curve Parse(string xml) {
            return XTypedServices.Parse<Curve>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<Curve>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(StartXName, typeof(Start));
            localElementDictionary.Add(CenterXName, typeof(Center));
            localElementDictionary.Add(EndXName, typeof(End));
            localElementDictionary.Add(PIXName, typeof(PI));
            localElementDictionary.Add(FeatureXName, typeof(Feature));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: ((Start | PI | End)+, Feature*)
    /// </para>
    /// </summary>
    public partial class Spiral : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName StartXName = System.Xml.Linq.XName.Get("Start", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<Start> StartField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName PIXName = System.Xml.Linq.XName.Get("PI", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<PI> PIField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName EndXName = System.Xml.Linq.XName.Get("End", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<End> EndField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName FeatureXName = System.Xml.Linq.XName.Get("Feature", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<Feature> FeatureField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName lengthXName = System.Xml.Linq.XName.Get("length", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName radiusEndXName = System.Xml.Linq.XName.Get("radiusEnd", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName radiusStartXName = System.Xml.Linq.XName.Get("radiusStart", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName rotXName = System.Xml.Linq.XName.Get("rot", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName spiTypeXName = System.Xml.Linq.XName.Get("spiType", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName chordXName = System.Xml.Linq.XName.Get("chord", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName constantXName = System.Xml.Linq.XName.Get("constant", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName descXName = System.Xml.Linq.XName.Get("desc", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName dirEndXName = System.Xml.Linq.XName.Get("dirEnd", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName dirStartXName = System.Xml.Linq.XName.Get("dirStart", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName nameXName = System.Xml.Linq.XName.Get("name", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName thetaXName = System.Xml.Linq.XName.Get("theta", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName totalYXName = System.Xml.Linq.XName.Get("totalY", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName totalXXName = System.Xml.Linq.XName.Get("totalX", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName staStartXName = System.Xml.Linq.XName.Get("staStart", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName stateXName = System.Xml.Linq.XName.Get("state", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName tanLongXName = System.Xml.Linq.XName.Get("tanLong", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName tanShortXName = System.Xml.Linq.XName.Get("tanShort", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName oIDXName = System.Xml.Linq.XName.Get("oID", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("Spiral", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator Spiral(XElement xe) { return XTypedServices.ToXTypedElement<Spiral>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static Spiral() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new ChoiceContentModelEntity(new NamedContentModelEntity(StartXName), new NamedContentModelEntity(PIXName), new NamedContentModelEntity(EndXName)), new NamedContentModelEntity(FeatureXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: ((Start | PI | End)+, Feature*)
        /// </para>
        /// </summary>
        public Spiral() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((Start | PI | End)+, Feature*)
        /// </para>
        /// </summary>
        public virtual IList<Start> Start {
            get {
                if ((this.StartField == null)) {
                    this.StartField = new XTypedList<Start>(this, LinqToXsdTypeManager.Instance, StartXName);
                }
                return this.StartField;
            }
            set {
                if ((value == null)) {
                    this.StartField = null;
                }
                else {
                    if ((this.StartField == null)) {
                        this.StartField = XTypedList<Start>.Initialize(this, LinqToXsdTypeManager.Instance, value, StartXName);
                    }
                    else {
                        XTypedServices.SetList<Start>(this.StartField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((Start | PI | End)+, Feature*)
        /// </para>
        /// </summary>
        public virtual IList<PI> PI {
            get {
                if ((this.PIField == null)) {
                    this.PIField = new XTypedList<PI>(this, LinqToXsdTypeManager.Instance, PIXName);
                }
                return this.PIField;
            }
            set {
                if ((value == null)) {
                    this.PIField = null;
                }
                else {
                    if ((this.PIField == null)) {
                        this.PIField = XTypedList<PI>.Initialize(this, LinqToXsdTypeManager.Instance, value, PIXName);
                    }
                    else {
                        XTypedServices.SetList<PI>(this.PIField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((Start | PI | End)+, Feature*)
        /// </para>
        /// </summary>
        public virtual IList<End> End {
            get {
                if ((this.EndField == null)) {
                    this.EndField = new XTypedList<End>(this, LinqToXsdTypeManager.Instance, EndXName);
                }
                return this.EndField;
            }
            set {
                if ((value == null)) {
                    this.EndField = null;
                }
                else {
                    if ((this.EndField == null)) {
                        this.EndField = XTypedList<End>.Initialize(this, LinqToXsdTypeManager.Instance, value, EndXName);
                    }
                    else {
                        XTypedServices.SetList<End>(this.EndField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: ((Start | PI | End)+, Feature*)
        /// </para>
        /// </summary>
        public virtual IList<Feature> Feature {
            get {
                if ((this.FeatureField == null)) {
                    this.FeatureField = new XTypedList<Feature>(this, LinqToXsdTypeManager.Instance, FeatureXName);
                }
                return this.FeatureField;
            }
            set {
                if ((value == null)) {
                    this.FeatureField = null;
                }
                else {
                    if ((this.FeatureField == null)) {
                        this.FeatureField = XTypedList<Feature>.Initialize(this, LinqToXsdTypeManager.Instance, value, FeatureXName);
                    }
                    else {
                        XTypedServices.SetList<Feature>(this.FeatureField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual double length {
            get {
                XAttribute x = this.Attribute(lengthXName);
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetAttribute(lengthXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual double radiusEnd {
            get {
                XAttribute x = this.Attribute(radiusEndXName);
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetAttribute(radiusEndXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual double radiusStart {
            get {
                XAttribute x = this.Attribute(radiusStartXName);
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetAttribute(radiusStartXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual LandXml.v1_2.clockwise rot {
            get {
                XAttribute x = this.Attribute(rotXName);
                return ((LandXml.v1_2.clockwise)(Enum.Parse(typeof(LandXml.v1_2.clockwise), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetAttribute(rotXName, value.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual LandXml.v1_2.spiralType spiType {
            get {
                XAttribute x = this.Attribute(spiTypeXName);
                return ((LandXml.v1_2.spiralType)(Enum.Parse(typeof(LandXml.v1_2.spiralType), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetAttribute(spiTypeXName, value.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Double? chord {
            get {
                XAttribute x = this.Attribute(chordXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetAttribute(chordXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Double? constant {
            get {
                XAttribute x = this.Attribute(constantXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetAttribute(constantXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string desc {
            get {
                XAttribute x = this.Attribute(descXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(descXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Double? dirEnd {
            get {
                XAttribute x = this.Attribute(dirEndXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetAttribute(dirEndXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Double? dirStart {
            get {
                XAttribute x = this.Attribute(dirStartXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetAttribute(dirStartXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string name {
            get {
                XAttribute x = this.Attribute(nameXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(nameXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Double? theta {
            get {
                XAttribute x = this.Attribute(thetaXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetAttribute(thetaXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Double? totalY {
            get {
                XAttribute x = this.Attribute(totalYXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetAttribute(totalYXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Double? totalX {
            get {
                XAttribute x = this.Attribute(totalXXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetAttribute(totalXXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Double? staStart {
            get {
                XAttribute x = this.Attribute(staStartXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetAttribute(staStartXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual LandXml.v1_2.stateType? state {
            get {
                XAttribute x = this.Attribute(stateXName);
                if ((x == null)) {
                    return null;
                }
                return ((LandXml.v1_2.stateType)(Enum.Parse(typeof(LandXml.v1_2.stateType), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetAttribute(stateXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Double? tanLong {
            get {
                XAttribute x = this.Attribute(tanLongXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetAttribute(tanLongXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Double? tanShort {
            get {
                XAttribute x = this.Attribute(tanShortXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetAttribute(tanShortXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string oID {
            get {
                XAttribute x = this.Attribute(oIDXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(oIDXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static Spiral Load(string xmlFile) {
            return XTypedServices.Load<Spiral>(xmlFile);
        }
        
        public static Spiral Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<Spiral>(xmlFile);
        }
        
        public static Spiral Parse(string xml) {
            return XTypedServices.Parse<Spiral>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<Spiral>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(StartXName, typeof(Start));
            localElementDictionary.Add(PIXName, typeof(PI));
            localElementDictionary.Add(EndXName, typeof(End));
            localElementDictionary.Add(FeatureXName, typeof(Feature));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: ((Line* | IrregularLine* | Curve* | Spiral* | Chain*)+, Feature*)
    /// </para>
    /// </summary>
    public partial class CoordGeom : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName LineXName = System.Xml.Linq.XName.Get("Line", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<Line> LineField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName IrregularLineXName = System.Xml.Linq.XName.Get("IrregularLine", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<IrregularLine> IrregularLineField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName CurveXName = System.Xml.Linq.XName.Get("Curve", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<Curve> CurveField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName SpiralXName = System.Xml.Linq.XName.Get("Spiral", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<Spiral> SpiralField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ChainXName = System.Xml.Linq.XName.Get("Chain", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<Chain> ChainField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName FeatureXName = System.Xml.Linq.XName.Get("Feature", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<Feature> FeatureField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName descXName = System.Xml.Linq.XName.Get("desc", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName nameXName = System.Xml.Linq.XName.Get("name", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName stateXName = System.Xml.Linq.XName.Get("state", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName oIDXName = System.Xml.Linq.XName.Get("oID", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("CoordGeom", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator CoordGeom(XElement xe) { return XTypedServices.ToXTypedElement<CoordGeom>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static CoordGeom() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new ChoiceContentModelEntity(new NamedContentModelEntity(LineXName), new NamedContentModelEntity(IrregularLineXName), new NamedContentModelEntity(CurveXName), new NamedContentModelEntity(SpiralXName), new NamedContentModelEntity(ChainXName)), new NamedContentModelEntity(FeatureXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: ((Line* | IrregularLine* | Curve* | Spiral* | Chain*)+, Feature*)
        /// </para>
        /// </summary>
        public CoordGeom() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((Line* | IrregularLine* | Curve* | Spiral* | Chain*)+, Feature*)
        /// </para>
        /// </summary>
        public virtual IList<Line> Line {
            get {
                if ((this.LineField == null)) {
                    this.LineField = new XTypedList<Line>(this, LinqToXsdTypeManager.Instance, LineXName);
                }
                return this.LineField;
            }
            set {
                if ((value == null)) {
                    this.LineField = null;
                }
                else {
                    if ((this.LineField == null)) {
                        this.LineField = XTypedList<Line>.Initialize(this, LinqToXsdTypeManager.Instance, value, LineXName);
                    }
                    else {
                        XTypedServices.SetList<Line>(this.LineField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((Line* | IrregularLine* | Curve* | Spiral* | Chain*)+, Feature*)
        /// </para>
        /// </summary>
        public virtual IList<IrregularLine> IrregularLine {
            get {
                if ((this.IrregularLineField == null)) {
                    this.IrregularLineField = new XTypedList<IrregularLine>(this, LinqToXsdTypeManager.Instance, IrregularLineXName);
                }
                return this.IrregularLineField;
            }
            set {
                if ((value == null)) {
                    this.IrregularLineField = null;
                }
                else {
                    if ((this.IrregularLineField == null)) {
                        this.IrregularLineField = XTypedList<IrregularLine>.Initialize(this, LinqToXsdTypeManager.Instance, value, IrregularLineXName);
                    }
                    else {
                        XTypedServices.SetList<IrregularLine>(this.IrregularLineField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((Line* | IrregularLine* | Curve* | Spiral* | Chain*)+, Feature*)
        /// </para>
        /// </summary>
        public virtual IList<Curve> Curve {
            get {
                if ((this.CurveField == null)) {
                    this.CurveField = new XTypedList<Curve>(this, LinqToXsdTypeManager.Instance, CurveXName);
                }
                return this.CurveField;
            }
            set {
                if ((value == null)) {
                    this.CurveField = null;
                }
                else {
                    if ((this.CurveField == null)) {
                        this.CurveField = XTypedList<Curve>.Initialize(this, LinqToXsdTypeManager.Instance, value, CurveXName);
                    }
                    else {
                        XTypedServices.SetList<Curve>(this.CurveField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((Line* | IrregularLine* | Curve* | Spiral* | Chain*)+, Feature*)
        /// </para>
        /// </summary>
        public virtual IList<Spiral> Spiral {
            get {
                if ((this.SpiralField == null)) {
                    this.SpiralField = new XTypedList<Spiral>(this, LinqToXsdTypeManager.Instance, SpiralXName);
                }
                return this.SpiralField;
            }
            set {
                if ((value == null)) {
                    this.SpiralField = null;
                }
                else {
                    if ((this.SpiralField == null)) {
                        this.SpiralField = XTypedList<Spiral>.Initialize(this, LinqToXsdTypeManager.Instance, value, SpiralXName);
                    }
                    else {
                        XTypedServices.SetList<Spiral>(this.SpiralField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((Line* | IrregularLine* | Curve* | Spiral* | Chain*)+, Feature*)
        /// </para>
        /// </summary>
        public virtual IList<Chain> Chain {
            get {
                if ((this.ChainField == null)) {
                    this.ChainField = new XTypedList<Chain>(this, LinqToXsdTypeManager.Instance, ChainXName);
                }
                return this.ChainField;
            }
            set {
                if ((value == null)) {
                    this.ChainField = null;
                }
                else {
                    if ((this.ChainField == null)) {
                        this.ChainField = XTypedList<Chain>.Initialize(this, LinqToXsdTypeManager.Instance, value, ChainXName);
                    }
                    else {
                        XTypedServices.SetList<Chain>(this.ChainField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: ((Line* | IrregularLine* | Curve* | Spiral* | Chain*)+, Feature*)
        /// </para>
        /// </summary>
        public virtual IList<Feature> Feature {
            get {
                if ((this.FeatureField == null)) {
                    this.FeatureField = new XTypedList<Feature>(this, LinqToXsdTypeManager.Instance, FeatureXName);
                }
                return this.FeatureField;
            }
            set {
                if ((value == null)) {
                    this.FeatureField = null;
                }
                else {
                    if ((this.FeatureField == null)) {
                        this.FeatureField = XTypedList<Feature>.Initialize(this, LinqToXsdTypeManager.Instance, value, FeatureXName);
                    }
                    else {
                        XTypedServices.SetList<Feature>(this.FeatureField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string desc {
            get {
                XAttribute x = this.Attribute(descXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(descXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string name {
            get {
                XAttribute x = this.Attribute(nameXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(nameXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual LandXml.v1_2.stateType? state {
            get {
                XAttribute x = this.Attribute(stateXName);
                if ((x == null)) {
                    return null;
                }
                return ((LandXml.v1_2.stateType)(Enum.Parse(typeof(LandXml.v1_2.stateType), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetAttribute(stateXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string oID {
            get {
                XAttribute x = this.Attribute(oIDXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(oIDXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static CoordGeom Load(string xmlFile) {
            return XTypedServices.Load<CoordGeom>(xmlFile);
        }
        
        public static CoordGeom Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<CoordGeom>(xmlFile);
        }
        
        public static CoordGeom Parse(string xml) {
            return XTypedServices.Parse<CoordGeom>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<CoordGeom>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(LineXName, typeof(Line));
            localElementDictionary.Add(IrregularLineXName, typeof(IrregularLine));
            localElementDictionary.Add(CurveXName, typeof(Curve));
            localElementDictionary.Add(SpiralXName, typeof(Spiral));
            localElementDictionary.Add(ChainXName, typeof(Chain));
            localElementDictionary.Add(FeatureXName, typeof(Feature));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Start, End, Feature*)
    /// </para>
    /// </summary>
    public partial class Line : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName StartXName = System.Xml.Linq.XName.Get("Start", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName EndXName = System.Xml.Linq.XName.Get("End", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName FeatureXName = System.Xml.Linq.XName.Get("Feature", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<Feature> FeatureField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName descXName = System.Xml.Linq.XName.Get("desc", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName dirXName = System.Xml.Linq.XName.Get("dir", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName lengthXName = System.Xml.Linq.XName.Get("length", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName nameXName = System.Xml.Linq.XName.Get("name", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName staStartXName = System.Xml.Linq.XName.Get("staStart", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName stateXName = System.Xml.Linq.XName.Get("state", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName oIDXName = System.Xml.Linq.XName.Get("oID", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName noteXName = System.Xml.Linq.XName.Get("note", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("Line", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator Line(XElement xe) { return XTypedServices.ToXTypedElement<Line>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static Line() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(StartXName), new NamedContentModelEntity(EndXName), new NamedContentModelEntity(FeatureXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Start, End, Feature*)
        /// </para>
        /// </summary>
        public Line() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (Start, End, Feature*)
        /// </para>
        /// </summary>
        public virtual Start Start {
            get {
                XElement x = this.GetElement(StartXName);
                return ((Start)(x));
            }
            set {
                this.SetElement(StartXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (Start, End, Feature*)
        /// </para>
        /// </summary>
        public virtual End End {
            get {
                XElement x = this.GetElement(EndXName);
                return ((End)(x));
            }
            set {
                this.SetElement(EndXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Start, End, Feature*)
        /// </para>
        /// </summary>
        public virtual IList<Feature> Feature {
            get {
                if ((this.FeatureField == null)) {
                    this.FeatureField = new XTypedList<Feature>(this, LinqToXsdTypeManager.Instance, FeatureXName);
                }
                return this.FeatureField;
            }
            set {
                if ((value == null)) {
                    this.FeatureField = null;
                }
                else {
                    if ((this.FeatureField == null)) {
                        this.FeatureField = XTypedList<Feature>.Initialize(this, LinqToXsdTypeManager.Instance, value, FeatureXName);
                    }
                    else {
                        XTypedServices.SetList<Feature>(this.FeatureField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string desc {
            get {
                XAttribute x = this.Attribute(descXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(descXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Double? dir {
            get {
                XAttribute x = this.Attribute(dirXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetAttribute(dirXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Double? length {
            get {
                XAttribute x = this.Attribute(lengthXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetAttribute(lengthXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string name {
            get {
                XAttribute x = this.Attribute(nameXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(nameXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Double? staStart {
            get {
                XAttribute x = this.Attribute(staStartXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetAttribute(staStartXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual LandXml.v1_2.stateType? state {
            get {
                XAttribute x = this.Attribute(stateXName);
                if ((x == null)) {
                    return null;
                }
                return ((LandXml.v1_2.stateType)(Enum.Parse(typeof(LandXml.v1_2.stateType), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetAttribute(stateXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string oID {
            get {
                XAttribute x = this.Attribute(oIDXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(oIDXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string note {
            get {
                XAttribute x = this.Attribute(noteXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(noteXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static Line Load(string xmlFile) {
            return XTypedServices.Load<Line>(xmlFile);
        }
        
        public static Line Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<Line>(xmlFile);
        }
        
        public static Line Parse(string xml) {
            return XTypedServices.Parse<Line>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<Line>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(StartXName, typeof(Start));
            localElementDictionary.Add(EndXName, typeof(End));
            localElementDictionary.Add(FeatureXName, typeof(Feature));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (CrossSect+, Feature*)
    /// </para>
    /// </summary>
    public partial class CrossSects : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName CrossSectXName = System.Xml.Linq.XName.Get("CrossSect", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<CrossSect> CrossSectField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName FeatureXName = System.Xml.Linq.XName.Get("Feature", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<Feature> FeatureField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName descXName = System.Xml.Linq.XName.Get("desc", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName nameXName = System.Xml.Linq.XName.Get("name", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName stateXName = System.Xml.Linq.XName.Get("state", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName calcMethodXName = System.Xml.Linq.XName.Get("calcMethod", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName curveCorrectionXName = System.Xml.Linq.XName.Get("curveCorrection", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName swellFactorXName = System.Xml.Linq.XName.Get("swellFactor", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName shrinkFactorXName = System.Xml.Linq.XName.Get("shrinkFactor", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("CrossSects", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator CrossSects(XElement xe) { return XTypedServices.ToXTypedElement<CrossSects>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static CrossSects() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(CrossSectXName), new NamedContentModelEntity(FeatureXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (CrossSect+, Feature*)
        /// </para>
        /// </summary>
        public CrossSects() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (CrossSect+, Feature*)
        /// </para>
        /// </summary>
        public virtual IList<CrossSect> CrossSect {
            get {
                if ((this.CrossSectField == null)) {
                    this.CrossSectField = new XTypedList<CrossSect>(this, LinqToXsdTypeManager.Instance, CrossSectXName);
                }
                return this.CrossSectField;
            }
            set {
                if ((value == null)) {
                    this.CrossSectField = null;
                }
                else {
                    if ((this.CrossSectField == null)) {
                        this.CrossSectField = XTypedList<CrossSect>.Initialize(this, LinqToXsdTypeManager.Instance, value, CrossSectXName);
                    }
                    else {
                        XTypedServices.SetList<CrossSect>(this.CrossSectField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (CrossSect+, Feature*)
        /// </para>
        /// </summary>
        public virtual IList<Feature> Feature {
            get {
                if ((this.FeatureField == null)) {
                    this.FeatureField = new XTypedList<Feature>(this, LinqToXsdTypeManager.Instance, FeatureXName);
                }
                return this.FeatureField;
            }
            set {
                if ((value == null)) {
                    this.FeatureField = null;
                }
                else {
                    if ((this.FeatureField == null)) {
                        this.FeatureField = XTypedList<Feature>.Initialize(this, LinqToXsdTypeManager.Instance, value, FeatureXName);
                    }
                    else {
                        XTypedServices.SetList<Feature>(this.FeatureField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string desc {
            get {
                XAttribute x = this.Attribute(descXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(descXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string name {
            get {
                XAttribute x = this.Attribute(nameXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(nameXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual LandXml.v1_2.stateType? state {
            get {
                XAttribute x = this.Attribute(stateXName);
                if ((x == null)) {
                    return null;
                }
                return ((LandXml.v1_2.stateType)(Enum.Parse(typeof(LandXml.v1_2.stateType), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetAttribute(stateXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual LandXml.v1_2.xsVolCalcMethodType? calcMethod {
            get {
                XAttribute x = this.Attribute(calcMethodXName);
                if ((x == null)) {
                    return null;
                }
                return ((LandXml.v1_2.xsVolCalcMethodType)(Enum.Parse(typeof(LandXml.v1_2.xsVolCalcMethodType), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetAttribute(calcMethodXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Boolean? curveCorrection {
            get {
                XAttribute x = this.Attribute(curveCorrectionXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
            set {
                this.SetAttribute(curveCorrectionXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Double? swellFactor {
            get {
                XAttribute x = this.Attribute(swellFactorXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetAttribute(swellFactorXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Double? shrinkFactor {
            get {
                XAttribute x = this.Attribute(shrinkFactorXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetAttribute(shrinkFactorXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static CrossSects Load(string xmlFile) {
            return XTypedServices.Load<CrossSects>(xmlFile);
        }
        
        public static CrossSects Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<CrossSects>(xmlFile);
        }
        
        public static CrossSects Parse(string xml) {
            return XTypedServices.Parse<CrossSects>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<CrossSects>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(CrossSectXName, typeof(CrossSect));
            localElementDictionary.Add(FeatureXName, typeof(Feature));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (CrossSectSurf*, DesignCrossSectSurf*, Feature*)
    /// </para>
    /// </summary>
    public partial class CrossSect : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName CrossSectSurfXName = System.Xml.Linq.XName.Get("CrossSectSurf", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<CrossSectSurf> CrossSectSurfField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName DesignCrossSectSurfXName = System.Xml.Linq.XName.Get("DesignCrossSectSurf", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<DesignCrossSectSurf> DesignCrossSectSurfField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName FeatureXName = System.Xml.Linq.XName.Get("Feature", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<Feature> FeatureField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName staXName = System.Xml.Linq.XName.Get("sta", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName nameXName = System.Xml.Linq.XName.Get("name", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName descXName = System.Xml.Linq.XName.Get("desc", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName angleSkewXName = System.Xml.Linq.XName.Get("angleSkew", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName areaCutXName = System.Xml.Linq.XName.Get("areaCut", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName areaFillXName = System.Xml.Linq.XName.Get("areaFill", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName centroidCutXName = System.Xml.Linq.XName.Get("centroidCut", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName centroidFillXName = System.Xml.Linq.XName.Get("centroidFill", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName sectTypeXName = System.Xml.Linq.XName.Get("sectType", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName volumeCutXName = System.Xml.Linq.XName.Get("volumeCut", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName volumeFillXName = System.Xml.Linq.XName.Get("volumeFill", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("CrossSect", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator CrossSect(XElement xe) { return XTypedServices.ToXTypedElement<CrossSect>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static CrossSect() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(CrossSectSurfXName), new NamedContentModelEntity(DesignCrossSectSurfXName), new NamedContentModelEntity(FeatureXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (CrossSectSurf*, DesignCrossSectSurf*, Feature*)
        /// </para>
        /// </summary>
        public CrossSect() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (CrossSectSurf*, DesignCrossSectSurf*, Feature*)
        /// </para>
        /// </summary>
        public virtual IList<CrossSectSurf> CrossSectSurf {
            get {
                if ((this.CrossSectSurfField == null)) {
                    this.CrossSectSurfField = new XTypedList<CrossSectSurf>(this, LinqToXsdTypeManager.Instance, CrossSectSurfXName);
                }
                return this.CrossSectSurfField;
            }
            set {
                if ((value == null)) {
                    this.CrossSectSurfField = null;
                }
                else {
                    if ((this.CrossSectSurfField == null)) {
                        this.CrossSectSurfField = XTypedList<CrossSectSurf>.Initialize(this, LinqToXsdTypeManager.Instance, value, CrossSectSurfXName);
                    }
                    else {
                        XTypedServices.SetList<CrossSectSurf>(this.CrossSectSurfField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (CrossSectSurf*, DesignCrossSectSurf*, Feature*)
        /// </para>
        /// </summary>
        public virtual IList<DesignCrossSectSurf> DesignCrossSectSurf {
            get {
                if ((this.DesignCrossSectSurfField == null)) {
                    this.DesignCrossSectSurfField = new XTypedList<DesignCrossSectSurf>(this, LinqToXsdTypeManager.Instance, DesignCrossSectSurfXName);
                }
                return this.DesignCrossSectSurfField;
            }
            set {
                if ((value == null)) {
                    this.DesignCrossSectSurfField = null;
                }
                else {
                    if ((this.DesignCrossSectSurfField == null)) {
                        this.DesignCrossSectSurfField = XTypedList<DesignCrossSectSurf>.Initialize(this, LinqToXsdTypeManager.Instance, value, DesignCrossSectSurfXName);
                    }
                    else {
                        XTypedServices.SetList<DesignCrossSectSurf>(this.DesignCrossSectSurfField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (CrossSectSurf*, DesignCrossSectSurf*, Feature*)
        /// </para>
        /// </summary>
        public virtual IList<Feature> Feature {
            get {
                if ((this.FeatureField == null)) {
                    this.FeatureField = new XTypedList<Feature>(this, LinqToXsdTypeManager.Instance, FeatureXName);
                }
                return this.FeatureField;
            }
            set {
                if ((value == null)) {
                    this.FeatureField = null;
                }
                else {
                    if ((this.FeatureField == null)) {
                        this.FeatureField = XTypedList<Feature>.Initialize(this, LinqToXsdTypeManager.Instance, value, FeatureXName);
                    }
                    else {
                        XTypedServices.SetList<Feature>(this.FeatureField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual double sta {
            get {
                XAttribute x = this.Attribute(staXName);
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetAttribute(staXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string name {
            get {
                XAttribute x = this.Attribute(nameXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(nameXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string desc {
            get {
                XAttribute x = this.Attribute(descXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(descXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Double? angleSkew {
            get {
                XAttribute x = this.Attribute(angleSkewXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetAttribute(angleSkewXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Double? areaCut {
            get {
                XAttribute x = this.Attribute(areaCutXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetAttribute(areaCutXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Double? areaFill {
            get {
                XAttribute x = this.Attribute(areaFillXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetAttribute(areaFillXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Double? centroidCut {
            get {
                XAttribute x = this.Attribute(centroidCutXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetAttribute(centroidCutXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Double? centroidFill {
            get {
                XAttribute x = this.Attribute(centroidFillXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetAttribute(centroidFillXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string sectType {
            get {
                XAttribute x = this.Attribute(sectTypeXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(sectTypeXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Double? volumeCut {
            get {
                XAttribute x = this.Attribute(volumeCutXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetAttribute(volumeCutXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Double? volumeFill {
            get {
                XAttribute x = this.Attribute(volumeFillXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetAttribute(volumeFillXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static CrossSect Load(string xmlFile) {
            return XTypedServices.Load<CrossSect>(xmlFile);
        }
        
        public static CrossSect Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<CrossSect>(xmlFile);
        }
        
        public static CrossSect Parse(string xml) {
            return XTypedServices.Parse<CrossSect>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<CrossSect>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(CrossSectSurfXName, typeof(CrossSectSurf));
            localElementDictionary.Add(DesignCrossSectSurfXName, typeof(DesignCrossSectSurf));
            localElementDictionary.Add(FeatureXName, typeof(Feature));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (PntList2D+, Feature*)
    /// </para>
    /// </summary>
    public partial class CrossSectSurf : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName PntList2DXName = System.Xml.Linq.XName.Get("PntList2D", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XSimpleList<PntList2D> PntList2DField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName FeatureXName = System.Xml.Linq.XName.Get("Feature", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<Feature> FeatureField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName nameXName = System.Xml.Linq.XName.Get("name", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName descXName = System.Xml.Linq.XName.Get("desc", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName stateXName = System.Xml.Linq.XName.Get("state", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("CrossSectSurf", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator CrossSectSurf(XElement xe) { return XTypedServices.ToXTypedElement<CrossSectSurf>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static CrossSectSurf() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(PntList2DXName), new NamedContentModelEntity(FeatureXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (PntList2D+, Feature*)
        /// </para>
        /// </summary>
        public CrossSectSurf() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (PntList2D+, Feature*)
        /// </para>
        /// </summary>
        public virtual IList<PntList2D> PntList2D {
            get {
                if ((this.PntList2DField == null)) {
                    this.PntList2DField = new XSimpleList<PntList2D>(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype, PntList2DXName);
                }
                return this.PntList2DField;
            }
            set {
                if ((value == null)) {
                    this.PntList2DField = null;
                }
                else {
                    if ((this.PntList2DField == null)) {
                        this.PntList2DField = XSimpleList<PntList2D>.Initialize(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype, value, PntList2DXName);
                    }
                    else {
                        XTypedServices.SetList<PntList2D>(this.PntList2DField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (PntList2D+, Feature*)
        /// </para>
        /// </summary>
        public virtual IList<Feature> Feature {
            get {
                if ((this.FeatureField == null)) {
                    this.FeatureField = new XTypedList<Feature>(this, LinqToXsdTypeManager.Instance, FeatureXName);
                }
                return this.FeatureField;
            }
            set {
                if ((value == null)) {
                    this.FeatureField = null;
                }
                else {
                    if ((this.FeatureField == null)) {
                        this.FeatureField = XTypedList<Feature>.Initialize(this, LinqToXsdTypeManager.Instance, value, FeatureXName);
                    }
                    else {
                        XTypedServices.SetList<Feature>(this.FeatureField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual string name {
            get {
                XAttribute x = this.Attribute(nameXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(nameXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string desc {
            get {
                XAttribute x = this.Attribute(descXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(descXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual LandXml.v1_2.stateType? state {
            get {
                XAttribute x = this.Attribute(stateXName);
                if ((x == null)) {
                    return null;
                }
                return ((LandXml.v1_2.stateType)(Enum.Parse(typeof(LandXml.v1_2.stateType), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetAttribute(stateXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static CrossSectSurf Load(string xmlFile) {
            return XTypedServices.Load<CrossSectSurf>(xmlFile);
        }
        
        public static CrossSectSurf Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<CrossSectSurf>(xmlFile);
        }
        
        public static CrossSectSurf Parse(string xml) {
            return XTypedServices.Parse<CrossSectSurf>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<CrossSectSurf>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(PntList2DXName, typeof(PntList2D));
            localElementDictionary.Add(FeatureXName, typeof(Feature));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    public partial class CrossSectPnt : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName dataFormatXName = System.Xml.Linq.XName.Get("dataFormat", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static string dataFormatDefaultValue = "Offset Elevation";
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName alignRefXName = System.Xml.Linq.XName.Get("alignRef", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName alignRefStationXName = System.Xml.Linq.XName.Get("alignRefStation", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName planFeatureRefXName = System.Xml.Linq.XName.Get("planFeatureRef", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName planFeatureRefStationXName = System.Xml.Linq.XName.Get("planFeatureRefStation", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName parcelRefXName = System.Xml.Linq.XName.Get("parcelRef", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName parcelRefStationXName = System.Xml.Linq.XName.Get("parcelRefStation", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName nameXName = System.Xml.Linq.XName.Get("name", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName descXName = System.Xml.Linq.XName.Get("desc", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName codeXName = System.Xml.Linq.XName.Get("code", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName stateXName = System.Xml.Linq.XName.Get("state", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName pntRefXName = System.Xml.Linq.XName.Get("pntRef", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName featureRefXName = System.Xml.Linq.XName.Get("featureRef", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName pointGeometryXName = System.Xml.Linq.XName.Get("pointGeometry", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName DTMAttributeXName = System.Xml.Linq.XName.Get("DTMAttribute", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName timeStampXName = System.Xml.Linq.XName.Get("timeStamp", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName roleXName = System.Xml.Linq.XName.Get("role", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName determinedTimeStampXName = System.Xml.Linq.XName.Get("determinedTimeStamp", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ellipsoidHeightXName = System.Xml.Linq.XName.Get("ellipsoidHeight", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName latitudeXName = System.Xml.Linq.XName.Get("latitude", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName longitudeXName = System.Xml.Linq.XName.Get("longitude", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName zoneXName = System.Xml.Linq.XName.Get("zone", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName northingStdErrorXName = System.Xml.Linq.XName.Get("northingStdError", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName eastingStdErrorXName = System.Xml.Linq.XName.Get("eastingStdError", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName elevationStdErrorXName = System.Xml.Linq.XName.Get("elevationStdError", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("CrossSectPnt", "http://www.landxml.org/schema/LandXML-1.2");
        
		public static explicit operator CrossSectPnt(XElement xe) { return XTypedServices.ToXTypedElement<CrossSectPnt>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public CrossSectPnt() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string dataFormat {
            get {
                XAttribute x = this.Attribute(dataFormatXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, dataFormatDefaultValue);
            }
            set {
                this.SetAttribute(dataFormatXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string alignRef {
            get {
                XAttribute x = this.Attribute(alignRefXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(alignRefXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Double? alignRefStation {
            get {
                XAttribute x = this.Attribute(alignRefStationXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetAttribute(alignRefStationXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string planFeatureRef {
            get {
                XAttribute x = this.Attribute(planFeatureRefXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(planFeatureRefXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Double? planFeatureRefStation {
            get {
                XAttribute x = this.Attribute(planFeatureRefStationXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetAttribute(planFeatureRefStationXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string parcelRef {
            get {
                XAttribute x = this.Attribute(parcelRefXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(parcelRefXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Double? parcelRefStation {
            get {
                XAttribute x = this.Attribute(parcelRefStationXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetAttribute(parcelRefStationXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string name {
            get {
                XAttribute x = this.Attribute(nameXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(nameXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string desc {
            get {
                XAttribute x = this.Attribute(descXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(descXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string code {
            get {
                XAttribute x = this.Attribute(codeXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(codeXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual LandXml.v1_2.stateType? state {
            get {
                XAttribute x = this.Attribute(stateXName);
                if ((x == null)) {
                    return null;
                }
                return ((LandXml.v1_2.stateType)(Enum.Parse(typeof(LandXml.v1_2.stateType), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetAttribute(stateXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string pntRef {
            get {
                XAttribute x = this.Attribute(pntRefXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(pntRefXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string featureRef {
            get {
                XAttribute x = this.Attribute(featureRefXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(featureRefXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual LandXml.v1_2.pointGeometryType? pointGeometry {
            get {
                XAttribute x = this.Attribute(pointGeometryXName);
                if ((x == null)) {
                    return null;
                }
                return ((LandXml.v1_2.pointGeometryType)(Enum.Parse(typeof(LandXml.v1_2.pointGeometryType), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetAttribute(pointGeometryXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string DTMAttribute {
            get {
                XAttribute x = this.Attribute(DTMAttributeXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(DTMAttributeXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.DateTime? timeStamp {
            get {
                XAttribute x = this.Attribute(timeStampXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<System.DateTime>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.DateTime).Datatype);
            }
            set {
                this.SetAttribute(timeStampXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.DateTime).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string role {
            get {
                XAttribute x = this.Attribute(roleXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(roleXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.DateTime? determinedTimeStamp {
            get {
                XAttribute x = this.Attribute(determinedTimeStampXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<System.DateTime>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.DateTime).Datatype);
            }
            set {
                this.SetAttribute(determinedTimeStampXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.DateTime).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Double? ellipsoidHeight {
            get {
                XAttribute x = this.Attribute(ellipsoidHeightXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetAttribute(ellipsoidHeightXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Double? latitude {
            get {
                XAttribute x = this.Attribute(latitudeXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetAttribute(latitudeXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Double? longitude {
            get {
                XAttribute x = this.Attribute(longitudeXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetAttribute(longitudeXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string zone {
            get {
                XAttribute x = this.Attribute(zoneXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(zoneXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Double? northingStdError {
            get {
                XAttribute x = this.Attribute(northingStdErrorXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetAttribute(northingStdErrorXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Double? eastingStdError {
            get {
                XAttribute x = this.Attribute(eastingStdErrorXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetAttribute(eastingStdErrorXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Double? elevationStdError {
            get {
                XAttribute x = this.Attribute(elevationStdErrorXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetAttribute(elevationStdErrorXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static CrossSectPnt Load(string xmlFile) {
            return XTypedServices.Load<CrossSectPnt>(xmlFile);
        }
        
        public static CrossSectPnt Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<CrossSectPnt>(xmlFile);
        }
        
        public static CrossSectPnt Parse(string xml) {
            return XTypedServices.Parse<CrossSectPnt>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<CrossSectPnt>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (CrossSectPnt*, Feature*)
    /// </para>
    /// </summary>
    public partial class DesignCrossSectSurf : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName CrossSectPntXName = System.Xml.Linq.XName.Get("CrossSectPnt", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<CrossSectPnt> CrossSectPntField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName FeatureXName = System.Xml.Linq.XName.Get("Feature", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<Feature> FeatureField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName nameXName = System.Xml.Linq.XName.Get("name", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName descXName = System.Xml.Linq.XName.Get("desc", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName stateXName = System.Xml.Linq.XName.Get("state", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName sideXName = System.Xml.Linq.XName.Get("side", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName materialXName = System.Xml.Linq.XName.Get("material", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName closedAreaXName = System.Xml.Linq.XName.Get("closedArea", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName typicalThicknessXName = System.Xml.Linq.XName.Get("typicalThickness", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName typicalWidthXName = System.Xml.Linq.XName.Get("typicalWidth", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName areaXName = System.Xml.Linq.XName.Get("area", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName volumeXName = System.Xml.Linq.XName.Get("volume", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("DesignCrossSectSurf", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator DesignCrossSectSurf(XElement xe) { return XTypedServices.ToXTypedElement<DesignCrossSectSurf>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static DesignCrossSectSurf() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(CrossSectPntXName), new NamedContentModelEntity(FeatureXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (CrossSectPnt*, Feature*)
        /// </para>
        /// </summary>
        public DesignCrossSectSurf() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (CrossSectPnt*, Feature*)
        /// </para>
        /// </summary>
        public virtual IList<CrossSectPnt> CrossSectPnt {
            get {
                if ((this.CrossSectPntField == null)) {
                    this.CrossSectPntField = new XTypedList<CrossSectPnt>(this, LinqToXsdTypeManager.Instance, CrossSectPntXName);
                }
                return this.CrossSectPntField;
            }
            set {
                if ((value == null)) {
                    this.CrossSectPntField = null;
                }
                else {
                    if ((this.CrossSectPntField == null)) {
                        this.CrossSectPntField = XTypedList<CrossSectPnt>.Initialize(this, LinqToXsdTypeManager.Instance, value, CrossSectPntXName);
                    }
                    else {
                        XTypedServices.SetList<CrossSectPnt>(this.CrossSectPntField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (CrossSectPnt*, Feature*)
        /// </para>
        /// </summary>
        public virtual IList<Feature> Feature {
            get {
                if ((this.FeatureField == null)) {
                    this.FeatureField = new XTypedList<Feature>(this, LinqToXsdTypeManager.Instance, FeatureXName);
                }
                return this.FeatureField;
            }
            set {
                if ((value == null)) {
                    this.FeatureField = null;
                }
                else {
                    if ((this.FeatureField == null)) {
                        this.FeatureField = XTypedList<Feature>.Initialize(this, LinqToXsdTypeManager.Instance, value, FeatureXName);
                    }
                    else {
                        XTypedServices.SetList<Feature>(this.FeatureField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string name {
            get {
                XAttribute x = this.Attribute(nameXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(nameXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string desc {
            get {
                XAttribute x = this.Attribute(descXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(descXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual LandXml.v1_2.stateType? state {
            get {
                XAttribute x = this.Attribute(stateXName);
                if ((x == null)) {
                    return null;
                }
                return ((LandXml.v1_2.stateType)(Enum.Parse(typeof(LandXml.v1_2.stateType), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetAttribute(stateXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual LandXml.v1_2.sideofRoadType? side {
            get {
                XAttribute x = this.Attribute(sideXName);
                if ((x == null)) {
                    return null;
                }
                return ((LandXml.v1_2.sideofRoadType)(Enum.Parse(typeof(LandXml.v1_2.sideofRoadType), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetAttribute(sideXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string material {
            get {
                XAttribute x = this.Attribute(materialXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(materialXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Boolean? closedArea {
            get {
                XAttribute x = this.Attribute(closedAreaXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
            set {
                this.SetAttribute(closedAreaXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Double? typicalThickness {
            get {
                XAttribute x = this.Attribute(typicalThicknessXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetAttribute(typicalThicknessXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Double? typicalWidth {
            get {
                XAttribute x = this.Attribute(typicalWidthXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetAttribute(typicalWidthXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Double? area {
            get {
                XAttribute x = this.Attribute(areaXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetAttribute(areaXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Double? volume {
            get {
                XAttribute x = this.Attribute(volumeXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetAttribute(volumeXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static DesignCrossSectSurf Load(string xmlFile) {
            return XTypedServices.Load<DesignCrossSectSurf>(xmlFile);
        }
        
        public static DesignCrossSectSurf Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<DesignCrossSectSurf>(xmlFile);
        }
        
        public static DesignCrossSectSurf Parse(string xml) {
            return XTypedServices.Parse<DesignCrossSectSurf>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<DesignCrossSectSurf>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(CrossSectPntXName, typeof(CrossSectPnt));
            localElementDictionary.Add(FeatureXName, typeof(Feature));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Feature* | any)*
    /// </para>
    /// </summary>
    public partial class Project : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName FeatureXName = System.Xml.Linq.XName.Get("Feature", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<Feature> FeatureField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName nameXName = System.Xml.Linq.XName.Get("name", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName descXName = System.Xml.Linq.XName.Get("desc", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName stateXName = System.Xml.Linq.XName.Get("state", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("Project", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static FSM validationStates;
        
		public static explicit operator Project(XElement xe) { return XTypedServices.ToXTypedElement<Project>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static Project() {
            BuildElementDictionary();
            InitFSM();
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Feature* | any)*
        /// </para>
        /// </summary>
        public Project() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating, choice
        /// </para>
        /// <para>
        /// Regular expression: (Feature* | any)*
        /// </para>
        /// </summary>
        public virtual IList<Feature> Feature {
            get {
                if ((this.FeatureField == null)) {
                    this.FeatureField = new XTypedList<Feature>(this, LinqToXsdTypeManager.Instance, FeatureXName);
                }
                return this.FeatureField;
            }
            set {
                if ((value == null)) {
                    this.FeatureField = null;
                }
                else {
                    if ((this.FeatureField == null)) {
                        this.FeatureField = XTypedList<Feature>.Initialize(this, LinqToXsdTypeManager.Instance, value, FeatureXName);
                    }
                    else {
                        XTypedServices.SetList<Feature>(this.FeatureField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Feature* | any)*
        /// </para>
        /// </summary>
        public virtual IEnumerable<XElement> Any {
            get {
                return this.GetWildCards(WildCard.DefaultWildCard);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual string name {
            get {
                XAttribute x = this.Attribute(nameXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(nameXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string desc {
            get {
                XAttribute x = this.Attribute(descXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(descXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual LandXml.v1_2.stateType? state {
            get {
                XAttribute x = this.Attribute(stateXName);
                if ((x == null)) {
                    return null;
                }
                return ((LandXml.v1_2.stateType)(Enum.Parse(typeof(LandXml.v1_2.stateType), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetAttribute(stateXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static Project Load(string xmlFile) {
            return XTypedServices.Load<Project>(xmlFile);
        }
        
        public static Project Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<Project>(xmlFile);
        }
        
        public static Project Parse(string xml) {
            return XTypedServices.Parse<Project>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<Project>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(FeatureXName, typeof(Feature));
        }
        
        FSM IXMetaData.GetValidationStates() {
            return validationStates;
        }
        
        private static void InitFSM() {
            Dictionary<int, Transitions> transitions = new Dictionary<int, Transitions>();
            transitions.Add(1, new Transitions(new SingleTransition(System.Xml.Linq.XName.Get("Feature", "http://www.landxml.org/schema/LandXML-1.2"), 1), new SingleTransition(new WildCard("##other", "http://www.landxml.org/schema/LandXML-1.2"), 1)));
            validationStates = new FSM(1, new Set<int>(1), transitions);
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Metric | Imperial)
    /// </para>
    /// </summary>
    public partial class Units : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName MetricXName = System.Xml.Linq.XName.Get("Metric", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ImperialXName = System.Xml.Linq.XName.Get("Imperial", "http://www.landxml.org/schema/LandXML-1.2");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("Units", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator Units(XElement xe) { return XTypedServices.ToXTypedElement<Units>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static Units() {
            BuildElementDictionary();
            contentModel = new ChoiceContentModelEntity(new NamedContentModelEntity(MetricXName), new NamedContentModelEntity(ImperialXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Metric | Imperial)
        /// </para>
        /// </summary>
        public Units() {
        }
        
        public Units(Metric Metric) {
            this.Metric = Metric;
        }
        
        public Units(Imperial Imperial) {
            this.Imperial = Imperial;
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (Metric | Imperial)
        /// </para>
        /// </summary>
        public virtual Metric Metric {
            get {
                XElement x = this.GetElement(MetricXName);
                return ((Metric)(x));
            }
            set {
                this.SetElement(MetricXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (Metric | Imperial)
        /// </para>
        /// </summary>
        public virtual Imperial Imperial {
            get {
                XElement x = this.GetElement(ImperialXName);
                return ((Imperial)(x));
            }
            set {
                this.SetElement(ImperialXName, value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static Units Load(string xmlFile) {
            return XTypedServices.Load<Units>(xmlFile);
        }
        
        public static Units Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<Units>(xmlFile);
        }
        
        public static Units Parse(string xml) {
            return XTypedServices.Parse<Units>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<Units>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(MetricXName, typeof(Metric));
            localElementDictionary.Add(ImperialXName, typeof(Imperial));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    public partial class Metric : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName areaUnitXName = System.Xml.Linq.XName.Get("areaUnit", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName linearUnitXName = System.Xml.Linq.XName.Get("linearUnit", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName volumeUnitXName = System.Xml.Linq.XName.Get("volumeUnit", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName temperatureUnitXName = System.Xml.Linq.XName.Get("temperatureUnit", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName pressureUnitXName = System.Xml.Linq.XName.Get("pressureUnit", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName diameterUnitXName = System.Xml.Linq.XName.Get("diameterUnit", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName widthUnitXName = System.Xml.Linq.XName.Get("widthUnit", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName heightUnitXName = System.Xml.Linq.XName.Get("heightUnit", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName velocityUnitXName = System.Xml.Linq.XName.Get("velocityUnit", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName flowUnitXName = System.Xml.Linq.XName.Get("flowUnit", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName angularUnitXName = System.Xml.Linq.XName.Get("angularUnit", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static string angularUnitDefaultValue = "radians";
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName directionUnitXName = System.Xml.Linq.XName.Get("directionUnit", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static string directionUnitDefaultValue = "radians";
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName latLongAngularUnitXName = System.Xml.Linq.XName.Get("latLongAngularUnit", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static string latLongAngularUnitDefaultValue = "decimal degrees";
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName elevationUnitXName = System.Xml.Linq.XName.Get("elevationUnit", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static string elevationUnitDefaultValue = "meter";
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("Metric", "http://www.landxml.org/schema/LandXML-1.2");
        
		public static explicit operator Metric(XElement xe) { return XTypedServices.ToXTypedElement<Metric>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public Metric() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual LandXml.v1_2.metArea areaUnit {
            get {
                XAttribute x = this.Attribute(areaUnitXName);
                return ((LandXml.v1_2.metArea)(Enum.Parse(typeof(LandXml.v1_2.metArea), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetAttribute(areaUnitXName, value.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual LandXml.v1_2.metLinear linearUnit {
            get {
                XAttribute x = this.Attribute(linearUnitXName);
                return ((LandXml.v1_2.metLinear)(Enum.Parse(typeof(LandXml.v1_2.metLinear), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetAttribute(linearUnitXName, value.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual LandXml.v1_2.metVolume volumeUnit {
            get {
                XAttribute x = this.Attribute(volumeUnitXName);
                return ((LandXml.v1_2.metVolume)(Enum.Parse(typeof(LandXml.v1_2.metVolume), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetAttribute(volumeUnitXName, value.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual LandXml.v1_2.metTemperature temperatureUnit {
            get {
                XAttribute x = this.Attribute(temperatureUnitXName);
                return ((LandXml.v1_2.metTemperature)(Enum.Parse(typeof(LandXml.v1_2.metTemperature), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetAttribute(temperatureUnitXName, value.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual LandXml.v1_2.metPressure pressureUnit {
            get {
                XAttribute x = this.Attribute(pressureUnitXName);
                return ((LandXml.v1_2.metPressure)(Enum.Parse(typeof(LandXml.v1_2.metPressure), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetAttribute(pressureUnitXName, value.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual LandXml.v1_2.metDiameter? diameterUnit {
            get {
                XAttribute x = this.Attribute(diameterUnitXName);
                if ((x == null)) {
                    return null;
                }
                return ((LandXml.v1_2.metDiameter)(Enum.Parse(typeof(LandXml.v1_2.metDiameter), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetAttribute(diameterUnitXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual LandXml.v1_2.metWidth? widthUnit {
            get {
                XAttribute x = this.Attribute(widthUnitXName);
                if ((x == null)) {
                    return null;
                }
                return ((LandXml.v1_2.metWidth)(Enum.Parse(typeof(LandXml.v1_2.metWidth), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetAttribute(widthUnitXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual LandXml.v1_2.metHeight? heightUnit {
            get {
                XAttribute x = this.Attribute(heightUnitXName);
                if ((x == null)) {
                    return null;
                }
                return ((LandXml.v1_2.metHeight)(Enum.Parse(typeof(LandXml.v1_2.metHeight), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetAttribute(heightUnitXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual LandXml.v1_2.metVelocity? velocityUnit {
            get {
                XAttribute x = this.Attribute(velocityUnitXName);
                if ((x == null)) {
                    return null;
                }
                return ((LandXml.v1_2.metVelocity)(Enum.Parse(typeof(LandXml.v1_2.metVelocity), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetAttribute(velocityUnitXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual LandXml.v1_2.metFlow? flowUnit {
            get {
                XAttribute x = this.Attribute(flowUnitXName);
                if ((x == null)) {
                    return null;
                }
                return ((LandXml.v1_2.metFlow)(Enum.Parse(typeof(LandXml.v1_2.metFlow), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetAttribute(flowUnitXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string angularUnit {
            get {
                XAttribute x = this.Attribute(angularUnitXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, angularUnitDefaultValue);
            }
            set {
                this.SetAttribute(angularUnitXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string directionUnit {
            get {
                XAttribute x = this.Attribute(directionUnitXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, directionUnitDefaultValue);
            }
            set {
                this.SetAttribute(directionUnitXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string latLongAngularUnit {
            get {
                XAttribute x = this.Attribute(latLongAngularUnitXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, latLongAngularUnitDefaultValue);
            }
            set {
                this.SetAttribute(latLongAngularUnitXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual LandXml.v1_2.elevationType elevationUnit {
            get {
                XAttribute x = this.Attribute(elevationUnitXName);
                return ((LandXml.v1_2.elevationType)(Enum.Parse(typeof(LandXml.v1_2.elevationType), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, elevationUnitDefaultValue))));
            }
            set {
                this.SetAttribute(elevationUnitXName, value.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static Metric Load(string xmlFile) {
            return XTypedServices.Load<Metric>(xmlFile);
        }
        
        public static Metric Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<Metric>(xmlFile);
        }
        
        public static Metric Parse(string xml) {
            return XTypedServices.Parse<Metric>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<Metric>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class Imperial : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName areaUnitXName = System.Xml.Linq.XName.Get("areaUnit", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName linearUnitXName = System.Xml.Linq.XName.Get("linearUnit", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName volumeUnitXName = System.Xml.Linq.XName.Get("volumeUnit", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName temperatureUnitXName = System.Xml.Linq.XName.Get("temperatureUnit", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName pressureUnitXName = System.Xml.Linq.XName.Get("pressureUnit", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName diameterUnitXName = System.Xml.Linq.XName.Get("diameterUnit", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName widthUnitXName = System.Xml.Linq.XName.Get("widthUnit", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName heightUnitXName = System.Xml.Linq.XName.Get("heightUnit", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName velocityUnitXName = System.Xml.Linq.XName.Get("velocityUnit", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName flowUnitXName = System.Xml.Linq.XName.Get("flowUnit", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName angularUnitXName = System.Xml.Linq.XName.Get("angularUnit", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static string angularUnitDefaultValue = "radians";
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName directionUnitXName = System.Xml.Linq.XName.Get("directionUnit", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static string directionUnitDefaultValue = "radians";
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName latLongAngularUnitXName = System.Xml.Linq.XName.Get("latLongAngularUnit", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static string latLongAngularUnitDefaultValue = "decimal degrees";
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName elevationUnitXName = System.Xml.Linq.XName.Get("elevationUnit", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static string elevationUnitDefaultValue = "meter";
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("Imperial", "http://www.landxml.org/schema/LandXML-1.2");
        
		public static explicit operator Imperial(XElement xe) { return XTypedServices.ToXTypedElement<Imperial>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public Imperial() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual LandXml.v1_2.impArea areaUnit {
            get {
                XAttribute x = this.Attribute(areaUnitXName);
                return ((LandXml.v1_2.impArea)(Enum.Parse(typeof(LandXml.v1_2.impArea), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetAttribute(areaUnitXName, value.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual LandXml.v1_2.impLinear linearUnit {
            get {
                XAttribute x = this.Attribute(linearUnitXName);
                return ((LandXml.v1_2.impLinear)(Enum.Parse(typeof(LandXml.v1_2.impLinear), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetAttribute(linearUnitXName, value.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual LandXml.v1_2.impVolume volumeUnit {
            get {
                XAttribute x = this.Attribute(volumeUnitXName);
                return ((LandXml.v1_2.impVolume)(Enum.Parse(typeof(LandXml.v1_2.impVolume), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetAttribute(volumeUnitXName, value.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual LandXml.v1_2.impTemperature temperatureUnit {
            get {
                XAttribute x = this.Attribute(temperatureUnitXName);
                return ((LandXml.v1_2.impTemperature)(Enum.Parse(typeof(LandXml.v1_2.impTemperature), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetAttribute(temperatureUnitXName, value.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual LandXml.v1_2.impPressure pressureUnit {
            get {
                XAttribute x = this.Attribute(pressureUnitXName);
                return ((LandXml.v1_2.impPressure)(Enum.Parse(typeof(LandXml.v1_2.impPressure), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetAttribute(pressureUnitXName, value.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual LandXml.v1_2.impDiameter? diameterUnit {
            get {
                XAttribute x = this.Attribute(diameterUnitXName);
                if ((x == null)) {
                    return null;
                }
                return ((LandXml.v1_2.impDiameter)(Enum.Parse(typeof(LandXml.v1_2.impDiameter), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetAttribute(diameterUnitXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual LandXml.v1_2.impWidth? widthUnit {
            get {
                XAttribute x = this.Attribute(widthUnitXName);
                if ((x == null)) {
                    return null;
                }
                return ((LandXml.v1_2.impWidth)(Enum.Parse(typeof(LandXml.v1_2.impWidth), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetAttribute(widthUnitXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual LandXml.v1_2.impHeight? heightUnit {
            get {
                XAttribute x = this.Attribute(heightUnitXName);
                if ((x == null)) {
                    return null;
                }
                return ((LandXml.v1_2.impHeight)(Enum.Parse(typeof(LandXml.v1_2.impHeight), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetAttribute(heightUnitXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual LandXml.v1_2.impVelocity? velocityUnit {
            get {
                XAttribute x = this.Attribute(velocityUnitXName);
                if ((x == null)) {
                    return null;
                }
                return ((LandXml.v1_2.impVelocity)(Enum.Parse(typeof(LandXml.v1_2.impVelocity), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetAttribute(velocityUnitXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual LandXml.v1_2.impFlow? flowUnit {
            get {
                XAttribute x = this.Attribute(flowUnitXName);
                if ((x == null)) {
                    return null;
                }
                return ((LandXml.v1_2.impFlow)(Enum.Parse(typeof(LandXml.v1_2.impFlow), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetAttribute(flowUnitXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string angularUnit {
            get {
                XAttribute x = this.Attribute(angularUnitXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, angularUnitDefaultValue);
            }
            set {
                this.SetAttribute(angularUnitXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string directionUnit {
            get {
                XAttribute x = this.Attribute(directionUnitXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, directionUnitDefaultValue);
            }
            set {
                this.SetAttribute(directionUnitXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string latLongAngularUnit {
            get {
                XAttribute x = this.Attribute(latLongAngularUnitXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, latLongAngularUnitDefaultValue);
            }
            set {
                this.SetAttribute(latLongAngularUnitXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual LandXml.v1_2.elevationType elevationUnit {
            get {
                XAttribute x = this.Attribute(elevationUnitXName);
                return ((LandXml.v1_2.elevationType)(Enum.Parse(typeof(LandXml.v1_2.elevationType), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, elevationUnitDefaultValue))));
            }
            set {
                this.SetAttribute(elevationUnitXName, value.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static Imperial Load(string xmlFile) {
            return XTypedServices.Load<Imperial>(xmlFile);
        }
        
        public static Imperial Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<Imperial>(xmlFile);
        }
        
        public static Imperial Parse(string xml) {
            return XTypedServices.Parse<Imperial>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<Imperial>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Start?, FieldNote*, Feature*, any)
    /// </para>
    /// </summary>
    public partial class CoordinateSystem : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName StartXName = System.Xml.Linq.XName.Get("Start", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName FieldNoteXName = System.Xml.Linq.XName.Get("FieldNote", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<FieldNote> FieldNoteField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName FeatureXName = System.Xml.Linq.XName.Get("Feature", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<Feature> FeatureField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName descXName = System.Xml.Linq.XName.Get("desc", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName nameXName = System.Xml.Linq.XName.Get("name", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName epsgCodeXName = System.Xml.Linq.XName.Get("epsgCode", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ogcWktCodeXName = System.Xml.Linq.XName.Get("ogcWktCode", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName horizontalDatumXName = System.Xml.Linq.XName.Get("horizontalDatum", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName verticalDatumXName = System.Xml.Linq.XName.Get("verticalDatum", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ellipsoidNameXName = System.Xml.Linq.XName.Get("ellipsoidName", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName horizontalCoordinateSystemNameXName = System.Xml.Linq.XName.Get("horizontalCoordinateSystemName", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName geocentricCoordinateSystemNameXName = System.Xml.Linq.XName.Get("geocentricCoordinateSystemName", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName fileLocationXName = System.Xml.Linq.XName.Get("fileLocation", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName rotationAngleXName = System.Xml.Linq.XName.Get("rotationAngle", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName datumXName = System.Xml.Linq.XName.Get("datum", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName fittedCoordinateSystemNameXName = System.Xml.Linq.XName.Get("fittedCoordinateSystemName", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName compoundCoordinateSystemNameXName = System.Xml.Linq.XName.Get("compoundCoordinateSystemName", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName localCoordinateSystemNameXName = System.Xml.Linq.XName.Get("localCoordinateSystemName", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName geographicCoordinateSystemNameXName = System.Xml.Linq.XName.Get("geographicCoordinateSystemName", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName projectedCoordinateSystemNameXName = System.Xml.Linq.XName.Get("projectedCoordinateSystemName", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName verticalCoordinateSystemNameXName = System.Xml.Linq.XName.Get("verticalCoordinateSystemName", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("CoordinateSystem", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static FSM validationStates;
        
		public static explicit operator CoordinateSystem(XElement xe) { return XTypedServices.ToXTypedElement<CoordinateSystem>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static CoordinateSystem() {
            BuildElementDictionary();
            InitFSM();
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Start?, FieldNote*, Feature*, any)
        /// </para>
        /// </summary>
        public CoordinateSystem() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Start?, FieldNote*, Feature*, any)
        /// </para>
        /// </summary>
        public virtual Start Start {
            get {
                XElement x = this.GetElement(StartXName);
                return ((Start)(x));
            }
            set {
                this.SetElement(StartXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Start?, FieldNote*, Feature*, any)
        /// </para>
        /// </summary>
        public virtual IList<FieldNote> FieldNote {
            get {
                if ((this.FieldNoteField == null)) {
                    this.FieldNoteField = new XTypedList<FieldNote>(this, LinqToXsdTypeManager.Instance, FieldNoteXName);
                }
                return this.FieldNoteField;
            }
            set {
                if ((value == null)) {
                    this.FieldNoteField = null;
                }
                else {
                    if ((this.FieldNoteField == null)) {
                        this.FieldNoteField = XTypedList<FieldNote>.Initialize(this, LinqToXsdTypeManager.Instance, value, FieldNoteXName);
                    }
                    else {
                        XTypedServices.SetList<FieldNote>(this.FieldNoteField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Start?, FieldNote*, Feature*, any)
        /// </para>
        /// </summary>
        public virtual IList<Feature> Feature {
            get {
                if ((this.FeatureField == null)) {
                    this.FeatureField = new XTypedList<Feature>(this, LinqToXsdTypeManager.Instance, FeatureXName);
                }
                return this.FeatureField;
            }
            set {
                if ((value == null)) {
                    this.FeatureField = null;
                }
                else {
                    if ((this.FeatureField == null)) {
                        this.FeatureField = XTypedList<Feature>.Initialize(this, LinqToXsdTypeManager.Instance, value, FeatureXName);
                    }
                    else {
                        XTypedServices.SetList<Feature>(this.FeatureField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Start?, FieldNote*, Feature*, any)
        /// </para>
        /// </summary>
        public virtual IEnumerable<XElement> Any {
            get {
                return this.GetWildCards(WildCard.DefaultWildCard);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string desc {
            get {
                XAttribute x = this.Attribute(descXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(descXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string name {
            get {
                XAttribute x = this.Attribute(nameXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(nameXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string epsgCode {
            get {
                XAttribute x = this.Attribute(epsgCodeXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(epsgCodeXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string ogcWktCode {
            get {
                XAttribute x = this.Attribute(ogcWktCodeXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(ogcWktCodeXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string horizontalDatum {
            get {
                XAttribute x = this.Attribute(horizontalDatumXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(horizontalDatumXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string verticalDatum {
            get {
                XAttribute x = this.Attribute(verticalDatumXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(verticalDatumXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string ellipsoidName {
            get {
                XAttribute x = this.Attribute(ellipsoidNameXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(ellipsoidNameXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string horizontalCoordinateSystemName {
            get {
                XAttribute x = this.Attribute(horizontalCoordinateSystemNameXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(horizontalCoordinateSystemNameXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string geocentricCoordinateSystemName {
            get {
                XAttribute x = this.Attribute(geocentricCoordinateSystemNameXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(geocentricCoordinateSystemNameXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Uri fileLocation {
            get {
                XAttribute x = this.Attribute(fileLocationXName);
                return XTypedServices.ParseValue<System.Uri>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyUri).Datatype);
            }
            set {
                this.SetAttribute(fileLocationXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyUri).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Double? rotationAngle {
            get {
                XAttribute x = this.Attribute(rotationAngleXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetAttribute(rotationAngleXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string datum {
            get {
                XAttribute x = this.Attribute(datumXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(datumXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string fittedCoordinateSystemName {
            get {
                XAttribute x = this.Attribute(fittedCoordinateSystemNameXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(fittedCoordinateSystemNameXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string compoundCoordinateSystemName {
            get {
                XAttribute x = this.Attribute(compoundCoordinateSystemNameXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(compoundCoordinateSystemNameXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string localCoordinateSystemName {
            get {
                XAttribute x = this.Attribute(localCoordinateSystemNameXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(localCoordinateSystemNameXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string geographicCoordinateSystemName {
            get {
                XAttribute x = this.Attribute(geographicCoordinateSystemNameXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(geographicCoordinateSystemNameXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string projectedCoordinateSystemName {
            get {
                XAttribute x = this.Attribute(projectedCoordinateSystemNameXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(projectedCoordinateSystemNameXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string verticalCoordinateSystemName {
            get {
                XAttribute x = this.Attribute(verticalCoordinateSystemNameXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(verticalCoordinateSystemNameXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static CoordinateSystem Load(string xmlFile) {
            return XTypedServices.Load<CoordinateSystem>(xmlFile);
        }
        
        public static CoordinateSystem Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<CoordinateSystem>(xmlFile);
        }
        
        public static CoordinateSystem Parse(string xml) {
            return XTypedServices.Parse<CoordinateSystem>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<CoordinateSystem>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(StartXName, typeof(Start));
            localElementDictionary.Add(FieldNoteXName, typeof(FieldNote));
            localElementDictionary.Add(FeatureXName, typeof(Feature));
        }
        
        FSM IXMetaData.GetValidationStates() {
            return validationStates;
        }
        
        private static void InitFSM() {
            Dictionary<int, Transitions> transitions = new Dictionary<int, Transitions>();
            transitions.Add(1, new Transitions(new SingleTransition(System.Xml.Linq.XName.Get("Start", "http://www.landxml.org/schema/LandXML-1.2"), 2), new SingleTransition(System.Xml.Linq.XName.Get("FieldNote", "http://www.landxml.org/schema/LandXML-1.2"), 3), new SingleTransition(System.Xml.Linq.XName.Get("Feature", "http://www.landxml.org/schema/LandXML-1.2"), 5), new SingleTransition(new WildCard("##other", "http://www.landxml.org/schema/LandXML-1.2"), 8)));
            transitions.Add(2, new Transitions(new SingleTransition(System.Xml.Linq.XName.Get("FieldNote", "http://www.landxml.org/schema/LandXML-1.2"), 2), new SingleTransition(System.Xml.Linq.XName.Get("Feature", "http://www.landxml.org/schema/LandXML-1.2"), 5), new SingleTransition(new WildCard("##other", "http://www.landxml.org/schema/LandXML-1.2"), 8)));
            transitions.Add(5, new Transitions(new SingleTransition(System.Xml.Linq.XName.Get("Feature", "http://www.landxml.org/schema/LandXML-1.2"), 5), new SingleTransition(new WildCard("##other", "http://www.landxml.org/schema/LandXML-1.2"), 8)));
            transitions.Add(3, new Transitions(new SingleTransition(System.Xml.Linq.XName.Get("FieldNote", "http://www.landxml.org/schema/LandXML-1.2"), 3), new SingleTransition(System.Xml.Linq.XName.Get("Feature", "http://www.landxml.org/schema/LandXML-1.2"), 5), new SingleTransition(new WildCard("##other", "http://www.landxml.org/schema/LandXML-1.2"), 8)));
            validationStates = new FSM(1, new Set<int>(new int[] {
                            2,
                            1,
                            3,
                            5,
                            8}), transitions);
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: ((Author* | any))
    /// </para>
    /// </summary>
    public partial class Application : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName AuthorXName = System.Xml.Linq.XName.Get("Author", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<Author> AuthorField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName nameXName = System.Xml.Linq.XName.Get("name", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName descXName = System.Xml.Linq.XName.Get("desc", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName manufacturerXName = System.Xml.Linq.XName.Get("manufacturer", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName versionXName = System.Xml.Linq.XName.Get("version", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName manufacturerURLXName = System.Xml.Linq.XName.Get("manufacturerURL", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName timeStampXName = System.Xml.Linq.XName.Get("timeStamp", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("Application", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static FSM validationStates;
        
		public static explicit operator Application(XElement xe) { return XTypedServices.ToXTypedElement<Application>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static Application() {
            BuildElementDictionary();
            InitFSM();
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: ((Author* | any))
        /// </para>
        /// </summary>
        public Application() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((Author* | any))
        /// </para>
        /// </summary>
        public virtual IList<Author> Author {
            get {
                if ((this.AuthorField == null)) {
                    this.AuthorField = new XTypedList<Author>(this, LinqToXsdTypeManager.Instance, AuthorXName);
                }
                return this.AuthorField;
            }
            set {
                if ((value == null)) {
                    this.AuthorField = null;
                }
                else {
                    if ((this.AuthorField == null)) {
                        this.AuthorField = XTypedList<Author>.Initialize(this, LinqToXsdTypeManager.Instance, value, AuthorXName);
                    }
                    else {
                        XTypedServices.SetList<Author>(this.AuthorField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: ((Author* | any))
        /// </para>
        /// </summary>
        public virtual IEnumerable<XElement> Any {
            get {
                return this.GetWildCards(WildCard.DefaultWildCard);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual string name {
            get {
                XAttribute x = this.Attribute(nameXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(nameXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string desc {
            get {
                XAttribute x = this.Attribute(descXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(descXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string manufacturer {
            get {
                XAttribute x = this.Attribute(manufacturerXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(manufacturerXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string version {
            get {
                XAttribute x = this.Attribute(versionXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(versionXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string manufacturerURL {
            get {
                XAttribute x = this.Attribute(manufacturerURLXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(manufacturerURLXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.DateTime? timeStamp {
            get {
                XAttribute x = this.Attribute(timeStampXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<System.DateTime>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.DateTime).Datatype);
            }
            set {
                this.SetAttribute(timeStampXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.DateTime).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static Application Load(string xmlFile) {
            return XTypedServices.Load<Application>(xmlFile);
        }
        
        public static Application Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<Application>(xmlFile);
        }
        
        public static Application Parse(string xml) {
            return XTypedServices.Parse<Application>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<Application>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(AuthorXName, typeof(Author));
        }
        
        FSM IXMetaData.GetValidationStates() {
            return validationStates;
        }
        
        private static void InitFSM() {
            Dictionary<int, Transitions> transitions = new Dictionary<int, Transitions>();
            transitions.Add(1, new Transitions(new SingleTransition(System.Xml.Linq.XName.Get("Author", "http://www.landxml.org/schema/LandXML-1.2"), 1), new SingleTransition(new WildCard("##other", "http://www.landxml.org/schema/LandXML-1.2"), 4)));
            validationStates = new FSM(1, new Set<int>(new int[] {
                            1,
                            4}), transitions);
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (any)
    /// </para>
    /// </summary>
    public partial class Author : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName createdByXName = System.Xml.Linq.XName.Get("createdBy", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName createdByEmailXName = System.Xml.Linq.XName.Get("createdByEmail", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName companyXName = System.Xml.Linq.XName.Get("company", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName companyURLXName = System.Xml.Linq.XName.Get("companyURL", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName timeStampXName = System.Xml.Linq.XName.Get("timeStamp", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("Author", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static FSM validationStates;
        
		public static explicit operator Author(XElement xe) { return XTypedServices.ToXTypedElement<Author>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static Author() {
            InitFSM();
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (any)
        /// </para>
        /// </summary>
        public Author() {
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (any)
        /// </para>
        /// </summary>
        public virtual IEnumerable<XElement> Any {
            get {
                return this.GetWildCards(WildCard.DefaultWildCard);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string createdBy {
            get {
                XAttribute x = this.Attribute(createdByXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(createdByXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string createdByEmail {
            get {
                XAttribute x = this.Attribute(createdByEmailXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(createdByEmailXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string company {
            get {
                XAttribute x = this.Attribute(companyXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(companyXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string companyURL {
            get {
                XAttribute x = this.Attribute(companyURLXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(companyURLXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.DateTime? timeStamp {
            get {
                XAttribute x = this.Attribute(timeStampXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<System.DateTime>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.DateTime).Datatype);
            }
            set {
                this.SetAttribute(timeStampXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.DateTime).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static Author Load(string xmlFile) {
            return XTypedServices.Load<Author>(xmlFile);
        }
        
        public static Author Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<Author>(xmlFile);
        }
        
        public static Author Parse(string xml) {
            return XTypedServices.Parse<Author>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<Author>(this);
        }
        
        FSM IXMetaData.GetValidationStates() {
            return validationStates;
        }
        
        private static void InitFSM() {
            Dictionary<int, Transitions> transitions = new Dictionary<int, Transitions>();
            transitions.Add(1, new Transitions(new SingleTransition(new WildCard("##other", "http://www.landxml.org/schema/LandXML-1.2"), 2)));
            validationStates = new FSM(1, new Set<int>(new int[] {
                            2,
                            1}), transitions);
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (SurveyHeader, Equipment?, (SurveyMonument? | CgPoints? | InstrumentSetup? | LaserSetup? | GPSSetup? | TargetSetup? | GPSVector | GPSPosition | ObservationGroup | ControlChecks | FieldNote* | Feature*)*)
    /// </para>
    /// </summary>
    public partial class Survey : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName SurveyHeaderXName = System.Xml.Linq.XName.Get("SurveyHeader", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName EquipmentXName = System.Xml.Linq.XName.Get("Equipment", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName SurveyMonumentXName = System.Xml.Linq.XName.Get("SurveyMonument", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<SurveyMonument> SurveyMonumentField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName CgPointsXName = System.Xml.Linq.XName.Get("CgPoints", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<CgPoints> CgPointsField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName InstrumentSetupXName = System.Xml.Linq.XName.Get("InstrumentSetup", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<InstrumentSetup> InstrumentSetupField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName LaserSetupXName = System.Xml.Linq.XName.Get("LaserSetup", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<LaserSetup> LaserSetupField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName GPSSetupXName = System.Xml.Linq.XName.Get("GPSSetup", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<GPSSetup> GPSSetupField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TargetSetupXName = System.Xml.Linq.XName.Get("TargetSetup", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<TargetSetup> TargetSetupField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName GPSVectorXName = System.Xml.Linq.XName.Get("GPSVector", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<GPSVector> GPSVectorField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName GPSPositionXName = System.Xml.Linq.XName.Get("GPSPosition", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<GPSPosition> GPSPositionField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ObservationGroupXName = System.Xml.Linq.XName.Get("ObservationGroup", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ObservationGroup> ObservationGroupField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ControlChecksXName = System.Xml.Linq.XName.Get("ControlChecks", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ControlChecks> ControlChecksField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName FieldNoteXName = System.Xml.Linq.XName.Get("FieldNote", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<FieldNote> FieldNoteField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName FeatureXName = System.Xml.Linq.XName.Get("Feature", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<Feature> FeatureField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName descXName = System.Xml.Linq.XName.Get("desc", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName dateXName = System.Xml.Linq.XName.Get("date", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName startTimeXName = System.Xml.Linq.XName.Get("startTime", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName endTimeXName = System.Xml.Linq.XName.Get("endTime", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName stateXName = System.Xml.Linq.XName.Get("state", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName horizontalAccuracyXName = System.Xml.Linq.XName.Get("horizontalAccuracy", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName verticalAccuracyXName = System.Xml.Linq.XName.Get("verticalAccuracy", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("Survey", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator Survey(XElement xe) { return XTypedServices.ToXTypedElement<Survey>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static Survey() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(SurveyHeaderXName), new NamedContentModelEntity(EquipmentXName), new ChoiceContentModelEntity(new NamedContentModelEntity(SurveyMonumentXName), new NamedContentModelEntity(CgPointsXName), new NamedContentModelEntity(InstrumentSetupXName), new NamedContentModelEntity(LaserSetupXName), new NamedContentModelEntity(GPSSetupXName), new NamedContentModelEntity(TargetSetupXName), new NamedContentModelEntity(GPSVectorXName), new NamedContentModelEntity(GPSPositionXName), new NamedContentModelEntity(ObservationGroupXName), new NamedContentModelEntity(ControlChecksXName), new NamedContentModelEntity(FieldNoteXName), new NamedContentModelEntity(FeatureXName)));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (SurveyHeader, Equipment?, (SurveyMonument? | CgPoints? | InstrumentSetup? | LaserSetup? | GPSSetup? | TargetSetup? | GPSVector | GPSPosition | ObservationGroup | ControlChecks | FieldNote* | Feature*)*)
        /// </para>
        /// </summary>
        public Survey() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (SurveyHeader, Equipment?, (SurveyMonument? | CgPoints? | InstrumentSetup? | LaserSetup? | GPSSetup? | TargetSetup? | GPSVector | GPSPosition | ObservationGroup | ControlChecks | FieldNote* | Feature*)*)
        /// </para>
        /// </summary>
        public virtual SurveyHeader SurveyHeader {
            get {
                XElement x = this.GetElement(SurveyHeaderXName);
                return ((SurveyHeader)(x));
            }
            set {
                this.SetElement(SurveyHeaderXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (SurveyHeader, Equipment?, (SurveyMonument? | CgPoints? | InstrumentSetup? | LaserSetup? | GPSSetup? | TargetSetup? | GPSVector | GPSPosition | ObservationGroup | ControlChecks | FieldNote* | Feature*)*)
        /// </para>
        /// </summary>
        public virtual Equipment Equipment {
            get {
                XElement x = this.GetElement(EquipmentXName);
                return ((Equipment)(x));
            }
            set {
                this.SetElement(EquipmentXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (SurveyHeader, Equipment?, (SurveyMonument? | CgPoints? | InstrumentSetup? | LaserSetup? | GPSSetup? | TargetSetup? | GPSVector | GPSPosition | ObservationGroup | ControlChecks | FieldNote* | Feature*)*)
        /// </para>
        /// </summary>
        public virtual IList<SurveyMonument> SurveyMonument {
            get {
                if ((this.SurveyMonumentField == null)) {
                    this.SurveyMonumentField = new XTypedList<SurveyMonument>(this, LinqToXsdTypeManager.Instance, SurveyMonumentXName);
                }
                return this.SurveyMonumentField;
            }
            set {
                if ((value == null)) {
                    this.SurveyMonumentField = null;
                }
                else {
                    if ((this.SurveyMonumentField == null)) {
                        this.SurveyMonumentField = XTypedList<SurveyMonument>.Initialize(this, LinqToXsdTypeManager.Instance, value, SurveyMonumentXName);
                    }
                    else {
                        XTypedServices.SetList<SurveyMonument>(this.SurveyMonumentField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (SurveyHeader, Equipment?, (SurveyMonument? | CgPoints? | InstrumentSetup? | LaserSetup? | GPSSetup? | TargetSetup? | GPSVector | GPSPosition | ObservationGroup | ControlChecks | FieldNote* | Feature*)*)
        /// </para>
        /// </summary>
        public virtual IList<CgPoints> CgPoints {
            get {
                if ((this.CgPointsField == null)) {
                    this.CgPointsField = new XTypedList<CgPoints>(this, LinqToXsdTypeManager.Instance, CgPointsXName);
                }
                return this.CgPointsField;
            }
            set {
                if ((value == null)) {
                    this.CgPointsField = null;
                }
                else {
                    if ((this.CgPointsField == null)) {
                        this.CgPointsField = XTypedList<CgPoints>.Initialize(this, LinqToXsdTypeManager.Instance, value, CgPointsXName);
                    }
                    else {
                        XTypedServices.SetList<CgPoints>(this.CgPointsField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (SurveyHeader, Equipment?, (SurveyMonument? | CgPoints? | InstrumentSetup? | LaserSetup? | GPSSetup? | TargetSetup? | GPSVector | GPSPosition | ObservationGroup | ControlChecks | FieldNote* | Feature*)*)
        /// </para>
        /// </summary>
        public virtual IList<InstrumentSetup> InstrumentSetup {
            get {
                if ((this.InstrumentSetupField == null)) {
                    this.InstrumentSetupField = new XTypedList<InstrumentSetup>(this, LinqToXsdTypeManager.Instance, InstrumentSetupXName);
                }
                return this.InstrumentSetupField;
            }
            set {
                if ((value == null)) {
                    this.InstrumentSetupField = null;
                }
                else {
                    if ((this.InstrumentSetupField == null)) {
                        this.InstrumentSetupField = XTypedList<InstrumentSetup>.Initialize(this, LinqToXsdTypeManager.Instance, value, InstrumentSetupXName);
                    }
                    else {
                        XTypedServices.SetList<InstrumentSetup>(this.InstrumentSetupField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (SurveyHeader, Equipment?, (SurveyMonument? | CgPoints? | InstrumentSetup? | LaserSetup? | GPSSetup? | TargetSetup? | GPSVector | GPSPosition | ObservationGroup | ControlChecks | FieldNote* | Feature*)*)
        /// </para>
        /// </summary>
        public virtual IList<LaserSetup> LaserSetup {
            get {
                if ((this.LaserSetupField == null)) {
                    this.LaserSetupField = new XTypedList<LaserSetup>(this, LinqToXsdTypeManager.Instance, LaserSetupXName);
                }
                return this.LaserSetupField;
            }
            set {
                if ((value == null)) {
                    this.LaserSetupField = null;
                }
                else {
                    if ((this.LaserSetupField == null)) {
                        this.LaserSetupField = XTypedList<LaserSetup>.Initialize(this, LinqToXsdTypeManager.Instance, value, LaserSetupXName);
                    }
                    else {
                        XTypedServices.SetList<LaserSetup>(this.LaserSetupField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (SurveyHeader, Equipment?, (SurveyMonument? | CgPoints? | InstrumentSetup? | LaserSetup? | GPSSetup? | TargetSetup? | GPSVector | GPSPosition | ObservationGroup | ControlChecks | FieldNote* | Feature*)*)
        /// </para>
        /// </summary>
        public virtual IList<GPSSetup> GPSSetup {
            get {
                if ((this.GPSSetupField == null)) {
                    this.GPSSetupField = new XTypedList<GPSSetup>(this, LinqToXsdTypeManager.Instance, GPSSetupXName);
                }
                return this.GPSSetupField;
            }
            set {
                if ((value == null)) {
                    this.GPSSetupField = null;
                }
                else {
                    if ((this.GPSSetupField == null)) {
                        this.GPSSetupField = XTypedList<GPSSetup>.Initialize(this, LinqToXsdTypeManager.Instance, value, GPSSetupXName);
                    }
                    else {
                        XTypedServices.SetList<GPSSetup>(this.GPSSetupField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (SurveyHeader, Equipment?, (SurveyMonument? | CgPoints? | InstrumentSetup? | LaserSetup? | GPSSetup? | TargetSetup? | GPSVector | GPSPosition | ObservationGroup | ControlChecks | FieldNote* | Feature*)*)
        /// </para>
        /// </summary>
        public virtual IList<TargetSetup> TargetSetup {
            get {
                if ((this.TargetSetupField == null)) {
                    this.TargetSetupField = new XTypedList<TargetSetup>(this, LinqToXsdTypeManager.Instance, TargetSetupXName);
                }
                return this.TargetSetupField;
            }
            set {
                if ((value == null)) {
                    this.TargetSetupField = null;
                }
                else {
                    if ((this.TargetSetupField == null)) {
                        this.TargetSetupField = XTypedList<TargetSetup>.Initialize(this, LinqToXsdTypeManager.Instance, value, TargetSetupXName);
                    }
                    else {
                        XTypedServices.SetList<TargetSetup>(this.TargetSetupField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (SurveyHeader, Equipment?, (SurveyMonument? | CgPoints? | InstrumentSetup? | LaserSetup? | GPSSetup? | TargetSetup? | GPSVector | GPSPosition | ObservationGroup | ControlChecks | FieldNote* | Feature*)*)
        /// </para>
        /// </summary>
        public virtual IList<GPSVector> GPSVector {
            get {
                if ((this.GPSVectorField == null)) {
                    this.GPSVectorField = new XTypedList<GPSVector>(this, LinqToXsdTypeManager.Instance, GPSVectorXName);
                }
                return this.GPSVectorField;
            }
            set {
                if ((value == null)) {
                    this.GPSVectorField = null;
                }
                else {
                    if ((this.GPSVectorField == null)) {
                        this.GPSVectorField = XTypedList<GPSVector>.Initialize(this, LinqToXsdTypeManager.Instance, value, GPSVectorXName);
                    }
                    else {
                        XTypedServices.SetList<GPSVector>(this.GPSVectorField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (SurveyHeader, Equipment?, (SurveyMonument? | CgPoints? | InstrumentSetup? | LaserSetup? | GPSSetup? | TargetSetup? | GPSVector | GPSPosition | ObservationGroup | ControlChecks | FieldNote* | Feature*)*)
        /// </para>
        /// </summary>
        public virtual IList<GPSPosition> GPSPosition {
            get {
                if ((this.GPSPositionField == null)) {
                    this.GPSPositionField = new XTypedList<GPSPosition>(this, LinqToXsdTypeManager.Instance, GPSPositionXName);
                }
                return this.GPSPositionField;
            }
            set {
                if ((value == null)) {
                    this.GPSPositionField = null;
                }
                else {
                    if ((this.GPSPositionField == null)) {
                        this.GPSPositionField = XTypedList<GPSPosition>.Initialize(this, LinqToXsdTypeManager.Instance, value, GPSPositionXName);
                    }
                    else {
                        XTypedServices.SetList<GPSPosition>(this.GPSPositionField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (SurveyHeader, Equipment?, (SurveyMonument? | CgPoints? | InstrumentSetup? | LaserSetup? | GPSSetup? | TargetSetup? | GPSVector | GPSPosition | ObservationGroup | ControlChecks | FieldNote* | Feature*)*)
        /// </para>
        /// </summary>
        public virtual IList<ObservationGroup> ObservationGroup {
            get {
                if ((this.ObservationGroupField == null)) {
                    this.ObservationGroupField = new XTypedList<ObservationGroup>(this, LinqToXsdTypeManager.Instance, ObservationGroupXName);
                }
                return this.ObservationGroupField;
            }
            set {
                if ((value == null)) {
                    this.ObservationGroupField = null;
                }
                else {
                    if ((this.ObservationGroupField == null)) {
                        this.ObservationGroupField = XTypedList<ObservationGroup>.Initialize(this, LinqToXsdTypeManager.Instance, value, ObservationGroupXName);
                    }
                    else {
                        XTypedServices.SetList<ObservationGroup>(this.ObservationGroupField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (SurveyHeader, Equipment?, (SurveyMonument? | CgPoints? | InstrumentSetup? | LaserSetup? | GPSSetup? | TargetSetup? | GPSVector | GPSPosition | ObservationGroup | ControlChecks | FieldNote* | Feature*)*)
        /// </para>
        /// </summary>
        public virtual IList<ControlChecks> ControlChecks {
            get {
                if ((this.ControlChecksField == null)) {
                    this.ControlChecksField = new XTypedList<ControlChecks>(this, LinqToXsdTypeManager.Instance, ControlChecksXName);
                }
                return this.ControlChecksField;
            }
            set {
                if ((value == null)) {
                    this.ControlChecksField = null;
                }
                else {
                    if ((this.ControlChecksField == null)) {
                        this.ControlChecksField = XTypedList<ControlChecks>.Initialize(this, LinqToXsdTypeManager.Instance, value, ControlChecksXName);
                    }
                    else {
                        XTypedServices.SetList<ControlChecks>(this.ControlChecksField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (SurveyHeader, Equipment?, (SurveyMonument? | CgPoints? | InstrumentSetup? | LaserSetup? | GPSSetup? | TargetSetup? | GPSVector | GPSPosition | ObservationGroup | ControlChecks | FieldNote* | Feature*)*)
        /// </para>
        /// </summary>
        public virtual IList<FieldNote> FieldNote {
            get {
                if ((this.FieldNoteField == null)) {
                    this.FieldNoteField = new XTypedList<FieldNote>(this, LinqToXsdTypeManager.Instance, FieldNoteXName);
                }
                return this.FieldNoteField;
            }
            set {
                if ((value == null)) {
                    this.FieldNoteField = null;
                }
                else {
                    if ((this.FieldNoteField == null)) {
                        this.FieldNoteField = XTypedList<FieldNote>.Initialize(this, LinqToXsdTypeManager.Instance, value, FieldNoteXName);
                    }
                    else {
                        XTypedServices.SetList<FieldNote>(this.FieldNoteField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (SurveyHeader, Equipment?, (SurveyMonument? | CgPoints? | InstrumentSetup? | LaserSetup? | GPSSetup? | TargetSetup? | GPSVector | GPSPosition | ObservationGroup | ControlChecks | FieldNote* | Feature*)*)
        /// </para>
        /// </summary>
        public virtual IList<Feature> Feature {
            get {
                if ((this.FeatureField == null)) {
                    this.FeatureField = new XTypedList<Feature>(this, LinqToXsdTypeManager.Instance, FeatureXName);
                }
                return this.FeatureField;
            }
            set {
                if ((value == null)) {
                    this.FeatureField = null;
                }
                else {
                    if ((this.FeatureField == null)) {
                        this.FeatureField = XTypedList<Feature>.Initialize(this, LinqToXsdTypeManager.Instance, value, FeatureXName);
                    }
                    else {
                        XTypedServices.SetList<Feature>(this.FeatureField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string desc {
            get {
                XAttribute x = this.Attribute(descXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(descXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.DateTime? date {
            get {
                XAttribute x = this.Attribute(dateXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<System.DateTime>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date).Datatype);
            }
            set {
                this.SetAttribute(dateXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.DateTime? startTime {
            get {
                XAttribute x = this.Attribute(startTimeXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<System.DateTime>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.DateTime).Datatype);
            }
            set {
                this.SetAttribute(startTimeXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.DateTime).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.DateTime? endTime {
            get {
                XAttribute x = this.Attribute(endTimeXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<System.DateTime>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.DateTime).Datatype);
            }
            set {
                this.SetAttribute(endTimeXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.DateTime).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual LandXml.v1_2.stateType? state {
            get {
                XAttribute x = this.Attribute(stateXName);
                if ((x == null)) {
                    return null;
                }
                return ((LandXml.v1_2.stateType)(Enum.Parse(typeof(LandXml.v1_2.stateType), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetAttribute(stateXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string horizontalAccuracy {
            get {
                XAttribute x = this.Attribute(horizontalAccuracyXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(horizontalAccuracyXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string verticalAccuracy {
            get {
                XAttribute x = this.Attribute(verticalAccuracyXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(verticalAccuracyXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static Survey Load(string xmlFile) {
            return XTypedServices.Load<Survey>(xmlFile);
        }
        
        public static Survey Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<Survey>(xmlFile);
        }
        
        public static Survey Parse(string xml) {
            return XTypedServices.Parse<Survey>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<Survey>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(SurveyHeaderXName, typeof(SurveyHeader));
            localElementDictionary.Add(EquipmentXName, typeof(Equipment));
            localElementDictionary.Add(SurveyMonumentXName, typeof(SurveyMonument));
            localElementDictionary.Add(CgPointsXName, typeof(CgPoints));
            localElementDictionary.Add(InstrumentSetupXName, typeof(InstrumentSetup));
            localElementDictionary.Add(LaserSetupXName, typeof(LaserSetup));
            localElementDictionary.Add(GPSSetupXName, typeof(GPSSetup));
            localElementDictionary.Add(TargetSetupXName, typeof(TargetSetup));
            localElementDictionary.Add(GPSVectorXName, typeof(GPSVector));
            localElementDictionary.Add(GPSPositionXName, typeof(GPSPosition));
            localElementDictionary.Add(ObservationGroupXName, typeof(ObservationGroup));
            localElementDictionary.Add(ControlChecksXName, typeof(ControlChecks));
            localElementDictionary.Add(FieldNoteXName, typeof(FieldNote));
            localElementDictionary.Add(FeatureXName, typeof(Feature));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Annotation* | AdministrativeArea* | AdministrativeDate* | CoordinateSystem? | Units? | MapPoint* | Personnel* | FieldNote* | Feature* | SurveyorCertificate* | PurposeOfSurvey* | HeadOfPower*)*
    /// </para>
    /// </summary>
    public partial class SurveyHeader : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName AnnotationXName = System.Xml.Linq.XName.Get("Annotation", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<Annotation> AnnotationField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName AdministrativeAreaXName = System.Xml.Linq.XName.Get("AdministrativeArea", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<AdministrativeArea> AdministrativeAreaField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName AdministrativeDateXName = System.Xml.Linq.XName.Get("AdministrativeDate", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<AdministrativeDate> AdministrativeDateField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName CoordinateSystemXName = System.Xml.Linq.XName.Get("CoordinateSystem", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<CoordinateSystem> CoordinateSystemField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName UnitsXName = System.Xml.Linq.XName.Get("Units", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<Units> UnitsField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName MapPointXName = System.Xml.Linq.XName.Get("MapPoint", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<MapPoint> MapPointField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName PersonnelXName = System.Xml.Linq.XName.Get("Personnel", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<Personnel> PersonnelField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName FieldNoteXName = System.Xml.Linq.XName.Get("FieldNote", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<FieldNote> FieldNoteField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName FeatureXName = System.Xml.Linq.XName.Get("Feature", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<Feature> FeatureField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName SurveyorCertificateXName = System.Xml.Linq.XName.Get("SurveyorCertificate", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<SurveyorCertificate> SurveyorCertificateField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName PurposeOfSurveyXName = System.Xml.Linq.XName.Get("PurposeOfSurvey", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<PurposeOfSurvey> PurposeOfSurveyField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName HeadOfPowerXName = System.Xml.Linq.XName.Get("HeadOfPower", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<HeadOfPower> HeadOfPowerField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName nameXName = System.Xml.Linq.XName.Get("name", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName descXName = System.Xml.Linq.XName.Get("desc", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName purposeXName = System.Xml.Linq.XName.Get("purpose", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName startTimeXName = System.Xml.Linq.XName.Get("startTime", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName endTimeXName = System.Xml.Linq.XName.Get("endTime", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName surveyorXName = System.Xml.Linq.XName.Get("surveyor", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName surveyorFirmXName = System.Xml.Linq.XName.Get("surveyorFirm", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName surveyorReferenceXName = System.Xml.Linq.XName.Get("surveyorReference", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName surveyorRegistrationXName = System.Xml.Linq.XName.Get("surveyorRegistration", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName surveyPurposeXName = System.Xml.Linq.XName.Get("surveyPurpose", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName typeXName = System.Xml.Linq.XName.Get("type", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName @classXName = System.Xml.Linq.XName.Get("class", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName countyXName = System.Xml.Linq.XName.Get("county", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName applyAtmosphericCorrectionXName = System.Xml.Linq.XName.Get("applyAtmosphericCorrection", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName pressureXName = System.Xml.Linq.XName.Get("pressure", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName temperatureXName = System.Xml.Linq.XName.Get("temperature", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName applySeaLevelCorrectionXName = System.Xml.Linq.XName.Get("applySeaLevelCorrection", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName scaleFactorXName = System.Xml.Linq.XName.Get("scaleFactor", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName seaLevelCorrectionFactorXName = System.Xml.Linq.XName.Get("seaLevelCorrectionFactor", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName combinedFactorXName = System.Xml.Linq.XName.Get("combinedFactor", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName jurisdictionXName = System.Xml.Linq.XName.Get("jurisdiction", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName submissionDateXName = System.Xml.Linq.XName.Get("submissionDate", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName documentStatusXName = System.Xml.Linq.XName.Get("documentStatus", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName surveyFormatXName = System.Xml.Linq.XName.Get("surveyFormat", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName surveyStatusXName = System.Xml.Linq.XName.Get("surveyStatus", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName communityTitleSchemeNoXName = System.Xml.Linq.XName.Get("communityTitleSchemeNo", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName communityTitleSchemeNameXName = System.Xml.Linq.XName.Get("communityTitleSchemeName", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName fieldNoteFlagXName = System.Xml.Linq.XName.Get("fieldNoteFlag", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName fieldNoteReferenceXName = System.Xml.Linq.XName.Get("fieldNoteReference", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName fieldReportXName = System.Xml.Linq.XName.Get("fieldReport", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("SurveyHeader", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator SurveyHeader(XElement xe) { return XTypedServices.ToXTypedElement<SurveyHeader>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static SurveyHeader() {
            BuildElementDictionary();
            contentModel = new ChoiceContentModelEntity(new NamedContentModelEntity(AnnotationXName), new NamedContentModelEntity(AdministrativeAreaXName), new NamedContentModelEntity(AdministrativeDateXName), new NamedContentModelEntity(CoordinateSystemXName), new NamedContentModelEntity(UnitsXName), new NamedContentModelEntity(MapPointXName), new NamedContentModelEntity(PersonnelXName), new NamedContentModelEntity(FieldNoteXName), new NamedContentModelEntity(FeatureXName), new NamedContentModelEntity(SurveyorCertificateXName), new NamedContentModelEntity(PurposeOfSurveyXName), new NamedContentModelEntity(HeadOfPowerXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Annotation* | AdministrativeArea* | AdministrativeDate* | CoordinateSystem? | Units? | MapPoint* | Personnel* | FieldNote* | Feature* | SurveyorCertificate* | PurposeOfSurvey* | HeadOfPower*)*
        /// </para>
        /// </summary>
        public SurveyHeader() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating, choice
        /// </para>
        /// <para>
        /// Regular expression: (Annotation* | AdministrativeArea* | AdministrativeDate* | CoordinateSystem? | Units? | MapPoint* | Personnel* | FieldNote* | Feature* | SurveyorCertificate* | PurposeOfSurvey* | HeadOfPower*)*
        /// </para>
        /// </summary>
        public virtual IList<Annotation> Annotation {
            get {
                if ((this.AnnotationField == null)) {
                    this.AnnotationField = new XTypedList<Annotation>(this, LinqToXsdTypeManager.Instance, AnnotationXName);
                }
                return this.AnnotationField;
            }
            set {
                if ((value == null)) {
                    this.AnnotationField = null;
                }
                else {
                    if ((this.AnnotationField == null)) {
                        this.AnnotationField = XTypedList<Annotation>.Initialize(this, LinqToXsdTypeManager.Instance, value, AnnotationXName);
                    }
                    else {
                        XTypedServices.SetList<Annotation>(this.AnnotationField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating, choice
        /// </para>
        /// <para>
        /// Regular expression: (Annotation* | AdministrativeArea* | AdministrativeDate* | CoordinateSystem? | Units? | MapPoint* | Personnel* | FieldNote* | Feature* | SurveyorCertificate* | PurposeOfSurvey* | HeadOfPower*)*
        /// </para>
        /// </summary>
        public virtual IList<AdministrativeArea> AdministrativeArea {
            get {
                if ((this.AdministrativeAreaField == null)) {
                    this.AdministrativeAreaField = new XTypedList<AdministrativeArea>(this, LinqToXsdTypeManager.Instance, AdministrativeAreaXName);
                }
                return this.AdministrativeAreaField;
            }
            set {
                if ((value == null)) {
                    this.AdministrativeAreaField = null;
                }
                else {
                    if ((this.AdministrativeAreaField == null)) {
                        this.AdministrativeAreaField = XTypedList<AdministrativeArea>.Initialize(this, LinqToXsdTypeManager.Instance, value, AdministrativeAreaXName);
                    }
                    else {
                        XTypedServices.SetList<AdministrativeArea>(this.AdministrativeAreaField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating, choice
        /// </para>
        /// <para>
        /// Regular expression: (Annotation* | AdministrativeArea* | AdministrativeDate* | CoordinateSystem? | Units? | MapPoint* | Personnel* | FieldNote* | Feature* | SurveyorCertificate* | PurposeOfSurvey* | HeadOfPower*)*
        /// </para>
        /// </summary>
        public virtual IList<AdministrativeDate> AdministrativeDate {
            get {
                if ((this.AdministrativeDateField == null)) {
                    this.AdministrativeDateField = new XTypedList<AdministrativeDate>(this, LinqToXsdTypeManager.Instance, AdministrativeDateXName);
                }
                return this.AdministrativeDateField;
            }
            set {
                if ((value == null)) {
                    this.AdministrativeDateField = null;
                }
                else {
                    if ((this.AdministrativeDateField == null)) {
                        this.AdministrativeDateField = XTypedList<AdministrativeDate>.Initialize(this, LinqToXsdTypeManager.Instance, value, AdministrativeDateXName);
                    }
                    else {
                        XTypedServices.SetList<AdministrativeDate>(this.AdministrativeDateField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, choice
        /// </para>
        /// <para>
        /// Regular expression: (Annotation* | AdministrativeArea* | AdministrativeDate* | CoordinateSystem? | Units? | MapPoint* | Personnel* | FieldNote* | Feature* | SurveyorCertificate* | PurposeOfSurvey* | HeadOfPower*)*
        /// </para>
        /// </summary>
        public virtual IList<CoordinateSystem> CoordinateSystem {
            get {
                if ((this.CoordinateSystemField == null)) {
                    this.CoordinateSystemField = new XTypedList<CoordinateSystem>(this, LinqToXsdTypeManager.Instance, CoordinateSystemXName);
                }
                return this.CoordinateSystemField;
            }
            set {
                if ((value == null)) {
                    this.CoordinateSystemField = null;
                }
                else {
                    if ((this.CoordinateSystemField == null)) {
                        this.CoordinateSystemField = XTypedList<CoordinateSystem>.Initialize(this, LinqToXsdTypeManager.Instance, value, CoordinateSystemXName);
                    }
                    else {
                        XTypedServices.SetList<CoordinateSystem>(this.CoordinateSystemField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, choice
        /// </para>
        /// <para>
        /// Regular expression: (Annotation* | AdministrativeArea* | AdministrativeDate* | CoordinateSystem? | Units? | MapPoint* | Personnel* | FieldNote* | Feature* | SurveyorCertificate* | PurposeOfSurvey* | HeadOfPower*)*
        /// </para>
        /// </summary>
        public virtual IList<Units> Units {
            get {
                if ((this.UnitsField == null)) {
                    this.UnitsField = new XTypedList<Units>(this, LinqToXsdTypeManager.Instance, UnitsXName);
                }
                return this.UnitsField;
            }
            set {
                if ((value == null)) {
                    this.UnitsField = null;
                }
                else {
                    if ((this.UnitsField == null)) {
                        this.UnitsField = XTypedList<Units>.Initialize(this, LinqToXsdTypeManager.Instance, value, UnitsXName);
                    }
                    else {
                        XTypedServices.SetList<Units>(this.UnitsField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating, choice
        /// </para>
        /// <para>
        /// Regular expression: (Annotation* | AdministrativeArea* | AdministrativeDate* | CoordinateSystem? | Units? | MapPoint* | Personnel* | FieldNote* | Feature* | SurveyorCertificate* | PurposeOfSurvey* | HeadOfPower*)*
        /// </para>
        /// </summary>
        public virtual IList<MapPoint> MapPoint {
            get {
                if ((this.MapPointField == null)) {
                    this.MapPointField = new XTypedList<MapPoint>(this, LinqToXsdTypeManager.Instance, MapPointXName);
                }
                return this.MapPointField;
            }
            set {
                if ((value == null)) {
                    this.MapPointField = null;
                }
                else {
                    if ((this.MapPointField == null)) {
                        this.MapPointField = XTypedList<MapPoint>.Initialize(this, LinqToXsdTypeManager.Instance, value, MapPointXName);
                    }
                    else {
                        XTypedServices.SetList<MapPoint>(this.MapPointField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating, choice
        /// </para>
        /// <para>
        /// Regular expression: (Annotation* | AdministrativeArea* | AdministrativeDate* | CoordinateSystem? | Units? | MapPoint* | Personnel* | FieldNote* | Feature* | SurveyorCertificate* | PurposeOfSurvey* | HeadOfPower*)*
        /// </para>
        /// </summary>
        public virtual IList<Personnel> Personnel {
            get {
                if ((this.PersonnelField == null)) {
                    this.PersonnelField = new XTypedList<Personnel>(this, LinqToXsdTypeManager.Instance, PersonnelXName);
                }
                return this.PersonnelField;
            }
            set {
                if ((value == null)) {
                    this.PersonnelField = null;
                }
                else {
                    if ((this.PersonnelField == null)) {
                        this.PersonnelField = XTypedList<Personnel>.Initialize(this, LinqToXsdTypeManager.Instance, value, PersonnelXName);
                    }
                    else {
                        XTypedServices.SetList<Personnel>(this.PersonnelField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating, choice
        /// </para>
        /// <para>
        /// Regular expression: (Annotation* | AdministrativeArea* | AdministrativeDate* | CoordinateSystem? | Units? | MapPoint* | Personnel* | FieldNote* | Feature* | SurveyorCertificate* | PurposeOfSurvey* | HeadOfPower*)*
        /// </para>
        /// </summary>
        public virtual IList<FieldNote> FieldNote {
            get {
                if ((this.FieldNoteField == null)) {
                    this.FieldNoteField = new XTypedList<FieldNote>(this, LinqToXsdTypeManager.Instance, FieldNoteXName);
                }
                return this.FieldNoteField;
            }
            set {
                if ((value == null)) {
                    this.FieldNoteField = null;
                }
                else {
                    if ((this.FieldNoteField == null)) {
                        this.FieldNoteField = XTypedList<FieldNote>.Initialize(this, LinqToXsdTypeManager.Instance, value, FieldNoteXName);
                    }
                    else {
                        XTypedServices.SetList<FieldNote>(this.FieldNoteField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating, choice
        /// </para>
        /// <para>
        /// Regular expression: (Annotation* | AdministrativeArea* | AdministrativeDate* | CoordinateSystem? | Units? | MapPoint* | Personnel* | FieldNote* | Feature* | SurveyorCertificate* | PurposeOfSurvey* | HeadOfPower*)*
        /// </para>
        /// </summary>
        public virtual IList<Feature> Feature {
            get {
                if ((this.FeatureField == null)) {
                    this.FeatureField = new XTypedList<Feature>(this, LinqToXsdTypeManager.Instance, FeatureXName);
                }
                return this.FeatureField;
            }
            set {
                if ((value == null)) {
                    this.FeatureField = null;
                }
                else {
                    if ((this.FeatureField == null)) {
                        this.FeatureField = XTypedList<Feature>.Initialize(this, LinqToXsdTypeManager.Instance, value, FeatureXName);
                    }
                    else {
                        XTypedServices.SetList<Feature>(this.FeatureField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating, choice
        /// </para>
        /// <para>
        /// Regular expression: (Annotation* | AdministrativeArea* | AdministrativeDate* | CoordinateSystem? | Units? | MapPoint* | Personnel* | FieldNote* | Feature* | SurveyorCertificate* | PurposeOfSurvey* | HeadOfPower*)*
        /// </para>
        /// </summary>
        public virtual IList<SurveyorCertificate> SurveyorCertificate {
            get {
                if ((this.SurveyorCertificateField == null)) {
                    this.SurveyorCertificateField = new XTypedList<SurveyorCertificate>(this, LinqToXsdTypeManager.Instance, SurveyorCertificateXName);
                }
                return this.SurveyorCertificateField;
            }
            set {
                if ((value == null)) {
                    this.SurveyorCertificateField = null;
                }
                else {
                    if ((this.SurveyorCertificateField == null)) {
                        this.SurveyorCertificateField = XTypedList<SurveyorCertificate>.Initialize(this, LinqToXsdTypeManager.Instance, value, SurveyorCertificateXName);
                    }
                    else {
                        XTypedServices.SetList<SurveyorCertificate>(this.SurveyorCertificateField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating, choice
        /// </para>
        /// <para>
        /// Regular expression: (Annotation* | AdministrativeArea* | AdministrativeDate* | CoordinateSystem? | Units? | MapPoint* | Personnel* | FieldNote* | Feature* | SurveyorCertificate* | PurposeOfSurvey* | HeadOfPower*)*
        /// </para>
        /// </summary>
        public virtual IList<PurposeOfSurvey> PurposeOfSurvey {
            get {
                if ((this.PurposeOfSurveyField == null)) {
                    this.PurposeOfSurveyField = new XTypedList<PurposeOfSurvey>(this, LinqToXsdTypeManager.Instance, PurposeOfSurveyXName);
                }
                return this.PurposeOfSurveyField;
            }
            set {
                if ((value == null)) {
                    this.PurposeOfSurveyField = null;
                }
                else {
                    if ((this.PurposeOfSurveyField == null)) {
                        this.PurposeOfSurveyField = XTypedList<PurposeOfSurvey>.Initialize(this, LinqToXsdTypeManager.Instance, value, PurposeOfSurveyXName);
                    }
                    else {
                        XTypedServices.SetList<PurposeOfSurvey>(this.PurposeOfSurveyField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating, choice
        /// </para>
        /// <para>
        /// Regular expression: (Annotation* | AdministrativeArea* | AdministrativeDate* | CoordinateSystem? | Units? | MapPoint* | Personnel* | FieldNote* | Feature* | SurveyorCertificate* | PurposeOfSurvey* | HeadOfPower*)*
        /// </para>
        /// </summary>
        public virtual IList<HeadOfPower> HeadOfPower {
            get {
                if ((this.HeadOfPowerField == null)) {
                    this.HeadOfPowerField = new XTypedList<HeadOfPower>(this, LinqToXsdTypeManager.Instance, HeadOfPowerXName);
                }
                return this.HeadOfPowerField;
            }
            set {
                if ((value == null)) {
                    this.HeadOfPowerField = null;
                }
                else {
                    if ((this.HeadOfPowerField == null)) {
                        this.HeadOfPowerField = XTypedList<HeadOfPower>.Initialize(this, LinqToXsdTypeManager.Instance, value, HeadOfPowerXName);
                    }
                    else {
                        XTypedServices.SetList<HeadOfPower>(this.HeadOfPowerField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual string name {
            get {
                XAttribute x = this.Attribute(nameXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(nameXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string desc {
            get {
                XAttribute x = this.Attribute(descXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(descXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual LandXml.v1_2.purposeType? purpose {
            get {
                XAttribute x = this.Attribute(purposeXName);
                if ((x == null)) {
                    return null;
                }
                return ((LandXml.v1_2.purposeType)(Enum.Parse(typeof(LandXml.v1_2.purposeType), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetAttribute(purposeXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.DateTime? startTime {
            get {
                XAttribute x = this.Attribute(startTimeXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<System.DateTime>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.DateTime).Datatype);
            }
            set {
                this.SetAttribute(startTimeXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.DateTime).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.DateTime? endTime {
            get {
                XAttribute x = this.Attribute(endTimeXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<System.DateTime>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.DateTime).Datatype);
            }
            set {
                this.SetAttribute(endTimeXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.DateTime).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string surveyor {
            get {
                XAttribute x = this.Attribute(surveyorXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(surveyorXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string surveyorFirm {
            get {
                XAttribute x = this.Attribute(surveyorFirmXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(surveyorFirmXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string surveyorReference {
            get {
                XAttribute x = this.Attribute(surveyorReferenceXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(surveyorReferenceXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string surveyorRegistration {
            get {
                XAttribute x = this.Attribute(surveyorRegistrationXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(surveyorRegistrationXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string surveyPurpose {
            get {
                XAttribute x = this.Attribute(surveyPurposeXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(surveyPurposeXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual LandXml.v1_2.surveyType? type {
            get {
                XAttribute x = this.Attribute(typeXName);
                if ((x == null)) {
                    return null;
                }
                return ((LandXml.v1_2.surveyType)(Enum.Parse(typeof(LandXml.v1_2.surveyType), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetAttribute(typeXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string @class {
            get {
                XAttribute x = this.Attribute(@classXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(@classXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string county {
            get {
                XAttribute x = this.Attribute(countyXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(countyXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Boolean? applyAtmosphericCorrection {
            get {
                XAttribute x = this.Attribute(applyAtmosphericCorrectionXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
            set {
                this.SetAttribute(applyAtmosphericCorrectionXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Double? pressure {
            get {
                XAttribute x = this.Attribute(pressureXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetAttribute(pressureXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Double? temperature {
            get {
                XAttribute x = this.Attribute(temperatureXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetAttribute(temperatureXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Boolean? applySeaLevelCorrection {
            get {
                XAttribute x = this.Attribute(applySeaLevelCorrectionXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
            set {
                this.SetAttribute(applySeaLevelCorrectionXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Double? scaleFactor {
            get {
                XAttribute x = this.Attribute(scaleFactorXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetAttribute(scaleFactorXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Double? seaLevelCorrectionFactor {
            get {
                XAttribute x = this.Attribute(seaLevelCorrectionFactorXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetAttribute(seaLevelCorrectionFactorXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Double? combinedFactor {
            get {
                XAttribute x = this.Attribute(combinedFactorXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetAttribute(combinedFactorXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string jurisdiction {
            get {
                XAttribute x = this.Attribute(jurisdictionXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(jurisdictionXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.DateTime? submissionDate {
            get {
                XAttribute x = this.Attribute(submissionDateXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<System.DateTime>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date).Datatype);
            }
            set {
                this.SetAttribute(submissionDateXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string documentStatus {
            get {
                XAttribute x = this.Attribute(documentStatusXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(documentStatusXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string surveyFormat {
            get {
                XAttribute x = this.Attribute(surveyFormatXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(surveyFormatXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string surveyStatus {
            get {
                XAttribute x = this.Attribute(surveyStatusXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(surveyStatusXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Int32? communityTitleSchemeNo {
            get {
                XAttribute x = this.Attribute(communityTitleSchemeNoXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<int>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
            set {
                this.SetAttribute(communityTitleSchemeNoXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string communityTitleSchemeName {
            get {
                XAttribute x = this.Attribute(communityTitleSchemeNameXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(communityTitleSchemeNameXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Boolean? fieldNoteFlag {
            get {
                XAttribute x = this.Attribute(fieldNoteFlagXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
            set {
                this.SetAttribute(fieldNoteFlagXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string fieldNoteReference {
            get {
                XAttribute x = this.Attribute(fieldNoteReferenceXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(fieldNoteReferenceXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string fieldReport {
            get {
                XAttribute x = this.Attribute(fieldReportXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(fieldReportXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static SurveyHeader Load(string xmlFile) {
            return XTypedServices.Load<SurveyHeader>(xmlFile);
        }
        
        public static SurveyHeader Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<SurveyHeader>(xmlFile);
        }
        
        public static SurveyHeader Parse(string xml) {
            return XTypedServices.Parse<SurveyHeader>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<SurveyHeader>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(AnnotationXName, typeof(Annotation));
            localElementDictionary.Add(AdministrativeAreaXName, typeof(AdministrativeArea));
            localElementDictionary.Add(AdministrativeDateXName, typeof(AdministrativeDate));
            localElementDictionary.Add(CoordinateSystemXName, typeof(CoordinateSystem));
            localElementDictionary.Add(UnitsXName, typeof(Units));
            localElementDictionary.Add(MapPointXName, typeof(MapPoint));
            localElementDictionary.Add(PersonnelXName, typeof(Personnel));
            localElementDictionary.Add(FieldNoteXName, typeof(FieldNote));
            localElementDictionary.Add(FeatureXName, typeof(Feature));
            localElementDictionary.Add(SurveyorCertificateXName, typeof(SurveyorCertificate));
            localElementDictionary.Add(PurposeOfSurveyXName, typeof(PurposeOfSurvey));
            localElementDictionary.Add(HeadOfPowerXName, typeof(HeadOfPower));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    public partial class HeadOfPower : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName nameXName = System.Xml.Linq.XName.Get("name", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("HeadOfPower", "http://www.landxml.org/schema/LandXML-1.2");
        
		public static explicit operator HeadOfPower(XElement xe) { return XTypedServices.ToXTypedElement<HeadOfPower>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public HeadOfPower() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual string name {
            get {
                XAttribute x = this.Attribute(nameXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(nameXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static HeadOfPower Load(string xmlFile) {
            return XTypedServices.Load<HeadOfPower>(xmlFile);
        }
        
        public static HeadOfPower Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<HeadOfPower>(xmlFile);
        }
        
        public static HeadOfPower Parse(string xml) {
            return XTypedServices.Parse<HeadOfPower>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<HeadOfPower>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class AdministrativeArea : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName adminAreaTypeXName = System.Xml.Linq.XName.Get("adminAreaType", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName adminAreaNameXName = System.Xml.Linq.XName.Get("adminAreaName", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName adminAreaCodeXName = System.Xml.Linq.XName.Get("adminAreaCode", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName pclRefXName = System.Xml.Linq.XName.Get("pclRef", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("AdministrativeArea", "http://www.landxml.org/schema/LandXML-1.2");
        
		public static explicit operator AdministrativeArea(XElement xe) { return XTypedServices.ToXTypedElement<AdministrativeArea>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public AdministrativeArea() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual string adminAreaType {
            get {
                XAttribute x = this.Attribute(adminAreaTypeXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(adminAreaTypeXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string adminAreaName {
            get {
                XAttribute x = this.Attribute(adminAreaNameXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(adminAreaNameXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string adminAreaCode {
            get {
                XAttribute x = this.Attribute(adminAreaCodeXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(adminAreaCodeXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual IList<string> pclRef {
            get {
                XAttribute x = this.Attribute(pclRefXName);
                return XTypedServices.ParseListValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetListAttribute(pclRefXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static AdministrativeArea Load(string xmlFile) {
            return XTypedServices.Load<AdministrativeArea>(xmlFile);
        }
        
        public static AdministrativeArea Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<AdministrativeArea>(xmlFile);
        }
        
        public static AdministrativeArea Parse(string xml) {
            return XTypedServices.Parse<AdministrativeArea>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<AdministrativeArea>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class AdministrativeDate : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName adminDateTypeXName = System.Xml.Linq.XName.Get("adminDateType", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName adminDateXName = System.Xml.Linq.XName.Get("adminDate", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("AdministrativeDate", "http://www.landxml.org/schema/LandXML-1.2");
        
		public static explicit operator AdministrativeDate(XElement xe) { return XTypedServices.ToXTypedElement<AdministrativeDate>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public AdministrativeDate() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual string adminDateType {
            get {
                XAttribute x = this.Attribute(adminDateTypeXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(adminDateTypeXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual System.DateTime adminDate {
            get {
                XAttribute x = this.Attribute(adminDateXName);
                return XTypedServices.ParseValue<System.DateTime>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date).Datatype);
            }
            set {
                this.SetAttribute(adminDateXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static AdministrativeDate Load(string xmlFile) {
            return XTypedServices.Load<AdministrativeDate>(xmlFile);
        }
        
        public static AdministrativeDate Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<AdministrativeDate>(xmlFile);
        }
        
        public static AdministrativeDate Parse(string xml) {
            return XTypedServices.Parse<AdministrativeDate>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<AdministrativeDate>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class Annotation : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName typeXName = System.Xml.Linq.XName.Get("type", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName nameXName = System.Xml.Linq.XName.Get("name", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName descXName = System.Xml.Linq.XName.Get("desc", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName pclRefXName = System.Xml.Linq.XName.Get("pclRef", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("Annotation", "http://www.landxml.org/schema/LandXML-1.2");
        
		public static explicit operator Annotation(XElement xe) { return XTypedServices.ToXTypedElement<Annotation>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public Annotation() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual string type {
            get {
                XAttribute x = this.Attribute(typeXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(typeXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string name {
            get {
                XAttribute x = this.Attribute(nameXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(nameXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string desc {
            get {
                XAttribute x = this.Attribute(descXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(descXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual IList<string> pclRef {
            get {
                XAttribute x = this.Attribute(pclRefXName);
                return XTypedServices.ParseListValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetListAttribute(pclRefXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static Annotation Load(string xmlFile) {
            return XTypedServices.Load<Annotation>(xmlFile);
        }
        
        public static Annotation Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<Annotation>(xmlFile);
        }
        
        public static Annotation Parse(string xml) {
            return XTypedServices.Parse<Annotation>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<Annotation>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class SurveyorCertificate : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName nameXName = System.Xml.Linq.XName.Get("name", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName certificateTypeXName = System.Xml.Linq.XName.Get("certificateType", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName textCertificateXName = System.Xml.Linq.XName.Get("textCertificate", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName surveyDateXName = System.Xml.Linq.XName.Get("surveyDate", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("SurveyorCertificate", "http://www.landxml.org/schema/LandXML-1.2");
        
		public static explicit operator SurveyorCertificate(XElement xe) { return XTypedServices.ToXTypedElement<SurveyorCertificate>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public SurveyorCertificate() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual string name {
            get {
                XAttribute x = this.Attribute(nameXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(nameXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string certificateType {
            get {
                XAttribute x = this.Attribute(certificateTypeXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(certificateTypeXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string textCertificate {
            get {
                XAttribute x = this.Attribute(textCertificateXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(textCertificateXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.DateTime? surveyDate {
            get {
                XAttribute x = this.Attribute(surveyDateXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<System.DateTime>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date).Datatype);
            }
            set {
                this.SetAttribute(surveyDateXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static SurveyorCertificate Load(string xmlFile) {
            return XTypedServices.Load<SurveyorCertificate>(xmlFile);
        }
        
        public static SurveyorCertificate Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<SurveyorCertificate>(xmlFile);
        }
        
        public static SurveyorCertificate Parse(string xml) {
            return XTypedServices.Parse<SurveyorCertificate>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<SurveyorCertificate>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class PurposeOfSurvey : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName nameXName = System.Xml.Linq.XName.Get("name", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("PurposeOfSurvey", "http://www.landxml.org/schema/LandXML-1.2");
        
		public static explicit operator PurposeOfSurvey(XElement xe) { return XTypedServices.ToXTypedElement<PurposeOfSurvey>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public PurposeOfSurvey() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual string name {
            get {
                XAttribute x = this.Attribute(nameXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(nameXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static PurposeOfSurvey Load(string xmlFile) {
            return XTypedServices.Load<PurposeOfSurvey>(xmlFile);
        }
        
        public static PurposeOfSurvey Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<PurposeOfSurvey>(xmlFile);
        }
        
        public static PurposeOfSurvey Parse(string xml) {
            return XTypedServices.Parse<PurposeOfSurvey>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<PurposeOfSurvey>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (AmendmentItem+)
    /// </para>
    /// </summary>
    public partial class Amendment : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName AmendmentItemXName = System.Xml.Linq.XName.Get("AmendmentItem", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<AmendmentItem> AmendmentItemField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName dealingNumberXName = System.Xml.Linq.XName.Get("dealingNumber", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName amendmentDateXName = System.Xml.Linq.XName.Get("amendmentDate", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName commentsXName = System.Xml.Linq.XName.Get("comments", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("Amendment", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator Amendment(XElement xe) { return XTypedServices.ToXTypedElement<Amendment>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static Amendment() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(AmendmentItemXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (AmendmentItem+)
        /// </para>
        /// </summary>
        public Amendment() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (AmendmentItem+)
        /// </para>
        /// </summary>
        public virtual IList<AmendmentItem> AmendmentItem {
            get {
                if ((this.AmendmentItemField == null)) {
                    this.AmendmentItemField = new XTypedList<AmendmentItem>(this, LinqToXsdTypeManager.Instance, AmendmentItemXName);
                }
                return this.AmendmentItemField;
            }
            set {
                if ((value == null)) {
                    this.AmendmentItemField = null;
                }
                else {
                    if ((this.AmendmentItemField == null)) {
                        this.AmendmentItemField = XTypedList<AmendmentItem>.Initialize(this, LinqToXsdTypeManager.Instance, value, AmendmentItemXName);
                    }
                    else {
                        XTypedServices.SetList<AmendmentItem>(this.AmendmentItemField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string dealingNumber {
            get {
                XAttribute x = this.Attribute(dealingNumberXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(dealingNumberXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.DateTime? amendmentDate {
            get {
                XAttribute x = this.Attribute(amendmentDateXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<System.DateTime>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date).Datatype);
            }
            set {
                this.SetAttribute(amendmentDateXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string comments {
            get {
                XAttribute x = this.Attribute(commentsXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(commentsXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static Amendment Load(string xmlFile) {
            return XTypedServices.Load<Amendment>(xmlFile);
        }
        
        public static Amendment Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<Amendment>(xmlFile);
        }
        
        public static Amendment Parse(string xml) {
            return XTypedServices.Parse<Amendment>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<Amendment>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(AmendmentItemXName, typeof(AmendmentItem));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    public partial class AmendmentItem : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName elementNameXName = System.Xml.Linq.XName.Get("elementName", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName oldNameXName = System.Xml.Linq.XName.Get("oldName", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName newNameXName = System.Xml.Linq.XName.Get("newName", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("AmendmentItem", "http://www.landxml.org/schema/LandXML-1.2");
        
		public static explicit operator AmendmentItem(XElement xe) { return XTypedServices.ToXTypedElement<AmendmentItem>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public AmendmentItem() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string elementName {
            get {
                XAttribute x = this.Attribute(elementNameXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(elementNameXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string oldName {
            get {
                XAttribute x = this.Attribute(oldNameXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(oldNameXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string newName {
            get {
                XAttribute x = this.Attribute(newNameXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(newNameXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static AmendmentItem Load(string xmlFile) {
            return XTypedServices.Load<AmendmentItem>(xmlFile);
        }
        
        public static AmendmentItem Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<AmendmentItem>(xmlFile);
        }
        
        public static AmendmentItem Parse(string xml) {
            return XTypedServices.Parse<AmendmentItem>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<AmendmentItem>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class Personnel : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName nameXName = System.Xml.Linq.XName.Get("name", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName roleXName = System.Xml.Linq.XName.Get("role", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName regTypeXName = System.Xml.Linq.XName.Get("regType", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName regNumberXName = System.Xml.Linq.XName.Get("regNumber", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("Personnel", "http://www.landxml.org/schema/LandXML-1.2");
        
		public static explicit operator Personnel(XElement xe) { return XTypedServices.ToXTypedElement<Personnel>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public Personnel() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string name {
            get {
                XAttribute x = this.Attribute(nameXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(nameXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string role {
            get {
                XAttribute x = this.Attribute(roleXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(roleXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string regType {
            get {
                XAttribute x = this.Attribute(regTypeXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(regTypeXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string regNumber {
            get {
                XAttribute x = this.Attribute(regNumberXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(regNumberXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static Personnel Load(string xmlFile) {
            return XTypedServices.Load<Personnel>(xmlFile);
        }
        
        public static Personnel Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<Personnel>(xmlFile);
        }
        
        public static Personnel Parse(string xml) {
            return XTypedServices.Parse<Personnel>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<Personnel>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (any)+
    /// </para>
    /// </summary>
    public partial class FieldNote : XTypedElement, IXMetaData {
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("FieldNote", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static FSM validationStates;
        
		public static explicit operator FieldNote(XElement xe) { return XTypedServices.ToXTypedElement<FieldNote>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static FieldNote() {
            InitFSM();
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (any)+
        /// </para>
        /// </summary>
        public FieldNote() {
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (any)+
        /// </para>
        /// </summary>
        public virtual IEnumerable<XElement> Any {
            get {
                return this.GetWildCards(WildCard.DefaultWildCard);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static FieldNote Load(string xmlFile) {
            return XTypedServices.Load<FieldNote>(xmlFile);
        }
        
        public static FieldNote Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<FieldNote>(xmlFile);
        }
        
        public static FieldNote Parse(string xml) {
            return XTypedServices.Parse<FieldNote>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<FieldNote>(this);
        }
        
        FSM IXMetaData.GetValidationStates() {
            return validationStates;
        }
        
        private static void InitFSM() {
            Dictionary<int, Transitions> transitions = new Dictionary<int, Transitions>();
            transitions.Add(1, new Transitions(new SingleTransition(new WildCard("##other", "http://www.landxml.org/schema/LandXML-1.2"), 2)));
            transitions.Add(2, new Transitions(new SingleTransition(new WildCard("##other", "http://www.landxml.org/schema/LandXML-1.2"), 2)));
            validationStates = new FSM(1, new Set<int>(new int[] {
                            2,
                            1}), transitions);
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: ((InstrumentDetails | LaserDetails | GPSReceiverDetails | GPSAntennaDetails), (FieldNote* | Feature*)*)
    /// </para>
    /// </summary>
    public partial class Equipment : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName InstrumentDetailsXName = System.Xml.Linq.XName.Get("InstrumentDetails", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName LaserDetailsXName = System.Xml.Linq.XName.Get("LaserDetails", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName GPSReceiverDetailsXName = System.Xml.Linq.XName.Get("GPSReceiverDetails", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName GPSAntennaDetailsXName = System.Xml.Linq.XName.Get("GPSAntennaDetails", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName FieldNoteXName = System.Xml.Linq.XName.Get("FieldNote", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<FieldNote> FieldNoteField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName FeatureXName = System.Xml.Linq.XName.Get("Feature", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<Feature> FeatureField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("Equipment", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator Equipment(XElement xe) { return XTypedServices.ToXTypedElement<Equipment>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static Equipment() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new ChoiceContentModelEntity(new NamedContentModelEntity(InstrumentDetailsXName), new NamedContentModelEntity(LaserDetailsXName), new NamedContentModelEntity(GPSReceiverDetailsXName), new NamedContentModelEntity(GPSAntennaDetailsXName)), new ChoiceContentModelEntity(new NamedContentModelEntity(FieldNoteXName), new NamedContentModelEntity(FeatureXName)));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: ((InstrumentDetails | LaserDetails | GPSReceiverDetails | GPSAntennaDetails), (FieldNote* | Feature*)*)
        /// </para>
        /// </summary>
        public Equipment() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((InstrumentDetails | LaserDetails | GPSReceiverDetails | GPSAntennaDetails), (FieldNote* | Feature*)*)
        /// </para>
        /// </summary>
        public virtual InstrumentDetails InstrumentDetails {
            get {
                XElement x = this.GetElement(InstrumentDetailsXName);
                return ((InstrumentDetails)(x));
            }
            set {
                this.SetElement(InstrumentDetailsXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((InstrumentDetails | LaserDetails | GPSReceiverDetails | GPSAntennaDetails), (FieldNote* | Feature*)*)
        /// </para>
        /// </summary>
        public virtual LaserDetails LaserDetails {
            get {
                XElement x = this.GetElement(LaserDetailsXName);
                return ((LaserDetails)(x));
            }
            set {
                this.SetElement(LaserDetailsXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((InstrumentDetails | LaserDetails | GPSReceiverDetails | GPSAntennaDetails), (FieldNote* | Feature*)*)
        /// </para>
        /// </summary>
        public virtual GPSReceiverDetails GPSReceiverDetails {
            get {
                XElement x = this.GetElement(GPSReceiverDetailsXName);
                return ((GPSReceiverDetails)(x));
            }
            set {
                this.SetElement(GPSReceiverDetailsXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((InstrumentDetails | LaserDetails | GPSReceiverDetails | GPSAntennaDetails), (FieldNote* | Feature*)*)
        /// </para>
        /// </summary>
        public virtual GPSAntennaDetails GPSAntennaDetails {
            get {
                XElement x = this.GetElement(GPSAntennaDetailsXName);
                return ((GPSAntennaDetails)(x));
            }
            set {
                this.SetElement(GPSAntennaDetailsXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((InstrumentDetails | LaserDetails | GPSReceiverDetails | GPSAntennaDetails), (FieldNote* | Feature*)*)
        /// </para>
        /// </summary>
        public virtual IList<FieldNote> FieldNote {
            get {
                if ((this.FieldNoteField == null)) {
                    this.FieldNoteField = new XTypedList<FieldNote>(this, LinqToXsdTypeManager.Instance, FieldNoteXName);
                }
                return this.FieldNoteField;
            }
            set {
                if ((value == null)) {
                    this.FieldNoteField = null;
                }
                else {
                    if ((this.FieldNoteField == null)) {
                        this.FieldNoteField = XTypedList<FieldNote>.Initialize(this, LinqToXsdTypeManager.Instance, value, FieldNoteXName);
                    }
                    else {
                        XTypedServices.SetList<FieldNote>(this.FieldNoteField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((InstrumentDetails | LaserDetails | GPSReceiverDetails | GPSAntennaDetails), (FieldNote* | Feature*)*)
        /// </para>
        /// </summary>
        public virtual IList<Feature> Feature {
            get {
                if ((this.FeatureField == null)) {
                    this.FeatureField = new XTypedList<Feature>(this, LinqToXsdTypeManager.Instance, FeatureXName);
                }
                return this.FeatureField;
            }
            set {
                if ((value == null)) {
                    this.FeatureField = null;
                }
                else {
                    if ((this.FeatureField == null)) {
                        this.FeatureField = XTypedList<Feature>.Initialize(this, LinqToXsdTypeManager.Instance, value, FeatureXName);
                    }
                    else {
                        XTypedServices.SetList<Feature>(this.FeatureField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static Equipment Load(string xmlFile) {
            return XTypedServices.Load<Equipment>(xmlFile);
        }
        
        public static Equipment Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<Equipment>(xmlFile);
        }
        
        public static Equipment Parse(string xml) {
            return XTypedServices.Parse<Equipment>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<Equipment>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(InstrumentDetailsXName, typeof(InstrumentDetails));
            localElementDictionary.Add(LaserDetailsXName, typeof(LaserDetails));
            localElementDictionary.Add(GPSReceiverDetailsXName, typeof(GPSReceiverDetails));
            localElementDictionary.Add(GPSAntennaDetailsXName, typeof(GPSAntennaDetails));
            localElementDictionary.Add(FieldNoteXName, typeof(FieldNote));
            localElementDictionary.Add(FeatureXName, typeof(Feature));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Corrections, (FieldNote* | Feature*)*)
    /// </para>
    /// </summary>
    public partial class InstrumentDetails : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName CorrectionsXName = System.Xml.Linq.XName.Get("Corrections", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName FieldNoteXName = System.Xml.Linq.XName.Get("FieldNote", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<FieldNote> FieldNoteField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName FeatureXName = System.Xml.Linq.XName.Get("Feature", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<Feature> FeatureField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName idXName = System.Xml.Linq.XName.Get("id", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName edmAccuracyConstantXName = System.Xml.Linq.XName.Get("edmAccuracyConstant", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName edmAccuracyppmXName = System.Xml.Linq.XName.Get("edmAccuracyppm", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName edmVertOffsetXName = System.Xml.Linq.XName.Get("edmVertOffset", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName horizAnglePrecisionXName = System.Xml.Linq.XName.Get("horizAnglePrecision", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName manufacturerXName = System.Xml.Linq.XName.Get("manufacturer", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName modelXName = System.Xml.Linq.XName.Get("model", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName serialNumberXName = System.Xml.Linq.XName.Get("serialNumber", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName zenithAnglePrecisionXName = System.Xml.Linq.XName.Get("zenithAnglePrecision", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName carrierWavelengthXName = System.Xml.Linq.XName.Get("carrierWavelength", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName refractiveIndexXName = System.Xml.Linq.XName.Get("refractiveIndex", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName horizCollimationXName = System.Xml.Linq.XName.Get("horizCollimation", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName vertCollimationXName = System.Xml.Linq.XName.Get("vertCollimation", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName stadiaFactorXName = System.Xml.Linq.XName.Get("stadiaFactor", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("InstrumentDetails", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator InstrumentDetails(XElement xe) { return XTypedServices.ToXTypedElement<InstrumentDetails>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static InstrumentDetails() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(CorrectionsXName), new ChoiceContentModelEntity(new NamedContentModelEntity(FieldNoteXName), new NamedContentModelEntity(FeatureXName)));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Corrections, (FieldNote* | Feature*)*)
        /// </para>
        /// </summary>
        public InstrumentDetails() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (Corrections, (FieldNote* | Feature*)*)
        /// </para>
        /// </summary>
        public virtual Corrections Corrections {
            get {
                XElement x = this.GetElement(CorrectionsXName);
                return ((Corrections)(x));
            }
            set {
                this.SetElement(CorrectionsXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (Corrections, (FieldNote* | Feature*)*)
        /// </para>
        /// </summary>
        public virtual IList<FieldNote> FieldNote {
            get {
                if ((this.FieldNoteField == null)) {
                    this.FieldNoteField = new XTypedList<FieldNote>(this, LinqToXsdTypeManager.Instance, FieldNoteXName);
                }
                return this.FieldNoteField;
            }
            set {
                if ((value == null)) {
                    this.FieldNoteField = null;
                }
                else {
                    if ((this.FieldNoteField == null)) {
                        this.FieldNoteField = XTypedList<FieldNote>.Initialize(this, LinqToXsdTypeManager.Instance, value, FieldNoteXName);
                    }
                    else {
                        XTypedServices.SetList<FieldNote>(this.FieldNoteField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (Corrections, (FieldNote* | Feature*)*)
        /// </para>
        /// </summary>
        public virtual IList<Feature> Feature {
            get {
                if ((this.FeatureField == null)) {
                    this.FeatureField = new XTypedList<Feature>(this, LinqToXsdTypeManager.Instance, FeatureXName);
                }
                return this.FeatureField;
            }
            set {
                if ((value == null)) {
                    this.FeatureField = null;
                }
                else {
                    if ((this.FeatureField == null)) {
                        this.FeatureField = XTypedList<Feature>.Initialize(this, LinqToXsdTypeManager.Instance, value, FeatureXName);
                    }
                    else {
                        XTypedServices.SetList<Feature>(this.FeatureField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(idXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(idXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Double? edmAccuracyConstant {
            get {
                XAttribute x = this.Attribute(edmAccuracyConstantXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetAttribute(edmAccuracyConstantXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Double? edmAccuracyppm {
            get {
                XAttribute x = this.Attribute(edmAccuracyppmXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetAttribute(edmAccuracyppmXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Double? edmVertOffset {
            get {
                XAttribute x = this.Attribute(edmVertOffsetXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetAttribute(edmVertOffsetXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Double? horizAnglePrecision {
            get {
                XAttribute x = this.Attribute(horizAnglePrecisionXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetAttribute(horizAnglePrecisionXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string manufacturer {
            get {
                XAttribute x = this.Attribute(manufacturerXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(manufacturerXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string model {
            get {
                XAttribute x = this.Attribute(modelXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(modelXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string serialNumber {
            get {
                XAttribute x = this.Attribute(serialNumberXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(serialNumberXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Double? zenithAnglePrecision {
            get {
                XAttribute x = this.Attribute(zenithAnglePrecisionXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetAttribute(zenithAnglePrecisionXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Double? carrierWavelength {
            get {
                XAttribute x = this.Attribute(carrierWavelengthXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetAttribute(carrierWavelengthXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Double? refractiveIndex {
            get {
                XAttribute x = this.Attribute(refractiveIndexXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetAttribute(refractiveIndexXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Double? horizCollimation {
            get {
                XAttribute x = this.Attribute(horizCollimationXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetAttribute(horizCollimationXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Double? vertCollimation {
            get {
                XAttribute x = this.Attribute(vertCollimationXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetAttribute(vertCollimationXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Double? stadiaFactor {
            get {
                XAttribute x = this.Attribute(stadiaFactorXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetAttribute(stadiaFactorXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static InstrumentDetails Load(string xmlFile) {
            return XTypedServices.Load<InstrumentDetails>(xmlFile);
        }
        
        public static InstrumentDetails Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<InstrumentDetails>(xmlFile);
        }
        
        public static InstrumentDetails Parse(string xml) {
            return XTypedServices.Parse<InstrumentDetails>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<InstrumentDetails>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(CorrectionsXName, typeof(Corrections));
            localElementDictionary.Add(FieldNoteXName, typeof(FieldNote));
            localElementDictionary.Add(FeatureXName, typeof(Feature));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: ((FieldNote* | Feature*)*)
    /// </para>
    /// </summary>
    public partial class LaserDetails : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName FieldNoteXName = System.Xml.Linq.XName.Get("FieldNote", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<FieldNote> FieldNoteField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName FeatureXName = System.Xml.Linq.XName.Get("Feature", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<Feature> FeatureField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName idXName = System.Xml.Linq.XName.Get("id", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName laserVertOffsetXName = System.Xml.Linq.XName.Get("laserVertOffset", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName manufacturerXName = System.Xml.Linq.XName.Get("manufacturer", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName modelXName = System.Xml.Linq.XName.Get("model", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName serialNumberXName = System.Xml.Linq.XName.Get("serialNumber", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("LaserDetails", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator LaserDetails(XElement xe) { return XTypedServices.ToXTypedElement<LaserDetails>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static LaserDetails() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new ChoiceContentModelEntity(new NamedContentModelEntity(FieldNoteXName), new NamedContentModelEntity(FeatureXName)));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: ((FieldNote* | Feature*)*)
        /// </para>
        /// </summary>
        public LaserDetails() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((FieldNote* | Feature*)*)
        /// </para>
        /// </summary>
        public virtual IList<FieldNote> FieldNote {
            get {
                if ((this.FieldNoteField == null)) {
                    this.FieldNoteField = new XTypedList<FieldNote>(this, LinqToXsdTypeManager.Instance, FieldNoteXName);
                }
                return this.FieldNoteField;
            }
            set {
                if ((value == null)) {
                    this.FieldNoteField = null;
                }
                else {
                    if ((this.FieldNoteField == null)) {
                        this.FieldNoteField = XTypedList<FieldNote>.Initialize(this, LinqToXsdTypeManager.Instance, value, FieldNoteXName);
                    }
                    else {
                        XTypedServices.SetList<FieldNote>(this.FieldNoteField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((FieldNote* | Feature*)*)
        /// </para>
        /// </summary>
        public virtual IList<Feature> Feature {
            get {
                if ((this.FeatureField == null)) {
                    this.FeatureField = new XTypedList<Feature>(this, LinqToXsdTypeManager.Instance, FeatureXName);
                }
                return this.FeatureField;
            }
            set {
                if ((value == null)) {
                    this.FeatureField = null;
                }
                else {
                    if ((this.FeatureField == null)) {
                        this.FeatureField = XTypedList<Feature>.Initialize(this, LinqToXsdTypeManager.Instance, value, FeatureXName);
                    }
                    else {
                        XTypedServices.SetList<Feature>(this.FeatureField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(idXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(idXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Double? laserVertOffset {
            get {
                XAttribute x = this.Attribute(laserVertOffsetXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetAttribute(laserVertOffsetXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string manufacturer {
            get {
                XAttribute x = this.Attribute(manufacturerXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(manufacturerXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string model {
            get {
                XAttribute x = this.Attribute(modelXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(modelXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string serialNumber {
            get {
                XAttribute x = this.Attribute(serialNumberXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(serialNumberXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static LaserDetails Load(string xmlFile) {
            return XTypedServices.Load<LaserDetails>(xmlFile);
        }
        
        public static LaserDetails Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<LaserDetails>(xmlFile);
        }
        
        public static LaserDetails Parse(string xml) {
            return XTypedServices.Parse<LaserDetails>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<LaserDetails>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(FieldNoteXName, typeof(FieldNote));
            localElementDictionary.Add(FeatureXName, typeof(Feature));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: ((Monument* | FieldNote* | Feature*)*)
    /// </para>
    /// </summary>
    public partial class GPSAntennaDetails : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName MonumentXName = System.Xml.Linq.XName.Get("Monument", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<Monument> MonumentField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName FieldNoteXName = System.Xml.Linq.XName.Get("FieldNote", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<FieldNote> FieldNoteField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName FeatureXName = System.Xml.Linq.XName.Get("Feature", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<Feature> FeatureField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName idXName = System.Xml.Linq.XName.Get("id", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName manufacturerXName = System.Xml.Linq.XName.Get("manufacturer", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName modelXName = System.Xml.Linq.XName.Get("model", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName serialNumberXName = System.Xml.Linq.XName.Get("serialNumber", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName latitudeXName = System.Xml.Linq.XName.Get("latitude", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName longitudeXName = System.Xml.Linq.XName.Get("longitude", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName altitudeXName = System.Xml.Linq.XName.Get("altitude", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ellipsiodalHeightXName = System.Xml.Linq.XName.Get("ellipsiodalHeight", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName orthometricHeightXName = System.Xml.Linq.XName.Get("orthometricHeight", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("GPSAntennaDetails", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator GPSAntennaDetails(XElement xe) { return XTypedServices.ToXTypedElement<GPSAntennaDetails>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static GPSAntennaDetails() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new ChoiceContentModelEntity(new NamedContentModelEntity(MonumentXName), new NamedContentModelEntity(FieldNoteXName), new NamedContentModelEntity(FeatureXName)));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: ((Monument* | FieldNote* | Feature*)*)
        /// </para>
        /// </summary>
        public GPSAntennaDetails() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((Monument* | FieldNote* | Feature*)*)
        /// </para>
        /// </summary>
        public virtual IList<Monument> Monument {
            get {
                if ((this.MonumentField == null)) {
                    this.MonumentField = new XTypedList<Monument>(this, LinqToXsdTypeManager.Instance, MonumentXName);
                }
                return this.MonumentField;
            }
            set {
                if ((value == null)) {
                    this.MonumentField = null;
                }
                else {
                    if ((this.MonumentField == null)) {
                        this.MonumentField = XTypedList<Monument>.Initialize(this, LinqToXsdTypeManager.Instance, value, MonumentXName);
                    }
                    else {
                        XTypedServices.SetList<Monument>(this.MonumentField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((Monument* | FieldNote* | Feature*)*)
        /// </para>
        /// </summary>
        public virtual IList<FieldNote> FieldNote {
            get {
                if ((this.FieldNoteField == null)) {
                    this.FieldNoteField = new XTypedList<FieldNote>(this, LinqToXsdTypeManager.Instance, FieldNoteXName);
                }
                return this.FieldNoteField;
            }
            set {
                if ((value == null)) {
                    this.FieldNoteField = null;
                }
                else {
                    if ((this.FieldNoteField == null)) {
                        this.FieldNoteField = XTypedList<FieldNote>.Initialize(this, LinqToXsdTypeManager.Instance, value, FieldNoteXName);
                    }
                    else {
                        XTypedServices.SetList<FieldNote>(this.FieldNoteField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((Monument* | FieldNote* | Feature*)*)
        /// </para>
        /// </summary>
        public virtual IList<Feature> Feature {
            get {
                if ((this.FeatureField == null)) {
                    this.FeatureField = new XTypedList<Feature>(this, LinqToXsdTypeManager.Instance, FeatureXName);
                }
                return this.FeatureField;
            }
            set {
                if ((value == null)) {
                    this.FeatureField = null;
                }
                else {
                    if ((this.FeatureField == null)) {
                        this.FeatureField = XTypedList<Feature>.Initialize(this, LinqToXsdTypeManager.Instance, value, FeatureXName);
                    }
                    else {
                        XTypedServices.SetList<Feature>(this.FeatureField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(idXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(idXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string manufacturer {
            get {
                XAttribute x = this.Attribute(manufacturerXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(manufacturerXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string model {
            get {
                XAttribute x = this.Attribute(modelXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(modelXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string serialNumber {
            get {
                XAttribute x = this.Attribute(serialNumberXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(serialNumberXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Double? latitude {
            get {
                XAttribute x = this.Attribute(latitudeXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetAttribute(latitudeXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Double? longitude {
            get {
                XAttribute x = this.Attribute(longitudeXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetAttribute(longitudeXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Double? altitude {
            get {
                XAttribute x = this.Attribute(altitudeXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetAttribute(altitudeXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Double? ellipsiodalHeight {
            get {
                XAttribute x = this.Attribute(ellipsiodalHeightXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetAttribute(ellipsiodalHeightXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Double? orthometricHeight {
            get {
                XAttribute x = this.Attribute(orthometricHeightXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetAttribute(orthometricHeightXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static GPSAntennaDetails Load(string xmlFile) {
            return XTypedServices.Load<GPSAntennaDetails>(xmlFile);
        }
        
        public static GPSAntennaDetails Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<GPSAntennaDetails>(xmlFile);
        }
        
        public static GPSAntennaDetails Parse(string xml) {
            return XTypedServices.Parse<GPSAntennaDetails>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<GPSAntennaDetails>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(MonumentXName, typeof(Monument));
            localElementDictionary.Add(FieldNoteXName, typeof(FieldNote));
            localElementDictionary.Add(FeatureXName, typeof(Feature));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: ((FieldNote* | Feature*)*)
    /// </para>
    /// </summary>
    public partial class GPSReceiverDetails : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName FieldNoteXName = System.Xml.Linq.XName.Get("FieldNote", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<FieldNote> FieldNoteField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName FeatureXName = System.Xml.Linq.XName.Get("Feature", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<Feature> FeatureField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName idXName = System.Xml.Linq.XName.Get("id", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName manufacturerXName = System.Xml.Linq.XName.Get("manufacturer", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName modelXName = System.Xml.Linq.XName.Get("model", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName serialNumberXName = System.Xml.Linq.XName.Get("serialNumber", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("GPSReceiverDetails", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator GPSReceiverDetails(XElement xe) { return XTypedServices.ToXTypedElement<GPSReceiverDetails>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static GPSReceiverDetails() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new ChoiceContentModelEntity(new NamedContentModelEntity(FieldNoteXName), new NamedContentModelEntity(FeatureXName)));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: ((FieldNote* | Feature*)*)
        /// </para>
        /// </summary>
        public GPSReceiverDetails() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((FieldNote* | Feature*)*)
        /// </para>
        /// </summary>
        public virtual IList<FieldNote> FieldNote {
            get {
                if ((this.FieldNoteField == null)) {
                    this.FieldNoteField = new XTypedList<FieldNote>(this, LinqToXsdTypeManager.Instance, FieldNoteXName);
                }
                return this.FieldNoteField;
            }
            set {
                if ((value == null)) {
                    this.FieldNoteField = null;
                }
                else {
                    if ((this.FieldNoteField == null)) {
                        this.FieldNoteField = XTypedList<FieldNote>.Initialize(this, LinqToXsdTypeManager.Instance, value, FieldNoteXName);
                    }
                    else {
                        XTypedServices.SetList<FieldNote>(this.FieldNoteField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((FieldNote* | Feature*)*)
        /// </para>
        /// </summary>
        public virtual IList<Feature> Feature {
            get {
                if ((this.FeatureField == null)) {
                    this.FeatureField = new XTypedList<Feature>(this, LinqToXsdTypeManager.Instance, FeatureXName);
                }
                return this.FeatureField;
            }
            set {
                if ((value == null)) {
                    this.FeatureField = null;
                }
                else {
                    if ((this.FeatureField == null)) {
                        this.FeatureField = XTypedList<Feature>.Initialize(this, LinqToXsdTypeManager.Instance, value, FeatureXName);
                    }
                    else {
                        XTypedServices.SetList<Feature>(this.FeatureField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(idXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(idXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string manufacturer {
            get {
                XAttribute x = this.Attribute(manufacturerXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(manufacturerXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string model {
            get {
                XAttribute x = this.Attribute(modelXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(modelXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string serialNumber {
            get {
                XAttribute x = this.Attribute(serialNumberXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(serialNumberXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static GPSReceiverDetails Load(string xmlFile) {
            return XTypedServices.Load<GPSReceiverDetails>(xmlFile);
        }
        
        public static GPSReceiverDetails Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<GPSReceiverDetails>(xmlFile);
        }
        
        public static GPSReceiverDetails Parse(string xml) {
            return XTypedServices.Parse<GPSReceiverDetails>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<GPSReceiverDetails>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(FieldNoteXName, typeof(FieldNote));
            localElementDictionary.Add(FeatureXName, typeof(Feature));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: ((FieldNote* | Feature*)*)
    /// </para>
    /// </summary>
    public partial class Corrections : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName FieldNoteXName = System.Xml.Linq.XName.Get("FieldNote", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<FieldNote> FieldNoteField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName FeatureXName = System.Xml.Linq.XName.Get("Feature", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<Feature> FeatureField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName refractionCoefficientXName = System.Xml.Linq.XName.Get("refractionCoefficient", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName applyRefractionCoefficientXName = System.Xml.Linq.XName.Get("applyRefractionCoefficient", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName sphericityXName = System.Xml.Linq.XName.Get("sphericity", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName prismEccentricityXName = System.Xml.Linq.XName.Get("prismEccentricity", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("Corrections", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator Corrections(XElement xe) { return XTypedServices.ToXTypedElement<Corrections>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static Corrections() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new ChoiceContentModelEntity(new NamedContentModelEntity(FieldNoteXName), new NamedContentModelEntity(FeatureXName)));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: ((FieldNote* | Feature*)*)
        /// </para>
        /// </summary>
        public Corrections() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((FieldNote* | Feature*)*)
        /// </para>
        /// </summary>
        public virtual IList<FieldNote> FieldNote {
            get {
                if ((this.FieldNoteField == null)) {
                    this.FieldNoteField = new XTypedList<FieldNote>(this, LinqToXsdTypeManager.Instance, FieldNoteXName);
                }
                return this.FieldNoteField;
            }
            set {
                if ((value == null)) {
                    this.FieldNoteField = null;
                }
                else {
                    if ((this.FieldNoteField == null)) {
                        this.FieldNoteField = XTypedList<FieldNote>.Initialize(this, LinqToXsdTypeManager.Instance, value, FieldNoteXName);
                    }
                    else {
                        XTypedServices.SetList<FieldNote>(this.FieldNoteField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((FieldNote* | Feature*)*)
        /// </para>
        /// </summary>
        public virtual IList<Feature> Feature {
            get {
                if ((this.FeatureField == null)) {
                    this.FeatureField = new XTypedList<Feature>(this, LinqToXsdTypeManager.Instance, FeatureXName);
                }
                return this.FeatureField;
            }
            set {
                if ((value == null)) {
                    this.FeatureField = null;
                }
                else {
                    if ((this.FeatureField == null)) {
                        this.FeatureField = XTypedList<Feature>.Initialize(this, LinqToXsdTypeManager.Instance, value, FeatureXName);
                    }
                    else {
                        XTypedServices.SetList<Feature>(this.FeatureField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Double? refractionCoefficient {
            get {
                XAttribute x = this.Attribute(refractionCoefficientXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetAttribute(refractionCoefficientXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Boolean? applyRefractionCoefficient {
            get {
                XAttribute x = this.Attribute(applyRefractionCoefficientXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
            set {
                this.SetAttribute(applyRefractionCoefficientXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Double? sphericity {
            get {
                XAttribute x = this.Attribute(sphericityXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetAttribute(sphericityXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Double? prismEccentricity {
            get {
                XAttribute x = this.Attribute(prismEccentricityXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetAttribute(prismEccentricityXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static Corrections Load(string xmlFile) {
            return XTypedServices.Load<Corrections>(xmlFile);
        }
        
        public static Corrections Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<Corrections>(xmlFile);
        }
        
        public static Corrections Parse(string xml) {
            return XTypedServices.Parse<Corrections>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<Corrections>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(FieldNoteXName, typeof(FieldNote));
            localElementDictionary.Add(FeatureXName, typeof(Feature));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Feature*)
    /// </para>
    /// </summary>
    public partial class SurveyMonument : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName FeatureXName = System.Xml.Linq.XName.Get("Feature", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<Feature> FeatureField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName mntRefXName = System.Xml.Linq.XName.Get("mntRef", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName purposeXName = System.Xml.Linq.XName.Get("purpose", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName stateXName = System.Xml.Linq.XName.Get("state", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName adoptedSurveyXName = System.Xml.Linq.XName.Get("adoptedSurvey", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName disturbedMonumentXName = System.Xml.Linq.XName.Get("disturbedMonument", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName disturbedDateXName = System.Xml.Linq.XName.Get("disturbedDate", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName disturbedAnnotationXName = System.Xml.Linq.XName.Get("disturbedAnnotation", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName replacedMonumentXName = System.Xml.Linq.XName.Get("replacedMonument", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName replacedDateXName = System.Xml.Linq.XName.Get("replacedDate", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName replacedAnnotationXName = System.Xml.Linq.XName.Get("replacedAnnotation", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("SurveyMonument", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator SurveyMonument(XElement xe) { return XTypedServices.ToXTypedElement<SurveyMonument>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static SurveyMonument() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(FeatureXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Feature*)
        /// </para>
        /// </summary>
        public SurveyMonument() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Feature*)
        /// </para>
        /// </summary>
        public virtual IList<Feature> Feature {
            get {
                if ((this.FeatureField == null)) {
                    this.FeatureField = new XTypedList<Feature>(this, LinqToXsdTypeManager.Instance, FeatureXName);
                }
                return this.FeatureField;
            }
            set {
                if ((value == null)) {
                    this.FeatureField = null;
                }
                else {
                    if ((this.FeatureField == null)) {
                        this.FeatureField = XTypedList<Feature>.Initialize(this, LinqToXsdTypeManager.Instance, value, FeatureXName);
                    }
                    else {
                        XTypedServices.SetList<Feature>(this.FeatureField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual string mntRef {
            get {
                XAttribute x = this.Attribute(mntRefXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(mntRefXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual string purpose {
            get {
                XAttribute x = this.Attribute(purposeXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(purposeXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string state {
            get {
                XAttribute x = this.Attribute(stateXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(stateXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string adoptedSurvey {
            get {
                XAttribute x = this.Attribute(adoptedSurveyXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(adoptedSurveyXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string disturbedMonument {
            get {
                XAttribute x = this.Attribute(disturbedMonumentXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(disturbedMonumentXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.DateTime? disturbedDate {
            get {
                XAttribute x = this.Attribute(disturbedDateXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<System.DateTime>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date).Datatype);
            }
            set {
                this.SetAttribute(disturbedDateXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string disturbedAnnotation {
            get {
                XAttribute x = this.Attribute(disturbedAnnotationXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(disturbedAnnotationXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string replacedMonument {
            get {
                XAttribute x = this.Attribute(replacedMonumentXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(replacedMonumentXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.DateTime? replacedDate {
            get {
                XAttribute x = this.Attribute(replacedDateXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<System.DateTime>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date).Datatype);
            }
            set {
                this.SetAttribute(replacedDateXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string replacedAnnotation {
            get {
                XAttribute x = this.Attribute(replacedAnnotationXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(replacedAnnotationXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static SurveyMonument Load(string xmlFile) {
            return XTypedServices.Load<SurveyMonument>(xmlFile);
        }
        
        public static SurveyMonument Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<SurveyMonument>(xmlFile);
        }
        
        public static SurveyMonument Parse(string xml) {
            return XTypedServices.Parse<SurveyMonument>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<SurveyMonument>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(FeatureXName, typeof(Feature));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: ((InstrumentPoint? | Backsight* | TargetSetup* | RawObservation* | ObservationGroup* | ControlChecks* | FieldNote* | Feature*)*)
    /// </para>
    /// </summary>
    public partial class InstrumentSetup : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName InstrumentPointXName = System.Xml.Linq.XName.Get("InstrumentPoint", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<InstrumentPoint> InstrumentPointField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName BacksightXName = System.Xml.Linq.XName.Get("Backsight", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<Backsight> BacksightField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TargetSetupXName = System.Xml.Linq.XName.Get("TargetSetup", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<TargetSetup> TargetSetupField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName RawObservationXName = System.Xml.Linq.XName.Get("RawObservation", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<RawObservation> RawObservationField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ObservationGroupXName = System.Xml.Linq.XName.Get("ObservationGroup", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ObservationGroup> ObservationGroupField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ControlChecksXName = System.Xml.Linq.XName.Get("ControlChecks", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ControlChecks> ControlChecksField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName FieldNoteXName = System.Xml.Linq.XName.Get("FieldNote", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<FieldNote> FieldNoteField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName FeatureXName = System.Xml.Linq.XName.Get("Feature", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<Feature> FeatureField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName idXName = System.Xml.Linq.XName.Get("id", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName instrumentDetailsIDXName = System.Xml.Linq.XName.Get("instrumentDetailsID", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName stationNameXName = System.Xml.Linq.XName.Get("stationName", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName instrumentHeightXName = System.Xml.Linq.XName.Get("instrumentHeight", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName orientationAzimuthXName = System.Xml.Linq.XName.Get("orientationAzimuth", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName circleAzimuthXName = System.Xml.Linq.XName.Get("circleAzimuth", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName statusXName = System.Xml.Linq.XName.Get("status", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("InstrumentSetup", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator InstrumentSetup(XElement xe) { return XTypedServices.ToXTypedElement<InstrumentSetup>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static InstrumentSetup() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new ChoiceContentModelEntity(new NamedContentModelEntity(InstrumentPointXName), new NamedContentModelEntity(BacksightXName), new NamedContentModelEntity(TargetSetupXName), new NamedContentModelEntity(RawObservationXName), new NamedContentModelEntity(ObservationGroupXName), new NamedContentModelEntity(ControlChecksXName), new NamedContentModelEntity(FieldNoteXName), new NamedContentModelEntity(FeatureXName)));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: ((InstrumentPoint? | Backsight* | TargetSetup* | RawObservation* | ObservationGroup* | ControlChecks* | FieldNote* | Feature*)*)
        /// </para>
        /// </summary>
        public InstrumentSetup() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((InstrumentPoint? | Backsight* | TargetSetup* | RawObservation* | ObservationGroup* | ControlChecks* | FieldNote* | Feature*)*)
        /// </para>
        /// </summary>
        public virtual IList<InstrumentPoint> InstrumentPoint {
            get {
                if ((this.InstrumentPointField == null)) {
                    this.InstrumentPointField = new XTypedList<InstrumentPoint>(this, LinqToXsdTypeManager.Instance, InstrumentPointXName);
                }
                return this.InstrumentPointField;
            }
            set {
                if ((value == null)) {
                    this.InstrumentPointField = null;
                }
                else {
                    if ((this.InstrumentPointField == null)) {
                        this.InstrumentPointField = XTypedList<InstrumentPoint>.Initialize(this, LinqToXsdTypeManager.Instance, value, InstrumentPointXName);
                    }
                    else {
                        XTypedServices.SetList<InstrumentPoint>(this.InstrumentPointField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((InstrumentPoint? | Backsight* | TargetSetup* | RawObservation* | ObservationGroup* | ControlChecks* | FieldNote* | Feature*)*)
        /// </para>
        /// </summary>
        public virtual IList<Backsight> Backsight {
            get {
                if ((this.BacksightField == null)) {
                    this.BacksightField = new XTypedList<Backsight>(this, LinqToXsdTypeManager.Instance, BacksightXName);
                }
                return this.BacksightField;
            }
            set {
                if ((value == null)) {
                    this.BacksightField = null;
                }
                else {
                    if ((this.BacksightField == null)) {
                        this.BacksightField = XTypedList<Backsight>.Initialize(this, LinqToXsdTypeManager.Instance, value, BacksightXName);
                    }
                    else {
                        XTypedServices.SetList<Backsight>(this.BacksightField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((InstrumentPoint? | Backsight* | TargetSetup* | RawObservation* | ObservationGroup* | ControlChecks* | FieldNote* | Feature*)*)
        /// </para>
        /// </summary>
        public virtual IList<TargetSetup> TargetSetup {
            get {
                if ((this.TargetSetupField == null)) {
                    this.TargetSetupField = new XTypedList<TargetSetup>(this, LinqToXsdTypeManager.Instance, TargetSetupXName);
                }
                return this.TargetSetupField;
            }
            set {
                if ((value == null)) {
                    this.TargetSetupField = null;
                }
                else {
                    if ((this.TargetSetupField == null)) {
                        this.TargetSetupField = XTypedList<TargetSetup>.Initialize(this, LinqToXsdTypeManager.Instance, value, TargetSetupXName);
                    }
                    else {
                        XTypedServices.SetList<TargetSetup>(this.TargetSetupField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((InstrumentPoint? | Backsight* | TargetSetup* | RawObservation* | ObservationGroup* | ControlChecks* | FieldNote* | Feature*)*)
        /// </para>
        /// </summary>
        public virtual IList<RawObservation> RawObservation {
            get {
                if ((this.RawObservationField == null)) {
                    this.RawObservationField = new XTypedList<RawObservation>(this, LinqToXsdTypeManager.Instance, RawObservationXName);
                }
                return this.RawObservationField;
            }
            set {
                if ((value == null)) {
                    this.RawObservationField = null;
                }
                else {
                    if ((this.RawObservationField == null)) {
                        this.RawObservationField = XTypedList<RawObservation>.Initialize(this, LinqToXsdTypeManager.Instance, value, RawObservationXName);
                    }
                    else {
                        XTypedServices.SetList<RawObservation>(this.RawObservationField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((InstrumentPoint? | Backsight* | TargetSetup* | RawObservation* | ObservationGroup* | ControlChecks* | FieldNote* | Feature*)*)
        /// </para>
        /// </summary>
        public virtual IList<ObservationGroup> ObservationGroup {
            get {
                if ((this.ObservationGroupField == null)) {
                    this.ObservationGroupField = new XTypedList<ObservationGroup>(this, LinqToXsdTypeManager.Instance, ObservationGroupXName);
                }
                return this.ObservationGroupField;
            }
            set {
                if ((value == null)) {
                    this.ObservationGroupField = null;
                }
                else {
                    if ((this.ObservationGroupField == null)) {
                        this.ObservationGroupField = XTypedList<ObservationGroup>.Initialize(this, LinqToXsdTypeManager.Instance, value, ObservationGroupXName);
                    }
                    else {
                        XTypedServices.SetList<ObservationGroup>(this.ObservationGroupField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((InstrumentPoint? | Backsight* | TargetSetup* | RawObservation* | ObservationGroup* | ControlChecks* | FieldNote* | Feature*)*)
        /// </para>
        /// </summary>
        public virtual IList<ControlChecks> ControlChecks {
            get {
                if ((this.ControlChecksField == null)) {
                    this.ControlChecksField = new XTypedList<ControlChecks>(this, LinqToXsdTypeManager.Instance, ControlChecksXName);
                }
                return this.ControlChecksField;
            }
            set {
                if ((value == null)) {
                    this.ControlChecksField = null;
                }
                else {
                    if ((this.ControlChecksField == null)) {
                        this.ControlChecksField = XTypedList<ControlChecks>.Initialize(this, LinqToXsdTypeManager.Instance, value, ControlChecksXName);
                    }
                    else {
                        XTypedServices.SetList<ControlChecks>(this.ControlChecksField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((InstrumentPoint? | Backsight* | TargetSetup* | RawObservation* | ObservationGroup* | ControlChecks* | FieldNote* | Feature*)*)
        /// </para>
        /// </summary>
        public virtual IList<FieldNote> FieldNote {
            get {
                if ((this.FieldNoteField == null)) {
                    this.FieldNoteField = new XTypedList<FieldNote>(this, LinqToXsdTypeManager.Instance, FieldNoteXName);
                }
                return this.FieldNoteField;
            }
            set {
                if ((value == null)) {
                    this.FieldNoteField = null;
                }
                else {
                    if ((this.FieldNoteField == null)) {
                        this.FieldNoteField = XTypedList<FieldNote>.Initialize(this, LinqToXsdTypeManager.Instance, value, FieldNoteXName);
                    }
                    else {
                        XTypedServices.SetList<FieldNote>(this.FieldNoteField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((InstrumentPoint? | Backsight* | TargetSetup* | RawObservation* | ObservationGroup* | ControlChecks* | FieldNote* | Feature*)*)
        /// </para>
        /// </summary>
        public virtual IList<Feature> Feature {
            get {
                if ((this.FeatureField == null)) {
                    this.FeatureField = new XTypedList<Feature>(this, LinqToXsdTypeManager.Instance, FeatureXName);
                }
                return this.FeatureField;
            }
            set {
                if ((value == null)) {
                    this.FeatureField = null;
                }
                else {
                    if ((this.FeatureField == null)) {
                        this.FeatureField = XTypedList<Feature>.Initialize(this, LinqToXsdTypeManager.Instance, value, FeatureXName);
                    }
                    else {
                        XTypedServices.SetList<Feature>(this.FeatureField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(idXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(idXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string instrumentDetailsID {
            get {
                XAttribute x = this.Attribute(instrumentDetailsIDXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Idref).Datatype);
            }
            set {
                this.SetAttribute(instrumentDetailsIDXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Idref).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual string stationName {
            get {
                XAttribute x = this.Attribute(stationNameXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(stationNameXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual double instrumentHeight {
            get {
                XAttribute x = this.Attribute(instrumentHeightXName);
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetAttribute(instrumentHeightXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Double? orientationAzimuth {
            get {
                XAttribute x = this.Attribute(orientationAzimuthXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetAttribute(orientationAzimuthXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Double? circleAzimuth {
            get {
                XAttribute x = this.Attribute(circleAzimuthXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetAttribute(circleAzimuthXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual LandXml.v1_2.observationStatusType? status {
            get {
                XAttribute x = this.Attribute(statusXName);
                if ((x == null)) {
                    return null;
                }
                return ((LandXml.v1_2.observationStatusType)(Enum.Parse(typeof(LandXml.v1_2.observationStatusType), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetAttribute(statusXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static InstrumentSetup Load(string xmlFile) {
            return XTypedServices.Load<InstrumentSetup>(xmlFile);
        }
        
        public static InstrumentSetup Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<InstrumentSetup>(xmlFile);
        }
        
        public static InstrumentSetup Parse(string xml) {
            return XTypedServices.Parse<InstrumentSetup>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<InstrumentSetup>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(InstrumentPointXName, typeof(InstrumentPoint));
            localElementDictionary.Add(BacksightXName, typeof(Backsight));
            localElementDictionary.Add(TargetSetupXName, typeof(TargetSetup));
            localElementDictionary.Add(RawObservationXName, typeof(RawObservation));
            localElementDictionary.Add(ObservationGroupXName, typeof(ObservationGroup));
            localElementDictionary.Add(ControlChecksXName, typeof(ControlChecks));
            localElementDictionary.Add(FieldNoteXName, typeof(FieldNote));
            localElementDictionary.Add(FeatureXName, typeof(Feature));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (InstrumentPoint? | Backsight? | TargetSetup* | RawObservation | FieldNote* | Feature*)*
    /// </para>
    /// </summary>
    public partial class LaserSetup : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName InstrumentPointXName = System.Xml.Linq.XName.Get("InstrumentPoint", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<InstrumentPoint> InstrumentPointField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName BacksightXName = System.Xml.Linq.XName.Get("Backsight", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<Backsight> BacksightField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TargetSetupXName = System.Xml.Linq.XName.Get("TargetSetup", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<TargetSetup> TargetSetupField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName RawObservationXName = System.Xml.Linq.XName.Get("RawObservation", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<RawObservation> RawObservationField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName FieldNoteXName = System.Xml.Linq.XName.Get("FieldNote", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<FieldNote> FieldNoteField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName FeatureXName = System.Xml.Linq.XName.Get("Feature", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<Feature> FeatureField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName idXName = System.Xml.Linq.XName.Get("id", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName stationNameXName = System.Xml.Linq.XName.Get("stationName", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName instrumentHeightXName = System.Xml.Linq.XName.Get("instrumentHeight", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName laserDetailsIDXName = System.Xml.Linq.XName.Get("laserDetailsID", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName magDeclinationXName = System.Xml.Linq.XName.Get("magDeclination", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("LaserSetup", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator LaserSetup(XElement xe) { return XTypedServices.ToXTypedElement<LaserSetup>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static LaserSetup() {
            BuildElementDictionary();
            contentModel = new ChoiceContentModelEntity(new NamedContentModelEntity(InstrumentPointXName), new NamedContentModelEntity(BacksightXName), new NamedContentModelEntity(TargetSetupXName), new NamedContentModelEntity(RawObservationXName), new NamedContentModelEntity(FieldNoteXName), new NamedContentModelEntity(FeatureXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (InstrumentPoint? | Backsight? | TargetSetup* | RawObservation | FieldNote* | Feature*)*
        /// </para>
        /// </summary>
        public LaserSetup() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, choice
        /// </para>
        /// <para>
        /// Regular expression: (InstrumentPoint? | Backsight? | TargetSetup* | RawObservation | FieldNote* | Feature*)*
        /// </para>
        /// </summary>
        public virtual IList<InstrumentPoint> InstrumentPoint {
            get {
                if ((this.InstrumentPointField == null)) {
                    this.InstrumentPointField = new XTypedList<InstrumentPoint>(this, LinqToXsdTypeManager.Instance, InstrumentPointXName);
                }
                return this.InstrumentPointField;
            }
            set {
                if ((value == null)) {
                    this.InstrumentPointField = null;
                }
                else {
                    if ((this.InstrumentPointField == null)) {
                        this.InstrumentPointField = XTypedList<InstrumentPoint>.Initialize(this, LinqToXsdTypeManager.Instance, value, InstrumentPointXName);
                    }
                    else {
                        XTypedServices.SetList<InstrumentPoint>(this.InstrumentPointField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, choice
        /// </para>
        /// <para>
        /// Regular expression: (InstrumentPoint? | Backsight? | TargetSetup* | RawObservation | FieldNote* | Feature*)*
        /// </para>
        /// </summary>
        public virtual IList<Backsight> Backsight {
            get {
                if ((this.BacksightField == null)) {
                    this.BacksightField = new XTypedList<Backsight>(this, LinqToXsdTypeManager.Instance, BacksightXName);
                }
                return this.BacksightField;
            }
            set {
                if ((value == null)) {
                    this.BacksightField = null;
                }
                else {
                    if ((this.BacksightField == null)) {
                        this.BacksightField = XTypedList<Backsight>.Initialize(this, LinqToXsdTypeManager.Instance, value, BacksightXName);
                    }
                    else {
                        XTypedServices.SetList<Backsight>(this.BacksightField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating, choice
        /// </para>
        /// <para>
        /// Regular expression: (InstrumentPoint? | Backsight? | TargetSetup* | RawObservation | FieldNote* | Feature*)*
        /// </para>
        /// </summary>
        public virtual IList<TargetSetup> TargetSetup {
            get {
                if ((this.TargetSetupField == null)) {
                    this.TargetSetupField = new XTypedList<TargetSetup>(this, LinqToXsdTypeManager.Instance, TargetSetupXName);
                }
                return this.TargetSetupField;
            }
            set {
                if ((value == null)) {
                    this.TargetSetupField = null;
                }
                else {
                    if ((this.TargetSetupField == null)) {
                        this.TargetSetupField = XTypedList<TargetSetup>.Initialize(this, LinqToXsdTypeManager.Instance, value, TargetSetupXName);
                    }
                    else {
                        XTypedServices.SetList<TargetSetup>(this.TargetSetupField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (InstrumentPoint? | Backsight? | TargetSetup* | RawObservation | FieldNote* | Feature*)*
        /// </para>
        /// </summary>
        public virtual IList<RawObservation> RawObservation {
            get {
                if ((this.RawObservationField == null)) {
                    this.RawObservationField = new XTypedList<RawObservation>(this, LinqToXsdTypeManager.Instance, RawObservationXName);
                }
                return this.RawObservationField;
            }
            set {
                if ((value == null)) {
                    this.RawObservationField = null;
                }
                else {
                    if ((this.RawObservationField == null)) {
                        this.RawObservationField = XTypedList<RawObservation>.Initialize(this, LinqToXsdTypeManager.Instance, value, RawObservationXName);
                    }
                    else {
                        XTypedServices.SetList<RawObservation>(this.RawObservationField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating, choice
        /// </para>
        /// <para>
        /// Regular expression: (InstrumentPoint? | Backsight? | TargetSetup* | RawObservation | FieldNote* | Feature*)*
        /// </para>
        /// </summary>
        public virtual IList<FieldNote> FieldNote {
            get {
                if ((this.FieldNoteField == null)) {
                    this.FieldNoteField = new XTypedList<FieldNote>(this, LinqToXsdTypeManager.Instance, FieldNoteXName);
                }
                return this.FieldNoteField;
            }
            set {
                if ((value == null)) {
                    this.FieldNoteField = null;
                }
                else {
                    if ((this.FieldNoteField == null)) {
                        this.FieldNoteField = XTypedList<FieldNote>.Initialize(this, LinqToXsdTypeManager.Instance, value, FieldNoteXName);
                    }
                    else {
                        XTypedServices.SetList<FieldNote>(this.FieldNoteField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating, choice
        /// </para>
        /// <para>
        /// Regular expression: (InstrumentPoint? | Backsight? | TargetSetup* | RawObservation | FieldNote* | Feature*)*
        /// </para>
        /// </summary>
        public virtual IList<Feature> Feature {
            get {
                if ((this.FeatureField == null)) {
                    this.FeatureField = new XTypedList<Feature>(this, LinqToXsdTypeManager.Instance, FeatureXName);
                }
                return this.FeatureField;
            }
            set {
                if ((value == null)) {
                    this.FeatureField = null;
                }
                else {
                    if ((this.FeatureField == null)) {
                        this.FeatureField = XTypedList<Feature>.Initialize(this, LinqToXsdTypeManager.Instance, value, FeatureXName);
                    }
                    else {
                        XTypedServices.SetList<Feature>(this.FeatureField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(idXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(idXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual string stationName {
            get {
                XAttribute x = this.Attribute(stationNameXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(stationNameXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Double? instrumentHeight {
            get {
                XAttribute x = this.Attribute(instrumentHeightXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetAttribute(instrumentHeightXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string laserDetailsID {
            get {
                XAttribute x = this.Attribute(laserDetailsIDXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Idref).Datatype);
            }
            set {
                this.SetAttribute(laserDetailsIDXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Idref).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Double? magDeclination {
            get {
                XAttribute x = this.Attribute(magDeclinationXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetAttribute(magDeclinationXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static LaserSetup Load(string xmlFile) {
            return XTypedServices.Load<LaserSetup>(xmlFile);
        }
        
        public static LaserSetup Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<LaserSetup>(xmlFile);
        }
        
        public static LaserSetup Parse(string xml) {
            return XTypedServices.Parse<LaserSetup>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<LaserSetup>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(InstrumentPointXName, typeof(InstrumentPoint));
            localElementDictionary.Add(BacksightXName, typeof(Backsight));
            localElementDictionary.Add(TargetSetupXName, typeof(TargetSetup));
            localElementDictionary.Add(RawObservationXName, typeof(RawObservation));
            localElementDictionary.Add(FieldNoteXName, typeof(FieldNote));
            localElementDictionary.Add(FeatureXName, typeof(Feature));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: ((TargetSetup* | GPSPosition | FieldNote* | Feature*)*)
    /// </para>
    /// </summary>
    public partial class GPSSetup : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TargetSetupXName = System.Xml.Linq.XName.Get("TargetSetup", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<TargetSetup> TargetSetupField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName GPSPositionXName = System.Xml.Linq.XName.Get("GPSPosition", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<GPSPosition> GPSPositionField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName FieldNoteXName = System.Xml.Linq.XName.Get("FieldNote", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<FieldNote> FieldNoteField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName FeatureXName = System.Xml.Linq.XName.Get("Feature", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<Feature> FeatureField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName idXName = System.Xml.Linq.XName.Get("id", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName antennaHeightXName = System.Xml.Linq.XName.Get("antennaHeight", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName stationNameXName = System.Xml.Linq.XName.Get("stationName", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName GPSAntennaDetailsIDXName = System.Xml.Linq.XName.Get("GPSAntennaDetailsID", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName GPSReceiverDetailsIDXName = System.Xml.Linq.XName.Get("GPSReceiverDetailsID", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName observationDataLinkXName = System.Xml.Linq.XName.Get("observationDataLink", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName stationDescriptionXName = System.Xml.Linq.XName.Get("stationDescription", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName startTimeXName = System.Xml.Linq.XName.Get("startTime", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName stopTimeXName = System.Xml.Linq.XName.Get("stopTime", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("GPSSetup", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator GPSSetup(XElement xe) { return XTypedServices.ToXTypedElement<GPSSetup>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static GPSSetup() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new ChoiceContentModelEntity(new NamedContentModelEntity(TargetSetupXName), new NamedContentModelEntity(GPSPositionXName), new NamedContentModelEntity(FieldNoteXName), new NamedContentModelEntity(FeatureXName)));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: ((TargetSetup* | GPSPosition | FieldNote* | Feature*)*)
        /// </para>
        /// </summary>
        public GPSSetup() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((TargetSetup* | GPSPosition | FieldNote* | Feature*)*)
        /// </para>
        /// </summary>
        public virtual IList<TargetSetup> TargetSetup {
            get {
                if ((this.TargetSetupField == null)) {
                    this.TargetSetupField = new XTypedList<TargetSetup>(this, LinqToXsdTypeManager.Instance, TargetSetupXName);
                }
                return this.TargetSetupField;
            }
            set {
                if ((value == null)) {
                    this.TargetSetupField = null;
                }
                else {
                    if ((this.TargetSetupField == null)) {
                        this.TargetSetupField = XTypedList<TargetSetup>.Initialize(this, LinqToXsdTypeManager.Instance, value, TargetSetupXName);
                    }
                    else {
                        XTypedServices.SetList<TargetSetup>(this.TargetSetupField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((TargetSetup* | GPSPosition | FieldNote* | Feature*)*)
        /// </para>
        /// </summary>
        public virtual IList<GPSPosition> GPSPosition {
            get {
                if ((this.GPSPositionField == null)) {
                    this.GPSPositionField = new XTypedList<GPSPosition>(this, LinqToXsdTypeManager.Instance, GPSPositionXName);
                }
                return this.GPSPositionField;
            }
            set {
                if ((value == null)) {
                    this.GPSPositionField = null;
                }
                else {
                    if ((this.GPSPositionField == null)) {
                        this.GPSPositionField = XTypedList<GPSPosition>.Initialize(this, LinqToXsdTypeManager.Instance, value, GPSPositionXName);
                    }
                    else {
                        XTypedServices.SetList<GPSPosition>(this.GPSPositionField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((TargetSetup* | GPSPosition | FieldNote* | Feature*)*)
        /// </para>
        /// </summary>
        public virtual IList<FieldNote> FieldNote {
            get {
                if ((this.FieldNoteField == null)) {
                    this.FieldNoteField = new XTypedList<FieldNote>(this, LinqToXsdTypeManager.Instance, FieldNoteXName);
                }
                return this.FieldNoteField;
            }
            set {
                if ((value == null)) {
                    this.FieldNoteField = null;
                }
                else {
                    if ((this.FieldNoteField == null)) {
                        this.FieldNoteField = XTypedList<FieldNote>.Initialize(this, LinqToXsdTypeManager.Instance, value, FieldNoteXName);
                    }
                    else {
                        XTypedServices.SetList<FieldNote>(this.FieldNoteField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((TargetSetup* | GPSPosition | FieldNote* | Feature*)*)
        /// </para>
        /// </summary>
        public virtual IList<Feature> Feature {
            get {
                if ((this.FeatureField == null)) {
                    this.FeatureField = new XTypedList<Feature>(this, LinqToXsdTypeManager.Instance, FeatureXName);
                }
                return this.FeatureField;
            }
            set {
                if ((value == null)) {
                    this.FeatureField = null;
                }
                else {
                    if ((this.FeatureField == null)) {
                        this.FeatureField = XTypedList<Feature>.Initialize(this, LinqToXsdTypeManager.Instance, value, FeatureXName);
                    }
                    else {
                        XTypedServices.SetList<Feature>(this.FeatureField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(idXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(idXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual double antennaHeight {
            get {
                XAttribute x = this.Attribute(antennaHeightXName);
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetAttribute(antennaHeightXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual string stationName {
            get {
                XAttribute x = this.Attribute(stationNameXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(stationNameXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string GPSAntennaDetailsID {
            get {
                XAttribute x = this.Attribute(GPSAntennaDetailsIDXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Idref).Datatype);
            }
            set {
                this.SetAttribute(GPSAntennaDetailsIDXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Idref).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string GPSReceiverDetailsID {
            get {
                XAttribute x = this.Attribute(GPSReceiverDetailsIDXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Idref).Datatype);
            }
            set {
                this.SetAttribute(GPSReceiverDetailsIDXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Idref).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string observationDataLink {
            get {
                XAttribute x = this.Attribute(observationDataLinkXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(observationDataLinkXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string stationDescription {
            get {
                XAttribute x = this.Attribute(stationDescriptionXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(stationDescriptionXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Double? startTime {
            get {
                XAttribute x = this.Attribute(startTimeXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetAttribute(startTimeXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Double? stopTime {
            get {
                XAttribute x = this.Attribute(stopTimeXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetAttribute(stopTimeXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static GPSSetup Load(string xmlFile) {
            return XTypedServices.Load<GPSSetup>(xmlFile);
        }
        
        public static GPSSetup Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<GPSSetup>(xmlFile);
        }
        
        public static GPSSetup Parse(string xml) {
            return XTypedServices.Parse<GPSSetup>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<GPSSetup>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(TargetSetupXName, typeof(TargetSetup));
            localElementDictionary.Add(GPSPositionXName, typeof(GPSPosition));
            localElementDictionary.Add(FieldNoteXName, typeof(FieldNote));
            localElementDictionary.Add(FeatureXName, typeof(Feature));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: ((FieldNote* | Feature*)*)
    /// </para>
    /// </summary>
    public partial class TargetSetup : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName FieldNoteXName = System.Xml.Linq.XName.Get("FieldNote", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<FieldNote> FieldNoteField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName FeatureXName = System.Xml.Linq.XName.Get("Feature", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<Feature> FeatureField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName idXName = System.Xml.Linq.XName.Get("id", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName targetHeightXName = System.Xml.Linq.XName.Get("targetHeight", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName edmTargetVertOffsetXName = System.Xml.Linq.XName.Get("edmTargetVertOffset", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName prismConstantXName = System.Xml.Linq.XName.Get("prismConstant", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("TargetSetup", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator TargetSetup(XElement xe) { return XTypedServices.ToXTypedElement<TargetSetup>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static TargetSetup() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new ChoiceContentModelEntity(new NamedContentModelEntity(FieldNoteXName), new NamedContentModelEntity(FeatureXName)));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: ((FieldNote* | Feature*)*)
        /// </para>
        /// </summary>
        public TargetSetup() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((FieldNote* | Feature*)*)
        /// </para>
        /// </summary>
        public virtual IList<FieldNote> FieldNote {
            get {
                if ((this.FieldNoteField == null)) {
                    this.FieldNoteField = new XTypedList<FieldNote>(this, LinqToXsdTypeManager.Instance, FieldNoteXName);
                }
                return this.FieldNoteField;
            }
            set {
                if ((value == null)) {
                    this.FieldNoteField = null;
                }
                else {
                    if ((this.FieldNoteField == null)) {
                        this.FieldNoteField = XTypedList<FieldNote>.Initialize(this, LinqToXsdTypeManager.Instance, value, FieldNoteXName);
                    }
                    else {
                        XTypedServices.SetList<FieldNote>(this.FieldNoteField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((FieldNote* | Feature*)*)
        /// </para>
        /// </summary>
        public virtual IList<Feature> Feature {
            get {
                if ((this.FeatureField == null)) {
                    this.FeatureField = new XTypedList<Feature>(this, LinqToXsdTypeManager.Instance, FeatureXName);
                }
                return this.FeatureField;
            }
            set {
                if ((value == null)) {
                    this.FeatureField = null;
                }
                else {
                    if ((this.FeatureField == null)) {
                        this.FeatureField = XTypedList<Feature>.Initialize(this, LinqToXsdTypeManager.Instance, value, FeatureXName);
                    }
                    else {
                        XTypedServices.SetList<Feature>(this.FeatureField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(idXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(idXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Double? targetHeight {
            get {
                XAttribute x = this.Attribute(targetHeightXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetAttribute(targetHeightXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Double? edmTargetVertOffset {
            get {
                XAttribute x = this.Attribute(edmTargetVertOffsetXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetAttribute(edmTargetVertOffsetXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Double? prismConstant {
            get {
                XAttribute x = this.Attribute(prismConstantXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetAttribute(prismConstantXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static TargetSetup Load(string xmlFile) {
            return XTypedServices.Load<TargetSetup>(xmlFile);
        }
        
        public static TargetSetup Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<TargetSetup>(xmlFile);
        }
        
        public static TargetSetup Parse(string xml) {
            return XTypedServices.Parse<TargetSetup>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<TargetSetup>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(FieldNoteXName, typeof(FieldNote));
            localElementDictionary.Add(FeatureXName, typeof(Feature));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (BacksightPoint?, (FieldNote* | Feature*))
    /// </para>
    /// </summary>
    public partial class Backsight : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName BacksightPointXName = System.Xml.Linq.XName.Get("BacksightPoint", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName FieldNoteXName = System.Xml.Linq.XName.Get("FieldNote", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<FieldNote> FieldNoteField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName FeatureXName = System.Xml.Linq.XName.Get("Feature", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<Feature> FeatureField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName idXName = System.Xml.Linq.XName.Get("id", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName azimuthXName = System.Xml.Linq.XName.Get("azimuth", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName targetHeightXName = System.Xml.Linq.XName.Get("targetHeight", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName circleXName = System.Xml.Linq.XName.Get("circle", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName setupIDXName = System.Xml.Linq.XName.Get("setupID", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("Backsight", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator Backsight(XElement xe) { return XTypedServices.ToXTypedElement<Backsight>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static Backsight() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(BacksightPointXName), new ChoiceContentModelEntity(new NamedContentModelEntity(FieldNoteXName), new NamedContentModelEntity(FeatureXName)));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (BacksightPoint?, (FieldNote* | Feature*))
        /// </para>
        /// </summary>
        public Backsight() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (BacksightPoint?, (FieldNote* | Feature*))
        /// </para>
        /// </summary>
        public virtual BacksightPoint BacksightPoint {
            get {
                XElement x = this.GetElement(BacksightPointXName);
                return ((BacksightPoint)(x));
            }
            set {
                this.SetElement(BacksightPointXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (BacksightPoint?, (FieldNote* | Feature*))
        /// </para>
        /// </summary>
        public virtual IList<FieldNote> FieldNote {
            get {
                if ((this.FieldNoteField == null)) {
                    this.FieldNoteField = new XTypedList<FieldNote>(this, LinqToXsdTypeManager.Instance, FieldNoteXName);
                }
                return this.FieldNoteField;
            }
            set {
                if ((value == null)) {
                    this.FieldNoteField = null;
                }
                else {
                    if ((this.FieldNoteField == null)) {
                        this.FieldNoteField = XTypedList<FieldNote>.Initialize(this, LinqToXsdTypeManager.Instance, value, FieldNoteXName);
                    }
                    else {
                        XTypedServices.SetList<FieldNote>(this.FieldNoteField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (BacksightPoint?, (FieldNote* | Feature*))
        /// </para>
        /// </summary>
        public virtual IList<Feature> Feature {
            get {
                if ((this.FeatureField == null)) {
                    this.FeatureField = new XTypedList<Feature>(this, LinqToXsdTypeManager.Instance, FeatureXName);
                }
                return this.FeatureField;
            }
            set {
                if ((value == null)) {
                    this.FeatureField = null;
                }
                else {
                    if ((this.FeatureField == null)) {
                        this.FeatureField = XTypedList<Feature>.Initialize(this, LinqToXsdTypeManager.Instance, value, FeatureXName);
                    }
                    else {
                        XTypedServices.SetList<Feature>(this.FeatureField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(idXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(idXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Double? azimuth {
            get {
                XAttribute x = this.Attribute(azimuthXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetAttribute(azimuthXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Double? targetHeight {
            get {
                XAttribute x = this.Attribute(targetHeightXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetAttribute(targetHeightXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual double circle {
            get {
                XAttribute x = this.Attribute(circleXName);
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetAttribute(circleXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string setupID {
            get {
                XAttribute x = this.Attribute(setupIDXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Idref).Datatype);
            }
            set {
                this.SetAttribute(setupIDXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Idref).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static Backsight Load(string xmlFile) {
            return XTypedServices.Load<Backsight>(xmlFile);
        }
        
        public static Backsight Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<Backsight>(xmlFile);
        }
        
        public static Backsight Parse(string xml) {
            return XTypedServices.Parse<Backsight>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<Backsight>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(BacksightPointXName, typeof(BacksightPoint));
            localElementDictionary.Add(FieldNoteXName, typeof(FieldNote));
            localElementDictionary.Add(FeatureXName, typeof(Feature));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (TargetPoint, OffsetVals?, (FieldNote* | Feature*)*)
    /// </para>
    /// </summary>
    public partial class RawObservation : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TargetPointXName = System.Xml.Linq.XName.Get("TargetPoint", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName OffsetValsXName = System.Xml.Linq.XName.Get("OffsetVals", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName FieldNoteXName = System.Xml.Linq.XName.Get("FieldNote", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<FieldNote> FieldNoteField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName FeatureXName = System.Xml.Linq.XName.Get("Feature", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<Feature> FeatureField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName setupIDXName = System.Xml.Linq.XName.Get("setupID", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName targetSetupIDXName = System.Xml.Linq.XName.Get("targetSetupID", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName setIDXName = System.Xml.Linq.XName.Get("setID", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName purposeXName = System.Xml.Linq.XName.Get("purpose", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName targetHeightXName = System.Xml.Linq.XName.Get("targetHeight", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName horizAngleXName = System.Xml.Linq.XName.Get("horizAngle", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName slopeDistanceXName = System.Xml.Linq.XName.Get("slopeDistance", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName zenithAngleXName = System.Xml.Linq.XName.Get("zenithAngle", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName horizDistanceXName = System.Xml.Linq.XName.Get("horizDistance", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName vertDistanceXName = System.Xml.Linq.XName.Get("vertDistance", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName azimuthXName = System.Xml.Linq.XName.Get("azimuth", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName unusedXName = System.Xml.Linq.XName.Get("unused", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName directFaceXName = System.Xml.Linq.XName.Get("directFace", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName coordGeomRefsXName = System.Xml.Linq.XName.Get("coordGeomRefs", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName timeStampXName = System.Xml.Linq.XName.Get("timeStamp", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName alignRefXName = System.Xml.Linq.XName.Get("alignRef", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName alignStationNameXName = System.Xml.Linq.XName.Get("alignStationName", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName alignOffsetXName = System.Xml.Linq.XName.Get("alignOffset", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName upperStadiaXName = System.Xml.Linq.XName.Get("upperStadia", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName rodXName = System.Xml.Linq.XName.Get("rod", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName lowerStadiaXName = System.Xml.Linq.XName.Get("lowerStadia", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName circlePositionSetXName = System.Xml.Linq.XName.Get("circlePositionSet", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName statusXName = System.Xml.Linq.XName.Get("status", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("RawObservation", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator RawObservation(XElement xe) { return XTypedServices.ToXTypedElement<RawObservation>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static RawObservation() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(TargetPointXName), new NamedContentModelEntity(OffsetValsXName), new ChoiceContentModelEntity(new NamedContentModelEntity(FieldNoteXName), new NamedContentModelEntity(FeatureXName)));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (TargetPoint, OffsetVals?, (FieldNote* | Feature*)*)
        /// </para>
        /// </summary>
        public RawObservation() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (TargetPoint, OffsetVals?, (FieldNote* | Feature*)*)
        /// </para>
        /// </summary>
        public virtual TargetPoint TargetPoint {
            get {
                XElement x = this.GetElement(TargetPointXName);
                return ((TargetPoint)(x));
            }
            set {
                this.SetElement(TargetPointXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (TargetPoint, OffsetVals?, (FieldNote* | Feature*)*)
        /// </para>
        /// </summary>
        public virtual OffsetVals OffsetVals {
            get {
                XElement x = this.GetElement(OffsetValsXName);
                return ((OffsetVals)(x));
            }
            set {
                this.SetElement(OffsetValsXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (TargetPoint, OffsetVals?, (FieldNote* | Feature*)*)
        /// </para>
        /// </summary>
        public virtual IList<FieldNote> FieldNote {
            get {
                if ((this.FieldNoteField == null)) {
                    this.FieldNoteField = new XTypedList<FieldNote>(this, LinqToXsdTypeManager.Instance, FieldNoteXName);
                }
                return this.FieldNoteField;
            }
            set {
                if ((value == null)) {
                    this.FieldNoteField = null;
                }
                else {
                    if ((this.FieldNoteField == null)) {
                        this.FieldNoteField = XTypedList<FieldNote>.Initialize(this, LinqToXsdTypeManager.Instance, value, FieldNoteXName);
                    }
                    else {
                        XTypedServices.SetList<FieldNote>(this.FieldNoteField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (TargetPoint, OffsetVals?, (FieldNote* | Feature*)*)
        /// </para>
        /// </summary>
        public virtual IList<Feature> Feature {
            get {
                if ((this.FeatureField == null)) {
                    this.FeatureField = new XTypedList<Feature>(this, LinqToXsdTypeManager.Instance, FeatureXName);
                }
                return this.FeatureField;
            }
            set {
                if ((value == null)) {
                    this.FeatureField = null;
                }
                else {
                    if ((this.FeatureField == null)) {
                        this.FeatureField = XTypedList<Feature>.Initialize(this, LinqToXsdTypeManager.Instance, value, FeatureXName);
                    }
                    else {
                        XTypedServices.SetList<Feature>(this.FeatureField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string setupID {
            get {
                XAttribute x = this.Attribute(setupIDXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Idref).Datatype);
            }
            set {
                this.SetAttribute(setupIDXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Idref).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string targetSetupID {
            get {
                XAttribute x = this.Attribute(targetSetupIDXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Idref).Datatype);
            }
            set {
                this.SetAttribute(targetSetupIDXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Idref).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string setID {
            get {
                XAttribute x = this.Attribute(setIDXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(setIDXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual LandXml.v1_2.purposeType? purpose {
            get {
                XAttribute x = this.Attribute(purposeXName);
                if ((x == null)) {
                    return null;
                }
                return ((LandXml.v1_2.purposeType)(Enum.Parse(typeof(LandXml.v1_2.purposeType), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetAttribute(purposeXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Double? targetHeight {
            get {
                XAttribute x = this.Attribute(targetHeightXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetAttribute(targetHeightXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Double? horizAngle {
            get {
                XAttribute x = this.Attribute(horizAngleXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetAttribute(horizAngleXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Double? slopeDistance {
            get {
                XAttribute x = this.Attribute(slopeDistanceXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetAttribute(slopeDistanceXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Double? zenithAngle {
            get {
                XAttribute x = this.Attribute(zenithAngleXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetAttribute(zenithAngleXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Double? horizDistance {
            get {
                XAttribute x = this.Attribute(horizDistanceXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetAttribute(horizDistanceXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Double? vertDistance {
            get {
                XAttribute x = this.Attribute(vertDistanceXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetAttribute(vertDistanceXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Double? azimuth {
            get {
                XAttribute x = this.Attribute(azimuthXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetAttribute(azimuthXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Boolean? unused {
            get {
                XAttribute x = this.Attribute(unusedXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
            set {
                this.SetAttribute(unusedXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Boolean? directFace {
            get {
                XAttribute x = this.Attribute(directFaceXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
            set {
                this.SetAttribute(directFaceXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual IList<string> coordGeomRefs {
            get {
                XAttribute x = this.Attribute(coordGeomRefsXName);
                return XTypedServices.ParseListValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetListAttribute(coordGeomRefsXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.DateTime? timeStamp {
            get {
                XAttribute x = this.Attribute(timeStampXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<System.DateTime>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.DateTime).Datatype);
            }
            set {
                this.SetAttribute(timeStampXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.DateTime).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string alignRef {
            get {
                XAttribute x = this.Attribute(alignRefXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(alignRefXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string alignStationName {
            get {
                XAttribute x = this.Attribute(alignStationNameXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(alignStationNameXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Double? alignOffset {
            get {
                XAttribute x = this.Attribute(alignOffsetXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetAttribute(alignOffsetXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Double? upperStadia {
            get {
                XAttribute x = this.Attribute(upperStadiaXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetAttribute(upperStadiaXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Double? rod {
            get {
                XAttribute x = this.Attribute(rodXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetAttribute(rodXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Double? lowerStadia {
            get {
                XAttribute x = this.Attribute(lowerStadiaXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetAttribute(lowerStadiaXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Double? circlePositionSet {
            get {
                XAttribute x = this.Attribute(circlePositionSetXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetAttribute(circlePositionSetXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual LandXml.v1_2.observationStatusType? status {
            get {
                XAttribute x = this.Attribute(statusXName);
                if ((x == null)) {
                    return null;
                }
                return ((LandXml.v1_2.observationStatusType)(Enum.Parse(typeof(LandXml.v1_2.observationStatusType), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetAttribute(statusXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static RawObservation Load(string xmlFile) {
            return XTypedServices.Load<RawObservation>(xmlFile);
        }
        
        public static RawObservation Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<RawObservation>(xmlFile);
        }
        
        public static RawObservation Parse(string xml) {
            return XTypedServices.Parse<RawObservation>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<RawObservation>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(TargetPointXName, typeof(TargetPoint));
            localElementDictionary.Add(OffsetValsXName, typeof(OffsetVals));
            localElementDictionary.Add(FieldNoteXName, typeof(FieldNote));
            localElementDictionary.Add(FeatureXName, typeof(Feature));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (TargetPoint, OffsetVals?, (FieldNote* | Feature*)*)
    /// </para>
    /// </summary>
    public partial class TestObservation : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TargetPointXName = System.Xml.Linq.XName.Get("TargetPoint", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName OffsetValsXName = System.Xml.Linq.XName.Get("OffsetVals", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName FieldNoteXName = System.Xml.Linq.XName.Get("FieldNote", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<FieldNote> FieldNoteField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName FeatureXName = System.Xml.Linq.XName.Get("Feature", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<Feature> FeatureField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName setup1RodAXName = System.Xml.Linq.XName.Get("setup1RodA", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName setup1RodBXName = System.Xml.Linq.XName.Get("setup1RodB", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName setup2RodAXName = System.Xml.Linq.XName.Get("setup2RodA", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName setup2RodBXName = System.Xml.Linq.XName.Get("setup2RodB", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName setupIDXName = System.Xml.Linq.XName.Get("setupID", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName targetSetupIDXName = System.Xml.Linq.XName.Get("targetSetupID", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName setIDXName = System.Xml.Linq.XName.Get("setID", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName purposeXName = System.Xml.Linq.XName.Get("purpose", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName targetHeightXName = System.Xml.Linq.XName.Get("targetHeight", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName horizAngleXName = System.Xml.Linq.XName.Get("horizAngle", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName slopeDistanceXName = System.Xml.Linq.XName.Get("slopeDistance", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName zenithAngleXName = System.Xml.Linq.XName.Get("zenithAngle", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName horizDistanceXName = System.Xml.Linq.XName.Get("horizDistance", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName vertDistanceXName = System.Xml.Linq.XName.Get("vertDistance", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName azimuthXName = System.Xml.Linq.XName.Get("azimuth", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName unusedXName = System.Xml.Linq.XName.Get("unused", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName directFaceXName = System.Xml.Linq.XName.Get("directFace", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName coordGeomRefsXName = System.Xml.Linq.XName.Get("coordGeomRefs", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName timeStampXName = System.Xml.Linq.XName.Get("timeStamp", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName alignRefXName = System.Xml.Linq.XName.Get("alignRef", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName alignStationNameXName = System.Xml.Linq.XName.Get("alignStationName", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName alignOffsetXName = System.Xml.Linq.XName.Get("alignOffset", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName upperStadiaXName = System.Xml.Linq.XName.Get("upperStadia", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName rodXName = System.Xml.Linq.XName.Get("rod", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName lowerStadiaXName = System.Xml.Linq.XName.Get("lowerStadia", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName circlePositionSetXName = System.Xml.Linq.XName.Get("circlePositionSet", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName statusXName = System.Xml.Linq.XName.Get("status", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("TestObservation", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator TestObservation(XElement xe) { return XTypedServices.ToXTypedElement<TestObservation>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static TestObservation() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(TargetPointXName), new NamedContentModelEntity(OffsetValsXName), new ChoiceContentModelEntity(new NamedContentModelEntity(FieldNoteXName), new NamedContentModelEntity(FeatureXName)));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (TargetPoint, OffsetVals?, (FieldNote* | Feature*)*)
        /// </para>
        /// </summary>
        public TestObservation() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (TargetPoint, OffsetVals?, (FieldNote* | Feature*)*)
        /// </para>
        /// </summary>
        public virtual TargetPoint TargetPoint {
            get {
                XElement x = this.GetElement(TargetPointXName);
                return ((TargetPoint)(x));
            }
            set {
                this.SetElement(TargetPointXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (TargetPoint, OffsetVals?, (FieldNote* | Feature*)*)
        /// </para>
        /// </summary>
        public virtual OffsetVals OffsetVals {
            get {
                XElement x = this.GetElement(OffsetValsXName);
                return ((OffsetVals)(x));
            }
            set {
                this.SetElement(OffsetValsXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (TargetPoint, OffsetVals?, (FieldNote* | Feature*)*)
        /// </para>
        /// </summary>
        public virtual IList<FieldNote> FieldNote {
            get {
                if ((this.FieldNoteField == null)) {
                    this.FieldNoteField = new XTypedList<FieldNote>(this, LinqToXsdTypeManager.Instance, FieldNoteXName);
                }
                return this.FieldNoteField;
            }
            set {
                if ((value == null)) {
                    this.FieldNoteField = null;
                }
                else {
                    if ((this.FieldNoteField == null)) {
                        this.FieldNoteField = XTypedList<FieldNote>.Initialize(this, LinqToXsdTypeManager.Instance, value, FieldNoteXName);
                    }
                    else {
                        XTypedServices.SetList<FieldNote>(this.FieldNoteField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (TargetPoint, OffsetVals?, (FieldNote* | Feature*)*)
        /// </para>
        /// </summary>
        public virtual IList<Feature> Feature {
            get {
                if ((this.FeatureField == null)) {
                    this.FeatureField = new XTypedList<Feature>(this, LinqToXsdTypeManager.Instance, FeatureXName);
                }
                return this.FeatureField;
            }
            set {
                if ((value == null)) {
                    this.FeatureField = null;
                }
                else {
                    if ((this.FeatureField == null)) {
                        this.FeatureField = XTypedList<Feature>.Initialize(this, LinqToXsdTypeManager.Instance, value, FeatureXName);
                    }
                    else {
                        XTypedServices.SetList<Feature>(this.FeatureField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Double? setup1RodA {
            get {
                XAttribute x = this.Attribute(setup1RodAXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetAttribute(setup1RodAXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Double? setup1RodB {
            get {
                XAttribute x = this.Attribute(setup1RodBXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetAttribute(setup1RodBXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Double? setup2RodA {
            get {
                XAttribute x = this.Attribute(setup2RodAXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetAttribute(setup2RodAXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Double? setup2RodB {
            get {
                XAttribute x = this.Attribute(setup2RodBXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetAttribute(setup2RodBXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string setupID {
            get {
                XAttribute x = this.Attribute(setupIDXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Idref).Datatype);
            }
            set {
                this.SetAttribute(setupIDXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Idref).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string targetSetupID {
            get {
                XAttribute x = this.Attribute(targetSetupIDXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Idref).Datatype);
            }
            set {
                this.SetAttribute(targetSetupIDXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Idref).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string setID {
            get {
                XAttribute x = this.Attribute(setIDXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(setIDXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual LandXml.v1_2.purposeType? purpose {
            get {
                XAttribute x = this.Attribute(purposeXName);
                if ((x == null)) {
                    return null;
                }
                return ((LandXml.v1_2.purposeType)(Enum.Parse(typeof(LandXml.v1_2.purposeType), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetAttribute(purposeXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Double? targetHeight {
            get {
                XAttribute x = this.Attribute(targetHeightXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetAttribute(targetHeightXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Double? horizAngle {
            get {
                XAttribute x = this.Attribute(horizAngleXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetAttribute(horizAngleXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Double? slopeDistance {
            get {
                XAttribute x = this.Attribute(slopeDistanceXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetAttribute(slopeDistanceXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Double? zenithAngle {
            get {
                XAttribute x = this.Attribute(zenithAngleXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetAttribute(zenithAngleXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Double? horizDistance {
            get {
                XAttribute x = this.Attribute(horizDistanceXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetAttribute(horizDistanceXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Double? vertDistance {
            get {
                XAttribute x = this.Attribute(vertDistanceXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetAttribute(vertDistanceXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Double? azimuth {
            get {
                XAttribute x = this.Attribute(azimuthXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetAttribute(azimuthXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Boolean? unused {
            get {
                XAttribute x = this.Attribute(unusedXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
            set {
                this.SetAttribute(unusedXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Boolean? directFace {
            get {
                XAttribute x = this.Attribute(directFaceXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
            set {
                this.SetAttribute(directFaceXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual IList<string> coordGeomRefs {
            get {
                XAttribute x = this.Attribute(coordGeomRefsXName);
                return XTypedServices.ParseListValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetListAttribute(coordGeomRefsXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.DateTime? timeStamp {
            get {
                XAttribute x = this.Attribute(timeStampXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<System.DateTime>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.DateTime).Datatype);
            }
            set {
                this.SetAttribute(timeStampXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.DateTime).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string alignRef {
            get {
                XAttribute x = this.Attribute(alignRefXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(alignRefXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string alignStationName {
            get {
                XAttribute x = this.Attribute(alignStationNameXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(alignStationNameXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Double? alignOffset {
            get {
                XAttribute x = this.Attribute(alignOffsetXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetAttribute(alignOffsetXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Double? upperStadia {
            get {
                XAttribute x = this.Attribute(upperStadiaXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetAttribute(upperStadiaXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Double? rod {
            get {
                XAttribute x = this.Attribute(rodXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetAttribute(rodXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Double? lowerStadia {
            get {
                XAttribute x = this.Attribute(lowerStadiaXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetAttribute(lowerStadiaXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Double? circlePositionSet {
            get {
                XAttribute x = this.Attribute(circlePositionSetXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetAttribute(circlePositionSetXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual LandXml.v1_2.observationStatusType? status {
            get {
                XAttribute x = this.Attribute(statusXName);
                if ((x == null)) {
                    return null;
                }
                return ((LandXml.v1_2.observationStatusType)(Enum.Parse(typeof(LandXml.v1_2.observationStatusType), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetAttribute(statusXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static TestObservation Load(string xmlFile) {
            return XTypedServices.Load<TestObservation>(xmlFile);
        }
        
        public static TestObservation Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<TestObservation>(xmlFile);
        }
        
        public static TestObservation Parse(string xml) {
            return XTypedServices.Parse<TestObservation>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<TestObservation>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(TargetPointXName, typeof(TargetPoint));
            localElementDictionary.Add(OffsetValsXName, typeof(OffsetVals));
            localElementDictionary.Add(FieldNoteXName, typeof(FieldNote));
            localElementDictionary.Add(FeatureXName, typeof(Feature));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    public partial class OffsetVals : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName offsetInOutXName = System.Xml.Linq.XName.Get("offsetInOut", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName offsetLeftRightXName = System.Xml.Linq.XName.Get("offsetLeftRight", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName offsetUpDownXName = System.Xml.Linq.XName.Get("offsetUpDown", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("OffsetVals", "http://www.landxml.org/schema/LandXML-1.2");
        
		public static explicit operator OffsetVals(XElement xe) { return XTypedServices.ToXTypedElement<OffsetVals>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public OffsetVals() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Double? offsetInOut {
            get {
                XAttribute x = this.Attribute(offsetInOutXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetAttribute(offsetInOutXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Double? offsetLeftRight {
            get {
                XAttribute x = this.Attribute(offsetLeftRightXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetAttribute(offsetLeftRightXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Double? offsetUpDown {
            get {
                XAttribute x = this.Attribute(offsetUpDownXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetAttribute(offsetUpDownXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static OffsetVals Load(string xmlFile) {
            return XTypedServices.Load<OffsetVals>(xmlFile);
        }
        
        public static OffsetVals Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<OffsetVals>(xmlFile);
        }
        
        public static OffsetVals Parse(string xml) {
            return XTypedServices.Parse<OffsetVals>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<OffsetVals>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (TargetPoint, GPSQCInfoLevel1?, GPSQCInfoLevel2?, (FieldNote* | Feature*)*)
    /// </para>
    /// </summary>
    public partial class GPSVector : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TargetPointXName = System.Xml.Linq.XName.Get("TargetPoint", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName GPSQCInfoLevel1XName = System.Xml.Linq.XName.Get("GPSQCInfoLevel1", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName GPSQCInfoLevel2XName = System.Xml.Linq.XName.Get("GPSQCInfoLevel2", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName FieldNoteXName = System.Xml.Linq.XName.Get("FieldNote", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<FieldNote> FieldNoteField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName FeatureXName = System.Xml.Linq.XName.Get("Feature", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<Feature> FeatureField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName dXXName = System.Xml.Linq.XName.Get("dX", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName dYXName = System.Xml.Linq.XName.Get("dY", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName dZXName = System.Xml.Linq.XName.Get("dZ", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName setupID_AXName = System.Xml.Linq.XName.Get("setupID_A", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName setupID_BXName = System.Xml.Linq.XName.Get("setupID_B", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName startTimeXName = System.Xml.Linq.XName.Get("startTime", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName endTimeXName = System.Xml.Linq.XName.Get("endTime", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName horizontalPrecisionXName = System.Xml.Linq.XName.Get("horizontalPrecision", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName verticalPrecisionXName = System.Xml.Linq.XName.Get("verticalPrecision", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName purposeXName = System.Xml.Linq.XName.Get("purpose", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName setIDXName = System.Xml.Linq.XName.Get("setID", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName solutionDataLinkXName = System.Xml.Linq.XName.Get("solutionDataLink", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName coordGeomRefsXName = System.Xml.Linq.XName.Get("coordGeomRefs", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("GPSVector", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator GPSVector(XElement xe) { return XTypedServices.ToXTypedElement<GPSVector>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static GPSVector() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(TargetPointXName), new NamedContentModelEntity(GPSQCInfoLevel1XName), new NamedContentModelEntity(GPSQCInfoLevel2XName), new ChoiceContentModelEntity(new NamedContentModelEntity(FieldNoteXName), new NamedContentModelEntity(FeatureXName)));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (TargetPoint, GPSQCInfoLevel1?, GPSQCInfoLevel2?, (FieldNote* | Feature*)*)
        /// </para>
        /// </summary>
        public GPSVector() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (TargetPoint, GPSQCInfoLevel1?, GPSQCInfoLevel2?, (FieldNote* | Feature*)*)
        /// </para>
        /// </summary>
        public virtual TargetPoint TargetPoint {
            get {
                XElement x = this.GetElement(TargetPointXName);
                return ((TargetPoint)(x));
            }
            set {
                this.SetElement(TargetPointXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (TargetPoint, GPSQCInfoLevel1?, GPSQCInfoLevel2?, (FieldNote* | Feature*)*)
        /// </para>
        /// </summary>
        public virtual GPSQCInfoLevel1 GPSQCInfoLevel1 {
            get {
                XElement x = this.GetElement(GPSQCInfoLevel1XName);
                return ((GPSQCInfoLevel1)(x));
            }
            set {
                this.SetElement(GPSQCInfoLevel1XName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (TargetPoint, GPSQCInfoLevel1?, GPSQCInfoLevel2?, (FieldNote* | Feature*)*)
        /// </para>
        /// </summary>
        public virtual GPSQCInfoLevel2 GPSQCInfoLevel2 {
            get {
                XElement x = this.GetElement(GPSQCInfoLevel2XName);
                return ((GPSQCInfoLevel2)(x));
            }
            set {
                this.SetElement(GPSQCInfoLevel2XName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (TargetPoint, GPSQCInfoLevel1?, GPSQCInfoLevel2?, (FieldNote* | Feature*)*)
        /// </para>
        /// </summary>
        public virtual IList<FieldNote> FieldNote {
            get {
                if ((this.FieldNoteField == null)) {
                    this.FieldNoteField = new XTypedList<FieldNote>(this, LinqToXsdTypeManager.Instance, FieldNoteXName);
                }
                return this.FieldNoteField;
            }
            set {
                if ((value == null)) {
                    this.FieldNoteField = null;
                }
                else {
                    if ((this.FieldNoteField == null)) {
                        this.FieldNoteField = XTypedList<FieldNote>.Initialize(this, LinqToXsdTypeManager.Instance, value, FieldNoteXName);
                    }
                    else {
                        XTypedServices.SetList<FieldNote>(this.FieldNoteField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (TargetPoint, GPSQCInfoLevel1?, GPSQCInfoLevel2?, (FieldNote* | Feature*)*)
        /// </para>
        /// </summary>
        public virtual IList<Feature> Feature {
            get {
                if ((this.FeatureField == null)) {
                    this.FeatureField = new XTypedList<Feature>(this, LinqToXsdTypeManager.Instance, FeatureXName);
                }
                return this.FeatureField;
            }
            set {
                if ((value == null)) {
                    this.FeatureField = null;
                }
                else {
                    if ((this.FeatureField == null)) {
                        this.FeatureField = XTypedList<Feature>.Initialize(this, LinqToXsdTypeManager.Instance, value, FeatureXName);
                    }
                    else {
                        XTypedServices.SetList<Feature>(this.FeatureField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual double dX {
            get {
                XAttribute x = this.Attribute(dXXName);
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetAttribute(dXXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual double dY {
            get {
                XAttribute x = this.Attribute(dYXName);
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetAttribute(dYXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual double dZ {
            get {
                XAttribute x = this.Attribute(dZXName);
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetAttribute(dZXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual string setupID_A {
            get {
                XAttribute x = this.Attribute(setupID_AXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Idref).Datatype);
            }
            set {
                this.SetAttribute(setupID_AXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Idref).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual string setupID_B {
            get {
                XAttribute x = this.Attribute(setupID_BXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Idref).Datatype);
            }
            set {
                this.SetAttribute(setupID_BXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Idref).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.DateTime? startTime {
            get {
                XAttribute x = this.Attribute(startTimeXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<System.DateTime>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.DateTime).Datatype);
            }
            set {
                this.SetAttribute(startTimeXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.DateTime).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.DateTime? endTime {
            get {
                XAttribute x = this.Attribute(endTimeXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<System.DateTime>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.DateTime).Datatype);
            }
            set {
                this.SetAttribute(endTimeXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.DateTime).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Double? horizontalPrecision {
            get {
                XAttribute x = this.Attribute(horizontalPrecisionXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetAttribute(horizontalPrecisionXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Double? verticalPrecision {
            get {
                XAttribute x = this.Attribute(verticalPrecisionXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetAttribute(verticalPrecisionXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual LandXml.v1_2.purposeType? purpose {
            get {
                XAttribute x = this.Attribute(purposeXName);
                if ((x == null)) {
                    return null;
                }
                return ((LandXml.v1_2.purposeType)(Enum.Parse(typeof(LandXml.v1_2.purposeType), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetAttribute(purposeXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string setID {
            get {
                XAttribute x = this.Attribute(setIDXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(setIDXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string solutionDataLink {
            get {
                XAttribute x = this.Attribute(solutionDataLinkXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(solutionDataLinkXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual IList<string> coordGeomRefs {
            get {
                XAttribute x = this.Attribute(coordGeomRefsXName);
                return XTypedServices.ParseListValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetListAttribute(coordGeomRefsXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static GPSVector Load(string xmlFile) {
            return XTypedServices.Load<GPSVector>(xmlFile);
        }
        
        public static GPSVector Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<GPSVector>(xmlFile);
        }
        
        public static GPSVector Parse(string xml) {
            return XTypedServices.Parse<GPSVector>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<GPSVector>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(TargetPointXName, typeof(TargetPoint));
            localElementDictionary.Add(GPSQCInfoLevel1XName, typeof(GPSQCInfoLevel1));
            localElementDictionary.Add(GPSQCInfoLevel2XName, typeof(GPSQCInfoLevel2));
            localElementDictionary.Add(FieldNoteXName, typeof(FieldNote));
            localElementDictionary.Add(FeatureXName, typeof(Feature));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (TargetPoint, GPSQCInfoLevel1?, GPSQCInfoLevel2?, (FieldNote* | Feature*)*)
    /// </para>
    /// </summary>
    public partial class GPSPosition : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TargetPointXName = System.Xml.Linq.XName.Get("TargetPoint", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName GPSQCInfoLevel1XName = System.Xml.Linq.XName.Get("GPSQCInfoLevel1", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName GPSQCInfoLevel2XName = System.Xml.Linq.XName.Get("GPSQCInfoLevel2", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName FieldNoteXName = System.Xml.Linq.XName.Get("FieldNote", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<FieldNote> FieldNoteField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName FeatureXName = System.Xml.Linq.XName.Get("Feature", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<Feature> FeatureField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName setupIDXName = System.Xml.Linq.XName.Get("setupID", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName setIDXName = System.Xml.Linq.XName.Get("setID", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName wgsHeightXName = System.Xml.Linq.XName.Get("wgsHeight", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName wgsLatitudeXName = System.Xml.Linq.XName.Get("wgsLatitude", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName wgsLongitudeXName = System.Xml.Linq.XName.Get("wgsLongitude", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName purposeXName = System.Xml.Linq.XName.Get("purpose", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName coordGeomRefsXName = System.Xml.Linq.XName.Get("coordGeomRefs", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName pntRefXName = System.Xml.Linq.XName.Get("pntRef", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("GPSPosition", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator GPSPosition(XElement xe) { return XTypedServices.ToXTypedElement<GPSPosition>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static GPSPosition() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(TargetPointXName), new NamedContentModelEntity(GPSQCInfoLevel1XName), new NamedContentModelEntity(GPSQCInfoLevel2XName), new ChoiceContentModelEntity(new NamedContentModelEntity(FieldNoteXName), new NamedContentModelEntity(FeatureXName)));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (TargetPoint, GPSQCInfoLevel1?, GPSQCInfoLevel2?, (FieldNote* | Feature*)*)
        /// </para>
        /// </summary>
        public GPSPosition() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (TargetPoint, GPSQCInfoLevel1?, GPSQCInfoLevel2?, (FieldNote* | Feature*)*)
        /// </para>
        /// </summary>
        public virtual TargetPoint TargetPoint {
            get {
                XElement x = this.GetElement(TargetPointXName);
                return ((TargetPoint)(x));
            }
            set {
                this.SetElement(TargetPointXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (TargetPoint, GPSQCInfoLevel1?, GPSQCInfoLevel2?, (FieldNote* | Feature*)*)
        /// </para>
        /// </summary>
        public virtual GPSQCInfoLevel1 GPSQCInfoLevel1 {
            get {
                XElement x = this.GetElement(GPSQCInfoLevel1XName);
                return ((GPSQCInfoLevel1)(x));
            }
            set {
                this.SetElement(GPSQCInfoLevel1XName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (TargetPoint, GPSQCInfoLevel1?, GPSQCInfoLevel2?, (FieldNote* | Feature*)*)
        /// </para>
        /// </summary>
        public virtual GPSQCInfoLevel2 GPSQCInfoLevel2 {
            get {
                XElement x = this.GetElement(GPSQCInfoLevel2XName);
                return ((GPSQCInfoLevel2)(x));
            }
            set {
                this.SetElement(GPSQCInfoLevel2XName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (TargetPoint, GPSQCInfoLevel1?, GPSQCInfoLevel2?, (FieldNote* | Feature*)*)
        /// </para>
        /// </summary>
        public virtual IList<FieldNote> FieldNote {
            get {
                if ((this.FieldNoteField == null)) {
                    this.FieldNoteField = new XTypedList<FieldNote>(this, LinqToXsdTypeManager.Instance, FieldNoteXName);
                }
                return this.FieldNoteField;
            }
            set {
                if ((value == null)) {
                    this.FieldNoteField = null;
                }
                else {
                    if ((this.FieldNoteField == null)) {
                        this.FieldNoteField = XTypedList<FieldNote>.Initialize(this, LinqToXsdTypeManager.Instance, value, FieldNoteXName);
                    }
                    else {
                        XTypedServices.SetList<FieldNote>(this.FieldNoteField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (TargetPoint, GPSQCInfoLevel1?, GPSQCInfoLevel2?, (FieldNote* | Feature*)*)
        /// </para>
        /// </summary>
        public virtual IList<Feature> Feature {
            get {
                if ((this.FeatureField == null)) {
                    this.FeatureField = new XTypedList<Feature>(this, LinqToXsdTypeManager.Instance, FeatureXName);
                }
                return this.FeatureField;
            }
            set {
                if ((value == null)) {
                    this.FeatureField = null;
                }
                else {
                    if ((this.FeatureField == null)) {
                        this.FeatureField = XTypedList<Feature>.Initialize(this, LinqToXsdTypeManager.Instance, value, FeatureXName);
                    }
                    else {
                        XTypedServices.SetList<Feature>(this.FeatureField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string setupID {
            get {
                XAttribute x = this.Attribute(setupIDXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Idref).Datatype);
            }
            set {
                this.SetAttribute(setupIDXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Idref).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string setID {
            get {
                XAttribute x = this.Attribute(setIDXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(setIDXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual double wgsHeight {
            get {
                XAttribute x = this.Attribute(wgsHeightXName);
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetAttribute(wgsHeightXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual double wgsLatitude {
            get {
                XAttribute x = this.Attribute(wgsLatitudeXName);
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetAttribute(wgsLatitudeXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual double wgsLongitude {
            get {
                XAttribute x = this.Attribute(wgsLongitudeXName);
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetAttribute(wgsLongitudeXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string purpose {
            get {
                XAttribute x = this.Attribute(purposeXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(purposeXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual IList<string> coordGeomRefs {
            get {
                XAttribute x = this.Attribute(coordGeomRefsXName);
                return XTypedServices.ParseListValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetListAttribute(coordGeomRefsXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string pntRef {
            get {
                XAttribute x = this.Attribute(pntRefXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(pntRefXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static GPSPosition Load(string xmlFile) {
            return XTypedServices.Load<GPSPosition>(xmlFile);
        }
        
        public static GPSPosition Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<GPSPosition>(xmlFile);
        }
        
        public static GPSPosition Parse(string xml) {
            return XTypedServices.Parse<GPSPosition>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<GPSPosition>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(TargetPointXName, typeof(TargetPoint));
            localElementDictionary.Add(GPSQCInfoLevel1XName, typeof(GPSQCInfoLevel1));
            localElementDictionary.Add(GPSQCInfoLevel2XName, typeof(GPSQCInfoLevel2));
            localElementDictionary.Add(FieldNoteXName, typeof(FieldNote));
            localElementDictionary.Add(FeatureXName, typeof(Feature));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    public partial class GPSQCInfoLevel1 : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName GPSSolnTypeXName = System.Xml.Linq.XName.Get("GPSSolnType", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName GPSSolnFreqXName = System.Xml.Linq.XName.Get("GPSSolnFreq", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName nbrSatellitesXName = System.Xml.Linq.XName.Get("nbrSatellites", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName RDOPXName = System.Xml.Linq.XName.Get("RDOP", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("GPSQCInfoLevel1", "http://www.landxml.org/schema/LandXML-1.2");
        
		public static explicit operator GPSQCInfoLevel1(XElement xe) { return XTypedServices.ToXTypedElement<GPSQCInfoLevel1>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public GPSQCInfoLevel1() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string GPSSolnType {
            get {
                XAttribute x = this.Attribute(GPSSolnTypeXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(GPSSolnTypeXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string GPSSolnFreq {
            get {
                XAttribute x = this.Attribute(GPSSolnFreqXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(GPSSolnFreqXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Decimal? nbrSatellites {
            get {
                XAttribute x = this.Attribute(nbrSatellitesXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                this.SetAttribute(nbrSatellitesXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Double? RDOP {
            get {
                XAttribute x = this.Attribute(RDOPXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetAttribute(RDOPXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static GPSQCInfoLevel1 Load(string xmlFile) {
            return XTypedServices.Load<GPSQCInfoLevel1>(xmlFile);
        }
        
        public static GPSQCInfoLevel1 Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<GPSQCInfoLevel1>(xmlFile);
        }
        
        public static GPSQCInfoLevel1 Parse(string xml) {
            return XTypedServices.Parse<GPSQCInfoLevel1>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<GPSQCInfoLevel1>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class GPSQCInfoLevel2 : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName covarianceXXXName = System.Xml.Linq.XName.Get("covarianceXX", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName covarianceXYXName = System.Xml.Linq.XName.Get("covarianceXY", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName covarianceXZXName = System.Xml.Linq.XName.Get("covarianceXZ", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName covarianceYYXName = System.Xml.Linq.XName.Get("covarianceYY", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName covarianceYZXName = System.Xml.Linq.XName.Get("covarianceYZ", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName covarianceZZXName = System.Xml.Linq.XName.Get("covarianceZZ", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName GPSSolnTypeXName = System.Xml.Linq.XName.Get("GPSSolnType", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName GPSSolnFreqXName = System.Xml.Linq.XName.Get("GPSSolnFreq", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName RMSXName = System.Xml.Linq.XName.Get("RMS", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ratioXName = System.Xml.Linq.XName.Get("ratio", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName referenceVarianceXName = System.Xml.Linq.XName.Get("referenceVariance", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName nbrSatellitesXName = System.Xml.Linq.XName.Get("nbrSatellites", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName startTimeXName = System.Xml.Linq.XName.Get("startTime", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName stopTimeXName = System.Xml.Linq.XName.Get("stopTime", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("GPSQCInfoLevel2", "http://www.landxml.org/schema/LandXML-1.2");
        
		public static explicit operator GPSQCInfoLevel2(XElement xe) { return XTypedServices.ToXTypedElement<GPSQCInfoLevel2>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public GPSQCInfoLevel2() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Double? covarianceXX {
            get {
                XAttribute x = this.Attribute(covarianceXXXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetAttribute(covarianceXXXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Double? covarianceXY {
            get {
                XAttribute x = this.Attribute(covarianceXYXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetAttribute(covarianceXYXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Double? covarianceXZ {
            get {
                XAttribute x = this.Attribute(covarianceXZXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetAttribute(covarianceXZXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Double? covarianceYY {
            get {
                XAttribute x = this.Attribute(covarianceYYXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetAttribute(covarianceYYXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Double? covarianceYZ {
            get {
                XAttribute x = this.Attribute(covarianceYZXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetAttribute(covarianceYZXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Double? covarianceZZ {
            get {
                XAttribute x = this.Attribute(covarianceZZXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetAttribute(covarianceZZXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string GPSSolnType {
            get {
                XAttribute x = this.Attribute(GPSSolnTypeXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(GPSSolnTypeXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string GPSSolnFreq {
            get {
                XAttribute x = this.Attribute(GPSSolnFreqXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(GPSSolnFreqXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Double? RMS {
            get {
                XAttribute x = this.Attribute(RMSXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetAttribute(RMSXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Double? ratio {
            get {
                XAttribute x = this.Attribute(ratioXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetAttribute(ratioXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Double? referenceVariance {
            get {
                XAttribute x = this.Attribute(referenceVarianceXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetAttribute(referenceVarianceXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Decimal? nbrSatellites {
            get {
                XAttribute x = this.Attribute(nbrSatellitesXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                this.SetAttribute(nbrSatellitesXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Double? startTime {
            get {
                XAttribute x = this.Attribute(startTimeXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetAttribute(startTimeXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Double? stopTime {
            get {
                XAttribute x = this.Attribute(stopTimeXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetAttribute(stopTimeXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static GPSQCInfoLevel2 Load(string xmlFile) {
            return XTypedServices.Load<GPSQCInfoLevel2>(xmlFile);
        }
        
        public static GPSQCInfoLevel2 Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<GPSQCInfoLevel2>(xmlFile);
        }
        
        public static GPSQCInfoLevel2 Parse(string xml) {
            return XTypedServices.Parse<GPSQCInfoLevel2>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<GPSQCInfoLevel2>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (TargetPoint?, (Backsight | RawObservation+ | ReducedObservation | RedHorizontalPosition? | ReducedArcObservation? | RedVerticalObservation? | FieldNote* | Feature*)*)
    /// </para>
    /// </summary>
    public partial class ObservationGroup : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TargetPointXName = System.Xml.Linq.XName.Get("TargetPoint", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName BacksightXName = System.Xml.Linq.XName.Get("Backsight", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<Backsight> BacksightField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName RawObservationXName = System.Xml.Linq.XName.Get("RawObservation", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<RawObservation> RawObservationField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ReducedObservationXName = System.Xml.Linq.XName.Get("ReducedObservation", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ReducedObservation> ReducedObservationField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName RedHorizontalPositionXName = System.Xml.Linq.XName.Get("RedHorizontalPosition", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<RedHorizontalPosition> RedHorizontalPositionField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ReducedArcObservationXName = System.Xml.Linq.XName.Get("ReducedArcObservation", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ReducedArcObservation> ReducedArcObservationField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName RedVerticalObservationXName = System.Xml.Linq.XName.Get("RedVerticalObservation", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<RedVerticalObservation> RedVerticalObservationField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName FieldNoteXName = System.Xml.Linq.XName.Get("FieldNote", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<FieldNote> FieldNoteField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName FeatureXName = System.Xml.Linq.XName.Get("Feature", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<Feature> FeatureField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName idXName = System.Xml.Linq.XName.Get("id", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName purposeXName = System.Xml.Linq.XName.Get("purpose", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName setupIDXName = System.Xml.Linq.XName.Get("setupID", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName targetSetupIDXName = System.Xml.Linq.XName.Get("targetSetupID", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName setIDXName = System.Xml.Linq.XName.Get("setID", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName coordGeomRefsXName = System.Xml.Linq.XName.Get("coordGeomRefs", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName alignRefXName = System.Xml.Linq.XName.Get("alignRef", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName alignStationNameXName = System.Xml.Linq.XName.Get("alignStationName", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName alignOffsetXName = System.Xml.Linq.XName.Get("alignOffset", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("ObservationGroup", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator ObservationGroup(XElement xe) { return XTypedServices.ToXTypedElement<ObservationGroup>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static ObservationGroup() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(TargetPointXName), new ChoiceContentModelEntity(new NamedContentModelEntity(BacksightXName), new NamedContentModelEntity(RawObservationXName), new NamedContentModelEntity(ReducedObservationXName), new NamedContentModelEntity(RedHorizontalPositionXName), new NamedContentModelEntity(ReducedArcObservationXName), new NamedContentModelEntity(RedVerticalObservationXName), new NamedContentModelEntity(FieldNoteXName), new NamedContentModelEntity(FeatureXName)));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (TargetPoint?, (Backsight | RawObservation+ | ReducedObservation | RedHorizontalPosition? | ReducedArcObservation? | RedVerticalObservation? | FieldNote* | Feature*)*)
        /// </para>
        /// </summary>
        public ObservationGroup() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (TargetPoint?, (Backsight | RawObservation+ | ReducedObservation | RedHorizontalPosition? | ReducedArcObservation? | RedVerticalObservation? | FieldNote* | Feature*)*)
        /// </para>
        /// </summary>
        public virtual TargetPoint TargetPoint {
            get {
                XElement x = this.GetElement(TargetPointXName);
                return ((TargetPoint)(x));
            }
            set {
                this.SetElement(TargetPointXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (TargetPoint?, (Backsight | RawObservation+ | ReducedObservation | RedHorizontalPosition? | ReducedArcObservation? | RedVerticalObservation? | FieldNote* | Feature*)*)
        /// </para>
        /// </summary>
        public virtual IList<Backsight> Backsight {
            get {
                if ((this.BacksightField == null)) {
                    this.BacksightField = new XTypedList<Backsight>(this, LinqToXsdTypeManager.Instance, BacksightXName);
                }
                return this.BacksightField;
            }
            set {
                if ((value == null)) {
                    this.BacksightField = null;
                }
                else {
                    if ((this.BacksightField == null)) {
                        this.BacksightField = XTypedList<Backsight>.Initialize(this, LinqToXsdTypeManager.Instance, value, BacksightXName);
                    }
                    else {
                        XTypedServices.SetList<Backsight>(this.BacksightField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, repeating, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (TargetPoint?, (Backsight | RawObservation+ | ReducedObservation | RedHorizontalPosition? | ReducedArcObservation? | RedVerticalObservation? | FieldNote* | Feature*)*)
        /// </para>
        /// </summary>
        public virtual IList<RawObservation> RawObservation {
            get {
                if ((this.RawObservationField == null)) {
                    this.RawObservationField = new XTypedList<RawObservation>(this, LinqToXsdTypeManager.Instance, RawObservationXName);
                }
                return this.RawObservationField;
            }
            set {
                if ((value == null)) {
                    this.RawObservationField = null;
                }
                else {
                    if ((this.RawObservationField == null)) {
                        this.RawObservationField = XTypedList<RawObservation>.Initialize(this, LinqToXsdTypeManager.Instance, value, RawObservationXName);
                    }
                    else {
                        XTypedServices.SetList<RawObservation>(this.RawObservationField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (TargetPoint?, (Backsight | RawObservation+ | ReducedObservation | RedHorizontalPosition? | ReducedArcObservation? | RedVerticalObservation? | FieldNote* | Feature*)*)
        /// </para>
        /// </summary>
        public virtual IList<ReducedObservation> ReducedObservation {
            get {
                if ((this.ReducedObservationField == null)) {
                    this.ReducedObservationField = new XTypedList<ReducedObservation>(this, LinqToXsdTypeManager.Instance, ReducedObservationXName);
                }
                return this.ReducedObservationField;
            }
            set {
                if ((value == null)) {
                    this.ReducedObservationField = null;
                }
                else {
                    if ((this.ReducedObservationField == null)) {
                        this.ReducedObservationField = XTypedList<ReducedObservation>.Initialize(this, LinqToXsdTypeManager.Instance, value, ReducedObservationXName);
                    }
                    else {
                        XTypedServices.SetList<ReducedObservation>(this.ReducedObservationField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (TargetPoint?, (Backsight | RawObservation+ | ReducedObservation | RedHorizontalPosition? | ReducedArcObservation? | RedVerticalObservation? | FieldNote* | Feature*)*)
        /// </para>
        /// </summary>
        public virtual IList<RedHorizontalPosition> RedHorizontalPosition {
            get {
                if ((this.RedHorizontalPositionField == null)) {
                    this.RedHorizontalPositionField = new XTypedList<RedHorizontalPosition>(this, LinqToXsdTypeManager.Instance, RedHorizontalPositionXName);
                }
                return this.RedHorizontalPositionField;
            }
            set {
                if ((value == null)) {
                    this.RedHorizontalPositionField = null;
                }
                else {
                    if ((this.RedHorizontalPositionField == null)) {
                        this.RedHorizontalPositionField = XTypedList<RedHorizontalPosition>.Initialize(this, LinqToXsdTypeManager.Instance, value, RedHorizontalPositionXName);
                    }
                    else {
                        XTypedServices.SetList<RedHorizontalPosition>(this.RedHorizontalPositionField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (TargetPoint?, (Backsight | RawObservation+ | ReducedObservation | RedHorizontalPosition? | ReducedArcObservation? | RedVerticalObservation? | FieldNote* | Feature*)*)
        /// </para>
        /// </summary>
        public virtual IList<ReducedArcObservation> ReducedArcObservation {
            get {
                if ((this.ReducedArcObservationField == null)) {
                    this.ReducedArcObservationField = new XTypedList<ReducedArcObservation>(this, LinqToXsdTypeManager.Instance, ReducedArcObservationXName);
                }
                return this.ReducedArcObservationField;
            }
            set {
                if ((value == null)) {
                    this.ReducedArcObservationField = null;
                }
                else {
                    if ((this.ReducedArcObservationField == null)) {
                        this.ReducedArcObservationField = XTypedList<ReducedArcObservation>.Initialize(this, LinqToXsdTypeManager.Instance, value, ReducedArcObservationXName);
                    }
                    else {
                        XTypedServices.SetList<ReducedArcObservation>(this.ReducedArcObservationField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (TargetPoint?, (Backsight | RawObservation+ | ReducedObservation | RedHorizontalPosition? | ReducedArcObservation? | RedVerticalObservation? | FieldNote* | Feature*)*)
        /// </para>
        /// </summary>
        public virtual IList<RedVerticalObservation> RedVerticalObservation {
            get {
                if ((this.RedVerticalObservationField == null)) {
                    this.RedVerticalObservationField = new XTypedList<RedVerticalObservation>(this, LinqToXsdTypeManager.Instance, RedVerticalObservationXName);
                }
                return this.RedVerticalObservationField;
            }
            set {
                if ((value == null)) {
                    this.RedVerticalObservationField = null;
                }
                else {
                    if ((this.RedVerticalObservationField == null)) {
                        this.RedVerticalObservationField = XTypedList<RedVerticalObservation>.Initialize(this, LinqToXsdTypeManager.Instance, value, RedVerticalObservationXName);
                    }
                    else {
                        XTypedServices.SetList<RedVerticalObservation>(this.RedVerticalObservationField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (TargetPoint?, (Backsight | RawObservation+ | ReducedObservation | RedHorizontalPosition? | ReducedArcObservation? | RedVerticalObservation? | FieldNote* | Feature*)*)
        /// </para>
        /// </summary>
        public virtual IList<FieldNote> FieldNote {
            get {
                if ((this.FieldNoteField == null)) {
                    this.FieldNoteField = new XTypedList<FieldNote>(this, LinqToXsdTypeManager.Instance, FieldNoteXName);
                }
                return this.FieldNoteField;
            }
            set {
                if ((value == null)) {
                    this.FieldNoteField = null;
                }
                else {
                    if ((this.FieldNoteField == null)) {
                        this.FieldNoteField = XTypedList<FieldNote>.Initialize(this, LinqToXsdTypeManager.Instance, value, FieldNoteXName);
                    }
                    else {
                        XTypedServices.SetList<FieldNote>(this.FieldNoteField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (TargetPoint?, (Backsight | RawObservation+ | ReducedObservation | RedHorizontalPosition? | ReducedArcObservation? | RedVerticalObservation? | FieldNote* | Feature*)*)
        /// </para>
        /// </summary>
        public virtual IList<Feature> Feature {
            get {
                if ((this.FeatureField == null)) {
                    this.FeatureField = new XTypedList<Feature>(this, LinqToXsdTypeManager.Instance, FeatureXName);
                }
                return this.FeatureField;
            }
            set {
                if ((value == null)) {
                    this.FeatureField = null;
                }
                else {
                    if ((this.FeatureField == null)) {
                        this.FeatureField = XTypedList<Feature>.Initialize(this, LinqToXsdTypeManager.Instance, value, FeatureXName);
                    }
                    else {
                        XTypedServices.SetList<Feature>(this.FeatureField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual string id {
            get {
                XAttribute x = this.Attribute(idXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
            set {
                this.SetAttribute(idXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Id).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual LandXml.v1_2.purposeType? purpose {
            get {
                XAttribute x = this.Attribute(purposeXName);
                if ((x == null)) {
                    return null;
                }
                return ((LandXml.v1_2.purposeType)(Enum.Parse(typeof(LandXml.v1_2.purposeType), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetAttribute(purposeXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string setupID {
            get {
                XAttribute x = this.Attribute(setupIDXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Idref).Datatype);
            }
            set {
                this.SetAttribute(setupIDXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Idref).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string targetSetupID {
            get {
                XAttribute x = this.Attribute(targetSetupIDXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Idref).Datatype);
            }
            set {
                this.SetAttribute(targetSetupIDXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Idref).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string setID {
            get {
                XAttribute x = this.Attribute(setIDXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(setIDXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual IList<string> coordGeomRefs {
            get {
                XAttribute x = this.Attribute(coordGeomRefsXName);
                return XTypedServices.ParseListValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetListAttribute(coordGeomRefsXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string alignRef {
            get {
                XAttribute x = this.Attribute(alignRefXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(alignRefXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string alignStationName {
            get {
                XAttribute x = this.Attribute(alignStationNameXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(alignStationNameXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Double? alignOffset {
            get {
                XAttribute x = this.Attribute(alignOffsetXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetAttribute(alignOffsetXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static ObservationGroup Load(string xmlFile) {
            return XTypedServices.Load<ObservationGroup>(xmlFile);
        }
        
        public static ObservationGroup Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<ObservationGroup>(xmlFile);
        }
        
        public static ObservationGroup Parse(string xml) {
            return XTypedServices.Parse<ObservationGroup>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ObservationGroup>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(TargetPointXName, typeof(TargetPoint));
            localElementDictionary.Add(BacksightXName, typeof(Backsight));
            localElementDictionary.Add(RawObservationXName, typeof(RawObservation));
            localElementDictionary.Add(ReducedObservationXName, typeof(ReducedObservation));
            localElementDictionary.Add(RedHorizontalPositionXName, typeof(RedHorizontalPosition));
            localElementDictionary.Add(ReducedArcObservationXName, typeof(ReducedArcObservation));
            localElementDictionary.Add(RedVerticalObservationXName, typeof(RedVerticalObservation));
            localElementDictionary.Add(FieldNoteXName, typeof(FieldNote));
            localElementDictionary.Add(FeatureXName, typeof(Feature));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: ((TestObservation* | ObservationGroup* | PointResults* | FieldNote* | Feature*)*)
    /// </para>
    /// </summary>
    public partial class ControlChecks : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TestObservationXName = System.Xml.Linq.XName.Get("TestObservation", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<TestObservation> TestObservationField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ObservationGroupXName = System.Xml.Linq.XName.Get("ObservationGroup", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ObservationGroup> ObservationGroupField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName PointResultsXName = System.Xml.Linq.XName.Get("PointResults", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<PointResults> PointResultsField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName FieldNoteXName = System.Xml.Linq.XName.Get("FieldNote", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<FieldNote> FieldNoteField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName FeatureXName = System.Xml.Linq.XName.Get("Feature", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<Feature> FeatureField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("ControlChecks", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator ControlChecks(XElement xe) { return XTypedServices.ToXTypedElement<ControlChecks>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static ControlChecks() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new ChoiceContentModelEntity(new NamedContentModelEntity(TestObservationXName), new NamedContentModelEntity(ObservationGroupXName), new NamedContentModelEntity(PointResultsXName), new NamedContentModelEntity(FieldNoteXName), new NamedContentModelEntity(FeatureXName)));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: ((TestObservation* | ObservationGroup* | PointResults* | FieldNote* | Feature*)*)
        /// </para>
        /// </summary>
        public ControlChecks() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((TestObservation* | ObservationGroup* | PointResults* | FieldNote* | Feature*)*)
        /// </para>
        /// </summary>
        public virtual IList<TestObservation> TestObservation {
            get {
                if ((this.TestObservationField == null)) {
                    this.TestObservationField = new XTypedList<TestObservation>(this, LinqToXsdTypeManager.Instance, TestObservationXName);
                }
                return this.TestObservationField;
            }
            set {
                if ((value == null)) {
                    this.TestObservationField = null;
                }
                else {
                    if ((this.TestObservationField == null)) {
                        this.TestObservationField = XTypedList<TestObservation>.Initialize(this, LinqToXsdTypeManager.Instance, value, TestObservationXName);
                    }
                    else {
                        XTypedServices.SetList<TestObservation>(this.TestObservationField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((TestObservation* | ObservationGroup* | PointResults* | FieldNote* | Feature*)*)
        /// </para>
        /// </summary>
        public virtual IList<ObservationGroup> ObservationGroup {
            get {
                if ((this.ObservationGroupField == null)) {
                    this.ObservationGroupField = new XTypedList<ObservationGroup>(this, LinqToXsdTypeManager.Instance, ObservationGroupXName);
                }
                return this.ObservationGroupField;
            }
            set {
                if ((value == null)) {
                    this.ObservationGroupField = null;
                }
                else {
                    if ((this.ObservationGroupField == null)) {
                        this.ObservationGroupField = XTypedList<ObservationGroup>.Initialize(this, LinqToXsdTypeManager.Instance, value, ObservationGroupXName);
                    }
                    else {
                        XTypedServices.SetList<ObservationGroup>(this.ObservationGroupField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((TestObservation* | ObservationGroup* | PointResults* | FieldNote* | Feature*)*)
        /// </para>
        /// </summary>
        public virtual IList<PointResults> PointResults {
            get {
                if ((this.PointResultsField == null)) {
                    this.PointResultsField = new XTypedList<PointResults>(this, LinqToXsdTypeManager.Instance, PointResultsXName);
                }
                return this.PointResultsField;
            }
            set {
                if ((value == null)) {
                    this.PointResultsField = null;
                }
                else {
                    if ((this.PointResultsField == null)) {
                        this.PointResultsField = XTypedList<PointResults>.Initialize(this, LinqToXsdTypeManager.Instance, value, PointResultsXName);
                    }
                    else {
                        XTypedServices.SetList<PointResults>(this.PointResultsField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((TestObservation* | ObservationGroup* | PointResults* | FieldNote* | Feature*)*)
        /// </para>
        /// </summary>
        public virtual IList<FieldNote> FieldNote {
            get {
                if ((this.FieldNoteField == null)) {
                    this.FieldNoteField = new XTypedList<FieldNote>(this, LinqToXsdTypeManager.Instance, FieldNoteXName);
                }
                return this.FieldNoteField;
            }
            set {
                if ((value == null)) {
                    this.FieldNoteField = null;
                }
                else {
                    if ((this.FieldNoteField == null)) {
                        this.FieldNoteField = XTypedList<FieldNote>.Initialize(this, LinqToXsdTypeManager.Instance, value, FieldNoteXName);
                    }
                    else {
                        XTypedServices.SetList<FieldNote>(this.FieldNoteField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((TestObservation* | ObservationGroup* | PointResults* | FieldNote* | Feature*)*)
        /// </para>
        /// </summary>
        public virtual IList<Feature> Feature {
            get {
                if ((this.FeatureField == null)) {
                    this.FeatureField = new XTypedList<Feature>(this, LinqToXsdTypeManager.Instance, FeatureXName);
                }
                return this.FeatureField;
            }
            set {
                if ((value == null)) {
                    this.FeatureField = null;
                }
                else {
                    if ((this.FeatureField == null)) {
                        this.FeatureField = XTypedList<Feature>.Initialize(this, LinqToXsdTypeManager.Instance, value, FeatureXName);
                    }
                    else {
                        XTypedServices.SetList<Feature>(this.FeatureField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static ControlChecks Load(string xmlFile) {
            return XTypedServices.Load<ControlChecks>(xmlFile);
        }
        
        public static ControlChecks Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<ControlChecks>(xmlFile);
        }
        
        public static ControlChecks Parse(string xml) {
            return XTypedServices.Parse<ControlChecks>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ControlChecks>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(TestObservationXName, typeof(TestObservation));
            localElementDictionary.Add(ObservationGroupXName, typeof(ObservationGroup));
            localElementDictionary.Add(PointResultsXName, typeof(PointResults));
            localElementDictionary.Add(FieldNoteXName, typeof(FieldNote));
            localElementDictionary.Add(FeatureXName, typeof(Feature));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (TargetPoint?, (FieldNote* | Feature*)*)
    /// </para>
    /// </summary>
    public partial class PointResults : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TargetPointXName = System.Xml.Linq.XName.Get("TargetPoint", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName FieldNoteXName = System.Xml.Linq.XName.Get("FieldNote", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<FieldNote> FieldNoteField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName FeatureXName = System.Xml.Linq.XName.Get("Feature", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<Feature> FeatureField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName setupIDXName = System.Xml.Linq.XName.Get("setupID", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName targetSetupIDXName = System.Xml.Linq.XName.Get("targetSetupID", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName meanHorizAngleXName = System.Xml.Linq.XName.Get("meanHorizAngle", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName horizStdDeviationXName = System.Xml.Linq.XName.Get("horizStdDeviation", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName meanzenithAngleXName = System.Xml.Linq.XName.Get("meanzenithAngle", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName vertStdDeviationXName = System.Xml.Linq.XName.Get("vertStdDeviation", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName meanSlopeDistanceXName = System.Xml.Linq.XName.Get("meanSlopeDistance", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName slopeDistanceStdDeviationXName = System.Xml.Linq.XName.Get("slopeDistanceStdDeviation", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("PointResults", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator PointResults(XElement xe) { return XTypedServices.ToXTypedElement<PointResults>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static PointResults() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(TargetPointXName), new ChoiceContentModelEntity(new NamedContentModelEntity(FieldNoteXName), new NamedContentModelEntity(FeatureXName)));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (TargetPoint?, (FieldNote* | Feature*)*)
        /// </para>
        /// </summary>
        public PointResults() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (TargetPoint?, (FieldNote* | Feature*)*)
        /// </para>
        /// </summary>
        public virtual TargetPoint TargetPoint {
            get {
                XElement x = this.GetElement(TargetPointXName);
                return ((TargetPoint)(x));
            }
            set {
                this.SetElement(TargetPointXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (TargetPoint?, (FieldNote* | Feature*)*)
        /// </para>
        /// </summary>
        public virtual IList<FieldNote> FieldNote {
            get {
                if ((this.FieldNoteField == null)) {
                    this.FieldNoteField = new XTypedList<FieldNote>(this, LinqToXsdTypeManager.Instance, FieldNoteXName);
                }
                return this.FieldNoteField;
            }
            set {
                if ((value == null)) {
                    this.FieldNoteField = null;
                }
                else {
                    if ((this.FieldNoteField == null)) {
                        this.FieldNoteField = XTypedList<FieldNote>.Initialize(this, LinqToXsdTypeManager.Instance, value, FieldNoteXName);
                    }
                    else {
                        XTypedServices.SetList<FieldNote>(this.FieldNoteField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (TargetPoint?, (FieldNote* | Feature*)*)
        /// </para>
        /// </summary>
        public virtual IList<Feature> Feature {
            get {
                if ((this.FeatureField == null)) {
                    this.FeatureField = new XTypedList<Feature>(this, LinqToXsdTypeManager.Instance, FeatureXName);
                }
                return this.FeatureField;
            }
            set {
                if ((value == null)) {
                    this.FeatureField = null;
                }
                else {
                    if ((this.FeatureField == null)) {
                        this.FeatureField = XTypedList<Feature>.Initialize(this, LinqToXsdTypeManager.Instance, value, FeatureXName);
                    }
                    else {
                        XTypedServices.SetList<Feature>(this.FeatureField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string setupID {
            get {
                XAttribute x = this.Attribute(setupIDXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Idref).Datatype);
            }
            set {
                this.SetAttribute(setupIDXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Idref).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string targetSetupID {
            get {
                XAttribute x = this.Attribute(targetSetupIDXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Idref).Datatype);
            }
            set {
                this.SetAttribute(targetSetupIDXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Idref).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Double? meanHorizAngle {
            get {
                XAttribute x = this.Attribute(meanHorizAngleXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetAttribute(meanHorizAngleXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Double? horizStdDeviation {
            get {
                XAttribute x = this.Attribute(horizStdDeviationXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetAttribute(horizStdDeviationXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Double? meanzenithAngle {
            get {
                XAttribute x = this.Attribute(meanzenithAngleXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetAttribute(meanzenithAngleXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Double? vertStdDeviation {
            get {
                XAttribute x = this.Attribute(vertStdDeviationXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetAttribute(vertStdDeviationXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Double? meanSlopeDistance {
            get {
                XAttribute x = this.Attribute(meanSlopeDistanceXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetAttribute(meanSlopeDistanceXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Double? slopeDistanceStdDeviation {
            get {
                XAttribute x = this.Attribute(slopeDistanceStdDeviationXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetAttribute(slopeDistanceStdDeviationXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static PointResults Load(string xmlFile) {
            return XTypedServices.Load<PointResults>(xmlFile);
        }
        
        public static PointResults Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<PointResults>(xmlFile);
        }
        
        public static PointResults Parse(string xml) {
            return XTypedServices.Parse<PointResults>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<PointResults>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(TargetPointXName, typeof(TargetPoint));
            localElementDictionary.Add(FieldNoteXName, typeof(FieldNote));
            localElementDictionary.Add(FeatureXName, typeof(Feature));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (TargetPoint?, OffsetVals?, (FieldNote* | Feature*)*)
    /// </para>
    /// </summary>
    public partial class ReducedObservation : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TargetPointXName = System.Xml.Linq.XName.Get("TargetPoint", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName OffsetValsXName = System.Xml.Linq.XName.Get("OffsetVals", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName FieldNoteXName = System.Xml.Linq.XName.Get("FieldNote", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<FieldNote> FieldNoteField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName FeatureXName = System.Xml.Linq.XName.Get("Feature", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<Feature> FeatureField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName purposeXName = System.Xml.Linq.XName.Get("purpose", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName setupIDXName = System.Xml.Linq.XName.Get("setupID", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName targetSetupIDXName = System.Xml.Linq.XName.Get("targetSetupID", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName targetSetup2IDXName = System.Xml.Linq.XName.Get("targetSetup2ID", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName setIDXName = System.Xml.Linq.XName.Get("setID", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName targetHeightXName = System.Xml.Linq.XName.Get("targetHeight", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName azimuthXName = System.Xml.Linq.XName.Get("azimuth", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName horizDistanceXName = System.Xml.Linq.XName.Get("horizDistance", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName vertDistanceXName = System.Xml.Linq.XName.Get("vertDistance", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName horizAngleXName = System.Xml.Linq.XName.Get("horizAngle", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName slopeDistanceXName = System.Xml.Linq.XName.Get("slopeDistance", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName zenithAngleXName = System.Xml.Linq.XName.Get("zenithAngle", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName equipmentUsedXName = System.Xml.Linq.XName.Get("equipmentUsed", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName azimuthAccuracyXName = System.Xml.Linq.XName.Get("azimuthAccuracy", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName distanceAccuracyXName = System.Xml.Linq.XName.Get("distanceAccuracy", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName angleAccuracyXName = System.Xml.Linq.XName.Get("angleAccuracy", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName dateXName = System.Xml.Linq.XName.Get("date", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName distanceTypeXName = System.Xml.Linq.XName.Get("distanceType", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName azimuthTypeXName = System.Xml.Linq.XName.Get("azimuthType", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName angleTypeXName = System.Xml.Linq.XName.Get("angleType", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName adoptedAzimuthSurveyXName = System.Xml.Linq.XName.Get("adoptedAzimuthSurvey", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName adoptedDistanceSurveyXName = System.Xml.Linq.XName.Get("adoptedDistanceSurvey", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName adoptedAngleSurveyXName = System.Xml.Linq.XName.Get("adoptedAngleSurvey", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName distanceAccClassXName = System.Xml.Linq.XName.Get("distanceAccClass", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName azimuthAccClassXName = System.Xml.Linq.XName.Get("azimuthAccClass", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName angleAccClassXName = System.Xml.Linq.XName.Get("angleAccClass", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName azimuthAdoptionFactorXName = System.Xml.Linq.XName.Get("azimuthAdoptionFactor", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName distanceAdoptionFactorXName = System.Xml.Linq.XName.Get("distanceAdoptionFactor", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName nameXName = System.Xml.Linq.XName.Get("name", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName descXName = System.Xml.Linq.XName.Get("desc", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName stateXName = System.Xml.Linq.XName.Get("state", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName oIDXName = System.Xml.Linq.XName.Get("oID", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName MSLDistanceXName = System.Xml.Linq.XName.Get("MSLDistance", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName spherDistanceXName = System.Xml.Linq.XName.Get("spherDistance", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName coordGeomRefsXName = System.Xml.Linq.XName.Get("coordGeomRefs", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName alignRefXName = System.Xml.Linq.XName.Get("alignRef", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName alignStationNameXName = System.Xml.Linq.XName.Get("alignStationName", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName alignOffsetXName = System.Xml.Linq.XName.Get("alignOffset", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("ReducedObservation", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator ReducedObservation(XElement xe) { return XTypedServices.ToXTypedElement<ReducedObservation>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static ReducedObservation() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(TargetPointXName), new NamedContentModelEntity(OffsetValsXName), new ChoiceContentModelEntity(new NamedContentModelEntity(FieldNoteXName), new NamedContentModelEntity(FeatureXName)));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (TargetPoint?, OffsetVals?, (FieldNote* | Feature*)*)
        /// </para>
        /// </summary>
        public ReducedObservation() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (TargetPoint?, OffsetVals?, (FieldNote* | Feature*)*)
        /// </para>
        /// </summary>
        public virtual TargetPoint TargetPoint {
            get {
                XElement x = this.GetElement(TargetPointXName);
                return ((TargetPoint)(x));
            }
            set {
                this.SetElement(TargetPointXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (TargetPoint?, OffsetVals?, (FieldNote* | Feature*)*)
        /// </para>
        /// </summary>
        public virtual OffsetVals OffsetVals {
            get {
                XElement x = this.GetElement(OffsetValsXName);
                return ((OffsetVals)(x));
            }
            set {
                this.SetElement(OffsetValsXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (TargetPoint?, OffsetVals?, (FieldNote* | Feature*)*)
        /// </para>
        /// </summary>
        public virtual IList<FieldNote> FieldNote {
            get {
                if ((this.FieldNoteField == null)) {
                    this.FieldNoteField = new XTypedList<FieldNote>(this, LinqToXsdTypeManager.Instance, FieldNoteXName);
                }
                return this.FieldNoteField;
            }
            set {
                if ((value == null)) {
                    this.FieldNoteField = null;
                }
                else {
                    if ((this.FieldNoteField == null)) {
                        this.FieldNoteField = XTypedList<FieldNote>.Initialize(this, LinqToXsdTypeManager.Instance, value, FieldNoteXName);
                    }
                    else {
                        XTypedServices.SetList<FieldNote>(this.FieldNoteField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (TargetPoint?, OffsetVals?, (FieldNote* | Feature*)*)
        /// </para>
        /// </summary>
        public virtual IList<Feature> Feature {
            get {
                if ((this.FeatureField == null)) {
                    this.FeatureField = new XTypedList<Feature>(this, LinqToXsdTypeManager.Instance, FeatureXName);
                }
                return this.FeatureField;
            }
            set {
                if ((value == null)) {
                    this.FeatureField = null;
                }
                else {
                    if ((this.FeatureField == null)) {
                        this.FeatureField = XTypedList<Feature>.Initialize(this, LinqToXsdTypeManager.Instance, value, FeatureXName);
                    }
                    else {
                        XTypedServices.SetList<Feature>(this.FeatureField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual LandXml.v1_2.purposeType? purpose {
            get {
                XAttribute x = this.Attribute(purposeXName);
                if ((x == null)) {
                    return null;
                }
                return ((LandXml.v1_2.purposeType)(Enum.Parse(typeof(LandXml.v1_2.purposeType), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetAttribute(purposeXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string setupID {
            get {
                XAttribute x = this.Attribute(setupIDXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Idref).Datatype);
            }
            set {
                this.SetAttribute(setupIDXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Idref).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string targetSetupID {
            get {
                XAttribute x = this.Attribute(targetSetupIDXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Idref).Datatype);
            }
            set {
                this.SetAttribute(targetSetupIDXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Idref).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string targetSetup2ID {
            get {
                XAttribute x = this.Attribute(targetSetup2IDXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Idref).Datatype);
            }
            set {
                this.SetAttribute(targetSetup2IDXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Idref).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string setID {
            get {
                XAttribute x = this.Attribute(setIDXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(setIDXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Double? targetHeight {
            get {
                XAttribute x = this.Attribute(targetHeightXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetAttribute(targetHeightXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Double? azimuth {
            get {
                XAttribute x = this.Attribute(azimuthXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetAttribute(azimuthXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Double? horizDistance {
            get {
                XAttribute x = this.Attribute(horizDistanceXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetAttribute(horizDistanceXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Double? vertDistance {
            get {
                XAttribute x = this.Attribute(vertDistanceXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetAttribute(vertDistanceXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Double? horizAngle {
            get {
                XAttribute x = this.Attribute(horizAngleXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetAttribute(horizAngleXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Double? slopeDistance {
            get {
                XAttribute x = this.Attribute(slopeDistanceXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetAttribute(slopeDistanceXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Double? zenithAngle {
            get {
                XAttribute x = this.Attribute(zenithAngleXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetAttribute(zenithAngleXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string equipmentUsed {
            get {
                XAttribute x = this.Attribute(equipmentUsedXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(equipmentUsedXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Double? azimuthAccuracy {
            get {
                XAttribute x = this.Attribute(azimuthAccuracyXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetAttribute(azimuthAccuracyXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Double? distanceAccuracy {
            get {
                XAttribute x = this.Attribute(distanceAccuracyXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetAttribute(distanceAccuracyXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Double? angleAccuracy {
            get {
                XAttribute x = this.Attribute(angleAccuracyXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetAttribute(angleAccuracyXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.DateTime? date {
            get {
                XAttribute x = this.Attribute(dateXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<System.DateTime>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date).Datatype);
            }
            set {
                this.SetAttribute(dateXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string distanceType {
            get {
                XAttribute x = this.Attribute(distanceTypeXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(distanceTypeXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string azimuthType {
            get {
                XAttribute x = this.Attribute(azimuthTypeXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(azimuthTypeXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string angleType {
            get {
                XAttribute x = this.Attribute(angleTypeXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(angleTypeXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string adoptedAzimuthSurvey {
            get {
                XAttribute x = this.Attribute(adoptedAzimuthSurveyXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(adoptedAzimuthSurveyXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string adoptedDistanceSurvey {
            get {
                XAttribute x = this.Attribute(adoptedDistanceSurveyXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(adoptedDistanceSurveyXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string adoptedAngleSurvey {
            get {
                XAttribute x = this.Attribute(adoptedAngleSurveyXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(adoptedAngleSurveyXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string distanceAccClass {
            get {
                XAttribute x = this.Attribute(distanceAccClassXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(distanceAccClassXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string azimuthAccClass {
            get {
                XAttribute x = this.Attribute(azimuthAccClassXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(azimuthAccClassXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string angleAccClass {
            get {
                XAttribute x = this.Attribute(angleAccClassXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(angleAccClassXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Double? azimuthAdoptionFactor {
            get {
                XAttribute x = this.Attribute(azimuthAdoptionFactorXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetAttribute(azimuthAdoptionFactorXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Double? distanceAdoptionFactor {
            get {
                XAttribute x = this.Attribute(distanceAdoptionFactorXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetAttribute(distanceAdoptionFactorXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string name {
            get {
                XAttribute x = this.Attribute(nameXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(nameXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string desc {
            get {
                XAttribute x = this.Attribute(descXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(descXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual LandXml.v1_2.stateType? state {
            get {
                XAttribute x = this.Attribute(stateXName);
                if ((x == null)) {
                    return null;
                }
                return ((LandXml.v1_2.stateType)(Enum.Parse(typeof(LandXml.v1_2.stateType), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetAttribute(stateXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string oID {
            get {
                XAttribute x = this.Attribute(oIDXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(oIDXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string MSLDistance {
            get {
                XAttribute x = this.Attribute(MSLDistanceXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(MSLDistanceXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string spherDistance {
            get {
                XAttribute x = this.Attribute(spherDistanceXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(spherDistanceXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual IList<string> coordGeomRefs {
            get {
                XAttribute x = this.Attribute(coordGeomRefsXName);
                return XTypedServices.ParseListValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetListAttribute(coordGeomRefsXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string alignRef {
            get {
                XAttribute x = this.Attribute(alignRefXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(alignRefXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string alignStationName {
            get {
                XAttribute x = this.Attribute(alignStationNameXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(alignStationNameXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Double? alignOffset {
            get {
                XAttribute x = this.Attribute(alignOffsetXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetAttribute(alignOffsetXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static ReducedObservation Load(string xmlFile) {
            return XTypedServices.Load<ReducedObservation>(xmlFile);
        }
        
        public static ReducedObservation Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<ReducedObservation>(xmlFile);
        }
        
        public static ReducedObservation Parse(string xml) {
            return XTypedServices.Parse<ReducedObservation>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ReducedObservation>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(TargetPointXName, typeof(TargetPoint));
            localElementDictionary.Add(OffsetValsXName, typeof(OffsetVals));
            localElementDictionary.Add(FieldNoteXName, typeof(FieldNote));
            localElementDictionary.Add(FeatureXName, typeof(Feature));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (TargetPoint?, OffsetVals?, (FieldNote* | Feature*)*)
    /// </para>
    /// </summary>
    public partial class ReducedArcObservation : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TargetPointXName = System.Xml.Linq.XName.Get("TargetPoint", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName OffsetValsXName = System.Xml.Linq.XName.Get("OffsetVals", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName FieldNoteXName = System.Xml.Linq.XName.Get("FieldNote", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<FieldNote> FieldNoteField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName FeatureXName = System.Xml.Linq.XName.Get("Feature", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<Feature> FeatureField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName purposeXName = System.Xml.Linq.XName.Get("purpose", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName setupIDXName = System.Xml.Linq.XName.Get("setupID", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName targetSetupIDXName = System.Xml.Linq.XName.Get("targetSetupID", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName setIDXName = System.Xml.Linq.XName.Get("setID", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName chordAzimuthXName = System.Xml.Linq.XName.Get("chordAzimuth", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName radiusXName = System.Xml.Linq.XName.Get("radius", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName lengthXName = System.Xml.Linq.XName.Get("length", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName rotXName = System.Xml.Linq.XName.Get("rot", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName equipmentUsedXName = System.Xml.Linq.XName.Get("equipmentUsed", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName arcAzimuthAccuracyXName = System.Xml.Linq.XName.Get("arcAzimuthAccuracy", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName arcLengthAccuracyXName = System.Xml.Linq.XName.Get("arcLengthAccuracy", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName dateXName = System.Xml.Linq.XName.Get("date", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName arcTypeXName = System.Xml.Linq.XName.Get("arcType", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName adoptedSurveyXName = System.Xml.Linq.XName.Get("adoptedSurvey", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName lengthAccClassXName = System.Xml.Linq.XName.Get("lengthAccClass", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName azimuthAccClassXName = System.Xml.Linq.XName.Get("azimuthAccClass", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName azimuthAdoptionFactorXName = System.Xml.Linq.XName.Get("azimuthAdoptionFactor", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName lengthAdoptionFactorXName = System.Xml.Linq.XName.Get("lengthAdoptionFactor", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName nameXName = System.Xml.Linq.XName.Get("name", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName descXName = System.Xml.Linq.XName.Get("desc", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName stateXName = System.Xml.Linq.XName.Get("state", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName oIDXName = System.Xml.Linq.XName.Get("oID", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName coordGeomRefsXName = System.Xml.Linq.XName.Get("coordGeomRefs", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName alignRefXName = System.Xml.Linq.XName.Get("alignRef", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName alignStationNameXName = System.Xml.Linq.XName.Get("alignStationName", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName alignOffsetXName = System.Xml.Linq.XName.Get("alignOffset", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("ReducedArcObservation", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator ReducedArcObservation(XElement xe) { return XTypedServices.ToXTypedElement<ReducedArcObservation>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static ReducedArcObservation() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(TargetPointXName), new NamedContentModelEntity(OffsetValsXName), new ChoiceContentModelEntity(new NamedContentModelEntity(FieldNoteXName), new NamedContentModelEntity(FeatureXName)));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (TargetPoint?, OffsetVals?, (FieldNote* | Feature*)*)
        /// </para>
        /// </summary>
        public ReducedArcObservation() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (TargetPoint?, OffsetVals?, (FieldNote* | Feature*)*)
        /// </para>
        /// </summary>
        public virtual TargetPoint TargetPoint {
            get {
                XElement x = this.GetElement(TargetPointXName);
                return ((TargetPoint)(x));
            }
            set {
                this.SetElement(TargetPointXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (TargetPoint?, OffsetVals?, (FieldNote* | Feature*)*)
        /// </para>
        /// </summary>
        public virtual OffsetVals OffsetVals {
            get {
                XElement x = this.GetElement(OffsetValsXName);
                return ((OffsetVals)(x));
            }
            set {
                this.SetElement(OffsetValsXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (TargetPoint?, OffsetVals?, (FieldNote* | Feature*)*)
        /// </para>
        /// </summary>
        public virtual IList<FieldNote> FieldNote {
            get {
                if ((this.FieldNoteField == null)) {
                    this.FieldNoteField = new XTypedList<FieldNote>(this, LinqToXsdTypeManager.Instance, FieldNoteXName);
                }
                return this.FieldNoteField;
            }
            set {
                if ((value == null)) {
                    this.FieldNoteField = null;
                }
                else {
                    if ((this.FieldNoteField == null)) {
                        this.FieldNoteField = XTypedList<FieldNote>.Initialize(this, LinqToXsdTypeManager.Instance, value, FieldNoteXName);
                    }
                    else {
                        XTypedServices.SetList<FieldNote>(this.FieldNoteField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (TargetPoint?, OffsetVals?, (FieldNote* | Feature*)*)
        /// </para>
        /// </summary>
        public virtual IList<Feature> Feature {
            get {
                if ((this.FeatureField == null)) {
                    this.FeatureField = new XTypedList<Feature>(this, LinqToXsdTypeManager.Instance, FeatureXName);
                }
                return this.FeatureField;
            }
            set {
                if ((value == null)) {
                    this.FeatureField = null;
                }
                else {
                    if ((this.FeatureField == null)) {
                        this.FeatureField = XTypedList<Feature>.Initialize(this, LinqToXsdTypeManager.Instance, value, FeatureXName);
                    }
                    else {
                        XTypedServices.SetList<Feature>(this.FeatureField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual LandXml.v1_2.purposeType? purpose {
            get {
                XAttribute x = this.Attribute(purposeXName);
                if ((x == null)) {
                    return null;
                }
                return ((LandXml.v1_2.purposeType)(Enum.Parse(typeof(LandXml.v1_2.purposeType), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetAttribute(purposeXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string setupID {
            get {
                XAttribute x = this.Attribute(setupIDXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Idref).Datatype);
            }
            set {
                this.SetAttribute(setupIDXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Idref).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string targetSetupID {
            get {
                XAttribute x = this.Attribute(targetSetupIDXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Idref).Datatype);
            }
            set {
                this.SetAttribute(targetSetupIDXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Idref).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string setID {
            get {
                XAttribute x = this.Attribute(setIDXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(setIDXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual double chordAzimuth {
            get {
                XAttribute x = this.Attribute(chordAzimuthXName);
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetAttribute(chordAzimuthXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual double radius {
            get {
                XAttribute x = this.Attribute(radiusXName);
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetAttribute(radiusXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual double length {
            get {
                XAttribute x = this.Attribute(lengthXName);
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetAttribute(lengthXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual LandXml.v1_2.clockwise rot {
            get {
                XAttribute x = this.Attribute(rotXName);
                return ((LandXml.v1_2.clockwise)(Enum.Parse(typeof(LandXml.v1_2.clockwise), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetAttribute(rotXName, value.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string equipmentUsed {
            get {
                XAttribute x = this.Attribute(equipmentUsedXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(equipmentUsedXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Double? arcAzimuthAccuracy {
            get {
                XAttribute x = this.Attribute(arcAzimuthAccuracyXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetAttribute(arcAzimuthAccuracyXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Double? arcLengthAccuracy {
            get {
                XAttribute x = this.Attribute(arcLengthAccuracyXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetAttribute(arcLengthAccuracyXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.DateTime? date {
            get {
                XAttribute x = this.Attribute(dateXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<System.DateTime>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date).Datatype);
            }
            set {
                this.SetAttribute(dateXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string arcType {
            get {
                XAttribute x = this.Attribute(arcTypeXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(arcTypeXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string adoptedSurvey {
            get {
                XAttribute x = this.Attribute(adoptedSurveyXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(adoptedSurveyXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string lengthAccClass {
            get {
                XAttribute x = this.Attribute(lengthAccClassXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(lengthAccClassXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string azimuthAccClass {
            get {
                XAttribute x = this.Attribute(azimuthAccClassXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(azimuthAccClassXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Double? azimuthAdoptionFactor {
            get {
                XAttribute x = this.Attribute(azimuthAdoptionFactorXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetAttribute(azimuthAdoptionFactorXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Double? lengthAdoptionFactor {
            get {
                XAttribute x = this.Attribute(lengthAdoptionFactorXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetAttribute(lengthAdoptionFactorXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string name {
            get {
                XAttribute x = this.Attribute(nameXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(nameXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string desc {
            get {
                XAttribute x = this.Attribute(descXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(descXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual LandXml.v1_2.stateType? state {
            get {
                XAttribute x = this.Attribute(stateXName);
                if ((x == null)) {
                    return null;
                }
                return ((LandXml.v1_2.stateType)(Enum.Parse(typeof(LandXml.v1_2.stateType), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetAttribute(stateXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string oID {
            get {
                XAttribute x = this.Attribute(oIDXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(oIDXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual IList<string> coordGeomRefs {
            get {
                XAttribute x = this.Attribute(coordGeomRefsXName);
                return XTypedServices.ParseListValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetListAttribute(coordGeomRefsXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string alignRef {
            get {
                XAttribute x = this.Attribute(alignRefXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(alignRefXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string alignStationName {
            get {
                XAttribute x = this.Attribute(alignStationNameXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(alignStationNameXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Double? alignOffset {
            get {
                XAttribute x = this.Attribute(alignOffsetXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetAttribute(alignOffsetXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static ReducedArcObservation Load(string xmlFile) {
            return XTypedServices.Load<ReducedArcObservation>(xmlFile);
        }
        
        public static ReducedArcObservation Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<ReducedArcObservation>(xmlFile);
        }
        
        public static ReducedArcObservation Parse(string xml) {
            return XTypedServices.Parse<ReducedArcObservation>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ReducedArcObservation>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(TargetPointXName, typeof(TargetPoint));
            localElementDictionary.Add(OffsetValsXName, typeof(OffsetVals));
            localElementDictionary.Add(FieldNoteXName, typeof(FieldNote));
            localElementDictionary.Add(FeatureXName, typeof(Feature));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (FieldNote* | Feature*)*
    /// </para>
    /// </summary>
    public partial class RedHorizontalPosition : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName FieldNoteXName = System.Xml.Linq.XName.Get("FieldNote", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<FieldNote> FieldNoteField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName FeatureXName = System.Xml.Linq.XName.Get("Feature", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<Feature> FeatureField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName descXName = System.Xml.Linq.XName.Get("desc", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName nameXName = System.Xml.Linq.XName.Get("name", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName stateXName = System.Xml.Linq.XName.Get("state", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName oIDXName = System.Xml.Linq.XName.Get("oID", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName purposeXName = System.Xml.Linq.XName.Get("purpose", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName setupIDXName = System.Xml.Linq.XName.Get("setupID", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName dateXName = System.Xml.Linq.XName.Get("date", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName equipmentUsedXName = System.Xml.Linq.XName.Get("equipmentUsed", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName horizontalDatumXName = System.Xml.Linq.XName.Get("horizontalDatum", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName horizontalAdjustmentXName = System.Xml.Linq.XName.Get("horizontalAdjustment", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName latitudeXName = System.Xml.Linq.XName.Get("latitude", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName longitudeXName = System.Xml.Linq.XName.Get("longitude", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName horizontalFixXName = System.Xml.Linq.XName.Get("horizontalFix", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName currencyDateXName = System.Xml.Linq.XName.Get("currencyDate", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName localUncertainityXName = System.Xml.Linq.XName.Get("localUncertainity", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName @classXName = System.Xml.Linq.XName.Get("class", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName orderXName = System.Xml.Linq.XName.Get("order", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName positionalUncertainityXName = System.Xml.Linq.XName.Get("positionalUncertainity", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("RedHorizontalPosition", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator RedHorizontalPosition(XElement xe) { return XTypedServices.ToXTypedElement<RedHorizontalPosition>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static RedHorizontalPosition() {
            BuildElementDictionary();
            contentModel = new ChoiceContentModelEntity(new NamedContentModelEntity(FieldNoteXName), new NamedContentModelEntity(FeatureXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (FieldNote* | Feature*)*
        /// </para>
        /// </summary>
        public RedHorizontalPosition() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating, choice
        /// </para>
        /// <para>
        /// Regular expression: (FieldNote* | Feature*)*
        /// </para>
        /// </summary>
        public virtual IList<FieldNote> FieldNote {
            get {
                if ((this.FieldNoteField == null)) {
                    this.FieldNoteField = new XTypedList<FieldNote>(this, LinqToXsdTypeManager.Instance, FieldNoteXName);
                }
                return this.FieldNoteField;
            }
            set {
                if ((value == null)) {
                    this.FieldNoteField = null;
                }
                else {
                    if ((this.FieldNoteField == null)) {
                        this.FieldNoteField = XTypedList<FieldNote>.Initialize(this, LinqToXsdTypeManager.Instance, value, FieldNoteXName);
                    }
                    else {
                        XTypedServices.SetList<FieldNote>(this.FieldNoteField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating, choice
        /// </para>
        /// <para>
        /// Regular expression: (FieldNote* | Feature*)*
        /// </para>
        /// </summary>
        public virtual IList<Feature> Feature {
            get {
                if ((this.FeatureField == null)) {
                    this.FeatureField = new XTypedList<Feature>(this, LinqToXsdTypeManager.Instance, FeatureXName);
                }
                return this.FeatureField;
            }
            set {
                if ((value == null)) {
                    this.FeatureField = null;
                }
                else {
                    if ((this.FeatureField == null)) {
                        this.FeatureField = XTypedList<Feature>.Initialize(this, LinqToXsdTypeManager.Instance, value, FeatureXName);
                    }
                    else {
                        XTypedServices.SetList<Feature>(this.FeatureField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string desc {
            get {
                XAttribute x = this.Attribute(descXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(descXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual string name {
            get {
                XAttribute x = this.Attribute(nameXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(nameXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string state {
            get {
                XAttribute x = this.Attribute(stateXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(stateXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string oID {
            get {
                XAttribute x = this.Attribute(oIDXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(oIDXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual LandXml.v1_2.purposeType? purpose {
            get {
                XAttribute x = this.Attribute(purposeXName);
                if ((x == null)) {
                    return null;
                }
                return ((LandXml.v1_2.purposeType)(Enum.Parse(typeof(LandXml.v1_2.purposeType), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetAttribute(purposeXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string setupID {
            get {
                XAttribute x = this.Attribute(setupIDXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Idref).Datatype);
            }
            set {
                this.SetAttribute(setupIDXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Idref).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.DateTime? date {
            get {
                XAttribute x = this.Attribute(dateXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<System.DateTime>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date).Datatype);
            }
            set {
                this.SetAttribute(dateXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string equipmentUsed {
            get {
                XAttribute x = this.Attribute(equipmentUsedXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(equipmentUsedXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string horizontalDatum {
            get {
                XAttribute x = this.Attribute(horizontalDatumXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(horizontalDatumXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string horizontalAdjustment {
            get {
                XAttribute x = this.Attribute(horizontalAdjustmentXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(horizontalAdjustmentXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string latitude {
            get {
                XAttribute x = this.Attribute(latitudeXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(latitudeXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string longitude {
            get {
                XAttribute x = this.Attribute(longitudeXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(longitudeXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string horizontalFix {
            get {
                XAttribute x = this.Attribute(horizontalFixXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(horizontalFixXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string currencyDate {
            get {
                XAttribute x = this.Attribute(currencyDateXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(currencyDateXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Double? localUncertainity {
            get {
                XAttribute x = this.Attribute(localUncertainityXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetAttribute(localUncertainityXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string @class {
            get {
                XAttribute x = this.Attribute(@classXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(@classXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string order {
            get {
                XAttribute x = this.Attribute(orderXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(orderXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Double? positionalUncertainity {
            get {
                XAttribute x = this.Attribute(positionalUncertainityXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetAttribute(positionalUncertainityXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static RedHorizontalPosition Load(string xmlFile) {
            return XTypedServices.Load<RedHorizontalPosition>(xmlFile);
        }
        
        public static RedHorizontalPosition Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<RedHorizontalPosition>(xmlFile);
        }
        
        public static RedHorizontalPosition Parse(string xml) {
            return XTypedServices.Parse<RedHorizontalPosition>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<RedHorizontalPosition>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(FieldNoteXName, typeof(FieldNote));
            localElementDictionary.Add(FeatureXName, typeof(Feature));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (FieldNote* | Feature*)*
    /// </para>
    /// </summary>
    public partial class RedVerticalObservation : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName FieldNoteXName = System.Xml.Linq.XName.Get("FieldNote", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<FieldNote> FieldNoteField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName FeatureXName = System.Xml.Linq.XName.Get("Feature", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<Feature> FeatureField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName descXName = System.Xml.Linq.XName.Get("desc", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName nameXName = System.Xml.Linq.XName.Get("name", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName stateXName = System.Xml.Linq.XName.Get("state", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName oIDXName = System.Xml.Linq.XName.Get("oID", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName purposeXName = System.Xml.Linq.XName.Get("purpose", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName setupIDXName = System.Xml.Linq.XName.Get("setupID", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName dateXName = System.Xml.Linq.XName.Get("date", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName equipmentUsedXName = System.Xml.Linq.XName.Get("equipmentUsed", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName heightXName = System.Xml.Linq.XName.Get("height", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName verticalAdjustmentXName = System.Xml.Linq.XName.Get("verticalAdjustment", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName verticalFixXName = System.Xml.Linq.XName.Get("verticalFix", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName geosphoidXName = System.Xml.Linq.XName.Get("geosphoid", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName gsDatumXName = System.Xml.Linq.XName.Get("gsDatum", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName gsModelXName = System.Xml.Linq.XName.Get("gsModel", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName gsMethodXName = System.Xml.Linq.XName.Get("gsMethod", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName originMarkXName = System.Xml.Linq.XName.Get("originMark", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName verticalDatumXName = System.Xml.Linq.XName.Get("verticalDatum", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName localUncertainityXName = System.Xml.Linq.XName.Get("localUncertainity", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName @classXName = System.Xml.Linq.XName.Get("class", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName orderXName = System.Xml.Linq.XName.Get("order", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName positionalUncertainityXName = System.Xml.Linq.XName.Get("positionalUncertainity", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("RedVerticalObservation", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator RedVerticalObservation(XElement xe) { return XTypedServices.ToXTypedElement<RedVerticalObservation>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static RedVerticalObservation() {
            BuildElementDictionary();
            contentModel = new ChoiceContentModelEntity(new NamedContentModelEntity(FieldNoteXName), new NamedContentModelEntity(FeatureXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (FieldNote* | Feature*)*
        /// </para>
        /// </summary>
        public RedVerticalObservation() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating, choice
        /// </para>
        /// <para>
        /// Regular expression: (FieldNote* | Feature*)*
        /// </para>
        /// </summary>
        public virtual IList<FieldNote> FieldNote {
            get {
                if ((this.FieldNoteField == null)) {
                    this.FieldNoteField = new XTypedList<FieldNote>(this, LinqToXsdTypeManager.Instance, FieldNoteXName);
                }
                return this.FieldNoteField;
            }
            set {
                if ((value == null)) {
                    this.FieldNoteField = null;
                }
                else {
                    if ((this.FieldNoteField == null)) {
                        this.FieldNoteField = XTypedList<FieldNote>.Initialize(this, LinqToXsdTypeManager.Instance, value, FieldNoteXName);
                    }
                    else {
                        XTypedServices.SetList<FieldNote>(this.FieldNoteField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating, choice
        /// </para>
        /// <para>
        /// Regular expression: (FieldNote* | Feature*)*
        /// </para>
        /// </summary>
        public virtual IList<Feature> Feature {
            get {
                if ((this.FeatureField == null)) {
                    this.FeatureField = new XTypedList<Feature>(this, LinqToXsdTypeManager.Instance, FeatureXName);
                }
                return this.FeatureField;
            }
            set {
                if ((value == null)) {
                    this.FeatureField = null;
                }
                else {
                    if ((this.FeatureField == null)) {
                        this.FeatureField = XTypedList<Feature>.Initialize(this, LinqToXsdTypeManager.Instance, value, FeatureXName);
                    }
                    else {
                        XTypedServices.SetList<Feature>(this.FeatureField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string desc {
            get {
                XAttribute x = this.Attribute(descXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(descXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual string name {
            get {
                XAttribute x = this.Attribute(nameXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(nameXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string state {
            get {
                XAttribute x = this.Attribute(stateXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(stateXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string oID {
            get {
                XAttribute x = this.Attribute(oIDXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(oIDXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual LandXml.v1_2.purposeType? purpose {
            get {
                XAttribute x = this.Attribute(purposeXName);
                if ((x == null)) {
                    return null;
                }
                return ((LandXml.v1_2.purposeType)(Enum.Parse(typeof(LandXml.v1_2.purposeType), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetAttribute(purposeXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string setupID {
            get {
                XAttribute x = this.Attribute(setupIDXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Idref).Datatype);
            }
            set {
                this.SetAttribute(setupIDXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Idref).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.DateTime? date {
            get {
                XAttribute x = this.Attribute(dateXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<System.DateTime>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date).Datatype);
            }
            set {
                this.SetAttribute(dateXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string equipmentUsed {
            get {
                XAttribute x = this.Attribute(equipmentUsedXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(equipmentUsedXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Double? height {
            get {
                XAttribute x = this.Attribute(heightXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetAttribute(heightXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string verticalAdjustment {
            get {
                XAttribute x = this.Attribute(verticalAdjustmentXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(verticalAdjustmentXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string verticalFix {
            get {
                XAttribute x = this.Attribute(verticalFixXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(verticalFixXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Double? geosphoid {
            get {
                XAttribute x = this.Attribute(geosphoidXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetAttribute(geosphoidXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string gsDatum {
            get {
                XAttribute x = this.Attribute(gsDatumXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(gsDatumXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string gsModel {
            get {
                XAttribute x = this.Attribute(gsModelXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(gsModelXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string gsMethod {
            get {
                XAttribute x = this.Attribute(gsMethodXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(gsMethodXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string originMark {
            get {
                XAttribute x = this.Attribute(originMarkXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(originMarkXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string verticalDatum {
            get {
                XAttribute x = this.Attribute(verticalDatumXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(verticalDatumXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Double? localUncertainity {
            get {
                XAttribute x = this.Attribute(localUncertainityXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetAttribute(localUncertainityXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string @class {
            get {
                XAttribute x = this.Attribute(@classXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(@classXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string order {
            get {
                XAttribute x = this.Attribute(orderXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(orderXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Double? positionalUncertainity {
            get {
                XAttribute x = this.Attribute(positionalUncertainityXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetAttribute(positionalUncertainityXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static RedVerticalObservation Load(string xmlFile) {
            return XTypedServices.Load<RedVerticalObservation>(xmlFile);
        }
        
        public static RedVerticalObservation Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<RedVerticalObservation>(xmlFile);
        }
        
        public static RedVerticalObservation Parse(string xml) {
            return XTypedServices.Parse<RedVerticalObservation>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<RedVerticalObservation>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(FieldNoteXName, typeof(FieldNote));
            localElementDictionary.Add(FeatureXName, typeof(Feature));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Monument+, Feature*)
    /// </para>
    /// </summary>
    public partial class Monuments : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName MonumentXName = System.Xml.Linq.XName.Get("Monument", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<Monument> MonumentField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName FeatureXName = System.Xml.Linq.XName.Get("Feature", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<Feature> FeatureField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName descXName = System.Xml.Linq.XName.Get("desc", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName nameXName = System.Xml.Linq.XName.Get("name", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName stateXName = System.Xml.Linq.XName.Get("state", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("Monuments", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator Monuments(XElement xe) { return XTypedServices.ToXTypedElement<Monuments>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static Monuments() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(MonumentXName), new NamedContentModelEntity(FeatureXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Monument+, Feature*)
        /// </para>
        /// </summary>
        public Monuments() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Monument+, Feature*)
        /// </para>
        /// </summary>
        public virtual IList<Monument> Monument {
            get {
                if ((this.MonumentField == null)) {
                    this.MonumentField = new XTypedList<Monument>(this, LinqToXsdTypeManager.Instance, MonumentXName);
                }
                return this.MonumentField;
            }
            set {
                if ((value == null)) {
                    this.MonumentField = null;
                }
                else {
                    if ((this.MonumentField == null)) {
                        this.MonumentField = XTypedList<Monument>.Initialize(this, LinqToXsdTypeManager.Instance, value, MonumentXName);
                    }
                    else {
                        XTypedServices.SetList<Monument>(this.MonumentField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Monument+, Feature*)
        /// </para>
        /// </summary>
        public virtual IList<Feature> Feature {
            get {
                if ((this.FeatureField == null)) {
                    this.FeatureField = new XTypedList<Feature>(this, LinqToXsdTypeManager.Instance, FeatureXName);
                }
                return this.FeatureField;
            }
            set {
                if ((value == null)) {
                    this.FeatureField = null;
                }
                else {
                    if ((this.FeatureField == null)) {
                        this.FeatureField = XTypedList<Feature>.Initialize(this, LinqToXsdTypeManager.Instance, value, FeatureXName);
                    }
                    else {
                        XTypedServices.SetList<Feature>(this.FeatureField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string desc {
            get {
                XAttribute x = this.Attribute(descXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(descXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string name {
            get {
                XAttribute x = this.Attribute(nameXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(nameXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual LandXml.v1_2.stateType? state {
            get {
                XAttribute x = this.Attribute(stateXName);
                if ((x == null)) {
                    return null;
                }
                return ((LandXml.v1_2.stateType)(Enum.Parse(typeof(LandXml.v1_2.stateType), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetAttribute(stateXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static Monuments Load(string xmlFile) {
            return XTypedServices.Load<Monuments>(xmlFile);
        }
        
        public static Monuments Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<Monuments>(xmlFile);
        }
        
        public static Monuments Parse(string xml) {
            return XTypedServices.Parse<Monuments>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<Monuments>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(MonumentXName, typeof(Monument));
            localElementDictionary.Add(FeatureXName, typeof(Feature));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    public partial class Monument : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName nameXName = System.Xml.Linq.XName.Get("name", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName pntRefXName = System.Xml.Linq.XName.Get("pntRef", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName featureRefXName = System.Xml.Linq.XName.Get("featureRef", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName descXName = System.Xml.Linq.XName.Get("desc", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName stateXName = System.Xml.Linq.XName.Get("state", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName typeXName = System.Xml.Linq.XName.Get("type", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName conditionXName = System.Xml.Linq.XName.Get("condition", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName categoryXName = System.Xml.Linq.XName.Get("category", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName beaconXName = System.Xml.Linq.XName.Get("beacon", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName beaconProtectionXName = System.Xml.Linq.XName.Get("beaconProtection", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName oIDXName = System.Xml.Linq.XName.Get("oID", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName referenceXName = System.Xml.Linq.XName.Get("reference", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName originSurveyXName = System.Xml.Linq.XName.Get("originSurvey", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("Monument", "http://www.landxml.org/schema/LandXML-1.2");
        
		public static explicit operator Monument(XElement xe) { return XTypedServices.ToXTypedElement<Monument>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public Monument() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual string name {
            get {
                XAttribute x = this.Attribute(nameXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(nameXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string pntRef {
            get {
                XAttribute x = this.Attribute(pntRefXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(pntRefXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string featureRef {
            get {
                XAttribute x = this.Attribute(featureRefXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(featureRefXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string desc {
            get {
                XAttribute x = this.Attribute(descXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(descXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string state {
            get {
                XAttribute x = this.Attribute(stateXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(stateXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string type {
            get {
                XAttribute x = this.Attribute(typeXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(typeXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string condition {
            get {
                XAttribute x = this.Attribute(conditionXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(conditionXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string category {
            get {
                XAttribute x = this.Attribute(categoryXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(categoryXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string beacon {
            get {
                XAttribute x = this.Attribute(beaconXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(beaconXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string beaconProtection {
            get {
                XAttribute x = this.Attribute(beaconProtectionXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(beaconProtectionXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string oID {
            get {
                XAttribute x = this.Attribute(oIDXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(oIDXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string reference {
            get {
                XAttribute x = this.Attribute(referenceXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(referenceXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string originSurvey {
            get {
                XAttribute x = this.Attribute(originSurveyXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(originSurveyXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static Monument Load(string xmlFile) {
            return XTypedServices.Load<Monument>(xmlFile);
        }
        
        public static Monument Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<Monument>(xmlFile);
        }
        
        public static Monument Parse(string xml) {
            return XTypedServices.Parse<Monument>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<Monument>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Surface+, SurfVolumes*, Feature*)
    /// </para>
    /// </summary>
    public partial class Surfaces : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName SurfaceXName = System.Xml.Linq.XName.Get("Surface", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<Surface> SurfaceField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName SurfVolumesXName = System.Xml.Linq.XName.Get("SurfVolumes", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<SurfVolumes> SurfVolumesField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName FeatureXName = System.Xml.Linq.XName.Get("Feature", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<Feature> FeatureField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName descXName = System.Xml.Linq.XName.Get("desc", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName nameXName = System.Xml.Linq.XName.Get("name", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName stateXName = System.Xml.Linq.XName.Get("state", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("Surfaces", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator Surfaces(XElement xe) { return XTypedServices.ToXTypedElement<Surfaces>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static Surfaces() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(SurfaceXName), new NamedContentModelEntity(SurfVolumesXName), new NamedContentModelEntity(FeatureXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Surface+, SurfVolumes*, Feature*)
        /// </para>
        /// </summary>
        public Surfaces() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Surface+, SurfVolumes*, Feature*)
        /// </para>
        /// </summary>
        public virtual IList<Surface> Surface {
            get {
                if ((this.SurfaceField == null)) {
                    this.SurfaceField = new XTypedList<Surface>(this, LinqToXsdTypeManager.Instance, SurfaceXName);
                }
                return this.SurfaceField;
            }
            set {
                if ((value == null)) {
                    this.SurfaceField = null;
                }
                else {
                    if ((this.SurfaceField == null)) {
                        this.SurfaceField = XTypedList<Surface>.Initialize(this, LinqToXsdTypeManager.Instance, value, SurfaceXName);
                    }
                    else {
                        XTypedServices.SetList<Surface>(this.SurfaceField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Surface+, SurfVolumes*, Feature*)
        /// </para>
        /// </summary>
        public virtual IList<SurfVolumes> SurfVolumes {
            get {
                if ((this.SurfVolumesField == null)) {
                    this.SurfVolumesField = new XTypedList<SurfVolumes>(this, LinqToXsdTypeManager.Instance, SurfVolumesXName);
                }
                return this.SurfVolumesField;
            }
            set {
                if ((value == null)) {
                    this.SurfVolumesField = null;
                }
                else {
                    if ((this.SurfVolumesField == null)) {
                        this.SurfVolumesField = XTypedList<SurfVolumes>.Initialize(this, LinqToXsdTypeManager.Instance, value, SurfVolumesXName);
                    }
                    else {
                        XTypedServices.SetList<SurfVolumes>(this.SurfVolumesField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Surface+, SurfVolumes*, Feature*)
        /// </para>
        /// </summary>
        public virtual IList<Feature> Feature {
            get {
                if ((this.FeatureField == null)) {
                    this.FeatureField = new XTypedList<Feature>(this, LinqToXsdTypeManager.Instance, FeatureXName);
                }
                return this.FeatureField;
            }
            set {
                if ((value == null)) {
                    this.FeatureField = null;
                }
                else {
                    if ((this.FeatureField == null)) {
                        this.FeatureField = XTypedList<Feature>.Initialize(this, LinqToXsdTypeManager.Instance, value, FeatureXName);
                    }
                    else {
                        XTypedServices.SetList<Feature>(this.FeatureField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string desc {
            get {
                XAttribute x = this.Attribute(descXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(descXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string name {
            get {
                XAttribute x = this.Attribute(nameXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(nameXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual LandXml.v1_2.stateType? state {
            get {
                XAttribute x = this.Attribute(stateXName);
                if ((x == null)) {
                    return null;
                }
                return ((LandXml.v1_2.stateType)(Enum.Parse(typeof(LandXml.v1_2.stateType), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetAttribute(stateXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static Surfaces Load(string xmlFile) {
            return XTypedServices.Load<Surfaces>(xmlFile);
        }
        
        public static Surfaces Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<Surfaces>(xmlFile);
        }
        
        public static Surfaces Parse(string xml) {
            return XTypedServices.Parse<Surfaces>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<Surfaces>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(SurfaceXName, typeof(Surface));
            localElementDictionary.Add(SurfVolumesXName, typeof(SurfVolumes));
            localElementDictionary.Add(FeatureXName, typeof(Feature));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: ((SourceData? | Definition? | Watersheds?)+, Feature*)
    /// </para>
    /// </summary>
    public partial class Surface : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName SourceDataXName = System.Xml.Linq.XName.Get("SourceData", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<SourceData> SourceDataField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName DefinitionXName = System.Xml.Linq.XName.Get("Definition", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<Definition> DefinitionField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName WatershedsXName = System.Xml.Linq.XName.Get("Watersheds", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<Watersheds> WatershedsField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName FeatureXName = System.Xml.Linq.XName.Get("Feature", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<Feature> FeatureField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName nameXName = System.Xml.Linq.XName.Get("name", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName descXName = System.Xml.Linq.XName.Get("desc", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName OIDXName = System.Xml.Linq.XName.Get("OID", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName stateXName = System.Xml.Linq.XName.Get("state", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("Surface", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator Surface(XElement xe) { return XTypedServices.ToXTypedElement<Surface>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static Surface() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new ChoiceContentModelEntity(new NamedContentModelEntity(SourceDataXName), new NamedContentModelEntity(DefinitionXName), new NamedContentModelEntity(WatershedsXName)), new NamedContentModelEntity(FeatureXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: ((SourceData? | Definition? | Watersheds?)+, Feature*)
        /// </para>
        /// </summary>
        public Surface() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((SourceData? | Definition? | Watersheds?)+, Feature*)
        /// </para>
        /// </summary>
        public virtual IList<SourceData> SourceData {
            get {
                if ((this.SourceDataField == null)) {
                    this.SourceDataField = new XTypedList<SourceData>(this, LinqToXsdTypeManager.Instance, SourceDataXName);
                }
                return this.SourceDataField;
            }
            set {
                if ((value == null)) {
                    this.SourceDataField = null;
                }
                else {
                    if ((this.SourceDataField == null)) {
                        this.SourceDataField = XTypedList<SourceData>.Initialize(this, LinqToXsdTypeManager.Instance, value, SourceDataXName);
                    }
                    else {
                        XTypedServices.SetList<SourceData>(this.SourceDataField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((SourceData? | Definition? | Watersheds?)+, Feature*)
        /// </para>
        /// </summary>
        public virtual IList<Definition> Definition {
            get {
                if ((this.DefinitionField == null)) {
                    this.DefinitionField = new XTypedList<Definition>(this, LinqToXsdTypeManager.Instance, DefinitionXName);
                }
                return this.DefinitionField;
            }
            set {
                if ((value == null)) {
                    this.DefinitionField = null;
                }
                else {
                    if ((this.DefinitionField == null)) {
                        this.DefinitionField = XTypedList<Definition>.Initialize(this, LinqToXsdTypeManager.Instance, value, DefinitionXName);
                    }
                    else {
                        XTypedServices.SetList<Definition>(this.DefinitionField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((SourceData? | Definition? | Watersheds?)+, Feature*)
        /// </para>
        /// </summary>
        public virtual IList<Watersheds> Watersheds {
            get {
                if ((this.WatershedsField == null)) {
                    this.WatershedsField = new XTypedList<Watersheds>(this, LinqToXsdTypeManager.Instance, WatershedsXName);
                }
                return this.WatershedsField;
            }
            set {
                if ((value == null)) {
                    this.WatershedsField = null;
                }
                else {
                    if ((this.WatershedsField == null)) {
                        this.WatershedsField = XTypedList<Watersheds>.Initialize(this, LinqToXsdTypeManager.Instance, value, WatershedsXName);
                    }
                    else {
                        XTypedServices.SetList<Watersheds>(this.WatershedsField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: ((SourceData? | Definition? | Watersheds?)+, Feature*)
        /// </para>
        /// </summary>
        public virtual IList<Feature> Feature {
            get {
                if ((this.FeatureField == null)) {
                    this.FeatureField = new XTypedList<Feature>(this, LinqToXsdTypeManager.Instance, FeatureXName);
                }
                return this.FeatureField;
            }
            set {
                if ((value == null)) {
                    this.FeatureField = null;
                }
                else {
                    if ((this.FeatureField == null)) {
                        this.FeatureField = XTypedList<Feature>.Initialize(this, LinqToXsdTypeManager.Instance, value, FeatureXName);
                    }
                    else {
                        XTypedServices.SetList<Feature>(this.FeatureField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual string name {
            get {
                XAttribute x = this.Attribute(nameXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(nameXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string desc {
            get {
                XAttribute x = this.Attribute(descXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(descXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string OID {
            get {
                XAttribute x = this.Attribute(OIDXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(OIDXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual LandXml.v1_2.stateType? state {
            get {
                XAttribute x = this.Attribute(stateXName);
                if ((x == null)) {
                    return null;
                }
                return ((LandXml.v1_2.stateType)(Enum.Parse(typeof(LandXml.v1_2.stateType), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetAttribute(stateXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static Surface Load(string xmlFile) {
            return XTypedServices.Load<Surface>(xmlFile);
        }
        
        public static Surface Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<Surface>(xmlFile);
        }
        
        public static Surface Parse(string xml) {
            return XTypedServices.Parse<Surface>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<Surface>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(SourceDataXName, typeof(SourceData));
            localElementDictionary.Add(DefinitionXName, typeof(Definition));
            localElementDictionary.Add(WatershedsXName, typeof(Watersheds));
            localElementDictionary.Add(FeatureXName, typeof(Feature));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: ((Chain* | PointFiles* | Boundaries* | Breaklines* | Contours* | DataPoints*), Feature*)+
    /// </para>
    /// </summary>
    public partial class SourceData : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ChainXName = System.Xml.Linq.XName.Get("Chain", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<Chain> ChainField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName PointFilesXName = System.Xml.Linq.XName.Get("PointFiles", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<PointFiles> PointFilesField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName BoundariesXName = System.Xml.Linq.XName.Get("Boundaries", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<Boundaries> BoundariesField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName BreaklinesXName = System.Xml.Linq.XName.Get("Breaklines", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<Breaklines> BreaklinesField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ContoursXName = System.Xml.Linq.XName.Get("Contours", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<Contours> ContoursField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName DataPointsXName = System.Xml.Linq.XName.Get("DataPoints", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<DataPoints> DataPointsField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName FeatureXName = System.Xml.Linq.XName.Get("Feature", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<Feature> FeatureField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("SourceData", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator SourceData(XElement xe) { return XTypedServices.ToXTypedElement<SourceData>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static SourceData() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new ChoiceContentModelEntity(new NamedContentModelEntity(ChainXName), new NamedContentModelEntity(PointFilesXName), new NamedContentModelEntity(BoundariesXName), new NamedContentModelEntity(BreaklinesXName), new NamedContentModelEntity(ContoursXName), new NamedContentModelEntity(DataPointsXName)), new NamedContentModelEntity(FeatureXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: ((Chain* | PointFiles* | Boundaries* | Breaklines* | Contours* | DataPoints*), Feature*)+
        /// </para>
        /// </summary>
        public SourceData() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((Chain* | PointFiles* | Boundaries* | Breaklines* | Contours* | DataPoints*), Feature*)+
        /// </para>
        /// </summary>
        public virtual IList<Chain> Chain {
            get {
                if ((this.ChainField == null)) {
                    this.ChainField = new XTypedList<Chain>(this, LinqToXsdTypeManager.Instance, ChainXName);
                }
                return this.ChainField;
            }
            set {
                if ((value == null)) {
                    this.ChainField = null;
                }
                else {
                    if ((this.ChainField == null)) {
                        this.ChainField = XTypedList<Chain>.Initialize(this, LinqToXsdTypeManager.Instance, value, ChainXName);
                    }
                    else {
                        XTypedServices.SetList<Chain>(this.ChainField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((Chain* | PointFiles* | Boundaries* | Breaklines* | Contours* | DataPoints*), Feature*)+
        /// </para>
        /// </summary>
        public virtual IList<PointFiles> PointFiles {
            get {
                if ((this.PointFilesField == null)) {
                    this.PointFilesField = new XTypedList<PointFiles>(this, LinqToXsdTypeManager.Instance, PointFilesXName);
                }
                return this.PointFilesField;
            }
            set {
                if ((value == null)) {
                    this.PointFilesField = null;
                }
                else {
                    if ((this.PointFilesField == null)) {
                        this.PointFilesField = XTypedList<PointFiles>.Initialize(this, LinqToXsdTypeManager.Instance, value, PointFilesXName);
                    }
                    else {
                        XTypedServices.SetList<PointFiles>(this.PointFilesField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((Chain* | PointFiles* | Boundaries* | Breaklines* | Contours* | DataPoints*), Feature*)+
        /// </para>
        /// </summary>
        public virtual IList<Boundaries> Boundaries {
            get {
                if ((this.BoundariesField == null)) {
                    this.BoundariesField = new XTypedList<Boundaries>(this, LinqToXsdTypeManager.Instance, BoundariesXName);
                }
                return this.BoundariesField;
            }
            set {
                if ((value == null)) {
                    this.BoundariesField = null;
                }
                else {
                    if ((this.BoundariesField == null)) {
                        this.BoundariesField = XTypedList<Boundaries>.Initialize(this, LinqToXsdTypeManager.Instance, value, BoundariesXName);
                    }
                    else {
                        XTypedServices.SetList<Boundaries>(this.BoundariesField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((Chain* | PointFiles* | Boundaries* | Breaklines* | Contours* | DataPoints*), Feature*)+
        /// </para>
        /// </summary>
        public virtual IList<Breaklines> Breaklines {
            get {
                if ((this.BreaklinesField == null)) {
                    this.BreaklinesField = new XTypedList<Breaklines>(this, LinqToXsdTypeManager.Instance, BreaklinesXName);
                }
                return this.BreaklinesField;
            }
            set {
                if ((value == null)) {
                    this.BreaklinesField = null;
                }
                else {
                    if ((this.BreaklinesField == null)) {
                        this.BreaklinesField = XTypedList<Breaklines>.Initialize(this, LinqToXsdTypeManager.Instance, value, BreaklinesXName);
                    }
                    else {
                        XTypedServices.SetList<Breaklines>(this.BreaklinesField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((Chain* | PointFiles* | Boundaries* | Breaklines* | Contours* | DataPoints*), Feature*)+
        /// </para>
        /// </summary>
        public virtual IList<Contours> Contours {
            get {
                if ((this.ContoursField == null)) {
                    this.ContoursField = new XTypedList<Contours>(this, LinqToXsdTypeManager.Instance, ContoursXName);
                }
                return this.ContoursField;
            }
            set {
                if ((value == null)) {
                    this.ContoursField = null;
                }
                else {
                    if ((this.ContoursField == null)) {
                        this.ContoursField = XTypedList<Contours>.Initialize(this, LinqToXsdTypeManager.Instance, value, ContoursXName);
                    }
                    else {
                        XTypedServices.SetList<Contours>(this.ContoursField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((Chain* | PointFiles* | Boundaries* | Breaklines* | Contours* | DataPoints*), Feature*)+
        /// </para>
        /// </summary>
        public virtual IList<DataPoints> DataPoints {
            get {
                if ((this.DataPointsField == null)) {
                    this.DataPointsField = new XTypedList<DataPoints>(this, LinqToXsdTypeManager.Instance, DataPointsXName);
                }
                return this.DataPointsField;
            }
            set {
                if ((value == null)) {
                    this.DataPointsField = null;
                }
                else {
                    if ((this.DataPointsField == null)) {
                        this.DataPointsField = XTypedList<DataPoints>.Initialize(this, LinqToXsdTypeManager.Instance, value, DataPointsXName);
                    }
                    else {
                        XTypedServices.SetList<DataPoints>(this.DataPointsField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: ((Chain* | PointFiles* | Boundaries* | Breaklines* | Contours* | DataPoints*), Feature*)+
        /// </para>
        /// </summary>
        public virtual IList<Feature> Feature {
            get {
                if ((this.FeatureField == null)) {
                    this.FeatureField = new XTypedList<Feature>(this, LinqToXsdTypeManager.Instance, FeatureXName);
                }
                return this.FeatureField;
            }
            set {
                if ((value == null)) {
                    this.FeatureField = null;
                }
                else {
                    if ((this.FeatureField == null)) {
                        this.FeatureField = XTypedList<Feature>.Initialize(this, LinqToXsdTypeManager.Instance, value, FeatureXName);
                    }
                    else {
                        XTypedServices.SetList<Feature>(this.FeatureField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static SourceData Load(string xmlFile) {
            return XTypedServices.Load<SourceData>(xmlFile);
        }
        
        public static SourceData Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<SourceData>(xmlFile);
        }
        
        public static SourceData Parse(string xml) {
            return XTypedServices.Parse<SourceData>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<SourceData>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(ChainXName, typeof(Chain));
            localElementDictionary.Add(PointFilesXName, typeof(PointFiles));
            localElementDictionary.Add(BoundariesXName, typeof(Boundaries));
            localElementDictionary.Add(BreaklinesXName, typeof(Breaklines));
            localElementDictionary.Add(ContoursXName, typeof(Contours));
            localElementDictionary.Add(DataPointsXName, typeof(DataPoints));
            localElementDictionary.Add(FeatureXName, typeof(Feature));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (PntList3D*, Feature*)+
    /// </para>
    /// </summary>
    public partial class DataPoints : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName PntList3DXName = System.Xml.Linq.XName.Get("PntList3D", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XSimpleList<PntList3D> PntList3DField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName FeatureXName = System.Xml.Linq.XName.Get("Feature", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<Feature> FeatureField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName nameXName = System.Xml.Linq.XName.Get("name", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName descXName = System.Xml.Linq.XName.Get("desc", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName codeXName = System.Xml.Linq.XName.Get("code", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName stateXName = System.Xml.Linq.XName.Get("state", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName pntRefXName = System.Xml.Linq.XName.Get("pntRef", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName pointGeometryXName = System.Xml.Linq.XName.Get("pointGeometry", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName DTMAttributeXName = System.Xml.Linq.XName.Get("DTMAttribute", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("DataPoints", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator DataPoints(XElement xe) { return XTypedServices.ToXTypedElement<DataPoints>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static DataPoints() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(PntList3DXName), new NamedContentModelEntity(FeatureXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (PntList3D*, Feature*)+
        /// </para>
        /// </summary>
        public DataPoints() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (PntList3D*, Feature*)+
        /// </para>
        /// </summary>
        public virtual IList<PntList3D> PntList3D {
            get {
                if ((this.PntList3DField == null)) {
                    this.PntList3DField = new XSimpleList<PntList3D>(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype, PntList3DXName);
                }
                return this.PntList3DField;
            }
            set {
                if ((value == null)) {
                    this.PntList3DField = null;
                }
                else {
                    if ((this.PntList3DField == null)) {
                        this.PntList3DField = XSimpleList<PntList3D>.Initialize(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype, value, PntList3DXName);
                    }
                    else {
                        XTypedServices.SetList<PntList3D>(this.PntList3DField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (PntList3D*, Feature*)+
        /// </para>
        /// </summary>
        public virtual IList<Feature> Feature {
            get {
                if ((this.FeatureField == null)) {
                    this.FeatureField = new XTypedList<Feature>(this, LinqToXsdTypeManager.Instance, FeatureXName);
                }
                return this.FeatureField;
            }
            set {
                if ((value == null)) {
                    this.FeatureField = null;
                }
                else {
                    if ((this.FeatureField == null)) {
                        this.FeatureField = XTypedList<Feature>.Initialize(this, LinqToXsdTypeManager.Instance, value, FeatureXName);
                    }
                    else {
                        XTypedServices.SetList<Feature>(this.FeatureField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string name {
            get {
                XAttribute x = this.Attribute(nameXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(nameXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string desc {
            get {
                XAttribute x = this.Attribute(descXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(descXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string code {
            get {
                XAttribute x = this.Attribute(codeXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(codeXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual LandXml.v1_2.stateType? state {
            get {
                XAttribute x = this.Attribute(stateXName);
                if ((x == null)) {
                    return null;
                }
                return ((LandXml.v1_2.stateType)(Enum.Parse(typeof(LandXml.v1_2.stateType), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetAttribute(stateXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string pntRef {
            get {
                XAttribute x = this.Attribute(pntRefXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(pntRefXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual LandXml.v1_2.pointGeometryType? pointGeometry {
            get {
                XAttribute x = this.Attribute(pointGeometryXName);
                if ((x == null)) {
                    return null;
                }
                return ((LandXml.v1_2.pointGeometryType)(Enum.Parse(typeof(LandXml.v1_2.pointGeometryType), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetAttribute(pointGeometryXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string DTMAttribute {
            get {
                XAttribute x = this.Attribute(DTMAttributeXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(DTMAttributeXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static DataPoints Load(string xmlFile) {
            return XTypedServices.Load<DataPoints>(xmlFile);
        }
        
        public static DataPoints Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<DataPoints>(xmlFile);
        }
        
        public static DataPoints Parse(string xml) {
            return XTypedServices.Parse<DataPoints>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<DataPoints>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(PntList3DXName, typeof(PntList3D));
            localElementDictionary.Add(FeatureXName, typeof(Feature));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (PointFile+, Feature*)
    /// </para>
    /// </summary>
    public partial class PointFiles : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName PointFileXName = System.Xml.Linq.XName.Get("PointFile", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<PointFile> PointFileField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName FeatureXName = System.Xml.Linq.XName.Get("Feature", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<Feature> FeatureField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("PointFiles", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator PointFiles(XElement xe) { return XTypedServices.ToXTypedElement<PointFiles>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static PointFiles() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(PointFileXName), new NamedContentModelEntity(FeatureXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (PointFile+, Feature*)
        /// </para>
        /// </summary>
        public PointFiles() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (PointFile+, Feature*)
        /// </para>
        /// </summary>
        public virtual IList<PointFile> PointFile {
            get {
                if ((this.PointFileField == null)) {
                    this.PointFileField = new XTypedList<PointFile>(this, LinqToXsdTypeManager.Instance, PointFileXName);
                }
                return this.PointFileField;
            }
            set {
                if ((value == null)) {
                    this.PointFileField = null;
                }
                else {
                    if ((this.PointFileField == null)) {
                        this.PointFileField = XTypedList<PointFile>.Initialize(this, LinqToXsdTypeManager.Instance, value, PointFileXName);
                    }
                    else {
                        XTypedServices.SetList<PointFile>(this.PointFileField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (PointFile+, Feature*)
        /// </para>
        /// </summary>
        public virtual IList<Feature> Feature {
            get {
                if ((this.FeatureField == null)) {
                    this.FeatureField = new XTypedList<Feature>(this, LinqToXsdTypeManager.Instance, FeatureXName);
                }
                return this.FeatureField;
            }
            set {
                if ((value == null)) {
                    this.FeatureField = null;
                }
                else {
                    if ((this.FeatureField == null)) {
                        this.FeatureField = XTypedList<Feature>.Initialize(this, LinqToXsdTypeManager.Instance, value, FeatureXName);
                    }
                    else {
                        XTypedServices.SetList<Feature>(this.FeatureField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static PointFiles Load(string xmlFile) {
            return XTypedServices.Load<PointFiles>(xmlFile);
        }
        
        public static PointFiles Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<PointFiles>(xmlFile);
        }
        
        public static PointFiles Parse(string xml) {
            return XTypedServices.Parse<PointFiles>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<PointFiles>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(PointFileXName, typeof(PointFile));
            localElementDictionary.Add(FeatureXName, typeof(Feature));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    public partial class PointFile : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName fileNameXName = System.Xml.Linq.XName.Get("fileName", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName fileTypeXName = System.Xml.Linq.XName.Get("fileType", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName fileFormatXName = System.Xml.Linq.XName.Get("fileFormat", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("PointFile", "http://www.landxml.org/schema/LandXML-1.2");
        
		public static explicit operator PointFile(XElement xe) { return XTypedServices.ToXTypedElement<PointFile>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public PointFile() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual string fileName {
            get {
                XAttribute x = this.Attribute(fileNameXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(fileNameXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual string fileType {
            get {
                XAttribute x = this.Attribute(fileTypeXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(fileTypeXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual string fileFormat {
            get {
                XAttribute x = this.Attribute(fileFormatXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(fileFormatXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static PointFile Load(string xmlFile) {
            return XTypedServices.Load<PointFile>(xmlFile);
        }
        
        public static PointFile Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<PointFile>(xmlFile);
        }
        
        public static PointFile Parse(string xml) {
            return XTypedServices.Parse<PointFile>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<PointFile>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Boundary+, Feature*)
    /// </para>
    /// </summary>
    public partial class Boundaries : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName BoundaryXName = System.Xml.Linq.XName.Get("Boundary", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<Boundary> BoundaryField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName FeatureXName = System.Xml.Linq.XName.Get("Feature", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<Feature> FeatureField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("Boundaries", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator Boundaries(XElement xe) { return XTypedServices.ToXTypedElement<Boundaries>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static Boundaries() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(BoundaryXName), new NamedContentModelEntity(FeatureXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Boundary+, Feature*)
        /// </para>
        /// </summary>
        public Boundaries() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Boundary+, Feature*)
        /// </para>
        /// </summary>
        public virtual IList<Boundary> Boundary {
            get {
                if ((this.BoundaryField == null)) {
                    this.BoundaryField = new XTypedList<Boundary>(this, LinqToXsdTypeManager.Instance, BoundaryXName);
                }
                return this.BoundaryField;
            }
            set {
                if ((value == null)) {
                    this.BoundaryField = null;
                }
                else {
                    if ((this.BoundaryField == null)) {
                        this.BoundaryField = XTypedList<Boundary>.Initialize(this, LinqToXsdTypeManager.Instance, value, BoundaryXName);
                    }
                    else {
                        XTypedServices.SetList<Boundary>(this.BoundaryField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Boundary+, Feature*)
        /// </para>
        /// </summary>
        public virtual IList<Feature> Feature {
            get {
                if ((this.FeatureField == null)) {
                    this.FeatureField = new XTypedList<Feature>(this, LinqToXsdTypeManager.Instance, FeatureXName);
                }
                return this.FeatureField;
            }
            set {
                if ((value == null)) {
                    this.FeatureField = null;
                }
                else {
                    if ((this.FeatureField == null)) {
                        this.FeatureField = XTypedList<Feature>.Initialize(this, LinqToXsdTypeManager.Instance, value, FeatureXName);
                    }
                    else {
                        XTypedServices.SetList<Feature>(this.FeatureField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static Boundaries Load(string xmlFile) {
            return XTypedServices.Load<Boundaries>(xmlFile);
        }
        
        public static Boundaries Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<Boundaries>(xmlFile);
        }
        
        public static Boundaries Parse(string xml) {
            return XTypedServices.Parse<Boundaries>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<Boundaries>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(BoundaryXName, typeof(Boundary));
            localElementDictionary.Add(FeatureXName, typeof(Feature));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: ((PntList2D | PntList3D), Feature*)
    /// </para>
    /// </summary>
    public partial class Boundary : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName PntList2DXName = System.Xml.Linq.XName.Get("PntList2D", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName PntList3DXName = System.Xml.Linq.XName.Get("PntList3D", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName FeatureXName = System.Xml.Linq.XName.Get("Feature", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<Feature> FeatureField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName bndTypeXName = System.Xml.Linq.XName.Get("bndType", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName edgeTrimXName = System.Xml.Linq.XName.Get("edgeTrim", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName areaXName = System.Xml.Linq.XName.Get("area", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName descXName = System.Xml.Linq.XName.Get("desc", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName nameXName = System.Xml.Linq.XName.Get("name", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName stateXName = System.Xml.Linq.XName.Get("state", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("Boundary", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator Boundary(XElement xe) { return XTypedServices.ToXTypedElement<Boundary>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static Boundary() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new ChoiceContentModelEntity(new NamedContentModelEntity(PntList2DXName), new NamedContentModelEntity(PntList3DXName)), new NamedContentModelEntity(FeatureXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: ((PntList2D | PntList3D), Feature*)
        /// </para>
        /// </summary>
        public Boundary() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((PntList2D | PntList3D), Feature*)
        /// </para>
        /// </summary>
        public virtual PntList2D PntList2D {
            get {
                XElement x = this.GetElement(PntList2DXName);
                return ((PntList2D)(x));
            }
            set {
                this.SetElement(PntList2DXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((PntList2D | PntList3D), Feature*)
        /// </para>
        /// </summary>
        public virtual PntList3D PntList3D {
            get {
                XElement x = this.GetElement(PntList3DXName);
                return ((PntList3D)(x));
            }
            set {
                this.SetElement(PntList3DXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: ((PntList2D | PntList3D), Feature*)
        /// </para>
        /// </summary>
        public virtual IList<Feature> Feature {
            get {
                if ((this.FeatureField == null)) {
                    this.FeatureField = new XTypedList<Feature>(this, LinqToXsdTypeManager.Instance, FeatureXName);
                }
                return this.FeatureField;
            }
            set {
                if ((value == null)) {
                    this.FeatureField = null;
                }
                else {
                    if ((this.FeatureField == null)) {
                        this.FeatureField = XTypedList<Feature>.Initialize(this, LinqToXsdTypeManager.Instance, value, FeatureXName);
                    }
                    else {
                        XTypedServices.SetList<Feature>(this.FeatureField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual string bndType {
            get {
                XAttribute x = this.Attribute(bndTypeXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(bndTypeXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual bool edgeTrim {
            get {
                XAttribute x = this.Attribute(edgeTrimXName);
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
            set {
                this.SetAttribute(edgeTrimXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Double? area {
            get {
                XAttribute x = this.Attribute(areaXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetAttribute(areaXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string desc {
            get {
                XAttribute x = this.Attribute(descXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(descXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string name {
            get {
                XAttribute x = this.Attribute(nameXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(nameXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual LandXml.v1_2.stateType? state {
            get {
                XAttribute x = this.Attribute(stateXName);
                if ((x == null)) {
                    return null;
                }
                return ((LandXml.v1_2.stateType)(Enum.Parse(typeof(LandXml.v1_2.stateType), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetAttribute(stateXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static Boundary Load(string xmlFile) {
            return XTypedServices.Load<Boundary>(xmlFile);
        }
        
        public static Boundary Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<Boundary>(xmlFile);
        }
        
        public static Boundary Parse(string xml) {
            return XTypedServices.Parse<Boundary>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<Boundary>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(PntList2DXName, typeof(PntList2D));
            localElementDictionary.Add(PntList3DXName, typeof(PntList3D));
            localElementDictionary.Add(FeatureXName, typeof(Feature));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Breakline*, RetWall*, Feature*)
    /// </para>
    /// </summary>
    public partial class Breaklines : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName BreaklineXName = System.Xml.Linq.XName.Get("Breakline", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<Breakline> BreaklineField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName RetWallXName = System.Xml.Linq.XName.Get("RetWall", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<RetWall> RetWallField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName FeatureXName = System.Xml.Linq.XName.Get("Feature", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<Feature> FeatureField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("Breaklines", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator Breaklines(XElement xe) { return XTypedServices.ToXTypedElement<Breaklines>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static Breaklines() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(BreaklineXName), new NamedContentModelEntity(RetWallXName), new NamedContentModelEntity(FeatureXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Breakline*, RetWall*, Feature*)
        /// </para>
        /// </summary>
        public Breaklines() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Breakline*, RetWall*, Feature*)
        /// </para>
        /// </summary>
        public virtual IList<Breakline> Breakline {
            get {
                if ((this.BreaklineField == null)) {
                    this.BreaklineField = new XTypedList<Breakline>(this, LinqToXsdTypeManager.Instance, BreaklineXName);
                }
                return this.BreaklineField;
            }
            set {
                if ((value == null)) {
                    this.BreaklineField = null;
                }
                else {
                    if ((this.BreaklineField == null)) {
                        this.BreaklineField = XTypedList<Breakline>.Initialize(this, LinqToXsdTypeManager.Instance, value, BreaklineXName);
                    }
                    else {
                        XTypedServices.SetList<Breakline>(this.BreaklineField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Breakline*, RetWall*, Feature*)
        /// </para>
        /// </summary>
        public virtual IList<RetWall> RetWall {
            get {
                if ((this.RetWallField == null)) {
                    this.RetWallField = new XTypedList<RetWall>(this, LinqToXsdTypeManager.Instance, RetWallXName);
                }
                return this.RetWallField;
            }
            set {
                if ((value == null)) {
                    this.RetWallField = null;
                }
                else {
                    if ((this.RetWallField == null)) {
                        this.RetWallField = XTypedList<RetWall>.Initialize(this, LinqToXsdTypeManager.Instance, value, RetWallXName);
                    }
                    else {
                        XTypedServices.SetList<RetWall>(this.RetWallField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Breakline*, RetWall*, Feature*)
        /// </para>
        /// </summary>
        public virtual IList<Feature> Feature {
            get {
                if ((this.FeatureField == null)) {
                    this.FeatureField = new XTypedList<Feature>(this, LinqToXsdTypeManager.Instance, FeatureXName);
                }
                return this.FeatureField;
            }
            set {
                if ((value == null)) {
                    this.FeatureField = null;
                }
                else {
                    if ((this.FeatureField == null)) {
                        this.FeatureField = XTypedList<Feature>.Initialize(this, LinqToXsdTypeManager.Instance, value, FeatureXName);
                    }
                    else {
                        XTypedServices.SetList<Feature>(this.FeatureField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static Breaklines Load(string xmlFile) {
            return XTypedServices.Load<Breaklines>(xmlFile);
        }
        
        public static Breaklines Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<Breaklines>(xmlFile);
        }
        
        public static Breaklines Parse(string xml) {
            return XTypedServices.Parse<Breaklines>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<Breaklines>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(BreaklineXName, typeof(Breakline));
            localElementDictionary.Add(RetWallXName, typeof(RetWall));
            localElementDictionary.Add(FeatureXName, typeof(Feature));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: ((PntList2D | PntList3D), Feature*)
    /// </para>
    /// </summary>
    public partial class Breakline : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName PntList2DXName = System.Xml.Linq.XName.Get("PntList2D", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName PntList3DXName = System.Xml.Linq.XName.Get("PntList3D", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName FeatureXName = System.Xml.Linq.XName.Get("Feature", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<Feature> FeatureField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName brkTypeXName = System.Xml.Linq.XName.Get("brkType", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName descXName = System.Xml.Linq.XName.Get("desc", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName nameXName = System.Xml.Linq.XName.Get("name", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName stateXName = System.Xml.Linq.XName.Get("state", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("Breakline", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator Breakline(XElement xe) { return XTypedServices.ToXTypedElement<Breakline>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static Breakline() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new ChoiceContentModelEntity(new NamedContentModelEntity(PntList2DXName), new NamedContentModelEntity(PntList3DXName)), new NamedContentModelEntity(FeatureXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: ((PntList2D | PntList3D), Feature*)
        /// </para>
        /// </summary>
        public Breakline() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((PntList2D | PntList3D), Feature*)
        /// </para>
        /// </summary>
        public virtual PntList2D PntList2D {
            get {
                XElement x = this.GetElement(PntList2DXName);
                return ((PntList2D)(x));
            }
            set {
                this.SetElement(PntList2DXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((PntList2D | PntList3D), Feature*)
        /// </para>
        /// </summary>
        public virtual PntList3D PntList3D {
            get {
                XElement x = this.GetElement(PntList3DXName);
                return ((PntList3D)(x));
            }
            set {
                this.SetElement(PntList3DXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: ((PntList2D | PntList3D), Feature*)
        /// </para>
        /// </summary>
        public virtual IList<Feature> Feature {
            get {
                if ((this.FeatureField == null)) {
                    this.FeatureField = new XTypedList<Feature>(this, LinqToXsdTypeManager.Instance, FeatureXName);
                }
                return this.FeatureField;
            }
            set {
                if ((value == null)) {
                    this.FeatureField = null;
                }
                else {
                    if ((this.FeatureField == null)) {
                        this.FeatureField = XTypedList<Feature>.Initialize(this, LinqToXsdTypeManager.Instance, value, FeatureXName);
                    }
                    else {
                        XTypedServices.SetList<Feature>(this.FeatureField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual LandXml.v1_2.breakLineType? brkType {
            get {
                XAttribute x = this.Attribute(brkTypeXName);
                if ((x == null)) {
                    return null;
                }
                return ((LandXml.v1_2.breakLineType)(Enum.Parse(typeof(LandXml.v1_2.breakLineType), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetAttribute(brkTypeXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string desc {
            get {
                XAttribute x = this.Attribute(descXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(descXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string name {
            get {
                XAttribute x = this.Attribute(nameXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(nameXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual LandXml.v1_2.stateType? state {
            get {
                XAttribute x = this.Attribute(stateXName);
                if ((x == null)) {
                    return null;
                }
                return ((LandXml.v1_2.stateType)(Enum.Parse(typeof(LandXml.v1_2.stateType), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetAttribute(stateXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static Breakline Load(string xmlFile) {
            return XTypedServices.Load<Breakline>(xmlFile);
        }
        
        public static Breakline Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<Breakline>(xmlFile);
        }
        
        public static Breakline Parse(string xml) {
            return XTypedServices.Parse<Breakline>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<Breakline>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(PntList2DXName, typeof(PntList2D));
            localElementDictionary.Add(PntList3DXName, typeof(PntList3D));
            localElementDictionary.Add(FeatureXName, typeof(Feature));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (RetWallPnt+, Feature*)
    /// </para>
    /// </summary>
    public partial class RetWall : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName RetWallPntXName = System.Xml.Linq.XName.Get("RetWallPnt", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<RetWallPnt> RetWallPntField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName FeatureXName = System.Xml.Linq.XName.Get("Feature", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<Feature> FeatureField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName descXName = System.Xml.Linq.XName.Get("desc", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName nameXName = System.Xml.Linq.XName.Get("name", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName stateXName = System.Xml.Linq.XName.Get("state", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("RetWall", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator RetWall(XElement xe) { return XTypedServices.ToXTypedElement<RetWall>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static RetWall() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(RetWallPntXName), new NamedContentModelEntity(FeatureXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (RetWallPnt+, Feature*)
        /// </para>
        /// </summary>
        public RetWall() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (RetWallPnt+, Feature*)
        /// </para>
        /// </summary>
        public virtual IList<RetWallPnt> RetWallPnt {
            get {
                if ((this.RetWallPntField == null)) {
                    this.RetWallPntField = new XTypedList<RetWallPnt>(this, LinqToXsdTypeManager.Instance, RetWallPntXName);
                }
                return this.RetWallPntField;
            }
            set {
                if ((value == null)) {
                    this.RetWallPntField = null;
                }
                else {
                    if ((this.RetWallPntField == null)) {
                        this.RetWallPntField = XTypedList<RetWallPnt>.Initialize(this, LinqToXsdTypeManager.Instance, value, RetWallPntXName);
                    }
                    else {
                        XTypedServices.SetList<RetWallPnt>(this.RetWallPntField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (RetWallPnt+, Feature*)
        /// </para>
        /// </summary>
        public virtual IList<Feature> Feature {
            get {
                if ((this.FeatureField == null)) {
                    this.FeatureField = new XTypedList<Feature>(this, LinqToXsdTypeManager.Instance, FeatureXName);
                }
                return this.FeatureField;
            }
            set {
                if ((value == null)) {
                    this.FeatureField = null;
                }
                else {
                    if ((this.FeatureField == null)) {
                        this.FeatureField = XTypedList<Feature>.Initialize(this, LinqToXsdTypeManager.Instance, value, FeatureXName);
                    }
                    else {
                        XTypedServices.SetList<Feature>(this.FeatureField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string desc {
            get {
                XAttribute x = this.Attribute(descXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(descXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string name {
            get {
                XAttribute x = this.Attribute(nameXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(nameXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual LandXml.v1_2.stateType? state {
            get {
                XAttribute x = this.Attribute(stateXName);
                if ((x == null)) {
                    return null;
                }
                return ((LandXml.v1_2.stateType)(Enum.Parse(typeof(LandXml.v1_2.stateType), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetAttribute(stateXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static RetWall Load(string xmlFile) {
            return XTypedServices.Load<RetWall>(xmlFile);
        }
        
        public static RetWall Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<RetWall>(xmlFile);
        }
        
        public static RetWall Parse(string xml) {
            return XTypedServices.Parse<RetWall>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<RetWall>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(RetWallPntXName, typeof(RetWallPnt));
            localElementDictionary.Add(FeatureXName, typeof(Feature));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    public partial class RetWallPnt : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName heightXName = System.Xml.Linq.XName.Get("height", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName offsetXName = System.Xml.Linq.XName.Get("offset", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName nameXName = System.Xml.Linq.XName.Get("name", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName descXName = System.Xml.Linq.XName.Get("desc", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName codeXName = System.Xml.Linq.XName.Get("code", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName stateXName = System.Xml.Linq.XName.Get("state", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName pntRefXName = System.Xml.Linq.XName.Get("pntRef", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName featureRefXName = System.Xml.Linq.XName.Get("featureRef", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName pointGeometryXName = System.Xml.Linq.XName.Get("pointGeometry", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName DTMAttributeXName = System.Xml.Linq.XName.Get("DTMAttribute", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName timeStampXName = System.Xml.Linq.XName.Get("timeStamp", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName roleXName = System.Xml.Linq.XName.Get("role", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("RetWallPnt", "http://www.landxml.org/schema/LandXML-1.2");
        
		public static explicit operator RetWallPnt(XElement xe) { return XTypedServices.ToXTypedElement<RetWallPnt>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public RetWallPnt() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual double height {
            get {
                XAttribute x = this.Attribute(heightXName);
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetAttribute(heightXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual double offset {
            get {
                XAttribute x = this.Attribute(offsetXName);
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetAttribute(offsetXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string name {
            get {
                XAttribute x = this.Attribute(nameXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(nameXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string desc {
            get {
                XAttribute x = this.Attribute(descXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(descXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string code {
            get {
                XAttribute x = this.Attribute(codeXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(codeXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual LandXml.v1_2.stateType? state {
            get {
                XAttribute x = this.Attribute(stateXName);
                if ((x == null)) {
                    return null;
                }
                return ((LandXml.v1_2.stateType)(Enum.Parse(typeof(LandXml.v1_2.stateType), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetAttribute(stateXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string pntRef {
            get {
                XAttribute x = this.Attribute(pntRefXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(pntRefXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string featureRef {
            get {
                XAttribute x = this.Attribute(featureRefXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(featureRefXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual LandXml.v1_2.pointGeometryType? pointGeometry {
            get {
                XAttribute x = this.Attribute(pointGeometryXName);
                if ((x == null)) {
                    return null;
                }
                return ((LandXml.v1_2.pointGeometryType)(Enum.Parse(typeof(LandXml.v1_2.pointGeometryType), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetAttribute(pointGeometryXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string DTMAttribute {
            get {
                XAttribute x = this.Attribute(DTMAttributeXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(DTMAttributeXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.DateTime? timeStamp {
            get {
                XAttribute x = this.Attribute(timeStampXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<System.DateTime>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.DateTime).Datatype);
            }
            set {
                this.SetAttribute(timeStampXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.DateTime).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string role {
            get {
                XAttribute x = this.Attribute(roleXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(roleXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static RetWallPnt Load(string xmlFile) {
            return XTypedServices.Load<RetWallPnt>(xmlFile);
        }
        
        public static RetWallPnt Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<RetWallPnt>(xmlFile);
        }
        
        public static RetWallPnt Parse(string xml) {
            return XTypedServices.Parse<RetWallPnt>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<RetWallPnt>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Contour+, Feature*)
    /// </para>
    /// </summary>
    public partial class Contours : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ContourXName = System.Xml.Linq.XName.Get("Contour", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<Contour> ContourField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName FeatureXName = System.Xml.Linq.XName.Get("Feature", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<Feature> FeatureField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("Contours", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator Contours(XElement xe) { return XTypedServices.ToXTypedElement<Contours>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static Contours() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(ContourXName), new NamedContentModelEntity(FeatureXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Contour+, Feature*)
        /// </para>
        /// </summary>
        public Contours() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Contour+, Feature*)
        /// </para>
        /// </summary>
        public virtual IList<Contour> Contour {
            get {
                if ((this.ContourField == null)) {
                    this.ContourField = new XTypedList<Contour>(this, LinqToXsdTypeManager.Instance, ContourXName);
                }
                return this.ContourField;
            }
            set {
                if ((value == null)) {
                    this.ContourField = null;
                }
                else {
                    if ((this.ContourField == null)) {
                        this.ContourField = XTypedList<Contour>.Initialize(this, LinqToXsdTypeManager.Instance, value, ContourXName);
                    }
                    else {
                        XTypedServices.SetList<Contour>(this.ContourField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Contour+, Feature*)
        /// </para>
        /// </summary>
        public virtual IList<Feature> Feature {
            get {
                if ((this.FeatureField == null)) {
                    this.FeatureField = new XTypedList<Feature>(this, LinqToXsdTypeManager.Instance, FeatureXName);
                }
                return this.FeatureField;
            }
            set {
                if ((value == null)) {
                    this.FeatureField = null;
                }
                else {
                    if ((this.FeatureField == null)) {
                        this.FeatureField = XTypedList<Feature>.Initialize(this, LinqToXsdTypeManager.Instance, value, FeatureXName);
                    }
                    else {
                        XTypedServices.SetList<Feature>(this.FeatureField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static Contours Load(string xmlFile) {
            return XTypedServices.Load<Contours>(xmlFile);
        }
        
        public static Contours Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<Contours>(xmlFile);
        }
        
        public static Contours Parse(string xml) {
            return XTypedServices.Parse<Contours>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<Contours>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(ContourXName, typeof(Contour));
            localElementDictionary.Add(FeatureXName, typeof(Feature));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (PntList2D, Feature*)
    /// </para>
    /// </summary>
    public partial class Contour : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName PntList2DXName = System.Xml.Linq.XName.Get("PntList2D", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName FeatureXName = System.Xml.Linq.XName.Get("Feature", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<Feature> FeatureField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName elevXName = System.Xml.Linq.XName.Get("elev", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("Contour", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator Contour(XElement xe) { return XTypedServices.ToXTypedElement<Contour>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static Contour() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(PntList2DXName), new NamedContentModelEntity(FeatureXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (PntList2D, Feature*)
        /// </para>
        /// </summary>
        public Contour() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (PntList2D, Feature*)
        /// </para>
        /// </summary>
        public virtual PntList2D PntList2D {
            get {
                XElement x = this.GetElement(PntList2DXName);
                return ((PntList2D)(x));
            }
            set {
                this.SetElement(PntList2DXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (PntList2D, Feature*)
        /// </para>
        /// </summary>
        public virtual IList<Feature> Feature {
            get {
                if ((this.FeatureField == null)) {
                    this.FeatureField = new XTypedList<Feature>(this, LinqToXsdTypeManager.Instance, FeatureXName);
                }
                return this.FeatureField;
            }
            set {
                if ((value == null)) {
                    this.FeatureField = null;
                }
                else {
                    if ((this.FeatureField == null)) {
                        this.FeatureField = XTypedList<Feature>.Initialize(this, LinqToXsdTypeManager.Instance, value, FeatureXName);
                    }
                    else {
                        XTypedServices.SetList<Feature>(this.FeatureField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual double elev {
            get {
                XAttribute x = this.Attribute(elevXName);
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetAttribute(elevXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static Contour Load(string xmlFile) {
            return XTypedServices.Load<Contour>(xmlFile);
        }
        
        public static Contour Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<Contour>(xmlFile);
        }
        
        public static Contour Parse(string xml) {
            return XTypedServices.Parse<Contour>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<Contour>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(PntList2DXName, typeof(PntList2D));
            localElementDictionary.Add(FeatureXName, typeof(Feature));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Pnts, Faces+, Feature*)
    /// </para>
    /// </summary>
    public partial class Definition : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName PntsXName = System.Xml.Linq.XName.Get("Pnts", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName FacesXName = System.Xml.Linq.XName.Get("Faces", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<Faces> FacesField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName FeatureXName = System.Xml.Linq.XName.Get("Feature", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<Feature> FeatureField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName surfTypeXName = System.Xml.Linq.XName.Get("surfType", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName area2DSurfXName = System.Xml.Linq.XName.Get("area2DSurf", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName area3DSurfXName = System.Xml.Linq.XName.Get("area3DSurf", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName elevMaxXName = System.Xml.Linq.XName.Get("elevMax", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName elevMinXName = System.Xml.Linq.XName.Get("elevMin", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("Definition", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator Definition(XElement xe) { return XTypedServices.ToXTypedElement<Definition>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static Definition() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(PntsXName), new NamedContentModelEntity(FacesXName), new NamedContentModelEntity(FeatureXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Pnts, Faces+, Feature*)
        /// </para>
        /// </summary>
        public Definition() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (Pnts, Faces+, Feature*)
        /// </para>
        /// </summary>
        public virtual Pnts Pnts {
            get {
                XElement x = this.GetElement(PntsXName);
                return ((Pnts)(x));
            }
            set {
                this.SetElement(PntsXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Pnts, Faces+, Feature*)
        /// </para>
        /// </summary>
        public virtual IList<Faces> Faces {
            get {
                if ((this.FacesField == null)) {
                    this.FacesField = new XTypedList<Faces>(this, LinqToXsdTypeManager.Instance, FacesXName);
                }
                return this.FacesField;
            }
            set {
                if ((value == null)) {
                    this.FacesField = null;
                }
                else {
                    if ((this.FacesField == null)) {
                        this.FacesField = XTypedList<Faces>.Initialize(this, LinqToXsdTypeManager.Instance, value, FacesXName);
                    }
                    else {
                        XTypedServices.SetList<Faces>(this.FacesField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Pnts, Faces+, Feature*)
        /// </para>
        /// </summary>
        public virtual IList<Feature> Feature {
            get {
                if ((this.FeatureField == null)) {
                    this.FeatureField = new XTypedList<Feature>(this, LinqToXsdTypeManager.Instance, FeatureXName);
                }
                return this.FeatureField;
            }
            set {
                if ((value == null)) {
                    this.FeatureField = null;
                }
                else {
                    if ((this.FeatureField == null)) {
                        this.FeatureField = XTypedList<Feature>.Initialize(this, LinqToXsdTypeManager.Instance, value, FeatureXName);
                    }
                    else {
                        XTypedServices.SetList<Feature>(this.FeatureField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual LandXml.v1_2.surfTypeEnum surfType {
            get {
                XAttribute x = this.Attribute(surfTypeXName);
                return ((LandXml.v1_2.surfTypeEnum)(Enum.Parse(typeof(LandXml.v1_2.surfTypeEnum), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetAttribute(surfTypeXName, value.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Double? area2DSurf {
            get {
                XAttribute x = this.Attribute(area2DSurfXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetAttribute(area2DSurfXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Double? area3DSurf {
            get {
                XAttribute x = this.Attribute(area3DSurfXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetAttribute(area3DSurfXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Double? elevMax {
            get {
                XAttribute x = this.Attribute(elevMaxXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetAttribute(elevMaxXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Double? elevMin {
            get {
                XAttribute x = this.Attribute(elevMinXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetAttribute(elevMinXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static Definition Load(string xmlFile) {
            return XTypedServices.Load<Definition>(xmlFile);
        }
        
        public static Definition Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<Definition>(xmlFile);
        }
        
        public static Definition Parse(string xml) {
            return XTypedServices.Parse<Definition>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<Definition>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(PntsXName, typeof(Pnts));
            localElementDictionary.Add(FacesXName, typeof(Faces));
            localElementDictionary.Add(FeatureXName, typeof(Feature));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (P+)
    /// </para>
    /// </summary>
    public partial class Pnts : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName PXName = System.Xml.Linq.XName.Get("P", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<P> PField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("Pnts", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator Pnts(XElement xe) { return XTypedServices.ToXTypedElement<Pnts>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static Pnts() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(PXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (P+)
        /// </para>
        /// </summary>
        public Pnts() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (P+)
        /// </para>
        /// </summary>
        public virtual IList<P> P {
            get {
                if ((this.PField == null)) {
                    this.PField = new XTypedList<P>(this, LinqToXsdTypeManager.Instance, PXName);
                }
                return this.PField;
            }
            set {
                if ((value == null)) {
                    this.PField = null;
                }
                else {
                    if ((this.PField == null)) {
                        this.PField = XTypedList<P>.Initialize(this, LinqToXsdTypeManager.Instance, value, PXName);
                    }
                    else {
                        XTypedServices.SetList<P>(this.PField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static Pnts Load(string xmlFile) {
            return XTypedServices.Load<Pnts>(xmlFile);
        }
        
        public static Pnts Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<Pnts>(xmlFile);
        }
        
        public static Pnts Parse(string xml) {
            return XTypedServices.Parse<Pnts>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<Pnts>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(PXName, typeof(P));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    public partial class P : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName idXName = System.Xml.Linq.XName.Get("id", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName nameXName = System.Xml.Linq.XName.Get("name", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName descXName = System.Xml.Linq.XName.Get("desc", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName codeXName = System.Xml.Linq.XName.Get("code", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName stateXName = System.Xml.Linq.XName.Get("state", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName pntRefXName = System.Xml.Linq.XName.Get("pntRef", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName featureRefXName = System.Xml.Linq.XName.Get("featureRef", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName pointGeometryXName = System.Xml.Linq.XName.Get("pointGeometry", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName DTMAttributeXName = System.Xml.Linq.XName.Get("DTMAttribute", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName timeStampXName = System.Xml.Linq.XName.Get("timeStamp", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName roleXName = System.Xml.Linq.XName.Get("role", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName determinedTimeStampXName = System.Xml.Linq.XName.Get("determinedTimeStamp", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ellipsoidHeightXName = System.Xml.Linq.XName.Get("ellipsoidHeight", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName latitudeXName = System.Xml.Linq.XName.Get("latitude", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName longitudeXName = System.Xml.Linq.XName.Get("longitude", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName zoneXName = System.Xml.Linq.XName.Get("zone", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName northingStdErrorXName = System.Xml.Linq.XName.Get("northingStdError", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName eastingStdErrorXName = System.Xml.Linq.XName.Get("eastingStdError", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName elevationStdErrorXName = System.Xml.Linq.XName.Get("elevationStdError", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("P", "http://www.landxml.org/schema/LandXML-1.2");
        
		public static explicit operator P(XElement xe) { return XTypedServices.ToXTypedElement<P>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public P() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual decimal id {
            get {
                XAttribute x = this.Attribute(idXName);
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.PositiveInteger).Datatype);
            }
            set {
                this.SetAttribute(idXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.PositiveInteger).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string name {
            get {
                XAttribute x = this.Attribute(nameXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(nameXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string desc {
            get {
                XAttribute x = this.Attribute(descXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(descXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string code {
            get {
                XAttribute x = this.Attribute(codeXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(codeXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual LandXml.v1_2.stateType? state {
            get {
                XAttribute x = this.Attribute(stateXName);
                if ((x == null)) {
                    return null;
                }
                return ((LandXml.v1_2.stateType)(Enum.Parse(typeof(LandXml.v1_2.stateType), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetAttribute(stateXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string pntRef {
            get {
                XAttribute x = this.Attribute(pntRefXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(pntRefXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string featureRef {
            get {
                XAttribute x = this.Attribute(featureRefXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(featureRefXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual LandXml.v1_2.pointGeometryType? pointGeometry {
            get {
                XAttribute x = this.Attribute(pointGeometryXName);
                if ((x == null)) {
                    return null;
                }
                return ((LandXml.v1_2.pointGeometryType)(Enum.Parse(typeof(LandXml.v1_2.pointGeometryType), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetAttribute(pointGeometryXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string DTMAttribute {
            get {
                XAttribute x = this.Attribute(DTMAttributeXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(DTMAttributeXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.DateTime? timeStamp {
            get {
                XAttribute x = this.Attribute(timeStampXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<System.DateTime>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.DateTime).Datatype);
            }
            set {
                this.SetAttribute(timeStampXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.DateTime).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string role {
            get {
                XAttribute x = this.Attribute(roleXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(roleXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.DateTime? determinedTimeStamp {
            get {
                XAttribute x = this.Attribute(determinedTimeStampXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<System.DateTime>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.DateTime).Datatype);
            }
            set {
                this.SetAttribute(determinedTimeStampXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.DateTime).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Double? ellipsoidHeight {
            get {
                XAttribute x = this.Attribute(ellipsoidHeightXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetAttribute(ellipsoidHeightXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Double? latitude {
            get {
                XAttribute x = this.Attribute(latitudeXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetAttribute(latitudeXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Double? longitude {
            get {
                XAttribute x = this.Attribute(longitudeXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetAttribute(longitudeXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string zone {
            get {
                XAttribute x = this.Attribute(zoneXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(zoneXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Double? northingStdError {
            get {
                XAttribute x = this.Attribute(northingStdErrorXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetAttribute(northingStdErrorXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Double? eastingStdError {
            get {
                XAttribute x = this.Attribute(eastingStdErrorXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetAttribute(eastingStdErrorXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Double? elevationStdError {
            get {
                XAttribute x = this.Attribute(elevationStdErrorXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetAttribute(elevationStdErrorXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static P Load(string xmlFile) {
            return XTypedServices.Load<P>(xmlFile);
        }
        
        public static P Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<P>(xmlFile);
        }
        
        public static P Parse(string xml) {
            return XTypedServices.Parse<P>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<P>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (F+, Feature*)
    /// </para>
    /// </summary>
    public partial class Faces : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName FXName = System.Xml.Linq.XName.Get("F", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<F> FField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName FeatureXName = System.Xml.Linq.XName.Get("Feature", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<Feature> FeatureField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName descXName = System.Xml.Linq.XName.Get("desc", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName nameXName = System.Xml.Linq.XName.Get("name", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName stateXName = System.Xml.Linq.XName.Get("state", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("Faces", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator Faces(XElement xe) { return XTypedServices.ToXTypedElement<Faces>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static Faces() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(FXName), new NamedContentModelEntity(FeatureXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (F+, Feature*)
        /// </para>
        /// </summary>
        public Faces() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (F+, Feature*)
        /// </para>
        /// </summary>
        public virtual IList<F> F {
            get {
                if ((this.FField == null)) {
                    this.FField = new XTypedList<F>(this, LinqToXsdTypeManager.Instance, FXName);
                }
                return this.FField;
            }
            set {
                if ((value == null)) {
                    this.FField = null;
                }
                else {
                    if ((this.FField == null)) {
                        this.FField = XTypedList<F>.Initialize(this, LinqToXsdTypeManager.Instance, value, FXName);
                    }
                    else {
                        XTypedServices.SetList<F>(this.FField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (F+, Feature*)
        /// </para>
        /// </summary>
        public virtual IList<Feature> Feature {
            get {
                if ((this.FeatureField == null)) {
                    this.FeatureField = new XTypedList<Feature>(this, LinqToXsdTypeManager.Instance, FeatureXName);
                }
                return this.FeatureField;
            }
            set {
                if ((value == null)) {
                    this.FeatureField = null;
                }
                else {
                    if ((this.FeatureField == null)) {
                        this.FeatureField = XTypedList<Feature>.Initialize(this, LinqToXsdTypeManager.Instance, value, FeatureXName);
                    }
                    else {
                        XTypedServices.SetList<Feature>(this.FeatureField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string desc {
            get {
                XAttribute x = this.Attribute(descXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(descXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string name {
            get {
                XAttribute x = this.Attribute(nameXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(nameXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual LandXml.v1_2.stateType? state {
            get {
                XAttribute x = this.Attribute(stateXName);
                if ((x == null)) {
                    return null;
                }
                return ((LandXml.v1_2.stateType)(Enum.Parse(typeof(LandXml.v1_2.stateType), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetAttribute(stateXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static Faces Load(string xmlFile) {
            return XTypedServices.Load<Faces>(xmlFile);
        }
        
        public static Faces Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<Faces>(xmlFile);
        }
        
        public static Faces Parse(string xml) {
            return XTypedServices.Parse<Faces>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<Faces>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(FXName, typeof(F));
            localElementDictionary.Add(FeatureXName, typeof(Feature));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    public partial class F : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TypedValueXName = System.Xml.Linq.XName.Get("TypedValue", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName iXName = System.Xml.Linq.XName.Get("i", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName nXName = System.Xml.Linq.XName.Get("n", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName bXName = System.Xml.Linq.XName.Get("b", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("F", "http://www.landxml.org/schema/LandXML-1.2");
        
		public static explicit operator F(XElement xe) { return XTypedServices.ToXTypedElement<F>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public F() {
        }
        
        public virtual IList<decimal> TypedValue {
            get {
                XElement x = this.Untyped;
                return XTypedServices.ParseListValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                this.SetListValue(value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Decimal? i {
            get {
                XAttribute x = this.Attribute(iXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                this.SetAttribute(iXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual IList<decimal> n {
            get {
                XAttribute x = this.Attribute(nXName);
                return XTypedServices.ParseListValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
            set {
                this.SetListAttribute(nXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Decimal? b {
            get {
                XAttribute x = this.Attribute(bXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<decimal>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.PositiveInteger).Datatype);
            }
            set {
                this.SetAttribute(bXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.PositiveInteger).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static F Load(string xmlFile) {
            return XTypedServices.Load<F>(xmlFile);
        }
        
        public static F Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<F>(xmlFile);
        }
        
        public static F Parse(string xml) {
            return XTypedServices.Parse<F>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<F>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Watershed+, Feature*)
    /// </para>
    /// </summary>
    public partial class Watersheds : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName WatershedXName = System.Xml.Linq.XName.Get("Watershed", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<Watershed> WatershedField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName FeatureXName = System.Xml.Linq.XName.Get("Feature", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<Feature> FeatureField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("Watersheds", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator Watersheds(XElement xe) { return XTypedServices.ToXTypedElement<Watersheds>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static Watersheds() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(WatershedXName), new NamedContentModelEntity(FeatureXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Watershed+, Feature*)
        /// </para>
        /// </summary>
        public Watersheds() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Watershed+, Feature*)
        /// </para>
        /// </summary>
        public virtual IList<Watershed> Watershed {
            get {
                if ((this.WatershedField == null)) {
                    this.WatershedField = new XTypedList<Watershed>(this, LinqToXsdTypeManager.Instance, WatershedXName);
                }
                return this.WatershedField;
            }
            set {
                if ((value == null)) {
                    this.WatershedField = null;
                }
                else {
                    if ((this.WatershedField == null)) {
                        this.WatershedField = XTypedList<Watershed>.Initialize(this, LinqToXsdTypeManager.Instance, value, WatershedXName);
                    }
                    else {
                        XTypedServices.SetList<Watershed>(this.WatershedField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Watershed+, Feature*)
        /// </para>
        /// </summary>
        public virtual IList<Feature> Feature {
            get {
                if ((this.FeatureField == null)) {
                    this.FeatureField = new XTypedList<Feature>(this, LinqToXsdTypeManager.Instance, FeatureXName);
                }
                return this.FeatureField;
            }
            set {
                if ((value == null)) {
                    this.FeatureField = null;
                }
                else {
                    if ((this.FeatureField == null)) {
                        this.FeatureField = XTypedList<Feature>.Initialize(this, LinqToXsdTypeManager.Instance, value, FeatureXName);
                    }
                    else {
                        XTypedServices.SetList<Feature>(this.FeatureField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static Watersheds Load(string xmlFile) {
            return XTypedServices.Load<Watersheds>(xmlFile);
        }
        
        public static Watersheds Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<Watersheds>(xmlFile);
        }
        
        public static Watersheds Parse(string xml) {
            return XTypedServices.Parse<Watersheds>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<Watersheds>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(WatershedXName, typeof(Watershed));
            localElementDictionary.Add(FeatureXName, typeof(Feature));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: ((PntList2D | PntList3D), Outlet*, Feature*)
    /// </para>
    /// </summary>
    public partial class Watershed : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName PntList2DXName = System.Xml.Linq.XName.Get("PntList2D", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName PntList3DXName = System.Xml.Linq.XName.Get("PntList3D", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName OutletXName = System.Xml.Linq.XName.Get("Outlet", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<Outlet> OutletField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName FeatureXName = System.Xml.Linq.XName.Get("Feature", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<Feature> FeatureField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName nameXName = System.Xml.Linq.XName.Get("name", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName areaXName = System.Xml.Linq.XName.Get("area", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName descXName = System.Xml.Linq.XName.Get("desc", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("Watershed", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator Watershed(XElement xe) { return XTypedServices.ToXTypedElement<Watershed>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static Watershed() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new ChoiceContentModelEntity(new NamedContentModelEntity(PntList2DXName), new NamedContentModelEntity(PntList3DXName)), new NamedContentModelEntity(OutletXName), new NamedContentModelEntity(FeatureXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: ((PntList2D | PntList3D), Outlet*, Feature*)
        /// </para>
        /// </summary>
        public Watershed() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((PntList2D | PntList3D), Outlet*, Feature*)
        /// </para>
        /// </summary>
        public virtual PntList2D PntList2D {
            get {
                XElement x = this.GetElement(PntList2DXName);
                return ((PntList2D)(x));
            }
            set {
                this.SetElement(PntList2DXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((PntList2D | PntList3D), Outlet*, Feature*)
        /// </para>
        /// </summary>
        public virtual PntList3D PntList3D {
            get {
                XElement x = this.GetElement(PntList3DXName);
                return ((PntList3D)(x));
            }
            set {
                this.SetElement(PntList3DXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: ((PntList2D | PntList3D), Outlet*, Feature*)
        /// </para>
        /// </summary>
        public virtual IList<Outlet> Outlet {
            get {
                if ((this.OutletField == null)) {
                    this.OutletField = new XTypedList<Outlet>(this, LinqToXsdTypeManager.Instance, OutletXName);
                }
                return this.OutletField;
            }
            set {
                if ((value == null)) {
                    this.OutletField = null;
                }
                else {
                    if ((this.OutletField == null)) {
                        this.OutletField = XTypedList<Outlet>.Initialize(this, LinqToXsdTypeManager.Instance, value, OutletXName);
                    }
                    else {
                        XTypedServices.SetList<Outlet>(this.OutletField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: ((PntList2D | PntList3D), Outlet*, Feature*)
        /// </para>
        /// </summary>
        public virtual IList<Feature> Feature {
            get {
                if ((this.FeatureField == null)) {
                    this.FeatureField = new XTypedList<Feature>(this, LinqToXsdTypeManager.Instance, FeatureXName);
                }
                return this.FeatureField;
            }
            set {
                if ((value == null)) {
                    this.FeatureField = null;
                }
                else {
                    if ((this.FeatureField == null)) {
                        this.FeatureField = XTypedList<Feature>.Initialize(this, LinqToXsdTypeManager.Instance, value, FeatureXName);
                    }
                    else {
                        XTypedServices.SetList<Feature>(this.FeatureField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual string name {
            get {
                XAttribute x = this.Attribute(nameXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(nameXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Double? area {
            get {
                XAttribute x = this.Attribute(areaXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetAttribute(areaXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string desc {
            get {
                XAttribute x = this.Attribute(descXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(descXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static Watershed Load(string xmlFile) {
            return XTypedServices.Load<Watershed>(xmlFile);
        }
        
        public static Watershed Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<Watershed>(xmlFile);
        }
        
        public static Watershed Parse(string xml) {
            return XTypedServices.Parse<Watershed>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<Watershed>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(PntList2DXName, typeof(PntList2D));
            localElementDictionary.Add(PntList3DXName, typeof(PntList3D));
            localElementDictionary.Add(OutletXName, typeof(Outlet));
            localElementDictionary.Add(FeatureXName, typeof(Feature));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    public partial class Outlet : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName refWSXName = System.Xml.Linq.XName.Get("refWS", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName nameXName = System.Xml.Linq.XName.Get("name", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName descXName = System.Xml.Linq.XName.Get("desc", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName codeXName = System.Xml.Linq.XName.Get("code", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName stateXName = System.Xml.Linq.XName.Get("state", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName pntRefXName = System.Xml.Linq.XName.Get("pntRef", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName featureRefXName = System.Xml.Linq.XName.Get("featureRef", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName pointGeometryXName = System.Xml.Linq.XName.Get("pointGeometry", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName DTMAttributeXName = System.Xml.Linq.XName.Get("DTMAttribute", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName timeStampXName = System.Xml.Linq.XName.Get("timeStamp", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName roleXName = System.Xml.Linq.XName.Get("role", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("Outlet", "http://www.landxml.org/schema/LandXML-1.2");
        
		public static explicit operator Outlet(XElement xe) { return XTypedServices.ToXTypedElement<Outlet>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public Outlet() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string refWS {
            get {
                XAttribute x = this.Attribute(refWSXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(refWSXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string name {
            get {
                XAttribute x = this.Attribute(nameXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(nameXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string desc {
            get {
                XAttribute x = this.Attribute(descXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(descXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string code {
            get {
                XAttribute x = this.Attribute(codeXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(codeXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual LandXml.v1_2.stateType? state {
            get {
                XAttribute x = this.Attribute(stateXName);
                if ((x == null)) {
                    return null;
                }
                return ((LandXml.v1_2.stateType)(Enum.Parse(typeof(LandXml.v1_2.stateType), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetAttribute(stateXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string pntRef {
            get {
                XAttribute x = this.Attribute(pntRefXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(pntRefXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string featureRef {
            get {
                XAttribute x = this.Attribute(featureRefXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(featureRefXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual LandXml.v1_2.pointGeometryType? pointGeometry {
            get {
                XAttribute x = this.Attribute(pointGeometryXName);
                if ((x == null)) {
                    return null;
                }
                return ((LandXml.v1_2.pointGeometryType)(Enum.Parse(typeof(LandXml.v1_2.pointGeometryType), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetAttribute(pointGeometryXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string DTMAttribute {
            get {
                XAttribute x = this.Attribute(DTMAttributeXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(DTMAttributeXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.DateTime? timeStamp {
            get {
                XAttribute x = this.Attribute(timeStampXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<System.DateTime>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.DateTime).Datatype);
            }
            set {
                this.SetAttribute(timeStampXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.DateTime).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string role {
            get {
                XAttribute x = this.Attribute(roleXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(roleXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static Outlet Load(string xmlFile) {
            return XTypedServices.Load<Outlet>(xmlFile);
        }
        
        public static Outlet Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<Outlet>(xmlFile);
        }
        
        public static Outlet Parse(string xml) {
            return XTypedServices.Parse<Outlet>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<Outlet>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (SurfVolume+, Feature*)
    /// </para>
    /// </summary>
    public partial class SurfVolumes : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName SurfVolumeXName = System.Xml.Linq.XName.Get("SurfVolume", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<SurfVolume> SurfVolumeField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName FeatureXName = System.Xml.Linq.XName.Get("Feature", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<Feature> FeatureField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName descXName = System.Xml.Linq.XName.Get("desc", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName nameXName = System.Xml.Linq.XName.Get("name", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName surfVolCalcMethodXName = System.Xml.Linq.XName.Get("surfVolCalcMethod", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("SurfVolumes", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator SurfVolumes(XElement xe) { return XTypedServices.ToXTypedElement<SurfVolumes>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static SurfVolumes() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(SurfVolumeXName), new NamedContentModelEntity(FeatureXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (SurfVolume+, Feature*)
        /// </para>
        /// </summary>
        public SurfVolumes() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (SurfVolume+, Feature*)
        /// </para>
        /// </summary>
        public virtual IList<SurfVolume> SurfVolume {
            get {
                if ((this.SurfVolumeField == null)) {
                    this.SurfVolumeField = new XTypedList<SurfVolume>(this, LinqToXsdTypeManager.Instance, SurfVolumeXName);
                }
                return this.SurfVolumeField;
            }
            set {
                if ((value == null)) {
                    this.SurfVolumeField = null;
                }
                else {
                    if ((this.SurfVolumeField == null)) {
                        this.SurfVolumeField = XTypedList<SurfVolume>.Initialize(this, LinqToXsdTypeManager.Instance, value, SurfVolumeXName);
                    }
                    else {
                        XTypedServices.SetList<SurfVolume>(this.SurfVolumeField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (SurfVolume+, Feature*)
        /// </para>
        /// </summary>
        public virtual IList<Feature> Feature {
            get {
                if ((this.FeatureField == null)) {
                    this.FeatureField = new XTypedList<Feature>(this, LinqToXsdTypeManager.Instance, FeatureXName);
                }
                return this.FeatureField;
            }
            set {
                if ((value == null)) {
                    this.FeatureField = null;
                }
                else {
                    if ((this.FeatureField == null)) {
                        this.FeatureField = XTypedList<Feature>.Initialize(this, LinqToXsdTypeManager.Instance, value, FeatureXName);
                    }
                    else {
                        XTypedServices.SetList<Feature>(this.FeatureField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string desc {
            get {
                XAttribute x = this.Attribute(descXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(descXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string name {
            get {
                XAttribute x = this.Attribute(nameXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(nameXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual LandXml.v1_2.surfVolCMethodType surfVolCalcMethod {
            get {
                XAttribute x = this.Attribute(surfVolCalcMethodXName);
                return ((LandXml.v1_2.surfVolCMethodType)(Enum.Parse(typeof(LandXml.v1_2.surfVolCMethodType), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetAttribute(surfVolCalcMethodXName, value.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static SurfVolumes Load(string xmlFile) {
            return XTypedServices.Load<SurfVolumes>(xmlFile);
        }
        
        public static SurfVolumes Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<SurfVolumes>(xmlFile);
        }
        
        public static SurfVolumes Parse(string xml) {
            return XTypedServices.Parse<SurfVolumes>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<SurfVolumes>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(SurfVolumeXName, typeof(SurfVolume));
            localElementDictionary.Add(FeatureXName, typeof(Feature));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Feature*)
    /// </para>
    /// </summary>
    public partial class SurfVolume : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName FeatureXName = System.Xml.Linq.XName.Get("Feature", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<Feature> FeatureField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName surfBaseXName = System.Xml.Linq.XName.Get("surfBase", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName surfCompareXName = System.Xml.Linq.XName.Get("surfCompare", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName volCutXName = System.Xml.Linq.XName.Get("volCut", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName volFillXName = System.Xml.Linq.XName.Get("volFill", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName volTotalXName = System.Xml.Linq.XName.Get("volTotal", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName descXName = System.Xml.Linq.XName.Get("desc", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName nameXName = System.Xml.Linq.XName.Get("name", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("SurfVolume", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator SurfVolume(XElement xe) { return XTypedServices.ToXTypedElement<SurfVolume>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static SurfVolume() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(FeatureXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Feature*)
        /// </para>
        /// </summary>
        public SurfVolume() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Feature*)
        /// </para>
        /// </summary>
        public virtual IList<Feature> Feature {
            get {
                if ((this.FeatureField == null)) {
                    this.FeatureField = new XTypedList<Feature>(this, LinqToXsdTypeManager.Instance, FeatureXName);
                }
                return this.FeatureField;
            }
            set {
                if ((value == null)) {
                    this.FeatureField = null;
                }
                else {
                    if ((this.FeatureField == null)) {
                        this.FeatureField = XTypedList<Feature>.Initialize(this, LinqToXsdTypeManager.Instance, value, FeatureXName);
                    }
                    else {
                        XTypedServices.SetList<Feature>(this.FeatureField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual string surfBase {
            get {
                XAttribute x = this.Attribute(surfBaseXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(surfBaseXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual string surfCompare {
            get {
                XAttribute x = this.Attribute(surfCompareXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(surfCompareXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual double volCut {
            get {
                XAttribute x = this.Attribute(volCutXName);
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetAttribute(volCutXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual double volFill {
            get {
                XAttribute x = this.Attribute(volFillXName);
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetAttribute(volFillXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual double volTotal {
            get {
                XAttribute x = this.Attribute(volTotalXName);
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetAttribute(volTotalXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string desc {
            get {
                XAttribute x = this.Attribute(descXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(descXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string name {
            get {
                XAttribute x = this.Attribute(nameXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(nameXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static SurfVolume Load(string xmlFile) {
            return XTypedServices.Load<SurfVolume>(xmlFile);
        }
        
        public static SurfVolume Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<SurfVolume>(xmlFile);
        }
        
        public static SurfVolume Parse(string xml) {
            return XTypedServices.Parse<SurfVolume>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<SurfVolume>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(FeatureXName, typeof(Feature));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Parcel+, Feature*)
    /// </para>
    /// </summary>
    public partial class Parcels : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ParcelXName = System.Xml.Linq.XName.Get("Parcel", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<Parcel> ParcelField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName FeatureXName = System.Xml.Linq.XName.Get("Feature", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<Feature> FeatureField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName descXName = System.Xml.Linq.XName.Get("desc", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName nameXName = System.Xml.Linq.XName.Get("name", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName stateXName = System.Xml.Linq.XName.Get("state", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("Parcels", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator Parcels(XElement xe) { return XTypedServices.ToXTypedElement<Parcels>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static Parcels() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(ParcelXName), new NamedContentModelEntity(FeatureXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Parcel+, Feature*)
        /// </para>
        /// </summary>
        public Parcels() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Parcel+, Feature*)
        /// </para>
        /// </summary>
        public virtual IList<Parcel> Parcel {
            get {
                if ((this.ParcelField == null)) {
                    this.ParcelField = new XTypedList<Parcel>(this, LinqToXsdTypeManager.Instance, ParcelXName);
                }
                return this.ParcelField;
            }
            set {
                if ((value == null)) {
                    this.ParcelField = null;
                }
                else {
                    if ((this.ParcelField == null)) {
                        this.ParcelField = XTypedList<Parcel>.Initialize(this, LinqToXsdTypeManager.Instance, value, ParcelXName);
                    }
                    else {
                        XTypedServices.SetList<Parcel>(this.ParcelField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Parcel+, Feature*)
        /// </para>
        /// </summary>
        public virtual IList<Feature> Feature {
            get {
                if ((this.FeatureField == null)) {
                    this.FeatureField = new XTypedList<Feature>(this, LinqToXsdTypeManager.Instance, FeatureXName);
                }
                return this.FeatureField;
            }
            set {
                if ((value == null)) {
                    this.FeatureField = null;
                }
                else {
                    if ((this.FeatureField == null)) {
                        this.FeatureField = XTypedList<Feature>.Initialize(this, LinqToXsdTypeManager.Instance, value, FeatureXName);
                    }
                    else {
                        XTypedServices.SetList<Feature>(this.FeatureField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string desc {
            get {
                XAttribute x = this.Attribute(descXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(descXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string name {
            get {
                XAttribute x = this.Attribute(nameXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(nameXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual LandXml.v1_2.stateType? state {
            get {
                XAttribute x = this.Attribute(stateXName);
                if ((x == null)) {
                    return null;
                }
                return ((LandXml.v1_2.stateType)(Enum.Parse(typeof(LandXml.v1_2.stateType), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetAttribute(stateXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static Parcels Load(string xmlFile) {
            return XTypedServices.Load<Parcels>(xmlFile);
        }
        
        public static Parcels Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<Parcels>(xmlFile);
        }
        
        public static Parcels Parse(string xml) {
            return XTypedServices.Parse<Parcels>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<Parcels>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(ParcelXName, typeof(Parcel));
            localElementDictionary.Add(FeatureXName, typeof(Feature));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: ((Center? | CoordGeom | VolumeGeom* | Parcels* | Title* | Exclusions* | LocationAddress*)+, Feature*)
    /// </para>
    /// </summary>
    public partial class Parcel : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName CenterXName = System.Xml.Linq.XName.Get("Center", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<Center> CenterField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName CoordGeomXName = System.Xml.Linq.XName.Get("CoordGeom", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<CoordGeom> CoordGeomField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName VolumeGeomXName = System.Xml.Linq.XName.Get("VolumeGeom", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<VolumeGeom> VolumeGeomField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ParcelsXName = System.Xml.Linq.XName.Get("Parcels", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<Parcels> ParcelsField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TitleXName = System.Xml.Linq.XName.Get("Title", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<Title> TitleField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ExclusionsXName = System.Xml.Linq.XName.Get("Exclusions", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<Exclusions> ExclusionsField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName LocationAddressXName = System.Xml.Linq.XName.Get("LocationAddress", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<LocationAddress> LocationAddressField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName FeatureXName = System.Xml.Linq.XName.Get("Feature", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<Feature> FeatureField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName nameXName = System.Xml.Linq.XName.Get("name", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName oIDXName = System.Xml.Linq.XName.Get("oID", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName areaXName = System.Xml.Linq.XName.Get("area", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName descXName = System.Xml.Linq.XName.Get("desc", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName dirClosureXName = System.Xml.Linq.XName.Get("dirClosure", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName distClosureXName = System.Xml.Linq.XName.Get("distClosure", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ownerXName = System.Xml.Linq.XName.Get("owner", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName parcelTypeXName = System.Xml.Linq.XName.Get("parcelType", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName setbackFrontXName = System.Xml.Linq.XName.Get("setbackFront", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName setbackRearXName = System.Xml.Linq.XName.Get("setbackRear", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName setbackSideXName = System.Xml.Linq.XName.Get("setbackSide", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName stateXName = System.Xml.Linq.XName.Get("state", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName taxIdXName = System.Xml.Linq.XName.Get("taxId", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName @classXName = System.Xml.Linq.XName.Get("class", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName useOfParcelXName = System.Xml.Linq.XName.Get("useOfParcel", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName parcelFormatXName = System.Xml.Linq.XName.Get("parcelFormat", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName buildingNoXName = System.Xml.Linq.XName.Get("buildingNo", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName buildingLevelNoXName = System.Xml.Linq.XName.Get("buildingLevelNo", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName volumeXName = System.Xml.Linq.XName.Get("volume", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName pclRefXName = System.Xml.Linq.XName.Get("pclRef", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName lotEntitlementsXName = System.Xml.Linq.XName.Get("lotEntitlements", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName liabilityApportionmentXName = System.Xml.Linq.XName.Get("liabilityApportionment", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("Parcel", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator Parcel(XElement xe) { return XTypedServices.ToXTypedElement<Parcel>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static Parcel() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new ChoiceContentModelEntity(new NamedContentModelEntity(CenterXName), new NamedContentModelEntity(CoordGeomXName), new NamedContentModelEntity(VolumeGeomXName), new NamedContentModelEntity(ParcelsXName), new NamedContentModelEntity(TitleXName), new NamedContentModelEntity(ExclusionsXName), new NamedContentModelEntity(LocationAddressXName)), new NamedContentModelEntity(FeatureXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: ((Center? | CoordGeom | VolumeGeom* | Parcels* | Title* | Exclusions* | LocationAddress*)+, Feature*)
        /// </para>
        /// </summary>
        public Parcel() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((Center? | CoordGeom | VolumeGeom* | Parcels* | Title* | Exclusions* | LocationAddress*)+, Feature*)
        /// </para>
        /// </summary>
        public virtual IList<Center> Center {
            get {
                if ((this.CenterField == null)) {
                    this.CenterField = new XTypedList<Center>(this, LinqToXsdTypeManager.Instance, CenterXName);
                }
                return this.CenterField;
            }
            set {
                if ((value == null)) {
                    this.CenterField = null;
                }
                else {
                    if ((this.CenterField == null)) {
                        this.CenterField = XTypedList<Center>.Initialize(this, LinqToXsdTypeManager.Instance, value, CenterXName);
                    }
                    else {
                        XTypedServices.SetList<Center>(this.CenterField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((Center? | CoordGeom | VolumeGeom* | Parcels* | Title* | Exclusions* | LocationAddress*)+, Feature*)
        /// </para>
        /// </summary>
        public virtual IList<CoordGeom> CoordGeom {
            get {
                if ((this.CoordGeomField == null)) {
                    this.CoordGeomField = new XTypedList<CoordGeom>(this, LinqToXsdTypeManager.Instance, CoordGeomXName);
                }
                return this.CoordGeomField;
            }
            set {
                if ((value == null)) {
                    this.CoordGeomField = null;
                }
                else {
                    if ((this.CoordGeomField == null)) {
                        this.CoordGeomField = XTypedList<CoordGeom>.Initialize(this, LinqToXsdTypeManager.Instance, value, CoordGeomXName);
                    }
                    else {
                        XTypedServices.SetList<CoordGeom>(this.CoordGeomField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((Center? | CoordGeom | VolumeGeom* | Parcels* | Title* | Exclusions* | LocationAddress*)+, Feature*)
        /// </para>
        /// </summary>
        public virtual IList<VolumeGeom> VolumeGeom {
            get {
                if ((this.VolumeGeomField == null)) {
                    this.VolumeGeomField = new XTypedList<VolumeGeom>(this, LinqToXsdTypeManager.Instance, VolumeGeomXName);
                }
                return this.VolumeGeomField;
            }
            set {
                if ((value == null)) {
                    this.VolumeGeomField = null;
                }
                else {
                    if ((this.VolumeGeomField == null)) {
                        this.VolumeGeomField = XTypedList<VolumeGeom>.Initialize(this, LinqToXsdTypeManager.Instance, value, VolumeGeomXName);
                    }
                    else {
                        XTypedServices.SetList<VolumeGeom>(this.VolumeGeomField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((Center? | CoordGeom | VolumeGeom* | Parcels* | Title* | Exclusions* | LocationAddress*)+, Feature*)
        /// </para>
        /// </summary>
        public virtual IList<Parcels> Parcels {
            get {
                if ((this.ParcelsField == null)) {
                    this.ParcelsField = new XTypedList<Parcels>(this, LinqToXsdTypeManager.Instance, ParcelsXName);
                }
                return this.ParcelsField;
            }
            set {
                if ((value == null)) {
                    this.ParcelsField = null;
                }
                else {
                    if ((this.ParcelsField == null)) {
                        this.ParcelsField = XTypedList<Parcels>.Initialize(this, LinqToXsdTypeManager.Instance, value, ParcelsXName);
                    }
                    else {
                        XTypedServices.SetList<Parcels>(this.ParcelsField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((Center? | CoordGeom | VolumeGeom* | Parcels* | Title* | Exclusions* | LocationAddress*)+, Feature*)
        /// </para>
        /// </summary>
        public virtual IList<Title> Title {
            get {
                if ((this.TitleField == null)) {
                    this.TitleField = new XTypedList<Title>(this, LinqToXsdTypeManager.Instance, TitleXName);
                }
                return this.TitleField;
            }
            set {
                if ((value == null)) {
                    this.TitleField = null;
                }
                else {
                    if ((this.TitleField == null)) {
                        this.TitleField = XTypedList<Title>.Initialize(this, LinqToXsdTypeManager.Instance, value, TitleXName);
                    }
                    else {
                        XTypedServices.SetList<Title>(this.TitleField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((Center? | CoordGeom | VolumeGeom* | Parcels* | Title* | Exclusions* | LocationAddress*)+, Feature*)
        /// </para>
        /// </summary>
        public virtual IList<Exclusions> Exclusions {
            get {
                if ((this.ExclusionsField == null)) {
                    this.ExclusionsField = new XTypedList<Exclusions>(this, LinqToXsdTypeManager.Instance, ExclusionsXName);
                }
                return this.ExclusionsField;
            }
            set {
                if ((value == null)) {
                    this.ExclusionsField = null;
                }
                else {
                    if ((this.ExclusionsField == null)) {
                        this.ExclusionsField = XTypedList<Exclusions>.Initialize(this, LinqToXsdTypeManager.Instance, value, ExclusionsXName);
                    }
                    else {
                        XTypedServices.SetList<Exclusions>(this.ExclusionsField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((Center? | CoordGeom | VolumeGeom* | Parcels* | Title* | Exclusions* | LocationAddress*)+, Feature*)
        /// </para>
        /// </summary>
        public virtual IList<LocationAddress> LocationAddress {
            get {
                if ((this.LocationAddressField == null)) {
                    this.LocationAddressField = new XTypedList<LocationAddress>(this, LinqToXsdTypeManager.Instance, LocationAddressXName);
                }
                return this.LocationAddressField;
            }
            set {
                if ((value == null)) {
                    this.LocationAddressField = null;
                }
                else {
                    if ((this.LocationAddressField == null)) {
                        this.LocationAddressField = XTypedList<LocationAddress>.Initialize(this, LinqToXsdTypeManager.Instance, value, LocationAddressXName);
                    }
                    else {
                        XTypedServices.SetList<LocationAddress>(this.LocationAddressField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: ((Center? | CoordGeom | VolumeGeom* | Parcels* | Title* | Exclusions* | LocationAddress*)+, Feature*)
        /// </para>
        /// </summary>
        public virtual IList<Feature> Feature {
            get {
                if ((this.FeatureField == null)) {
                    this.FeatureField = new XTypedList<Feature>(this, LinqToXsdTypeManager.Instance, FeatureXName);
                }
                return this.FeatureField;
            }
            set {
                if ((value == null)) {
                    this.FeatureField = null;
                }
                else {
                    if ((this.FeatureField == null)) {
                        this.FeatureField = XTypedList<Feature>.Initialize(this, LinqToXsdTypeManager.Instance, value, FeatureXName);
                    }
                    else {
                        XTypedServices.SetList<Feature>(this.FeatureField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual string name {
            get {
                XAttribute x = this.Attribute(nameXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(nameXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string oID {
            get {
                XAttribute x = this.Attribute(oIDXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(oIDXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Double? area {
            get {
                XAttribute x = this.Attribute(areaXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetAttribute(areaXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string desc {
            get {
                XAttribute x = this.Attribute(descXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(descXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Double? dirClosure {
            get {
                XAttribute x = this.Attribute(dirClosureXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetAttribute(dirClosureXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Double? distClosure {
            get {
                XAttribute x = this.Attribute(distClosureXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetAttribute(distClosureXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string owner {
            get {
                XAttribute x = this.Attribute(ownerXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(ownerXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string parcelType {
            get {
                XAttribute x = this.Attribute(parcelTypeXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(parcelTypeXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Double? setbackFront {
            get {
                XAttribute x = this.Attribute(setbackFrontXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetAttribute(setbackFrontXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Double? setbackRear {
            get {
                XAttribute x = this.Attribute(setbackRearXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetAttribute(setbackRearXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Double? setbackSide {
            get {
                XAttribute x = this.Attribute(setbackSideXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetAttribute(setbackSideXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual LandXml.v1_2.parcelStateType? state {
            get {
                XAttribute x = this.Attribute(stateXName);
                if ((x == null)) {
                    return null;
                }
                return ((LandXml.v1_2.parcelStateType)(Enum.Parse(typeof(LandXml.v1_2.parcelStateType), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetAttribute(stateXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string taxId {
            get {
                XAttribute x = this.Attribute(taxIdXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(taxIdXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string @class {
            get {
                XAttribute x = this.Attribute(@classXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(@classXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string useOfParcel {
            get {
                XAttribute x = this.Attribute(useOfParcelXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(useOfParcelXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string parcelFormat {
            get {
                XAttribute x = this.Attribute(parcelFormatXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(parcelFormatXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string buildingNo {
            get {
                XAttribute x = this.Attribute(buildingNoXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(buildingNoXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string buildingLevelNo {
            get {
                XAttribute x = this.Attribute(buildingLevelNoXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(buildingLevelNoXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string volume {
            get {
                XAttribute x = this.Attribute(volumeXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(volumeXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string pclRef {
            get {
                XAttribute x = this.Attribute(pclRefXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(pclRefXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string lotEntitlements {
            get {
                XAttribute x = this.Attribute(lotEntitlementsXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(lotEntitlementsXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string liabilityApportionment {
            get {
                XAttribute x = this.Attribute(liabilityApportionmentXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(liabilityApportionmentXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static Parcel Load(string xmlFile) {
            return XTypedServices.Load<Parcel>(xmlFile);
        }
        
        public static Parcel Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<Parcel>(xmlFile);
        }
        
        public static Parcel Parse(string xml) {
            return XTypedServices.Parse<Parcel>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<Parcel>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(CenterXName, typeof(Center));
            localElementDictionary.Add(CoordGeomXName, typeof(CoordGeom));
            localElementDictionary.Add(VolumeGeomXName, typeof(VolumeGeom));
            localElementDictionary.Add(ParcelsXName, typeof(Parcels));
            localElementDictionary.Add(TitleXName, typeof(Title));
            localElementDictionary.Add(ExclusionsXName, typeof(Exclusions));
            localElementDictionary.Add(LocationAddressXName, typeof(LocationAddress));
            localElementDictionary.Add(FeatureXName, typeof(Feature));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (CoordGeom)+
    /// </para>
    /// </summary>
    public partial class VolumeGeom : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName CoordGeomXName = System.Xml.Linq.XName.Get("CoordGeom", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<CoordGeom> CoordGeomField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName descXName = System.Xml.Linq.XName.Get("desc", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName nameXName = System.Xml.Linq.XName.Get("name", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName stateXName = System.Xml.Linq.XName.Get("state", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName oIDXName = System.Xml.Linq.XName.Get("oID", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("VolumeGeom", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator VolumeGeom(XElement xe) { return XTypedServices.ToXTypedElement<VolumeGeom>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static VolumeGeom() {
            BuildElementDictionary();
            contentModel = new ChoiceContentModelEntity(new NamedContentModelEntity(CoordGeomXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (CoordGeom)+
        /// </para>
        /// </summary>
        public VolumeGeom() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (CoordGeom)+
        /// </para>
        /// </summary>
        public virtual IList<CoordGeom> CoordGeom {
            get {
                if ((this.CoordGeomField == null)) {
                    this.CoordGeomField = new XTypedList<CoordGeom>(this, LinqToXsdTypeManager.Instance, CoordGeomXName);
                }
                return this.CoordGeomField;
            }
            set {
                if ((value == null)) {
                    this.CoordGeomField = null;
                }
                else {
                    if ((this.CoordGeomField == null)) {
                        this.CoordGeomField = XTypedList<CoordGeom>.Initialize(this, LinqToXsdTypeManager.Instance, value, CoordGeomXName);
                    }
                    else {
                        XTypedServices.SetList<CoordGeom>(this.CoordGeomField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string desc {
            get {
                XAttribute x = this.Attribute(descXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(descXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual string name {
            get {
                XAttribute x = this.Attribute(nameXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(nameXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual LandXml.v1_2.stateType? state {
            get {
                XAttribute x = this.Attribute(stateXName);
                if ((x == null)) {
                    return null;
                }
                return ((LandXml.v1_2.stateType)(Enum.Parse(typeof(LandXml.v1_2.stateType), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetAttribute(stateXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string oID {
            get {
                XAttribute x = this.Attribute(oIDXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(oIDXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static VolumeGeom Load(string xmlFile) {
            return XTypedServices.Load<VolumeGeom>(xmlFile);
        }
        
        public static VolumeGeom Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<VolumeGeom>(xmlFile);
        }
        
        public static VolumeGeom Parse(string xml) {
            return XTypedServices.Parse<VolumeGeom>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<VolumeGeom>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(CoordGeomXName, typeof(CoordGeom));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    public partial class Title : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName nameXName = System.Xml.Linq.XName.Get("name", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName titleTypeXName = System.Xml.Linq.XName.Get("titleType", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("Title", "http://www.landxml.org/schema/LandXML-1.2");
        
		public static explicit operator Title(XElement xe) { return XTypedServices.ToXTypedElement<Title>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public Title() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual string name {
            get {
                XAttribute x = this.Attribute(nameXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(nameXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string titleType {
            get {
                XAttribute x = this.Attribute(titleTypeXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(titleTypeXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static Title Load(string xmlFile) {
            return XTypedServices.Load<Title>(xmlFile);
        }
        
        public static Title Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<Title>(xmlFile);
        }
        
        public static Title Parse(string xml) {
            return XTypedServices.Parse<Title>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<Title>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class Exclusions : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName exclusionTypeXName = System.Xml.Linq.XName.Get("exclusionType", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName areaXName = System.Xml.Linq.XName.Get("area", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("Exclusions", "http://www.landxml.org/schema/LandXML-1.2");
        
		public static explicit operator Exclusions(XElement xe) { return XTypedServices.ToXTypedElement<Exclusions>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public Exclusions() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual string exclusionType {
            get {
                XAttribute x = this.Attribute(exclusionTypeXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(exclusionTypeXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual double area {
            get {
                XAttribute x = this.Attribute(areaXName);
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetAttribute(areaXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static Exclusions Load(string xmlFile) {
            return XTypedServices.Load<Exclusions>(xmlFile);
        }
        
        public static Exclusions Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<Exclusions>(xmlFile);
        }
        
        public static Exclusions Parse(string xml) {
            return XTypedServices.Parse<Exclusions>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<Exclusions>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (ComplexName*, RoadName*, AdministrativeArea*, AddressPoint*)
    /// </para>
    /// </summary>
    public partial class LocationAddress : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ComplexNameXName = System.Xml.Linq.XName.Get("ComplexName", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ComplexName> ComplexNameField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName RoadNameXName = System.Xml.Linq.XName.Get("RoadName", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<RoadName> RoadNameField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName AdministrativeAreaXName = System.Xml.Linq.XName.Get("AdministrativeArea", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<AdministrativeArea> AdministrativeAreaField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName AddressPointXName = System.Xml.Linq.XName.Get("AddressPoint", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<AddressPoint> AddressPointField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName addressTypeXName = System.Xml.Linq.XName.Get("addressType", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName flatTypeXName = System.Xml.Linq.XName.Get("flatType", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName flatNumberXName = System.Xml.Linq.XName.Get("flatNumber", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName floorLevelTypeXName = System.Xml.Linq.XName.Get("floorLevelType", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName floorLevelNumberXName = System.Xml.Linq.XName.Get("floorLevelNumber", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName numberFirstXName = System.Xml.Linq.XName.Get("numberFirst", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName numberSuffixFirstXName = System.Xml.Linq.XName.Get("numberSuffixFirst", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName numberLastXName = System.Xml.Linq.XName.Get("numberLast", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName numberSuffixLastXName = System.Xml.Linq.XName.Get("numberSuffixLast", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("LocationAddress", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator LocationAddress(XElement xe) { return XTypedServices.ToXTypedElement<LocationAddress>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static LocationAddress() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(ComplexNameXName), new NamedContentModelEntity(RoadNameXName), new NamedContentModelEntity(AdministrativeAreaXName), new NamedContentModelEntity(AddressPointXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (ComplexName*, RoadName*, AdministrativeArea*, AddressPoint*)
        /// </para>
        /// </summary>
        public LocationAddress() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (ComplexName*, RoadName*, AdministrativeArea*, AddressPoint*)
        /// </para>
        /// </summary>
        public virtual IList<ComplexName> ComplexName {
            get {
                if ((this.ComplexNameField == null)) {
                    this.ComplexNameField = new XTypedList<ComplexName>(this, LinqToXsdTypeManager.Instance, ComplexNameXName);
                }
                return this.ComplexNameField;
            }
            set {
                if ((value == null)) {
                    this.ComplexNameField = null;
                }
                else {
                    if ((this.ComplexNameField == null)) {
                        this.ComplexNameField = XTypedList<ComplexName>.Initialize(this, LinqToXsdTypeManager.Instance, value, ComplexNameXName);
                    }
                    else {
                        XTypedServices.SetList<ComplexName>(this.ComplexNameField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (ComplexName*, RoadName*, AdministrativeArea*, AddressPoint*)
        /// </para>
        /// </summary>
        public virtual IList<RoadName> RoadName {
            get {
                if ((this.RoadNameField == null)) {
                    this.RoadNameField = new XTypedList<RoadName>(this, LinqToXsdTypeManager.Instance, RoadNameXName);
                }
                return this.RoadNameField;
            }
            set {
                if ((value == null)) {
                    this.RoadNameField = null;
                }
                else {
                    if ((this.RoadNameField == null)) {
                        this.RoadNameField = XTypedList<RoadName>.Initialize(this, LinqToXsdTypeManager.Instance, value, RoadNameXName);
                    }
                    else {
                        XTypedServices.SetList<RoadName>(this.RoadNameField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (ComplexName*, RoadName*, AdministrativeArea*, AddressPoint*)
        /// </para>
        /// </summary>
        public virtual IList<AdministrativeArea> AdministrativeArea {
            get {
                if ((this.AdministrativeAreaField == null)) {
                    this.AdministrativeAreaField = new XTypedList<AdministrativeArea>(this, LinqToXsdTypeManager.Instance, AdministrativeAreaXName);
                }
                return this.AdministrativeAreaField;
            }
            set {
                if ((value == null)) {
                    this.AdministrativeAreaField = null;
                }
                else {
                    if ((this.AdministrativeAreaField == null)) {
                        this.AdministrativeAreaField = XTypedList<AdministrativeArea>.Initialize(this, LinqToXsdTypeManager.Instance, value, AdministrativeAreaXName);
                    }
                    else {
                        XTypedServices.SetList<AdministrativeArea>(this.AdministrativeAreaField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (ComplexName*, RoadName*, AdministrativeArea*, AddressPoint*)
        /// </para>
        /// </summary>
        public virtual IList<AddressPoint> AddressPoint {
            get {
                if ((this.AddressPointField == null)) {
                    this.AddressPointField = new XTypedList<AddressPoint>(this, LinqToXsdTypeManager.Instance, AddressPointXName);
                }
                return this.AddressPointField;
            }
            set {
                if ((value == null)) {
                    this.AddressPointField = null;
                }
                else {
                    if ((this.AddressPointField == null)) {
                        this.AddressPointField = XTypedList<AddressPoint>.Initialize(this, LinqToXsdTypeManager.Instance, value, AddressPointXName);
                    }
                    else {
                        XTypedServices.SetList<AddressPoint>(this.AddressPointField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string addressType {
            get {
                XAttribute x = this.Attribute(addressTypeXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(addressTypeXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string flatType {
            get {
                XAttribute x = this.Attribute(flatTypeXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(flatTypeXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string flatNumber {
            get {
                XAttribute x = this.Attribute(flatNumberXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(flatNumberXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string floorLevelType {
            get {
                XAttribute x = this.Attribute(floorLevelTypeXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(floorLevelTypeXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string floorLevelNumber {
            get {
                XAttribute x = this.Attribute(floorLevelNumberXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(floorLevelNumberXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Int32? numberFirst {
            get {
                XAttribute x = this.Attribute(numberFirstXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<int>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
            set {
                this.SetAttribute(numberFirstXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string numberSuffixFirst {
            get {
                XAttribute x = this.Attribute(numberSuffixFirstXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(numberSuffixFirstXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Int32? numberLast {
            get {
                XAttribute x = this.Attribute(numberLastXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<int>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
            set {
                this.SetAttribute(numberLastXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string numberSuffixLast {
            get {
                XAttribute x = this.Attribute(numberSuffixLastXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(numberSuffixLastXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static LocationAddress Load(string xmlFile) {
            return XTypedServices.Load<LocationAddress>(xmlFile);
        }
        
        public static LocationAddress Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<LocationAddress>(xmlFile);
        }
        
        public static LocationAddress Parse(string xml) {
            return XTypedServices.Parse<LocationAddress>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<LocationAddress>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(ComplexNameXName, typeof(ComplexName));
            localElementDictionary.Add(RoadNameXName, typeof(RoadName));
            localElementDictionary.Add(AdministrativeAreaXName, typeof(AdministrativeArea));
            localElementDictionary.Add(AddressPointXName, typeof(AddressPoint));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    public partial class ComplexName : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName descXName = System.Xml.Linq.XName.Get("desc", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName priorityXName = System.Xml.Linq.XName.Get("priority", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("ComplexName", "http://www.landxml.org/schema/LandXML-1.2");
        
		public static explicit operator ComplexName(XElement xe) { return XTypedServices.ToXTypedElement<ComplexName>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public ComplexName() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string desc {
            get {
                XAttribute x = this.Attribute(descXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(descXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Int32? priority {
            get {
                XAttribute x = this.Attribute(priorityXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<int>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
            set {
                this.SetAttribute(priorityXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static ComplexName Load(string xmlFile) {
            return XTypedServices.Load<ComplexName>(xmlFile);
        }
        
        public static ComplexName Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<ComplexName>(xmlFile);
        }
        
        public static ComplexName Parse(string xml) {
            return XTypedServices.Parse<ComplexName>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ComplexName>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class RoadName : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName roadNameTypeXName = System.Xml.Linq.XName.Get("roadNameType", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName roadName1XName = System.Xml.Linq.XName.Get("roadName", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName roadNameSuffixXName = System.Xml.Linq.XName.Get("roadNameSuffix", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName roadTypeXName = System.Xml.Linq.XName.Get("roadType", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName pclRefXName = System.Xml.Linq.XName.Get("pclRef", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("RoadName", "http://www.landxml.org/schema/LandXML-1.2");
        
		public static explicit operator RoadName(XElement xe) { return XTypedServices.ToXTypedElement<RoadName>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public RoadName() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string roadNameType {
            get {
                XAttribute x = this.Attribute(roadNameTypeXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(roadNameTypeXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string roadName1 {
            get {
                XAttribute x = this.Attribute(roadName1XName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(roadName1XName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string roadNameSuffix {
            get {
                XAttribute x = this.Attribute(roadNameSuffixXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(roadNameSuffixXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string roadType {
            get {
                XAttribute x = this.Attribute(roadTypeXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(roadTypeXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual IList<string> pclRef {
            get {
                XAttribute x = this.Attribute(pclRefXName);
                return XTypedServices.ParseListValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetListAttribute(pclRefXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static RoadName Load(string xmlFile) {
            return XTypedServices.Load<RoadName>(xmlFile);
        }
        
        public static RoadName Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<RoadName>(xmlFile);
        }
        
        public static RoadName Parse(string xml) {
            return XTypedServices.Parse<RoadName>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<RoadName>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class AddressPoint : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName addressPointTypeXName = System.Xml.Linq.XName.Get("addressPointType", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName nameXName = System.Xml.Linq.XName.Get("name", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName descXName = System.Xml.Linq.XName.Get("desc", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName codeXName = System.Xml.Linq.XName.Get("code", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName stateXName = System.Xml.Linq.XName.Get("state", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName pntRefXName = System.Xml.Linq.XName.Get("pntRef", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName featureRefXName = System.Xml.Linq.XName.Get("featureRef", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName pointGeometryXName = System.Xml.Linq.XName.Get("pointGeometry", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName DTMAttributeXName = System.Xml.Linq.XName.Get("DTMAttribute", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName timeStampXName = System.Xml.Linq.XName.Get("timeStamp", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName roleXName = System.Xml.Linq.XName.Get("role", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName determinedTimeStampXName = System.Xml.Linq.XName.Get("determinedTimeStamp", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ellipsoidHeightXName = System.Xml.Linq.XName.Get("ellipsoidHeight", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName latitudeXName = System.Xml.Linq.XName.Get("latitude", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName longitudeXName = System.Xml.Linq.XName.Get("longitude", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName zoneXName = System.Xml.Linq.XName.Get("zone", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName northingStdErrorXName = System.Xml.Linq.XName.Get("northingStdError", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName eastingStdErrorXName = System.Xml.Linq.XName.Get("eastingStdError", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName elevationStdErrorXName = System.Xml.Linq.XName.Get("elevationStdError", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("AddressPoint", "http://www.landxml.org/schema/LandXML-1.2");
        
		public static explicit operator AddressPoint(XElement xe) { return XTypedServices.ToXTypedElement<AddressPoint>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public AddressPoint() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string addressPointType {
            get {
                XAttribute x = this.Attribute(addressPointTypeXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(addressPointTypeXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string name {
            get {
                XAttribute x = this.Attribute(nameXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(nameXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string desc {
            get {
                XAttribute x = this.Attribute(descXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(descXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string code {
            get {
                XAttribute x = this.Attribute(codeXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(codeXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual LandXml.v1_2.stateType? state {
            get {
                XAttribute x = this.Attribute(stateXName);
                if ((x == null)) {
                    return null;
                }
                return ((LandXml.v1_2.stateType)(Enum.Parse(typeof(LandXml.v1_2.stateType), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetAttribute(stateXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string pntRef {
            get {
                XAttribute x = this.Attribute(pntRefXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(pntRefXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string featureRef {
            get {
                XAttribute x = this.Attribute(featureRefXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(featureRefXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual LandXml.v1_2.pointGeometryType? pointGeometry {
            get {
                XAttribute x = this.Attribute(pointGeometryXName);
                if ((x == null)) {
                    return null;
                }
                return ((LandXml.v1_2.pointGeometryType)(Enum.Parse(typeof(LandXml.v1_2.pointGeometryType), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetAttribute(pointGeometryXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string DTMAttribute {
            get {
                XAttribute x = this.Attribute(DTMAttributeXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(DTMAttributeXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.DateTime? timeStamp {
            get {
                XAttribute x = this.Attribute(timeStampXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<System.DateTime>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.DateTime).Datatype);
            }
            set {
                this.SetAttribute(timeStampXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.DateTime).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string role {
            get {
                XAttribute x = this.Attribute(roleXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(roleXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.DateTime? determinedTimeStamp {
            get {
                XAttribute x = this.Attribute(determinedTimeStampXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<System.DateTime>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.DateTime).Datatype);
            }
            set {
                this.SetAttribute(determinedTimeStampXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.DateTime).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Double? ellipsoidHeight {
            get {
                XAttribute x = this.Attribute(ellipsoidHeightXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetAttribute(ellipsoidHeightXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Double? latitude {
            get {
                XAttribute x = this.Attribute(latitudeXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetAttribute(latitudeXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Double? longitude {
            get {
                XAttribute x = this.Attribute(longitudeXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetAttribute(longitudeXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string zone {
            get {
                XAttribute x = this.Attribute(zoneXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(zoneXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Double? northingStdError {
            get {
                XAttribute x = this.Attribute(northingStdErrorXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetAttribute(northingStdErrorXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Double? eastingStdError {
            get {
                XAttribute x = this.Attribute(eastingStdErrorXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetAttribute(eastingStdErrorXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Double? elevationStdError {
            get {
                XAttribute x = this.Attribute(elevationStdErrorXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetAttribute(elevationStdErrorXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static AddressPoint Load(string xmlFile) {
            return XTypedServices.Load<AddressPoint>(xmlFile);
        }
        
        public static AddressPoint Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<AddressPoint>(xmlFile);
        }
        
        public static AddressPoint Parse(string xml) {
            return XTypedServices.Parse<AddressPoint>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<AddressPoint>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Alignment+, Feature*)
    /// </para>
    /// </summary>
    public partial class Alignments : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName AlignmentXName = System.Xml.Linq.XName.Get("Alignment", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<Alignment> AlignmentField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName FeatureXName = System.Xml.Linq.XName.Get("Feature", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<Feature> FeatureField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName descXName = System.Xml.Linq.XName.Get("desc", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName nameXName = System.Xml.Linq.XName.Get("name", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName stateXName = System.Xml.Linq.XName.Get("state", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("Alignments", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator Alignments(XElement xe) { return XTypedServices.ToXTypedElement<Alignments>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static Alignments() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(AlignmentXName), new NamedContentModelEntity(FeatureXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Alignment+, Feature*)
        /// </para>
        /// </summary>
        public Alignments() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Alignment+, Feature*)
        /// </para>
        /// </summary>
        public virtual IList<Alignment> Alignment {
            get {
                if ((this.AlignmentField == null)) {
                    this.AlignmentField = new XTypedList<Alignment>(this, LinqToXsdTypeManager.Instance, AlignmentXName);
                }
                return this.AlignmentField;
            }
            set {
                if ((value == null)) {
                    this.AlignmentField = null;
                }
                else {
                    if ((this.AlignmentField == null)) {
                        this.AlignmentField = XTypedList<Alignment>.Initialize(this, LinqToXsdTypeManager.Instance, value, AlignmentXName);
                    }
                    else {
                        XTypedServices.SetList<Alignment>(this.AlignmentField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Alignment+, Feature*)
        /// </para>
        /// </summary>
        public virtual IList<Feature> Feature {
            get {
                if ((this.FeatureField == null)) {
                    this.FeatureField = new XTypedList<Feature>(this, LinqToXsdTypeManager.Instance, FeatureXName);
                }
                return this.FeatureField;
            }
            set {
                if ((value == null)) {
                    this.FeatureField = null;
                }
                else {
                    if ((this.FeatureField == null)) {
                        this.FeatureField = XTypedList<Feature>.Initialize(this, LinqToXsdTypeManager.Instance, value, FeatureXName);
                    }
                    else {
                        XTypedServices.SetList<Feature>(this.FeatureField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string desc {
            get {
                XAttribute x = this.Attribute(descXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(descXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string name {
            get {
                XAttribute x = this.Attribute(nameXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(nameXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual LandXml.v1_2.stateType? state {
            get {
                XAttribute x = this.Attribute(stateXName);
                if ((x == null)) {
                    return null;
                }
                return ((LandXml.v1_2.stateType)(Enum.Parse(typeof(LandXml.v1_2.stateType), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetAttribute(stateXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static Alignments Load(string xmlFile) {
            return XTypedServices.Load<Alignments>(xmlFile);
        }
        
        public static Alignments Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<Alignments>(xmlFile);
        }
        
        public static Alignments Parse(string xml) {
            return XTypedServices.Parse<Alignments>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<Alignments>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(AlignmentXName, typeof(Alignment));
            localElementDictionary.Add(FeatureXName, typeof(Feature));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Start? | CoordGeom | AlignPIs? | Cant? | StaEquation* | Profile* | CrossSects? | Superelevation* | Feature*)+
    /// </para>
    /// </summary>
    public partial class Alignment : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName StartXName = System.Xml.Linq.XName.Get("Start", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<Start> StartField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName CoordGeomXName = System.Xml.Linq.XName.Get("CoordGeom", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<CoordGeom> CoordGeomField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName AlignPIsXName = System.Xml.Linq.XName.Get("AlignPIs", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<AlignPIs> AlignPIsField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName CantXName = System.Xml.Linq.XName.Get("Cant", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<Cant> CantField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName StaEquationXName = System.Xml.Linq.XName.Get("StaEquation", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<StaEquation> StaEquationField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ProfileXName = System.Xml.Linq.XName.Get("Profile", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<Profile> ProfileField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName CrossSectsXName = System.Xml.Linq.XName.Get("CrossSects", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<CrossSects> CrossSectsField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName SuperelevationXName = System.Xml.Linq.XName.Get("Superelevation", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<Superelevation> SuperelevationField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName FeatureXName = System.Xml.Linq.XName.Get("Feature", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<Feature> FeatureField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName nameXName = System.Xml.Linq.XName.Get("name", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName lengthXName = System.Xml.Linq.XName.Get("length", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName staStartXName = System.Xml.Linq.XName.Get("staStart", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName descXName = System.Xml.Linq.XName.Get("desc", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName oIDXName = System.Xml.Linq.XName.Get("oID", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName stateXName = System.Xml.Linq.XName.Get("state", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("Alignment", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator Alignment(XElement xe) { return XTypedServices.ToXTypedElement<Alignment>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static Alignment() {
            BuildElementDictionary();
            contentModel = new ChoiceContentModelEntity(new NamedContentModelEntity(StartXName), new NamedContentModelEntity(CoordGeomXName), new NamedContentModelEntity(AlignPIsXName), new NamedContentModelEntity(CantXName), new NamedContentModelEntity(StaEquationXName), new NamedContentModelEntity(ProfileXName), new NamedContentModelEntity(CrossSectsXName), new NamedContentModelEntity(SuperelevationXName), new NamedContentModelEntity(FeatureXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Start? | CoordGeom | AlignPIs? | Cant? | StaEquation* | Profile* | CrossSects? | Superelevation* | Feature*)+
        /// </para>
        /// </summary>
        public Alignment() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, choice
        /// </para>
        /// <para>
        /// Regular expression: (Start? | CoordGeom | AlignPIs? | Cant? | StaEquation* | Profile* | CrossSects? | Superelevation* | Feature*)+
        /// </para>
        /// </summary>
        public virtual IList<Start> Start {
            get {
                if ((this.StartField == null)) {
                    this.StartField = new XTypedList<Start>(this, LinqToXsdTypeManager.Instance, StartXName);
                }
                return this.StartField;
            }
            set {
                if ((value == null)) {
                    this.StartField = null;
                }
                else {
                    if ((this.StartField == null)) {
                        this.StartField = XTypedList<Start>.Initialize(this, LinqToXsdTypeManager.Instance, value, StartXName);
                    }
                    else {
                        XTypedServices.SetList<Start>(this.StartField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (Start? | CoordGeom | AlignPIs? | Cant? | StaEquation* | Profile* | CrossSects? | Superelevation* | Feature*)+
        /// </para>
        /// </summary>
        public virtual IList<CoordGeom> CoordGeom {
            get {
                if ((this.CoordGeomField == null)) {
                    this.CoordGeomField = new XTypedList<CoordGeom>(this, LinqToXsdTypeManager.Instance, CoordGeomXName);
                }
                return this.CoordGeomField;
            }
            set {
                if ((value == null)) {
                    this.CoordGeomField = null;
                }
                else {
                    if ((this.CoordGeomField == null)) {
                        this.CoordGeomField = XTypedList<CoordGeom>.Initialize(this, LinqToXsdTypeManager.Instance, value, CoordGeomXName);
                    }
                    else {
                        XTypedServices.SetList<CoordGeom>(this.CoordGeomField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, choice
        /// </para>
        /// <para>
        /// Regular expression: (Start? | CoordGeom | AlignPIs? | Cant? | StaEquation* | Profile* | CrossSects? | Superelevation* | Feature*)+
        /// </para>
        /// </summary>
        public virtual IList<AlignPIs> AlignPIs {
            get {
                if ((this.AlignPIsField == null)) {
                    this.AlignPIsField = new XTypedList<AlignPIs>(this, LinqToXsdTypeManager.Instance, AlignPIsXName);
                }
                return this.AlignPIsField;
            }
            set {
                if ((value == null)) {
                    this.AlignPIsField = null;
                }
                else {
                    if ((this.AlignPIsField == null)) {
                        this.AlignPIsField = XTypedList<AlignPIs>.Initialize(this, LinqToXsdTypeManager.Instance, value, AlignPIsXName);
                    }
                    else {
                        XTypedServices.SetList<AlignPIs>(this.AlignPIsField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, choice
        /// </para>
        /// <para>
        /// Regular expression: (Start? | CoordGeom | AlignPIs? | Cant? | StaEquation* | Profile* | CrossSects? | Superelevation* | Feature*)+
        /// </para>
        /// </summary>
        public virtual IList<Cant> Cant {
            get {
                if ((this.CantField == null)) {
                    this.CantField = new XTypedList<Cant>(this, LinqToXsdTypeManager.Instance, CantXName);
                }
                return this.CantField;
            }
            set {
                if ((value == null)) {
                    this.CantField = null;
                }
                else {
                    if ((this.CantField == null)) {
                        this.CantField = XTypedList<Cant>.Initialize(this, LinqToXsdTypeManager.Instance, value, CantXName);
                    }
                    else {
                        XTypedServices.SetList<Cant>(this.CantField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating, choice
        /// </para>
        /// <para>
        /// Regular expression: (Start? | CoordGeom | AlignPIs? | Cant? | StaEquation* | Profile* | CrossSects? | Superelevation* | Feature*)+
        /// </para>
        /// </summary>
        public virtual IList<StaEquation> StaEquation {
            get {
                if ((this.StaEquationField == null)) {
                    this.StaEquationField = new XTypedList<StaEquation>(this, LinqToXsdTypeManager.Instance, StaEquationXName);
                }
                return this.StaEquationField;
            }
            set {
                if ((value == null)) {
                    this.StaEquationField = null;
                }
                else {
                    if ((this.StaEquationField == null)) {
                        this.StaEquationField = XTypedList<StaEquation>.Initialize(this, LinqToXsdTypeManager.Instance, value, StaEquationXName);
                    }
                    else {
                        XTypedServices.SetList<StaEquation>(this.StaEquationField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating, choice
        /// </para>
        /// <para>
        /// Regular expression: (Start? | CoordGeom | AlignPIs? | Cant? | StaEquation* | Profile* | CrossSects? | Superelevation* | Feature*)+
        /// </para>
        /// </summary>
        public virtual IList<Profile> Profile {
            get {
                if ((this.ProfileField == null)) {
                    this.ProfileField = new XTypedList<Profile>(this, LinqToXsdTypeManager.Instance, ProfileXName);
                }
                return this.ProfileField;
            }
            set {
                if ((value == null)) {
                    this.ProfileField = null;
                }
                else {
                    if ((this.ProfileField == null)) {
                        this.ProfileField = XTypedList<Profile>.Initialize(this, LinqToXsdTypeManager.Instance, value, ProfileXName);
                    }
                    else {
                        XTypedServices.SetList<Profile>(this.ProfileField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, choice
        /// </para>
        /// <para>
        /// Regular expression: (Start? | CoordGeom | AlignPIs? | Cant? | StaEquation* | Profile* | CrossSects? | Superelevation* | Feature*)+
        /// </para>
        /// </summary>
        public virtual IList<CrossSects> CrossSects {
            get {
                if ((this.CrossSectsField == null)) {
                    this.CrossSectsField = new XTypedList<CrossSects>(this, LinqToXsdTypeManager.Instance, CrossSectsXName);
                }
                return this.CrossSectsField;
            }
            set {
                if ((value == null)) {
                    this.CrossSectsField = null;
                }
                else {
                    if ((this.CrossSectsField == null)) {
                        this.CrossSectsField = XTypedList<CrossSects>.Initialize(this, LinqToXsdTypeManager.Instance, value, CrossSectsXName);
                    }
                    else {
                        XTypedServices.SetList<CrossSects>(this.CrossSectsField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating, choice
        /// </para>
        /// <para>
        /// Regular expression: (Start? | CoordGeom | AlignPIs? | Cant? | StaEquation* | Profile* | CrossSects? | Superelevation* | Feature*)+
        /// </para>
        /// </summary>
        public virtual IList<Superelevation> Superelevation {
            get {
                if ((this.SuperelevationField == null)) {
                    this.SuperelevationField = new XTypedList<Superelevation>(this, LinqToXsdTypeManager.Instance, SuperelevationXName);
                }
                return this.SuperelevationField;
            }
            set {
                if ((value == null)) {
                    this.SuperelevationField = null;
                }
                else {
                    if ((this.SuperelevationField == null)) {
                        this.SuperelevationField = XTypedList<Superelevation>.Initialize(this, LinqToXsdTypeManager.Instance, value, SuperelevationXName);
                    }
                    else {
                        XTypedServices.SetList<Superelevation>(this.SuperelevationField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating, choice
        /// </para>
        /// <para>
        /// Regular expression: (Start? | CoordGeom | AlignPIs? | Cant? | StaEquation* | Profile* | CrossSects? | Superelevation* | Feature*)+
        /// </para>
        /// </summary>
        public virtual IList<Feature> Feature {
            get {
                if ((this.FeatureField == null)) {
                    this.FeatureField = new XTypedList<Feature>(this, LinqToXsdTypeManager.Instance, FeatureXName);
                }
                return this.FeatureField;
            }
            set {
                if ((value == null)) {
                    this.FeatureField = null;
                }
                else {
                    if ((this.FeatureField == null)) {
                        this.FeatureField = XTypedList<Feature>.Initialize(this, LinqToXsdTypeManager.Instance, value, FeatureXName);
                    }
                    else {
                        XTypedServices.SetList<Feature>(this.FeatureField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual string name {
            get {
                XAttribute x = this.Attribute(nameXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(nameXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual double length {
            get {
                XAttribute x = this.Attribute(lengthXName);
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetAttribute(lengthXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual double staStart {
            get {
                XAttribute x = this.Attribute(staStartXName);
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetAttribute(staStartXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string desc {
            get {
                XAttribute x = this.Attribute(descXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(descXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string oID {
            get {
                XAttribute x = this.Attribute(oIDXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(oIDXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual LandXml.v1_2.stateType? state {
            get {
                XAttribute x = this.Attribute(stateXName);
                if ((x == null)) {
                    return null;
                }
                return ((LandXml.v1_2.stateType)(Enum.Parse(typeof(LandXml.v1_2.stateType), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetAttribute(stateXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static Alignment Load(string xmlFile) {
            return XTypedServices.Load<Alignment>(xmlFile);
        }
        
        public static Alignment Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<Alignment>(xmlFile);
        }
        
        public static Alignment Parse(string xml) {
            return XTypedServices.Parse<Alignment>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<Alignment>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(StartXName, typeof(Start));
            localElementDictionary.Add(CoordGeomXName, typeof(CoordGeom));
            localElementDictionary.Add(AlignPIsXName, typeof(AlignPIs));
            localElementDictionary.Add(CantXName, typeof(Cant));
            localElementDictionary.Add(StaEquationXName, typeof(StaEquation));
            localElementDictionary.Add(ProfileXName, typeof(Profile));
            localElementDictionary.Add(CrossSectsXName, typeof(CrossSects));
            localElementDictionary.Add(SuperelevationXName, typeof(Superelevation));
            localElementDictionary.Add(FeatureXName, typeof(Feature));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Feature*)
    /// </para>
    /// </summary>
    public partial class StaEquation : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName FeatureXName = System.Xml.Linq.XName.Get("Feature", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<Feature> FeatureField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName staAheadXName = System.Xml.Linq.XName.Get("staAhead", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName staBackXName = System.Xml.Linq.XName.Get("staBack", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName staInternalXName = System.Xml.Linq.XName.Get("staInternal", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName staIncrementXName = System.Xml.Linq.XName.Get("staIncrement", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName descXName = System.Xml.Linq.XName.Get("desc", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("StaEquation", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator StaEquation(XElement xe) { return XTypedServices.ToXTypedElement<StaEquation>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static StaEquation() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(FeatureXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Feature*)
        /// </para>
        /// </summary>
        public StaEquation() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Feature*)
        /// </para>
        /// </summary>
        public virtual IList<Feature> Feature {
            get {
                if ((this.FeatureField == null)) {
                    this.FeatureField = new XTypedList<Feature>(this, LinqToXsdTypeManager.Instance, FeatureXName);
                }
                return this.FeatureField;
            }
            set {
                if ((value == null)) {
                    this.FeatureField = null;
                }
                else {
                    if ((this.FeatureField == null)) {
                        this.FeatureField = XTypedList<Feature>.Initialize(this, LinqToXsdTypeManager.Instance, value, FeatureXName);
                    }
                    else {
                        XTypedServices.SetList<Feature>(this.FeatureField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual double staAhead {
            get {
                XAttribute x = this.Attribute(staAheadXName);
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetAttribute(staAheadXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Double? staBack {
            get {
                XAttribute x = this.Attribute(staBackXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetAttribute(staBackXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual double staInternal {
            get {
                XAttribute x = this.Attribute(staInternalXName);
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetAttribute(staInternalXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual LandXml.v1_2.stationIncrementDirectionType? staIncrement {
            get {
                XAttribute x = this.Attribute(staIncrementXName);
                if ((x == null)) {
                    return null;
                }
                return ((LandXml.v1_2.stationIncrementDirectionType)(Enum.Parse(typeof(LandXml.v1_2.stationIncrementDirectionType), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetAttribute(staIncrementXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string desc {
            get {
                XAttribute x = this.Attribute(descXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(descXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static StaEquation Load(string xmlFile) {
            return XTypedServices.Load<StaEquation>(xmlFile);
        }
        
        public static StaEquation Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<StaEquation>(xmlFile);
        }
        
        public static StaEquation Parse(string xml) {
            return XTypedServices.Parse<StaEquation>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<StaEquation>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(FeatureXName, typeof(Feature));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: ((ProfSurf* | ProfAlign*)+, Feature*)
    /// </para>
    /// </summary>
    public partial class Profile : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ProfSurfXName = System.Xml.Linq.XName.Get("ProfSurf", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ProfSurf> ProfSurfField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ProfAlignXName = System.Xml.Linq.XName.Get("ProfAlign", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ProfAlign> ProfAlignField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName FeatureXName = System.Xml.Linq.XName.Get("Feature", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<Feature> FeatureField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName descXName = System.Xml.Linq.XName.Get("desc", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName nameXName = System.Xml.Linq.XName.Get("name", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName staStartXName = System.Xml.Linq.XName.Get("staStart", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName stateXName = System.Xml.Linq.XName.Get("state", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("Profile", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator Profile(XElement xe) { return XTypedServices.ToXTypedElement<Profile>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static Profile() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new ChoiceContentModelEntity(new NamedContentModelEntity(ProfSurfXName), new NamedContentModelEntity(ProfAlignXName)), new NamedContentModelEntity(FeatureXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: ((ProfSurf* | ProfAlign*)+, Feature*)
        /// </para>
        /// </summary>
        public Profile() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((ProfSurf* | ProfAlign*)+, Feature*)
        /// </para>
        /// </summary>
        public virtual IList<ProfSurf> ProfSurf {
            get {
                if ((this.ProfSurfField == null)) {
                    this.ProfSurfField = new XTypedList<ProfSurf>(this, LinqToXsdTypeManager.Instance, ProfSurfXName);
                }
                return this.ProfSurfField;
            }
            set {
                if ((value == null)) {
                    this.ProfSurfField = null;
                }
                else {
                    if ((this.ProfSurfField == null)) {
                        this.ProfSurfField = XTypedList<ProfSurf>.Initialize(this, LinqToXsdTypeManager.Instance, value, ProfSurfXName);
                    }
                    else {
                        XTypedServices.SetList<ProfSurf>(this.ProfSurfField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((ProfSurf* | ProfAlign*)+, Feature*)
        /// </para>
        /// </summary>
        public virtual IList<ProfAlign> ProfAlign {
            get {
                if ((this.ProfAlignField == null)) {
                    this.ProfAlignField = new XTypedList<ProfAlign>(this, LinqToXsdTypeManager.Instance, ProfAlignXName);
                }
                return this.ProfAlignField;
            }
            set {
                if ((value == null)) {
                    this.ProfAlignField = null;
                }
                else {
                    if ((this.ProfAlignField == null)) {
                        this.ProfAlignField = XTypedList<ProfAlign>.Initialize(this, LinqToXsdTypeManager.Instance, value, ProfAlignXName);
                    }
                    else {
                        XTypedServices.SetList<ProfAlign>(this.ProfAlignField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: ((ProfSurf* | ProfAlign*)+, Feature*)
        /// </para>
        /// </summary>
        public virtual IList<Feature> Feature {
            get {
                if ((this.FeatureField == null)) {
                    this.FeatureField = new XTypedList<Feature>(this, LinqToXsdTypeManager.Instance, FeatureXName);
                }
                return this.FeatureField;
            }
            set {
                if ((value == null)) {
                    this.FeatureField = null;
                }
                else {
                    if ((this.FeatureField == null)) {
                        this.FeatureField = XTypedList<Feature>.Initialize(this, LinqToXsdTypeManager.Instance, value, FeatureXName);
                    }
                    else {
                        XTypedServices.SetList<Feature>(this.FeatureField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string desc {
            get {
                XAttribute x = this.Attribute(descXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(descXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string name {
            get {
                XAttribute x = this.Attribute(nameXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(nameXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Double? staStart {
            get {
                XAttribute x = this.Attribute(staStartXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetAttribute(staStartXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual LandXml.v1_2.stateType? state {
            get {
                XAttribute x = this.Attribute(stateXName);
                if ((x == null)) {
                    return null;
                }
                return ((LandXml.v1_2.stateType)(Enum.Parse(typeof(LandXml.v1_2.stateType), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetAttribute(stateXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static Profile Load(string xmlFile) {
            return XTypedServices.Load<Profile>(xmlFile);
        }
        
        public static Profile Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<Profile>(xmlFile);
        }
        
        public static Profile Parse(string xml) {
            return XTypedServices.Parse<Profile>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<Profile>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(ProfSurfXName, typeof(ProfSurf));
            localElementDictionary.Add(ProfAlignXName, typeof(ProfAlign));
            localElementDictionary.Add(FeatureXName, typeof(Feature));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (PntList2D+, Feature*)
    /// </para>
    /// </summary>
    public partial class ProfSurf : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName PntList2DXName = System.Xml.Linq.XName.Get("PntList2D", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XSimpleList<PntList2D> PntList2DField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName FeatureXName = System.Xml.Linq.XName.Get("Feature", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<Feature> FeatureField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName nameXName = System.Xml.Linq.XName.Get("name", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName descXName = System.Xml.Linq.XName.Get("desc", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName stateXName = System.Xml.Linq.XName.Get("state", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("ProfSurf", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator ProfSurf(XElement xe) { return XTypedServices.ToXTypedElement<ProfSurf>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static ProfSurf() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(PntList2DXName), new NamedContentModelEntity(FeatureXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (PntList2D+, Feature*)
        /// </para>
        /// </summary>
        public ProfSurf() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (PntList2D+, Feature*)
        /// </para>
        /// </summary>
        public virtual IList<PntList2D> PntList2D {
            get {
                if ((this.PntList2DField == null)) {
                    this.PntList2DField = new XSimpleList<PntList2D>(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype, PntList2DXName);
                }
                return this.PntList2DField;
            }
            set {
                if ((value == null)) {
                    this.PntList2DField = null;
                }
                else {
                    if ((this.PntList2DField == null)) {
                        this.PntList2DField = XSimpleList<PntList2D>.Initialize(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype, value, PntList2DXName);
                    }
                    else {
                        XTypedServices.SetList<PntList2D>(this.PntList2DField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (PntList2D+, Feature*)
        /// </para>
        /// </summary>
        public virtual IList<Feature> Feature {
            get {
                if ((this.FeatureField == null)) {
                    this.FeatureField = new XTypedList<Feature>(this, LinqToXsdTypeManager.Instance, FeatureXName);
                }
                return this.FeatureField;
            }
            set {
                if ((value == null)) {
                    this.FeatureField = null;
                }
                else {
                    if ((this.FeatureField == null)) {
                        this.FeatureField = XTypedList<Feature>.Initialize(this, LinqToXsdTypeManager.Instance, value, FeatureXName);
                    }
                    else {
                        XTypedServices.SetList<Feature>(this.FeatureField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual string name {
            get {
                XAttribute x = this.Attribute(nameXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(nameXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string desc {
            get {
                XAttribute x = this.Attribute(descXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(descXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual LandXml.v1_2.stateType? state {
            get {
                XAttribute x = this.Attribute(stateXName);
                if ((x == null)) {
                    return null;
                }
                return ((LandXml.v1_2.stateType)(Enum.Parse(typeof(LandXml.v1_2.stateType), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetAttribute(stateXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static ProfSurf Load(string xmlFile) {
            return XTypedServices.Load<ProfSurf>(xmlFile);
        }
        
        public static ProfSurf Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<ProfSurf>(xmlFile);
        }
        
        public static ProfSurf Parse(string xml) {
            return XTypedServices.Parse<ProfSurf>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ProfSurf>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(PntList2DXName, typeof(PntList2D));
            localElementDictionary.Add(FeatureXName, typeof(Feature));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: ((PVI* | ParaCurve* | UnsymParaCurve* | CircCurve*)+, Feature*)
    /// </para>
    /// </summary>
    public partial class ProfAlign : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName PVIXName = System.Xml.Linq.XName.Get("PVI", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<PVI> PVIField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ParaCurveXName = System.Xml.Linq.XName.Get("ParaCurve", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ParaCurve> ParaCurveField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName UnsymParaCurveXName = System.Xml.Linq.XName.Get("UnsymParaCurve", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<UnsymParaCurve> UnsymParaCurveField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName CircCurveXName = System.Xml.Linq.XName.Get("CircCurve", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<CircCurve> CircCurveField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName FeatureXName = System.Xml.Linq.XName.Get("Feature", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<Feature> FeatureField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName nameXName = System.Xml.Linq.XName.Get("name", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName descXName = System.Xml.Linq.XName.Get("desc", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName stateXName = System.Xml.Linq.XName.Get("state", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("ProfAlign", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator ProfAlign(XElement xe) { return XTypedServices.ToXTypedElement<ProfAlign>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static ProfAlign() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new ChoiceContentModelEntity(new NamedContentModelEntity(PVIXName), new NamedContentModelEntity(ParaCurveXName), new NamedContentModelEntity(UnsymParaCurveXName), new NamedContentModelEntity(CircCurveXName)), new NamedContentModelEntity(FeatureXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: ((PVI* | ParaCurve* | UnsymParaCurve* | CircCurve*)+, Feature*)
        /// </para>
        /// </summary>
        public ProfAlign() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((PVI* | ParaCurve* | UnsymParaCurve* | CircCurve*)+, Feature*)
        /// </para>
        /// </summary>
        public virtual IList<PVI> PVI {
            get {
                if ((this.PVIField == null)) {
                    this.PVIField = new XTypedList<PVI>(this, LinqToXsdTypeManager.Instance, PVIXName);
                }
                return this.PVIField;
            }
            set {
                if ((value == null)) {
                    this.PVIField = null;
                }
                else {
                    if ((this.PVIField == null)) {
                        this.PVIField = XTypedList<PVI>.Initialize(this, LinqToXsdTypeManager.Instance, value, PVIXName);
                    }
                    else {
                        XTypedServices.SetList<PVI>(this.PVIField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((PVI* | ParaCurve* | UnsymParaCurve* | CircCurve*)+, Feature*)
        /// </para>
        /// </summary>
        public virtual IList<ParaCurve> ParaCurve {
            get {
                if ((this.ParaCurveField == null)) {
                    this.ParaCurveField = new XTypedList<ParaCurve>(this, LinqToXsdTypeManager.Instance, ParaCurveXName);
                }
                return this.ParaCurveField;
            }
            set {
                if ((value == null)) {
                    this.ParaCurveField = null;
                }
                else {
                    if ((this.ParaCurveField == null)) {
                        this.ParaCurveField = XTypedList<ParaCurve>.Initialize(this, LinqToXsdTypeManager.Instance, value, ParaCurveXName);
                    }
                    else {
                        XTypedServices.SetList<ParaCurve>(this.ParaCurveField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((PVI* | ParaCurve* | UnsymParaCurve* | CircCurve*)+, Feature*)
        /// </para>
        /// </summary>
        public virtual IList<UnsymParaCurve> UnsymParaCurve {
            get {
                if ((this.UnsymParaCurveField == null)) {
                    this.UnsymParaCurveField = new XTypedList<UnsymParaCurve>(this, LinqToXsdTypeManager.Instance, UnsymParaCurveXName);
                }
                return this.UnsymParaCurveField;
            }
            set {
                if ((value == null)) {
                    this.UnsymParaCurveField = null;
                }
                else {
                    if ((this.UnsymParaCurveField == null)) {
                        this.UnsymParaCurveField = XTypedList<UnsymParaCurve>.Initialize(this, LinqToXsdTypeManager.Instance, value, UnsymParaCurveXName);
                    }
                    else {
                        XTypedServices.SetList<UnsymParaCurve>(this.UnsymParaCurveField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((PVI* | ParaCurve* | UnsymParaCurve* | CircCurve*)+, Feature*)
        /// </para>
        /// </summary>
        public virtual IList<CircCurve> CircCurve {
            get {
                if ((this.CircCurveField == null)) {
                    this.CircCurveField = new XTypedList<CircCurve>(this, LinqToXsdTypeManager.Instance, CircCurveXName);
                }
                return this.CircCurveField;
            }
            set {
                if ((value == null)) {
                    this.CircCurveField = null;
                }
                else {
                    if ((this.CircCurveField == null)) {
                        this.CircCurveField = XTypedList<CircCurve>.Initialize(this, LinqToXsdTypeManager.Instance, value, CircCurveXName);
                    }
                    else {
                        XTypedServices.SetList<CircCurve>(this.CircCurveField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: ((PVI* | ParaCurve* | UnsymParaCurve* | CircCurve*)+, Feature*)
        /// </para>
        /// </summary>
        public virtual IList<Feature> Feature {
            get {
                if ((this.FeatureField == null)) {
                    this.FeatureField = new XTypedList<Feature>(this, LinqToXsdTypeManager.Instance, FeatureXName);
                }
                return this.FeatureField;
            }
            set {
                if ((value == null)) {
                    this.FeatureField = null;
                }
                else {
                    if ((this.FeatureField == null)) {
                        this.FeatureField = XTypedList<Feature>.Initialize(this, LinqToXsdTypeManager.Instance, value, FeatureXName);
                    }
                    else {
                        XTypedServices.SetList<Feature>(this.FeatureField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual string name {
            get {
                XAttribute x = this.Attribute(nameXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(nameXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string desc {
            get {
                XAttribute x = this.Attribute(descXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(descXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual LandXml.v1_2.stateType? state {
            get {
                XAttribute x = this.Attribute(stateXName);
                if ((x == null)) {
                    return null;
                }
                return ((LandXml.v1_2.stateType)(Enum.Parse(typeof(LandXml.v1_2.stateType), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetAttribute(stateXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static ProfAlign Load(string xmlFile) {
            return XTypedServices.Load<ProfAlign>(xmlFile);
        }
        
        public static ProfAlign Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<ProfAlign>(xmlFile);
        }
        
        public static ProfAlign Parse(string xml) {
            return XTypedServices.Parse<ProfAlign>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ProfAlign>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(PVIXName, typeof(PVI));
            localElementDictionary.Add(ParaCurveXName, typeof(ParaCurve));
            localElementDictionary.Add(UnsymParaCurveXName, typeof(UnsymParaCurve));
            localElementDictionary.Add(CircCurveXName, typeof(CircCurve));
            localElementDictionary.Add(FeatureXName, typeof(Feature));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    public partial class PVI : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TypedValueXName = System.Xml.Linq.XName.Get("TypedValue", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName descXName = System.Xml.Linq.XName.Get("desc", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("PVI", "http://www.landxml.org/schema/LandXML-1.2");
        
		public static explicit operator PVI(XElement xe) { return XTypedServices.ToXTypedElement<PVI>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public PVI() {
        }
        
        public virtual IList<double> TypedValue {
            get {
                XElement x = this.Untyped;
                return XTypedServices.ParseListValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetListValueWithValidation(value, "TypedValue", global::LandXml.v1_2.Point2dReq.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string desc {
            get {
                XAttribute x = this.Attribute(descXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(descXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static PVI Load(string xmlFile) {
            return XTypedServices.Load<PVI>(xmlFile);
        }
        
        public static PVI Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<PVI>(xmlFile);
        }
        
        public static PVI Parse(string xml) {
            return XTypedServices.Parse<PVI>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<PVI>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class ParaCurve : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TypedValueXName = System.Xml.Linq.XName.Get("TypedValue", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName lengthXName = System.Xml.Linq.XName.Get("length", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName descXName = System.Xml.Linq.XName.Get("desc", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("ParaCurve", "http://www.landxml.org/schema/LandXML-1.2");
        
		public static explicit operator ParaCurve(XElement xe) { return XTypedServices.ToXTypedElement<ParaCurve>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public ParaCurve() {
        }
        
        public virtual IList<double> TypedValue {
            get {
                XElement x = this.Untyped;
                return XTypedServices.ParseListValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetListValueWithValidation(value, "TypedValue", global::LandXml.v1_2.Point2dReq.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual double length {
            get {
                XAttribute x = this.Attribute(lengthXName);
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetAttribute(lengthXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string desc {
            get {
                XAttribute x = this.Attribute(descXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(descXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static ParaCurve Load(string xmlFile) {
            return XTypedServices.Load<ParaCurve>(xmlFile);
        }
        
        public static ParaCurve Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<ParaCurve>(xmlFile);
        }
        
        public static ParaCurve Parse(string xml) {
            return XTypedServices.Parse<ParaCurve>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ParaCurve>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class UnsymParaCurve : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TypedValueXName = System.Xml.Linq.XName.Get("TypedValue", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName lengthInXName = System.Xml.Linq.XName.Get("lengthIn", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName lengthOutXName = System.Xml.Linq.XName.Get("lengthOut", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName descXName = System.Xml.Linq.XName.Get("desc", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("UnsymParaCurve", "http://www.landxml.org/schema/LandXML-1.2");
        
		public static explicit operator UnsymParaCurve(XElement xe) { return XTypedServices.ToXTypedElement<UnsymParaCurve>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public UnsymParaCurve() {
        }
        
        public virtual IList<double> TypedValue {
            get {
                XElement x = this.Untyped;
                return XTypedServices.ParseListValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetListValueWithValidation(value, "TypedValue", global::LandXml.v1_2.Point2dReq.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual double lengthIn {
            get {
                XAttribute x = this.Attribute(lengthInXName);
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetAttribute(lengthInXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual double lengthOut {
            get {
                XAttribute x = this.Attribute(lengthOutXName);
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetAttribute(lengthOutXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string desc {
            get {
                XAttribute x = this.Attribute(descXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(descXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static UnsymParaCurve Load(string xmlFile) {
            return XTypedServices.Load<UnsymParaCurve>(xmlFile);
        }
        
        public static UnsymParaCurve Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<UnsymParaCurve>(xmlFile);
        }
        
        public static UnsymParaCurve Parse(string xml) {
            return XTypedServices.Parse<UnsymParaCurve>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<UnsymParaCurve>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class CircCurve : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TypedValueXName = System.Xml.Linq.XName.Get("TypedValue", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName lengthXName = System.Xml.Linq.XName.Get("length", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName radiusXName = System.Xml.Linq.XName.Get("radius", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName descXName = System.Xml.Linq.XName.Get("desc", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("CircCurve", "http://www.landxml.org/schema/LandXML-1.2");
        
		public static explicit operator CircCurve(XElement xe) { return XTypedServices.ToXTypedElement<CircCurve>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public CircCurve() {
        }
        
        public virtual IList<double> TypedValue {
            get {
                XElement x = this.Untyped;
                return XTypedServices.ParseListValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetListValue(value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual double length {
            get {
                XAttribute x = this.Attribute(lengthXName);
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetAttribute(lengthXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual double radius {
            get {
                XAttribute x = this.Attribute(radiusXName);
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetAttribute(radiusXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string desc {
            get {
                XAttribute x = this.Attribute(descXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(descXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static CircCurve Load(string xmlFile) {
            return XTypedServices.Load<CircCurve>(xmlFile);
        }
        
        public static CircCurve Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<CircCurve>(xmlFile);
        }
        
        public static CircCurve Parse(string xml) {
            return XTypedServices.Parse<CircCurve>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<CircCurve>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (PipeNetwork+, Feature*)
    /// </para>
    /// </summary>
    public partial class PipeNetworks : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName PipeNetworkXName = System.Xml.Linq.XName.Get("PipeNetwork", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<PipeNetwork> PipeNetworkField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName FeatureXName = System.Xml.Linq.XName.Get("Feature", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<Feature> FeatureField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName descXName = System.Xml.Linq.XName.Get("desc", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName nameXName = System.Xml.Linq.XName.Get("name", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName stateXName = System.Xml.Linq.XName.Get("state", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("PipeNetworks", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator PipeNetworks(XElement xe) { return XTypedServices.ToXTypedElement<PipeNetworks>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static PipeNetworks() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(PipeNetworkXName), new NamedContentModelEntity(FeatureXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (PipeNetwork+, Feature*)
        /// </para>
        /// </summary>
        public PipeNetworks() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (PipeNetwork+, Feature*)
        /// </para>
        /// </summary>
        public virtual IList<PipeNetwork> PipeNetwork {
            get {
                if ((this.PipeNetworkField == null)) {
                    this.PipeNetworkField = new XTypedList<PipeNetwork>(this, LinqToXsdTypeManager.Instance, PipeNetworkXName);
                }
                return this.PipeNetworkField;
            }
            set {
                if ((value == null)) {
                    this.PipeNetworkField = null;
                }
                else {
                    if ((this.PipeNetworkField == null)) {
                        this.PipeNetworkField = XTypedList<PipeNetwork>.Initialize(this, LinqToXsdTypeManager.Instance, value, PipeNetworkXName);
                    }
                    else {
                        XTypedServices.SetList<PipeNetwork>(this.PipeNetworkField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (PipeNetwork+, Feature*)
        /// </para>
        /// </summary>
        public virtual IList<Feature> Feature {
            get {
                if ((this.FeatureField == null)) {
                    this.FeatureField = new XTypedList<Feature>(this, LinqToXsdTypeManager.Instance, FeatureXName);
                }
                return this.FeatureField;
            }
            set {
                if ((value == null)) {
                    this.FeatureField = null;
                }
                else {
                    if ((this.FeatureField == null)) {
                        this.FeatureField = XTypedList<Feature>.Initialize(this, LinqToXsdTypeManager.Instance, value, FeatureXName);
                    }
                    else {
                        XTypedServices.SetList<Feature>(this.FeatureField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string desc {
            get {
                XAttribute x = this.Attribute(descXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(descXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string name {
            get {
                XAttribute x = this.Attribute(nameXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(nameXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual LandXml.v1_2.stateType? state {
            get {
                XAttribute x = this.Attribute(stateXName);
                if ((x == null)) {
                    return null;
                }
                return ((LandXml.v1_2.stateType)(Enum.Parse(typeof(LandXml.v1_2.stateType), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetAttribute(stateXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static PipeNetworks Load(string xmlFile) {
            return XTypedServices.Load<PipeNetworks>(xmlFile);
        }
        
        public static PipeNetworks Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<PipeNetworks>(xmlFile);
        }
        
        public static PipeNetworks Parse(string xml) {
            return XTypedServices.Parse<PipeNetworks>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<PipeNetworks>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(PipeNetworkXName, typeof(PipeNetwork));
            localElementDictionary.Add(FeatureXName, typeof(Feature));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Structs, Pipes, Feature*)
    /// </para>
    /// </summary>
    public partial class PipeNetwork : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName StructsXName = System.Xml.Linq.XName.Get("Structs", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName PipesXName = System.Xml.Linq.XName.Get("Pipes", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName FeatureXName = System.Xml.Linq.XName.Get("Feature", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<Feature> FeatureField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName nameXName = System.Xml.Linq.XName.Get("name", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName pipeNetTypeXName = System.Xml.Linq.XName.Get("pipeNetType", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName alignmentRefXName = System.Xml.Linq.XName.Get("alignmentRef", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName descXName = System.Xml.Linq.XName.Get("desc", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName oIDXName = System.Xml.Linq.XName.Get("oID", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName stateXName = System.Xml.Linq.XName.Get("state", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("PipeNetwork", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator PipeNetwork(XElement xe) { return XTypedServices.ToXTypedElement<PipeNetwork>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static PipeNetwork() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(StructsXName), new NamedContentModelEntity(PipesXName), new NamedContentModelEntity(FeatureXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Structs, Pipes, Feature*)
        /// </para>
        /// </summary>
        public PipeNetwork() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (Structs, Pipes, Feature*)
        /// </para>
        /// </summary>
        public virtual Structs Structs {
            get {
                XElement x = this.GetElement(StructsXName);
                return ((Structs)(x));
            }
            set {
                this.SetElement(StructsXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (Structs, Pipes, Feature*)
        /// </para>
        /// </summary>
        public virtual Pipes Pipes {
            get {
                XElement x = this.GetElement(PipesXName);
                return ((Pipes)(x));
            }
            set {
                this.SetElement(PipesXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Structs, Pipes, Feature*)
        /// </para>
        /// </summary>
        public virtual IList<Feature> Feature {
            get {
                if ((this.FeatureField == null)) {
                    this.FeatureField = new XTypedList<Feature>(this, LinqToXsdTypeManager.Instance, FeatureXName);
                }
                return this.FeatureField;
            }
            set {
                if ((value == null)) {
                    this.FeatureField = null;
                }
                else {
                    if ((this.FeatureField == null)) {
                        this.FeatureField = XTypedList<Feature>.Initialize(this, LinqToXsdTypeManager.Instance, value, FeatureXName);
                    }
                    else {
                        XTypedServices.SetList<Feature>(this.FeatureField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual string name {
            get {
                XAttribute x = this.Attribute(nameXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(nameXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual LandXml.v1_2.pipeNetworkType pipeNetType {
            get {
                XAttribute x = this.Attribute(pipeNetTypeXName);
                return ((LandXml.v1_2.pipeNetworkType)(Enum.Parse(typeof(LandXml.v1_2.pipeNetworkType), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetAttribute(pipeNetTypeXName, value.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string alignmentRef {
            get {
                XAttribute x = this.Attribute(alignmentRefXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(alignmentRefXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string desc {
            get {
                XAttribute x = this.Attribute(descXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(descXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string oID {
            get {
                XAttribute x = this.Attribute(oIDXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(oIDXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual LandXml.v1_2.stateType? state {
            get {
                XAttribute x = this.Attribute(stateXName);
                if ((x == null)) {
                    return null;
                }
                return ((LandXml.v1_2.stateType)(Enum.Parse(typeof(LandXml.v1_2.stateType), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetAttribute(stateXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static PipeNetwork Load(string xmlFile) {
            return XTypedServices.Load<PipeNetwork>(xmlFile);
        }
        
        public static PipeNetwork Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<PipeNetwork>(xmlFile);
        }
        
        public static PipeNetwork Parse(string xml) {
            return XTypedServices.Parse<PipeNetwork>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<PipeNetwork>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(StructsXName, typeof(Structs));
            localElementDictionary.Add(PipesXName, typeof(Pipes));
            localElementDictionary.Add(FeatureXName, typeof(Feature));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Units?, Pipe+, Feature*)
    /// </para>
    /// </summary>
    public partial class Pipes : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName UnitsXName = System.Xml.Linq.XName.Get("Units", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName PipeXName = System.Xml.Linq.XName.Get("Pipe", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<Pipe> PipeField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName FeatureXName = System.Xml.Linq.XName.Get("Feature", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<Feature> FeatureField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("Pipes", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator Pipes(XElement xe) { return XTypedServices.ToXTypedElement<Pipes>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static Pipes() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(UnitsXName), new NamedContentModelEntity(PipeXName), new NamedContentModelEntity(FeatureXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Units?, Pipe+, Feature*)
        /// </para>
        /// </summary>
        public Pipes() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Units?, Pipe+, Feature*)
        /// </para>
        /// </summary>
        public virtual Units Units {
            get {
                XElement x = this.GetElement(UnitsXName);
                return ((Units)(x));
            }
            set {
                this.SetElement(UnitsXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Units?, Pipe+, Feature*)
        /// </para>
        /// </summary>
        public virtual IList<Pipe> Pipe {
            get {
                if ((this.PipeField == null)) {
                    this.PipeField = new XTypedList<Pipe>(this, LinqToXsdTypeManager.Instance, PipeXName);
                }
                return this.PipeField;
            }
            set {
                if ((value == null)) {
                    this.PipeField = null;
                }
                else {
                    if ((this.PipeField == null)) {
                        this.PipeField = XTypedList<Pipe>.Initialize(this, LinqToXsdTypeManager.Instance, value, PipeXName);
                    }
                    else {
                        XTypedServices.SetList<Pipe>(this.PipeField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Units?, Pipe+, Feature*)
        /// </para>
        /// </summary>
        public virtual IList<Feature> Feature {
            get {
                if ((this.FeatureField == null)) {
                    this.FeatureField = new XTypedList<Feature>(this, LinqToXsdTypeManager.Instance, FeatureXName);
                }
                return this.FeatureField;
            }
            set {
                if ((value == null)) {
                    this.FeatureField = null;
                }
                else {
                    if ((this.FeatureField == null)) {
                        this.FeatureField = XTypedList<Feature>.Initialize(this, LinqToXsdTypeManager.Instance, value, FeatureXName);
                    }
                    else {
                        XTypedServices.SetList<Feature>(this.FeatureField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static Pipes Load(string xmlFile) {
            return XTypedServices.Load<Pipes>(xmlFile);
        }
        
        public static Pipes Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<Pipes>(xmlFile);
        }
        
        public static Pipes Parse(string xml) {
            return XTypedServices.Parse<Pipes>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<Pipes>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(UnitsXName, typeof(Units));
            localElementDictionary.Add(PipeXName, typeof(Pipe));
            localElementDictionary.Add(FeatureXName, typeof(Feature));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: ((CircPipe | EggPipe | ElliPipe | RectPipe | Channel), PipeFlow?, Center?, Feature*)
    /// </para>
    /// </summary>
    public partial class Pipe : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName CircPipeXName = System.Xml.Linq.XName.Get("CircPipe", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName EggPipeXName = System.Xml.Linq.XName.Get("EggPipe", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ElliPipeXName = System.Xml.Linq.XName.Get("ElliPipe", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName RectPipeXName = System.Xml.Linq.XName.Get("RectPipe", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ChannelXName = System.Xml.Linq.XName.Get("Channel", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName PipeFlowXName = System.Xml.Linq.XName.Get("PipeFlow", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName CenterXName = System.Xml.Linq.XName.Get("Center", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName FeatureXName = System.Xml.Linq.XName.Get("Feature", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<Feature> FeatureField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName nameXName = System.Xml.Linq.XName.Get("name", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName refEndXName = System.Xml.Linq.XName.Get("refEnd", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName refStartXName = System.Xml.Linq.XName.Get("refStart", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName descXName = System.Xml.Linq.XName.Get("desc", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName lengthXName = System.Xml.Linq.XName.Get("length", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName oIDXName = System.Xml.Linq.XName.Get("oID", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName slopeXName = System.Xml.Linq.XName.Get("slope", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName stateXName = System.Xml.Linq.XName.Get("state", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("Pipe", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator Pipe(XElement xe) { return XTypedServices.ToXTypedElement<Pipe>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static Pipe() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new ChoiceContentModelEntity(new NamedContentModelEntity(CircPipeXName), new NamedContentModelEntity(EggPipeXName), new NamedContentModelEntity(ElliPipeXName), new NamedContentModelEntity(RectPipeXName), new NamedContentModelEntity(ChannelXName)), new NamedContentModelEntity(PipeFlowXName), new NamedContentModelEntity(CenterXName), new NamedContentModelEntity(FeatureXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: ((CircPipe | EggPipe | ElliPipe | RectPipe | Channel), PipeFlow?, Center?, Feature*)
        /// </para>
        /// </summary>
        public Pipe() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((CircPipe | EggPipe | ElliPipe | RectPipe | Channel), PipeFlow?, Center?, Feature*)
        /// </para>
        /// </summary>
        public virtual CircPipe CircPipe {
            get {
                XElement x = this.GetElement(CircPipeXName);
                return ((CircPipe)(x));
            }
            set {
                this.SetElement(CircPipeXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((CircPipe | EggPipe | ElliPipe | RectPipe | Channel), PipeFlow?, Center?, Feature*)
        /// </para>
        /// </summary>
        public virtual EggPipe EggPipe {
            get {
                XElement x = this.GetElement(EggPipeXName);
                return ((EggPipe)(x));
            }
            set {
                this.SetElement(EggPipeXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((CircPipe | EggPipe | ElliPipe | RectPipe | Channel), PipeFlow?, Center?, Feature*)
        /// </para>
        /// </summary>
        public virtual ElliPipe ElliPipe {
            get {
                XElement x = this.GetElement(ElliPipeXName);
                return ((ElliPipe)(x));
            }
            set {
                this.SetElement(ElliPipeXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((CircPipe | EggPipe | ElliPipe | RectPipe | Channel), PipeFlow?, Center?, Feature*)
        /// </para>
        /// </summary>
        public virtual RectPipe RectPipe {
            get {
                XElement x = this.GetElement(RectPipeXName);
                return ((RectPipe)(x));
            }
            set {
                this.SetElement(RectPipeXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((CircPipe | EggPipe | ElliPipe | RectPipe | Channel), PipeFlow?, Center?, Feature*)
        /// </para>
        /// </summary>
        public virtual Channel Channel {
            get {
                XElement x = this.GetElement(ChannelXName);
                return ((Channel)(x));
            }
            set {
                this.SetElement(ChannelXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: ((CircPipe | EggPipe | ElliPipe | RectPipe | Channel), PipeFlow?, Center?, Feature*)
        /// </para>
        /// </summary>
        public virtual PipeFlow PipeFlow {
            get {
                XElement x = this.GetElement(PipeFlowXName);
                return ((PipeFlow)(x));
            }
            set {
                this.SetElement(PipeFlowXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: ((CircPipe | EggPipe | ElliPipe | RectPipe | Channel), PipeFlow?, Center?, Feature*)
        /// </para>
        /// </summary>
        public virtual Center Center {
            get {
                XElement x = this.GetElement(CenterXName);
                return ((Center)(x));
            }
            set {
                this.SetElement(CenterXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: ((CircPipe | EggPipe | ElliPipe | RectPipe | Channel), PipeFlow?, Center?, Feature*)
        /// </para>
        /// </summary>
        public virtual IList<Feature> Feature {
            get {
                if ((this.FeatureField == null)) {
                    this.FeatureField = new XTypedList<Feature>(this, LinqToXsdTypeManager.Instance, FeatureXName);
                }
                return this.FeatureField;
            }
            set {
                if ((value == null)) {
                    this.FeatureField = null;
                }
                else {
                    if ((this.FeatureField == null)) {
                        this.FeatureField = XTypedList<Feature>.Initialize(this, LinqToXsdTypeManager.Instance, value, FeatureXName);
                    }
                    else {
                        XTypedServices.SetList<Feature>(this.FeatureField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual string name {
            get {
                XAttribute x = this.Attribute(nameXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(nameXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual string refEnd {
            get {
                XAttribute x = this.Attribute(refEndXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(refEndXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual string refStart {
            get {
                XAttribute x = this.Attribute(refStartXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(refStartXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string desc {
            get {
                XAttribute x = this.Attribute(descXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(descXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Double? length {
            get {
                XAttribute x = this.Attribute(lengthXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetAttribute(lengthXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string oID {
            get {
                XAttribute x = this.Attribute(oIDXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(oIDXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Double? slope {
            get {
                XAttribute x = this.Attribute(slopeXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetAttribute(slopeXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual LandXml.v1_2.stateType? state {
            get {
                XAttribute x = this.Attribute(stateXName);
                if ((x == null)) {
                    return null;
                }
                return ((LandXml.v1_2.stateType)(Enum.Parse(typeof(LandXml.v1_2.stateType), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetAttribute(stateXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static Pipe Load(string xmlFile) {
            return XTypedServices.Load<Pipe>(xmlFile);
        }
        
        public static Pipe Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<Pipe>(xmlFile);
        }
        
        public static Pipe Parse(string xml) {
            return XTypedServices.Parse<Pipe>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<Pipe>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(CircPipeXName, typeof(CircPipe));
            localElementDictionary.Add(EggPipeXName, typeof(EggPipe));
            localElementDictionary.Add(ElliPipeXName, typeof(ElliPipe));
            localElementDictionary.Add(RectPipeXName, typeof(RectPipe));
            localElementDictionary.Add(ChannelXName, typeof(Channel));
            localElementDictionary.Add(PipeFlowXName, typeof(PipeFlow));
            localElementDictionary.Add(CenterXName, typeof(Center));
            localElementDictionary.Add(FeatureXName, typeof(Feature));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Feature*)
    /// </para>
    /// </summary>
    public partial class CircPipe : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName FeatureXName = System.Xml.Linq.XName.Get("Feature", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<Feature> FeatureField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName diameterXName = System.Xml.Linq.XName.Get("diameter", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName descXName = System.Xml.Linq.XName.Get("desc", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName hazenWilliamsXName = System.Xml.Linq.XName.Get("hazenWilliams", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName manningsXName = System.Xml.Linq.XName.Get("mannings", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName materialXName = System.Xml.Linq.XName.Get("material", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName thicknessXName = System.Xml.Linq.XName.Get("thickness", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("CircPipe", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator CircPipe(XElement xe) { return XTypedServices.ToXTypedElement<CircPipe>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static CircPipe() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(FeatureXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Feature*)
        /// </para>
        /// </summary>
        public CircPipe() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Feature*)
        /// </para>
        /// </summary>
        public virtual IList<Feature> Feature {
            get {
                if ((this.FeatureField == null)) {
                    this.FeatureField = new XTypedList<Feature>(this, LinqToXsdTypeManager.Instance, FeatureXName);
                }
                return this.FeatureField;
            }
            set {
                if ((value == null)) {
                    this.FeatureField = null;
                }
                else {
                    if ((this.FeatureField == null)) {
                        this.FeatureField = XTypedList<Feature>.Initialize(this, LinqToXsdTypeManager.Instance, value, FeatureXName);
                    }
                    else {
                        XTypedServices.SetList<Feature>(this.FeatureField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual double diameter {
            get {
                XAttribute x = this.Attribute(diameterXName);
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetAttribute(diameterXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string desc {
            get {
                XAttribute x = this.Attribute(descXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(descXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Double? hazenWilliams {
            get {
                XAttribute x = this.Attribute(hazenWilliamsXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetAttribute(hazenWilliamsXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Double? mannings {
            get {
                XAttribute x = this.Attribute(manningsXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetAttribute(manningsXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string material {
            get {
                XAttribute x = this.Attribute(materialXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(materialXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Double? thickness {
            get {
                XAttribute x = this.Attribute(thicknessXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetAttribute(thicknessXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static CircPipe Load(string xmlFile) {
            return XTypedServices.Load<CircPipe>(xmlFile);
        }
        
        public static CircPipe Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<CircPipe>(xmlFile);
        }
        
        public static CircPipe Parse(string xml) {
            return XTypedServices.Parse<CircPipe>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<CircPipe>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(FeatureXName, typeof(Feature));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Feature*)
    /// </para>
    /// </summary>
    public partial class ElliPipe : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName FeatureXName = System.Xml.Linq.XName.Get("Feature", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<Feature> FeatureField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName heightXName = System.Xml.Linq.XName.Get("height", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName spanXName = System.Xml.Linq.XName.Get("span", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName descXName = System.Xml.Linq.XName.Get("desc", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName hazenWilliamsXName = System.Xml.Linq.XName.Get("hazenWilliams", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName manningsXName = System.Xml.Linq.XName.Get("mannings", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName materialXName = System.Xml.Linq.XName.Get("material", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName thicknessXName = System.Xml.Linq.XName.Get("thickness", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("ElliPipe", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator ElliPipe(XElement xe) { return XTypedServices.ToXTypedElement<ElliPipe>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static ElliPipe() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(FeatureXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Feature*)
        /// </para>
        /// </summary>
        public ElliPipe() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Feature*)
        /// </para>
        /// </summary>
        public virtual IList<Feature> Feature {
            get {
                if ((this.FeatureField == null)) {
                    this.FeatureField = new XTypedList<Feature>(this, LinqToXsdTypeManager.Instance, FeatureXName);
                }
                return this.FeatureField;
            }
            set {
                if ((value == null)) {
                    this.FeatureField = null;
                }
                else {
                    if ((this.FeatureField == null)) {
                        this.FeatureField = XTypedList<Feature>.Initialize(this, LinqToXsdTypeManager.Instance, value, FeatureXName);
                    }
                    else {
                        XTypedServices.SetList<Feature>(this.FeatureField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual double height {
            get {
                XAttribute x = this.Attribute(heightXName);
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetAttribute(heightXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual double span {
            get {
                XAttribute x = this.Attribute(spanXName);
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetAttribute(spanXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string desc {
            get {
                XAttribute x = this.Attribute(descXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(descXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Double? hazenWilliams {
            get {
                XAttribute x = this.Attribute(hazenWilliamsXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetAttribute(hazenWilliamsXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Double? mannings {
            get {
                XAttribute x = this.Attribute(manningsXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetAttribute(manningsXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string material {
            get {
                XAttribute x = this.Attribute(materialXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(materialXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Double? thickness {
            get {
                XAttribute x = this.Attribute(thicknessXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetAttribute(thicknessXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static ElliPipe Load(string xmlFile) {
            return XTypedServices.Load<ElliPipe>(xmlFile);
        }
        
        public static ElliPipe Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<ElliPipe>(xmlFile);
        }
        
        public static ElliPipe Parse(string xml) {
            return XTypedServices.Parse<ElliPipe>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ElliPipe>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(FeatureXName, typeof(Feature));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Feature*)
    /// </para>
    /// </summary>
    public partial class EggPipe : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName FeatureXName = System.Xml.Linq.XName.Get("Feature", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<Feature> FeatureField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName heightXName = System.Xml.Linq.XName.Get("height", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName spanXName = System.Xml.Linq.XName.Get("span", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName descXName = System.Xml.Linq.XName.Get("desc", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName hazenWilliamsXName = System.Xml.Linq.XName.Get("hazenWilliams", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName manningsXName = System.Xml.Linq.XName.Get("mannings", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName materialXName = System.Xml.Linq.XName.Get("material", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName thicknessXName = System.Xml.Linq.XName.Get("thickness", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("EggPipe", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator EggPipe(XElement xe) { return XTypedServices.ToXTypedElement<EggPipe>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static EggPipe() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(FeatureXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Feature*)
        /// </para>
        /// </summary>
        public EggPipe() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Feature*)
        /// </para>
        /// </summary>
        public virtual IList<Feature> Feature {
            get {
                if ((this.FeatureField == null)) {
                    this.FeatureField = new XTypedList<Feature>(this, LinqToXsdTypeManager.Instance, FeatureXName);
                }
                return this.FeatureField;
            }
            set {
                if ((value == null)) {
                    this.FeatureField = null;
                }
                else {
                    if ((this.FeatureField == null)) {
                        this.FeatureField = XTypedList<Feature>.Initialize(this, LinqToXsdTypeManager.Instance, value, FeatureXName);
                    }
                    else {
                        XTypedServices.SetList<Feature>(this.FeatureField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual double height {
            get {
                XAttribute x = this.Attribute(heightXName);
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetAttribute(heightXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual double span {
            get {
                XAttribute x = this.Attribute(spanXName);
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetAttribute(spanXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string desc {
            get {
                XAttribute x = this.Attribute(descXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(descXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Double? hazenWilliams {
            get {
                XAttribute x = this.Attribute(hazenWilliamsXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetAttribute(hazenWilliamsXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Double? mannings {
            get {
                XAttribute x = this.Attribute(manningsXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetAttribute(manningsXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string material {
            get {
                XAttribute x = this.Attribute(materialXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(materialXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Double? thickness {
            get {
                XAttribute x = this.Attribute(thicknessXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetAttribute(thicknessXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static EggPipe Load(string xmlFile) {
            return XTypedServices.Load<EggPipe>(xmlFile);
        }
        
        public static EggPipe Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<EggPipe>(xmlFile);
        }
        
        public static EggPipe Parse(string xml) {
            return XTypedServices.Parse<EggPipe>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<EggPipe>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(FeatureXName, typeof(Feature));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Feature*)
    /// </para>
    /// </summary>
    public partial class RectPipe : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName FeatureXName = System.Xml.Linq.XName.Get("Feature", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<Feature> FeatureField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName heightXName = System.Xml.Linq.XName.Get("height", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName widthXName = System.Xml.Linq.XName.Get("width", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName descXName = System.Xml.Linq.XName.Get("desc", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName hazenWilliamsXName = System.Xml.Linq.XName.Get("hazenWilliams", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName manningsXName = System.Xml.Linq.XName.Get("mannings", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName materialXName = System.Xml.Linq.XName.Get("material", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName thicknessXName = System.Xml.Linq.XName.Get("thickness", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("RectPipe", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator RectPipe(XElement xe) { return XTypedServices.ToXTypedElement<RectPipe>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static RectPipe() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(FeatureXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Feature*)
        /// </para>
        /// </summary>
        public RectPipe() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Feature*)
        /// </para>
        /// </summary>
        public virtual IList<Feature> Feature {
            get {
                if ((this.FeatureField == null)) {
                    this.FeatureField = new XTypedList<Feature>(this, LinqToXsdTypeManager.Instance, FeatureXName);
                }
                return this.FeatureField;
            }
            set {
                if ((value == null)) {
                    this.FeatureField = null;
                }
                else {
                    if ((this.FeatureField == null)) {
                        this.FeatureField = XTypedList<Feature>.Initialize(this, LinqToXsdTypeManager.Instance, value, FeatureXName);
                    }
                    else {
                        XTypedServices.SetList<Feature>(this.FeatureField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual double height {
            get {
                XAttribute x = this.Attribute(heightXName);
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetAttribute(heightXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual double width {
            get {
                XAttribute x = this.Attribute(widthXName);
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetAttribute(widthXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string desc {
            get {
                XAttribute x = this.Attribute(descXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(descXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Double? hazenWilliams {
            get {
                XAttribute x = this.Attribute(hazenWilliamsXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetAttribute(hazenWilliamsXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Double? mannings {
            get {
                XAttribute x = this.Attribute(manningsXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetAttribute(manningsXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string material {
            get {
                XAttribute x = this.Attribute(materialXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(materialXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Double? thickness {
            get {
                XAttribute x = this.Attribute(thicknessXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetAttribute(thicknessXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static RectPipe Load(string xmlFile) {
            return XTypedServices.Load<RectPipe>(xmlFile);
        }
        
        public static RectPipe Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<RectPipe>(xmlFile);
        }
        
        public static RectPipe Parse(string xml) {
            return XTypedServices.Parse<RectPipe>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<RectPipe>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(FeatureXName, typeof(Feature));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Feature*)
    /// </para>
    /// </summary>
    public partial class Channel : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName FeatureXName = System.Xml.Linq.XName.Get("Feature", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<Feature> FeatureField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName heightXName = System.Xml.Linq.XName.Get("height", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName widthTopXName = System.Xml.Linq.XName.Get("widthTop", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName widthBottomXName = System.Xml.Linq.XName.Get("widthBottom", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName descXName = System.Xml.Linq.XName.Get("desc", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName hazenWilliamsXName = System.Xml.Linq.XName.Get("hazenWilliams", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName manningsXName = System.Xml.Linq.XName.Get("mannings", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName materialXName = System.Xml.Linq.XName.Get("material", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName thicknessXName = System.Xml.Linq.XName.Get("thickness", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("Channel", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator Channel(XElement xe) { return XTypedServices.ToXTypedElement<Channel>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static Channel() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(FeatureXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Feature*)
        /// </para>
        /// </summary>
        public Channel() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Feature*)
        /// </para>
        /// </summary>
        public virtual IList<Feature> Feature {
            get {
                if ((this.FeatureField == null)) {
                    this.FeatureField = new XTypedList<Feature>(this, LinqToXsdTypeManager.Instance, FeatureXName);
                }
                return this.FeatureField;
            }
            set {
                if ((value == null)) {
                    this.FeatureField = null;
                }
                else {
                    if ((this.FeatureField == null)) {
                        this.FeatureField = XTypedList<Feature>.Initialize(this, LinqToXsdTypeManager.Instance, value, FeatureXName);
                    }
                    else {
                        XTypedServices.SetList<Feature>(this.FeatureField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual double height {
            get {
                XAttribute x = this.Attribute(heightXName);
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetAttribute(heightXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual double widthTop {
            get {
                XAttribute x = this.Attribute(widthTopXName);
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetAttribute(widthTopXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual double widthBottom {
            get {
                XAttribute x = this.Attribute(widthBottomXName);
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetAttribute(widthBottomXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string desc {
            get {
                XAttribute x = this.Attribute(descXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(descXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Double? hazenWilliams {
            get {
                XAttribute x = this.Attribute(hazenWilliamsXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetAttribute(hazenWilliamsXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Double? mannings {
            get {
                XAttribute x = this.Attribute(manningsXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetAttribute(manningsXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string material {
            get {
                XAttribute x = this.Attribute(materialXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(materialXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Double? thickness {
            get {
                XAttribute x = this.Attribute(thicknessXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetAttribute(thicknessXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static Channel Load(string xmlFile) {
            return XTypedServices.Load<Channel>(xmlFile);
        }
        
        public static Channel Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<Channel>(xmlFile);
        }
        
        public static Channel Parse(string xml) {
            return XTypedServices.Parse<Channel>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<Channel>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(FeatureXName, typeof(Feature));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Feature*)
    /// </para>
    /// </summary>
    public partial class PipeFlow : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName FeatureXName = System.Xml.Linq.XName.Get("Feature", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<Feature> FeatureField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName flowInXName = System.Xml.Linq.XName.Get("flowIn", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName areaCatchmentXName = System.Xml.Linq.XName.Get("areaCatchment", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName descXName = System.Xml.Linq.XName.Get("desc", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName depthCriticalXName = System.Xml.Linq.XName.Get("depthCritical", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName hglDownXName = System.Xml.Linq.XName.Get("hglDown", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName hglUpXName = System.Xml.Linq.XName.Get("hglUp", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName intensityXName = System.Xml.Linq.XName.Get("intensity", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName runoffCoeffXName = System.Xml.Linq.XName.Get("runoffCoeff", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName slopeCriticalXName = System.Xml.Linq.XName.Get("slopeCritical", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName timeInletXName = System.Xml.Linq.XName.Get("timeInlet", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName velocityCriticalXName = System.Xml.Linq.XName.Get("velocityCritical", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("PipeFlow", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator PipeFlow(XElement xe) { return XTypedServices.ToXTypedElement<PipeFlow>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static PipeFlow() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(FeatureXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Feature*)
        /// </para>
        /// </summary>
        public PipeFlow() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Feature*)
        /// </para>
        /// </summary>
        public virtual IList<Feature> Feature {
            get {
                if ((this.FeatureField == null)) {
                    this.FeatureField = new XTypedList<Feature>(this, LinqToXsdTypeManager.Instance, FeatureXName);
                }
                return this.FeatureField;
            }
            set {
                if ((value == null)) {
                    this.FeatureField = null;
                }
                else {
                    if ((this.FeatureField == null)) {
                        this.FeatureField = XTypedList<Feature>.Initialize(this, LinqToXsdTypeManager.Instance, value, FeatureXName);
                    }
                    else {
                        XTypedServices.SetList<Feature>(this.FeatureField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual double flowIn {
            get {
                XAttribute x = this.Attribute(flowInXName);
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetAttribute(flowInXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Double? areaCatchment {
            get {
                XAttribute x = this.Attribute(areaCatchmentXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetAttribute(areaCatchmentXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string desc {
            get {
                XAttribute x = this.Attribute(descXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(descXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Double? depthCritical {
            get {
                XAttribute x = this.Attribute(depthCriticalXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetAttribute(depthCriticalXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Double? hglDown {
            get {
                XAttribute x = this.Attribute(hglDownXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetAttribute(hglDownXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Double? hglUp {
            get {
                XAttribute x = this.Attribute(hglUpXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetAttribute(hglUpXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Double? intensity {
            get {
                XAttribute x = this.Attribute(intensityXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetAttribute(intensityXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Double? runoffCoeff {
            get {
                XAttribute x = this.Attribute(runoffCoeffXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetAttribute(runoffCoeffXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Double? slopeCritical {
            get {
                XAttribute x = this.Attribute(slopeCriticalXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetAttribute(slopeCriticalXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Double? timeInlet {
            get {
                XAttribute x = this.Attribute(timeInletXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetAttribute(timeInletXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Double? velocityCritical {
            get {
                XAttribute x = this.Attribute(velocityCriticalXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetAttribute(velocityCriticalXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static PipeFlow Load(string xmlFile) {
            return XTypedServices.Load<PipeFlow>(xmlFile);
        }
        
        public static PipeFlow Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<PipeFlow>(xmlFile);
        }
        
        public static PipeFlow Parse(string xml) {
            return XTypedServices.Parse<PipeFlow>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<PipeFlow>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(FeatureXName, typeof(Feature));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Units?, Struct+, Feature*)
    /// </para>
    /// </summary>
    public partial class Structs : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName UnitsXName = System.Xml.Linq.XName.Get("Units", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName StructXName = System.Xml.Linq.XName.Get("Struct", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<Struct> StructField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName FeatureXName = System.Xml.Linq.XName.Get("Feature", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<Feature> FeatureField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("Structs", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator Structs(XElement xe) { return XTypedServices.ToXTypedElement<Structs>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static Structs() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(UnitsXName), new NamedContentModelEntity(StructXName), new NamedContentModelEntity(FeatureXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Units?, Struct+, Feature*)
        /// </para>
        /// </summary>
        public Structs() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Units?, Struct+, Feature*)
        /// </para>
        /// </summary>
        public virtual Units Units {
            get {
                XElement x = this.GetElement(UnitsXName);
                return ((Units)(x));
            }
            set {
                this.SetElement(UnitsXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Units?, Struct+, Feature*)
        /// </para>
        /// </summary>
        public virtual IList<Struct> Struct {
            get {
                if ((this.StructField == null)) {
                    this.StructField = new XTypedList<Struct>(this, LinqToXsdTypeManager.Instance, StructXName);
                }
                return this.StructField;
            }
            set {
                if ((value == null)) {
                    this.StructField = null;
                }
                else {
                    if ((this.StructField == null)) {
                        this.StructField = XTypedList<Struct>.Initialize(this, LinqToXsdTypeManager.Instance, value, StructXName);
                    }
                    else {
                        XTypedServices.SetList<Struct>(this.StructField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Units?, Struct+, Feature*)
        /// </para>
        /// </summary>
        public virtual IList<Feature> Feature {
            get {
                if ((this.FeatureField == null)) {
                    this.FeatureField = new XTypedList<Feature>(this, LinqToXsdTypeManager.Instance, FeatureXName);
                }
                return this.FeatureField;
            }
            set {
                if ((value == null)) {
                    this.FeatureField = null;
                }
                else {
                    if ((this.FeatureField == null)) {
                        this.FeatureField = XTypedList<Feature>.Initialize(this, LinqToXsdTypeManager.Instance, value, FeatureXName);
                    }
                    else {
                        XTypedServices.SetList<Feature>(this.FeatureField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static Structs Load(string xmlFile) {
            return XTypedServices.Load<Structs>(xmlFile);
        }
        
        public static Structs Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<Structs>(xmlFile);
        }
        
        public static Structs Parse(string xml) {
            return XTypedServices.Parse<Structs>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<Structs>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(UnitsXName, typeof(Units));
            localElementDictionary.Add(StructXName, typeof(Struct));
            localElementDictionary.Add(FeatureXName, typeof(Feature));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Center, (CircStruct | RectStruct | InletStruct | OutletStruct | Connection), Invert+, StructFlow?, Feature*)
    /// </para>
    /// </summary>
    public partial class Struct : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName CenterXName = System.Xml.Linq.XName.Get("Center", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName CircStructXName = System.Xml.Linq.XName.Get("CircStruct", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName RectStructXName = System.Xml.Linq.XName.Get("RectStruct", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName InletStructXName = System.Xml.Linq.XName.Get("InletStruct", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName OutletStructXName = System.Xml.Linq.XName.Get("OutletStruct", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ConnectionXName = System.Xml.Linq.XName.Get("Connection", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName InvertXName = System.Xml.Linq.XName.Get("Invert", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<Invert> InvertField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName StructFlowXName = System.Xml.Linq.XName.Get("StructFlow", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName FeatureXName = System.Xml.Linq.XName.Get("Feature", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<Feature> FeatureField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName nameXName = System.Xml.Linq.XName.Get("name", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName descXName = System.Xml.Linq.XName.Get("desc", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName elevRimXName = System.Xml.Linq.XName.Get("elevRim", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName elevSumpXName = System.Xml.Linq.XName.Get("elevSump", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName oIDXName = System.Xml.Linq.XName.Get("oID", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName stateXName = System.Xml.Linq.XName.Get("state", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("Struct", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator Struct(XElement xe) { return XTypedServices.ToXTypedElement<Struct>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static Struct() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(CenterXName), new ChoiceContentModelEntity(new NamedContentModelEntity(CircStructXName), new NamedContentModelEntity(RectStructXName), new NamedContentModelEntity(InletStructXName), new NamedContentModelEntity(OutletStructXName), new NamedContentModelEntity(ConnectionXName)), new NamedContentModelEntity(InvertXName), new NamedContentModelEntity(StructFlowXName), new NamedContentModelEntity(FeatureXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Center, (CircStruct | RectStruct | InletStruct | OutletStruct | Connection), Invert+, StructFlow?, Feature*)
        /// </para>
        /// </summary>
        public Struct() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (Center, (CircStruct | RectStruct | InletStruct | OutletStruct | Connection), Invert+, StructFlow?, Feature*)
        /// </para>
        /// </summary>
        public virtual Center Center {
            get {
                XElement x = this.GetElement(CenterXName);
                return ((Center)(x));
            }
            set {
                this.SetElement(CenterXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (Center, (CircStruct | RectStruct | InletStruct | OutletStruct | Connection), Invert+, StructFlow?, Feature*)
        /// </para>
        /// </summary>
        public virtual CircStruct CircStruct {
            get {
                XElement x = this.GetElement(CircStructXName);
                return ((CircStruct)(x));
            }
            set {
                this.SetElement(CircStructXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (Center, (CircStruct | RectStruct | InletStruct | OutletStruct | Connection), Invert+, StructFlow?, Feature*)
        /// </para>
        /// </summary>
        public virtual RectStruct RectStruct {
            get {
                XElement x = this.GetElement(RectStructXName);
                return ((RectStruct)(x));
            }
            set {
                this.SetElement(RectStructXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (Center, (CircStruct | RectStruct | InletStruct | OutletStruct | Connection), Invert+, StructFlow?, Feature*)
        /// </para>
        /// </summary>
        public virtual InletStruct InletStruct {
            get {
                XElement x = this.GetElement(InletStructXName);
                return ((InletStruct)(x));
            }
            set {
                this.SetElement(InletStructXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (Center, (CircStruct | RectStruct | InletStruct | OutletStruct | Connection), Invert+, StructFlow?, Feature*)
        /// </para>
        /// </summary>
        public virtual OutletStruct OutletStruct {
            get {
                XElement x = this.GetElement(OutletStructXName);
                return ((OutletStruct)(x));
            }
            set {
                this.SetElement(OutletStructXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (Center, (CircStruct | RectStruct | InletStruct | OutletStruct | Connection), Invert+, StructFlow?, Feature*)
        /// </para>
        /// </summary>
        public virtual Connection Connection {
            get {
                XElement x = this.GetElement(ConnectionXName);
                return ((Connection)(x));
            }
            set {
                this.SetElement(ConnectionXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Center, (CircStruct | RectStruct | InletStruct | OutletStruct | Connection), Invert+, StructFlow?, Feature*)
        /// </para>
        /// </summary>
        public virtual IList<Invert> Invert {
            get {
                if ((this.InvertField == null)) {
                    this.InvertField = new XTypedList<Invert>(this, LinqToXsdTypeManager.Instance, InvertXName);
                }
                return this.InvertField;
            }
            set {
                if ((value == null)) {
                    this.InvertField = null;
                }
                else {
                    if ((this.InvertField == null)) {
                        this.InvertField = XTypedList<Invert>.Initialize(this, LinqToXsdTypeManager.Instance, value, InvertXName);
                    }
                    else {
                        XTypedServices.SetList<Invert>(this.InvertField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (Center, (CircStruct | RectStruct | InletStruct | OutletStruct | Connection), Invert+, StructFlow?, Feature*)
        /// </para>
        /// </summary>
        public virtual StructFlow StructFlow {
            get {
                XElement x = this.GetElement(StructFlowXName);
                return ((StructFlow)(x));
            }
            set {
                this.SetElement(StructFlowXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Center, (CircStruct | RectStruct | InletStruct | OutletStruct | Connection), Invert+, StructFlow?, Feature*)
        /// </para>
        /// </summary>
        public virtual IList<Feature> Feature {
            get {
                if ((this.FeatureField == null)) {
                    this.FeatureField = new XTypedList<Feature>(this, LinqToXsdTypeManager.Instance, FeatureXName);
                }
                return this.FeatureField;
            }
            set {
                if ((value == null)) {
                    this.FeatureField = null;
                }
                else {
                    if ((this.FeatureField == null)) {
                        this.FeatureField = XTypedList<Feature>.Initialize(this, LinqToXsdTypeManager.Instance, value, FeatureXName);
                    }
                    else {
                        XTypedServices.SetList<Feature>(this.FeatureField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual string name {
            get {
                XAttribute x = this.Attribute(nameXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(nameXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string desc {
            get {
                XAttribute x = this.Attribute(descXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(descXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Double? elevRim {
            get {
                XAttribute x = this.Attribute(elevRimXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetAttribute(elevRimXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Double? elevSump {
            get {
                XAttribute x = this.Attribute(elevSumpXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetAttribute(elevSumpXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string oID {
            get {
                XAttribute x = this.Attribute(oIDXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(oIDXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual LandXml.v1_2.stateType? state {
            get {
                XAttribute x = this.Attribute(stateXName);
                if ((x == null)) {
                    return null;
                }
                return ((LandXml.v1_2.stateType)(Enum.Parse(typeof(LandXml.v1_2.stateType), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetAttribute(stateXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static Struct Load(string xmlFile) {
            return XTypedServices.Load<Struct>(xmlFile);
        }
        
        public static Struct Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<Struct>(xmlFile);
        }
        
        public static Struct Parse(string xml) {
            return XTypedServices.Parse<Struct>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<Struct>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(CenterXName, typeof(Center));
            localElementDictionary.Add(CircStructXName, typeof(CircStruct));
            localElementDictionary.Add(RectStructXName, typeof(RectStruct));
            localElementDictionary.Add(InletStructXName, typeof(InletStruct));
            localElementDictionary.Add(OutletStructXName, typeof(OutletStruct));
            localElementDictionary.Add(ConnectionXName, typeof(Connection));
            localElementDictionary.Add(InvertXName, typeof(Invert));
            localElementDictionary.Add(StructFlowXName, typeof(StructFlow));
            localElementDictionary.Add(FeatureXName, typeof(Feature));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Feature*)
    /// </para>
    /// </summary>
    public partial class CircStruct : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName FeatureXName = System.Xml.Linq.XName.Get("Feature", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<Feature> FeatureField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName diameterXName = System.Xml.Linq.XName.Get("diameter", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName descXName = System.Xml.Linq.XName.Get("desc", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName inletCaseXName = System.Xml.Linq.XName.Get("inletCase", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName lossCoeffXName = System.Xml.Linq.XName.Get("lossCoeff", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName materialXName = System.Xml.Linq.XName.Get("material", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName thicknessXName = System.Xml.Linq.XName.Get("thickness", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("CircStruct", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator CircStruct(XElement xe) { return XTypedServices.ToXTypedElement<CircStruct>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static CircStruct() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(FeatureXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Feature*)
        /// </para>
        /// </summary>
        public CircStruct() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Feature*)
        /// </para>
        /// </summary>
        public virtual IList<Feature> Feature {
            get {
                if ((this.FeatureField == null)) {
                    this.FeatureField = new XTypedList<Feature>(this, LinqToXsdTypeManager.Instance, FeatureXName);
                }
                return this.FeatureField;
            }
            set {
                if ((value == null)) {
                    this.FeatureField = null;
                }
                else {
                    if ((this.FeatureField == null)) {
                        this.FeatureField = XTypedList<Feature>.Initialize(this, LinqToXsdTypeManager.Instance, value, FeatureXName);
                    }
                    else {
                        XTypedServices.SetList<Feature>(this.FeatureField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual double diameter {
            get {
                XAttribute x = this.Attribute(diameterXName);
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetAttribute(diameterXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string desc {
            get {
                XAttribute x = this.Attribute(descXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(descXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string inletCase {
            get {
                XAttribute x = this.Attribute(inletCaseXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(inletCaseXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Double? lossCoeff {
            get {
                XAttribute x = this.Attribute(lossCoeffXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetAttribute(lossCoeffXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string material {
            get {
                XAttribute x = this.Attribute(materialXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(materialXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Double? thickness {
            get {
                XAttribute x = this.Attribute(thicknessXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetAttribute(thicknessXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static CircStruct Load(string xmlFile) {
            return XTypedServices.Load<CircStruct>(xmlFile);
        }
        
        public static CircStruct Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<CircStruct>(xmlFile);
        }
        
        public static CircStruct Parse(string xml) {
            return XTypedServices.Parse<CircStruct>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<CircStruct>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(FeatureXName, typeof(Feature));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Feature*)
    /// </para>
    /// </summary>
    public partial class RectStruct : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName FeatureXName = System.Xml.Linq.XName.Get("Feature", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<Feature> FeatureField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName lengthXName = System.Xml.Linq.XName.Get("length", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName lengthDirXName = System.Xml.Linq.XName.Get("lengthDir", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName widthXName = System.Xml.Linq.XName.Get("width", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName descXName = System.Xml.Linq.XName.Get("desc", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName inletCaseXName = System.Xml.Linq.XName.Get("inletCase", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName lossCoeffXName = System.Xml.Linq.XName.Get("lossCoeff", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName materialXName = System.Xml.Linq.XName.Get("material", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName thicknessXName = System.Xml.Linq.XName.Get("thickness", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("RectStruct", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator RectStruct(XElement xe) { return XTypedServices.ToXTypedElement<RectStruct>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static RectStruct() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(FeatureXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Feature*)
        /// </para>
        /// </summary>
        public RectStruct() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Feature*)
        /// </para>
        /// </summary>
        public virtual IList<Feature> Feature {
            get {
                if ((this.FeatureField == null)) {
                    this.FeatureField = new XTypedList<Feature>(this, LinqToXsdTypeManager.Instance, FeatureXName);
                }
                return this.FeatureField;
            }
            set {
                if ((value == null)) {
                    this.FeatureField = null;
                }
                else {
                    if ((this.FeatureField == null)) {
                        this.FeatureField = XTypedList<Feature>.Initialize(this, LinqToXsdTypeManager.Instance, value, FeatureXName);
                    }
                    else {
                        XTypedServices.SetList<Feature>(this.FeatureField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual double length {
            get {
                XAttribute x = this.Attribute(lengthXName);
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetAttribute(lengthXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Double? lengthDir {
            get {
                XAttribute x = this.Attribute(lengthDirXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetAttribute(lengthDirXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual double width {
            get {
                XAttribute x = this.Attribute(widthXName);
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetAttribute(widthXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string desc {
            get {
                XAttribute x = this.Attribute(descXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(descXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string inletCase {
            get {
                XAttribute x = this.Attribute(inletCaseXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(inletCaseXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Double? lossCoeff {
            get {
                XAttribute x = this.Attribute(lossCoeffXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetAttribute(lossCoeffXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string material {
            get {
                XAttribute x = this.Attribute(materialXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(materialXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Double? thickness {
            get {
                XAttribute x = this.Attribute(thicknessXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetAttribute(thicknessXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static RectStruct Load(string xmlFile) {
            return XTypedServices.Load<RectStruct>(xmlFile);
        }
        
        public static RectStruct Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<RectStruct>(xmlFile);
        }
        
        public static RectStruct Parse(string xml) {
            return XTypedServices.Parse<RectStruct>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<RectStruct>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(FeatureXName, typeof(Feature));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Feature*)
    /// </para>
    /// </summary>
    public partial class InletStruct : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName FeatureXName = System.Xml.Linq.XName.Get("Feature", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<Feature> FeatureField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("InletStruct", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator InletStruct(XElement xe) { return XTypedServices.ToXTypedElement<InletStruct>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static InletStruct() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(FeatureXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Feature*)
        /// </para>
        /// </summary>
        public InletStruct() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Feature*)
        /// </para>
        /// </summary>
        public virtual IList<Feature> Feature {
            get {
                if ((this.FeatureField == null)) {
                    this.FeatureField = new XTypedList<Feature>(this, LinqToXsdTypeManager.Instance, FeatureXName);
                }
                return this.FeatureField;
            }
            set {
                if ((value == null)) {
                    this.FeatureField = null;
                }
                else {
                    if ((this.FeatureField == null)) {
                        this.FeatureField = XTypedList<Feature>.Initialize(this, LinqToXsdTypeManager.Instance, value, FeatureXName);
                    }
                    else {
                        XTypedServices.SetList<Feature>(this.FeatureField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static InletStruct Load(string xmlFile) {
            return XTypedServices.Load<InletStruct>(xmlFile);
        }
        
        public static InletStruct Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<InletStruct>(xmlFile);
        }
        
        public static InletStruct Parse(string xml) {
            return XTypedServices.Parse<InletStruct>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<InletStruct>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(FeatureXName, typeof(Feature));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Feature*)
    /// </para>
    /// </summary>
    public partial class OutletStruct : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName FeatureXName = System.Xml.Linq.XName.Get("Feature", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<Feature> FeatureField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("OutletStruct", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator OutletStruct(XElement xe) { return XTypedServices.ToXTypedElement<OutletStruct>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static OutletStruct() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(FeatureXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Feature*)
        /// </para>
        /// </summary>
        public OutletStruct() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Feature*)
        /// </para>
        /// </summary>
        public virtual IList<Feature> Feature {
            get {
                if ((this.FeatureField == null)) {
                    this.FeatureField = new XTypedList<Feature>(this, LinqToXsdTypeManager.Instance, FeatureXName);
                }
                return this.FeatureField;
            }
            set {
                if ((value == null)) {
                    this.FeatureField = null;
                }
                else {
                    if ((this.FeatureField == null)) {
                        this.FeatureField = XTypedList<Feature>.Initialize(this, LinqToXsdTypeManager.Instance, value, FeatureXName);
                    }
                    else {
                        XTypedServices.SetList<Feature>(this.FeatureField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static OutletStruct Load(string xmlFile) {
            return XTypedServices.Load<OutletStruct>(xmlFile);
        }
        
        public static OutletStruct Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<OutletStruct>(xmlFile);
        }
        
        public static OutletStruct Parse(string xml) {
            return XTypedServices.Parse<OutletStruct>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<OutletStruct>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(FeatureXName, typeof(Feature));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Feature*)
    /// </para>
    /// </summary>
    public partial class Connection : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName FeatureXName = System.Xml.Linq.XName.Get("Feature", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<Feature> FeatureField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("Connection", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator Connection(XElement xe) { return XTypedServices.ToXTypedElement<Connection>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static Connection() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(FeatureXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Feature*)
        /// </para>
        /// </summary>
        public Connection() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Feature*)
        /// </para>
        /// </summary>
        public virtual IList<Feature> Feature {
            get {
                if ((this.FeatureField == null)) {
                    this.FeatureField = new XTypedList<Feature>(this, LinqToXsdTypeManager.Instance, FeatureXName);
                }
                return this.FeatureField;
            }
            set {
                if ((value == null)) {
                    this.FeatureField = null;
                }
                else {
                    if ((this.FeatureField == null)) {
                        this.FeatureField = XTypedList<Feature>.Initialize(this, LinqToXsdTypeManager.Instance, value, FeatureXName);
                    }
                    else {
                        XTypedServices.SetList<Feature>(this.FeatureField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static Connection Load(string xmlFile) {
            return XTypedServices.Load<Connection>(xmlFile);
        }
        
        public static Connection Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<Connection>(xmlFile);
        }
        
        public static Connection Parse(string xml) {
            return XTypedServices.Parse<Connection>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<Connection>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(FeatureXName, typeof(Feature));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    public partial class Invert : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName descXName = System.Xml.Linq.XName.Get("desc", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName elevXName = System.Xml.Linq.XName.Get("elev", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName flowDirXName = System.Xml.Linq.XName.Get("flowDir", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName refPipeXName = System.Xml.Linq.XName.Get("refPipe", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("Invert", "http://www.landxml.org/schema/LandXML-1.2");
        
		public static explicit operator Invert(XElement xe) { return XTypedServices.ToXTypedElement<Invert>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public Invert() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string desc {
            get {
                XAttribute x = this.Attribute(descXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(descXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual double elev {
            get {
                XAttribute x = this.Attribute(elevXName);
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetAttribute(elevXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual string flowDir {
            get {
                XAttribute x = this.Attribute(flowDirXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(flowDirXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual string refPipe {
            get {
                XAttribute x = this.Attribute(refPipeXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(refPipeXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static Invert Load(string xmlFile) {
            return XTypedServices.Load<Invert>(xmlFile);
        }
        
        public static Invert Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<Invert>(xmlFile);
        }
        
        public static Invert Parse(string xml) {
            return XTypedServices.Parse<Invert>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<Invert>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Feature*)
    /// </para>
    /// </summary>
    public partial class StructFlow : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName FeatureXName = System.Xml.Linq.XName.Get("Feature", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<Feature> FeatureField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName lossInXName = System.Xml.Linq.XName.Get("lossIn", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName lossOutXName = System.Xml.Linq.XName.Get("lossOut", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName descXName = System.Xml.Linq.XName.Get("desc", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName hglInXName = System.Xml.Linq.XName.Get("hglIn", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName hglOutXName = System.Xml.Linq.XName.Get("hglOut", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName localDepressionXName = System.Xml.Linq.XName.Get("localDepression", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName slopeSurfXName = System.Xml.Linq.XName.Get("slopeSurf", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName slopeGutterXName = System.Xml.Linq.XName.Get("slopeGutter", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName widthGutterXName = System.Xml.Linq.XName.Get("widthGutter", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("StructFlow", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator StructFlow(XElement xe) { return XTypedServices.ToXTypedElement<StructFlow>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static StructFlow() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(FeatureXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Feature*)
        /// </para>
        /// </summary>
        public StructFlow() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (Feature*)
        /// </para>
        /// </summary>
        public virtual IList<Feature> Feature {
            get {
                if ((this.FeatureField == null)) {
                    this.FeatureField = new XTypedList<Feature>(this, LinqToXsdTypeManager.Instance, FeatureXName);
                }
                return this.FeatureField;
            }
            set {
                if ((value == null)) {
                    this.FeatureField = null;
                }
                else {
                    if ((this.FeatureField == null)) {
                        this.FeatureField = XTypedList<Feature>.Initialize(this, LinqToXsdTypeManager.Instance, value, FeatureXName);
                    }
                    else {
                        XTypedServices.SetList<Feature>(this.FeatureField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual double lossIn {
            get {
                XAttribute x = this.Attribute(lossInXName);
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetAttribute(lossInXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual double lossOut {
            get {
                XAttribute x = this.Attribute(lossOutXName);
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetAttribute(lossOutXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string desc {
            get {
                XAttribute x = this.Attribute(descXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(descXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Double? hglIn {
            get {
                XAttribute x = this.Attribute(hglInXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetAttribute(hglInXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Double? hglOut {
            get {
                XAttribute x = this.Attribute(hglOutXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetAttribute(hglOutXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Double? localDepression {
            get {
                XAttribute x = this.Attribute(localDepressionXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetAttribute(localDepressionXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Double? slopeSurf {
            get {
                XAttribute x = this.Attribute(slopeSurfXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetAttribute(slopeSurfXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Double? slopeGutter {
            get {
                XAttribute x = this.Attribute(slopeGutterXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetAttribute(slopeGutterXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Double? widthGutter {
            get {
                XAttribute x = this.Attribute(widthGutterXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetAttribute(widthGutterXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static StructFlow Load(string xmlFile) {
            return XTypedServices.Load<StructFlow>(xmlFile);
        }
        
        public static StructFlow Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<StructFlow>(xmlFile);
        }
        
        public static StructFlow Parse(string xml) {
            return XTypedServices.Parse<StructFlow>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<StructFlow>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(FeatureXName, typeof(Feature));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (PlanFeature+, Feature*)
    /// </para>
    /// </summary>
    public partial class PlanFeatures : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName PlanFeatureXName = System.Xml.Linq.XName.Get("PlanFeature", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<PlanFeature> PlanFeatureField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName FeatureXName = System.Xml.Linq.XName.Get("Feature", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<Feature> FeatureField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName descXName = System.Xml.Linq.XName.Get("desc", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName nameXName = System.Xml.Linq.XName.Get("name", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName stateXName = System.Xml.Linq.XName.Get("state", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("PlanFeatures", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator PlanFeatures(XElement xe) { return XTypedServices.ToXTypedElement<PlanFeatures>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static PlanFeatures() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(PlanFeatureXName), new NamedContentModelEntity(FeatureXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (PlanFeature+, Feature*)
        /// </para>
        /// </summary>
        public PlanFeatures() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, repeating
        /// </para>
        /// <para>
        /// Regular expression: (PlanFeature+, Feature*)
        /// </para>
        /// </summary>
        public virtual IList<PlanFeature> PlanFeature {
            get {
                if ((this.PlanFeatureField == null)) {
                    this.PlanFeatureField = new XTypedList<PlanFeature>(this, LinqToXsdTypeManager.Instance, PlanFeatureXName);
                }
                return this.PlanFeatureField;
            }
            set {
                if ((value == null)) {
                    this.PlanFeatureField = null;
                }
                else {
                    if ((this.PlanFeatureField == null)) {
                        this.PlanFeatureField = XTypedList<PlanFeature>.Initialize(this, LinqToXsdTypeManager.Instance, value, PlanFeatureXName);
                    }
                    else {
                        XTypedServices.SetList<PlanFeature>(this.PlanFeatureField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (PlanFeature+, Feature*)
        /// </para>
        /// </summary>
        public virtual IList<Feature> Feature {
            get {
                if ((this.FeatureField == null)) {
                    this.FeatureField = new XTypedList<Feature>(this, LinqToXsdTypeManager.Instance, FeatureXName);
                }
                return this.FeatureField;
            }
            set {
                if ((value == null)) {
                    this.FeatureField = null;
                }
                else {
                    if ((this.FeatureField == null)) {
                        this.FeatureField = XTypedList<Feature>.Initialize(this, LinqToXsdTypeManager.Instance, value, FeatureXName);
                    }
                    else {
                        XTypedServices.SetList<Feature>(this.FeatureField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string desc {
            get {
                XAttribute x = this.Attribute(descXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(descXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string name {
            get {
                XAttribute x = this.Attribute(nameXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(nameXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual LandXml.v1_2.stateType? state {
            get {
                XAttribute x = this.Attribute(stateXName);
                if ((x == null)) {
                    return null;
                }
                return ((LandXml.v1_2.stateType)(Enum.Parse(typeof(LandXml.v1_2.stateType), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetAttribute(stateXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static PlanFeatures Load(string xmlFile) {
            return XTypedServices.Load<PlanFeatures>(xmlFile);
        }
        
        public static PlanFeatures Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<PlanFeatures>(xmlFile);
        }
        
        public static PlanFeatures Parse(string xml) {
            return XTypedServices.Parse<PlanFeatures>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<PlanFeatures>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(PlanFeatureXName, typeof(PlanFeature));
            localElementDictionary.Add(FeatureXName, typeof(Feature));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (CoordGeom | Location* | FieldNote* | Feature*)*
    /// </para>
    /// </summary>
    public partial class PlanFeature : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName CoordGeomXName = System.Xml.Linq.XName.Get("CoordGeom", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<CoordGeom> CoordGeomField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName LocationXName = System.Xml.Linq.XName.Get("Location", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<Location> LocationField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName FieldNoteXName = System.Xml.Linq.XName.Get("FieldNote", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<FieldNote> FieldNoteField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName FeatureXName = System.Xml.Linq.XName.Get("Feature", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<Feature> FeatureField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName descXName = System.Xml.Linq.XName.Get("desc", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName nameXName = System.Xml.Linq.XName.Get("name", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName stateXName = System.Xml.Linq.XName.Get("state", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("PlanFeature", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator PlanFeature(XElement xe) { return XTypedServices.ToXTypedElement<PlanFeature>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static PlanFeature() {
            BuildElementDictionary();
            contentModel = new ChoiceContentModelEntity(new NamedContentModelEntity(CoordGeomXName), new NamedContentModelEntity(LocationXName), new NamedContentModelEntity(FieldNoteXName), new NamedContentModelEntity(FeatureXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (CoordGeom | Location* | FieldNote* | Feature*)*
        /// </para>
        /// </summary>
        public PlanFeature() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (CoordGeom | Location* | FieldNote* | Feature*)*
        /// </para>
        /// </summary>
        public virtual IList<CoordGeom> CoordGeom {
            get {
                if ((this.CoordGeomField == null)) {
                    this.CoordGeomField = new XTypedList<CoordGeom>(this, LinqToXsdTypeManager.Instance, CoordGeomXName);
                }
                return this.CoordGeomField;
            }
            set {
                if ((value == null)) {
                    this.CoordGeomField = null;
                }
                else {
                    if ((this.CoordGeomField == null)) {
                        this.CoordGeomField = XTypedList<CoordGeom>.Initialize(this, LinqToXsdTypeManager.Instance, value, CoordGeomXName);
                    }
                    else {
                        XTypedServices.SetList<CoordGeom>(this.CoordGeomField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating, choice
        /// </para>
        /// <para>
        /// Regular expression: (CoordGeom | Location* | FieldNote* | Feature*)*
        /// </para>
        /// </summary>
        public virtual IList<Location> Location {
            get {
                if ((this.LocationField == null)) {
                    this.LocationField = new XTypedList<Location>(this, LinqToXsdTypeManager.Instance, LocationXName);
                }
                return this.LocationField;
            }
            set {
                if ((value == null)) {
                    this.LocationField = null;
                }
                else {
                    if ((this.LocationField == null)) {
                        this.LocationField = XTypedList<Location>.Initialize(this, LinqToXsdTypeManager.Instance, value, LocationXName);
                    }
                    else {
                        XTypedServices.SetList<Location>(this.LocationField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating, choice
        /// </para>
        /// <para>
        /// Regular expression: (CoordGeom | Location* | FieldNote* | Feature*)*
        /// </para>
        /// </summary>
        public virtual IList<FieldNote> FieldNote {
            get {
                if ((this.FieldNoteField == null)) {
                    this.FieldNoteField = new XTypedList<FieldNote>(this, LinqToXsdTypeManager.Instance, FieldNoteXName);
                }
                return this.FieldNoteField;
            }
            set {
                if ((value == null)) {
                    this.FieldNoteField = null;
                }
                else {
                    if ((this.FieldNoteField == null)) {
                        this.FieldNoteField = XTypedList<FieldNote>.Initialize(this, LinqToXsdTypeManager.Instance, value, FieldNoteXName);
                    }
                    else {
                        XTypedServices.SetList<FieldNote>(this.FieldNoteField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating, choice
        /// </para>
        /// <para>
        /// Regular expression: (CoordGeom | Location* | FieldNote* | Feature*)*
        /// </para>
        /// </summary>
        public virtual IList<Feature> Feature {
            get {
                if ((this.FeatureField == null)) {
                    this.FeatureField = new XTypedList<Feature>(this, LinqToXsdTypeManager.Instance, FeatureXName);
                }
                return this.FeatureField;
            }
            set {
                if ((value == null)) {
                    this.FeatureField = null;
                }
                else {
                    if ((this.FeatureField == null)) {
                        this.FeatureField = XTypedList<Feature>.Initialize(this, LinqToXsdTypeManager.Instance, value, FeatureXName);
                    }
                    else {
                        XTypedServices.SetList<Feature>(this.FeatureField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string desc {
            get {
                XAttribute x = this.Attribute(descXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(descXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string name {
            get {
                XAttribute x = this.Attribute(nameXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(nameXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual LandXml.v1_2.stateType? state {
            get {
                XAttribute x = this.Attribute(stateXName);
                if ((x == null)) {
                    return null;
                }
                return ((LandXml.v1_2.stateType)(Enum.Parse(typeof(LandXml.v1_2.stateType), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetAttribute(stateXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static PlanFeature Load(string xmlFile) {
            return XTypedServices.Load<PlanFeature>(xmlFile);
        }
        
        public static PlanFeature Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<PlanFeature>(xmlFile);
        }
        
        public static PlanFeature Parse(string xml) {
            return XTypedServices.Parse<PlanFeature>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<PlanFeature>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(CoordGeomXName, typeof(CoordGeom));
            localElementDictionary.Add(LocationXName, typeof(Location));
            localElementDictionary.Add(FieldNoteXName, typeof(FieldNote));
            localElementDictionary.Add(FeatureXName, typeof(Feature));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (GradeSurface+ | Feature*)+
    /// </para>
    /// </summary>
    public partial class GradeModel : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName GradeSurfaceXName = System.Xml.Linq.XName.Get("GradeSurface", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<GradeSurface> GradeSurfaceField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName FeatureXName = System.Xml.Linq.XName.Get("Feature", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<Feature> FeatureField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName descXName = System.Xml.Linq.XName.Get("desc", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName nameXName = System.Xml.Linq.XName.Get("name", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName stateXName = System.Xml.Linq.XName.Get("state", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("GradeModel", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator GradeModel(XElement xe) { return XTypedServices.ToXTypedElement<GradeModel>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static GradeModel() {
            BuildElementDictionary();
            contentModel = new ChoiceContentModelEntity(new NamedContentModelEntity(GradeSurfaceXName), new NamedContentModelEntity(FeatureXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (GradeSurface+ | Feature*)+
        /// </para>
        /// </summary>
        public GradeModel() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, repeating, choice
        /// </para>
        /// <para>
        /// Regular expression: (GradeSurface+ | Feature*)+
        /// </para>
        /// </summary>
        public virtual IList<GradeSurface> GradeSurface {
            get {
                if ((this.GradeSurfaceField == null)) {
                    this.GradeSurfaceField = new XTypedList<GradeSurface>(this, LinqToXsdTypeManager.Instance, GradeSurfaceXName);
                }
                return this.GradeSurfaceField;
            }
            set {
                if ((value == null)) {
                    this.GradeSurfaceField = null;
                }
                else {
                    if ((this.GradeSurfaceField == null)) {
                        this.GradeSurfaceField = XTypedList<GradeSurface>.Initialize(this, LinqToXsdTypeManager.Instance, value, GradeSurfaceXName);
                    }
                    else {
                        XTypedServices.SetList<GradeSurface>(this.GradeSurfaceField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating, choice
        /// </para>
        /// <para>
        /// Regular expression: (GradeSurface+ | Feature*)+
        /// </para>
        /// </summary>
        public virtual IList<Feature> Feature {
            get {
                if ((this.FeatureField == null)) {
                    this.FeatureField = new XTypedList<Feature>(this, LinqToXsdTypeManager.Instance, FeatureXName);
                }
                return this.FeatureField;
            }
            set {
                if ((value == null)) {
                    this.FeatureField = null;
                }
                else {
                    if ((this.FeatureField == null)) {
                        this.FeatureField = XTypedList<Feature>.Initialize(this, LinqToXsdTypeManager.Instance, value, FeatureXName);
                    }
                    else {
                        XTypedServices.SetList<Feature>(this.FeatureField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string desc {
            get {
                XAttribute x = this.Attribute(descXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(descXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string name {
            get {
                XAttribute x = this.Attribute(nameXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(nameXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual LandXml.v1_2.stateType? state {
            get {
                XAttribute x = this.Attribute(stateXName);
                if ((x == null)) {
                    return null;
                }
                return ((LandXml.v1_2.stateType)(Enum.Parse(typeof(LandXml.v1_2.stateType), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetAttribute(stateXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static GradeModel Load(string xmlFile) {
            return XTypedServices.Load<GradeModel>(xmlFile);
        }
        
        public static GradeModel Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<GradeModel>(xmlFile);
        }
        
        public static GradeModel Parse(string xml) {
            return XTypedServices.Parse<GradeModel>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<GradeModel>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(GradeSurfaceXName, typeof(GradeSurface));
            localElementDictionary.Add(FeatureXName, typeof(Feature));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Start? | Zones+ | Feature*)+
    /// </para>
    /// </summary>
    public partial class GradeSurface : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName StartXName = System.Xml.Linq.XName.Get("Start", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<Start> StartField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ZonesXName = System.Xml.Linq.XName.Get("Zones", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<Zones> ZonesField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName FeatureXName = System.Xml.Linq.XName.Get("Feature", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<Feature> FeatureField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName alignmentRefXName = System.Xml.Linq.XName.Get("alignmentRef", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName stationAlignmentRefXName = System.Xml.Linq.XName.Get("stationAlignmentRef", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName surfaceTypeXName = System.Xml.Linq.XName.Get("surfaceType", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName surfaceRefXName = System.Xml.Linq.XName.Get("surfaceRef", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName surfaceRefsXName = System.Xml.Linq.XName.Get("surfaceRefs", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName cgPointRefsXName = System.Xml.Linq.XName.Get("cgPointRefs", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName nameXName = System.Xml.Linq.XName.Get("name", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName descXName = System.Xml.Linq.XName.Get("desc", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName stateXName = System.Xml.Linq.XName.Get("state", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("GradeSurface", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator GradeSurface(XElement xe) { return XTypedServices.ToXTypedElement<GradeSurface>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static GradeSurface() {
            BuildElementDictionary();
            contentModel = new ChoiceContentModelEntity(new NamedContentModelEntity(StartXName), new NamedContentModelEntity(ZonesXName), new NamedContentModelEntity(FeatureXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Start? | Zones+ | Feature*)+
        /// </para>
        /// </summary>
        public GradeSurface() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, choice
        /// </para>
        /// <para>
        /// Regular expression: (Start? | Zones+ | Feature*)+
        /// </para>
        /// </summary>
        public virtual IList<Start> Start {
            get {
                if ((this.StartField == null)) {
                    this.StartField = new XTypedList<Start>(this, LinqToXsdTypeManager.Instance, StartXName);
                }
                return this.StartField;
            }
            set {
                if ((value == null)) {
                    this.StartField = null;
                }
                else {
                    if ((this.StartField == null)) {
                        this.StartField = XTypedList<Start>.Initialize(this, LinqToXsdTypeManager.Instance, value, StartXName);
                    }
                    else {
                        XTypedServices.SetList<Start>(this.StartField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, repeating, choice
        /// </para>
        /// <para>
        /// Regular expression: (Start? | Zones+ | Feature*)+
        /// </para>
        /// </summary>
        public virtual IList<Zones> Zones {
            get {
                if ((this.ZonesField == null)) {
                    this.ZonesField = new XTypedList<Zones>(this, LinqToXsdTypeManager.Instance, ZonesXName);
                }
                return this.ZonesField;
            }
            set {
                if ((value == null)) {
                    this.ZonesField = null;
                }
                else {
                    if ((this.ZonesField == null)) {
                        this.ZonesField = XTypedList<Zones>.Initialize(this, LinqToXsdTypeManager.Instance, value, ZonesXName);
                    }
                    else {
                        XTypedServices.SetList<Zones>(this.ZonesField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating, choice
        /// </para>
        /// <para>
        /// Regular expression: (Start? | Zones+ | Feature*)+
        /// </para>
        /// </summary>
        public virtual IList<Feature> Feature {
            get {
                if ((this.FeatureField == null)) {
                    this.FeatureField = new XTypedList<Feature>(this, LinqToXsdTypeManager.Instance, FeatureXName);
                }
                return this.FeatureField;
            }
            set {
                if ((value == null)) {
                    this.FeatureField = null;
                }
                else {
                    if ((this.FeatureField == null)) {
                        this.FeatureField = XTypedList<Feature>.Initialize(this, LinqToXsdTypeManager.Instance, value, FeatureXName);
                    }
                    else {
                        XTypedServices.SetList<Feature>(this.FeatureField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual string alignmentRef {
            get {
                XAttribute x = this.Attribute(alignmentRefXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(alignmentRefXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string stationAlignmentRef {
            get {
                XAttribute x = this.Attribute(stationAlignmentRefXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(stationAlignmentRefXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual LandXml.v1_2.zoneSurfaceType surfaceType {
            get {
                XAttribute x = this.Attribute(surfaceTypeXName);
                return ((LandXml.v1_2.zoneSurfaceType)(Enum.Parse(typeof(LandXml.v1_2.zoneSurfaceType), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetAttribute(surfaceTypeXName, value.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string surfaceRef {
            get {
                XAttribute x = this.Attribute(surfaceRefXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(surfaceRefXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual IList<string> surfaceRefs {
            get {
                XAttribute x = this.Attribute(surfaceRefsXName);
                return XTypedServices.ParseListValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetListAttribute(surfaceRefsXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual IList<string> cgPointRefs {
            get {
                XAttribute x = this.Attribute(cgPointRefsXName);
                return XTypedServices.ParseListValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetListAttribute(cgPointRefsXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string name {
            get {
                XAttribute x = this.Attribute(nameXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(nameXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string desc {
            get {
                XAttribute x = this.Attribute(descXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(descXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual LandXml.v1_2.stateType? state {
            get {
                XAttribute x = this.Attribute(stateXName);
                if ((x == null)) {
                    return null;
                }
                return ((LandXml.v1_2.stateType)(Enum.Parse(typeof(LandXml.v1_2.stateType), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetAttribute(stateXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static GradeSurface Load(string xmlFile) {
            return XTypedServices.Load<GradeSurface>(xmlFile);
        }
        
        public static GradeSurface Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<GradeSurface>(xmlFile);
        }
        
        public static GradeSurface Parse(string xml) {
            return XTypedServices.Parse<GradeSurface>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<GradeSurface>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(StartXName, typeof(Start));
            localElementDictionary.Add(ZonesXName, typeof(Zones));
            localElementDictionary.Add(FeatureXName, typeof(Feature));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Zone+ | ZoneHinge* | Feature*)+
    /// </para>
    /// </summary>
    public partial class Zones : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ZoneXName = System.Xml.Linq.XName.Get("Zone", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<Zone> ZoneField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ZoneHingeXName = System.Xml.Linq.XName.Get("ZoneHinge", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ZoneHinge> ZoneHingeField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName FeatureXName = System.Xml.Linq.XName.Get("Feature", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<Feature> FeatureField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName sideXName = System.Xml.Linq.XName.Get("side", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName descXName = System.Xml.Linq.XName.Get("desc", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName nameXName = System.Xml.Linq.XName.Get("name", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName stateXName = System.Xml.Linq.XName.Get("state", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("Zones", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator Zones(XElement xe) { return XTypedServices.ToXTypedElement<Zones>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static Zones() {
            BuildElementDictionary();
            contentModel = new ChoiceContentModelEntity(new NamedContentModelEntity(ZoneXName), new NamedContentModelEntity(ZoneHingeXName), new NamedContentModelEntity(FeatureXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Zone+ | ZoneHinge* | Feature*)+
        /// </para>
        /// </summary>
        public Zones() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, repeating, choice
        /// </para>
        /// <para>
        /// Regular expression: (Zone+ | ZoneHinge* | Feature*)+
        /// </para>
        /// </summary>
        public virtual IList<Zone> Zone {
            get {
                if ((this.ZoneField == null)) {
                    this.ZoneField = new XTypedList<Zone>(this, LinqToXsdTypeManager.Instance, ZoneXName);
                }
                return this.ZoneField;
            }
            set {
                if ((value == null)) {
                    this.ZoneField = null;
                }
                else {
                    if ((this.ZoneField == null)) {
                        this.ZoneField = XTypedList<Zone>.Initialize(this, LinqToXsdTypeManager.Instance, value, ZoneXName);
                    }
                    else {
                        XTypedServices.SetList<Zone>(this.ZoneField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating, choice
        /// </para>
        /// <para>
        /// Regular expression: (Zone+ | ZoneHinge* | Feature*)+
        /// </para>
        /// </summary>
        public virtual IList<ZoneHinge> ZoneHinge {
            get {
                if ((this.ZoneHingeField == null)) {
                    this.ZoneHingeField = new XTypedList<ZoneHinge>(this, LinqToXsdTypeManager.Instance, ZoneHingeXName);
                }
                return this.ZoneHingeField;
            }
            set {
                if ((value == null)) {
                    this.ZoneHingeField = null;
                }
                else {
                    if ((this.ZoneHingeField == null)) {
                        this.ZoneHingeField = XTypedList<ZoneHinge>.Initialize(this, LinqToXsdTypeManager.Instance, value, ZoneHingeXName);
                    }
                    else {
                        XTypedServices.SetList<ZoneHinge>(this.ZoneHingeField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating, choice
        /// </para>
        /// <para>
        /// Regular expression: (Zone+ | ZoneHinge* | Feature*)+
        /// </para>
        /// </summary>
        public virtual IList<Feature> Feature {
            get {
                if ((this.FeatureField == null)) {
                    this.FeatureField = new XTypedList<Feature>(this, LinqToXsdTypeManager.Instance, FeatureXName);
                }
                return this.FeatureField;
            }
            set {
                if ((value == null)) {
                    this.FeatureField = null;
                }
                else {
                    if ((this.FeatureField == null)) {
                        this.FeatureField = XTypedList<Feature>.Initialize(this, LinqToXsdTypeManager.Instance, value, FeatureXName);
                    }
                    else {
                        XTypedServices.SetList<Feature>(this.FeatureField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual LandXml.v1_2.sideofRoadType side {
            get {
                XAttribute x = this.Attribute(sideXName);
                return ((LandXml.v1_2.sideofRoadType)(Enum.Parse(typeof(LandXml.v1_2.sideofRoadType), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetAttribute(sideXName, value.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string desc {
            get {
                XAttribute x = this.Attribute(descXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(descXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string name {
            get {
                XAttribute x = this.Attribute(nameXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(nameXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual LandXml.v1_2.stateType? state {
            get {
                XAttribute x = this.Attribute(stateXName);
                if ((x == null)) {
                    return null;
                }
                return ((LandXml.v1_2.stateType)(Enum.Parse(typeof(LandXml.v1_2.stateType), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetAttribute(stateXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static Zones Load(string xmlFile) {
            return XTypedServices.Load<Zones>(xmlFile);
        }
        
        public static Zones Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<Zones>(xmlFile);
        }
        
        public static Zones Parse(string xml) {
            return XTypedServices.Parse<Zones>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<Zones>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(ZoneXName, typeof(Zone));
            localElementDictionary.Add(ZoneHingeXName, typeof(ZoneHinge));
            localElementDictionary.Add(FeatureXName, typeof(Feature));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (ZoneWidth* | ZoneSlope* | ZoneCutFill* | ZoneMaterial* | ZoneCrossSectStructure* | Feature*)*
    /// </para>
    /// </summary>
    public partial class Zone : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ZoneWidthXName = System.Xml.Linq.XName.Get("ZoneWidth", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ZoneWidth> ZoneWidthField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ZoneSlopeXName = System.Xml.Linq.XName.Get("ZoneSlope", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ZoneSlope> ZoneSlopeField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ZoneCutFillXName = System.Xml.Linq.XName.Get("ZoneCutFill", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ZoneCutFill> ZoneCutFillField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ZoneMaterialXName = System.Xml.Linq.XName.Get("ZoneMaterial", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ZoneMaterial> ZoneMaterialField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ZoneCrossSectStructureXName = System.Xml.Linq.XName.Get("ZoneCrossSectStructure", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ZoneCrossSectStructure> ZoneCrossSectStructureField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName FeatureXName = System.Xml.Linq.XName.Get("Feature", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<Feature> FeatureField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName descXName = System.Xml.Linq.XName.Get("desc", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName nameXName = System.Xml.Linq.XName.Get("name", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName stateXName = System.Xml.Linq.XName.Get("state", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName priorityXName = System.Xml.Linq.XName.Get("priority", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName categoryXName = System.Xml.Linq.XName.Get("category", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName staStartXName = System.Xml.Linq.XName.Get("staStart", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName staEndXName = System.Xml.Linq.XName.Get("staEnd", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName startWidthXName = System.Xml.Linq.XName.Get("startWidth", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName startVertValueXName = System.Xml.Linq.XName.Get("startVertValue", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName startVertTypeXName = System.Xml.Linq.XName.Get("startVertType", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName endWidthXName = System.Xml.Linq.XName.Get("endWidth", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName endVertValueXName = System.Xml.Linq.XName.Get("endVertValue", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName endVertTypeXName = System.Xml.Linq.XName.Get("endVertType", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("Zone", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator Zone(XElement xe) { return XTypedServices.ToXTypedElement<Zone>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static Zone() {
            BuildElementDictionary();
            contentModel = new ChoiceContentModelEntity(new NamedContentModelEntity(ZoneWidthXName), new NamedContentModelEntity(ZoneSlopeXName), new NamedContentModelEntity(ZoneCutFillXName), new NamedContentModelEntity(ZoneMaterialXName), new NamedContentModelEntity(ZoneCrossSectStructureXName), new NamedContentModelEntity(FeatureXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (ZoneWidth* | ZoneSlope* | ZoneCutFill* | ZoneMaterial* | ZoneCrossSectStructure* | Feature*)*
        /// </para>
        /// </summary>
        public Zone() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating, choice
        /// </para>
        /// <para>
        /// Regular expression: (ZoneWidth* | ZoneSlope* | ZoneCutFill* | ZoneMaterial* | ZoneCrossSectStructure* | Feature*)*
        /// </para>
        /// </summary>
        public virtual IList<ZoneWidth> ZoneWidth {
            get {
                if ((this.ZoneWidthField == null)) {
                    this.ZoneWidthField = new XTypedList<ZoneWidth>(this, LinqToXsdTypeManager.Instance, ZoneWidthXName);
                }
                return this.ZoneWidthField;
            }
            set {
                if ((value == null)) {
                    this.ZoneWidthField = null;
                }
                else {
                    if ((this.ZoneWidthField == null)) {
                        this.ZoneWidthField = XTypedList<ZoneWidth>.Initialize(this, LinqToXsdTypeManager.Instance, value, ZoneWidthXName);
                    }
                    else {
                        XTypedServices.SetList<ZoneWidth>(this.ZoneWidthField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating, choice
        /// </para>
        /// <para>
        /// Regular expression: (ZoneWidth* | ZoneSlope* | ZoneCutFill* | ZoneMaterial* | ZoneCrossSectStructure* | Feature*)*
        /// </para>
        /// </summary>
        public virtual IList<ZoneSlope> ZoneSlope {
            get {
                if ((this.ZoneSlopeField == null)) {
                    this.ZoneSlopeField = new XTypedList<ZoneSlope>(this, LinqToXsdTypeManager.Instance, ZoneSlopeXName);
                }
                return this.ZoneSlopeField;
            }
            set {
                if ((value == null)) {
                    this.ZoneSlopeField = null;
                }
                else {
                    if ((this.ZoneSlopeField == null)) {
                        this.ZoneSlopeField = XTypedList<ZoneSlope>.Initialize(this, LinqToXsdTypeManager.Instance, value, ZoneSlopeXName);
                    }
                    else {
                        XTypedServices.SetList<ZoneSlope>(this.ZoneSlopeField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating, choice
        /// </para>
        /// <para>
        /// Regular expression: (ZoneWidth* | ZoneSlope* | ZoneCutFill* | ZoneMaterial* | ZoneCrossSectStructure* | Feature*)*
        /// </para>
        /// </summary>
        public virtual IList<ZoneCutFill> ZoneCutFill {
            get {
                if ((this.ZoneCutFillField == null)) {
                    this.ZoneCutFillField = new XTypedList<ZoneCutFill>(this, LinqToXsdTypeManager.Instance, ZoneCutFillXName);
                }
                return this.ZoneCutFillField;
            }
            set {
                if ((value == null)) {
                    this.ZoneCutFillField = null;
                }
                else {
                    if ((this.ZoneCutFillField == null)) {
                        this.ZoneCutFillField = XTypedList<ZoneCutFill>.Initialize(this, LinqToXsdTypeManager.Instance, value, ZoneCutFillXName);
                    }
                    else {
                        XTypedServices.SetList<ZoneCutFill>(this.ZoneCutFillField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating, choice
        /// </para>
        /// <para>
        /// Regular expression: (ZoneWidth* | ZoneSlope* | ZoneCutFill* | ZoneMaterial* | ZoneCrossSectStructure* | Feature*)*
        /// </para>
        /// </summary>
        public virtual IList<ZoneMaterial> ZoneMaterial {
            get {
                if ((this.ZoneMaterialField == null)) {
                    this.ZoneMaterialField = new XTypedList<ZoneMaterial>(this, LinqToXsdTypeManager.Instance, ZoneMaterialXName);
                }
                return this.ZoneMaterialField;
            }
            set {
                if ((value == null)) {
                    this.ZoneMaterialField = null;
                }
                else {
                    if ((this.ZoneMaterialField == null)) {
                        this.ZoneMaterialField = XTypedList<ZoneMaterial>.Initialize(this, LinqToXsdTypeManager.Instance, value, ZoneMaterialXName);
                    }
                    else {
                        XTypedServices.SetList<ZoneMaterial>(this.ZoneMaterialField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating, choice
        /// </para>
        /// <para>
        /// Regular expression: (ZoneWidth* | ZoneSlope* | ZoneCutFill* | ZoneMaterial* | ZoneCrossSectStructure* | Feature*)*
        /// </para>
        /// </summary>
        public virtual IList<ZoneCrossSectStructure> ZoneCrossSectStructure {
            get {
                if ((this.ZoneCrossSectStructureField == null)) {
                    this.ZoneCrossSectStructureField = new XTypedList<ZoneCrossSectStructure>(this, LinqToXsdTypeManager.Instance, ZoneCrossSectStructureXName);
                }
                return this.ZoneCrossSectStructureField;
            }
            set {
                if ((value == null)) {
                    this.ZoneCrossSectStructureField = null;
                }
                else {
                    if ((this.ZoneCrossSectStructureField == null)) {
                        this.ZoneCrossSectStructureField = XTypedList<ZoneCrossSectStructure>.Initialize(this, LinqToXsdTypeManager.Instance, value, ZoneCrossSectStructureXName);
                    }
                    else {
                        XTypedServices.SetList<ZoneCrossSectStructure>(this.ZoneCrossSectStructureField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating, choice
        /// </para>
        /// <para>
        /// Regular expression: (ZoneWidth* | ZoneSlope* | ZoneCutFill* | ZoneMaterial* | ZoneCrossSectStructure* | Feature*)*
        /// </para>
        /// </summary>
        public virtual IList<Feature> Feature {
            get {
                if ((this.FeatureField == null)) {
                    this.FeatureField = new XTypedList<Feature>(this, LinqToXsdTypeManager.Instance, FeatureXName);
                }
                return this.FeatureField;
            }
            set {
                if ((value == null)) {
                    this.FeatureField = null;
                }
                else {
                    if ((this.FeatureField == null)) {
                        this.FeatureField = XTypedList<Feature>.Initialize(this, LinqToXsdTypeManager.Instance, value, FeatureXName);
                    }
                    else {
                        XTypedServices.SetList<Feature>(this.FeatureField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string desc {
            get {
                XAttribute x = this.Attribute(descXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(descXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string name {
            get {
                XAttribute x = this.Attribute(nameXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(nameXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual LandXml.v1_2.stateType? state {
            get {
                XAttribute x = this.Attribute(stateXName);
                if ((x == null)) {
                    return null;
                }
                return ((LandXml.v1_2.stateType)(Enum.Parse(typeof(LandXml.v1_2.stateType), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetAttribute(stateXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual int priority {
            get {
                XAttribute x = this.Attribute(priorityXName);
                return XTypedServices.ParseValue<int>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
            set {
                this.SetAttribute(priorityXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual string category {
            get {
                XAttribute x = this.Attribute(categoryXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(categoryXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual double staStart {
            get {
                XAttribute x = this.Attribute(staStartXName);
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetAttribute(staStartXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Double? staEnd {
            get {
                XAttribute x = this.Attribute(staEndXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetAttribute(staEndXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual double startWidth {
            get {
                XAttribute x = this.Attribute(startWidthXName);
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetAttribute(startWidthXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual double startVertValue {
            get {
                XAttribute x = this.Attribute(startVertValueXName);
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetAttribute(startVertValueXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual string startVertType {
            get {
                XAttribute x = this.Attribute(startVertTypeXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(startVertTypeXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Double? endWidth {
            get {
                XAttribute x = this.Attribute(endWidthXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetAttribute(endWidthXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Double? endVertValue {
            get {
                XAttribute x = this.Attribute(endVertValueXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetAttribute(endVertValueXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string endVertType {
            get {
                XAttribute x = this.Attribute(endVertTypeXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(endVertTypeXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static Zone Load(string xmlFile) {
            return XTypedServices.Load<Zone>(xmlFile);
        }
        
        public static Zone Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<Zone>(xmlFile);
        }
        
        public static Zone Parse(string xml) {
            return XTypedServices.Parse<Zone>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<Zone>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(ZoneWidthXName, typeof(ZoneWidth));
            localElementDictionary.Add(ZoneSlopeXName, typeof(ZoneSlope));
            localElementDictionary.Add(ZoneCutFillXName, typeof(ZoneCutFill));
            localElementDictionary.Add(ZoneMaterialXName, typeof(ZoneMaterial));
            localElementDictionary.Add(ZoneCrossSectStructureXName, typeof(ZoneCrossSectStructure));
            localElementDictionary.Add(FeatureXName, typeof(Feature));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Feature*)
    /// </para>
    /// </summary>
    public partial class ZoneWidth : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName FeatureXName = System.Xml.Linq.XName.Get("Feature", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<Feature> FeatureField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName staStartXName = System.Xml.Linq.XName.Get("staStart", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName staEndXName = System.Xml.Linq.XName.Get("staEnd", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName startWidthXName = System.Xml.Linq.XName.Get("startWidth", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName endWidthXName = System.Xml.Linq.XName.Get("endWidth", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("ZoneWidth", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator ZoneWidth(XElement xe) { return XTypedServices.ToXTypedElement<ZoneWidth>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static ZoneWidth() {
            BuildElementDictionary();
            contentModel = new ChoiceContentModelEntity(new NamedContentModelEntity(FeatureXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Feature*)
        /// </para>
        /// </summary>
        public ZoneWidth() {
        }
        
        public ZoneWidth(IEnumerable<Feature> Feature) {
            this.FeatureField = XTypedList<Feature>.Initialize(this, LinqToXsdTypeManager.Instance, Feature, FeatureXName);
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating, choice
        /// </para>
        /// <para>
        /// Regular expression: (Feature*)
        /// </para>
        /// </summary>
        public virtual IList<Feature> Feature {
            get {
                if ((this.FeatureField == null)) {
                    this.FeatureField = new XTypedList<Feature>(this, LinqToXsdTypeManager.Instance, FeatureXName);
                }
                return this.FeatureField;
            }
            set {
                if ((value == null)) {
                    this.FeatureField = null;
                }
                else {
                    if ((this.FeatureField == null)) {
                        this.FeatureField = XTypedList<Feature>.Initialize(this, LinqToXsdTypeManager.Instance, value, FeatureXName);
                    }
                    else {
                        XTypedServices.SetList<Feature>(this.FeatureField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual double staStart {
            get {
                XAttribute x = this.Attribute(staStartXName);
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetAttribute(staStartXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual double staEnd {
            get {
                XAttribute x = this.Attribute(staEndXName);
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetAttribute(staEndXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual double startWidth {
            get {
                XAttribute x = this.Attribute(startWidthXName);
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetAttribute(startWidthXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Double? endWidth {
            get {
                XAttribute x = this.Attribute(endWidthXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetAttribute(endWidthXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static ZoneWidth Load(string xmlFile) {
            return XTypedServices.Load<ZoneWidth>(xmlFile);
        }
        
        public static ZoneWidth Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<ZoneWidth>(xmlFile);
        }
        
        public static ZoneWidth Parse(string xml) {
            return XTypedServices.Parse<ZoneWidth>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ZoneWidth>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(FeatureXName, typeof(Feature));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Feature*)*
    /// </para>
    /// </summary>
    public partial class ZoneSlope : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName FeatureXName = System.Xml.Linq.XName.Get("Feature", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<Feature> FeatureField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName staStartXName = System.Xml.Linq.XName.Get("staStart", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName staEndXName = System.Xml.Linq.XName.Get("staEnd", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName startVertValueXName = System.Xml.Linq.XName.Get("startVertValue", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName startVertTypeXName = System.Xml.Linq.XName.Get("startVertType", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName endVertValueXName = System.Xml.Linq.XName.Get("endVertValue", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName endVertTypeXName = System.Xml.Linq.XName.Get("endVertType", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName parabolicStartStationXName = System.Xml.Linq.XName.Get("parabolicStartStation", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName parabolicEndStationXName = System.Xml.Linq.XName.Get("parabolicEndStation", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("ZoneSlope", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator ZoneSlope(XElement xe) { return XTypedServices.ToXTypedElement<ZoneSlope>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static ZoneSlope() {
            BuildElementDictionary();
            contentModel = new ChoiceContentModelEntity(new NamedContentModelEntity(FeatureXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Feature*)*
        /// </para>
        /// </summary>
        public ZoneSlope() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating, choice
        /// </para>
        /// <para>
        /// Regular expression: (Feature*)*
        /// </para>
        /// </summary>
        public virtual IList<Feature> Feature {
            get {
                if ((this.FeatureField == null)) {
                    this.FeatureField = new XTypedList<Feature>(this, LinqToXsdTypeManager.Instance, FeatureXName);
                }
                return this.FeatureField;
            }
            set {
                if ((value == null)) {
                    this.FeatureField = null;
                }
                else {
                    if ((this.FeatureField == null)) {
                        this.FeatureField = XTypedList<Feature>.Initialize(this, LinqToXsdTypeManager.Instance, value, FeatureXName);
                    }
                    else {
                        XTypedServices.SetList<Feature>(this.FeatureField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual double staStart {
            get {
                XAttribute x = this.Attribute(staStartXName);
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetAttribute(staStartXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual double staEnd {
            get {
                XAttribute x = this.Attribute(staEndXName);
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetAttribute(staEndXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Double? startVertValue {
            get {
                XAttribute x = this.Attribute(startVertValueXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetAttribute(startVertValueXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string startVertType {
            get {
                XAttribute x = this.Attribute(startVertTypeXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(startVertTypeXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual double endVertValue {
            get {
                XAttribute x = this.Attribute(endVertValueXName);
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetAttribute(endVertValueXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual string endVertType {
            get {
                XAttribute x = this.Attribute(endVertTypeXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(endVertTypeXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Double? parabolicStartStation {
            get {
                XAttribute x = this.Attribute(parabolicStartStationXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetAttribute(parabolicStartStationXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Double? parabolicEndStation {
            get {
                XAttribute x = this.Attribute(parabolicEndStationXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetAttribute(parabolicEndStationXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static ZoneSlope Load(string xmlFile) {
            return XTypedServices.Load<ZoneSlope>(xmlFile);
        }
        
        public static ZoneSlope Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<ZoneSlope>(xmlFile);
        }
        
        public static ZoneSlope Parse(string xml) {
            return XTypedServices.Parse<ZoneSlope>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ZoneSlope>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(FeatureXName, typeof(Feature));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Feature*)
    /// </para>
    /// </summary>
    public partial class ZoneHinge : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName FeatureXName = System.Xml.Linq.XName.Get("Feature", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<Feature> FeatureField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName staStartXName = System.Xml.Linq.XName.Get("staStart", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName staEndXName = System.Xml.Linq.XName.Get("staEnd", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName hingeTypeXName = System.Xml.Linq.XName.Get("hingeType", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName zonePriorityRefXName = System.Xml.Linq.XName.Get("zonePriorityRef", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("ZoneHinge", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator ZoneHinge(XElement xe) { return XTypedServices.ToXTypedElement<ZoneHinge>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static ZoneHinge() {
            BuildElementDictionary();
            contentModel = new ChoiceContentModelEntity(new NamedContentModelEntity(FeatureXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Feature*)
        /// </para>
        /// </summary>
        public ZoneHinge() {
        }
        
        public ZoneHinge(IEnumerable<Feature> Feature) {
            this.FeatureField = XTypedList<Feature>.Initialize(this, LinqToXsdTypeManager.Instance, Feature, FeatureXName);
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating, choice
        /// </para>
        /// <para>
        /// Regular expression: (Feature*)
        /// </para>
        /// </summary>
        public virtual IList<Feature> Feature {
            get {
                if ((this.FeatureField == null)) {
                    this.FeatureField = new XTypedList<Feature>(this, LinqToXsdTypeManager.Instance, FeatureXName);
                }
                return this.FeatureField;
            }
            set {
                if ((value == null)) {
                    this.FeatureField = null;
                }
                else {
                    if ((this.FeatureField == null)) {
                        this.FeatureField = XTypedList<Feature>.Initialize(this, LinqToXsdTypeManager.Instance, value, FeatureXName);
                    }
                    else {
                        XTypedServices.SetList<Feature>(this.FeatureField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual double staStart {
            get {
                XAttribute x = this.Attribute(staStartXName);
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetAttribute(staStartXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual double staEnd {
            get {
                XAttribute x = this.Attribute(staEndXName);
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetAttribute(staEndXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual string hingeType {
            get {
                XAttribute x = this.Attribute(hingeTypeXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(hingeTypeXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual int zonePriorityRef {
            get {
                XAttribute x = this.Attribute(zonePriorityRefXName);
                return XTypedServices.ParseValue<int>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
            set {
                this.SetAttribute(zonePriorityRefXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static ZoneHinge Load(string xmlFile) {
            return XTypedServices.Load<ZoneHinge>(xmlFile);
        }
        
        public static ZoneHinge Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<ZoneHinge>(xmlFile);
        }
        
        public static ZoneHinge Parse(string xml) {
            return XTypedServices.Parse<ZoneHinge>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ZoneHinge>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(FeatureXName, typeof(Feature));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Feature*)*
    /// </para>
    /// </summary>
    public partial class ZoneCutFill : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName FeatureXName = System.Xml.Linq.XName.Get("Feature", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<Feature> FeatureField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName staStartXName = System.Xml.Linq.XName.Get("staStart", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName staEndXName = System.Xml.Linq.XName.Get("staEnd", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName cutSlopeXName = System.Xml.Linq.XName.Get("cutSlope", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName fillSlopeXName = System.Xml.Linq.XName.Get("fillSlope", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("ZoneCutFill", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator ZoneCutFill(XElement xe) { return XTypedServices.ToXTypedElement<ZoneCutFill>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static ZoneCutFill() {
            BuildElementDictionary();
            contentModel = new ChoiceContentModelEntity(new NamedContentModelEntity(FeatureXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Feature*)*
        /// </para>
        /// </summary>
        public ZoneCutFill() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating, choice
        /// </para>
        /// <para>
        /// Regular expression: (Feature*)*
        /// </para>
        /// </summary>
        public virtual IList<Feature> Feature {
            get {
                if ((this.FeatureField == null)) {
                    this.FeatureField = new XTypedList<Feature>(this, LinqToXsdTypeManager.Instance, FeatureXName);
                }
                return this.FeatureField;
            }
            set {
                if ((value == null)) {
                    this.FeatureField = null;
                }
                else {
                    if ((this.FeatureField == null)) {
                        this.FeatureField = XTypedList<Feature>.Initialize(this, LinqToXsdTypeManager.Instance, value, FeatureXName);
                    }
                    else {
                        XTypedServices.SetList<Feature>(this.FeatureField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual double staStart {
            get {
                XAttribute x = this.Attribute(staStartXName);
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetAttribute(staStartXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual double staEnd {
            get {
                XAttribute x = this.Attribute(staEndXName);
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetAttribute(staEndXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Double? cutSlope {
            get {
                XAttribute x = this.Attribute(cutSlopeXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetAttribute(cutSlopeXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Double? fillSlope {
            get {
                XAttribute x = this.Attribute(fillSlopeXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetAttribute(fillSlopeXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static ZoneCutFill Load(string xmlFile) {
            return XTypedServices.Load<ZoneCutFill>(xmlFile);
        }
        
        public static ZoneCutFill Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<ZoneCutFill>(xmlFile);
        }
        
        public static ZoneCutFill Parse(string xml) {
            return XTypedServices.Parse<ZoneCutFill>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ZoneCutFill>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(FeatureXName, typeof(Feature));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Feature*)*
    /// </para>
    /// </summary>
    public partial class ZoneMaterial : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName FeatureXName = System.Xml.Linq.XName.Get("Feature", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<Feature> FeatureField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName staStartXName = System.Xml.Linq.XName.Get("staStart", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName staEndXName = System.Xml.Linq.XName.Get("staEnd", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName materialXName = System.Xml.Linq.XName.Get("material", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("ZoneMaterial", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator ZoneMaterial(XElement xe) { return XTypedServices.ToXTypedElement<ZoneMaterial>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static ZoneMaterial() {
            BuildElementDictionary();
            contentModel = new ChoiceContentModelEntity(new NamedContentModelEntity(FeatureXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Feature*)*
        /// </para>
        /// </summary>
        public ZoneMaterial() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating, choice
        /// </para>
        /// <para>
        /// Regular expression: (Feature*)*
        /// </para>
        /// </summary>
        public virtual IList<Feature> Feature {
            get {
                if ((this.FeatureField == null)) {
                    this.FeatureField = new XTypedList<Feature>(this, LinqToXsdTypeManager.Instance, FeatureXName);
                }
                return this.FeatureField;
            }
            set {
                if ((value == null)) {
                    this.FeatureField = null;
                }
                else {
                    if ((this.FeatureField == null)) {
                        this.FeatureField = XTypedList<Feature>.Initialize(this, LinqToXsdTypeManager.Instance, value, FeatureXName);
                    }
                    else {
                        XTypedServices.SetList<Feature>(this.FeatureField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual double staStart {
            get {
                XAttribute x = this.Attribute(staStartXName);
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetAttribute(staStartXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual double staEnd {
            get {
                XAttribute x = this.Attribute(staEndXName);
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetAttribute(staEndXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual string material {
            get {
                XAttribute x = this.Attribute(materialXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(materialXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static ZoneMaterial Load(string xmlFile) {
            return XTypedServices.Load<ZoneMaterial>(xmlFile);
        }
        
        public static ZoneMaterial Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<ZoneMaterial>(xmlFile);
        }
        
        public static ZoneMaterial Parse(string xml) {
            return XTypedServices.Parse<ZoneMaterial>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ZoneMaterial>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(FeatureXName, typeof(Feature));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (PntList2D, Feature*)
    /// </para>
    /// </summary>
    public partial class ZoneCrossSectStructure : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName PntList2DXName = System.Xml.Linq.XName.Get("PntList2D", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName FeatureXName = System.Xml.Linq.XName.Get("Feature", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<Feature> FeatureField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName nameXName = System.Xml.Linq.XName.Get("name", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName innerConnectPntXName = System.Xml.Linq.XName.Get("innerConnectPnt", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName outerConnectPntXName = System.Xml.Linq.XName.Get("outerConnectPnt", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName offsetModeXName = System.Xml.Linq.XName.Get("offsetMode", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static string offsetModeDefaultValue = "zone";
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName startOffsetXName = System.Xml.Linq.XName.Get("startOffset", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static double startOffsetDefaultValue = System.Xml.XmlConvert.ToDouble("0.0");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName startOffsetElevXName = System.Xml.Linq.XName.Get("startOffsetElev", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static double startOffsetElevDefaultValue = System.Xml.XmlConvert.ToDouble("0.0");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName endOffsetXName = System.Xml.Linq.XName.Get("endOffset", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static double endOffsetDefaultValue = System.Xml.XmlConvert.ToDouble("0.0");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName endOffsetElevXName = System.Xml.Linq.XName.Get("endOffsetElev", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static double endOffsetElevDefaultValue = System.Xml.XmlConvert.ToDouble("0.0");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName transitionXName = System.Xml.Linq.XName.Get("transition", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static string transitionDefaultValue = "parallel";
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName placementXName = System.Xml.Linq.XName.Get("placement", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static string placementDefaultValue = "dependent";
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName catalogReferenceXName = System.Xml.Linq.XName.Get("catalogReference", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("ZoneCrossSectStructure", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator ZoneCrossSectStructure(XElement xe) { return XTypedServices.ToXTypedElement<ZoneCrossSectStructure>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static ZoneCrossSectStructure() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(PntList2DXName), new NamedContentModelEntity(FeatureXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (PntList2D, Feature*)
        /// </para>
        /// </summary>
        public ZoneCrossSectStructure() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (PntList2D, Feature*)
        /// </para>
        /// </summary>
        public virtual PntList2D PntList2D {
            get {
                XElement x = this.GetElement(PntList2DXName);
                return ((PntList2D)(x));
            }
            set {
                this.SetElement(PntList2DXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: (PntList2D, Feature*)
        /// </para>
        /// </summary>
        public virtual IList<Feature> Feature {
            get {
                if ((this.FeatureField == null)) {
                    this.FeatureField = new XTypedList<Feature>(this, LinqToXsdTypeManager.Instance, FeatureXName);
                }
                return this.FeatureField;
            }
            set {
                if ((value == null)) {
                    this.FeatureField = null;
                }
                else {
                    if ((this.FeatureField == null)) {
                        this.FeatureField = XTypedList<Feature>.Initialize(this, LinqToXsdTypeManager.Instance, value, FeatureXName);
                    }
                    else {
                        XTypedServices.SetList<Feature>(this.FeatureField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string name {
            get {
                XAttribute x = this.Attribute(nameXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(nameXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual IList<double> innerConnectPnt {
            get {
                XAttribute x = this.Attribute(innerConnectPntXName);
                return XTypedServices.ParseListValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetListAttribute(innerConnectPntXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual IList<double> outerConnectPnt {
            get {
                XAttribute x = this.Attribute(outerConnectPntXName);
                return XTypedServices.ParseListValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetListAttribute(outerConnectPntXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual LandXml.v1_2.zoneOffsetType offsetMode {
            get {
                XAttribute x = this.Attribute(offsetModeXName);
                return ((LandXml.v1_2.zoneOffsetType)(Enum.Parse(typeof(LandXml.v1_2.zoneOffsetType), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, offsetModeDefaultValue))));
            }
            set {
                this.SetAttribute(offsetModeXName, value.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual double startOffset {
            get {
                XAttribute x = this.Attribute(startOffsetXName);
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype, startOffsetDefaultValue);
            }
            set {
                this.SetAttribute(startOffsetXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual double startOffsetElev {
            get {
                XAttribute x = this.Attribute(startOffsetElevXName);
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype, startOffsetElevDefaultValue);
            }
            set {
                this.SetAttribute(startOffsetElevXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual double endOffset {
            get {
                XAttribute x = this.Attribute(endOffsetXName);
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype, endOffsetDefaultValue);
            }
            set {
                this.SetAttribute(endOffsetXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual double endOffsetElev {
            get {
                XAttribute x = this.Attribute(endOffsetElevXName);
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype, endOffsetElevDefaultValue);
            }
            set {
                this.SetAttribute(endOffsetElevXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual LandXml.v1_2.zoneTransitionType transition {
            get {
                XAttribute x = this.Attribute(transitionXName);
                return ((LandXml.v1_2.zoneTransitionType)(Enum.Parse(typeof(LandXml.v1_2.zoneTransitionType), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, transitionDefaultValue))));
            }
            set {
                this.SetAttribute(transitionXName, value.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual LandXml.v1_2.zonePlacementType placement {
            get {
                XAttribute x = this.Attribute(placementXName);
                return ((LandXml.v1_2.zonePlacementType)(Enum.Parse(typeof(LandXml.v1_2.zonePlacementType), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, placementDefaultValue))));
            }
            set {
                this.SetAttribute(placementXName, value.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Uri catalogReference {
            get {
                XAttribute x = this.Attribute(catalogReferenceXName);
                return XTypedServices.ParseValue<System.Uri>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyUri).Datatype);
            }
            set {
                this.SetAttribute(catalogReferenceXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyUri).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static ZoneCrossSectStructure Load(string xmlFile) {
            return XTypedServices.Load<ZoneCrossSectStructure>(xmlFile);
        }
        
        public static ZoneCrossSectStructure Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<ZoneCrossSectStructure>(xmlFile);
        }
        
        public static ZoneCrossSectStructure Parse(string xml) {
            return XTypedServices.Parse<ZoneCrossSectStructure>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ZoneCrossSectStructure>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(PntList2DXName, typeof(PntList2D));
            localElementDictionary.Add(FeatureXName, typeof(Feature));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Roadway+ | Intersections* | Feature*)
    /// </para>
    /// </summary>
    public partial class Roadways : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName RoadwayXName = System.Xml.Linq.XName.Get("Roadway", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<Roadway> RoadwayField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName IntersectionsXName = System.Xml.Linq.XName.Get("Intersections", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<Intersections> IntersectionsField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName FeatureXName = System.Xml.Linq.XName.Get("Feature", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<Feature> FeatureField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName nameXName = System.Xml.Linq.XName.Get("name", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName descXName = System.Xml.Linq.XName.Get("desc", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName stateXName = System.Xml.Linq.XName.Get("state", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("Roadways", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator Roadways(XElement xe) { return XTypedServices.ToXTypedElement<Roadways>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static Roadways() {
            BuildElementDictionary();
            contentModel = new ChoiceContentModelEntity(new NamedContentModelEntity(RoadwayXName), new NamedContentModelEntity(IntersectionsXName), new NamedContentModelEntity(FeatureXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Roadway+ | Intersections* | Feature*)
        /// </para>
        /// </summary>
        public Roadways() {
        }
        
        public Roadways(IEnumerable<Roadway> Roadway) {
            this.RoadwayField = XTypedList<Roadway>.Initialize(this, LinqToXsdTypeManager.Instance, Roadway, RoadwayXName);
        }
        
        public Roadways(IEnumerable<Intersections> Intersections) {
            this.IntersectionsField = XTypedList<Intersections>.Initialize(this, LinqToXsdTypeManager.Instance, Intersections, IntersectionsXName);
        }
        
        public Roadways(IEnumerable<Feature> Feature) {
            this.FeatureField = XTypedList<Feature>.Initialize(this, LinqToXsdTypeManager.Instance, Feature, FeatureXName);
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, repeating, choice
        /// </para>
        /// <para>
        /// Regular expression: (Roadway+ | Intersections* | Feature*)
        /// </para>
        /// </summary>
        public virtual IList<Roadway> Roadway {
            get {
                if ((this.RoadwayField == null)) {
                    this.RoadwayField = new XTypedList<Roadway>(this, LinqToXsdTypeManager.Instance, RoadwayXName);
                }
                return this.RoadwayField;
            }
            set {
                if ((value == null)) {
                    this.RoadwayField = null;
                }
                else {
                    if ((this.RoadwayField == null)) {
                        this.RoadwayField = XTypedList<Roadway>.Initialize(this, LinqToXsdTypeManager.Instance, value, RoadwayXName);
                    }
                    else {
                        XTypedServices.SetList<Roadway>(this.RoadwayField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating, choice
        /// </para>
        /// <para>
        /// Regular expression: (Roadway+ | Intersections* | Feature*)
        /// </para>
        /// </summary>
        public virtual IList<Intersections> Intersections {
            get {
                if ((this.IntersectionsField == null)) {
                    this.IntersectionsField = new XTypedList<Intersections>(this, LinqToXsdTypeManager.Instance, IntersectionsXName);
                }
                return this.IntersectionsField;
            }
            set {
                if ((value == null)) {
                    this.IntersectionsField = null;
                }
                else {
                    if ((this.IntersectionsField == null)) {
                        this.IntersectionsField = XTypedList<Intersections>.Initialize(this, LinqToXsdTypeManager.Instance, value, IntersectionsXName);
                    }
                    else {
                        XTypedServices.SetList<Intersections>(this.IntersectionsField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating, choice
        /// </para>
        /// <para>
        /// Regular expression: (Roadway+ | Intersections* | Feature*)
        /// </para>
        /// </summary>
        public virtual IList<Feature> Feature {
            get {
                if ((this.FeatureField == null)) {
                    this.FeatureField = new XTypedList<Feature>(this, LinqToXsdTypeManager.Instance, FeatureXName);
                }
                return this.FeatureField;
            }
            set {
                if ((value == null)) {
                    this.FeatureField = null;
                }
                else {
                    if ((this.FeatureField == null)) {
                        this.FeatureField = XTypedList<Feature>.Initialize(this, LinqToXsdTypeManager.Instance, value, FeatureXName);
                    }
                    else {
                        XTypedServices.SetList<Feature>(this.FeatureField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string name {
            get {
                XAttribute x = this.Attribute(nameXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(nameXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string desc {
            get {
                XAttribute x = this.Attribute(descXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(descXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual LandXml.v1_2.stateType? state {
            get {
                XAttribute x = this.Attribute(stateXName);
                if ((x == null)) {
                    return null;
                }
                return ((LandXml.v1_2.stateType)(Enum.Parse(typeof(LandXml.v1_2.stateType), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetAttribute(stateXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static Roadways Load(string xmlFile) {
            return XTypedServices.Load<Roadways>(xmlFile);
        }
        
        public static Roadways Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<Roadways>(xmlFile);
        }
        
        public static Roadways Parse(string xml) {
            return XTypedServices.Parse<Roadways>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<Roadways>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(RoadwayXName, typeof(Roadway));
            localElementDictionary.Add(IntersectionsXName, typeof(Intersections));
            localElementDictionary.Add(FeatureXName, typeof(Feature));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Classification* | Lanes* | Roadside* | Speeds* | NoPassingZone* | TrafficVolume* | CrashData* | DecisionSightDistance* | BridgeElement* | PlanFeature* | Feature*)*
    /// </para>
    /// </summary>
    public partial class Roadway : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ClassificationXName = System.Xml.Linq.XName.Get("Classification", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<Classification> ClassificationField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName LanesXName = System.Xml.Linq.XName.Get("Lanes", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<Lanes> LanesField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName RoadsideXName = System.Xml.Linq.XName.Get("Roadside", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<Roadside> RoadsideField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName SpeedsXName = System.Xml.Linq.XName.Get("Speeds", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<Speeds> SpeedsField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName NoPassingZoneXName = System.Xml.Linq.XName.Get("NoPassingZone", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<NoPassingZone> NoPassingZoneField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TrafficVolumeXName = System.Xml.Linq.XName.Get("TrafficVolume", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<TrafficVolume> TrafficVolumeField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName CrashDataXName = System.Xml.Linq.XName.Get("CrashData", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<CrashData> CrashDataField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName DecisionSightDistanceXName = System.Xml.Linq.XName.Get("DecisionSightDistance", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<DecisionSightDistance> DecisionSightDistanceField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName BridgeElementXName = System.Xml.Linq.XName.Get("BridgeElement", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<BridgeElement> BridgeElementField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName PlanFeatureXName = System.Xml.Linq.XName.Get("PlanFeature", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<PlanFeature> PlanFeatureField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName FeatureXName = System.Xml.Linq.XName.Get("Feature", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<Feature> FeatureField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName nameXName = System.Xml.Linq.XName.Get("name", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName alignmentRefsXName = System.Xml.Linq.XName.Get("alignmentRefs", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName surfaceRefsXName = System.Xml.Linq.XName.Get("surfaceRefs", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName gradeModelRefsXName = System.Xml.Linq.XName.Get("gradeModelRefs", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName staStartXName = System.Xml.Linq.XName.Get("staStart", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName staEndXName = System.Xml.Linq.XName.Get("staEnd", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName descXName = System.Xml.Linq.XName.Get("desc", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName roadTerrainXName = System.Xml.Linq.XName.Get("roadTerrain", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName stateXName = System.Xml.Linq.XName.Get("state", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("Roadway", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator Roadway(XElement xe) { return XTypedServices.ToXTypedElement<Roadway>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static Roadway() {
            BuildElementDictionary();
            contentModel = new ChoiceContentModelEntity(new NamedContentModelEntity(ClassificationXName), new NamedContentModelEntity(LanesXName), new NamedContentModelEntity(RoadsideXName), new NamedContentModelEntity(SpeedsXName), new NamedContentModelEntity(NoPassingZoneXName), new NamedContentModelEntity(TrafficVolumeXName), new NamedContentModelEntity(CrashDataXName), new NamedContentModelEntity(DecisionSightDistanceXName), new NamedContentModelEntity(BridgeElementXName), new NamedContentModelEntity(PlanFeatureXName), new NamedContentModelEntity(FeatureXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Classification* | Lanes* | Roadside* | Speeds* | NoPassingZone* | TrafficVolume* | CrashData* | DecisionSightDistance* | BridgeElement* | PlanFeature* | Feature*)*
        /// </para>
        /// </summary>
        public Roadway() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating, choice
        /// </para>
        /// <para>
        /// Regular expression: (Classification* | Lanes* | Roadside* | Speeds* | NoPassingZone* | TrafficVolume* | CrashData* | DecisionSightDistance* | BridgeElement* | PlanFeature* | Feature*)*
        /// </para>
        /// </summary>
        public virtual IList<Classification> Classification {
            get {
                if ((this.ClassificationField == null)) {
                    this.ClassificationField = new XTypedList<Classification>(this, LinqToXsdTypeManager.Instance, ClassificationXName);
                }
                return this.ClassificationField;
            }
            set {
                if ((value == null)) {
                    this.ClassificationField = null;
                }
                else {
                    if ((this.ClassificationField == null)) {
                        this.ClassificationField = XTypedList<Classification>.Initialize(this, LinqToXsdTypeManager.Instance, value, ClassificationXName);
                    }
                    else {
                        XTypedServices.SetList<Classification>(this.ClassificationField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating, choice
        /// </para>
        /// <para>
        /// Regular expression: (Classification* | Lanes* | Roadside* | Speeds* | NoPassingZone* | TrafficVolume* | CrashData* | DecisionSightDistance* | BridgeElement* | PlanFeature* | Feature*)*
        /// </para>
        /// </summary>
        public virtual IList<Lanes> Lanes {
            get {
                if ((this.LanesField == null)) {
                    this.LanesField = new XTypedList<Lanes>(this, LinqToXsdTypeManager.Instance, LanesXName);
                }
                return this.LanesField;
            }
            set {
                if ((value == null)) {
                    this.LanesField = null;
                }
                else {
                    if ((this.LanesField == null)) {
                        this.LanesField = XTypedList<Lanes>.Initialize(this, LinqToXsdTypeManager.Instance, value, LanesXName);
                    }
                    else {
                        XTypedServices.SetList<Lanes>(this.LanesField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating, choice
        /// </para>
        /// <para>
        /// Regular expression: (Classification* | Lanes* | Roadside* | Speeds* | NoPassingZone* | TrafficVolume* | CrashData* | DecisionSightDistance* | BridgeElement* | PlanFeature* | Feature*)*
        /// </para>
        /// </summary>
        public virtual IList<Roadside> Roadside {
            get {
                if ((this.RoadsideField == null)) {
                    this.RoadsideField = new XTypedList<Roadside>(this, LinqToXsdTypeManager.Instance, RoadsideXName);
                }
                return this.RoadsideField;
            }
            set {
                if ((value == null)) {
                    this.RoadsideField = null;
                }
                else {
                    if ((this.RoadsideField == null)) {
                        this.RoadsideField = XTypedList<Roadside>.Initialize(this, LinqToXsdTypeManager.Instance, value, RoadsideXName);
                    }
                    else {
                        XTypedServices.SetList<Roadside>(this.RoadsideField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating, choice
        /// </para>
        /// <para>
        /// Regular expression: (Classification* | Lanes* | Roadside* | Speeds* | NoPassingZone* | TrafficVolume* | CrashData* | DecisionSightDistance* | BridgeElement* | PlanFeature* | Feature*)*
        /// </para>
        /// </summary>
        public virtual IList<Speeds> Speeds {
            get {
                if ((this.SpeedsField == null)) {
                    this.SpeedsField = new XTypedList<Speeds>(this, LinqToXsdTypeManager.Instance, SpeedsXName);
                }
                return this.SpeedsField;
            }
            set {
                if ((value == null)) {
                    this.SpeedsField = null;
                }
                else {
                    if ((this.SpeedsField == null)) {
                        this.SpeedsField = XTypedList<Speeds>.Initialize(this, LinqToXsdTypeManager.Instance, value, SpeedsXName);
                    }
                    else {
                        XTypedServices.SetList<Speeds>(this.SpeedsField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating, choice
        /// </para>
        /// <para>
        /// Regular expression: (Classification* | Lanes* | Roadside* | Speeds* | NoPassingZone* | TrafficVolume* | CrashData* | DecisionSightDistance* | BridgeElement* | PlanFeature* | Feature*)*
        /// </para>
        /// </summary>
        public virtual IList<NoPassingZone> NoPassingZone {
            get {
                if ((this.NoPassingZoneField == null)) {
                    this.NoPassingZoneField = new XTypedList<NoPassingZone>(this, LinqToXsdTypeManager.Instance, NoPassingZoneXName);
                }
                return this.NoPassingZoneField;
            }
            set {
                if ((value == null)) {
                    this.NoPassingZoneField = null;
                }
                else {
                    if ((this.NoPassingZoneField == null)) {
                        this.NoPassingZoneField = XTypedList<NoPassingZone>.Initialize(this, LinqToXsdTypeManager.Instance, value, NoPassingZoneXName);
                    }
                    else {
                        XTypedServices.SetList<NoPassingZone>(this.NoPassingZoneField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating, choice
        /// </para>
        /// <para>
        /// Regular expression: (Classification* | Lanes* | Roadside* | Speeds* | NoPassingZone* | TrafficVolume* | CrashData* | DecisionSightDistance* | BridgeElement* | PlanFeature* | Feature*)*
        /// </para>
        /// </summary>
        public virtual IList<TrafficVolume> TrafficVolume {
            get {
                if ((this.TrafficVolumeField == null)) {
                    this.TrafficVolumeField = new XTypedList<TrafficVolume>(this, LinqToXsdTypeManager.Instance, TrafficVolumeXName);
                }
                return this.TrafficVolumeField;
            }
            set {
                if ((value == null)) {
                    this.TrafficVolumeField = null;
                }
                else {
                    if ((this.TrafficVolumeField == null)) {
                        this.TrafficVolumeField = XTypedList<TrafficVolume>.Initialize(this, LinqToXsdTypeManager.Instance, value, TrafficVolumeXName);
                    }
                    else {
                        XTypedServices.SetList<TrafficVolume>(this.TrafficVolumeField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating, choice
        /// </para>
        /// <para>
        /// Regular expression: (Classification* | Lanes* | Roadside* | Speeds* | NoPassingZone* | TrafficVolume* | CrashData* | DecisionSightDistance* | BridgeElement* | PlanFeature* | Feature*)*
        /// </para>
        /// </summary>
        public virtual IList<CrashData> CrashData {
            get {
                if ((this.CrashDataField == null)) {
                    this.CrashDataField = new XTypedList<CrashData>(this, LinqToXsdTypeManager.Instance, CrashDataXName);
                }
                return this.CrashDataField;
            }
            set {
                if ((value == null)) {
                    this.CrashDataField = null;
                }
                else {
                    if ((this.CrashDataField == null)) {
                        this.CrashDataField = XTypedList<CrashData>.Initialize(this, LinqToXsdTypeManager.Instance, value, CrashDataXName);
                    }
                    else {
                        XTypedServices.SetList<CrashData>(this.CrashDataField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating, choice
        /// </para>
        /// <para>
        /// Regular expression: (Classification* | Lanes* | Roadside* | Speeds* | NoPassingZone* | TrafficVolume* | CrashData* | DecisionSightDistance* | BridgeElement* | PlanFeature* | Feature*)*
        /// </para>
        /// </summary>
        public virtual IList<DecisionSightDistance> DecisionSightDistance {
            get {
                if ((this.DecisionSightDistanceField == null)) {
                    this.DecisionSightDistanceField = new XTypedList<DecisionSightDistance>(this, LinqToXsdTypeManager.Instance, DecisionSightDistanceXName);
                }
                return this.DecisionSightDistanceField;
            }
            set {
                if ((value == null)) {
                    this.DecisionSightDistanceField = null;
                }
                else {
                    if ((this.DecisionSightDistanceField == null)) {
                        this.DecisionSightDistanceField = XTypedList<DecisionSightDistance>.Initialize(this, LinqToXsdTypeManager.Instance, value, DecisionSightDistanceXName);
                    }
                    else {
                        XTypedServices.SetList<DecisionSightDistance>(this.DecisionSightDistanceField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating, choice
        /// </para>
        /// <para>
        /// Regular expression: (Classification* | Lanes* | Roadside* | Speeds* | NoPassingZone* | TrafficVolume* | CrashData* | DecisionSightDistance* | BridgeElement* | PlanFeature* | Feature*)*
        /// </para>
        /// </summary>
        public virtual IList<BridgeElement> BridgeElement {
            get {
                if ((this.BridgeElementField == null)) {
                    this.BridgeElementField = new XTypedList<BridgeElement>(this, LinqToXsdTypeManager.Instance, BridgeElementXName);
                }
                return this.BridgeElementField;
            }
            set {
                if ((value == null)) {
                    this.BridgeElementField = null;
                }
                else {
                    if ((this.BridgeElementField == null)) {
                        this.BridgeElementField = XTypedList<BridgeElement>.Initialize(this, LinqToXsdTypeManager.Instance, value, BridgeElementXName);
                    }
                    else {
                        XTypedServices.SetList<BridgeElement>(this.BridgeElementField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating, choice
        /// </para>
        /// <para>
        /// Regular expression: (Classification* | Lanes* | Roadside* | Speeds* | NoPassingZone* | TrafficVolume* | CrashData* | DecisionSightDistance* | BridgeElement* | PlanFeature* | Feature*)*
        /// </para>
        /// </summary>
        public virtual IList<PlanFeature> PlanFeature {
            get {
                if ((this.PlanFeatureField == null)) {
                    this.PlanFeatureField = new XTypedList<PlanFeature>(this, LinqToXsdTypeManager.Instance, PlanFeatureXName);
                }
                return this.PlanFeatureField;
            }
            set {
                if ((value == null)) {
                    this.PlanFeatureField = null;
                }
                else {
                    if ((this.PlanFeatureField == null)) {
                        this.PlanFeatureField = XTypedList<PlanFeature>.Initialize(this, LinqToXsdTypeManager.Instance, value, PlanFeatureXName);
                    }
                    else {
                        XTypedServices.SetList<PlanFeature>(this.PlanFeatureField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating, choice
        /// </para>
        /// <para>
        /// Regular expression: (Classification* | Lanes* | Roadside* | Speeds* | NoPassingZone* | TrafficVolume* | CrashData* | DecisionSightDistance* | BridgeElement* | PlanFeature* | Feature*)*
        /// </para>
        /// </summary>
        public virtual IList<Feature> Feature {
            get {
                if ((this.FeatureField == null)) {
                    this.FeatureField = new XTypedList<Feature>(this, LinqToXsdTypeManager.Instance, FeatureXName);
                }
                return this.FeatureField;
            }
            set {
                if ((value == null)) {
                    this.FeatureField = null;
                }
                else {
                    if ((this.FeatureField == null)) {
                        this.FeatureField = XTypedList<Feature>.Initialize(this, LinqToXsdTypeManager.Instance, value, FeatureXName);
                    }
                    else {
                        XTypedServices.SetList<Feature>(this.FeatureField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual string name {
            get {
                XAttribute x = this.Attribute(nameXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(nameXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual IList<string> alignmentRefs {
            get {
                XAttribute x = this.Attribute(alignmentRefsXName);
                return XTypedServices.ParseListValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetListAttribute(alignmentRefsXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual IList<string> surfaceRefs {
            get {
                XAttribute x = this.Attribute(surfaceRefsXName);
                return XTypedServices.ParseListValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetListAttribute(surfaceRefsXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual IList<string> gradeModelRefs {
            get {
                XAttribute x = this.Attribute(gradeModelRefsXName);
                return XTypedServices.ParseListValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetListAttribute(gradeModelRefsXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Double? staStart {
            get {
                XAttribute x = this.Attribute(staStartXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetAttribute(staStartXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Double? staEnd {
            get {
                XAttribute x = this.Attribute(staEndXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetAttribute(staEndXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string desc {
            get {
                XAttribute x = this.Attribute(descXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(descXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual LandXml.v1_2.roadTerrainType? roadTerrain {
            get {
                XAttribute x = this.Attribute(roadTerrainXName);
                if ((x == null)) {
                    return null;
                }
                return ((LandXml.v1_2.roadTerrainType)(Enum.Parse(typeof(LandXml.v1_2.roadTerrainType), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetAttribute(roadTerrainXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual LandXml.v1_2.stateType? state {
            get {
                XAttribute x = this.Attribute(stateXName);
                if ((x == null)) {
                    return null;
                }
                return ((LandXml.v1_2.stateType)(Enum.Parse(typeof(LandXml.v1_2.stateType), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetAttribute(stateXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static Roadway Load(string xmlFile) {
            return XTypedServices.Load<Roadway>(xmlFile);
        }
        
        public static Roadway Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<Roadway>(xmlFile);
        }
        
        public static Roadway Parse(string xml) {
            return XTypedServices.Parse<Roadway>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<Roadway>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(ClassificationXName, typeof(Classification));
            localElementDictionary.Add(LanesXName, typeof(Lanes));
            localElementDictionary.Add(RoadsideXName, typeof(Roadside));
            localElementDictionary.Add(SpeedsXName, typeof(Speeds));
            localElementDictionary.Add(NoPassingZoneXName, typeof(NoPassingZone));
            localElementDictionary.Add(TrafficVolumeXName, typeof(TrafficVolume));
            localElementDictionary.Add(CrashDataXName, typeof(CrashData));
            localElementDictionary.Add(DecisionSightDistanceXName, typeof(DecisionSightDistance));
            localElementDictionary.Add(BridgeElementXName, typeof(BridgeElement));
            localElementDictionary.Add(PlanFeatureXName, typeof(PlanFeature));
            localElementDictionary.Add(FeatureXName, typeof(Feature));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Feature*)*
    /// </para>
    /// </summary>
    public partial class Classification : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName FeatureXName = System.Xml.Linq.XName.Get("Feature", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<Feature> FeatureField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName staStartXName = System.Xml.Linq.XName.Get("staStart", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName staEndXName = System.Xml.Linq.XName.Get("staEnd", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName functionalClassXName = System.Xml.Linq.XName.Get("functionalClass", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("Classification", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator Classification(XElement xe) { return XTypedServices.ToXTypedElement<Classification>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static Classification() {
            BuildElementDictionary();
            contentModel = new ChoiceContentModelEntity(new NamedContentModelEntity(FeatureXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Feature*)*
        /// </para>
        /// </summary>
        public Classification() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating, choice
        /// </para>
        /// <para>
        /// Regular expression: (Feature*)*
        /// </para>
        /// </summary>
        public virtual IList<Feature> Feature {
            get {
                if ((this.FeatureField == null)) {
                    this.FeatureField = new XTypedList<Feature>(this, LinqToXsdTypeManager.Instance, FeatureXName);
                }
                return this.FeatureField;
            }
            set {
                if ((value == null)) {
                    this.FeatureField = null;
                }
                else {
                    if ((this.FeatureField == null)) {
                        this.FeatureField = XTypedList<Feature>.Initialize(this, LinqToXsdTypeManager.Instance, value, FeatureXName);
                    }
                    else {
                        XTypedServices.SetList<Feature>(this.FeatureField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Double? staStart {
            get {
                XAttribute x = this.Attribute(staStartXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetAttribute(staStartXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Double? staEnd {
            get {
                XAttribute x = this.Attribute(staEndXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetAttribute(staEndXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string functionalClass {
            get {
                XAttribute x = this.Attribute(functionalClassXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(functionalClassXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static Classification Load(string xmlFile) {
            return XTypedServices.Load<Classification>(xmlFile);
        }
        
        public static Classification Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<Classification>(xmlFile);
        }
        
        public static Classification Parse(string xml) {
            return XTypedServices.Parse<Classification>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<Classification>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(FeatureXName, typeof(Feature));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Feature*)*
    /// </para>
    /// </summary>
    public partial class DesignSpeed : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName FeatureXName = System.Xml.Linq.XName.Get("Feature", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<Feature> FeatureField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName staStartXName = System.Xml.Linq.XName.Get("staStart", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName staEndXName = System.Xml.Linq.XName.Get("staEnd", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName speedXName = System.Xml.Linq.XName.Get("speed", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("DesignSpeed", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator DesignSpeed(XElement xe) { return XTypedServices.ToXTypedElement<DesignSpeed>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static DesignSpeed() {
            BuildElementDictionary();
            contentModel = new ChoiceContentModelEntity(new NamedContentModelEntity(FeatureXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Feature*)*
        /// </para>
        /// </summary>
        public DesignSpeed() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating, choice
        /// </para>
        /// <para>
        /// Regular expression: (Feature*)*
        /// </para>
        /// </summary>
        public virtual IList<Feature> Feature {
            get {
                if ((this.FeatureField == null)) {
                    this.FeatureField = new XTypedList<Feature>(this, LinqToXsdTypeManager.Instance, FeatureXName);
                }
                return this.FeatureField;
            }
            set {
                if ((value == null)) {
                    this.FeatureField = null;
                }
                else {
                    if ((this.FeatureField == null)) {
                        this.FeatureField = XTypedList<Feature>.Initialize(this, LinqToXsdTypeManager.Instance, value, FeatureXName);
                    }
                    else {
                        XTypedServices.SetList<Feature>(this.FeatureField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Double? staStart {
            get {
                XAttribute x = this.Attribute(staStartXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetAttribute(staStartXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Double? staEnd {
            get {
                XAttribute x = this.Attribute(staEndXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetAttribute(staEndXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Double? speed {
            get {
                XAttribute x = this.Attribute(speedXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetAttribute(speedXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static DesignSpeed Load(string xmlFile) {
            return XTypedServices.Load<DesignSpeed>(xmlFile);
        }
        
        public static DesignSpeed Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<DesignSpeed>(xmlFile);
        }
        
        public static DesignSpeed Parse(string xml) {
            return XTypedServices.Parse<DesignSpeed>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<DesignSpeed>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(FeatureXName, typeof(Feature));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Feature*)*
    /// </para>
    /// </summary>
    public partial class DesignSpeed85th : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName FeatureXName = System.Xml.Linq.XName.Get("Feature", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<Feature> FeatureField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName staStartXName = System.Xml.Linq.XName.Get("staStart", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName staEndXName = System.Xml.Linq.XName.Get("staEnd", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName sideofRoadXName = System.Xml.Linq.XName.Get("sideofRoad", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName speedXName = System.Xml.Linq.XName.Get("speed", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("DesignSpeed85th", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator DesignSpeed85th(XElement xe) { return XTypedServices.ToXTypedElement<DesignSpeed85th>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static DesignSpeed85th() {
            BuildElementDictionary();
            contentModel = new ChoiceContentModelEntity(new NamedContentModelEntity(FeatureXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Feature*)*
        /// </para>
        /// </summary>
        public DesignSpeed85th() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating, choice
        /// </para>
        /// <para>
        /// Regular expression: (Feature*)*
        /// </para>
        /// </summary>
        public virtual IList<Feature> Feature {
            get {
                if ((this.FeatureField == null)) {
                    this.FeatureField = new XTypedList<Feature>(this, LinqToXsdTypeManager.Instance, FeatureXName);
                }
                return this.FeatureField;
            }
            set {
                if ((value == null)) {
                    this.FeatureField = null;
                }
                else {
                    if ((this.FeatureField == null)) {
                        this.FeatureField = XTypedList<Feature>.Initialize(this, LinqToXsdTypeManager.Instance, value, FeatureXName);
                    }
                    else {
                        XTypedServices.SetList<Feature>(this.FeatureField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Double? staStart {
            get {
                XAttribute x = this.Attribute(staStartXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetAttribute(staStartXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Double? staEnd {
            get {
                XAttribute x = this.Attribute(staEndXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetAttribute(staEndXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual LandXml.v1_2.sideofRoadType? sideofRoad {
            get {
                XAttribute x = this.Attribute(sideofRoadXName);
                if ((x == null)) {
                    return null;
                }
                return ((LandXml.v1_2.sideofRoadType)(Enum.Parse(typeof(LandXml.v1_2.sideofRoadType), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetAttribute(sideofRoadXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Double? speed {
            get {
                XAttribute x = this.Attribute(speedXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetAttribute(speedXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static DesignSpeed85th Load(string xmlFile) {
            return XTypedServices.Load<DesignSpeed85th>(xmlFile);
        }
        
        public static DesignSpeed85th Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<DesignSpeed85th>(xmlFile);
        }
        
        public static DesignSpeed85th Parse(string xml) {
            return XTypedServices.Parse<DesignSpeed85th>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<DesignSpeed85th>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(FeatureXName, typeof(Feature));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (DesignSpeed+ | DesignSpeed85th+ | PostedSpeed* | Feature*)*
    /// </para>
    /// </summary>
    public partial class Speeds : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName DesignSpeedXName = System.Xml.Linq.XName.Get("DesignSpeed", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<DesignSpeed> DesignSpeedField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName DesignSpeed85thXName = System.Xml.Linq.XName.Get("DesignSpeed85th", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<DesignSpeed85th> DesignSpeed85thField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName PostedSpeedXName = System.Xml.Linq.XName.Get("PostedSpeed", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<PostedSpeed> PostedSpeedField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName FeatureXName = System.Xml.Linq.XName.Get("Feature", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<Feature> FeatureField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("Speeds", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator Speeds(XElement xe) { return XTypedServices.ToXTypedElement<Speeds>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static Speeds() {
            BuildElementDictionary();
            contentModel = new ChoiceContentModelEntity(new NamedContentModelEntity(DesignSpeedXName), new NamedContentModelEntity(DesignSpeed85thXName), new NamedContentModelEntity(PostedSpeedXName), new NamedContentModelEntity(FeatureXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (DesignSpeed+ | DesignSpeed85th+ | PostedSpeed* | Feature*)*
        /// </para>
        /// </summary>
        public Speeds() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, repeating, choice
        /// </para>
        /// <para>
        /// Regular expression: (DesignSpeed+ | DesignSpeed85th+ | PostedSpeed* | Feature*)*
        /// </para>
        /// </summary>
        public virtual IList<DesignSpeed> DesignSpeed {
            get {
                if ((this.DesignSpeedField == null)) {
                    this.DesignSpeedField = new XTypedList<DesignSpeed>(this, LinqToXsdTypeManager.Instance, DesignSpeedXName);
                }
                return this.DesignSpeedField;
            }
            set {
                if ((value == null)) {
                    this.DesignSpeedField = null;
                }
                else {
                    if ((this.DesignSpeedField == null)) {
                        this.DesignSpeedField = XTypedList<DesignSpeed>.Initialize(this, LinqToXsdTypeManager.Instance, value, DesignSpeedXName);
                    }
                    else {
                        XTypedServices.SetList<DesignSpeed>(this.DesignSpeedField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, repeating, choice
        /// </para>
        /// <para>
        /// Regular expression: (DesignSpeed+ | DesignSpeed85th+ | PostedSpeed* | Feature*)*
        /// </para>
        /// </summary>
        public virtual IList<DesignSpeed85th> DesignSpeed85th {
            get {
                if ((this.DesignSpeed85thField == null)) {
                    this.DesignSpeed85thField = new XTypedList<DesignSpeed85th>(this, LinqToXsdTypeManager.Instance, DesignSpeed85thXName);
                }
                return this.DesignSpeed85thField;
            }
            set {
                if ((value == null)) {
                    this.DesignSpeed85thField = null;
                }
                else {
                    if ((this.DesignSpeed85thField == null)) {
                        this.DesignSpeed85thField = XTypedList<DesignSpeed85th>.Initialize(this, LinqToXsdTypeManager.Instance, value, DesignSpeed85thXName);
                    }
                    else {
                        XTypedServices.SetList<DesignSpeed85th>(this.DesignSpeed85thField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating, choice
        /// </para>
        /// <para>
        /// Regular expression: (DesignSpeed+ | DesignSpeed85th+ | PostedSpeed* | Feature*)*
        /// </para>
        /// </summary>
        public virtual IList<PostedSpeed> PostedSpeed {
            get {
                if ((this.PostedSpeedField == null)) {
                    this.PostedSpeedField = new XTypedList<PostedSpeed>(this, LinqToXsdTypeManager.Instance, PostedSpeedXName);
                }
                return this.PostedSpeedField;
            }
            set {
                if ((value == null)) {
                    this.PostedSpeedField = null;
                }
                else {
                    if ((this.PostedSpeedField == null)) {
                        this.PostedSpeedField = XTypedList<PostedSpeed>.Initialize(this, LinqToXsdTypeManager.Instance, value, PostedSpeedXName);
                    }
                    else {
                        XTypedServices.SetList<PostedSpeed>(this.PostedSpeedField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating, choice
        /// </para>
        /// <para>
        /// Regular expression: (DesignSpeed+ | DesignSpeed85th+ | PostedSpeed* | Feature*)*
        /// </para>
        /// </summary>
        public virtual IList<Feature> Feature {
            get {
                if ((this.FeatureField == null)) {
                    this.FeatureField = new XTypedList<Feature>(this, LinqToXsdTypeManager.Instance, FeatureXName);
                }
                return this.FeatureField;
            }
            set {
                if ((value == null)) {
                    this.FeatureField = null;
                }
                else {
                    if ((this.FeatureField == null)) {
                        this.FeatureField = XTypedList<Feature>.Initialize(this, LinqToXsdTypeManager.Instance, value, FeatureXName);
                    }
                    else {
                        XTypedServices.SetList<Feature>(this.FeatureField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static Speeds Load(string xmlFile) {
            return XTypedServices.Load<Speeds>(xmlFile);
        }
        
        public static Speeds Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<Speeds>(xmlFile);
        }
        
        public static Speeds Parse(string xml) {
            return XTypedServices.Parse<Speeds>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<Speeds>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(DesignSpeedXName, typeof(DesignSpeed));
            localElementDictionary.Add(DesignSpeed85thXName, typeof(DesignSpeed85th));
            localElementDictionary.Add(PostedSpeedXName, typeof(PostedSpeed));
            localElementDictionary.Add(FeatureXName, typeof(Feature));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Feature*)*
    /// </para>
    /// </summary>
    public partial class DailyTrafficVolume : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName FeatureXName = System.Xml.Linq.XName.Get("Feature", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<Feature> FeatureField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName staStartXName = System.Xml.Linq.XName.Get("staStart", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName staEndXName = System.Xml.Linq.XName.Get("staEnd", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ADTXName = System.Xml.Linq.XName.Get("ADT", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName yearXName = System.Xml.Linq.XName.Get("year", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName escFactorXName = System.Xml.Linq.XName.Get("escFactor", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("DailyTrafficVolume", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator DailyTrafficVolume(XElement xe) { return XTypedServices.ToXTypedElement<DailyTrafficVolume>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static DailyTrafficVolume() {
            BuildElementDictionary();
            contentModel = new ChoiceContentModelEntity(new NamedContentModelEntity(FeatureXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Feature*)*
        /// </para>
        /// </summary>
        public DailyTrafficVolume() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating, choice
        /// </para>
        /// <para>
        /// Regular expression: (Feature*)*
        /// </para>
        /// </summary>
        public virtual IList<Feature> Feature {
            get {
                if ((this.FeatureField == null)) {
                    this.FeatureField = new XTypedList<Feature>(this, LinqToXsdTypeManager.Instance, FeatureXName);
                }
                return this.FeatureField;
            }
            set {
                if ((value == null)) {
                    this.FeatureField = null;
                }
                else {
                    if ((this.FeatureField == null)) {
                        this.FeatureField = XTypedList<Feature>.Initialize(this, LinqToXsdTypeManager.Instance, value, FeatureXName);
                    }
                    else {
                        XTypedServices.SetList<Feature>(this.FeatureField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Double? staStart {
            get {
                XAttribute x = this.Attribute(staStartXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetAttribute(staStartXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Double? staEnd {
            get {
                XAttribute x = this.Attribute(staEndXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetAttribute(staEndXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Double? ADT {
            get {
                XAttribute x = this.Attribute(ADTXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetAttribute(ADTXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.DateTime? year {
            get {
                XAttribute x = this.Attribute(yearXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<System.DateTime>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date).Datatype);
            }
            set {
                this.SetAttribute(yearXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Double? escFactor {
            get {
                XAttribute x = this.Attribute(escFactorXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetAttribute(escFactorXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static DailyTrafficVolume Load(string xmlFile) {
            return XTypedServices.Load<DailyTrafficVolume>(xmlFile);
        }
        
        public static DailyTrafficVolume Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<DailyTrafficVolume>(xmlFile);
        }
        
        public static DailyTrafficVolume Parse(string xml) {
            return XTypedServices.Parse<DailyTrafficVolume>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<DailyTrafficVolume>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(FeatureXName, typeof(Feature));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Feature*)*
    /// </para>
    /// </summary>
    public partial class DesignHour : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName FeatureXName = System.Xml.Linq.XName.Get("Feature", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<Feature> FeatureField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName staStartXName = System.Xml.Linq.XName.Get("staStart", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName staEndXName = System.Xml.Linq.XName.Get("staEnd", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName volumeXName = System.Xml.Linq.XName.Get("volume", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("DesignHour", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator DesignHour(XElement xe) { return XTypedServices.ToXTypedElement<DesignHour>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static DesignHour() {
            BuildElementDictionary();
            contentModel = new ChoiceContentModelEntity(new NamedContentModelEntity(FeatureXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Feature*)*
        /// </para>
        /// </summary>
        public DesignHour() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating, choice
        /// </para>
        /// <para>
        /// Regular expression: (Feature*)*
        /// </para>
        /// </summary>
        public virtual IList<Feature> Feature {
            get {
                if ((this.FeatureField == null)) {
                    this.FeatureField = new XTypedList<Feature>(this, LinqToXsdTypeManager.Instance, FeatureXName);
                }
                return this.FeatureField;
            }
            set {
                if ((value == null)) {
                    this.FeatureField = null;
                }
                else {
                    if ((this.FeatureField == null)) {
                        this.FeatureField = XTypedList<Feature>.Initialize(this, LinqToXsdTypeManager.Instance, value, FeatureXName);
                    }
                    else {
                        XTypedServices.SetList<Feature>(this.FeatureField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Double? staStart {
            get {
                XAttribute x = this.Attribute(staStartXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetAttribute(staStartXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Double? staEnd {
            get {
                XAttribute x = this.Attribute(staEndXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetAttribute(staEndXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Double? volume {
            get {
                XAttribute x = this.Attribute(volumeXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetAttribute(volumeXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static DesignHour Load(string xmlFile) {
            return XTypedServices.Load<DesignHour>(xmlFile);
        }
        
        public static DesignHour Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<DesignHour>(xmlFile);
        }
        
        public static DesignHour Parse(string xml) {
            return XTypedServices.Parse<DesignHour>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<DesignHour>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(FeatureXName, typeof(Feature));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Feature*)*
    /// </para>
    /// </summary>
    public partial class PeakHour : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName FeatureXName = System.Xml.Linq.XName.Get("Feature", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<Feature> FeatureField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName staStartXName = System.Xml.Linq.XName.Get("staStart", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName staEndXName = System.Xml.Linq.XName.Get("staEnd", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName sideofRoadXName = System.Xml.Linq.XName.Get("sideofRoad", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName volumeXName = System.Xml.Linq.XName.Get("volume", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("PeakHour", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator PeakHour(XElement xe) { return XTypedServices.ToXTypedElement<PeakHour>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static PeakHour() {
            BuildElementDictionary();
            contentModel = new ChoiceContentModelEntity(new NamedContentModelEntity(FeatureXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Feature*)*
        /// </para>
        /// </summary>
        public PeakHour() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating, choice
        /// </para>
        /// <para>
        /// Regular expression: (Feature*)*
        /// </para>
        /// </summary>
        public virtual IList<Feature> Feature {
            get {
                if ((this.FeatureField == null)) {
                    this.FeatureField = new XTypedList<Feature>(this, LinqToXsdTypeManager.Instance, FeatureXName);
                }
                return this.FeatureField;
            }
            set {
                if ((value == null)) {
                    this.FeatureField = null;
                }
                else {
                    if ((this.FeatureField == null)) {
                        this.FeatureField = XTypedList<Feature>.Initialize(this, LinqToXsdTypeManager.Instance, value, FeatureXName);
                    }
                    else {
                        XTypedServices.SetList<Feature>(this.FeatureField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Double? staStart {
            get {
                XAttribute x = this.Attribute(staStartXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetAttribute(staStartXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Double? staEnd {
            get {
                XAttribute x = this.Attribute(staEndXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetAttribute(staEndXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual LandXml.v1_2.sideofRoadType? sideofRoad {
            get {
                XAttribute x = this.Attribute(sideofRoadXName);
                if ((x == null)) {
                    return null;
                }
                return ((LandXml.v1_2.sideofRoadType)(Enum.Parse(typeof(LandXml.v1_2.sideofRoadType), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetAttribute(sideofRoadXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Double? volume {
            get {
                XAttribute x = this.Attribute(volumeXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetAttribute(volumeXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static PeakHour Load(string xmlFile) {
            return XTypedServices.Load<PeakHour>(xmlFile);
        }
        
        public static PeakHour Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<PeakHour>(xmlFile);
        }
        
        public static PeakHour Parse(string xml) {
            return XTypedServices.Parse<PeakHour>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<PeakHour>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(FeatureXName, typeof(Feature));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (DailyTrafficVolume | DesignHour | PeakHour | Feature*)+
    /// </para>
    /// </summary>
    public partial class TrafficVolume : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName DailyTrafficVolumeXName = System.Xml.Linq.XName.Get("DailyTrafficVolume", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<DailyTrafficVolume> DailyTrafficVolumeField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName DesignHourXName = System.Xml.Linq.XName.Get("DesignHour", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<DesignHour> DesignHourField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName PeakHourXName = System.Xml.Linq.XName.Get("PeakHour", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<PeakHour> PeakHourField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName FeatureXName = System.Xml.Linq.XName.Get("Feature", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<Feature> FeatureField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("TrafficVolume", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator TrafficVolume(XElement xe) { return XTypedServices.ToXTypedElement<TrafficVolume>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static TrafficVolume() {
            BuildElementDictionary();
            contentModel = new ChoiceContentModelEntity(new NamedContentModelEntity(DailyTrafficVolumeXName), new NamedContentModelEntity(DesignHourXName), new NamedContentModelEntity(PeakHourXName), new NamedContentModelEntity(FeatureXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (DailyTrafficVolume | DesignHour | PeakHour | Feature*)+
        /// </para>
        /// </summary>
        public TrafficVolume() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (DailyTrafficVolume | DesignHour | PeakHour | Feature*)+
        /// </para>
        /// </summary>
        public virtual IList<DailyTrafficVolume> DailyTrafficVolume {
            get {
                if ((this.DailyTrafficVolumeField == null)) {
                    this.DailyTrafficVolumeField = new XTypedList<DailyTrafficVolume>(this, LinqToXsdTypeManager.Instance, DailyTrafficVolumeXName);
                }
                return this.DailyTrafficVolumeField;
            }
            set {
                if ((value == null)) {
                    this.DailyTrafficVolumeField = null;
                }
                else {
                    if ((this.DailyTrafficVolumeField == null)) {
                        this.DailyTrafficVolumeField = XTypedList<DailyTrafficVolume>.Initialize(this, LinqToXsdTypeManager.Instance, value, DailyTrafficVolumeXName);
                    }
                    else {
                        XTypedServices.SetList<DailyTrafficVolume>(this.DailyTrafficVolumeField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (DailyTrafficVolume | DesignHour | PeakHour | Feature*)+
        /// </para>
        /// </summary>
        public virtual IList<DesignHour> DesignHour {
            get {
                if ((this.DesignHourField == null)) {
                    this.DesignHourField = new XTypedList<DesignHour>(this, LinqToXsdTypeManager.Instance, DesignHourXName);
                }
                return this.DesignHourField;
            }
            set {
                if ((value == null)) {
                    this.DesignHourField = null;
                }
                else {
                    if ((this.DesignHourField == null)) {
                        this.DesignHourField = XTypedList<DesignHour>.Initialize(this, LinqToXsdTypeManager.Instance, value, DesignHourXName);
                    }
                    else {
                        XTypedServices.SetList<DesignHour>(this.DesignHourField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (DailyTrafficVolume | DesignHour | PeakHour | Feature*)+
        /// </para>
        /// </summary>
        public virtual IList<PeakHour> PeakHour {
            get {
                if ((this.PeakHourField == null)) {
                    this.PeakHourField = new XTypedList<PeakHour>(this, LinqToXsdTypeManager.Instance, PeakHourXName);
                }
                return this.PeakHourField;
            }
            set {
                if ((value == null)) {
                    this.PeakHourField = null;
                }
                else {
                    if ((this.PeakHourField == null)) {
                        this.PeakHourField = XTypedList<PeakHour>.Initialize(this, LinqToXsdTypeManager.Instance, value, PeakHourXName);
                    }
                    else {
                        XTypedServices.SetList<PeakHour>(this.PeakHourField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating, choice
        /// </para>
        /// <para>
        /// Regular expression: (DailyTrafficVolume | DesignHour | PeakHour | Feature*)+
        /// </para>
        /// </summary>
        public virtual IList<Feature> Feature {
            get {
                if ((this.FeatureField == null)) {
                    this.FeatureField = new XTypedList<Feature>(this, LinqToXsdTypeManager.Instance, FeatureXName);
                }
                return this.FeatureField;
            }
            set {
                if ((value == null)) {
                    this.FeatureField = null;
                }
                else {
                    if ((this.FeatureField == null)) {
                        this.FeatureField = XTypedList<Feature>.Initialize(this, LinqToXsdTypeManager.Instance, value, FeatureXName);
                    }
                    else {
                        XTypedServices.SetList<Feature>(this.FeatureField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static TrafficVolume Load(string xmlFile) {
            return XTypedServices.Load<TrafficVolume>(xmlFile);
        }
        
        public static TrafficVolume Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<TrafficVolume>(xmlFile);
        }
        
        public static TrafficVolume Parse(string xml) {
            return XTypedServices.Parse<TrafficVolume>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<TrafficVolume>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(DailyTrafficVolumeXName, typeof(DailyTrafficVolume));
            localElementDictionary.Add(DesignHourXName, typeof(DesignHour));
            localElementDictionary.Add(PeakHourXName, typeof(PeakHour));
            localElementDictionary.Add(FeatureXName, typeof(Feature));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (BeginRunoutSta* | BeginRunoffSta* | FullSuperSta* | FullSuperelev+ | RunoffSta* | StartofRunoutSta* | EndofRunoutSta* | AdverseSE* | Feature*)+
    /// </para>
    /// </summary>
    public partial class Superelevation : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName BeginRunoutStaXName = System.Xml.Linq.XName.Get("BeginRunoutSta", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XSimpleList<BeginRunoutSta> BeginRunoutStaField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName BeginRunoffStaXName = System.Xml.Linq.XName.Get("BeginRunoffSta", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XSimpleList<BeginRunoffSta> BeginRunoffStaField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName FullSuperStaXName = System.Xml.Linq.XName.Get("FullSuperSta", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XSimpleList<FullSuperSta> FullSuperStaField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName FullSuperelevXName = System.Xml.Linq.XName.Get("FullSuperelev", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XSimpleList<FullSuperelev> FullSuperelevField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName RunoffStaXName = System.Xml.Linq.XName.Get("RunoffSta", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XSimpleList<RunoffSta> RunoffStaField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName StartofRunoutStaXName = System.Xml.Linq.XName.Get("StartofRunoutSta", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XSimpleList<StartofRunoutSta> StartofRunoutStaField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName EndofRunoutStaXName = System.Xml.Linq.XName.Get("EndofRunoutSta", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XSimpleList<EndofRunoutSta> EndofRunoutStaField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName AdverseSEXName = System.Xml.Linq.XName.Get("AdverseSE", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XSimpleList<AdverseSE> AdverseSEField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName FeatureXName = System.Xml.Linq.XName.Get("Feature", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<Feature> FeatureField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName staStartXName = System.Xml.Linq.XName.Get("staStart", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName staEndXName = System.Xml.Linq.XName.Get("staEnd", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("Superelevation", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator Superelevation(XElement xe) { return XTypedServices.ToXTypedElement<Superelevation>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static Superelevation() {
            BuildElementDictionary();
            contentModel = new ChoiceContentModelEntity(new NamedContentModelEntity(BeginRunoutStaXName), new NamedContentModelEntity(BeginRunoffStaXName), new NamedContentModelEntity(FullSuperStaXName), new NamedContentModelEntity(FullSuperelevXName), new NamedContentModelEntity(RunoffStaXName), new NamedContentModelEntity(StartofRunoutStaXName), new NamedContentModelEntity(EndofRunoutStaXName), new NamedContentModelEntity(AdverseSEXName), new NamedContentModelEntity(FeatureXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (BeginRunoutSta* | BeginRunoffSta* | FullSuperSta* | FullSuperelev+ | RunoffSta* | StartofRunoutSta* | EndofRunoutSta* | AdverseSE* | Feature*)+
        /// </para>
        /// </summary>
        public Superelevation() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating, choice
        /// </para>
        /// <para>
        /// Regular expression: (BeginRunoutSta* | BeginRunoffSta* | FullSuperSta* | FullSuperelev+ | RunoffSta* | StartofRunoutSta* | EndofRunoutSta* | AdverseSE* | Feature*)+
        /// </para>
        /// </summary>
        public virtual IList<BeginRunoutSta> BeginRunoutSta {
            get {
                if ((this.BeginRunoutStaField == null)) {
                    this.BeginRunoutStaField = new XSimpleList<BeginRunoutSta>(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype, BeginRunoutStaXName);
                }
                return this.BeginRunoutStaField;
            }
            set {
                if ((value == null)) {
                    this.BeginRunoutStaField = null;
                }
                else {
                    if ((this.BeginRunoutStaField == null)) {
                        this.BeginRunoutStaField = XSimpleList<BeginRunoutSta>.Initialize(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype, value, BeginRunoutStaXName);
                    }
                    else {
                        XTypedServices.SetList<BeginRunoutSta>(this.BeginRunoutStaField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating, choice
        /// </para>
        /// <para>
        /// Regular expression: (BeginRunoutSta* | BeginRunoffSta* | FullSuperSta* | FullSuperelev+ | RunoffSta* | StartofRunoutSta* | EndofRunoutSta* | AdverseSE* | Feature*)+
        /// </para>
        /// </summary>
        public virtual IList<BeginRunoffSta> BeginRunoffSta {
            get {
                if ((this.BeginRunoffStaField == null)) {
                    this.BeginRunoffStaField = new XSimpleList<BeginRunoffSta>(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype, BeginRunoffStaXName);
                }
                return this.BeginRunoffStaField;
            }
            set {
                if ((value == null)) {
                    this.BeginRunoffStaField = null;
                }
                else {
                    if ((this.BeginRunoffStaField == null)) {
                        this.BeginRunoffStaField = XSimpleList<BeginRunoffSta>.Initialize(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype, value, BeginRunoffStaXName);
                    }
                    else {
                        XTypedServices.SetList<BeginRunoffSta>(this.BeginRunoffStaField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating, choice
        /// </para>
        /// <para>
        /// Regular expression: (BeginRunoutSta* | BeginRunoffSta* | FullSuperSta* | FullSuperelev+ | RunoffSta* | StartofRunoutSta* | EndofRunoutSta* | AdverseSE* | Feature*)+
        /// </para>
        /// </summary>
        public virtual IList<FullSuperSta> FullSuperSta {
            get {
                if ((this.FullSuperStaField == null)) {
                    this.FullSuperStaField = new XSimpleList<FullSuperSta>(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype, FullSuperStaXName);
                }
                return this.FullSuperStaField;
            }
            set {
                if ((value == null)) {
                    this.FullSuperStaField = null;
                }
                else {
                    if ((this.FullSuperStaField == null)) {
                        this.FullSuperStaField = XSimpleList<FullSuperSta>.Initialize(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype, value, FullSuperStaXName);
                    }
                    else {
                        XTypedServices.SetList<FullSuperSta>(this.FullSuperStaField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, repeating, choice
        /// </para>
        /// <para>
        /// Regular expression: (BeginRunoutSta* | BeginRunoffSta* | FullSuperSta* | FullSuperelev+ | RunoffSta* | StartofRunoutSta* | EndofRunoutSta* | AdverseSE* | Feature*)+
        /// </para>
        /// </summary>
        public virtual IList<FullSuperelev> FullSuperelev {
            get {
                if ((this.FullSuperelevField == null)) {
                    this.FullSuperelevField = new XSimpleList<FullSuperelev>(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype, FullSuperelevXName);
                }
                return this.FullSuperelevField;
            }
            set {
                if ((value == null)) {
                    this.FullSuperelevField = null;
                }
                else {
                    if ((this.FullSuperelevField == null)) {
                        this.FullSuperelevField = XSimpleList<FullSuperelev>.Initialize(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype, value, FullSuperelevXName);
                    }
                    else {
                        XTypedServices.SetList<FullSuperelev>(this.FullSuperelevField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating, choice
        /// </para>
        /// <para>
        /// Regular expression: (BeginRunoutSta* | BeginRunoffSta* | FullSuperSta* | FullSuperelev+ | RunoffSta* | StartofRunoutSta* | EndofRunoutSta* | AdverseSE* | Feature*)+
        /// </para>
        /// </summary>
        public virtual IList<RunoffSta> RunoffSta {
            get {
                if ((this.RunoffStaField == null)) {
                    this.RunoffStaField = new XSimpleList<RunoffSta>(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype, RunoffStaXName);
                }
                return this.RunoffStaField;
            }
            set {
                if ((value == null)) {
                    this.RunoffStaField = null;
                }
                else {
                    if ((this.RunoffStaField == null)) {
                        this.RunoffStaField = XSimpleList<RunoffSta>.Initialize(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype, value, RunoffStaXName);
                    }
                    else {
                        XTypedServices.SetList<RunoffSta>(this.RunoffStaField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating, choice
        /// </para>
        /// <para>
        /// Regular expression: (BeginRunoutSta* | BeginRunoffSta* | FullSuperSta* | FullSuperelev+ | RunoffSta* | StartofRunoutSta* | EndofRunoutSta* | AdverseSE* | Feature*)+
        /// </para>
        /// </summary>
        public virtual IList<StartofRunoutSta> StartofRunoutSta {
            get {
                if ((this.StartofRunoutStaField == null)) {
                    this.StartofRunoutStaField = new XSimpleList<StartofRunoutSta>(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype, StartofRunoutStaXName);
                }
                return this.StartofRunoutStaField;
            }
            set {
                if ((value == null)) {
                    this.StartofRunoutStaField = null;
                }
                else {
                    if ((this.StartofRunoutStaField == null)) {
                        this.StartofRunoutStaField = XSimpleList<StartofRunoutSta>.Initialize(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype, value, StartofRunoutStaXName);
                    }
                    else {
                        XTypedServices.SetList<StartofRunoutSta>(this.StartofRunoutStaField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating, choice
        /// </para>
        /// <para>
        /// Regular expression: (BeginRunoutSta* | BeginRunoffSta* | FullSuperSta* | FullSuperelev+ | RunoffSta* | StartofRunoutSta* | EndofRunoutSta* | AdverseSE* | Feature*)+
        /// </para>
        /// </summary>
        public virtual IList<EndofRunoutSta> EndofRunoutSta {
            get {
                if ((this.EndofRunoutStaField == null)) {
                    this.EndofRunoutStaField = new XSimpleList<EndofRunoutSta>(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype, EndofRunoutStaXName);
                }
                return this.EndofRunoutStaField;
            }
            set {
                if ((value == null)) {
                    this.EndofRunoutStaField = null;
                }
                else {
                    if ((this.EndofRunoutStaField == null)) {
                        this.EndofRunoutStaField = XSimpleList<EndofRunoutSta>.Initialize(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype, value, EndofRunoutStaXName);
                    }
                    else {
                        XTypedServices.SetList<EndofRunoutSta>(this.EndofRunoutStaField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating, choice
        /// </para>
        /// <para>
        /// Regular expression: (BeginRunoutSta* | BeginRunoffSta* | FullSuperSta* | FullSuperelev+ | RunoffSta* | StartofRunoutSta* | EndofRunoutSta* | AdverseSE* | Feature*)+
        /// </para>
        /// </summary>
        public virtual IList<AdverseSE> AdverseSE {
            get {
                if ((this.AdverseSEField == null)) {
                    this.AdverseSEField = new XSimpleList<AdverseSE>(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, AdverseSEXName);
                }
                return this.AdverseSEField;
            }
            set {
                if ((value == null)) {
                    this.AdverseSEField = null;
                }
                else {
                    if ((this.AdverseSEField == null)) {
                        this.AdverseSEField = XSimpleList<AdverseSE>.Initialize(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype, value, AdverseSEXName);
                    }
                    else {
                        XTypedServices.SetList<AdverseSE>(this.AdverseSEField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating, choice
        /// </para>
        /// <para>
        /// Regular expression: (BeginRunoutSta* | BeginRunoffSta* | FullSuperSta* | FullSuperelev+ | RunoffSta* | StartofRunoutSta* | EndofRunoutSta* | AdverseSE* | Feature*)+
        /// </para>
        /// </summary>
        public virtual IList<Feature> Feature {
            get {
                if ((this.FeatureField == null)) {
                    this.FeatureField = new XTypedList<Feature>(this, LinqToXsdTypeManager.Instance, FeatureXName);
                }
                return this.FeatureField;
            }
            set {
                if ((value == null)) {
                    this.FeatureField = null;
                }
                else {
                    if ((this.FeatureField == null)) {
                        this.FeatureField = XTypedList<Feature>.Initialize(this, LinqToXsdTypeManager.Instance, value, FeatureXName);
                    }
                    else {
                        XTypedServices.SetList<Feature>(this.FeatureField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Double? staStart {
            get {
                XAttribute x = this.Attribute(staStartXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetAttribute(staStartXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Double? staEnd {
            get {
                XAttribute x = this.Attribute(staEndXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetAttribute(staEndXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static Superelevation Load(string xmlFile) {
            return XTypedServices.Load<Superelevation>(xmlFile);
        }
        
        public static Superelevation Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<Superelevation>(xmlFile);
        }
        
        public static Superelevation Parse(string xml) {
            return XTypedServices.Parse<Superelevation>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<Superelevation>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(BeginRunoutStaXName, typeof(BeginRunoutSta));
            localElementDictionary.Add(BeginRunoffStaXName, typeof(BeginRunoffSta));
            localElementDictionary.Add(FullSuperStaXName, typeof(FullSuperSta));
            localElementDictionary.Add(FullSuperelevXName, typeof(FullSuperelev));
            localElementDictionary.Add(RunoffStaXName, typeof(RunoffSta));
            localElementDictionary.Add(StartofRunoutStaXName, typeof(StartofRunoutSta));
            localElementDictionary.Add(EndofRunoutStaXName, typeof(EndofRunoutSta));
            localElementDictionary.Add(AdverseSEXName, typeof(AdverseSE));
            localElementDictionary.Add(FeatureXName, typeof(Feature));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (ThruLane* | PassingLane* | TurnLane* | TwoWayLeftTurnLane* | ClimbLane* | OffsetLane* | WideningLane* | Feature*)*
    /// </para>
    /// </summary>
    public partial class Lanes : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ThruLaneXName = System.Xml.Linq.XName.Get("ThruLane", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ThruLane> ThruLaneField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName PassingLaneXName = System.Xml.Linq.XName.Get("PassingLane", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<PassingLane> PassingLaneField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TurnLaneXName = System.Xml.Linq.XName.Get("TurnLane", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<TurnLane> TurnLaneField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TwoWayLeftTurnLaneXName = System.Xml.Linq.XName.Get("TwoWayLeftTurnLane", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<TwoWayLeftTurnLane> TwoWayLeftTurnLaneField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ClimbLaneXName = System.Xml.Linq.XName.Get("ClimbLane", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ClimbLane> ClimbLaneField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName OffsetLaneXName = System.Xml.Linq.XName.Get("OffsetLane", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<OffsetLane> OffsetLaneField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName WideningLaneXName = System.Xml.Linq.XName.Get("WideningLane", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<WideningLane> WideningLaneField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName FeatureXName = System.Xml.Linq.XName.Get("Feature", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<Feature> FeatureField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("Lanes", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator Lanes(XElement xe) { return XTypedServices.ToXTypedElement<Lanes>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static Lanes() {
            BuildElementDictionary();
            contentModel = new ChoiceContentModelEntity(new NamedContentModelEntity(ThruLaneXName), new NamedContentModelEntity(PassingLaneXName), new NamedContentModelEntity(TurnLaneXName), new NamedContentModelEntity(TwoWayLeftTurnLaneXName), new NamedContentModelEntity(ClimbLaneXName), new NamedContentModelEntity(OffsetLaneXName), new NamedContentModelEntity(WideningLaneXName), new NamedContentModelEntity(FeatureXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (ThruLane* | PassingLane* | TurnLane* | TwoWayLeftTurnLane* | ClimbLane* | OffsetLane* | WideningLane* | Feature*)*
        /// </para>
        /// </summary>
        public Lanes() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating, choice
        /// </para>
        /// <para>
        /// Regular expression: (ThruLane* | PassingLane* | TurnLane* | TwoWayLeftTurnLane* | ClimbLane* | OffsetLane* | WideningLane* | Feature*)*
        /// </para>
        /// </summary>
        public virtual IList<ThruLane> ThruLane {
            get {
                if ((this.ThruLaneField == null)) {
                    this.ThruLaneField = new XTypedList<ThruLane>(this, LinqToXsdTypeManager.Instance, ThruLaneXName);
                }
                return this.ThruLaneField;
            }
            set {
                if ((value == null)) {
                    this.ThruLaneField = null;
                }
                else {
                    if ((this.ThruLaneField == null)) {
                        this.ThruLaneField = XTypedList<ThruLane>.Initialize(this, LinqToXsdTypeManager.Instance, value, ThruLaneXName);
                    }
                    else {
                        XTypedServices.SetList<ThruLane>(this.ThruLaneField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating, choice
        /// </para>
        /// <para>
        /// Regular expression: (ThruLane* | PassingLane* | TurnLane* | TwoWayLeftTurnLane* | ClimbLane* | OffsetLane* | WideningLane* | Feature*)*
        /// </para>
        /// </summary>
        public virtual IList<PassingLane> PassingLane {
            get {
                if ((this.PassingLaneField == null)) {
                    this.PassingLaneField = new XTypedList<PassingLane>(this, LinqToXsdTypeManager.Instance, PassingLaneXName);
                }
                return this.PassingLaneField;
            }
            set {
                if ((value == null)) {
                    this.PassingLaneField = null;
                }
                else {
                    if ((this.PassingLaneField == null)) {
                        this.PassingLaneField = XTypedList<PassingLane>.Initialize(this, LinqToXsdTypeManager.Instance, value, PassingLaneXName);
                    }
                    else {
                        XTypedServices.SetList<PassingLane>(this.PassingLaneField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating, choice
        /// </para>
        /// <para>
        /// Regular expression: (ThruLane* | PassingLane* | TurnLane* | TwoWayLeftTurnLane* | ClimbLane* | OffsetLane* | WideningLane* | Feature*)*
        /// </para>
        /// </summary>
        public virtual IList<TurnLane> TurnLane {
            get {
                if ((this.TurnLaneField == null)) {
                    this.TurnLaneField = new XTypedList<TurnLane>(this, LinqToXsdTypeManager.Instance, TurnLaneXName);
                }
                return this.TurnLaneField;
            }
            set {
                if ((value == null)) {
                    this.TurnLaneField = null;
                }
                else {
                    if ((this.TurnLaneField == null)) {
                        this.TurnLaneField = XTypedList<TurnLane>.Initialize(this, LinqToXsdTypeManager.Instance, value, TurnLaneXName);
                    }
                    else {
                        XTypedServices.SetList<TurnLane>(this.TurnLaneField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating, choice
        /// </para>
        /// <para>
        /// Regular expression: (ThruLane* | PassingLane* | TurnLane* | TwoWayLeftTurnLane* | ClimbLane* | OffsetLane* | WideningLane* | Feature*)*
        /// </para>
        /// </summary>
        public virtual IList<TwoWayLeftTurnLane> TwoWayLeftTurnLane {
            get {
                if ((this.TwoWayLeftTurnLaneField == null)) {
                    this.TwoWayLeftTurnLaneField = new XTypedList<TwoWayLeftTurnLane>(this, LinqToXsdTypeManager.Instance, TwoWayLeftTurnLaneXName);
                }
                return this.TwoWayLeftTurnLaneField;
            }
            set {
                if ((value == null)) {
                    this.TwoWayLeftTurnLaneField = null;
                }
                else {
                    if ((this.TwoWayLeftTurnLaneField == null)) {
                        this.TwoWayLeftTurnLaneField = XTypedList<TwoWayLeftTurnLane>.Initialize(this, LinqToXsdTypeManager.Instance, value, TwoWayLeftTurnLaneXName);
                    }
                    else {
                        XTypedServices.SetList<TwoWayLeftTurnLane>(this.TwoWayLeftTurnLaneField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating, choice
        /// </para>
        /// <para>
        /// Regular expression: (ThruLane* | PassingLane* | TurnLane* | TwoWayLeftTurnLane* | ClimbLane* | OffsetLane* | WideningLane* | Feature*)*
        /// </para>
        /// </summary>
        public virtual IList<ClimbLane> ClimbLane {
            get {
                if ((this.ClimbLaneField == null)) {
                    this.ClimbLaneField = new XTypedList<ClimbLane>(this, LinqToXsdTypeManager.Instance, ClimbLaneXName);
                }
                return this.ClimbLaneField;
            }
            set {
                if ((value == null)) {
                    this.ClimbLaneField = null;
                }
                else {
                    if ((this.ClimbLaneField == null)) {
                        this.ClimbLaneField = XTypedList<ClimbLane>.Initialize(this, LinqToXsdTypeManager.Instance, value, ClimbLaneXName);
                    }
                    else {
                        XTypedServices.SetList<ClimbLane>(this.ClimbLaneField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating, choice
        /// </para>
        /// <para>
        /// Regular expression: (ThruLane* | PassingLane* | TurnLane* | TwoWayLeftTurnLane* | ClimbLane* | OffsetLane* | WideningLane* | Feature*)*
        /// </para>
        /// </summary>
        public virtual IList<OffsetLane> OffsetLane {
            get {
                if ((this.OffsetLaneField == null)) {
                    this.OffsetLaneField = new XTypedList<OffsetLane>(this, LinqToXsdTypeManager.Instance, OffsetLaneXName);
                }
                return this.OffsetLaneField;
            }
            set {
                if ((value == null)) {
                    this.OffsetLaneField = null;
                }
                else {
                    if ((this.OffsetLaneField == null)) {
                        this.OffsetLaneField = XTypedList<OffsetLane>.Initialize(this, LinqToXsdTypeManager.Instance, value, OffsetLaneXName);
                    }
                    else {
                        XTypedServices.SetList<OffsetLane>(this.OffsetLaneField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating, choice
        /// </para>
        /// <para>
        /// Regular expression: (ThruLane* | PassingLane* | TurnLane* | TwoWayLeftTurnLane* | ClimbLane* | OffsetLane* | WideningLane* | Feature*)*
        /// </para>
        /// </summary>
        public virtual IList<WideningLane> WideningLane {
            get {
                if ((this.WideningLaneField == null)) {
                    this.WideningLaneField = new XTypedList<WideningLane>(this, LinqToXsdTypeManager.Instance, WideningLaneXName);
                }
                return this.WideningLaneField;
            }
            set {
                if ((value == null)) {
                    this.WideningLaneField = null;
                }
                else {
                    if ((this.WideningLaneField == null)) {
                        this.WideningLaneField = XTypedList<WideningLane>.Initialize(this, LinqToXsdTypeManager.Instance, value, WideningLaneXName);
                    }
                    else {
                        XTypedServices.SetList<WideningLane>(this.WideningLaneField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating, choice
        /// </para>
        /// <para>
        /// Regular expression: (ThruLane* | PassingLane* | TurnLane* | TwoWayLeftTurnLane* | ClimbLane* | OffsetLane* | WideningLane* | Feature*)*
        /// </para>
        /// </summary>
        public virtual IList<Feature> Feature {
            get {
                if ((this.FeatureField == null)) {
                    this.FeatureField = new XTypedList<Feature>(this, LinqToXsdTypeManager.Instance, FeatureXName);
                }
                return this.FeatureField;
            }
            set {
                if ((value == null)) {
                    this.FeatureField = null;
                }
                else {
                    if ((this.FeatureField == null)) {
                        this.FeatureField = XTypedList<Feature>.Initialize(this, LinqToXsdTypeManager.Instance, value, FeatureXName);
                    }
                    else {
                        XTypedServices.SetList<Feature>(this.FeatureField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static Lanes Load(string xmlFile) {
            return XTypedServices.Load<Lanes>(xmlFile);
        }
        
        public static Lanes Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<Lanes>(xmlFile);
        }
        
        public static Lanes Parse(string xml) {
            return XTypedServices.Parse<Lanes>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<Lanes>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(ThruLaneXName, typeof(ThruLane));
            localElementDictionary.Add(PassingLaneXName, typeof(PassingLane));
            localElementDictionary.Add(TurnLaneXName, typeof(TurnLane));
            localElementDictionary.Add(TwoWayLeftTurnLaneXName, typeof(TwoWayLeftTurnLane));
            localElementDictionary.Add(ClimbLaneXName, typeof(ClimbLane));
            localElementDictionary.Add(OffsetLaneXName, typeof(OffsetLane));
            localElementDictionary.Add(WideningLaneXName, typeof(WideningLane));
            localElementDictionary.Add(FeatureXName, typeof(Feature));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Feature*)*
    /// </para>
    /// </summary>
    public partial class ThruLane : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName FeatureXName = System.Xml.Linq.XName.Get("Feature", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<Feature> FeatureField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName staStartXName = System.Xml.Linq.XName.Get("staStart", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName staEndXName = System.Xml.Linq.XName.Get("staEnd", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName widthXName = System.Xml.Linq.XName.Get("width", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName sideofRoadXName = System.Xml.Linq.XName.Get("sideofRoad", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("ThruLane", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator ThruLane(XElement xe) { return XTypedServices.ToXTypedElement<ThruLane>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static ThruLane() {
            BuildElementDictionary();
            contentModel = new ChoiceContentModelEntity(new NamedContentModelEntity(FeatureXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Feature*)*
        /// </para>
        /// </summary>
        public ThruLane() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating, choice
        /// </para>
        /// <para>
        /// Regular expression: (Feature*)*
        /// </para>
        /// </summary>
        public virtual IList<Feature> Feature {
            get {
                if ((this.FeatureField == null)) {
                    this.FeatureField = new XTypedList<Feature>(this, LinqToXsdTypeManager.Instance, FeatureXName);
                }
                return this.FeatureField;
            }
            set {
                if ((value == null)) {
                    this.FeatureField = null;
                }
                else {
                    if ((this.FeatureField == null)) {
                        this.FeatureField = XTypedList<Feature>.Initialize(this, LinqToXsdTypeManager.Instance, value, FeatureXName);
                    }
                    else {
                        XTypedServices.SetList<Feature>(this.FeatureField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Double? staStart {
            get {
                XAttribute x = this.Attribute(staStartXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetAttribute(staStartXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Double? staEnd {
            get {
                XAttribute x = this.Attribute(staEndXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetAttribute(staEndXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Double? width {
            get {
                XAttribute x = this.Attribute(widthXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetAttribute(widthXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual LandXml.v1_2.sideofRoadType? sideofRoad {
            get {
                XAttribute x = this.Attribute(sideofRoadXName);
                if ((x == null)) {
                    return null;
                }
                return ((LandXml.v1_2.sideofRoadType)(Enum.Parse(typeof(LandXml.v1_2.sideofRoadType), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetAttribute(sideofRoadXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static ThruLane Load(string xmlFile) {
            return XTypedServices.Load<ThruLane>(xmlFile);
        }
        
        public static ThruLane Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<ThruLane>(xmlFile);
        }
        
        public static ThruLane Parse(string xml) {
            return XTypedServices.Parse<ThruLane>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ThruLane>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(FeatureXName, typeof(Feature));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Feature*)*
    /// </para>
    /// </summary>
    public partial class PassingLane : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName FeatureXName = System.Xml.Linq.XName.Get("Feature", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<Feature> FeatureField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName staStartXName = System.Xml.Linq.XName.Get("staStart", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName staEndXName = System.Xml.Linq.XName.Get("staEnd", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName beginFullWidthStaXName = System.Xml.Linq.XName.Get("beginFullWidthSta", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName endFullWidthStaXName = System.Xml.Linq.XName.Get("endFullWidthSta", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName widthXName = System.Xml.Linq.XName.Get("width", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName sideofRoadXName = System.Xml.Linq.XName.Get("sideofRoad", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("PassingLane", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator PassingLane(XElement xe) { return XTypedServices.ToXTypedElement<PassingLane>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static PassingLane() {
            BuildElementDictionary();
            contentModel = new ChoiceContentModelEntity(new NamedContentModelEntity(FeatureXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Feature*)*
        /// </para>
        /// </summary>
        public PassingLane() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating, choice
        /// </para>
        /// <para>
        /// Regular expression: (Feature*)*
        /// </para>
        /// </summary>
        public virtual IList<Feature> Feature {
            get {
                if ((this.FeatureField == null)) {
                    this.FeatureField = new XTypedList<Feature>(this, LinqToXsdTypeManager.Instance, FeatureXName);
                }
                return this.FeatureField;
            }
            set {
                if ((value == null)) {
                    this.FeatureField = null;
                }
                else {
                    if ((this.FeatureField == null)) {
                        this.FeatureField = XTypedList<Feature>.Initialize(this, LinqToXsdTypeManager.Instance, value, FeatureXName);
                    }
                    else {
                        XTypedServices.SetList<Feature>(this.FeatureField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Double? staStart {
            get {
                XAttribute x = this.Attribute(staStartXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetAttribute(staStartXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Double? staEnd {
            get {
                XAttribute x = this.Attribute(staEndXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetAttribute(staEndXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Double? beginFullWidthSta {
            get {
                XAttribute x = this.Attribute(beginFullWidthStaXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetAttribute(beginFullWidthStaXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Double? endFullWidthSta {
            get {
                XAttribute x = this.Attribute(endFullWidthStaXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetAttribute(endFullWidthStaXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Double? width {
            get {
                XAttribute x = this.Attribute(widthXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetAttribute(widthXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual LandXml.v1_2.sideofRoadType? sideofRoad {
            get {
                XAttribute x = this.Attribute(sideofRoadXName);
                if ((x == null)) {
                    return null;
                }
                return ((LandXml.v1_2.sideofRoadType)(Enum.Parse(typeof(LandXml.v1_2.sideofRoadType), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetAttribute(sideofRoadXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static PassingLane Load(string xmlFile) {
            return XTypedServices.Load<PassingLane>(xmlFile);
        }
        
        public static PassingLane Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<PassingLane>(xmlFile);
        }
        
        public static PassingLane Parse(string xml) {
            return XTypedServices.Parse<PassingLane>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<PassingLane>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(FeatureXName, typeof(Feature));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Feature*)*
    /// </para>
    /// </summary>
    public partial class TurnLane : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName FeatureXName = System.Xml.Linq.XName.Get("Feature", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<Feature> FeatureField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName staStartXName = System.Xml.Linq.XName.Get("staStart", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName staEndXName = System.Xml.Linq.XName.Get("staEnd", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName beginFullWidthStaXName = System.Xml.Linq.XName.Get("beginFullWidthSta", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName widthXName = System.Xml.Linq.XName.Get("width", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName sideofRoadXName = System.Xml.Linq.XName.Get("sideofRoad", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName typeXName = System.Xml.Linq.XName.Get("type", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName taperTypeXName = System.Xml.Linq.XName.Get("taperType", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName taperTangentLengthXName = System.Xml.Linq.XName.Get("taperTangentLength", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("TurnLane", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator TurnLane(XElement xe) { return XTypedServices.ToXTypedElement<TurnLane>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static TurnLane() {
            BuildElementDictionary();
            contentModel = new ChoiceContentModelEntity(new NamedContentModelEntity(FeatureXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Feature*)*
        /// </para>
        /// </summary>
        public TurnLane() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating, choice
        /// </para>
        /// <para>
        /// Regular expression: (Feature*)*
        /// </para>
        /// </summary>
        public virtual IList<Feature> Feature {
            get {
                if ((this.FeatureField == null)) {
                    this.FeatureField = new XTypedList<Feature>(this, LinqToXsdTypeManager.Instance, FeatureXName);
                }
                return this.FeatureField;
            }
            set {
                if ((value == null)) {
                    this.FeatureField = null;
                }
                else {
                    if ((this.FeatureField == null)) {
                        this.FeatureField = XTypedList<Feature>.Initialize(this, LinqToXsdTypeManager.Instance, value, FeatureXName);
                    }
                    else {
                        XTypedServices.SetList<Feature>(this.FeatureField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Double? staStart {
            get {
                XAttribute x = this.Attribute(staStartXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetAttribute(staStartXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Double? staEnd {
            get {
                XAttribute x = this.Attribute(staEndXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetAttribute(staEndXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Double? beginFullWidthSta {
            get {
                XAttribute x = this.Attribute(beginFullWidthStaXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetAttribute(beginFullWidthStaXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Double? width {
            get {
                XAttribute x = this.Attribute(widthXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetAttribute(widthXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual LandXml.v1_2.sideofRoadType? sideofRoad {
            get {
                XAttribute x = this.Attribute(sideofRoadXName);
                if ((x == null)) {
                    return null;
                }
                return ((LandXml.v1_2.sideofRoadType)(Enum.Parse(typeof(LandXml.v1_2.sideofRoadType), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetAttribute(sideofRoadXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual LandXml.v1_2.turnLaneType? type {
            get {
                XAttribute x = this.Attribute(typeXName);
                if ((x == null)) {
                    return null;
                }
                return ((LandXml.v1_2.turnLaneType)(Enum.Parse(typeof(LandXml.v1_2.turnLaneType), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetAttribute(typeXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string taperType {
            get {
                XAttribute x = this.Attribute(taperTypeXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(taperTypeXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Double? taperTangentLength {
            get {
                XAttribute x = this.Attribute(taperTangentLengthXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetAttribute(taperTangentLengthXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static TurnLane Load(string xmlFile) {
            return XTypedServices.Load<TurnLane>(xmlFile);
        }
        
        public static TurnLane Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<TurnLane>(xmlFile);
        }
        
        public static TurnLane Parse(string xml) {
            return XTypedServices.Parse<TurnLane>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<TurnLane>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(FeatureXName, typeof(Feature));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Feature*)*
    /// </para>
    /// </summary>
    public partial class TwoWayLeftTurnLane : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName FeatureXName = System.Xml.Linq.XName.Get("Feature", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<Feature> FeatureField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName staStartXName = System.Xml.Linq.XName.Get("staStart", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName staEndXName = System.Xml.Linq.XName.Get("staEnd", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName beginFullWidthStaXName = System.Xml.Linq.XName.Get("beginFullWidthSta", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName endFullWidthStaXName = System.Xml.Linq.XName.Get("endFullWidthSta", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName startOffsetXName = System.Xml.Linq.XName.Get("startOffset", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName endOffsetXName = System.Xml.Linq.XName.Get("endOffset", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName widthXName = System.Xml.Linq.XName.Get("width", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName sideofRoadXName = System.Xml.Linq.XName.Get("sideofRoad", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("TwoWayLeftTurnLane", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator TwoWayLeftTurnLane(XElement xe) { return XTypedServices.ToXTypedElement<TwoWayLeftTurnLane>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static TwoWayLeftTurnLane() {
            BuildElementDictionary();
            contentModel = new ChoiceContentModelEntity(new NamedContentModelEntity(FeatureXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Feature*)*
        /// </para>
        /// </summary>
        public TwoWayLeftTurnLane() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating, choice
        /// </para>
        /// <para>
        /// Regular expression: (Feature*)*
        /// </para>
        /// </summary>
        public virtual IList<Feature> Feature {
            get {
                if ((this.FeatureField == null)) {
                    this.FeatureField = new XTypedList<Feature>(this, LinqToXsdTypeManager.Instance, FeatureXName);
                }
                return this.FeatureField;
            }
            set {
                if ((value == null)) {
                    this.FeatureField = null;
                }
                else {
                    if ((this.FeatureField == null)) {
                        this.FeatureField = XTypedList<Feature>.Initialize(this, LinqToXsdTypeManager.Instance, value, FeatureXName);
                    }
                    else {
                        XTypedServices.SetList<Feature>(this.FeatureField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Double? staStart {
            get {
                XAttribute x = this.Attribute(staStartXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetAttribute(staStartXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Double? staEnd {
            get {
                XAttribute x = this.Attribute(staEndXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetAttribute(staEndXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Double? beginFullWidthSta {
            get {
                XAttribute x = this.Attribute(beginFullWidthStaXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetAttribute(beginFullWidthStaXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Double? endFullWidthSta {
            get {
                XAttribute x = this.Attribute(endFullWidthStaXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetAttribute(endFullWidthStaXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Double? startOffset {
            get {
                XAttribute x = this.Attribute(startOffsetXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetAttribute(startOffsetXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Double? endOffset {
            get {
                XAttribute x = this.Attribute(endOffsetXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetAttribute(endOffsetXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Double? width {
            get {
                XAttribute x = this.Attribute(widthXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetAttribute(widthXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual LandXml.v1_2.sideofRoadType? sideofRoad {
            get {
                XAttribute x = this.Attribute(sideofRoadXName);
                if ((x == null)) {
                    return null;
                }
                return ((LandXml.v1_2.sideofRoadType)(Enum.Parse(typeof(LandXml.v1_2.sideofRoadType), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetAttribute(sideofRoadXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static TwoWayLeftTurnLane Load(string xmlFile) {
            return XTypedServices.Load<TwoWayLeftTurnLane>(xmlFile);
        }
        
        public static TwoWayLeftTurnLane Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<TwoWayLeftTurnLane>(xmlFile);
        }
        
        public static TwoWayLeftTurnLane Parse(string xml) {
            return XTypedServices.Parse<TwoWayLeftTurnLane>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<TwoWayLeftTurnLane>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(FeatureXName, typeof(Feature));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Feature*)*
    /// </para>
    /// </summary>
    public partial class ClimbLane : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName FeatureXName = System.Xml.Linq.XName.Get("Feature", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<Feature> FeatureField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName staStartXName = System.Xml.Linq.XName.Get("staStart", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName staEndXName = System.Xml.Linq.XName.Get("staEnd", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName beginFullWidthStaXName = System.Xml.Linq.XName.Get("beginFullWidthSta", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName endFullWidthStaXName = System.Xml.Linq.XName.Get("endFullWidthSta", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName widthXName = System.Xml.Linq.XName.Get("width", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName sideofRoadXName = System.Xml.Linq.XName.Get("sideofRoad", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("ClimbLane", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator ClimbLane(XElement xe) { return XTypedServices.ToXTypedElement<ClimbLane>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static ClimbLane() {
            BuildElementDictionary();
            contentModel = new ChoiceContentModelEntity(new NamedContentModelEntity(FeatureXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Feature*)*
        /// </para>
        /// </summary>
        public ClimbLane() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating, choice
        /// </para>
        /// <para>
        /// Regular expression: (Feature*)*
        /// </para>
        /// </summary>
        public virtual IList<Feature> Feature {
            get {
                if ((this.FeatureField == null)) {
                    this.FeatureField = new XTypedList<Feature>(this, LinqToXsdTypeManager.Instance, FeatureXName);
                }
                return this.FeatureField;
            }
            set {
                if ((value == null)) {
                    this.FeatureField = null;
                }
                else {
                    if ((this.FeatureField == null)) {
                        this.FeatureField = XTypedList<Feature>.Initialize(this, LinqToXsdTypeManager.Instance, value, FeatureXName);
                    }
                    else {
                        XTypedServices.SetList<Feature>(this.FeatureField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Double? staStart {
            get {
                XAttribute x = this.Attribute(staStartXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetAttribute(staStartXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Double? staEnd {
            get {
                XAttribute x = this.Attribute(staEndXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetAttribute(staEndXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Double? beginFullWidthSta {
            get {
                XAttribute x = this.Attribute(beginFullWidthStaXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetAttribute(beginFullWidthStaXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Double? endFullWidthSta {
            get {
                XAttribute x = this.Attribute(endFullWidthStaXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetAttribute(endFullWidthStaXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Double? width {
            get {
                XAttribute x = this.Attribute(widthXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetAttribute(widthXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual LandXml.v1_2.sideofRoadType? sideofRoad {
            get {
                XAttribute x = this.Attribute(sideofRoadXName);
                if ((x == null)) {
                    return null;
                }
                return ((LandXml.v1_2.sideofRoadType)(Enum.Parse(typeof(LandXml.v1_2.sideofRoadType), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetAttribute(sideofRoadXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static ClimbLane Load(string xmlFile) {
            return XTypedServices.Load<ClimbLane>(xmlFile);
        }
        
        public static ClimbLane Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<ClimbLane>(xmlFile);
        }
        
        public static ClimbLane Parse(string xml) {
            return XTypedServices.Parse<ClimbLane>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ClimbLane>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(FeatureXName, typeof(Feature));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Feature*)*
    /// </para>
    /// </summary>
    public partial class OffsetLane : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName FeatureXName = System.Xml.Linq.XName.Get("Feature", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<Feature> FeatureField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName staStartXName = System.Xml.Linq.XName.Get("staStart", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName staEndXName = System.Xml.Linq.XName.Get("staEnd", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName beginFullWidthStaXName = System.Xml.Linq.XName.Get("beginFullWidthSta", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName endFullWidthStaXName = System.Xml.Linq.XName.Get("endFullWidthSta", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName fullOffsetXName = System.Xml.Linq.XName.Get("fullOffset", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName widthXName = System.Xml.Linq.XName.Get("width", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName sideofRoadXName = System.Xml.Linq.XName.Get("sideofRoad", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("OffsetLane", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator OffsetLane(XElement xe) { return XTypedServices.ToXTypedElement<OffsetLane>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static OffsetLane() {
            BuildElementDictionary();
            contentModel = new ChoiceContentModelEntity(new NamedContentModelEntity(FeatureXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Feature*)*
        /// </para>
        /// </summary>
        public OffsetLane() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating, choice
        /// </para>
        /// <para>
        /// Regular expression: (Feature*)*
        /// </para>
        /// </summary>
        public virtual IList<Feature> Feature {
            get {
                if ((this.FeatureField == null)) {
                    this.FeatureField = new XTypedList<Feature>(this, LinqToXsdTypeManager.Instance, FeatureXName);
                }
                return this.FeatureField;
            }
            set {
                if ((value == null)) {
                    this.FeatureField = null;
                }
                else {
                    if ((this.FeatureField == null)) {
                        this.FeatureField = XTypedList<Feature>.Initialize(this, LinqToXsdTypeManager.Instance, value, FeatureXName);
                    }
                    else {
                        XTypedServices.SetList<Feature>(this.FeatureField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Double? staStart {
            get {
                XAttribute x = this.Attribute(staStartXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetAttribute(staStartXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Double? staEnd {
            get {
                XAttribute x = this.Attribute(staEndXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetAttribute(staEndXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Double? beginFullWidthSta {
            get {
                XAttribute x = this.Attribute(beginFullWidthStaXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetAttribute(beginFullWidthStaXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Double? endFullWidthSta {
            get {
                XAttribute x = this.Attribute(endFullWidthStaXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetAttribute(endFullWidthStaXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Double? fullOffset {
            get {
                XAttribute x = this.Attribute(fullOffsetXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetAttribute(fullOffsetXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Double? width {
            get {
                XAttribute x = this.Attribute(widthXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetAttribute(widthXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual LandXml.v1_2.sideofRoadType? sideofRoad {
            get {
                XAttribute x = this.Attribute(sideofRoadXName);
                if ((x == null)) {
                    return null;
                }
                return ((LandXml.v1_2.sideofRoadType)(Enum.Parse(typeof(LandXml.v1_2.sideofRoadType), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetAttribute(sideofRoadXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static OffsetLane Load(string xmlFile) {
            return XTypedServices.Load<OffsetLane>(xmlFile);
        }
        
        public static OffsetLane Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<OffsetLane>(xmlFile);
        }
        
        public static OffsetLane Parse(string xml) {
            return XTypedServices.Parse<OffsetLane>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<OffsetLane>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(FeatureXName, typeof(Feature));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Feature*)*
    /// </para>
    /// </summary>
    public partial class WideningLane : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName FeatureXName = System.Xml.Linq.XName.Get("Feature", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<Feature> FeatureField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName staStartXName = System.Xml.Linq.XName.Get("staStart", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName staEndXName = System.Xml.Linq.XName.Get("staEnd", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName beginFullWidthStaXName = System.Xml.Linq.XName.Get("beginFullWidthSta", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName endFullWidthStaXName = System.Xml.Linq.XName.Get("endFullWidthSta", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName offsetXName = System.Xml.Linq.XName.Get("offset", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName wideningXName = System.Xml.Linq.XName.Get("widening", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName widthXName = System.Xml.Linq.XName.Get("width", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName sideofRoadXName = System.Xml.Linq.XName.Get("sideofRoad", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("WideningLane", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator WideningLane(XElement xe) { return XTypedServices.ToXTypedElement<WideningLane>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static WideningLane() {
            BuildElementDictionary();
            contentModel = new ChoiceContentModelEntity(new NamedContentModelEntity(FeatureXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Feature*)*
        /// </para>
        /// </summary>
        public WideningLane() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating, choice
        /// </para>
        /// <para>
        /// Regular expression: (Feature*)*
        /// </para>
        /// </summary>
        public virtual IList<Feature> Feature {
            get {
                if ((this.FeatureField == null)) {
                    this.FeatureField = new XTypedList<Feature>(this, LinqToXsdTypeManager.Instance, FeatureXName);
                }
                return this.FeatureField;
            }
            set {
                if ((value == null)) {
                    this.FeatureField = null;
                }
                else {
                    if ((this.FeatureField == null)) {
                        this.FeatureField = XTypedList<Feature>.Initialize(this, LinqToXsdTypeManager.Instance, value, FeatureXName);
                    }
                    else {
                        XTypedServices.SetList<Feature>(this.FeatureField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Double? staStart {
            get {
                XAttribute x = this.Attribute(staStartXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetAttribute(staStartXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Double? staEnd {
            get {
                XAttribute x = this.Attribute(staEndXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetAttribute(staEndXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Double? beginFullWidthSta {
            get {
                XAttribute x = this.Attribute(beginFullWidthStaXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetAttribute(beginFullWidthStaXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Double? endFullWidthSta {
            get {
                XAttribute x = this.Attribute(endFullWidthStaXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetAttribute(endFullWidthStaXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Double? offset {
            get {
                XAttribute x = this.Attribute(offsetXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetAttribute(offsetXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Double? widening {
            get {
                XAttribute x = this.Attribute(wideningXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetAttribute(wideningXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Double? width {
            get {
                XAttribute x = this.Attribute(widthXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetAttribute(widthXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual LandXml.v1_2.sideofRoadType? sideofRoad {
            get {
                XAttribute x = this.Attribute(sideofRoadXName);
                if ((x == null)) {
                    return null;
                }
                return ((LandXml.v1_2.sideofRoadType)(Enum.Parse(typeof(LandXml.v1_2.sideofRoadType), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetAttribute(sideofRoadXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static WideningLane Load(string xmlFile) {
            return XTypedServices.Load<WideningLane>(xmlFile);
        }
        
        public static WideningLane Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<WideningLane>(xmlFile);
        }
        
        public static WideningLane Parse(string xml) {
            return XTypedServices.Parse<WideningLane>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<WideningLane>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(FeatureXName, typeof(Feature));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (ObstructionOffset* | BikeFacilities* | RoadSign* | DrivewayDensity* | HazardRating* | Ditch* | Feature*)*
    /// </para>
    /// </summary>
    public partial class Roadside : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ObstructionOffsetXName = System.Xml.Linq.XName.Get("ObstructionOffset", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ObstructionOffset> ObstructionOffsetField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName BikeFacilitiesXName = System.Xml.Linq.XName.Get("BikeFacilities", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<BikeFacilities> BikeFacilitiesField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName RoadSignXName = System.Xml.Linq.XName.Get("RoadSign", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<RoadSign> RoadSignField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName DrivewayDensityXName = System.Xml.Linq.XName.Get("DrivewayDensity", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<DrivewayDensity> DrivewayDensityField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName HazardRatingXName = System.Xml.Linq.XName.Get("HazardRating", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<HazardRating> HazardRatingField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName DitchXName = System.Xml.Linq.XName.Get("Ditch", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<Ditch> DitchField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName FeatureXName = System.Xml.Linq.XName.Get("Feature", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<Feature> FeatureField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("Roadside", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator Roadside(XElement xe) { return XTypedServices.ToXTypedElement<Roadside>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static Roadside() {
            BuildElementDictionary();
            contentModel = new ChoiceContentModelEntity(new NamedContentModelEntity(ObstructionOffsetXName), new NamedContentModelEntity(BikeFacilitiesXName), new NamedContentModelEntity(RoadSignXName), new NamedContentModelEntity(DrivewayDensityXName), new NamedContentModelEntity(HazardRatingXName), new NamedContentModelEntity(DitchXName), new NamedContentModelEntity(FeatureXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (ObstructionOffset* | BikeFacilities* | RoadSign* | DrivewayDensity* | HazardRating* | Ditch* | Feature*)*
        /// </para>
        /// </summary>
        public Roadside() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating, choice
        /// </para>
        /// <para>
        /// Regular expression: (ObstructionOffset* | BikeFacilities* | RoadSign* | DrivewayDensity* | HazardRating* | Ditch* | Feature*)*
        /// </para>
        /// </summary>
        public virtual IList<ObstructionOffset> ObstructionOffset {
            get {
                if ((this.ObstructionOffsetField == null)) {
                    this.ObstructionOffsetField = new XTypedList<ObstructionOffset>(this, LinqToXsdTypeManager.Instance, ObstructionOffsetXName);
                }
                return this.ObstructionOffsetField;
            }
            set {
                if ((value == null)) {
                    this.ObstructionOffsetField = null;
                }
                else {
                    if ((this.ObstructionOffsetField == null)) {
                        this.ObstructionOffsetField = XTypedList<ObstructionOffset>.Initialize(this, LinqToXsdTypeManager.Instance, value, ObstructionOffsetXName);
                    }
                    else {
                        XTypedServices.SetList<ObstructionOffset>(this.ObstructionOffsetField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating, choice
        /// </para>
        /// <para>
        /// Regular expression: (ObstructionOffset* | BikeFacilities* | RoadSign* | DrivewayDensity* | HazardRating* | Ditch* | Feature*)*
        /// </para>
        /// </summary>
        public virtual IList<BikeFacilities> BikeFacilities {
            get {
                if ((this.BikeFacilitiesField == null)) {
                    this.BikeFacilitiesField = new XTypedList<BikeFacilities>(this, LinqToXsdTypeManager.Instance, BikeFacilitiesXName);
                }
                return this.BikeFacilitiesField;
            }
            set {
                if ((value == null)) {
                    this.BikeFacilitiesField = null;
                }
                else {
                    if ((this.BikeFacilitiesField == null)) {
                        this.BikeFacilitiesField = XTypedList<BikeFacilities>.Initialize(this, LinqToXsdTypeManager.Instance, value, BikeFacilitiesXName);
                    }
                    else {
                        XTypedServices.SetList<BikeFacilities>(this.BikeFacilitiesField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating, choice
        /// </para>
        /// <para>
        /// Regular expression: (ObstructionOffset* | BikeFacilities* | RoadSign* | DrivewayDensity* | HazardRating* | Ditch* | Feature*)*
        /// </para>
        /// </summary>
        public virtual IList<RoadSign> RoadSign {
            get {
                if ((this.RoadSignField == null)) {
                    this.RoadSignField = new XTypedList<RoadSign>(this, LinqToXsdTypeManager.Instance, RoadSignXName);
                }
                return this.RoadSignField;
            }
            set {
                if ((value == null)) {
                    this.RoadSignField = null;
                }
                else {
                    if ((this.RoadSignField == null)) {
                        this.RoadSignField = XTypedList<RoadSign>.Initialize(this, LinqToXsdTypeManager.Instance, value, RoadSignXName);
                    }
                    else {
                        XTypedServices.SetList<RoadSign>(this.RoadSignField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating, choice
        /// </para>
        /// <para>
        /// Regular expression: (ObstructionOffset* | BikeFacilities* | RoadSign* | DrivewayDensity* | HazardRating* | Ditch* | Feature*)*
        /// </para>
        /// </summary>
        public virtual IList<DrivewayDensity> DrivewayDensity {
            get {
                if ((this.DrivewayDensityField == null)) {
                    this.DrivewayDensityField = new XTypedList<DrivewayDensity>(this, LinqToXsdTypeManager.Instance, DrivewayDensityXName);
                }
                return this.DrivewayDensityField;
            }
            set {
                if ((value == null)) {
                    this.DrivewayDensityField = null;
                }
                else {
                    if ((this.DrivewayDensityField == null)) {
                        this.DrivewayDensityField = XTypedList<DrivewayDensity>.Initialize(this, LinqToXsdTypeManager.Instance, value, DrivewayDensityXName);
                    }
                    else {
                        XTypedServices.SetList<DrivewayDensity>(this.DrivewayDensityField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating, choice
        /// </para>
        /// <para>
        /// Regular expression: (ObstructionOffset* | BikeFacilities* | RoadSign* | DrivewayDensity* | HazardRating* | Ditch* | Feature*)*
        /// </para>
        /// </summary>
        public virtual IList<HazardRating> HazardRating {
            get {
                if ((this.HazardRatingField == null)) {
                    this.HazardRatingField = new XTypedList<HazardRating>(this, LinqToXsdTypeManager.Instance, HazardRatingXName);
                }
                return this.HazardRatingField;
            }
            set {
                if ((value == null)) {
                    this.HazardRatingField = null;
                }
                else {
                    if ((this.HazardRatingField == null)) {
                        this.HazardRatingField = XTypedList<HazardRating>.Initialize(this, LinqToXsdTypeManager.Instance, value, HazardRatingXName);
                    }
                    else {
                        XTypedServices.SetList<HazardRating>(this.HazardRatingField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating, choice
        /// </para>
        /// <para>
        /// Regular expression: (ObstructionOffset* | BikeFacilities* | RoadSign* | DrivewayDensity* | HazardRating* | Ditch* | Feature*)*
        /// </para>
        /// </summary>
        public virtual IList<Ditch> Ditch {
            get {
                if ((this.DitchField == null)) {
                    this.DitchField = new XTypedList<Ditch>(this, LinqToXsdTypeManager.Instance, DitchXName);
                }
                return this.DitchField;
            }
            set {
                if ((value == null)) {
                    this.DitchField = null;
                }
                else {
                    if ((this.DitchField == null)) {
                        this.DitchField = XTypedList<Ditch>.Initialize(this, LinqToXsdTypeManager.Instance, value, DitchXName);
                    }
                    else {
                        XTypedServices.SetList<Ditch>(this.DitchField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating, choice
        /// </para>
        /// <para>
        /// Regular expression: (ObstructionOffset* | BikeFacilities* | RoadSign* | DrivewayDensity* | HazardRating* | Ditch* | Feature*)*
        /// </para>
        /// </summary>
        public virtual IList<Feature> Feature {
            get {
                if ((this.FeatureField == null)) {
                    this.FeatureField = new XTypedList<Feature>(this, LinqToXsdTypeManager.Instance, FeatureXName);
                }
                return this.FeatureField;
            }
            set {
                if ((value == null)) {
                    this.FeatureField = null;
                }
                else {
                    if ((this.FeatureField == null)) {
                        this.FeatureField = XTypedList<Feature>.Initialize(this, LinqToXsdTypeManager.Instance, value, FeatureXName);
                    }
                    else {
                        XTypedServices.SetList<Feature>(this.FeatureField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static Roadside Load(string xmlFile) {
            return XTypedServices.Load<Roadside>(xmlFile);
        }
        
        public static Roadside Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<Roadside>(xmlFile);
        }
        
        public static Roadside Parse(string xml) {
            return XTypedServices.Parse<Roadside>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<Roadside>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(ObstructionOffsetXName, typeof(ObstructionOffset));
            localElementDictionary.Add(BikeFacilitiesXName, typeof(BikeFacilities));
            localElementDictionary.Add(RoadSignXName, typeof(RoadSign));
            localElementDictionary.Add(DrivewayDensityXName, typeof(DrivewayDensity));
            localElementDictionary.Add(HazardRatingXName, typeof(HazardRating));
            localElementDictionary.Add(DitchXName, typeof(Ditch));
            localElementDictionary.Add(FeatureXName, typeof(Feature));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Feature*)*
    /// </para>
    /// </summary>
    public partial class Ditch : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName FeatureXName = System.Xml.Linq.XName.Get("Feature", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<Feature> FeatureField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName staStartXName = System.Xml.Linq.XName.Get("staStart", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName staEndXName = System.Xml.Linq.XName.Get("staEnd", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName bottomWidthXName = System.Xml.Linq.XName.Get("bottomWidth", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName bottomShapeXName = System.Xml.Linq.XName.Get("bottomShape", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("Ditch", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator Ditch(XElement xe) { return XTypedServices.ToXTypedElement<Ditch>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static Ditch() {
            BuildElementDictionary();
            contentModel = new ChoiceContentModelEntity(new NamedContentModelEntity(FeatureXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Feature*)*
        /// </para>
        /// </summary>
        public Ditch() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating, choice
        /// </para>
        /// <para>
        /// Regular expression: (Feature*)*
        /// </para>
        /// </summary>
        public virtual IList<Feature> Feature {
            get {
                if ((this.FeatureField == null)) {
                    this.FeatureField = new XTypedList<Feature>(this, LinqToXsdTypeManager.Instance, FeatureXName);
                }
                return this.FeatureField;
            }
            set {
                if ((value == null)) {
                    this.FeatureField = null;
                }
                else {
                    if ((this.FeatureField == null)) {
                        this.FeatureField = XTypedList<Feature>.Initialize(this, LinqToXsdTypeManager.Instance, value, FeatureXName);
                    }
                    else {
                        XTypedServices.SetList<Feature>(this.FeatureField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual double staStart {
            get {
                XAttribute x = this.Attribute(staStartXName);
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetAttribute(staStartXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual double staEnd {
            get {
                XAttribute x = this.Attribute(staEndXName);
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetAttribute(staEndXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual double bottomWidth {
            get {
                XAttribute x = this.Attribute(bottomWidthXName);
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetAttribute(bottomWidthXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string bottomShape {
            get {
                XAttribute x = this.Attribute(bottomShapeXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(bottomShapeXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static Ditch Load(string xmlFile) {
            return XTypedServices.Load<Ditch>(xmlFile);
        }
        
        public static Ditch Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<Ditch>(xmlFile);
        }
        
        public static Ditch Parse(string xml) {
            return XTypedServices.Parse<Ditch>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<Ditch>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(FeatureXName, typeof(Feature));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Feature*)*
    /// </para>
    /// </summary>
    public partial class ObstructionOffset : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName FeatureXName = System.Xml.Linq.XName.Get("Feature", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<Feature> FeatureField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName staStartXName = System.Xml.Linq.XName.Get("staStart", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName staEndXName = System.Xml.Linq.XName.Get("staEnd", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName offsetXName = System.Xml.Linq.XName.Get("offset", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName sideofRoadXName = System.Xml.Linq.XName.Get("sideofRoad", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("ObstructionOffset", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator ObstructionOffset(XElement xe) { return XTypedServices.ToXTypedElement<ObstructionOffset>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static ObstructionOffset() {
            BuildElementDictionary();
            contentModel = new ChoiceContentModelEntity(new NamedContentModelEntity(FeatureXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Feature*)*
        /// </para>
        /// </summary>
        public ObstructionOffset() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating, choice
        /// </para>
        /// <para>
        /// Regular expression: (Feature*)*
        /// </para>
        /// </summary>
        public virtual IList<Feature> Feature {
            get {
                if ((this.FeatureField == null)) {
                    this.FeatureField = new XTypedList<Feature>(this, LinqToXsdTypeManager.Instance, FeatureXName);
                }
                return this.FeatureField;
            }
            set {
                if ((value == null)) {
                    this.FeatureField = null;
                }
                else {
                    if ((this.FeatureField == null)) {
                        this.FeatureField = XTypedList<Feature>.Initialize(this, LinqToXsdTypeManager.Instance, value, FeatureXName);
                    }
                    else {
                        XTypedServices.SetList<Feature>(this.FeatureField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Double? staStart {
            get {
                XAttribute x = this.Attribute(staStartXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetAttribute(staStartXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Double? staEnd {
            get {
                XAttribute x = this.Attribute(staEndXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetAttribute(staEndXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Double? offset {
            get {
                XAttribute x = this.Attribute(offsetXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetAttribute(offsetXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual LandXml.v1_2.sideofRoadType? sideofRoad {
            get {
                XAttribute x = this.Attribute(sideofRoadXName);
                if ((x == null)) {
                    return null;
                }
                return ((LandXml.v1_2.sideofRoadType)(Enum.Parse(typeof(LandXml.v1_2.sideofRoadType), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetAttribute(sideofRoadXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static ObstructionOffset Load(string xmlFile) {
            return XTypedServices.Load<ObstructionOffset>(xmlFile);
        }
        
        public static ObstructionOffset Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<ObstructionOffset>(xmlFile);
        }
        
        public static ObstructionOffset Parse(string xml) {
            return XTypedServices.Parse<ObstructionOffset>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ObstructionOffset>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(FeatureXName, typeof(Feature));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Feature*)*
    /// </para>
    /// </summary>
    public partial class BikeFacilities : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName FeatureXName = System.Xml.Linq.XName.Get("Feature", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<Feature> FeatureField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName staStartXName = System.Xml.Linq.XName.Get("staStart", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName staEndXName = System.Xml.Linq.XName.Get("staEnd", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName widthXName = System.Xml.Linq.XName.Get("width", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName sideofRoadXName = System.Xml.Linq.XName.Get("sideofRoad", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("BikeFacilities", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator BikeFacilities(XElement xe) { return XTypedServices.ToXTypedElement<BikeFacilities>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static BikeFacilities() {
            BuildElementDictionary();
            contentModel = new ChoiceContentModelEntity(new NamedContentModelEntity(FeatureXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Feature*)*
        /// </para>
        /// </summary>
        public BikeFacilities() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating, choice
        /// </para>
        /// <para>
        /// Regular expression: (Feature*)*
        /// </para>
        /// </summary>
        public virtual IList<Feature> Feature {
            get {
                if ((this.FeatureField == null)) {
                    this.FeatureField = new XTypedList<Feature>(this, LinqToXsdTypeManager.Instance, FeatureXName);
                }
                return this.FeatureField;
            }
            set {
                if ((value == null)) {
                    this.FeatureField = null;
                }
                else {
                    if ((this.FeatureField == null)) {
                        this.FeatureField = XTypedList<Feature>.Initialize(this, LinqToXsdTypeManager.Instance, value, FeatureXName);
                    }
                    else {
                        XTypedServices.SetList<Feature>(this.FeatureField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Double? staStart {
            get {
                XAttribute x = this.Attribute(staStartXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetAttribute(staStartXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Double? staEnd {
            get {
                XAttribute x = this.Attribute(staEndXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetAttribute(staEndXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Double? width {
            get {
                XAttribute x = this.Attribute(widthXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetAttribute(widthXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual LandXml.v1_2.sideofRoadType? sideofRoad {
            get {
                XAttribute x = this.Attribute(sideofRoadXName);
                if ((x == null)) {
                    return null;
                }
                return ((LandXml.v1_2.sideofRoadType)(Enum.Parse(typeof(LandXml.v1_2.sideofRoadType), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetAttribute(sideofRoadXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static BikeFacilities Load(string xmlFile) {
            return XTypedServices.Load<BikeFacilities>(xmlFile);
        }
        
        public static BikeFacilities Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<BikeFacilities>(xmlFile);
        }
        
        public static BikeFacilities Parse(string xml) {
            return XTypedServices.Parse<BikeFacilities>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<BikeFacilities>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(FeatureXName, typeof(Feature));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Feature*)*
    /// </para>
    /// </summary>
    public partial class RoadSign : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName FeatureXName = System.Xml.Linq.XName.Get("Feature", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<Feature> FeatureField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName MUTCDCodeXName = System.Xml.Linq.XName.Get("MUTCDCode", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName stationXName = System.Xml.Linq.XName.Get("station", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName offsetXName = System.Xml.Linq.XName.Get("offset", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName sideofRoadXName = System.Xml.Linq.XName.Get("sideofRoad", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName typeXName = System.Xml.Linq.XName.Get("type", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName mountHeightXName = System.Xml.Linq.XName.Get("mountHeight", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName widthXName = System.Xml.Linq.XName.Get("width", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName heightXName = System.Xml.Linq.XName.Get("height", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("RoadSign", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator RoadSign(XElement xe) { return XTypedServices.ToXTypedElement<RoadSign>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static RoadSign() {
            BuildElementDictionary();
            contentModel = new ChoiceContentModelEntity(new NamedContentModelEntity(FeatureXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Feature*)*
        /// </para>
        /// </summary>
        public RoadSign() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating, choice
        /// </para>
        /// <para>
        /// Regular expression: (Feature*)*
        /// </para>
        /// </summary>
        public virtual IList<Feature> Feature {
            get {
                if ((this.FeatureField == null)) {
                    this.FeatureField = new XTypedList<Feature>(this, LinqToXsdTypeManager.Instance, FeatureXName);
                }
                return this.FeatureField;
            }
            set {
                if ((value == null)) {
                    this.FeatureField = null;
                }
                else {
                    if ((this.FeatureField == null)) {
                        this.FeatureField = XTypedList<Feature>.Initialize(this, LinqToXsdTypeManager.Instance, value, FeatureXName);
                    }
                    else {
                        XTypedServices.SetList<Feature>(this.FeatureField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string MUTCDCode {
            get {
                XAttribute x = this.Attribute(MUTCDCodeXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(MUTCDCodeXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Double? station {
            get {
                XAttribute x = this.Attribute(stationXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetAttribute(stationXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Double? offset {
            get {
                XAttribute x = this.Attribute(offsetXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetAttribute(offsetXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual LandXml.v1_2.sideofRoadType? sideofRoad {
            get {
                XAttribute x = this.Attribute(sideofRoadXName);
                if ((x == null)) {
                    return null;
                }
                return ((LandXml.v1_2.sideofRoadType)(Enum.Parse(typeof(LandXml.v1_2.sideofRoadType), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetAttribute(sideofRoadXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string type {
            get {
                XAttribute x = this.Attribute(typeXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(typeXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Double? mountHeight {
            get {
                XAttribute x = this.Attribute(mountHeightXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetAttribute(mountHeightXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Double? width {
            get {
                XAttribute x = this.Attribute(widthXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetAttribute(widthXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Double? height {
            get {
                XAttribute x = this.Attribute(heightXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetAttribute(heightXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static RoadSign Load(string xmlFile) {
            return XTypedServices.Load<RoadSign>(xmlFile);
        }
        
        public static RoadSign Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<RoadSign>(xmlFile);
        }
        
        public static RoadSign Parse(string xml) {
            return XTypedServices.Parse<RoadSign>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<RoadSign>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(FeatureXName, typeof(Feature));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Feature*)*
    /// </para>
    /// </summary>
    public partial class DrivewayDensity : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName FeatureXName = System.Xml.Linq.XName.Get("Feature", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<Feature> FeatureField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName staStartXName = System.Xml.Linq.XName.Get("staStart", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName staEndXName = System.Xml.Linq.XName.Get("staEnd", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName densityXName = System.Xml.Linq.XName.Get("density", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("DrivewayDensity", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator DrivewayDensity(XElement xe) { return XTypedServices.ToXTypedElement<DrivewayDensity>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static DrivewayDensity() {
            BuildElementDictionary();
            contentModel = new ChoiceContentModelEntity(new NamedContentModelEntity(FeatureXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Feature*)*
        /// </para>
        /// </summary>
        public DrivewayDensity() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating, choice
        /// </para>
        /// <para>
        /// Regular expression: (Feature*)*
        /// </para>
        /// </summary>
        public virtual IList<Feature> Feature {
            get {
                if ((this.FeatureField == null)) {
                    this.FeatureField = new XTypedList<Feature>(this, LinqToXsdTypeManager.Instance, FeatureXName);
                }
                return this.FeatureField;
            }
            set {
                if ((value == null)) {
                    this.FeatureField = null;
                }
                else {
                    if ((this.FeatureField == null)) {
                        this.FeatureField = XTypedList<Feature>.Initialize(this, LinqToXsdTypeManager.Instance, value, FeatureXName);
                    }
                    else {
                        XTypedServices.SetList<Feature>(this.FeatureField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Double? staStart {
            get {
                XAttribute x = this.Attribute(staStartXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetAttribute(staStartXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Double? staEnd {
            get {
                XAttribute x = this.Attribute(staEndXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetAttribute(staEndXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Int32? density {
            get {
                XAttribute x = this.Attribute(densityXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<int>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
            set {
                this.SetAttribute(densityXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static DrivewayDensity Load(string xmlFile) {
            return XTypedServices.Load<DrivewayDensity>(xmlFile);
        }
        
        public static DrivewayDensity Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<DrivewayDensity>(xmlFile);
        }
        
        public static DrivewayDensity Parse(string xml) {
            return XTypedServices.Parse<DrivewayDensity>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<DrivewayDensity>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(FeatureXName, typeof(Feature));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Feature*)*
    /// </para>
    /// </summary>
    public partial class HazardRating : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName FeatureXName = System.Xml.Linq.XName.Get("Feature", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<Feature> FeatureField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName staStartXName = System.Xml.Linq.XName.Get("staStart", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName staEndXName = System.Xml.Linq.XName.Get("staEnd", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ratingXName = System.Xml.Linq.XName.Get("rating", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("HazardRating", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator HazardRating(XElement xe) { return XTypedServices.ToXTypedElement<HazardRating>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static HazardRating() {
            BuildElementDictionary();
            contentModel = new ChoiceContentModelEntity(new NamedContentModelEntity(FeatureXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Feature*)*
        /// </para>
        /// </summary>
        public HazardRating() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating, choice
        /// </para>
        /// <para>
        /// Regular expression: (Feature*)*
        /// </para>
        /// </summary>
        public virtual IList<Feature> Feature {
            get {
                if ((this.FeatureField == null)) {
                    this.FeatureField = new XTypedList<Feature>(this, LinqToXsdTypeManager.Instance, FeatureXName);
                }
                return this.FeatureField;
            }
            set {
                if ((value == null)) {
                    this.FeatureField = null;
                }
                else {
                    if ((this.FeatureField == null)) {
                        this.FeatureField = XTypedList<Feature>.Initialize(this, LinqToXsdTypeManager.Instance, value, FeatureXName);
                    }
                    else {
                        XTypedServices.SetList<Feature>(this.FeatureField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Double? staStart {
            get {
                XAttribute x = this.Attribute(staStartXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetAttribute(staStartXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Double? staEnd {
            get {
                XAttribute x = this.Attribute(staEndXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetAttribute(staEndXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Int32? rating {
            get {
                XAttribute x = this.Attribute(ratingXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<int>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
            set {
                this.SetAttribute(ratingXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static HazardRating Load(string xmlFile) {
            return XTypedServices.Load<HazardRating>(xmlFile);
        }
        
        public static HazardRating Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<HazardRating>(xmlFile);
        }
        
        public static HazardRating Parse(string xml) {
            return XTypedServices.Parse<HazardRating>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<HazardRating>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(FeatureXName, typeof(Feature));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Intersection* | Feature*)+
    /// </para>
    /// </summary>
    public partial class Intersections : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName IntersectionXName = System.Xml.Linq.XName.Get("Intersection", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<Intersection> IntersectionField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName FeatureXName = System.Xml.Linq.XName.Get("Feature", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<Feature> FeatureField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("Intersections", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator Intersections(XElement xe) { return XTypedServices.ToXTypedElement<Intersections>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static Intersections() {
            BuildElementDictionary();
            contentModel = new ChoiceContentModelEntity(new NamedContentModelEntity(IntersectionXName), new NamedContentModelEntity(FeatureXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Intersection* | Feature*)+
        /// </para>
        /// </summary>
        public Intersections() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating, choice
        /// </para>
        /// <para>
        /// Regular expression: (Intersection* | Feature*)+
        /// </para>
        /// </summary>
        public virtual IList<Intersection> Intersection {
            get {
                if ((this.IntersectionField == null)) {
                    this.IntersectionField = new XTypedList<Intersection>(this, LinqToXsdTypeManager.Instance, IntersectionXName);
                }
                return this.IntersectionField;
            }
            set {
                if ((value == null)) {
                    this.IntersectionField = null;
                }
                else {
                    if ((this.IntersectionField == null)) {
                        this.IntersectionField = XTypedList<Intersection>.Initialize(this, LinqToXsdTypeManager.Instance, value, IntersectionXName);
                    }
                    else {
                        XTypedServices.SetList<Intersection>(this.IntersectionField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating, choice
        /// </para>
        /// <para>
        /// Regular expression: (Intersection* | Feature*)+
        /// </para>
        /// </summary>
        public virtual IList<Feature> Feature {
            get {
                if ((this.FeatureField == null)) {
                    this.FeatureField = new XTypedList<Feature>(this, LinqToXsdTypeManager.Instance, FeatureXName);
                }
                return this.FeatureField;
            }
            set {
                if ((value == null)) {
                    this.FeatureField = null;
                }
                else {
                    if ((this.FeatureField == null)) {
                        this.FeatureField = XTypedList<Feature>.Initialize(this, LinqToXsdTypeManager.Instance, value, FeatureXName);
                    }
                    else {
                        XTypedServices.SetList<Feature>(this.FeatureField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static Intersections Load(string xmlFile) {
            return XTypedServices.Load<Intersections>(xmlFile);
        }
        
        public static Intersections Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<Intersections>(xmlFile);
        }
        
        public static Intersections Parse(string xml) {
            return XTypedServices.Parse<Intersections>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<Intersections>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(IntersectionXName, typeof(Intersection));
            localElementDictionary.Add(FeatureXName, typeof(Feature));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (TrafficControl* | Timing* | Volume* | TurnSpeed* | TurnRestriction* | Curb* | Corner* | Feature*)*
    /// </para>
    /// </summary>
    public partial class Intersection : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TrafficControlXName = System.Xml.Linq.XName.Get("TrafficControl", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<TrafficControl> TrafficControlField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TimingXName = System.Xml.Linq.XName.Get("Timing", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<Timing> TimingField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName VolumeXName = System.Xml.Linq.XName.Get("Volume", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<Volume> VolumeField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TurnSpeedXName = System.Xml.Linq.XName.Get("TurnSpeed", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<TurnSpeed> TurnSpeedField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TurnRestrictionXName = System.Xml.Linq.XName.Get("TurnRestriction", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<TurnRestriction> TurnRestrictionField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName CurbXName = System.Xml.Linq.XName.Get("Curb", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<Curb> CurbField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName CornerXName = System.Xml.Linq.XName.Get("Corner", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<Corner> CornerField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName FeatureXName = System.Xml.Linq.XName.Get("Feature", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<Feature> FeatureField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName roadwayRefXName = System.Xml.Linq.XName.Get("roadwayRef", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName roadwayPIXName = System.Xml.Linq.XName.Get("roadwayPI", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName intersectingRoadwayRefXName = System.Xml.Linq.XName.Get("intersectingRoadwayRef", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName intersectRoadwayPIXName = System.Xml.Linq.XName.Get("intersectRoadwayPI", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName contructionTypeXName = System.Xml.Linq.XName.Get("contructionType", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("Intersection", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator Intersection(XElement xe) { return XTypedServices.ToXTypedElement<Intersection>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static Intersection() {
            BuildElementDictionary();
            contentModel = new ChoiceContentModelEntity(new NamedContentModelEntity(TrafficControlXName), new NamedContentModelEntity(TimingXName), new NamedContentModelEntity(VolumeXName), new NamedContentModelEntity(TurnSpeedXName), new NamedContentModelEntity(TurnRestrictionXName), new NamedContentModelEntity(CurbXName), new NamedContentModelEntity(CornerXName), new NamedContentModelEntity(FeatureXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (TrafficControl* | Timing* | Volume* | TurnSpeed* | TurnRestriction* | Curb* | Corner* | Feature*)*
        /// </para>
        /// </summary>
        public Intersection() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating, choice
        /// </para>
        /// <para>
        /// Regular expression: (TrafficControl* | Timing* | Volume* | TurnSpeed* | TurnRestriction* | Curb* | Corner* | Feature*)*
        /// </para>
        /// </summary>
        public virtual IList<TrafficControl> TrafficControl {
            get {
                if ((this.TrafficControlField == null)) {
                    this.TrafficControlField = new XTypedList<TrafficControl>(this, LinqToXsdTypeManager.Instance, TrafficControlXName);
                }
                return this.TrafficControlField;
            }
            set {
                if ((value == null)) {
                    this.TrafficControlField = null;
                }
                else {
                    if ((this.TrafficControlField == null)) {
                        this.TrafficControlField = XTypedList<TrafficControl>.Initialize(this, LinqToXsdTypeManager.Instance, value, TrafficControlXName);
                    }
                    else {
                        XTypedServices.SetList<TrafficControl>(this.TrafficControlField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating, choice
        /// </para>
        /// <para>
        /// Regular expression: (TrafficControl* | Timing* | Volume* | TurnSpeed* | TurnRestriction* | Curb* | Corner* | Feature*)*
        /// </para>
        /// </summary>
        public virtual IList<Timing> Timing {
            get {
                if ((this.TimingField == null)) {
                    this.TimingField = new XTypedList<Timing>(this, LinqToXsdTypeManager.Instance, TimingXName);
                }
                return this.TimingField;
            }
            set {
                if ((value == null)) {
                    this.TimingField = null;
                }
                else {
                    if ((this.TimingField == null)) {
                        this.TimingField = XTypedList<Timing>.Initialize(this, LinqToXsdTypeManager.Instance, value, TimingXName);
                    }
                    else {
                        XTypedServices.SetList<Timing>(this.TimingField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating, choice
        /// </para>
        /// <para>
        /// Regular expression: (TrafficControl* | Timing* | Volume* | TurnSpeed* | TurnRestriction* | Curb* | Corner* | Feature*)*
        /// </para>
        /// </summary>
        public virtual IList<Volume> Volume {
            get {
                if ((this.VolumeField == null)) {
                    this.VolumeField = new XTypedList<Volume>(this, LinqToXsdTypeManager.Instance, VolumeXName);
                }
                return this.VolumeField;
            }
            set {
                if ((value == null)) {
                    this.VolumeField = null;
                }
                else {
                    if ((this.VolumeField == null)) {
                        this.VolumeField = XTypedList<Volume>.Initialize(this, LinqToXsdTypeManager.Instance, value, VolumeXName);
                    }
                    else {
                        XTypedServices.SetList<Volume>(this.VolumeField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating, choice
        /// </para>
        /// <para>
        /// Regular expression: (TrafficControl* | Timing* | Volume* | TurnSpeed* | TurnRestriction* | Curb* | Corner* | Feature*)*
        /// </para>
        /// </summary>
        public virtual IList<TurnSpeed> TurnSpeed {
            get {
                if ((this.TurnSpeedField == null)) {
                    this.TurnSpeedField = new XTypedList<TurnSpeed>(this, LinqToXsdTypeManager.Instance, TurnSpeedXName);
                }
                return this.TurnSpeedField;
            }
            set {
                if ((value == null)) {
                    this.TurnSpeedField = null;
                }
                else {
                    if ((this.TurnSpeedField == null)) {
                        this.TurnSpeedField = XTypedList<TurnSpeed>.Initialize(this, LinqToXsdTypeManager.Instance, value, TurnSpeedXName);
                    }
                    else {
                        XTypedServices.SetList<TurnSpeed>(this.TurnSpeedField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating, choice
        /// </para>
        /// <para>
        /// Regular expression: (TrafficControl* | Timing* | Volume* | TurnSpeed* | TurnRestriction* | Curb* | Corner* | Feature*)*
        /// </para>
        /// </summary>
        public virtual IList<TurnRestriction> TurnRestriction {
            get {
                if ((this.TurnRestrictionField == null)) {
                    this.TurnRestrictionField = new XTypedList<TurnRestriction>(this, LinqToXsdTypeManager.Instance, TurnRestrictionXName);
                }
                return this.TurnRestrictionField;
            }
            set {
                if ((value == null)) {
                    this.TurnRestrictionField = null;
                }
                else {
                    if ((this.TurnRestrictionField == null)) {
                        this.TurnRestrictionField = XTypedList<TurnRestriction>.Initialize(this, LinqToXsdTypeManager.Instance, value, TurnRestrictionXName);
                    }
                    else {
                        XTypedServices.SetList<TurnRestriction>(this.TurnRestrictionField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating, choice
        /// </para>
        /// <para>
        /// Regular expression: (TrafficControl* | Timing* | Volume* | TurnSpeed* | TurnRestriction* | Curb* | Corner* | Feature*)*
        /// </para>
        /// </summary>
        public virtual IList<Curb> Curb {
            get {
                if ((this.CurbField == null)) {
                    this.CurbField = new XTypedList<Curb>(this, LinqToXsdTypeManager.Instance, CurbXName);
                }
                return this.CurbField;
            }
            set {
                if ((value == null)) {
                    this.CurbField = null;
                }
                else {
                    if ((this.CurbField == null)) {
                        this.CurbField = XTypedList<Curb>.Initialize(this, LinqToXsdTypeManager.Instance, value, CurbXName);
                    }
                    else {
                        XTypedServices.SetList<Curb>(this.CurbField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating, choice
        /// </para>
        /// <para>
        /// Regular expression: (TrafficControl* | Timing* | Volume* | TurnSpeed* | TurnRestriction* | Curb* | Corner* | Feature*)*
        /// </para>
        /// </summary>
        public virtual IList<Corner> Corner {
            get {
                if ((this.CornerField == null)) {
                    this.CornerField = new XTypedList<Corner>(this, LinqToXsdTypeManager.Instance, CornerXName);
                }
                return this.CornerField;
            }
            set {
                if ((value == null)) {
                    this.CornerField = null;
                }
                else {
                    if ((this.CornerField == null)) {
                        this.CornerField = XTypedList<Corner>.Initialize(this, LinqToXsdTypeManager.Instance, value, CornerXName);
                    }
                    else {
                        XTypedServices.SetList<Corner>(this.CornerField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating, choice
        /// </para>
        /// <para>
        /// Regular expression: (TrafficControl* | Timing* | Volume* | TurnSpeed* | TurnRestriction* | Curb* | Corner* | Feature*)*
        /// </para>
        /// </summary>
        public virtual IList<Feature> Feature {
            get {
                if ((this.FeatureField == null)) {
                    this.FeatureField = new XTypedList<Feature>(this, LinqToXsdTypeManager.Instance, FeatureXName);
                }
                return this.FeatureField;
            }
            set {
                if ((value == null)) {
                    this.FeatureField = null;
                }
                else {
                    if ((this.FeatureField == null)) {
                        this.FeatureField = XTypedList<Feature>.Initialize(this, LinqToXsdTypeManager.Instance, value, FeatureXName);
                    }
                    else {
                        XTypedServices.SetList<Feature>(this.FeatureField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string roadwayRef {
            get {
                XAttribute x = this.Attribute(roadwayRefXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(roadwayRefXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Double? roadwayPI {
            get {
                XAttribute x = this.Attribute(roadwayPIXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetAttribute(roadwayPIXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string intersectingRoadwayRef {
            get {
                XAttribute x = this.Attribute(intersectingRoadwayRefXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(intersectingRoadwayRefXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Double? intersectRoadwayPI {
            get {
                XAttribute x = this.Attribute(intersectRoadwayPIXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetAttribute(intersectRoadwayPIXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string contructionType {
            get {
                XAttribute x = this.Attribute(contructionTypeXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(contructionTypeXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static Intersection Load(string xmlFile) {
            return XTypedServices.Load<Intersection>(xmlFile);
        }
        
        public static Intersection Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<Intersection>(xmlFile);
        }
        
        public static Intersection Parse(string xml) {
            return XTypedServices.Parse<Intersection>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<Intersection>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(TrafficControlXName, typeof(TrafficControl));
            localElementDictionary.Add(TimingXName, typeof(Timing));
            localElementDictionary.Add(VolumeXName, typeof(Volume));
            localElementDictionary.Add(TurnSpeedXName, typeof(TurnSpeed));
            localElementDictionary.Add(TurnRestrictionXName, typeof(TurnRestriction));
            localElementDictionary.Add(CurbXName, typeof(Curb));
            localElementDictionary.Add(CornerXName, typeof(Corner));
            localElementDictionary.Add(FeatureXName, typeof(Feature));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Feature*)*
    /// </para>
    /// </summary>
    public partial class TrafficControl : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName FeatureXName = System.Xml.Linq.XName.Get("Feature", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<Feature> FeatureField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName stationXName = System.Xml.Linq.XName.Get("station", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName signalPeriodXName = System.Xml.Linq.XName.Get("signalPeriod", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName controlPositionXName = System.Xml.Linq.XName.Get("controlPosition", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName controlTypeXName = System.Xml.Linq.XName.Get("controlType", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("TrafficControl", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator TrafficControl(XElement xe) { return XTypedServices.ToXTypedElement<TrafficControl>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static TrafficControl() {
            BuildElementDictionary();
            contentModel = new ChoiceContentModelEntity(new NamedContentModelEntity(FeatureXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Feature*)*
        /// </para>
        /// </summary>
        public TrafficControl() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating, choice
        /// </para>
        /// <para>
        /// Regular expression: (Feature*)*
        /// </para>
        /// </summary>
        public virtual IList<Feature> Feature {
            get {
                if ((this.FeatureField == null)) {
                    this.FeatureField = new XTypedList<Feature>(this, LinqToXsdTypeManager.Instance, FeatureXName);
                }
                return this.FeatureField;
            }
            set {
                if ((value == null)) {
                    this.FeatureField = null;
                }
                else {
                    if ((this.FeatureField == null)) {
                        this.FeatureField = XTypedList<Feature>.Initialize(this, LinqToXsdTypeManager.Instance, value, FeatureXName);
                    }
                    else {
                        XTypedServices.SetList<Feature>(this.FeatureField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Double? station {
            get {
                XAttribute x = this.Attribute(stationXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetAttribute(stationXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Double? signalPeriod {
            get {
                XAttribute x = this.Attribute(signalPeriodXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetAttribute(signalPeriodXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual LandXml.v1_2.trafficControlPosition? controlPosition {
            get {
                XAttribute x = this.Attribute(controlPositionXName);
                if ((x == null)) {
                    return null;
                }
                return ((LandXml.v1_2.trafficControlPosition)(Enum.Parse(typeof(LandXml.v1_2.trafficControlPosition), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetAttribute(controlPositionXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string controlType {
            get {
                XAttribute x = this.Attribute(controlTypeXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(controlTypeXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static TrafficControl Load(string xmlFile) {
            return XTypedServices.Load<TrafficControl>(xmlFile);
        }
        
        public static TrafficControl Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<TrafficControl>(xmlFile);
        }
        
        public static TrafficControl Parse(string xml) {
            return XTypedServices.Parse<TrafficControl>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<TrafficControl>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(FeatureXName, typeof(Feature));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Feature*)*
    /// </para>
    /// </summary>
    public partial class Timing : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName FeatureXName = System.Xml.Linq.XName.Get("Feature", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<Feature> FeatureField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName stationXName = System.Xml.Linq.XName.Get("station", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName legNumberXName = System.Xml.Linq.XName.Get("legNumber", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName protectedTurnPercentXName = System.Xml.Linq.XName.Get("protectedTurnPercent", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName unprotectedTurnPercentXName = System.Xml.Linq.XName.Get("unprotectedTurnPercent", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("Timing", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator Timing(XElement xe) { return XTypedServices.ToXTypedElement<Timing>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static Timing() {
            BuildElementDictionary();
            contentModel = new ChoiceContentModelEntity(new NamedContentModelEntity(FeatureXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Feature*)*
        /// </para>
        /// </summary>
        public Timing() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating, choice
        /// </para>
        /// <para>
        /// Regular expression: (Feature*)*
        /// </para>
        /// </summary>
        public virtual IList<Feature> Feature {
            get {
                if ((this.FeatureField == null)) {
                    this.FeatureField = new XTypedList<Feature>(this, LinqToXsdTypeManager.Instance, FeatureXName);
                }
                return this.FeatureField;
            }
            set {
                if ((value == null)) {
                    this.FeatureField = null;
                }
                else {
                    if ((this.FeatureField == null)) {
                        this.FeatureField = XTypedList<Feature>.Initialize(this, LinqToXsdTypeManager.Instance, value, FeatureXName);
                    }
                    else {
                        XTypedServices.SetList<Feature>(this.FeatureField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Double? station {
            get {
                XAttribute x = this.Attribute(stationXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetAttribute(stationXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Int32? legNumber {
            get {
                XAttribute x = this.Attribute(legNumberXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<int>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
            set {
                this.SetAttribute(legNumberXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Double? protectedTurnPercent {
            get {
                XAttribute x = this.Attribute(protectedTurnPercentXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetAttribute(protectedTurnPercentXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Double? unprotectedTurnPercent {
            get {
                XAttribute x = this.Attribute(unprotectedTurnPercentXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetAttribute(unprotectedTurnPercentXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static Timing Load(string xmlFile) {
            return XTypedServices.Load<Timing>(xmlFile);
        }
        
        public static Timing Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<Timing>(xmlFile);
        }
        
        public static Timing Parse(string xml) {
            return XTypedServices.Parse<Timing>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<Timing>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(FeatureXName, typeof(Feature));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Feature*)*
    /// </para>
    /// </summary>
    public partial class Volume : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName FeatureXName = System.Xml.Linq.XName.Get("Feature", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<Feature> FeatureField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName stationXName = System.Xml.Linq.XName.Get("station", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName legNumberXName = System.Xml.Linq.XName.Get("legNumber", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName turnPercentXName = System.Xml.Linq.XName.Get("turnPercent", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName percentTrucksXName = System.Xml.Linq.XName.Get("percentTrucks", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("Volume", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator Volume(XElement xe) { return XTypedServices.ToXTypedElement<Volume>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static Volume() {
            BuildElementDictionary();
            contentModel = new ChoiceContentModelEntity(new NamedContentModelEntity(FeatureXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Feature*)*
        /// </para>
        /// </summary>
        public Volume() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating, choice
        /// </para>
        /// <para>
        /// Regular expression: (Feature*)*
        /// </para>
        /// </summary>
        public virtual IList<Feature> Feature {
            get {
                if ((this.FeatureField == null)) {
                    this.FeatureField = new XTypedList<Feature>(this, LinqToXsdTypeManager.Instance, FeatureXName);
                }
                return this.FeatureField;
            }
            set {
                if ((value == null)) {
                    this.FeatureField = null;
                }
                else {
                    if ((this.FeatureField == null)) {
                        this.FeatureField = XTypedList<Feature>.Initialize(this, LinqToXsdTypeManager.Instance, value, FeatureXName);
                    }
                    else {
                        XTypedServices.SetList<Feature>(this.FeatureField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Double? station {
            get {
                XAttribute x = this.Attribute(stationXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetAttribute(stationXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Int32? legNumber {
            get {
                XAttribute x = this.Attribute(legNumberXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<int>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
            set {
                this.SetAttribute(legNumberXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Double? turnPercent {
            get {
                XAttribute x = this.Attribute(turnPercentXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetAttribute(turnPercentXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Double? percentTrucks {
            get {
                XAttribute x = this.Attribute(percentTrucksXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetAttribute(percentTrucksXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static Volume Load(string xmlFile) {
            return XTypedServices.Load<Volume>(xmlFile);
        }
        
        public static Volume Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<Volume>(xmlFile);
        }
        
        public static Volume Parse(string xml) {
            return XTypedServices.Parse<Volume>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<Volume>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(FeatureXName, typeof(Feature));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Feature*)*
    /// </para>
    /// </summary>
    public partial class TurnSpeed : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName FeatureXName = System.Xml.Linq.XName.Get("Feature", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<Feature> FeatureField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName stationXName = System.Xml.Linq.XName.Get("station", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName legNumberXName = System.Xml.Linq.XName.Get("legNumber", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName speedXName = System.Xml.Linq.XName.Get("speed", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("TurnSpeed", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator TurnSpeed(XElement xe) { return XTypedServices.ToXTypedElement<TurnSpeed>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static TurnSpeed() {
            BuildElementDictionary();
            contentModel = new ChoiceContentModelEntity(new NamedContentModelEntity(FeatureXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Feature*)*
        /// </para>
        /// </summary>
        public TurnSpeed() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating, choice
        /// </para>
        /// <para>
        /// Regular expression: (Feature*)*
        /// </para>
        /// </summary>
        public virtual IList<Feature> Feature {
            get {
                if ((this.FeatureField == null)) {
                    this.FeatureField = new XTypedList<Feature>(this, LinqToXsdTypeManager.Instance, FeatureXName);
                }
                return this.FeatureField;
            }
            set {
                if ((value == null)) {
                    this.FeatureField = null;
                }
                else {
                    if ((this.FeatureField == null)) {
                        this.FeatureField = XTypedList<Feature>.Initialize(this, LinqToXsdTypeManager.Instance, value, FeatureXName);
                    }
                    else {
                        XTypedServices.SetList<Feature>(this.FeatureField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Double? station {
            get {
                XAttribute x = this.Attribute(stationXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetAttribute(stationXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Int32? legNumber {
            get {
                XAttribute x = this.Attribute(legNumberXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<int>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
            set {
                this.SetAttribute(legNumberXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Double? speed {
            get {
                XAttribute x = this.Attribute(speedXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetAttribute(speedXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static TurnSpeed Load(string xmlFile) {
            return XTypedServices.Load<TurnSpeed>(xmlFile);
        }
        
        public static TurnSpeed Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<TurnSpeed>(xmlFile);
        }
        
        public static TurnSpeed Parse(string xml) {
            return XTypedServices.Parse<TurnSpeed>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<TurnSpeed>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(FeatureXName, typeof(Feature));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Feature*)*
    /// </para>
    /// </summary>
    public partial class TurnRestriction : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName FeatureXName = System.Xml.Linq.XName.Get("Feature", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<Feature> FeatureField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName stationXName = System.Xml.Linq.XName.Get("station", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName legNumberXName = System.Xml.Linq.XName.Get("legNumber", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName typeXName = System.Xml.Linq.XName.Get("type", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("TurnRestriction", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator TurnRestriction(XElement xe) { return XTypedServices.ToXTypedElement<TurnRestriction>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static TurnRestriction() {
            BuildElementDictionary();
            contentModel = new ChoiceContentModelEntity(new NamedContentModelEntity(FeatureXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Feature*)*
        /// </para>
        /// </summary>
        public TurnRestriction() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating, choice
        /// </para>
        /// <para>
        /// Regular expression: (Feature*)*
        /// </para>
        /// </summary>
        public virtual IList<Feature> Feature {
            get {
                if ((this.FeatureField == null)) {
                    this.FeatureField = new XTypedList<Feature>(this, LinqToXsdTypeManager.Instance, FeatureXName);
                }
                return this.FeatureField;
            }
            set {
                if ((value == null)) {
                    this.FeatureField = null;
                }
                else {
                    if ((this.FeatureField == null)) {
                        this.FeatureField = XTypedList<Feature>.Initialize(this, LinqToXsdTypeManager.Instance, value, FeatureXName);
                    }
                    else {
                        XTypedServices.SetList<Feature>(this.FeatureField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Double? station {
            get {
                XAttribute x = this.Attribute(stationXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetAttribute(stationXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Int32? legNumber {
            get {
                XAttribute x = this.Attribute(legNumberXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<int>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
            set {
                this.SetAttribute(legNumberXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Int).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string type {
            get {
                XAttribute x = this.Attribute(typeXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(typeXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static TurnRestriction Load(string xmlFile) {
            return XTypedServices.Load<TurnRestriction>(xmlFile);
        }
        
        public static TurnRestriction Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<TurnRestriction>(xmlFile);
        }
        
        public static TurnRestriction Parse(string xml) {
            return XTypedServices.Parse<TurnRestriction>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<TurnRestriction>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(FeatureXName, typeof(Feature));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Feature*)*
    /// </para>
    /// </summary>
    public partial class Curb : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName FeatureXName = System.Xml.Linq.XName.Get("Feature", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<Feature> FeatureField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName staStartXName = System.Xml.Linq.XName.Get("staStart", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName staEndXName = System.Xml.Linq.XName.Get("staEnd", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName sideofRoadXName = System.Xml.Linq.XName.Get("sideofRoad", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName typeXName = System.Xml.Linq.XName.Get("type", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("Curb", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator Curb(XElement xe) { return XTypedServices.ToXTypedElement<Curb>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static Curb() {
            BuildElementDictionary();
            contentModel = new ChoiceContentModelEntity(new NamedContentModelEntity(FeatureXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Feature*)*
        /// </para>
        /// </summary>
        public Curb() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating, choice
        /// </para>
        /// <para>
        /// Regular expression: (Feature*)*
        /// </para>
        /// </summary>
        public virtual IList<Feature> Feature {
            get {
                if ((this.FeatureField == null)) {
                    this.FeatureField = new XTypedList<Feature>(this, LinqToXsdTypeManager.Instance, FeatureXName);
                }
                return this.FeatureField;
            }
            set {
                if ((value == null)) {
                    this.FeatureField = null;
                }
                else {
                    if ((this.FeatureField == null)) {
                        this.FeatureField = XTypedList<Feature>.Initialize(this, LinqToXsdTypeManager.Instance, value, FeatureXName);
                    }
                    else {
                        XTypedServices.SetList<Feature>(this.FeatureField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Double? staStart {
            get {
                XAttribute x = this.Attribute(staStartXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetAttribute(staStartXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Double? staEnd {
            get {
                XAttribute x = this.Attribute(staEndXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetAttribute(staEndXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual LandXml.v1_2.sideofRoadType? sideofRoad {
            get {
                XAttribute x = this.Attribute(sideofRoadXName);
                if ((x == null)) {
                    return null;
                }
                return ((LandXml.v1_2.sideofRoadType)(Enum.Parse(typeof(LandXml.v1_2.sideofRoadType), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetAttribute(sideofRoadXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual LandXml.v1_2.curbType? type {
            get {
                XAttribute x = this.Attribute(typeXName);
                if ((x == null)) {
                    return null;
                }
                return ((LandXml.v1_2.curbType)(Enum.Parse(typeof(LandXml.v1_2.curbType), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetAttribute(typeXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static Curb Load(string xmlFile) {
            return XTypedServices.Load<Curb>(xmlFile);
        }
        
        public static Curb Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<Curb>(xmlFile);
        }
        
        public static Curb Parse(string xml) {
            return XTypedServices.Parse<Curb>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<Curb>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(FeatureXName, typeof(Feature));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Feature*)*
    /// </para>
    /// </summary>
    public partial class Corner : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName FeatureXName = System.Xml.Linq.XName.Get("Feature", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<Feature> FeatureField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName staStartXName = System.Xml.Linq.XName.Get("staStart", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName staEndXName = System.Xml.Linq.XName.Get("staEnd", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName typeXName = System.Xml.Linq.XName.Get("type", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("Corner", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator Corner(XElement xe) { return XTypedServices.ToXTypedElement<Corner>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static Corner() {
            BuildElementDictionary();
            contentModel = new ChoiceContentModelEntity(new NamedContentModelEntity(FeatureXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Feature*)*
        /// </para>
        /// </summary>
        public Corner() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating, choice
        /// </para>
        /// <para>
        /// Regular expression: (Feature*)*
        /// </para>
        /// </summary>
        public virtual IList<Feature> Feature {
            get {
                if ((this.FeatureField == null)) {
                    this.FeatureField = new XTypedList<Feature>(this, LinqToXsdTypeManager.Instance, FeatureXName);
                }
                return this.FeatureField;
            }
            set {
                if ((value == null)) {
                    this.FeatureField = null;
                }
                else {
                    if ((this.FeatureField == null)) {
                        this.FeatureField = XTypedList<Feature>.Initialize(this, LinqToXsdTypeManager.Instance, value, FeatureXName);
                    }
                    else {
                        XTypedServices.SetList<Feature>(this.FeatureField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Double? staStart {
            get {
                XAttribute x = this.Attribute(staStartXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetAttribute(staStartXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Double? staEnd {
            get {
                XAttribute x = this.Attribute(staEndXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetAttribute(staEndXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual LandXml.v1_2.cornerType? type {
            get {
                XAttribute x = this.Attribute(typeXName);
                if ((x == null)) {
                    return null;
                }
                return ((LandXml.v1_2.cornerType)(Enum.Parse(typeof(LandXml.v1_2.cornerType), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetAttribute(typeXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static Corner Load(string xmlFile) {
            return XTypedServices.Load<Corner>(xmlFile);
        }
        
        public static Corner Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<Corner>(xmlFile);
        }
        
        public static Corner Parse(string xml) {
            return XTypedServices.Parse<Corner>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<Corner>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(FeatureXName, typeof(Feature));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (CrashHistory+ | Feature*)+
    /// </para>
    /// </summary>
    public partial class CrashData : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName CrashHistoryXName = System.Xml.Linq.XName.Get("CrashHistory", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<CrashHistory> CrashHistoryField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName FeatureXName = System.Xml.Linq.XName.Get("Feature", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<Feature> FeatureField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("CrashData", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator CrashData(XElement xe) { return XTypedServices.ToXTypedElement<CrashData>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static CrashData() {
            BuildElementDictionary();
            contentModel = new ChoiceContentModelEntity(new NamedContentModelEntity(CrashHistoryXName), new NamedContentModelEntity(FeatureXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (CrashHistory+ | Feature*)+
        /// </para>
        /// </summary>
        public CrashData() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, repeating, choice
        /// </para>
        /// <para>
        /// Regular expression: (CrashHistory+ | Feature*)+
        /// </para>
        /// </summary>
        public virtual IList<CrashHistory> CrashHistory {
            get {
                if ((this.CrashHistoryField == null)) {
                    this.CrashHistoryField = new XTypedList<CrashHistory>(this, LinqToXsdTypeManager.Instance, CrashHistoryXName);
                }
                return this.CrashHistoryField;
            }
            set {
                if ((value == null)) {
                    this.CrashHistoryField = null;
                }
                else {
                    if ((this.CrashHistoryField == null)) {
                        this.CrashHistoryField = XTypedList<CrashHistory>.Initialize(this, LinqToXsdTypeManager.Instance, value, CrashHistoryXName);
                    }
                    else {
                        XTypedServices.SetList<CrashHistory>(this.CrashHistoryField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating, choice
        /// </para>
        /// <para>
        /// Regular expression: (CrashHistory+ | Feature*)+
        /// </para>
        /// </summary>
        public virtual IList<Feature> Feature {
            get {
                if ((this.FeatureField == null)) {
                    this.FeatureField = new XTypedList<Feature>(this, LinqToXsdTypeManager.Instance, FeatureXName);
                }
                return this.FeatureField;
            }
            set {
                if ((value == null)) {
                    this.FeatureField = null;
                }
                else {
                    if ((this.FeatureField == null)) {
                        this.FeatureField = XTypedList<Feature>.Initialize(this, LinqToXsdTypeManager.Instance, value, FeatureXName);
                    }
                    else {
                        XTypedServices.SetList<Feature>(this.FeatureField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static CrashData Load(string xmlFile) {
            return XTypedServices.Load<CrashData>(xmlFile);
        }
        
        public static CrashData Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<CrashData>(xmlFile);
        }
        
        public static CrashData Parse(string xml) {
            return XTypedServices.Parse<CrashData>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<CrashData>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(CrashHistoryXName, typeof(CrashHistory));
            localElementDictionary.Add(FeatureXName, typeof(Feature));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Feature*)*
    /// </para>
    /// </summary>
    public partial class CrashHistory : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName FeatureXName = System.Xml.Linq.XName.Get("Feature", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<Feature> FeatureField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName yearXName = System.Xml.Linq.XName.Get("year", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName location1XName = System.Xml.Linq.XName.Get("location-1", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName location2XName = System.Xml.Linq.XName.Get("location-2", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName severityXName = System.Xml.Linq.XName.Get("severity", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName intersectionRelationXName = System.Xml.Linq.XName.Get("intersectionRelation", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName intersectionLocationXName = System.Xml.Linq.XName.Get("intersectionLocation", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("CrashHistory", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator CrashHistory(XElement xe) { return XTypedServices.ToXTypedElement<CrashHistory>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static CrashHistory() {
            BuildElementDictionary();
            contentModel = new ChoiceContentModelEntity(new NamedContentModelEntity(FeatureXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Feature*)*
        /// </para>
        /// </summary>
        public CrashHistory() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating, choice
        /// </para>
        /// <para>
        /// Regular expression: (Feature*)*
        /// </para>
        /// </summary>
        public virtual IList<Feature> Feature {
            get {
                if ((this.FeatureField == null)) {
                    this.FeatureField = new XTypedList<Feature>(this, LinqToXsdTypeManager.Instance, FeatureXName);
                }
                return this.FeatureField;
            }
            set {
                if ((value == null)) {
                    this.FeatureField = null;
                }
                else {
                    if ((this.FeatureField == null)) {
                        this.FeatureField = XTypedList<Feature>.Initialize(this, LinqToXsdTypeManager.Instance, value, FeatureXName);
                    }
                    else {
                        XTypedServices.SetList<Feature>(this.FeatureField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.DateTime? year {
            get {
                XAttribute x = this.Attribute(yearXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<System.DateTime>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date).Datatype);
            }
            set {
                this.SetAttribute(yearXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Date).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Double? location1 {
            get {
                XAttribute x = this.Attribute(location1XName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetAttribute(location1XName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Double? location2 {
            get {
                XAttribute x = this.Attribute(location2XName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetAttribute(location2XName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string severity {
            get {
                XAttribute x = this.Attribute(severityXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(severityXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string intersectionRelation {
            get {
                XAttribute x = this.Attribute(intersectionRelationXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(intersectionRelationXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Double? intersectionLocation {
            get {
                XAttribute x = this.Attribute(intersectionLocationXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetAttribute(intersectionLocationXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static CrashHistory Load(string xmlFile) {
            return XTypedServices.Load<CrashHistory>(xmlFile);
        }
        
        public static CrashHistory Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<CrashHistory>(xmlFile);
        }
        
        public static CrashHistory Parse(string xml) {
            return XTypedServices.Parse<CrashHistory>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<CrashHistory>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(FeatureXName, typeof(Feature));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Feature*)*
    /// </para>
    /// </summary>
    public partial class PostedSpeed : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName FeatureXName = System.Xml.Linq.XName.Get("Feature", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<Feature> FeatureField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName staStartXName = System.Xml.Linq.XName.Get("staStart", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName staEndXName = System.Xml.Linq.XName.Get("staEnd", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName sideofRoadXName = System.Xml.Linq.XName.Get("sideofRoad", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName speedLimitXName = System.Xml.Linq.XName.Get("speedLimit", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("PostedSpeed", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator PostedSpeed(XElement xe) { return XTypedServices.ToXTypedElement<PostedSpeed>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static PostedSpeed() {
            BuildElementDictionary();
            contentModel = new ChoiceContentModelEntity(new NamedContentModelEntity(FeatureXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Feature*)*
        /// </para>
        /// </summary>
        public PostedSpeed() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating, choice
        /// </para>
        /// <para>
        /// Regular expression: (Feature*)*
        /// </para>
        /// </summary>
        public virtual IList<Feature> Feature {
            get {
                if ((this.FeatureField == null)) {
                    this.FeatureField = new XTypedList<Feature>(this, LinqToXsdTypeManager.Instance, FeatureXName);
                }
                return this.FeatureField;
            }
            set {
                if ((value == null)) {
                    this.FeatureField = null;
                }
                else {
                    if ((this.FeatureField == null)) {
                        this.FeatureField = XTypedList<Feature>.Initialize(this, LinqToXsdTypeManager.Instance, value, FeatureXName);
                    }
                    else {
                        XTypedServices.SetList<Feature>(this.FeatureField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Double? staStart {
            get {
                XAttribute x = this.Attribute(staStartXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetAttribute(staStartXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Double? staEnd {
            get {
                XAttribute x = this.Attribute(staEndXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetAttribute(staEndXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual LandXml.v1_2.sideofRoadType? sideofRoad {
            get {
                XAttribute x = this.Attribute(sideofRoadXName);
                if ((x == null)) {
                    return null;
                }
                return ((LandXml.v1_2.sideofRoadType)(Enum.Parse(typeof(LandXml.v1_2.sideofRoadType), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetAttribute(sideofRoadXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Double? speedLimit {
            get {
                XAttribute x = this.Attribute(speedLimitXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetAttribute(speedLimitXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static PostedSpeed Load(string xmlFile) {
            return XTypedServices.Load<PostedSpeed>(xmlFile);
        }
        
        public static PostedSpeed Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<PostedSpeed>(xmlFile);
        }
        
        public static PostedSpeed Parse(string xml) {
            return XTypedServices.Parse<PostedSpeed>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<PostedSpeed>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(FeatureXName, typeof(Feature));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Feature*)*
    /// </para>
    /// </summary>
    public partial class NoPassingZone : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName FeatureXName = System.Xml.Linq.XName.Get("Feature", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<Feature> FeatureField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName staStartXName = System.Xml.Linq.XName.Get("staStart", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName staEndXName = System.Xml.Linq.XName.Get("staEnd", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName sideofRoadXName = System.Xml.Linq.XName.Get("sideofRoad", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("NoPassingZone", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator NoPassingZone(XElement xe) { return XTypedServices.ToXTypedElement<NoPassingZone>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static NoPassingZone() {
            BuildElementDictionary();
            contentModel = new ChoiceContentModelEntity(new NamedContentModelEntity(FeatureXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Feature*)*
        /// </para>
        /// </summary>
        public NoPassingZone() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating, choice
        /// </para>
        /// <para>
        /// Regular expression: (Feature*)*
        /// </para>
        /// </summary>
        public virtual IList<Feature> Feature {
            get {
                if ((this.FeatureField == null)) {
                    this.FeatureField = new XTypedList<Feature>(this, LinqToXsdTypeManager.Instance, FeatureXName);
                }
                return this.FeatureField;
            }
            set {
                if ((value == null)) {
                    this.FeatureField = null;
                }
                else {
                    if ((this.FeatureField == null)) {
                        this.FeatureField = XTypedList<Feature>.Initialize(this, LinqToXsdTypeManager.Instance, value, FeatureXName);
                    }
                    else {
                        XTypedServices.SetList<Feature>(this.FeatureField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Double? staStart {
            get {
                XAttribute x = this.Attribute(staStartXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetAttribute(staStartXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Double? staEnd {
            get {
                XAttribute x = this.Attribute(staEndXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetAttribute(staEndXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual LandXml.v1_2.sideofRoadType? sideofRoad {
            get {
                XAttribute x = this.Attribute(sideofRoadXName);
                if ((x == null)) {
                    return null;
                }
                return ((LandXml.v1_2.sideofRoadType)(Enum.Parse(typeof(LandXml.v1_2.sideofRoadType), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetAttribute(sideofRoadXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static NoPassingZone Load(string xmlFile) {
            return XTypedServices.Load<NoPassingZone>(xmlFile);
        }
        
        public static NoPassingZone Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<NoPassingZone>(xmlFile);
        }
        
        public static NoPassingZone Parse(string xml) {
            return XTypedServices.Parse<NoPassingZone>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<NoPassingZone>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(FeatureXName, typeof(Feature));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Feature*)*
    /// </para>
    /// </summary>
    public partial class DecisionSightDistance : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName FeatureXName = System.Xml.Linq.XName.Get("Feature", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<Feature> FeatureField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName stationXName = System.Xml.Linq.XName.Get("station", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName maneuverXName = System.Xml.Linq.XName.Get("maneuver", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("DecisionSightDistance", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator DecisionSightDistance(XElement xe) { return XTypedServices.ToXTypedElement<DecisionSightDistance>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static DecisionSightDistance() {
            BuildElementDictionary();
            contentModel = new ChoiceContentModelEntity(new NamedContentModelEntity(FeatureXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Feature*)*
        /// </para>
        /// </summary>
        public DecisionSightDistance() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating, choice
        /// </para>
        /// <para>
        /// Regular expression: (Feature*)*
        /// </para>
        /// </summary>
        public virtual IList<Feature> Feature {
            get {
                if ((this.FeatureField == null)) {
                    this.FeatureField = new XTypedList<Feature>(this, LinqToXsdTypeManager.Instance, FeatureXName);
                }
                return this.FeatureField;
            }
            set {
                if ((value == null)) {
                    this.FeatureField = null;
                }
                else {
                    if ((this.FeatureField == null)) {
                        this.FeatureField = XTypedList<Feature>.Initialize(this, LinqToXsdTypeManager.Instance, value, FeatureXName);
                    }
                    else {
                        XTypedServices.SetList<Feature>(this.FeatureField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Double? station {
            get {
                XAttribute x = this.Attribute(stationXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetAttribute(stationXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string maneuver {
            get {
                XAttribute x = this.Attribute(maneuverXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(maneuverXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static DecisionSightDistance Load(string xmlFile) {
            return XTypedServices.Load<DecisionSightDistance>(xmlFile);
        }
        
        public static DecisionSightDistance Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<DecisionSightDistance>(xmlFile);
        }
        
        public static DecisionSightDistance Parse(string xml) {
            return XTypedServices.Parse<DecisionSightDistance>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<DecisionSightDistance>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(FeatureXName, typeof(Feature));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Feature*)*
    /// </para>
    /// </summary>
    public partial class BridgeElement : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName FeatureXName = System.Xml.Linq.XName.Get("Feature", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<Feature> FeatureField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName staStartXName = System.Xml.Linq.XName.Get("staStart", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName staEndXName = System.Xml.Linq.XName.Get("staEnd", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName widthXName = System.Xml.Linq.XName.Get("width", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName projectTypeXName = System.Xml.Linq.XName.Get("projectType", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("BridgeElement", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator BridgeElement(XElement xe) { return XTypedServices.ToXTypedElement<BridgeElement>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static BridgeElement() {
            BuildElementDictionary();
            contentModel = new ChoiceContentModelEntity(new NamedContentModelEntity(FeatureXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Feature*)*
        /// </para>
        /// </summary>
        public BridgeElement() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating, choice
        /// </para>
        /// <para>
        /// Regular expression: (Feature*)*
        /// </para>
        /// </summary>
        public virtual IList<Feature> Feature {
            get {
                if ((this.FeatureField == null)) {
                    this.FeatureField = new XTypedList<Feature>(this, LinqToXsdTypeManager.Instance, FeatureXName);
                }
                return this.FeatureField;
            }
            set {
                if ((value == null)) {
                    this.FeatureField = null;
                }
                else {
                    if ((this.FeatureField == null)) {
                        this.FeatureField = XTypedList<Feature>.Initialize(this, LinqToXsdTypeManager.Instance, value, FeatureXName);
                    }
                    else {
                        XTypedServices.SetList<Feature>(this.FeatureField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Double? staStart {
            get {
                XAttribute x = this.Attribute(staStartXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetAttribute(staStartXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Double? staEnd {
            get {
                XAttribute x = this.Attribute(staEndXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetAttribute(staEndXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Double? width {
            get {
                XAttribute x = this.Attribute(widthXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetAttribute(widthXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string projectType {
            get {
                XAttribute x = this.Attribute(projectTypeXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(projectTypeXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static BridgeElement Load(string xmlFile) {
            return XTypedServices.Load<BridgeElement>(xmlFile);
        }
        
        public static BridgeElement Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<BridgeElement>(xmlFile);
        }
        
        public static BridgeElement Parse(string xml) {
            return XTypedServices.Parse<BridgeElement>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<BridgeElement>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(FeatureXName, typeof(Feature));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Spiral)
    /// </para>
    /// </summary>
    public partial class InSpiral : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName SpiralXName = System.Xml.Linq.XName.Get("Spiral", "http://www.landxml.org/schema/LandXML-1.2");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("InSpiral", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
		public static explicit operator InSpiral(XElement xe) { return XTypedServices.ToXTypedElement<InSpiral>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static InSpiral() {
            BuildElementDictionary();
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Spiral)
        /// </para>
        /// </summary>
        public InSpiral() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (Spiral)
        /// </para>
        /// </summary>
        public virtual Spiral Spiral {
            get {
                XElement x = this.GetElement(SpiralXName);
                return ((Spiral)(x));
            }
            set {
                this.SetElement(SpiralXName, value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static InSpiral Load(string xmlFile) {
            return XTypedServices.Load<InSpiral>(xmlFile);
        }
        
        public static InSpiral Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<InSpiral>(xmlFile);
        }
        
        public static InSpiral Parse(string xml) {
            return XTypedServices.Parse<InSpiral>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<InSpiral>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(SpiralXName, typeof(Spiral));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Curve)
    /// </para>
    /// </summary>
    public partial class Curve1 : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName CurveXName = System.Xml.Linq.XName.Get("Curve", "http://www.landxml.org/schema/LandXML-1.2");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("Curve1", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
		public static explicit operator Curve1(XElement xe) { return XTypedServices.ToXTypedElement<Curve1>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static Curve1() {
            BuildElementDictionary();
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Curve)
        /// </para>
        /// </summary>
        public Curve1() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (Curve)
        /// </para>
        /// </summary>
        public virtual Curve Curve {
            get {
                XElement x = this.GetElement(CurveXName);
                return ((Curve)(x));
            }
            set {
                this.SetElement(CurveXName, value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static Curve1 Load(string xmlFile) {
            return XTypedServices.Load<Curve1>(xmlFile);
        }
        
        public static Curve1 Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<Curve1>(xmlFile);
        }
        
        public static Curve1 Parse(string xml) {
            return XTypedServices.Parse<Curve1>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<Curve1>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(CurveXName, typeof(Curve));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Spiral)
    /// </para>
    /// </summary>
    public partial class ConnSpiral : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName SpiralXName = System.Xml.Linq.XName.Get("Spiral", "http://www.landxml.org/schema/LandXML-1.2");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("ConnSpiral", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
		public static explicit operator ConnSpiral(XElement xe) { return XTypedServices.ToXTypedElement<ConnSpiral>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static ConnSpiral() {
            BuildElementDictionary();
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Spiral)
        /// </para>
        /// </summary>
        public ConnSpiral() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (Spiral)
        /// </para>
        /// </summary>
        public virtual Spiral Spiral {
            get {
                XElement x = this.GetElement(SpiralXName);
                return ((Spiral)(x));
            }
            set {
                this.SetElement(SpiralXName, value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static ConnSpiral Load(string xmlFile) {
            return XTypedServices.Load<ConnSpiral>(xmlFile);
        }
        
        public static ConnSpiral Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<ConnSpiral>(xmlFile);
        }
        
        public static ConnSpiral Parse(string xml) {
            return XTypedServices.Parse<ConnSpiral>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<ConnSpiral>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(SpiralXName, typeof(Spiral));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Curve)
    /// </para>
    /// </summary>
    public partial class Curve2 : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName CurveXName = System.Xml.Linq.XName.Get("Curve", "http://www.landxml.org/schema/LandXML-1.2");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("Curve2", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
		public static explicit operator Curve2(XElement xe) { return XTypedServices.ToXTypedElement<Curve2>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static Curve2() {
            BuildElementDictionary();
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Curve)
        /// </para>
        /// </summary>
        public Curve2() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (Curve)
        /// </para>
        /// </summary>
        public virtual Curve Curve {
            get {
                XElement x = this.GetElement(CurveXName);
                return ((Curve)(x));
            }
            set {
                this.SetElement(CurveXName, value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static Curve2 Load(string xmlFile) {
            return XTypedServices.Load<Curve2>(xmlFile);
        }
        
        public static Curve2 Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<Curve2>(xmlFile);
        }
        
        public static Curve2 Parse(string xml) {
            return XTypedServices.Parse<Curve2>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<Curve2>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(CurveXName, typeof(Curve));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Spiral)
    /// </para>
    /// </summary>
    public partial class OutSpiral : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName SpiralXName = System.Xml.Linq.XName.Get("Spiral", "http://www.landxml.org/schema/LandXML-1.2");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("OutSpiral", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
		public static explicit operator OutSpiral(XElement xe) { return XTypedServices.ToXTypedElement<OutSpiral>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static OutSpiral() {
            BuildElementDictionary();
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Spiral)
        /// </para>
        /// </summary>
        public OutSpiral() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (Spiral)
        /// </para>
        /// </summary>
        public virtual Spiral Spiral {
            get {
                XElement x = this.GetElement(SpiralXName);
                return ((Spiral)(x));
            }
            set {
                this.SetElement(SpiralXName, value);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static OutSpiral Load(string xmlFile) {
            return XTypedServices.Load<OutSpiral>(xmlFile);
        }
        
        public static OutSpiral Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<OutSpiral>(xmlFile);
        }
        
        public static OutSpiral Parse(string xml) {
            return XTypedServices.Parse<OutSpiral>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<OutSpiral>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(SpiralXName, typeof(Spiral));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (Station | PI | InSpiral? | Curve1? | ConnSpiral? | Curve2? | OutSpiral?)+
    /// </para>
    /// </summary>
    public partial class AlignPI : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName StationXName = System.Xml.Linq.XName.Get("Station", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XSimpleList<Station> StationField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName PIXName = System.Xml.Linq.XName.Get("PI", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<PI> PIField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName InSpiralXName = System.Xml.Linq.XName.Get("InSpiral", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<InSpiral> InSpiralField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName Curve1XName = System.Xml.Linq.XName.Get("Curve1", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<Curve1> Curve1Field;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ConnSpiralXName = System.Xml.Linq.XName.Get("ConnSpiral", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<ConnSpiral> ConnSpiralField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName Curve2XName = System.Xml.Linq.XName.Get("Curve2", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<Curve2> Curve2Field;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName OutSpiralXName = System.Xml.Linq.XName.Get("OutSpiral", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<OutSpiral> OutSpiralField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("AlignPI", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator AlignPI(XElement xe) { return XTypedServices.ToXTypedElement<AlignPI>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static AlignPI() {
            BuildElementDictionary();
            contentModel = new ChoiceContentModelEntity(new NamedContentModelEntity(StationXName), new NamedContentModelEntity(PIXName), new NamedContentModelEntity(InSpiralXName), new NamedContentModelEntity(Curve1XName), new NamedContentModelEntity(ConnSpiralXName), new NamedContentModelEntity(Curve2XName), new NamedContentModelEntity(OutSpiralXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (Station | PI | InSpiral? | Curve1? | ConnSpiral? | Curve2? | OutSpiral?)+
        /// </para>
        /// </summary>
        public AlignPI() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (Station | PI | InSpiral? | Curve1? | ConnSpiral? | Curve2? | OutSpiral?)+
        /// </para>
        /// </summary>
        public virtual IList<Station> Station {
            get {
                if ((this.StationField == null)) {
                    this.StationField = new XSimpleList<Station>(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype, StationXName);
                }
                return this.StationField;
            }
            set {
                if ((value == null)) {
                    this.StationField = null;
                }
                else {
                    if ((this.StationField == null)) {
                        this.StationField = XSimpleList<Station>.Initialize(this, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype, value, StationXName);
                    }
                    else {
                        XTypedServices.SetList<Station>(this.StationField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required, choice
        /// </para>
        /// <para>
        /// Regular expression: (Station | PI | InSpiral? | Curve1? | ConnSpiral? | Curve2? | OutSpiral?)+
        /// </para>
        /// </summary>
        public virtual IList<PI> PI {
            get {
                if ((this.PIField == null)) {
                    this.PIField = new XTypedList<PI>(this, LinqToXsdTypeManager.Instance, PIXName);
                }
                return this.PIField;
            }
            set {
                if ((value == null)) {
                    this.PIField = null;
                }
                else {
                    if ((this.PIField == null)) {
                        this.PIField = XTypedList<PI>.Initialize(this, LinqToXsdTypeManager.Instance, value, PIXName);
                    }
                    else {
                        XTypedServices.SetList<PI>(this.PIField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, choice
        /// </para>
        /// <para>
        /// Regular expression: (Station | PI | InSpiral? | Curve1? | ConnSpiral? | Curve2? | OutSpiral?)+
        /// </para>
        /// </summary>
        public virtual IList<InSpiral> InSpiral {
            get {
                if ((this.InSpiralField == null)) {
                    this.InSpiralField = new XTypedList<InSpiral>(this, LinqToXsdTypeManager.Instance, InSpiralXName);
                }
                return this.InSpiralField;
            }
            set {
                if ((value == null)) {
                    this.InSpiralField = null;
                }
                else {
                    if ((this.InSpiralField == null)) {
                        this.InSpiralField = XTypedList<InSpiral>.Initialize(this, LinqToXsdTypeManager.Instance, value, InSpiralXName);
                    }
                    else {
                        XTypedServices.SetList<InSpiral>(this.InSpiralField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, choice
        /// </para>
        /// <para>
        /// Regular expression: (Station | PI | InSpiral? | Curve1? | ConnSpiral? | Curve2? | OutSpiral?)+
        /// </para>
        /// </summary>
        public virtual IList<Curve1> Curve1 {
            get {
                if ((this.Curve1Field == null)) {
                    this.Curve1Field = new XTypedList<Curve1>(this, LinqToXsdTypeManager.Instance, Curve1XName);
                }
                return this.Curve1Field;
            }
            set {
                if ((value == null)) {
                    this.Curve1Field = null;
                }
                else {
                    if ((this.Curve1Field == null)) {
                        this.Curve1Field = XTypedList<Curve1>.Initialize(this, LinqToXsdTypeManager.Instance, value, Curve1XName);
                    }
                    else {
                        XTypedServices.SetList<Curve1>(this.Curve1Field, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, choice
        /// </para>
        /// <para>
        /// Regular expression: (Station | PI | InSpiral? | Curve1? | ConnSpiral? | Curve2? | OutSpiral?)+
        /// </para>
        /// </summary>
        public virtual IList<ConnSpiral> ConnSpiral {
            get {
                if ((this.ConnSpiralField == null)) {
                    this.ConnSpiralField = new XTypedList<ConnSpiral>(this, LinqToXsdTypeManager.Instance, ConnSpiralXName);
                }
                return this.ConnSpiralField;
            }
            set {
                if ((value == null)) {
                    this.ConnSpiralField = null;
                }
                else {
                    if ((this.ConnSpiralField == null)) {
                        this.ConnSpiralField = XTypedList<ConnSpiral>.Initialize(this, LinqToXsdTypeManager.Instance, value, ConnSpiralXName);
                    }
                    else {
                        XTypedServices.SetList<ConnSpiral>(this.ConnSpiralField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, choice
        /// </para>
        /// <para>
        /// Regular expression: (Station | PI | InSpiral? | Curve1? | ConnSpiral? | Curve2? | OutSpiral?)+
        /// </para>
        /// </summary>
        public virtual IList<Curve2> Curve2 {
            get {
                if ((this.Curve2Field == null)) {
                    this.Curve2Field = new XTypedList<Curve2>(this, LinqToXsdTypeManager.Instance, Curve2XName);
                }
                return this.Curve2Field;
            }
            set {
                if ((value == null)) {
                    this.Curve2Field = null;
                }
                else {
                    if ((this.Curve2Field == null)) {
                        this.Curve2Field = XTypedList<Curve2>.Initialize(this, LinqToXsdTypeManager.Instance, value, Curve2XName);
                    }
                    else {
                        XTypedServices.SetList<Curve2>(this.Curve2Field, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, choice
        /// </para>
        /// <para>
        /// Regular expression: (Station | PI | InSpiral? | Curve1? | ConnSpiral? | Curve2? | OutSpiral?)+
        /// </para>
        /// </summary>
        public virtual IList<OutSpiral> OutSpiral {
            get {
                if ((this.OutSpiralField == null)) {
                    this.OutSpiralField = new XTypedList<OutSpiral>(this, LinqToXsdTypeManager.Instance, OutSpiralXName);
                }
                return this.OutSpiralField;
            }
            set {
                if ((value == null)) {
                    this.OutSpiralField = null;
                }
                else {
                    if ((this.OutSpiralField == null)) {
                        this.OutSpiralField = XTypedList<OutSpiral>.Initialize(this, LinqToXsdTypeManager.Instance, value, OutSpiralXName);
                    }
                    else {
                        XTypedServices.SetList<OutSpiral>(this.OutSpiralField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static AlignPI Load(string xmlFile) {
            return XTypedServices.Load<AlignPI>(xmlFile);
        }
        
        public static AlignPI Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<AlignPI>(xmlFile);
        }
        
        public static AlignPI Parse(string xml) {
            return XTypedServices.Parse<AlignPI>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<AlignPI>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(StationXName, typeof(Station));
            localElementDictionary.Add(PIXName, typeof(PI));
            localElementDictionary.Add(InSpiralXName, typeof(InSpiral));
            localElementDictionary.Add(Curve1XName, typeof(Curve1));
            localElementDictionary.Add(ConnSpiralXName, typeof(ConnSpiral));
            localElementDictionary.Add(Curve2XName, typeof(Curve2));
            localElementDictionary.Add(OutSpiralXName, typeof(OutSpiral));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (AlignPI)+
    /// </para>
    /// </summary>
    public partial class AlignPIs : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName AlignPIXName = System.Xml.Linq.XName.Get("AlignPI", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<AlignPI> AlignPIField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("AlignPIs", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator AlignPIs(XElement xe) { return XTypedServices.ToXTypedElement<AlignPIs>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static AlignPIs() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(AlignPIXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (AlignPI)+
        /// </para>
        /// </summary>
        public AlignPIs() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (AlignPI)+
        /// </para>
        /// </summary>
        public virtual IList<AlignPI> AlignPI {
            get {
                if ((this.AlignPIField == null)) {
                    this.AlignPIField = new XTypedList<AlignPI>(this, LinqToXsdTypeManager.Instance, AlignPIXName);
                }
                return this.AlignPIField;
            }
            set {
                if ((value == null)) {
                    this.AlignPIField = null;
                }
                else {
                    if ((this.AlignPIField == null)) {
                        this.AlignPIField = XTypedList<AlignPI>.Initialize(this, LinqToXsdTypeManager.Instance, value, AlignPIXName);
                    }
                    else {
                        XTypedServices.SetList<AlignPI>(this.AlignPIField, value);
                    }
                }
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static AlignPIs Load(string xmlFile) {
            return XTypedServices.Load<AlignPIs>(xmlFile);
        }
        
        public static AlignPIs Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<AlignPIs>(xmlFile);
        }
        
        public static AlignPIs Parse(string xml) {
            return XTypedServices.Parse<AlignPIs>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<AlignPIs>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(AlignPIXName, typeof(AlignPI));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: ((CantStation* | SpeedStation*)+, Feature*)
    /// </para>
    /// </summary>
    public partial class Cant : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName CantStationXName = System.Xml.Linq.XName.Get("CantStation", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<CantStation> CantStationField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName SpeedStationXName = System.Xml.Linq.XName.Get("SpeedStation", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<SpeedStation> SpeedStationField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName FeatureXName = System.Xml.Linq.XName.Get("Feature", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<Feature> FeatureField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName nameXName = System.Xml.Linq.XName.Get("name", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName descXName = System.Xml.Linq.XName.Get("desc", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName stateXName = System.Xml.Linq.XName.Get("state", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName equilibriumConstantXName = System.Xml.Linq.XName.Get("equilibriumConstant", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName appliedCantConstantXName = System.Xml.Linq.XName.Get("appliedCantConstant", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName gaugeXName = System.Xml.Linq.XName.Get("gauge", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName rotationPointXName = System.Xml.Linq.XName.Get("rotationPoint", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("Cant", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator Cant(XElement xe) { return XTypedServices.ToXTypedElement<Cant>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static Cant() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new ChoiceContentModelEntity(new NamedContentModelEntity(CantStationXName), new NamedContentModelEntity(SpeedStationXName)), new NamedContentModelEntity(FeatureXName));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: ((CantStation* | SpeedStation*)+, Feature*)
        /// </para>
        /// </summary>
        public Cant() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((CantStation* | SpeedStation*)+, Feature*)
        /// </para>
        /// </summary>
        public virtual IList<CantStation> CantStation {
            get {
                if ((this.CantStationField == null)) {
                    this.CantStationField = new XTypedList<CantStation>(this, LinqToXsdTypeManager.Instance, CantStationXName);
                }
                return this.CantStationField;
            }
            set {
                if ((value == null)) {
                    this.CantStationField = null;
                }
                else {
                    if ((this.CantStationField == null)) {
                        this.CantStationField = XTypedList<CantStation>.Initialize(this, LinqToXsdTypeManager.Instance, value, CantStationXName);
                    }
                    else {
                        XTypedServices.SetList<CantStation>(this.CantStationField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: ((CantStation* | SpeedStation*)+, Feature*)
        /// </para>
        /// </summary>
        public virtual IList<SpeedStation> SpeedStation {
            get {
                if ((this.SpeedStationField == null)) {
                    this.SpeedStationField = new XTypedList<SpeedStation>(this, LinqToXsdTypeManager.Instance, SpeedStationXName);
                }
                return this.SpeedStationField;
            }
            set {
                if ((value == null)) {
                    this.SpeedStationField = null;
                }
                else {
                    if ((this.SpeedStationField == null)) {
                        this.SpeedStationField = XTypedList<SpeedStation>.Initialize(this, LinqToXsdTypeManager.Instance, value, SpeedStationXName);
                    }
                    else {
                        XTypedServices.SetList<SpeedStation>(this.SpeedStationField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating
        /// </para>
        /// <para>
        /// Regular expression: ((CantStation* | SpeedStation*)+, Feature*)
        /// </para>
        /// </summary>
        public virtual IList<Feature> Feature {
            get {
                if ((this.FeatureField == null)) {
                    this.FeatureField = new XTypedList<Feature>(this, LinqToXsdTypeManager.Instance, FeatureXName);
                }
                return this.FeatureField;
            }
            set {
                if ((value == null)) {
                    this.FeatureField = null;
                }
                else {
                    if ((this.FeatureField == null)) {
                        this.FeatureField = XTypedList<Feature>.Initialize(this, LinqToXsdTypeManager.Instance, value, FeatureXName);
                    }
                    else {
                        XTypedServices.SetList<Feature>(this.FeatureField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual string name {
            get {
                XAttribute x = this.Attribute(nameXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(nameXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string desc {
            get {
                XAttribute x = this.Attribute(descXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(descXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual LandXml.v1_2.stateType? state {
            get {
                XAttribute x = this.Attribute(stateXName);
                if ((x == null)) {
                    return null;
                }
                return ((LandXml.v1_2.stateType)(Enum.Parse(typeof(LandXml.v1_2.stateType), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetAttribute(stateXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Double? equilibriumConstant {
            get {
                XAttribute x = this.Attribute(equilibriumConstantXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetAttribute(equilibriumConstantXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Double? appliedCantConstant {
            get {
                XAttribute x = this.Attribute(appliedCantConstantXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetAttribute(appliedCantConstantXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual double gauge {
            get {
                XAttribute x = this.Attribute(gaugeXName);
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetAttribute(gaugeXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string rotationPoint {
            get {
                XAttribute x = this.Attribute(rotationPointXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(rotationPointXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static Cant Load(string xmlFile) {
            return XTypedServices.Load<Cant>(xmlFile);
        }
        
        public static Cant Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<Cant>(xmlFile);
        }
        
        public static Cant Parse(string xml) {
            return XTypedServices.Parse<Cant>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<Cant>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(CantStationXName, typeof(CantStation));
            localElementDictionary.Add(SpeedStationXName, typeof(SpeedStation));
            localElementDictionary.Add(FeatureXName, typeof(Feature));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    public partial class CantStation : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName stationXName = System.Xml.Linq.XName.Get("station", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName equilibriumCantXName = System.Xml.Linq.XName.Get("equilibriumCant", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName appliedCantXName = System.Xml.Linq.XName.Get("appliedCant", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName cantDeficiencyXName = System.Xml.Linq.XName.Get("cantDeficiency", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName cantExcessXName = System.Xml.Linq.XName.Get("cantExcess", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName rateOfChangeOfAppliedCantOverTimeXName = System.Xml.Linq.XName.Get("rateOfChangeOfAppliedCantOverTime", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName rateOfChangeOfAppliedCantOverLengthXName = System.Xml.Linq.XName.Get("rateOfChangeOfAppliedCantOverLength", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName rateOfChangeOfCantDeficiencyOverTimeXName = System.Xml.Linq.XName.Get("rateOfChangeOfCantDeficiencyOverTime", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName cantGradientXName = System.Xml.Linq.XName.Get("cantGradient", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName speedXName = System.Xml.Linq.XName.Get("speed", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName transitionTypeXName = System.Xml.Linq.XName.Get("transitionType", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName curvatureXName = System.Xml.Linq.XName.Get("curvature", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName adverseXName = System.Xml.Linq.XName.Get("adverse", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("CantStation", "http://www.landxml.org/schema/LandXML-1.2");
        
		public static explicit operator CantStation(XElement xe) { return XTypedServices.ToXTypedElement<CantStation>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public CantStation() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual double station {
            get {
                XAttribute x = this.Attribute(stationXName);
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetAttribute(stationXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Double? equilibriumCant {
            get {
                XAttribute x = this.Attribute(equilibriumCantXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetAttribute(equilibriumCantXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual double appliedCant {
            get {
                XAttribute x = this.Attribute(appliedCantXName);
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetAttribute(appliedCantXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Double? cantDeficiency {
            get {
                XAttribute x = this.Attribute(cantDeficiencyXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetAttribute(cantDeficiencyXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Double? cantExcess {
            get {
                XAttribute x = this.Attribute(cantExcessXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetAttribute(cantExcessXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Double? rateOfChangeOfAppliedCantOverTime {
            get {
                XAttribute x = this.Attribute(rateOfChangeOfAppliedCantOverTimeXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetAttribute(rateOfChangeOfAppliedCantOverTimeXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Double? rateOfChangeOfAppliedCantOverLength {
            get {
                XAttribute x = this.Attribute(rateOfChangeOfAppliedCantOverLengthXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetAttribute(rateOfChangeOfAppliedCantOverLengthXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Double? rateOfChangeOfCantDeficiencyOverTime {
            get {
                XAttribute x = this.Attribute(rateOfChangeOfCantDeficiencyOverTimeXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetAttribute(rateOfChangeOfCantDeficiencyOverTimeXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Double? cantGradient {
            get {
                XAttribute x = this.Attribute(cantGradientXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetAttribute(cantGradientXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Double? speed {
            get {
                XAttribute x = this.Attribute(speedXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetAttribute(speedXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual LandXml.v1_2.spiralType? transitionType {
            get {
                XAttribute x = this.Attribute(transitionTypeXName);
                if ((x == null)) {
                    return null;
                }
                return ((LandXml.v1_2.spiralType)(Enum.Parse(typeof(LandXml.v1_2.spiralType), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetAttribute(transitionTypeXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual LandXml.v1_2.clockwise curvature {
            get {
                XAttribute x = this.Attribute(curvatureXName);
                return ((LandXml.v1_2.clockwise)(Enum.Parse(typeof(LandXml.v1_2.clockwise), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetAttribute(curvatureXName, value.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Boolean? adverse {
            get {
                XAttribute x = this.Attribute(adverseXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
            set {
                this.SetAttribute(adverseXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static CantStation Load(string xmlFile) {
            return XTypedServices.Load<CantStation>(xmlFile);
        }
        
        public static CantStation Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<CantStation>(xmlFile);
        }
        
        public static CantStation Parse(string xml) {
            return XTypedServices.Parse<CantStation>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<CantStation>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class SpeedStation : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName stationXName = System.Xml.Linq.XName.Get("station", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName speedXName = System.Xml.Linq.XName.Get("speed", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("SpeedStation", "http://www.landxml.org/schema/LandXML-1.2");
        
		public static explicit operator SpeedStation(XElement xe) { return XTypedServices.ToXTypedElement<SpeedStation>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public SpeedStation() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual double station {
            get {
                XAttribute x = this.Attribute(stationXName);
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetAttribute(stationXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// </summary>
        public virtual double speed {
            get {
                XAttribute x = this.Attribute(speedXName);
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetAttribute(speedXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static SpeedStation Load(string xmlFile) {
            return XTypedServices.Load<SpeedStation>(xmlFile);
        }
        
        public static SpeedStation Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<SpeedStation>(xmlFile);
        }
        
        public static SpeedStation Parse(string xml) {
            return XTypedServices.Parse<SpeedStation>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<SpeedStation>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Represents the National Geodedic Survey ellipsiod height expressed in the unit height attribute value
    /// </para>
    /// </summary>
    public sealed class ellipsoidHeightType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double), null);
        
        private ellipsoidHeightType() {
        }
    }
    
    /// <summary>
    /// <para>
    /// Represents the elevation unit for elevation attribute values, such as ellipsoidHeight
    /// </para>
    /// </summary>
    public enum elevationType {
        
        meter,
        
        kilometer,
        
        feet,
        
        miles,
    }
    
    /// <summary>
    /// <para>
    /// Represents the elevation unit for elevation attribute values, such as ellipsoidHeight
    /// </para>
    /// </summary>
    public sealed class elevationTypeValidator {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "meter",
                        "kilometer",
                        "feet",
                        "miles"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private elevationTypeValidator() {
        }
    }
    
    /// <summary>
    /// <para>
    /// Latitude/Longitude coordinate angular values. Latitude (range -90 to +90) positive values for the northern hemispher, negative indicate the southern. Longitude (range -180 to +180) positive values are to the east of the prime meridian, negative values are to the west. Values expressed in "decimal dd.mm.ss" units have the numeric format "45.3025" representing 45 degrees 30 minutes and 25 seconds. Both the minutes and seconds must be two characters with a numeric range between 00 to 60.
    ///			
    /// </para>
    /// </summary>
    public sealed class latLongAngularType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "radians",
                        "grads",
                        "decimal degrees",
                        "decimal dd.mm.ss"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private latLongAngularType() {
        }
    }
    
    /// <summary>
    /// <para>
    /// Latitude/Longitude coordinate angular values expressed in latLongAngularUnit. Latitude (range -90 to +90) positive values for the northern hemispher, negative indicate the southern. Longitude (range -180 to +180) positive values are to the east of the prime meridian, negative values are to the west. Values expressed in "decimal dd.mm.ss" units have the numeric format "45.3025" representing 45 degrees 30 minutes and 25 seconds. Both the minutes and seconds must be two characters with a numeric range between 00 to 60.
    /// </para>
    /// </summary>
    public sealed class latLongAngle {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double), null);
        
        private latLongAngle() {
        }
    }
    
    /// <summary>
    /// <para>
    /// Represents a normalized angular value in the specified Angular units. Assume 0 degrees = east
    /// </para>
    /// </summary>
    public sealed class angle {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double), null);
        
        private angle() {
        }
    }
    
    /// <summary>
    /// <para>
    /// Represents zenith angles with the 0 origin as
    ///    straight up and measured in a clockwise direction in the specified
    ///    Angular units.
    /// </para>
    /// </summary>
    public sealed class zenithAngle {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double), null);
        
        private zenithAngle() {
        }
    }
    
    /// <summary>
    /// <para>
    /// Represents a normalized angular value that indicates a horizontal direction, expressed in the specified Direction units. Assume 0 degrees = north
    ///		
    /// </para>
    /// </summary>
    public sealed class direction {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double), null);
        
        private direction() {
        }
    }
    
    /// <summary>
    /// <para>
    /// Represents the actual measured distance along the geometry in numeric decimal form expressed in linear units. Also known as the internal station value where no station equations are applied.
    /// </para>
    /// </summary>
    public sealed class station {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double), null);
        
        private station() {
        }
    }
    
    /// <summary>
    /// <para>
    /// Represents the geometric volume (area * height) of a closed boundary numeric decimal form expressed in volume units
    /// </para>
    /// </summary>
    public sealed class volume {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double), null);
        
        private volume() {
        }
    }
    
    /// <summary>
    /// <para>
    /// Represents the geometric area of a closed boundary in numeric decimal form expressed in area units
    /// </para>
    /// </summary>
    public sealed class area {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double), null);
        
        private area() {
        }
    }
    
    /// <summary>
    /// <para>
    /// Represents a linear offset distance. When associated with horizontal (planametric) road or coordinate geometry, the offset is a 2D distance measured perpendicular to the road centerline or coordinate geometry used as the origin. When used in cross sections of long section (profile) the offset is a 2d linear measurement from the origin of the cross section or long section. In all cases a positive value indicates an offset to the RIGHT of the origin and negative values indicate and offset to the LEFT of the origin. The value is in decimal form expressed in length units.
    /// </para>
    /// </summary>
    public sealed class offsetDistance {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double), null);
        
        private offsetDistance() {
        }
    }
    
    /// <summary>
    /// <para>
    /// Represents a vertical offset distance or elevational shift. In all cases a positive value indicates a vertical elevational shift above the origin and negative values indicate a vertical elevational shift below the origin. The value is in decimal form expressed in length units.
    /// </para>
    /// </summary>
    public sealed class offsetElevation {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double), null);
        
        private offsetElevation() {
        }
    }
    
    /// <summary>
    /// <para>
    /// Represents the cross section surface volume from the previous station to the current station in numeric decimal form expressed in volume units
    /// </para>
    /// </summary>
    public sealed class crossSectSurfaceVolume {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double), null);
        
        private crossSectSurfaceVolume() {
        }
    }
    
    /// <summary>
    /// <para>
    /// Represents the cross sectional surface area in numeric decimal form expressed in area units
    /// </para>
    /// </summary>
    public sealed class crossSectSurfaceArea {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double), null);
        
        private crossSectSurfaceArea() {
        }
    }
    
    /// <summary>
    /// <para>
    /// This item is the cross slope, the slope of the traveled way as measure perpendicular to the horizontal alignment, negative when the shoulder has a lower elevation than the centerline. The unit of measure for this item is PERCENT %.
    /// </para>
    /// </summary>
    public sealed class crossSlope {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double), null);
        
        private crossSlope() {
        }
    }
    
    /// <summary>
    /// <para>
    /// This item is the  slope. Unit of measure for this item is PERCENT %.
    /// </para>
    /// </summary>
    public sealed class slope {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double), null);
        
        private slope() {
        }
    }
    
    /// <summary>
    /// <para>
    ///  GPS Time = Nbr of GPS weeks * 604800 (seconds in a week) + seconds in GPS week.
    /// </para>
    /// </summary>
    public sealed class GPSTime {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double), null);
        
        private GPSTime() {
        }
    }
    
    /// <summary>
    /// <para>
    /// A reference name value referring to a PointType derived name attribute. An attribute if this type contains the value of a PointType derived element "name" attribute that exists elsewhere the instance data.
    /// </para>
    /// </summary>
    public sealed class pointNameRef {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), null);
        
        private pointNameRef() {
        }
    }
    
    /// <summary>
    /// <para>
    /// A list of reference names values refering to one or more PointType derived name attributes.
    /// </para>
    /// </summary>
    public sealed class pointNameRefs {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.ListSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), null, new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), null));
        
        private pointNameRefs() {
        }
    }
    
    /// <summary>
    /// <para>
    /// A reference name value referring to a CgPoints name attribute. An attribute if this type contains the value of a CgPoints element "name" attribute that exists elsewhere the instance data.
    /// </para>
    /// </summary>
    public sealed class cgPointsNameRef {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), null);
        
        private cgPointsNameRef() {
        }
    }
    
    /// <summary>
    /// <para>
    /// A list of reference names values refering to one or more CgPoints element name attributes.
    /// </para>
    /// </summary>
    public sealed class cgPointsNameRefs {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.ListSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), null, new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), null));
        
        private cgPointsNameRefs() {
        }
    }
    
    /// <summary>
    /// <para>
    /// A reference name value referring to Alignment.name attribute.
    /// </para>
    /// </summary>
    public sealed class alignmentNameRef {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), null);
        
        private alignmentNameRef() {
        }
    }
    
    /// <summary>
    /// <para>
    /// A list of reference names values refering to one or more Alignment.name attributes.
    /// </para>
    /// </summary>
    public sealed class alignmentNameRefs {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.ListSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), null, new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), null));
        
        private alignmentNameRefs() {
        }
    }
    
    /// <summary>
    /// <para>
    /// A reference name value referring to Surface.name attribute.
    /// </para>
    /// </summary>
    public sealed class surfaceNameRef {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), null);
        
        private surfaceNameRef() {
        }
    }
    
    /// <summary>
    /// <para>
    /// A list of reference names values refering to one or more Surface.name attributes.
    /// </para>
    /// </summary>
    public sealed class surfaceNameRefs {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.ListSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), null, new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), null));
        
        private surfaceNameRefs() {
        }
    }
    
    /// <summary>
    /// <para>
    /// A reference name value referring to Parcel.name attribute.
    /// </para>
    /// </summary>
    public sealed class parcelNameRef {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), null);
        
        private parcelNameRef() {
        }
    }
    
    /// <summary>
    /// <para>
    /// A list of reference names values refering to one or more Parcel.name attributes.
    /// </para>
    /// </summary>
    public sealed class parcelNameRefs {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.ListSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), null, new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), null));
        
        private parcelNameRefs() {
        }
    }
    
    /// <summary>
    /// <para>
    /// A reference name value referring to PlanFeature.name attribute.
    /// </para>
    /// </summary>
    public sealed class planFeatureNameRef {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), null);
        
        private planFeatureNameRef() {
        }
    }
    
    /// <summary>
    /// <para>
    /// A list of reference names values refering to one or more PlanFeature.name attributes.
    /// </para>
    /// </summary>
    public sealed class planFeatureNameRefs {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.ListSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), null, new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), null));
        
        private planFeatureNameRefs() {
        }
    }
    
    /// <summary>
    /// <para>
    /// A reference name value referring to CoordGeom.name attribute.
    /// </para>
    /// </summary>
    public sealed class coordGeomNameRef {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), null);
        
        private coordGeomNameRef() {
        }
    }
    
    /// <summary>
    /// <para>
    /// A list of reference names values refering to one or more CoordGeom.name attributes.
    /// </para>
    /// </summary>
    public sealed class coordGeomNameRefs {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.ListSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), null, new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), null));
        
        private coordGeomNameRefs() {
        }
    }
    
    /// <summary>
    /// <para>
    /// A reference name value referring to Pipe.name attribute.
    /// </para>
    /// </summary>
    public sealed class pipeNameRef {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), null);
        
        private pipeNameRef() {
        }
    }
    
    /// <summary>
    /// <para>
    /// A list of reference names values refering to one or more Pipe.name attributes.
    /// </para>
    /// </summary>
    public sealed class pipeNameRefs {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.ListSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), null, new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), null));
        
        private pipeNameRefs() {
        }
    }
    
    /// <summary>
    /// <para>
    /// A reference name value referring to Struct.name attribute.
    /// </para>
    /// </summary>
    public sealed class structNameRef {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), null);
        
        private structNameRef() {
        }
    }
    
    /// <summary>
    /// <para>
    /// A list of reference names values refering to one or more Struct.name attributes.
    /// </para>
    /// </summary>
    public sealed class structNameRefs {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.ListSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), null, new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), null));
        
        private structNameRefs() {
        }
    }
    
    /// <summary>
    /// <para>
    /// A reference name value referring to monument.name attribute.
    /// </para>
    /// </summary>
    public sealed class monumentNameRef {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), null);
        
        private monumentNameRef() {
        }
    }
    
    /// <summary>
    /// <para>
    /// A reference name value referring to WaterShed.name attribute.
    /// </para>
    /// </summary>
    public sealed class waterShedNameRef {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), null);
        
        private waterShedNameRef() {
        }
    }
    
    /// <summary>
    /// <para>
    /// A reference name value referring to Raodway.name attribute.
    /// </para>
    /// </summary>
    public sealed class roadwayNameRef {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), null);
        
        private roadwayNameRef() {
        }
    }
    
    /// <summary>
    /// <para>
    /// A list of reference names values refering to one or more Roadway.name attributes.				
    /// </para>
    /// </summary>
    public sealed class roadwayNameRefs {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.ListSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), null, new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), null));
        
        private roadwayNameRefs() {
        }
    }
    
    /// <summary>
    /// <para>
    /// A reference name value referring to GradeModel.name attribute.
    /// </para>
    /// </summary>
    public sealed class gradeModelNameRef {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), null);
        
        private gradeModelNameRef() {
        }
    }
    
    /// <summary>
    /// <para>
    /// A list of reference names values refering to one or more GradeModel.name attributes.
    /// </para>
    /// </summary>
    public sealed class gradeModelNameRefs {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.ListSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), null, new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), null));
        
        private gradeModelNameRefs() {
        }
    }
    
    /// <summary>
    /// <para>
    /// A Feature element name attribute reference value refering to one Feature.name attribute.
    /// </para>
    /// </summary>
    public sealed class featureNameRef {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), null);
        
        private featureNameRef() {
        }
    }
    
    public sealed class surveyRoleType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "measured",
                        "to stake out",
                        "staked out",
                        "calculated",
                        "assistance point",
                        "user entered point",
                        "control point"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private surveyRoleType() {
        }
    }
    
    public enum observationStatusType {
        
        modified,
        
        deleted,
    }
    
    public sealed class observationStatusTypeValidator {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "modified",
                        "deleted"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private observationStatusTypeValidator() {
        }
    }
    
    /// <summary>
    /// <para>
    /// Indicates any structure that protects the
    ///		monument, these enumerations may need expanding
    /// </para>
    /// </summary>
    public sealed class beaconProtectionType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "cover",
                        "cover and box",
                        "fence enclosure",
                        "marker post",
                        "no protection",
                        "other",
                        "quadripod",
                        "unknown"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private beaconProtectionType() {
        }
    }
    
    /// <summary>
    /// <para>
    /// Indicates whether there is any physical structure
    ///			for the monument - helps location, these enumerations may need expanding
    ///			
    /// </para>
    /// </summary>
    public sealed class beaconType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "cairn",
                        "chimney",
                        "large quadripod",
                        "lighthouse",
                        "marine beacon",
                        "mast",
                        "mast with targets",
                        "no beacon",
                        "other",
                        "pillar",
                        "post",
                        "small quadripod",
                        "tower",
                        "tripod",
                        "unknown"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private beaconType() {
        }
    }
    
    public enum clockwise {
        
        cw,
        
        ccw,
    }
    
    public sealed class clockwiseValidator {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "cw",
                        "ccw"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private clockwiseValidator() {
        }
    }
    
    public enum curveType {
        
        arc,
        
        chord,
    }
    
    public sealed class curveTypeValidator {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "arc",
                        "chord"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private curveTypeValidator() {
        }
    }
    
    public sealed class DTMAttributeType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "determinebyfeature",
                        "donotinclude",
                        "spot",
                        "spotandbreak",
                        "void",
                        "drapevoid",
                        "breakvoid",
                        "island",
                        "boundary",
                        "contour",
                        "feature",
                        "ground",
                        "xsection",
                        "user"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private DTMAttributeType() {
        }
    }
    
    /// <summary>
    /// <para>
    /// The GPS solution type indicates the type of computed solution for a GPS vector or position
    /// </para>
    /// </summary>
    public sealed class GPSSolutionTypeEnum {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "Unknown",
                        "Code",
                        "Float",
                        "Fixed",
                        "Network Float",
                        "Network Fixed",
                        "WAAS Float",
                        "WAAS Fixed"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private GPSSolutionTypeEnum() {
        }
    }
    
    /// <summary>
    /// <para>
    /// The GPS solution frequency indicates the GPS frequencies used in the computed solution for a GPS vector or position 
    /// </para>
    /// </summary>
    public sealed class GPSSolutionFrequencyEnum {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "Unknown",
                        "L1",
                        "L2",
                        "L2 Squared",
                        "Wide Lane",
                        "Narrow Lane",
                        "Iono Free"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private GPSSolutionFrequencyEnum() {
        }
    }
    
    public enum impArea {
        
        acre,
        
        squareFoot,
        
        squareInch,
        
        squareMiles,
    }
    
    public sealed class impAreaValidator {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "acre",
                        "squareFoot",
                        "squareInch",
                        "squareMiles"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private impAreaValidator() {
        }
    }
    
    public enum impLinear {
        
        foot,
        
        USSurveyFoot,
        
        inch,
        
        mile,
    }
    
    public sealed class impLinearValidator {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "foot",
                        "USSurveyFoot",
                        "inch",
                        "mile"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private impLinearValidator() {
        }
    }
    
    public enum impPressure {
        
        inchHG,
        
        inHG,
    }
    
    public sealed class impPressureValidator {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "inchHG",
                        "inHG"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private impPressureValidator() {
        }
    }
    
    public enum impTemperature {
        
        fahrenheit,
        
        kelvin,
    }
    
    public sealed class impTemperatureValidator {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "fahrenheit",
                        "kelvin"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private impTemperatureValidator() {
        }
    }
    
    public enum impDiameter {
        
        foot,
        
        USSurveyFoot,
        
        inch,
    }
    
    public sealed class impDiameterValidator {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "foot",
                        "USSurveyFoot",
                        "inch"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private impDiameterValidator() {
        }
    }
    
    public enum impWidth {
        
        foot,
        
        USSurveyFoot,
        
        inch,
    }
    
    public sealed class impWidthValidator {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "foot",
                        "USSurveyFoot",
                        "inch"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private impWidthValidator() {
        }
    }
    
    public enum impHeight {
        
        foot,
        
        USSurveyFoot,
        
        inch,
    }
    
    public sealed class impHeightValidator {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "foot",
                        "USSurveyFoot",
                        "inch"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private impHeightValidator() {
        }
    }
    
    public enum impFlow {
        
        US_gallonPerDay,
        
        IMP_gallonPerDay,
        
        cubicFeetDay,
        
        US_gallonPerMinute,
        
        IMP_gallonPerMinute,
        
        acreFeetDay,
        
        cubicFeetSecond,
    }
    
    public sealed class impFlowValidator {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "US_gallonPerDay",
                        "IMP_gallonPerDay",
                        "cubicFeetDay",
                        "US_gallonPerMinute",
                        "IMP_gallonPerMinute",
                        "acreFeetDay",
                        "cubicFeetSecond"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private impFlowValidator() {
        }
    }
    
    public enum impVolume {
        
        US_gallon,
        
        IMP_gallon,
        
        cubicInch,
        
        cubicFeet,
        
        cubicYard,
        
        acreFeet,
    }
    
    public sealed class impVolumeValidator {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "US_gallon",
                        "IMP_gallon",
                        "cubicInch",
                        "cubicFeet",
                        "cubicYard",
                        "acreFeet"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private impVolumeValidator() {
        }
    }
    
    public enum impVelocity {
        
        feetPerSecond,
        
        milesPerHour,
    }
    
    public sealed class impVelocityValidator {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "feetPerSecond",
                        "milesPerHour"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private impVelocityValidator() {
        }
    }
    
    public sealed class inOut {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "in",
                        "out",
                        "both"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private inOut() {
        }
    }
    
    public enum metArea {
        
        hectare,
        
        squareMeter,
        
        squareMillimeter,
        
        squareCentimeter,
    }
    
    public sealed class metAreaValidator {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "hectare",
                        "squareMeter",
                        "squareMillimeter",
                        "squareCentimeter"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private metAreaValidator() {
        }
    }
    
    public enum metLinear {
        
        millimeter,
        
        centimeter,
        
        meter,
        
        kilometer,
    }
    
    public sealed class metLinearValidator {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "millimeter",
                        "centimeter",
                        "meter",
                        "kilometer"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private metLinearValidator() {
        }
    }
    
    public enum metDiameter {
        
        millimeter,
        
        centimeter,
        
        meter,
        
        kilometer,
    }
    
    public sealed class metDiameterValidator {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "millimeter",
                        "centimeter",
                        "meter",
                        "kilometer"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private metDiameterValidator() {
        }
    }
    
    public enum metWidth {
        
        millimeter,
        
        centimeter,
        
        meter,
        
        kilometer,
    }
    
    public sealed class metWidthValidator {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "millimeter",
                        "centimeter",
                        "meter",
                        "kilometer"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private metWidthValidator() {
        }
    }
    
    public enum metHeight {
        
        millimeter,
        
        centimeter,
        
        meter,
        
        kilometer,
    }
    
    public sealed class metHeightValidator {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "millimeter",
                        "centimeter",
                        "meter",
                        "kilometer"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private metHeightValidator() {
        }
    }
    
    public enum metPressure {
        
        HPA,
        
        milliBars,
        
        mmHG,
        
        millimeterHG,
    }
    
    public sealed class metPressureValidator {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "HPA",
                        "milliBars",
                        "mmHG",
                        "millimeterHG"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private metPressureValidator() {
        }
    }
    
    public enum metTemperature {
        
        celsius,
        
        kelvin,
    }
    
    public sealed class metTemperatureValidator {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "celsius",
                        "kelvin"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private metTemperatureValidator() {
        }
    }
    
    public enum metVolume {
        
        cubicMeter,
        
        liter,
        
        hectareMeter,
    }
    
    public sealed class metVolumeValidator {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "cubicMeter",
                        "liter",
                        "hectareMeter"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private metVolumeValidator() {
        }
    }
    
    public enum metVelocity {
        
        metersPerSecond,
        
        kilometersPerHour,
    }
    
    public sealed class metVelocityValidator {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "metersPerSecond",
                        "kilometersPerHour"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private metVelocityValidator() {
        }
    }
    
    public enum metFlow {
        
        cubicMeterSecond,
        
        literPerSecond,
        
        literPerMinute,
    }
    
    public sealed class metFlowValidator {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "cubicMeterSecond",
                        "literPerSecond",
                        "literPerMinute"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private metFlowValidator() {
        }
    }
    
    /// <summary>
    /// <para>
    /// This indicates the category of a geodetic Monument
    /// </para>
    /// </summary>
    public sealed class monumentCategory {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "benchmark",
                        "central",
                        "reference",
                        "rural",
                        "standard traverse",
                        "urban standard traverse"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private monumentCategory() {
        }
    }
    
    /// <summary>
    /// <para>
    /// This is an extension of the LandXML state type, but is specific to parcels
    /// </para>
    /// </summary>
    public enum parcelStateType {
        
        affected,
        
        created,
        
        encroached,
        
        extinguished,
        
        referenced,
        
        proposed,
        
        existing,
        
        adjoining,
    }
    
    /// <summary>
    /// <para>
    /// This is an extension of the LandXML state type, but is specific to parcels
    /// </para>
    /// </summary>
    public sealed class parcelStateTypeValidator {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "affected",
                        "created",
                        "encroached",
                        "extinguished",
                        "referenced",
                        "proposed",
                        "existing",
                        "adjoining"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private parcelStateTypeValidator() {
        }
    }
    
    public enum pipeNetworkType {
        
        sanitary,
        
        storm,
        
        water,
        
        other,
    }
    
    public sealed class pipeNetworkTypeValidator {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "sanitary",
                        "storm",
                        "water",
                        "other"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private pipeNetworkTypeValidator() {
        }
    }
    
    /// <summary>
    /// <para>
    /// Used by many of the Survey elements
    /// </para>
    /// </summary>
    public enum purposeType {
        
        normal,
        
        check,
        
        backsight,
        
        foresight,
        
        traverse,
        
        sideshot,
        
        resection,
        
        levelLoop,
        
        digitalLevel,
        
        remoteElevation,
        
        recipricalObservation,
        
        topo,
        
        cutSheets,
        
        asbuilt,
    }
    
    /// <summary>
    /// <para>
    /// Used by many of the Survey elements
    /// </para>
    /// </summary>
    public sealed class purposeTypeValidator {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "normal",
                        "check",
                        "backsight",
                        "foresight",
                        "traverse",
                        "sideshot",
                        "resection",
                        "levelLoop",
                        "digitalLevel",
                        "remoteElevation",
                        "recipricalObservation",
                        "topo",
                        "cutSheets",
                        "asbuilt"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private purposeTypeValidator() {
        }
    }
    
    public enum sideType {
        
        right,
        
        left,
    }
    
    public sealed class sideTypeValidator {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "right",
                        "left"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private sideTypeValidator() {
        }
    }
    
    public enum spiralType {
        
        biquadratic,
        
        bloss,
        
        clothoid,
        
        cosine,
        
        cubic,
        
        sinusoid,
        
        revBiquadratic,
        
        revBloss,
        
        revCosine,
        
        revSinusoid,
        
        sineHalfWave,
        
        biquadraticParabola,
        
        cubicParabola,
        
        japaneseCubic,
        
        radioid,
        
        weinerBogen,
    }
    
    public sealed class spiralTypeValidator {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "biquadratic",
                        "bloss",
                        "clothoid",
                        "cosine",
                        "cubic",
                        "sinusoid",
                        "revBiquadratic",
                        "revBloss",
                        "revCosine",
                        "revSinusoid",
                        "sineHalfWave",
                        "biquadraticParabola",
                        "cubicParabola",
                        "japaneseCubic",
                        "radioid",
                        "weinerBogen"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private spiralTypeValidator() {
        }
    }
    
    public enum stateType {
        
        abandoned,
        
        destroyed,
        
        existing,
        
        proposed,
    }
    
    public sealed class stateTypeValidator {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "abandoned",
                        "destroyed",
                        "existing",
                        "proposed"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private stateTypeValidator() {
        }
    }
    
    /// <summary>
    /// <para>
    /// Surface boundaries can be one of three types: outer, void, island
    /// </para>
    /// </summary>
    public sealed class surfBndType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "outer",
                        "void",
                        "island"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private surfBndType() {
        }
    }
    
    /// <summary>
    /// <para>
    /// Represents a face on a 3D surface by referencing points from the Pnts collection"
    /// </para>
    /// <para>
    /// The number of poitns are determined by the surfType attrinute: 3 for TIN, 4 for grid
    /// </para>
    /// <para>
    /// Note: TIN is the acronym for "triangulated irregular network"
    /// </para>
    /// <para>
    /// The point references are stored as a space delimited text value in the form of "id id id"
    /// </para>
    /// <para>
    /// Example, "62 68 44" for TIN, ""62 68 44 71" for Grid
    /// </para>
    /// </summary>
    public sealed class surfFaceType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.ListSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.PositiveInteger), null, new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.PositiveInteger), null));
        
        private surfFaceType() {
        }
    }
    
    /// <summary>
    /// <para>
    /// TIN is the acronym for "triangulated irregular network", a surface comprised of 3 point faces
    /// </para>
    /// <para>
    /// grid is a surface comprised of 4 point faces.
    /// </para>
    /// </summary>
    public enum surfTypeEnum {
        
        TIN,
        
        grid,
    }
    
    /// <summary>
    /// <para>
    /// TIN is the acronym for "triangulated irregular network", a surface comprised of 3 point faces
    /// </para>
    /// <para>
    /// grid is a surface comprised of 4 point faces.
    /// </para>
    /// </summary>
    public sealed class surfTypeEnumValidator {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "TIN",
                        "grid"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private surfTypeEnumValidator() {
        }
    }
    
    public enum surfVolCMethodType {
        
        grid,
        
        composite,
    }
    
    public sealed class surfVolCMethodTypeValidator {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "grid",
                        "composite"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private surfVolCMethodTypeValidator() {
        }
    }
    
    /// <summary>
    /// <para>
    /// This enumeration indicates whether the survey was acutally performed in the field, compiled from a series of existing surveys, or simply computed using known observations and maths
    /// </para>
    /// </summary>
    public enum surveyType {
        
        compiled,
        
        computed,
        
        surveyed,
    }
    
    /// <summary>
    /// <para>
    /// This enumeration indicates whether the survey was acutally performed in the field, compiled from a series of existing surveys, or simply computed using known observations and maths
    /// </para>
    /// </summary>
    public sealed class surveyTypeValidator {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "compiled",
                        "computed",
                        "surveyed"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private surveyTypeValidator() {
        }
    }
    
    /// <summary>
    /// <para>
    /// Optional COGO Point attribute to designate the survey point type.
    /// </para>
    /// </summary>
    public sealed class survPntType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "monument",
                        "control",
                        "sideshot",
                        "boundary",
                        "natural boundary",
                        "traverse",
                        "reference",
                        "administrative"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private survPntType() {
        }
    }
    
    public enum xsVolCalcMethodType {
        
        AverageEndArea,
        
        Prismoidal,
    }
    
    public sealed class xsVolCalcMethodTypeValidator {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "AverageEndArea",
                        "Prismoidal"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private xsVolCalcMethodTypeValidator() {
        }
    }
    
    /// <summary>
    /// <para>
    /// Parcel Format describes how the parcel is described , ie Standard (2D), Volumertric (3D)
    /// </para>
    /// </summary>
    public sealed class parcelFormat {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), null);
        
        private parcelFormat() {
        }
    }
    
    /// <summary>
    /// <para>
    /// Describes what the parcel is used for.  This would be a jurisdictionally specific list.
    /// </para>
    /// </summary>
    public sealed class useOfParcelType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), null);
        
        private useOfParcelType() {
        }
    }
    
    /// <summary>
    /// <para>
    /// Describes the type of title interest this parcel represents, the list will be jurisdictionally specific
    /// </para>
    /// </summary>
    public sealed class titleTypeType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), null);
        
        private titleTypeType() {
        }
    }
    
    /// <summary>
    /// <para>
    /// Describes the format of the survey and is a jurisdictionally specific list for example a stand format survey, Building Format Survey.
    /// </para>
    /// </summary>
    public sealed class surveyFormatType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), null);
        
        private surveyFormatType() {
        }
    }
    
    /// <summary>
    /// <para>
    /// Details the legislation or regulation under which the survey was conducted, for example the Land Title Act2003 This list will be juridictionnally specific.
    /// </para>
    /// </summary>
    public sealed class headOfPowerType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), null);
        
        private headOfPowerType() {
        }
    }
    
    /// <summary>
    /// <para>
    /// This field identifes the legal status for this document, for example it is the leagal record of survey, if was data captured from historical data etc.  This is used to determine processing of the record
    /// </para>
    /// </summary>
    public sealed class documentStatusType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), null);
        
        private documentStatusType() {
        }
    }
    
    /// <summary>
    /// <para>
    /// Defines the status of this version of the file and will be a jurisdictionally specific list, for example "survey Record Only", Suitable for Registration" etc
    /// </para>
    /// </summary>
    public sealed class surveyStatusType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), null);
        
        private surveyStatusType() {
        }
    }
    
    /// <summary>
    /// <para>
    /// This is a jurdictionally specific list of types and may include parish, town, local government, locality etc
    /// </para>
    /// </summary>
    public sealed class adminAreaTypeType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), null);
        
        private adminAreaTypeType() {
        }
    }
    
    /// <summary>
    /// <para>
    /// An Annotation will be a specific type within a jurisdiction. 
    /// </para>
    /// </summary>
    public sealed class annotationType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), null);
        
        private annotationType() {
        }
    }
    
    /// <summary>
    /// <para>
    /// This is the name of the juridiction in which the Survey Lies (ie which state)
    /// </para>
    /// </summary>
    public sealed class jurisdictionType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), null);
        
        private jurisdictionType() {
        }
    }
    
    public sealed class zoneNumberType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.PositiveInteger), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(320)), null, 0, 0, null, 99m, 0, null, 1m, 0, null, 0, XmlSchemaWhiteSpace.Collapse));
        
        private zoneNumberType() {
        }
    }
    
    /// <summary>
    /// <para>
    /// This is the name of the admin date type for the Survey
    /// </para>
    /// </summary>
    public sealed class adminDateTypeType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), null);
        
        private adminDateTypeType() {
        }
    }
    
    public sealed class designLocationType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "Final Surface",
                        "Datum",
                        "Intermediate"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private designLocationType() {
        }
    }
    
    public sealed class dataFormatType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "Offset Elevation",
                        "Slope Distance"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private dataFormatType() {
        }
    }
    
    public enum connectionType {
        
        inner,
        
        outer,
        
        dayLight,
    }
    
    public sealed class connectionTypeValidator {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "inner",
                        "outer",
                        "dayLight"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private connectionTypeValidator() {
        }
    }
    
    /// <summary>
    /// <para>
    /// This Type is to define a ljurisdictional specific list of address types such a primary addres, alias, secondary, historical etc.
    /// </para>
    /// </summary>
    public sealed class addressTypeType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), null);
        
        private addressTypeType() {
        }
    }
    
    /// <summary>
    /// <para>
    /// To define a Jurisdictional specific list of address living unit types for addressing
    /// </para>
    /// </summary>
    public sealed class flatTypeType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), null);
        
        private flatTypeType() {
        }
    }
    
    /// <summary>
    /// <para>
    /// to Allow a list of specific road suffixes to be specified, ie east, upper etc (ie Fred Street East)
    /// </para>
    /// </summary>
    public sealed class roadNameSuffixType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), null);
        
        private roadNameSuffixType() {
        }
    }
    
    /// <summary>
    /// <para>
    /// To define if the road is a public or private road.
    /// </para>
    /// </summary>
    public sealed class roadTypeType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), null);
        
        private roadTypeType() {
        }
    }
    
    /// <summary>
    /// <para>
    /// to define a jurisdictionally specific list of Road name types such a street, road, avenue etc.
    /// </para>
    /// </summary>
    public sealed class roadNameTypeType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), null);
        
        private roadNameTypeType() {
        }
    }
    
    /// <summary>
    /// <para>
    /// To define a jurisdictionally specific list of floo level types for example, Lower Ground Floor
    /// </para>
    /// </summary>
    public sealed class floorLevelTypeType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), null);
        
        private floorLevelTypeType() {
        }
    }
    
    /// <summary>
    /// <para>
    /// This is a string to define the type of Geocode that the address point is for examplecentroid of parcel, Access Point etc.  This will be a jurisdictionally based list.
    /// </para>
    /// </summary>
    public sealed class addressPointTypeType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), null);
        
        private addressPointTypeType() {
        }
    }
    
    /// <summary>
    /// <para>
    /// This is a jurisdictionally based list of classes of registration for a surveyor.  This allows validation of the surveyors role in the survey for legal traceablity.
    /// </para>
    /// </summary>
    public sealed class registrationType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), null);
        
        private registrationType() {
        }
    }
    
    /// <summary>
    /// <para>
    /// This is a jurisdictionally based list of roles that a surveyor can undertake within a survey for example field hand, authorising surveyor, technician.
    /// </para>
    /// </summary>
    public sealed class surveyorRoleType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), null);
        
        private surveyorRoleType() {
        }
    }
    
    /// <summary>
    /// <para>
    /// This is a jurisdictionally based list of purposes of Survey and can be jurisdictionally specific for example Subdivision, Identification (re-peg), Amalgamation (Consolidation) etc
    /// </para>
    /// </summary>
    public sealed class purpSurvType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), null);
        
        private purpSurvType() {
        }
    }
    
    /// <summary>
    /// <para>
    /// This is a jurisdictionally based list of exclusions for a Title example would be exclusions for Road, Track, Esplanade etc 
    /// </para>
    /// </summary>
    public sealed class exclusType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), null);
        
        private exclusType() {
        }
    }
    
    /// <summary>
    /// <para>
    /// This is a list of purposes that the monument was used for on this survey.  The desired list may be based on local regulations. 
    /// </para>
    /// </summary>
    public sealed class monumentPurpose {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), null);
        
        private monumentPurpose() {
        }
    }
    
    /// <summary>
    /// <para>
    /// This is a list of states for a monument each  jurisdiction may haqve a list defined by regulation. 
    /// </para>
    /// </summary>
    public sealed class monumentState {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), null);
        
        private monumentState() {
        }
    }
    
    /// <summary>
    /// <para>
    /// This is a list of parcel classes which may be jurisdictionally specific defined by regulation and legislation.
    /// </para>
    /// </summary>
    public sealed class parcelClass {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), null);
        
        private parcelClass() {
        }
    }
    
    /// <summary>
    /// <para>
    /// This is a list of allowable monument types that can be used or identified for a survey, ie peg, spike, pillar etc. Local custom will define this list.
    /// </para>
    /// </summary>
    public sealed class monumentType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), null);
        
        private monumentType() {
        }
    }
    
    /// <summary>
    /// <para>
    /// This is a list of defined observation types, different jurisdictions may have a list defined by regulation can be defined by the jurisdiction. 
    /// </para>
    /// </summary>
    public sealed class observationType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), null);
        
        private observationType() {
        }
    }
    
    /// <summary>
    /// <para>
    /// This gives a list of equipment used for the observation this list of equipment is used to estimate the accuracy of the observation.. 
    /// </para>
    /// </summary>
    public sealed class equipmentType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), null);
        
        private equipmentType() {
        }
    }
    
    /// <summary>
    /// <para>
    /// This gives a list of allowable local conditions defined by regulation can be defined by the jurisdiction. 
    /// </para>
    /// </summary>
    public sealed class monumentCondition {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), null);
        
        private monumentCondition() {
        }
    }
    
    /// <summary>
    /// <para>
    /// A text value that is a space delimited list of doubles. It is used as the base type to define point coordinates in the form of "northing easting" or "northing easting elevation" as well as point lists of 2D or 3D points with items such as surface boundaries or "station elevation", "station offset" lists for items such as profiles and cross sections: 
    ///Example, "1632.546 2391.045 240.30"
    /// </para>
    /// </summary>
    public sealed class Point {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.ListSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double), null, new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double), null));
        
        private Point() {
        }
    }
    
    public sealed class Point3dOpt {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.ListSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(6)), null, 0, 0, null, null, 3, null, null, 0, null, 0, XmlSchemaWhiteSpace.Collapse), new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double), null));
        
        private Point3dOpt() {
        }
    }
    
    public sealed class Point3dReq {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.ListSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(6)), null, 0, 0, null, null, 3, null, null, 0, null, 0, XmlSchemaWhiteSpace.Collapse), new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double), null));
        
        private Point3dReq() {
        }
    }
    
    public sealed class Point2dReq {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.ListSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(1)), null, 0, 2, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Collapse), new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double), null));
        
        private Point2dReq() {
        }
    }
    
    public enum pointGeometryType {
        
        point,
        
        curve,
    }
    
    public sealed class pointGeometryTypeValidator {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "point",
                        "curve"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private pointGeometryTypeValidator() {
        }
    }
    
    public enum breakLineType {
        
        standard,
        
        wall,
        
        proximity,
        
        nondestructive,
    }
    
    public sealed class breakLineTypeValidator {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "standard",
                        "wall",
                        "proximity",
                        "nondestructive"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private breakLineTypeValidator() {
        }
    }
    
    /// <summary>
    /// <para>
    /// All elements derived from PointType will either contain a coordinate text value ( "north east" or "north east elev"), a "pntRef" attribute value, or both. The "pntRef" attribute contains the value of a PointType derived element "name" attribute that exists elsewhere the instance data. If this element has a "pntRef" value, then it's coordinates will be retrieved from the referenced element. If an element contains both a coordinate value and a pntRef, the coordinate value should be used as the point location and the referenced point is either ignored or is used for point attributes such as number or desc.
    /// </para>
    /// <para>
    /// The featureRef attribute points to a specific named Feature element that contains feature data related to the point.
    ///			The suggested form is to refer to a feature element within the same CgPoints group or parent element of the point element.
    ///			
    /// </para>
    /// </summary>
    public partial class PointType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TypedValueXName = System.Xml.Linq.XName.Get("TypedValue", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName nameXName = System.Xml.Linq.XName.Get("name", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName descXName = System.Xml.Linq.XName.Get("desc", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName codeXName = System.Xml.Linq.XName.Get("code", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName stateXName = System.Xml.Linq.XName.Get("state", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName pntRefXName = System.Xml.Linq.XName.Get("pntRef", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName featureRefXName = System.Xml.Linq.XName.Get("featureRef", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName pointGeometryXName = System.Xml.Linq.XName.Get("pointGeometry", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName DTMAttributeXName = System.Xml.Linq.XName.Get("DTMAttribute", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName timeStampXName = System.Xml.Linq.XName.Get("timeStamp", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName roleXName = System.Xml.Linq.XName.Get("role", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName determinedTimeStampXName = System.Xml.Linq.XName.Get("determinedTimeStamp", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName ellipsoidHeightXName = System.Xml.Linq.XName.Get("ellipsoidHeight", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName latitudeXName = System.Xml.Linq.XName.Get("latitude", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName longitudeXName = System.Xml.Linq.XName.Get("longitude", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName zoneXName = System.Xml.Linq.XName.Get("zone", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName northingStdErrorXName = System.Xml.Linq.XName.Get("northingStdError", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName eastingStdErrorXName = System.Xml.Linq.XName.Get("eastingStdError", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName elevationStdErrorXName = System.Xml.Linq.XName.Get("elevationStdError", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("PointType", "http://www.landxml.org/schema/LandXML-1.2");
        
		public static explicit operator PointType(XElement xe) { return XTypedServices.ToXTypedElement<PointType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// All elements derived from PointType will either contain a coordinate text value ( "north east" or "north east elev"), a "pntRef" attribute value, or both. The "pntRef" attribute contains the value of a PointType derived element "name" attribute that exists elsewhere the instance data. If this element has a "pntRef" value, then it's coordinates will be retrieved from the referenced element. If an element contains both a coordinate value and a pntRef, the coordinate value should be used as the point location and the referenced point is either ignored or is used for point attributes such as number or desc.
        /// </para>
        /// <para>
        /// The featureRef attribute points to a specific named Feature element that contains feature data related to the point.
        ///			The suggested form is to refer to a feature element within the same CgPoints group or parent element of the point element.
        ///			
        /// </para>
        /// </summary>
        public PointType() {
        }
        
        public virtual IList<double> TypedValue {
            get {
                XElement x = this.Untyped;
                return XTypedServices.ParseListValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetListValueWithValidation(value, "TypedValue", global::LandXml.v1_2.Point3dOpt.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string name {
            get {
                XAttribute x = this.Attribute(nameXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(nameXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string desc {
            get {
                XAttribute x = this.Attribute(descXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(descXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string code {
            get {
                XAttribute x = this.Attribute(codeXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(codeXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual LandXml.v1_2.stateType? state {
            get {
                XAttribute x = this.Attribute(stateXName);
                if ((x == null)) {
                    return null;
                }
                return ((LandXml.v1_2.stateType)(Enum.Parse(typeof(LandXml.v1_2.stateType), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetAttribute(stateXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string pntRef {
            get {
                XAttribute x = this.Attribute(pntRefXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(pntRefXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string featureRef {
            get {
                XAttribute x = this.Attribute(featureRefXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(featureRefXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual LandXml.v1_2.pointGeometryType? pointGeometry {
            get {
                XAttribute x = this.Attribute(pointGeometryXName);
                if ((x == null)) {
                    return null;
                }
                return ((LandXml.v1_2.pointGeometryType)(Enum.Parse(typeof(LandXml.v1_2.pointGeometryType), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetAttribute(pointGeometryXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string DTMAttribute {
            get {
                XAttribute x = this.Attribute(DTMAttributeXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(DTMAttributeXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.DateTime? timeStamp {
            get {
                XAttribute x = this.Attribute(timeStampXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<System.DateTime>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.DateTime).Datatype);
            }
            set {
                this.SetAttribute(timeStampXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.DateTime).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string role {
            get {
                XAttribute x = this.Attribute(roleXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(roleXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.DateTime? determinedTimeStamp {
            get {
                XAttribute x = this.Attribute(determinedTimeStampXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<System.DateTime>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.DateTime).Datatype);
            }
            set {
                this.SetAttribute(determinedTimeStampXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.DateTime).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Double? ellipsoidHeight {
            get {
                XAttribute x = this.Attribute(ellipsoidHeightXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetAttribute(ellipsoidHeightXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Double? latitude {
            get {
                XAttribute x = this.Attribute(latitudeXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetAttribute(latitudeXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Double? longitude {
            get {
                XAttribute x = this.Attribute(longitudeXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetAttribute(longitudeXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string zone {
            get {
                XAttribute x = this.Attribute(zoneXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(zoneXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Double? northingStdError {
            get {
                XAttribute x = this.Attribute(northingStdErrorXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetAttribute(northingStdErrorXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Double? eastingStdError {
            get {
                XAttribute x = this.Attribute(eastingStdErrorXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetAttribute(eastingStdErrorXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Double? elevationStdError {
            get {
                XAttribute x = this.Attribute(elevationStdErrorXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetAttribute(elevationStdErrorXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<PointType>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class PointType3dReq : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TypedValueXName = System.Xml.Linq.XName.Get("TypedValue", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName nameXName = System.Xml.Linq.XName.Get("name", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName descXName = System.Xml.Linq.XName.Get("desc", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName codeXName = System.Xml.Linq.XName.Get("code", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName stateXName = System.Xml.Linq.XName.Get("state", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName pntRefXName = System.Xml.Linq.XName.Get("pntRef", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName featureRefXName = System.Xml.Linq.XName.Get("featureRef", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName pointGeometryXName = System.Xml.Linq.XName.Get("pointGeometry", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName DTMAttributeXName = System.Xml.Linq.XName.Get("DTMAttribute", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName timeStampXName = System.Xml.Linq.XName.Get("timeStamp", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName roleXName = System.Xml.Linq.XName.Get("role", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("PointType3dReq", "http://www.landxml.org/schema/LandXML-1.2");
        
		public static explicit operator PointType3dReq(XElement xe) { return XTypedServices.ToXTypedElement<PointType3dReq>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public PointType3dReq() {
        }
        
        public virtual IList<double> TypedValue {
            get {
                XElement x = this.Untyped;
                return XTypedServices.ParseListValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetListValueWithValidation(value, "TypedValue", global::LandXml.v1_2.Point3dReq.TypeDefinition);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string name {
            get {
                XAttribute x = this.Attribute(nameXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(nameXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string desc {
            get {
                XAttribute x = this.Attribute(descXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(descXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string code {
            get {
                XAttribute x = this.Attribute(codeXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(codeXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual LandXml.v1_2.stateType? state {
            get {
                XAttribute x = this.Attribute(stateXName);
                if ((x == null)) {
                    return null;
                }
                return ((LandXml.v1_2.stateType)(Enum.Parse(typeof(LandXml.v1_2.stateType), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetAttribute(stateXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string pntRef {
            get {
                XAttribute x = this.Attribute(pntRefXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(pntRefXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string featureRef {
            get {
                XAttribute x = this.Attribute(featureRefXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(featureRefXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual LandXml.v1_2.pointGeometryType? pointGeometry {
            get {
                XAttribute x = this.Attribute(pointGeometryXName);
                if ((x == null)) {
                    return null;
                }
                return ((LandXml.v1_2.pointGeometryType)(Enum.Parse(typeof(LandXml.v1_2.pointGeometryType), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetAttribute(pointGeometryXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string DTMAttribute {
            get {
                XAttribute x = this.Attribute(DTMAttributeXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(DTMAttributeXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.DateTime? timeStamp {
            get {
                XAttribute x = this.Attribute(timeStampXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<System.DateTime>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.DateTime).Datatype);
            }
            set {
                this.SetAttribute(timeStampXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.DateTime).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string role {
            get {
                XAttribute x = this.Attribute(roleXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(roleXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<PointType3dReq>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// A text value that is a space delimited list of CgPoint names that form a linear connected chain. 
    ///			example: 1 23 45 34
    ///			represents a linear connection between CgPoint name 1, 23, 45 and 34.
    ///			
    /// </para>
    /// </summary>
    public sealed class ChainType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.ListSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), null, LandXml.v1_2.pointNameRef.TypeDefinition);
        
        private ChainType() {
        }
    }
    
    /// <summary>
    /// <para>
    /// angular values expressed in "decimal dd.mm.ss" units have the numeric
    ///			format "45.3025" representing 45 degrees 30 minutes and 25 seconds. Both the minutes and seconds must be two characters with a numeric range between 00 to 60.
    ///			
    /// </para>
    /// </summary>
    public sealed class angularType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "radians",
                        "grads",
                        "decimal degrees",
                        "decimal dd.mm.ss"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private angularType() {
        }
    }
    
    /// <summary>
    /// <para>
    /// Regular expression: (TargetPoint, OffsetVals?, (FieldNote* | Feature*)*)
    /// </para>
    /// </summary>
    public partial class RawObservationType : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TargetPointXName = System.Xml.Linq.XName.Get("TargetPoint", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName OffsetValsXName = System.Xml.Linq.XName.Get("OffsetVals", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName FieldNoteXName = System.Xml.Linq.XName.Get("FieldNote", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<FieldNote> FieldNoteField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName FeatureXName = System.Xml.Linq.XName.Get("Feature", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedList<Feature> FeatureField;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName setupIDXName = System.Xml.Linq.XName.Get("setupID", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName targetSetupIDXName = System.Xml.Linq.XName.Get("targetSetupID", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName setIDXName = System.Xml.Linq.XName.Get("setID", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName purposeXName = System.Xml.Linq.XName.Get("purpose", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName targetHeightXName = System.Xml.Linq.XName.Get("targetHeight", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName horizAngleXName = System.Xml.Linq.XName.Get("horizAngle", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName slopeDistanceXName = System.Xml.Linq.XName.Get("slopeDistance", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName zenithAngleXName = System.Xml.Linq.XName.Get("zenithAngle", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName horizDistanceXName = System.Xml.Linq.XName.Get("horizDistance", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName vertDistanceXName = System.Xml.Linq.XName.Get("vertDistance", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName azimuthXName = System.Xml.Linq.XName.Get("azimuth", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName unusedXName = System.Xml.Linq.XName.Get("unused", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName directFaceXName = System.Xml.Linq.XName.Get("directFace", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName coordGeomRefsXName = System.Xml.Linq.XName.Get("coordGeomRefs", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName timeStampXName = System.Xml.Linq.XName.Get("timeStamp", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName alignRefXName = System.Xml.Linq.XName.Get("alignRef", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName alignStationNameXName = System.Xml.Linq.XName.Get("alignStationName", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName alignOffsetXName = System.Xml.Linq.XName.Get("alignOffset", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName upperStadiaXName = System.Xml.Linq.XName.Get("upperStadia", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName rodXName = System.Xml.Linq.XName.Get("rod", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName lowerStadiaXName = System.Xml.Linq.XName.Get("lowerStadia", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName circlePositionSetXName = System.Xml.Linq.XName.Get("circlePositionSet", "");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName statusXName = System.Xml.Linq.XName.Get("status", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("RawObservationType", "http://www.landxml.org/schema/LandXML-1.2");
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static Dictionary<System.Xml.Linq.XName, System.Type> localElementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static ContentModelEntity contentModel;
        
		public static explicit operator RawObservationType(XElement xe) { return XTypedServices.ToXTypedElement<RawObservationType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        static RawObservationType() {
            BuildElementDictionary();
            contentModel = new SequenceContentModelEntity(new NamedContentModelEntity(TargetPointXName), new NamedContentModelEntity(OffsetValsXName), new ChoiceContentModelEntity(new NamedContentModelEntity(FieldNoteXName), new NamedContentModelEntity(FeatureXName)));
        }
        
        /// <summary>
        /// <para>
        /// Regular expression: (TargetPoint, OffsetVals?, (FieldNote* | Feature*)*)
        /// </para>
        /// </summary>
        public RawObservationType() {
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: required
        /// </para>
        /// <para>
        /// Regular expression: (TargetPoint, OffsetVals?, (FieldNote* | Feature*)*)
        /// </para>
        /// </summary>
        public virtual TargetPoint TargetPoint {
            get {
                XElement x = this.GetElement(TargetPointXName);
                return ((TargetPoint)(x));
            }
            set {
                this.SetElement(TargetPointXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// <para>
        /// Regular expression: (TargetPoint, OffsetVals?, (FieldNote* | Feature*)*)
        /// </para>
        /// </summary>
        public virtual OffsetVals OffsetVals {
            get {
                XElement x = this.GetElement(OffsetValsXName);
                return ((OffsetVals)(x));
            }
            set {
                this.SetElement(OffsetValsXName, value);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (TargetPoint, OffsetVals?, (FieldNote* | Feature*)*)
        /// </para>
        /// </summary>
        public virtual IList<FieldNote> FieldNote {
            get {
                if ((this.FieldNoteField == null)) {
                    this.FieldNoteField = new XTypedList<FieldNote>(this, LinqToXsdTypeManager.Instance, FieldNoteXName);
                }
                return this.FieldNoteField;
            }
            set {
                if ((value == null)) {
                    this.FieldNoteField = null;
                }
                else {
                    if ((this.FieldNoteField == null)) {
                        this.FieldNoteField = XTypedList<FieldNote>.Initialize(this, LinqToXsdTypeManager.Instance, value, FieldNoteXName);
                    }
                    else {
                        XTypedServices.SetList<FieldNote>(this.FieldNoteField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional, repeating, choice
        /// </para>
        /// <para>
        /// Setter: Appends
        /// </para>
        /// <para>
        /// Regular expression: (TargetPoint, OffsetVals?, (FieldNote* | Feature*)*)
        /// </para>
        /// </summary>
        public virtual IList<Feature> Feature {
            get {
                if ((this.FeatureField == null)) {
                    this.FeatureField = new XTypedList<Feature>(this, LinqToXsdTypeManager.Instance, FeatureXName);
                }
                return this.FeatureField;
            }
            set {
                if ((value == null)) {
                    this.FeatureField = null;
                }
                else {
                    if ((this.FeatureField == null)) {
                        this.FeatureField = XTypedList<Feature>.Initialize(this, LinqToXsdTypeManager.Instance, value, FeatureXName);
                    }
                    else {
                        XTypedServices.SetList<Feature>(this.FeatureField, value);
                    }
                }
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string setupID {
            get {
                XAttribute x = this.Attribute(setupIDXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Idref).Datatype);
            }
            set {
                this.SetAttribute(setupIDXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Idref).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string targetSetupID {
            get {
                XAttribute x = this.Attribute(targetSetupIDXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Idref).Datatype);
            }
            set {
                this.SetAttribute(targetSetupIDXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Idref).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string setID {
            get {
                XAttribute x = this.Attribute(setIDXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
            set {
                this.SetAttribute(setIDXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.AnyAtomicType).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual LandXml.v1_2.purposeType? purpose {
            get {
                XAttribute x = this.Attribute(purposeXName);
                if ((x == null)) {
                    return null;
                }
                return ((LandXml.v1_2.purposeType)(Enum.Parse(typeof(LandXml.v1_2.purposeType), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetAttribute(purposeXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Double? targetHeight {
            get {
                XAttribute x = this.Attribute(targetHeightXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetAttribute(targetHeightXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Double? horizAngle {
            get {
                XAttribute x = this.Attribute(horizAngleXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetAttribute(horizAngleXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Double? slopeDistance {
            get {
                XAttribute x = this.Attribute(slopeDistanceXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetAttribute(slopeDistanceXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Double? zenithAngle {
            get {
                XAttribute x = this.Attribute(zenithAngleXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetAttribute(zenithAngleXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Double? horizDistance {
            get {
                XAttribute x = this.Attribute(horizDistanceXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetAttribute(horizDistanceXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Double? vertDistance {
            get {
                XAttribute x = this.Attribute(vertDistanceXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetAttribute(vertDistanceXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Double? azimuth {
            get {
                XAttribute x = this.Attribute(azimuthXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetAttribute(azimuthXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Boolean? unused {
            get {
                XAttribute x = this.Attribute(unusedXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
            set {
                this.SetAttribute(unusedXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Boolean? directFace {
            get {
                XAttribute x = this.Attribute(directFaceXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<bool>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
            set {
                this.SetAttribute(directFaceXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Boolean).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual IList<string> coordGeomRefs {
            get {
                XAttribute x = this.Attribute(coordGeomRefsXName);
                return XTypedServices.ParseListValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetListAttribute(coordGeomRefsXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.DateTime? timeStamp {
            get {
                XAttribute x = this.Attribute(timeStampXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<System.DateTime>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.DateTime).Datatype);
            }
            set {
                this.SetAttribute(timeStampXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.DateTime).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string alignRef {
            get {
                XAttribute x = this.Attribute(alignRefXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(alignRefXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string alignStationName {
            get {
                XAttribute x = this.Attribute(alignStationNameXName);
                return XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetAttribute(alignStationNameXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Double? alignOffset {
            get {
                XAttribute x = this.Attribute(alignOffsetXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetAttribute(alignOffsetXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Double? upperStadia {
            get {
                XAttribute x = this.Attribute(upperStadiaXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetAttribute(upperStadiaXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Double? rod {
            get {
                XAttribute x = this.Attribute(rodXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetAttribute(rodXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Double? lowerStadia {
            get {
                XAttribute x = this.Attribute(lowerStadiaXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetAttribute(lowerStadiaXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Double? circlePositionSet {
            get {
                XAttribute x = this.Attribute(circlePositionSetXName);
                if ((x == null)) {
                    return null;
                }
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetAttribute(circlePositionSetXName, value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual LandXml.v1_2.observationStatusType? status {
            get {
                XAttribute x = this.Attribute(statusXName);
                if ((x == null)) {
                    return null;
                }
                return ((LandXml.v1_2.observationStatusType)(Enum.Parse(typeof(LandXml.v1_2.observationStatusType), XTypedServices.ParseValue<string>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype))));
            }
            set {
                this.SetAttribute(statusXName, value?.ToString(), XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                return localElementDictionary;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Fragment;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<RawObservationType>(this);
        }
        
        private static void BuildElementDictionary() {
            localElementDictionary.Add(TargetPointXName, typeof(TargetPoint));
            localElementDictionary.Add(OffsetValsXName, typeof(OffsetVals));
            localElementDictionary.Add(FieldNoteXName, typeof(FieldNote));
            localElementDictionary.Add(FeatureXName, typeof(Feature));
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return contentModel;
        }
    }
    
    public sealed class FaceType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.ListSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer), null, new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer), null));
        
        private FaceType() {
        }
    }
    
    public enum stationIncrementDirectionType {
        
        increasing,
        
        decreasing,
    }
    
    public sealed class stationIncrementDirectionTypeValidator {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "increasing",
                        "decreasing"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private stationIncrementDirectionTypeValidator() {
        }
    }
    
    public sealed class zoneCategoryType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "road surface",
                        "road subsurface",
                        "road shoulder",
                        "road foreSlope",
                        "road backSlope",
                        "road curb-gutter",
                        "bridge surface",
                        "bridge body",
                        "sidewalk",
                        "ground",
                        "ditch",
                        "wall",
                        "channel",
                        "bike facilities",
                        "obstruction offset",
                        "longitudinal barrier",
                        "sound barrier",
                        "bridge abutment",
                        "vertical pillar"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private zoneCategoryType() {
        }
    }
    
    public sealed class zoneVertType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "slope",
                        "vertical distance"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private zoneVertType() {
        }
    }
    
    public enum zoneSurfaceType {
        
        finalSurface,
        
        subgrade,
    }
    
    public sealed class zoneSurfaceTypeValidator {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "finalSurface",
                        "subgrade"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private zoneSurfaceTypeValidator() {
        }
    }
    
    public sealed class zoneHingeType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "center",
                        "left edge",
                        "right edge"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private zoneHingeType() {
        }
    }
    
    public sealed class zoneMaterialType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "pavement-high-type",
                        "pavement-intermediate-type",
                        "pavement-low-type",
                        "soil",
                        "concrete",
                        "stone",
                        "riprap",
                        "turf",
                        "gravel",
                        "paved",
                        "metal",
                        "metal grate",
                        "composite",
                        "timber",
                        "other"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private zoneMaterialType() {
        }
    }
    
    public enum zoneTransitionType {
        
        parallel,
        
        linear,
    }
    
    public sealed class zoneTransitionTypeValidator {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "parallel",
                        "linear"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private zoneTransitionTypeValidator() {
        }
    }
    
    public enum zoneOffsetType {
        
        centerline,
        
        zone,
    }
    
    public sealed class zoneOffsetTypeValidator {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "centerline",
                        "zone"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private zoneOffsetTypeValidator() {
        }
    }
    
    public enum zonePlacementType {
        
        dependent,
        
        independent,
    }
    
    public sealed class zonePlacementTypeValidator {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "dependent",
                        "independent"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private zonePlacementTypeValidator() {
        }
    }
    
    public enum sideofRoadType {
        
        right,
        
        left,
        
        both,
    }
    
    public sealed class sideofRoadTypeValidator {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "right",
                        "left",
                        "both"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private sideofRoadTypeValidator() {
        }
    }
    
    public enum roadTerrainType {
        
        flat,
        
        rolling,
        
        mountainous,
    }
    
    public sealed class roadTerrainTypeValidator {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "flat",
                        "rolling",
                        "mountainous"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private roadTerrainTypeValidator() {
        }
    }
    
    public sealed class functionalClassType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "arterial",
                        "collector ",
                        "local"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private functionalClassType() {
        }
    }
    
    public sealed class adverseSEType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "non-adverse",
                        "adverse"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private adverseSEType() {
        }
    }
    
    public sealed class pavementSurfaceType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "high-type",
                        "intermediate-type",
                        "low-type"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private pavementSurfaceType() {
        }
    }
    
    public enum shoulderMaterialType {
        
        turf,
        
        gravel,
        
        paved,
        
        composite,
    }
    
    public sealed class shoulderMaterialTypeValidator {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "turf",
                        "gravel",
                        "paved",
                        "composite"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private shoulderMaterialTypeValidator() {
        }
    }
    
    public enum shoulderCategoryType {
        
        usable,
        
        graded,
    }
    
    public sealed class shoulderCategoryTypeValidator {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "usable",
                        "graded"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private shoulderCategoryTypeValidator() {
        }
    }
    
    public sealed class laneTaperType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "straight-line",
                        "partial-tangent",
                        "symmetrical-reverse-curve",
                        "asymmetrical-reverse-curve"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private laneTaperType() {
        }
    }
    
    public enum turnLaneType {
        
        left,
        
        right,
    }
    
    public sealed class turnLaneTypeValidator {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "left",
                        "right"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private turnLaneTypeValidator() {
        }
    }
    
    public sealed class ditchBottomShape {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "true-V",
                        "rounded-V",
                        "rounded-trapezoidal",
                        "flat-trapezoidal"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private ditchBottomShape() {
        }
    }
    
    public sealed class trafficControlType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "none",
                        "signal",
                        "stop",
                        "yield"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private trafficControlType() {
        }
    }
    
    public enum trafficControlPosition {
        
        side,
        
        overhead,
    }
    
    public sealed class trafficControlPositionValidator {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "side",
                        "overhead"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private trafficControlPositionValidator() {
        }
    }
    
    public sealed class trafficTurnRestriction {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "none",
                        "no-left-turn",
                        "no-right-turn",
                        "no-U-turn ",
                        "no-turn "}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private trafficTurnRestriction() {
        }
    }
    
    public sealed class intersectionConstructionType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "existing",
                        "improvement",
                        "new"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private intersectionConstructionType() {
        }
    }
    
    public enum curbType {
        
        unknown,
    }
    
    public sealed class curbTypeValidator {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "unknown"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private curbTypeValidator() {
        }
    }
    
    public enum cornerType {
        
        unknown,
    }
    
    public sealed class cornerTypeValidator {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "unknown"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private cornerTypeValidator() {
        }
    }
    
    public sealed class roadSignType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "regulatory",
                        "guide",
                        "warning",
                        "specificService",
                        "tourist",
                        "recreation-cultural",
                        "emergencyManagement"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private roadSignType() {
        }
    }
    
    public sealed class crashSeverityType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "fatal",
                        "nonfatal ",
                        "propery-damage-only"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private crashSeverityType() {
        }
    }
    
    public sealed class crashIntersectionRelation {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "unknown",
                        "non-intersection-related",
                        "intersection-related"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private crashIntersectionRelation() {
        }
    }
    
    public sealed class maneuverType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "A-stop-on-rural-road",
                        "C-speed-path-direction-change-on-rural-road"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private maneuverType() {
        }
    }
    
    public sealed class bridgeProjectType {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(16)), new object[] {
                        "new",
                        "existing"}, 0, 0, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Preserve));
        
        private bridgeProjectType() {
        }
    }
    
    /// <summary>
    /// <para>
    /// Attribute that represents a space delimited, cross section offset/elevation pair. 
    ///            Example: crossSectionPnt="12.0 723.3456"	
    ///            
    /// </para>
    /// </summary>
    public sealed class crossSectionPnt {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.ListSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double), new Xml.Schema.Linq.RestrictionFacets(((Xml.Schema.Linq.RestrictionFlags)(1)), null, 0, 2, null, null, 0, null, null, 0, null, 0, XmlSchemaWhiteSpace.Collapse), new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double), null));
        
        private crossSectionPnt() {
        }
    }
    
    /// <summary>
    /// <para>
    /// This item is the driveway density for both sides of the roadway combined. The unit of measure for this item is driveways/kilometer for Metric units and driveways/mile for Imperial. 
    /// </para>
    /// </summary>
    public sealed class drivewayDensity {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double), null);
        
        private drivewayDensity() {
        }
    }
    
    /// <summary>
    /// <para>
    /// This item is the speed or velocity of travel. The unit of measure for this item is kilometers/hour for Metric units and miles/hour for Imperial. 
    /// </para>
    /// </summary>
    public sealed class speed {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        public static Xml.Schema.Linq.SimpleTypeValidator TypeDefinition = new Xml.Schema.Linq.AtomicSimpleTypeValidator(XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double), null);
        
        private speed() {
        }
    }
    
    /// <summary>
    /// <para>
    /// All elements derived from PointType will either contain a coordinate text value ( "north east" or "north east elev"), a "pntRef" attribute value, or both. The "pntRef" attribute contains the value of a PointType derived element "name" attribute that exists elsewhere the instance data. If this element has a "pntRef" value, then it's coordinates will be retrieved from the referenced element. If an element contains both a coordinate value and a pntRef, the coordinate value should be used as the point location and the referenced point is either ignored or is used for point attributes such as number or desc.
    /// </para>
    /// <para>
    /// The featureRef attribute points to a specific named Feature element that contains feature data related to the point.
    ///			The suggested form is to refer to a feature element within the same CgPoints group or parent element of the point element.
    ///			
    /// </para>
    /// </summary>
    public partial class Start : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private PointType ContentField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("Start", "http://www.landxml.org/schema/LandXML-1.2");
        
		public static explicit operator Start(XElement xe) { return XTypedServices.ToXTypedElement<Start, PointType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// All elements derived from PointType will either contain a coordinate text value ( "north east" or "north east elev"), a "pntRef" attribute value, or both. The "pntRef" attribute contains the value of a PointType derived element "name" attribute that exists elsewhere the instance data. If this element has a "pntRef" value, then it's coordinates will be retrieved from the referenced element. If an element contains both a coordinate value and a pntRef, the coordinate value should be used as the point location and the referenced point is either ignored or is used for point attributes such as number or desc.
        /// </para>
        /// <para>
        /// The featureRef attribute points to a specific named Feature element that contains feature data related to the point.
        ///			The suggested form is to refer to a feature element within the same CgPoints group or parent element of the point element.
        ///			
        /// </para>
        /// </summary>
        public Start() {
            SetInnerType(new PointType());
        }
        
        /// <summary>
        /// <para>
        /// All elements derived from PointType will either contain a coordinate text value ( "north east" or "north east elev"), a "pntRef" attribute value, or both. The "pntRef" attribute contains the value of a PointType derived element "name" attribute that exists elsewhere the instance data. If this element has a "pntRef" value, then it's coordinates will be retrieved from the referenced element. If an element contains both a coordinate value and a pntRef, the coordinate value should be used as the point location and the referenced point is either ignored or is used for point attributes such as number or desc.
        /// </para>
        /// <para>
        /// The featureRef attribute points to a specific named Feature element that contains feature data related to the point.
        ///			The suggested form is to refer to a feature element within the same CgPoints group or parent element of the point element.
        ///			
        /// </para>
        /// </summary>
        public Start(PointType content) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public virtual PointType Content {
            get {
                return ContentField;
            }
        }
        
        public virtual IList<double> TypedValue {
            get {
                return this.ContentField.TypedValue;
            }
            set {
                this.ContentField.TypedValue = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string name {
            get {
                return this.ContentField.name;
            }
            set {
                this.ContentField.name = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string desc {
            get {
                return this.ContentField.desc;
            }
            set {
                this.ContentField.desc = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string code {
            get {
                return this.ContentField.code;
            }
            set {
                this.ContentField.code = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual LandXml.v1_2.stateType? state {
            get {
                return this.ContentField.state;
            }
            set {
                this.ContentField.state = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string pntRef {
            get {
                return this.ContentField.pntRef;
            }
            set {
                this.ContentField.pntRef = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string featureRef {
            get {
                return this.ContentField.featureRef;
            }
            set {
                this.ContentField.featureRef = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual LandXml.v1_2.pointGeometryType? pointGeometry {
            get {
                return this.ContentField.pointGeometry;
            }
            set {
                this.ContentField.pointGeometry = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string DTMAttribute {
            get {
                return this.ContentField.DTMAttribute;
            }
            set {
                this.ContentField.DTMAttribute = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.DateTime? timeStamp {
            get {
                return this.ContentField.timeStamp;
            }
            set {
                this.ContentField.timeStamp = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string role {
            get {
                return this.ContentField.role;
            }
            set {
                this.ContentField.role = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.DateTime? determinedTimeStamp {
            get {
                return this.ContentField.determinedTimeStamp;
            }
            set {
                this.ContentField.determinedTimeStamp = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Double? ellipsoidHeight {
            get {
                return this.ContentField.ellipsoidHeight;
            }
            set {
                this.ContentField.ellipsoidHeight = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Double? latitude {
            get {
                return this.ContentField.latitude;
            }
            set {
                this.ContentField.latitude = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Double? longitude {
            get {
                return this.ContentField.longitude;
            }
            set {
                this.ContentField.longitude = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string zone {
            get {
                return this.ContentField.zone;
            }
            set {
                this.ContentField.zone = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Double? northingStdError {
            get {
                return this.ContentField.northingStdError;
            }
            set {
                this.ContentField.northingStdError = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Double? eastingStdError {
            get {
                return this.ContentField.eastingStdError;
            }
            set {
                this.ContentField.eastingStdError = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Double? elevationStdError {
            get {
                return this.ContentField.elevationStdError;
            }
            set {
                this.ContentField.elevationStdError = value;
            }
        }
        
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static Start Load(string xmlFile) {
            return XTypedServices.Load<Start, PointType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static Start Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<Start, PointType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static Start Parse(string xml) {
            return XTypedServices.Parse<Start, PointType>(xml, LinqToXsdTypeManager.Instance);
        }
        
        public override XTypedElement Clone() {
            return new Start(((PointType)(this.Content.Clone())));
        }
        
        private void SetInnerType(PointType ContentField) {
            this.ContentField = ((PointType)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// All elements derived from PointType will either contain a coordinate text value ( "north east" or "north east elev"), a "pntRef" attribute value, or both. The "pntRef" attribute contains the value of a PointType derived element "name" attribute that exists elsewhere the instance data. If this element has a "pntRef" value, then it's coordinates will be retrieved from the referenced element. If an element contains both a coordinate value and a pntRef, the coordinate value should be used as the point location and the referenced point is either ignored or is used for point attributes such as number or desc.
    /// </para>
    /// <para>
    /// The featureRef attribute points to a specific named Feature element that contains feature data related to the point.
    ///			The suggested form is to refer to a feature element within the same CgPoints group or parent element of the point element.
    ///			
    /// </para>
    /// </summary>
    public partial class End : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private PointType ContentField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("End", "http://www.landxml.org/schema/LandXML-1.2");
        
		public static explicit operator End(XElement xe) { return XTypedServices.ToXTypedElement<End, PointType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// All elements derived from PointType will either contain a coordinate text value ( "north east" or "north east elev"), a "pntRef" attribute value, or both. The "pntRef" attribute contains the value of a PointType derived element "name" attribute that exists elsewhere the instance data. If this element has a "pntRef" value, then it's coordinates will be retrieved from the referenced element. If an element contains both a coordinate value and a pntRef, the coordinate value should be used as the point location and the referenced point is either ignored or is used for point attributes such as number or desc.
        /// </para>
        /// <para>
        /// The featureRef attribute points to a specific named Feature element that contains feature data related to the point.
        ///			The suggested form is to refer to a feature element within the same CgPoints group or parent element of the point element.
        ///			
        /// </para>
        /// </summary>
        public End() {
            SetInnerType(new PointType());
        }
        
        /// <summary>
        /// <para>
        /// All elements derived from PointType will either contain a coordinate text value ( "north east" or "north east elev"), a "pntRef" attribute value, or both. The "pntRef" attribute contains the value of a PointType derived element "name" attribute that exists elsewhere the instance data. If this element has a "pntRef" value, then it's coordinates will be retrieved from the referenced element. If an element contains both a coordinate value and a pntRef, the coordinate value should be used as the point location and the referenced point is either ignored or is used for point attributes such as number or desc.
        /// </para>
        /// <para>
        /// The featureRef attribute points to a specific named Feature element that contains feature data related to the point.
        ///			The suggested form is to refer to a feature element within the same CgPoints group or parent element of the point element.
        ///			
        /// </para>
        /// </summary>
        public End(PointType content) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public virtual PointType Content {
            get {
                return ContentField;
            }
        }
        
        public virtual IList<double> TypedValue {
            get {
                return this.ContentField.TypedValue;
            }
            set {
                this.ContentField.TypedValue = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string name {
            get {
                return this.ContentField.name;
            }
            set {
                this.ContentField.name = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string desc {
            get {
                return this.ContentField.desc;
            }
            set {
                this.ContentField.desc = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string code {
            get {
                return this.ContentField.code;
            }
            set {
                this.ContentField.code = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual LandXml.v1_2.stateType? state {
            get {
                return this.ContentField.state;
            }
            set {
                this.ContentField.state = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string pntRef {
            get {
                return this.ContentField.pntRef;
            }
            set {
                this.ContentField.pntRef = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string featureRef {
            get {
                return this.ContentField.featureRef;
            }
            set {
                this.ContentField.featureRef = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual LandXml.v1_2.pointGeometryType? pointGeometry {
            get {
                return this.ContentField.pointGeometry;
            }
            set {
                this.ContentField.pointGeometry = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string DTMAttribute {
            get {
                return this.ContentField.DTMAttribute;
            }
            set {
                this.ContentField.DTMAttribute = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.DateTime? timeStamp {
            get {
                return this.ContentField.timeStamp;
            }
            set {
                this.ContentField.timeStamp = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string role {
            get {
                return this.ContentField.role;
            }
            set {
                this.ContentField.role = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.DateTime? determinedTimeStamp {
            get {
                return this.ContentField.determinedTimeStamp;
            }
            set {
                this.ContentField.determinedTimeStamp = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Double? ellipsoidHeight {
            get {
                return this.ContentField.ellipsoidHeight;
            }
            set {
                this.ContentField.ellipsoidHeight = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Double? latitude {
            get {
                return this.ContentField.latitude;
            }
            set {
                this.ContentField.latitude = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Double? longitude {
            get {
                return this.ContentField.longitude;
            }
            set {
                this.ContentField.longitude = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string zone {
            get {
                return this.ContentField.zone;
            }
            set {
                this.ContentField.zone = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Double? northingStdError {
            get {
                return this.ContentField.northingStdError;
            }
            set {
                this.ContentField.northingStdError = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Double? eastingStdError {
            get {
                return this.ContentField.eastingStdError;
            }
            set {
                this.ContentField.eastingStdError = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Double? elevationStdError {
            get {
                return this.ContentField.elevationStdError;
            }
            set {
                this.ContentField.elevationStdError = value;
            }
        }
        
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static End Load(string xmlFile) {
            return XTypedServices.Load<End, PointType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static End Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<End, PointType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static End Parse(string xml) {
            return XTypedServices.Parse<End, PointType>(xml, LinqToXsdTypeManager.Instance);
        }
        
        public override XTypedElement Clone() {
            return new End(((PointType)(this.Content.Clone())));
        }
        
        private void SetInnerType(PointType ContentField) {
            this.ContentField = ((PointType)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// All elements derived from PointType will either contain a coordinate text value ( "north east" or "north east elev"), a "pntRef" attribute value, or both. The "pntRef" attribute contains the value of a PointType derived element "name" attribute that exists elsewhere the instance data. If this element has a "pntRef" value, then it's coordinates will be retrieved from the referenced element. If an element contains both a coordinate value and a pntRef, the coordinate value should be used as the point location and the referenced point is either ignored or is used for point attributes such as number or desc.
    /// </para>
    /// <para>
    /// The featureRef attribute points to a specific named Feature element that contains feature data related to the point.
    ///			The suggested form is to refer to a feature element within the same CgPoints group or parent element of the point element.
    ///			
    /// </para>
    /// </summary>
    public partial class Center : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private PointType ContentField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("Center", "http://www.landxml.org/schema/LandXML-1.2");
        
		public static explicit operator Center(XElement xe) { return XTypedServices.ToXTypedElement<Center, PointType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// All elements derived from PointType will either contain a coordinate text value ( "north east" or "north east elev"), a "pntRef" attribute value, or both. The "pntRef" attribute contains the value of a PointType derived element "name" attribute that exists elsewhere the instance data. If this element has a "pntRef" value, then it's coordinates will be retrieved from the referenced element. If an element contains both a coordinate value and a pntRef, the coordinate value should be used as the point location and the referenced point is either ignored or is used for point attributes such as number or desc.
        /// </para>
        /// <para>
        /// The featureRef attribute points to a specific named Feature element that contains feature data related to the point.
        ///			The suggested form is to refer to a feature element within the same CgPoints group or parent element of the point element.
        ///			
        /// </para>
        /// </summary>
        public Center() {
            SetInnerType(new PointType());
        }
        
        /// <summary>
        /// <para>
        /// All elements derived from PointType will either contain a coordinate text value ( "north east" or "north east elev"), a "pntRef" attribute value, or both. The "pntRef" attribute contains the value of a PointType derived element "name" attribute that exists elsewhere the instance data. If this element has a "pntRef" value, then it's coordinates will be retrieved from the referenced element. If an element contains both a coordinate value and a pntRef, the coordinate value should be used as the point location and the referenced point is either ignored or is used for point attributes such as number or desc.
        /// </para>
        /// <para>
        /// The featureRef attribute points to a specific named Feature element that contains feature data related to the point.
        ///			The suggested form is to refer to a feature element within the same CgPoints group or parent element of the point element.
        ///			
        /// </para>
        /// </summary>
        public Center(PointType content) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public virtual PointType Content {
            get {
                return ContentField;
            }
        }
        
        public virtual IList<double> TypedValue {
            get {
                return this.ContentField.TypedValue;
            }
            set {
                this.ContentField.TypedValue = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string name {
            get {
                return this.ContentField.name;
            }
            set {
                this.ContentField.name = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string desc {
            get {
                return this.ContentField.desc;
            }
            set {
                this.ContentField.desc = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string code {
            get {
                return this.ContentField.code;
            }
            set {
                this.ContentField.code = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual LandXml.v1_2.stateType? state {
            get {
                return this.ContentField.state;
            }
            set {
                this.ContentField.state = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string pntRef {
            get {
                return this.ContentField.pntRef;
            }
            set {
                this.ContentField.pntRef = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string featureRef {
            get {
                return this.ContentField.featureRef;
            }
            set {
                this.ContentField.featureRef = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual LandXml.v1_2.pointGeometryType? pointGeometry {
            get {
                return this.ContentField.pointGeometry;
            }
            set {
                this.ContentField.pointGeometry = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string DTMAttribute {
            get {
                return this.ContentField.DTMAttribute;
            }
            set {
                this.ContentField.DTMAttribute = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.DateTime? timeStamp {
            get {
                return this.ContentField.timeStamp;
            }
            set {
                this.ContentField.timeStamp = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string role {
            get {
                return this.ContentField.role;
            }
            set {
                this.ContentField.role = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.DateTime? determinedTimeStamp {
            get {
                return this.ContentField.determinedTimeStamp;
            }
            set {
                this.ContentField.determinedTimeStamp = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Double? ellipsoidHeight {
            get {
                return this.ContentField.ellipsoidHeight;
            }
            set {
                this.ContentField.ellipsoidHeight = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Double? latitude {
            get {
                return this.ContentField.latitude;
            }
            set {
                this.ContentField.latitude = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Double? longitude {
            get {
                return this.ContentField.longitude;
            }
            set {
                this.ContentField.longitude = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string zone {
            get {
                return this.ContentField.zone;
            }
            set {
                this.ContentField.zone = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Double? northingStdError {
            get {
                return this.ContentField.northingStdError;
            }
            set {
                this.ContentField.northingStdError = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Double? eastingStdError {
            get {
                return this.ContentField.eastingStdError;
            }
            set {
                this.ContentField.eastingStdError = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Double? elevationStdError {
            get {
                return this.ContentField.elevationStdError;
            }
            set {
                this.ContentField.elevationStdError = value;
            }
        }
        
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static Center Load(string xmlFile) {
            return XTypedServices.Load<Center, PointType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static Center Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<Center, PointType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static Center Parse(string xml) {
            return XTypedServices.Parse<Center, PointType>(xml, LinqToXsdTypeManager.Instance);
        }
        
        public override XTypedElement Clone() {
            return new Center(((PointType)(this.Content.Clone())));
        }
        
        private void SetInnerType(PointType ContentField) {
            this.ContentField = ((PointType)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// All elements derived from PointType will either contain a coordinate text value ( "north east" or "north east elev"), a "pntRef" attribute value, or both. The "pntRef" attribute contains the value of a PointType derived element "name" attribute that exists elsewhere the instance data. If this element has a "pntRef" value, then it's coordinates will be retrieved from the referenced element. If an element contains both a coordinate value and a pntRef, the coordinate value should be used as the point location and the referenced point is either ignored or is used for point attributes such as number or desc.
    /// </para>
    /// <para>
    /// The featureRef attribute points to a specific named Feature element that contains feature data related to the point.
    ///			The suggested form is to refer to a feature element within the same CgPoints group or parent element of the point element.
    ///			
    /// </para>
    /// </summary>
    public partial class PI : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private PointType ContentField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("PI", "http://www.landxml.org/schema/LandXML-1.2");
        
		public static explicit operator PI(XElement xe) { return XTypedServices.ToXTypedElement<PI, PointType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// All elements derived from PointType will either contain a coordinate text value ( "north east" or "north east elev"), a "pntRef" attribute value, or both. The "pntRef" attribute contains the value of a PointType derived element "name" attribute that exists elsewhere the instance data. If this element has a "pntRef" value, then it's coordinates will be retrieved from the referenced element. If an element contains both a coordinate value and a pntRef, the coordinate value should be used as the point location and the referenced point is either ignored or is used for point attributes such as number or desc.
        /// </para>
        /// <para>
        /// The featureRef attribute points to a specific named Feature element that contains feature data related to the point.
        ///			The suggested form is to refer to a feature element within the same CgPoints group or parent element of the point element.
        ///			
        /// </para>
        /// </summary>
        public PI() {
            SetInnerType(new PointType());
        }
        
        /// <summary>
        /// <para>
        /// All elements derived from PointType will either contain a coordinate text value ( "north east" or "north east elev"), a "pntRef" attribute value, or both. The "pntRef" attribute contains the value of a PointType derived element "name" attribute that exists elsewhere the instance data. If this element has a "pntRef" value, then it's coordinates will be retrieved from the referenced element. If an element contains both a coordinate value and a pntRef, the coordinate value should be used as the point location and the referenced point is either ignored or is used for point attributes such as number or desc.
        /// </para>
        /// <para>
        /// The featureRef attribute points to a specific named Feature element that contains feature data related to the point.
        ///			The suggested form is to refer to a feature element within the same CgPoints group or parent element of the point element.
        ///			
        /// </para>
        /// </summary>
        public PI(PointType content) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public virtual PointType Content {
            get {
                return ContentField;
            }
        }
        
        public virtual IList<double> TypedValue {
            get {
                return this.ContentField.TypedValue;
            }
            set {
                this.ContentField.TypedValue = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string name {
            get {
                return this.ContentField.name;
            }
            set {
                this.ContentField.name = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string desc {
            get {
                return this.ContentField.desc;
            }
            set {
                this.ContentField.desc = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string code {
            get {
                return this.ContentField.code;
            }
            set {
                this.ContentField.code = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual LandXml.v1_2.stateType? state {
            get {
                return this.ContentField.state;
            }
            set {
                this.ContentField.state = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string pntRef {
            get {
                return this.ContentField.pntRef;
            }
            set {
                this.ContentField.pntRef = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string featureRef {
            get {
                return this.ContentField.featureRef;
            }
            set {
                this.ContentField.featureRef = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual LandXml.v1_2.pointGeometryType? pointGeometry {
            get {
                return this.ContentField.pointGeometry;
            }
            set {
                this.ContentField.pointGeometry = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string DTMAttribute {
            get {
                return this.ContentField.DTMAttribute;
            }
            set {
                this.ContentField.DTMAttribute = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.DateTime? timeStamp {
            get {
                return this.ContentField.timeStamp;
            }
            set {
                this.ContentField.timeStamp = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string role {
            get {
                return this.ContentField.role;
            }
            set {
                this.ContentField.role = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.DateTime? determinedTimeStamp {
            get {
                return this.ContentField.determinedTimeStamp;
            }
            set {
                this.ContentField.determinedTimeStamp = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Double? ellipsoidHeight {
            get {
                return this.ContentField.ellipsoidHeight;
            }
            set {
                this.ContentField.ellipsoidHeight = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Double? latitude {
            get {
                return this.ContentField.latitude;
            }
            set {
                this.ContentField.latitude = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Double? longitude {
            get {
                return this.ContentField.longitude;
            }
            set {
                this.ContentField.longitude = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string zone {
            get {
                return this.ContentField.zone;
            }
            set {
                this.ContentField.zone = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Double? northingStdError {
            get {
                return this.ContentField.northingStdError;
            }
            set {
                this.ContentField.northingStdError = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Double? eastingStdError {
            get {
                return this.ContentField.eastingStdError;
            }
            set {
                this.ContentField.eastingStdError = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Double? elevationStdError {
            get {
                return this.ContentField.elevationStdError;
            }
            set {
                this.ContentField.elevationStdError = value;
            }
        }
        
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static PI Load(string xmlFile) {
            return XTypedServices.Load<PI, PointType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static PI Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<PI, PointType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static PI Parse(string xml) {
            return XTypedServices.Parse<PI, PointType>(xml, LinqToXsdTypeManager.Instance);
        }
        
        public override XTypedElement Clone() {
            return new PI(((PointType)(this.Content.Clone())));
        }
        
        private void SetInnerType(PointType ContentField) {
            this.ContentField = ((PointType)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// All elements derived from PointType will either contain a coordinate text value ( "north east" or "north east elev"), a "pntRef" attribute value, or both. The "pntRef" attribute contains the value of a PointType derived element "name" attribute that exists elsewhere the instance data. If this element has a "pntRef" value, then it's coordinates will be retrieved from the referenced element. If an element contains both a coordinate value and a pntRef, the coordinate value should be used as the point location and the referenced point is either ignored or is used for point attributes such as number or desc.
    /// </para>
    /// <para>
    /// The featureRef attribute points to a specific named Feature element that contains feature data related to the point.
    ///			The suggested form is to refer to a feature element within the same CgPoints group or parent element of the point element.
    ///			
    /// </para>
    /// </summary>
    public partial class MapPoint : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private PointType ContentField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("MapPoint", "http://www.landxml.org/schema/LandXML-1.2");
        
		public static explicit operator MapPoint(XElement xe) { return XTypedServices.ToXTypedElement<MapPoint, PointType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// All elements derived from PointType will either contain a coordinate text value ( "north east" or "north east elev"), a "pntRef" attribute value, or both. The "pntRef" attribute contains the value of a PointType derived element "name" attribute that exists elsewhere the instance data. If this element has a "pntRef" value, then it's coordinates will be retrieved from the referenced element. If an element contains both a coordinate value and a pntRef, the coordinate value should be used as the point location and the referenced point is either ignored or is used for point attributes such as number or desc.
        /// </para>
        /// <para>
        /// The featureRef attribute points to a specific named Feature element that contains feature data related to the point.
        ///			The suggested form is to refer to a feature element within the same CgPoints group or parent element of the point element.
        ///			
        /// </para>
        /// </summary>
        public MapPoint() {
            SetInnerType(new PointType());
        }
        
        /// <summary>
        /// <para>
        /// All elements derived from PointType will either contain a coordinate text value ( "north east" or "north east elev"), a "pntRef" attribute value, or both. The "pntRef" attribute contains the value of a PointType derived element "name" attribute that exists elsewhere the instance data. If this element has a "pntRef" value, then it's coordinates will be retrieved from the referenced element. If an element contains both a coordinate value and a pntRef, the coordinate value should be used as the point location and the referenced point is either ignored or is used for point attributes such as number or desc.
        /// </para>
        /// <para>
        /// The featureRef attribute points to a specific named Feature element that contains feature data related to the point.
        ///			The suggested form is to refer to a feature element within the same CgPoints group or parent element of the point element.
        ///			
        /// </para>
        /// </summary>
        public MapPoint(PointType content) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public virtual PointType Content {
            get {
                return ContentField;
            }
        }
        
        public virtual IList<double> TypedValue {
            get {
                return this.ContentField.TypedValue;
            }
            set {
                this.ContentField.TypedValue = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string name {
            get {
                return this.ContentField.name;
            }
            set {
                this.ContentField.name = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string desc {
            get {
                return this.ContentField.desc;
            }
            set {
                this.ContentField.desc = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string code {
            get {
                return this.ContentField.code;
            }
            set {
                this.ContentField.code = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual LandXml.v1_2.stateType? state {
            get {
                return this.ContentField.state;
            }
            set {
                this.ContentField.state = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string pntRef {
            get {
                return this.ContentField.pntRef;
            }
            set {
                this.ContentField.pntRef = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string featureRef {
            get {
                return this.ContentField.featureRef;
            }
            set {
                this.ContentField.featureRef = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual LandXml.v1_2.pointGeometryType? pointGeometry {
            get {
                return this.ContentField.pointGeometry;
            }
            set {
                this.ContentField.pointGeometry = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string DTMAttribute {
            get {
                return this.ContentField.DTMAttribute;
            }
            set {
                this.ContentField.DTMAttribute = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.DateTime? timeStamp {
            get {
                return this.ContentField.timeStamp;
            }
            set {
                this.ContentField.timeStamp = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string role {
            get {
                return this.ContentField.role;
            }
            set {
                this.ContentField.role = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.DateTime? determinedTimeStamp {
            get {
                return this.ContentField.determinedTimeStamp;
            }
            set {
                this.ContentField.determinedTimeStamp = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Double? ellipsoidHeight {
            get {
                return this.ContentField.ellipsoidHeight;
            }
            set {
                this.ContentField.ellipsoidHeight = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Double? latitude {
            get {
                return this.ContentField.latitude;
            }
            set {
                this.ContentField.latitude = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Double? longitude {
            get {
                return this.ContentField.longitude;
            }
            set {
                this.ContentField.longitude = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string zone {
            get {
                return this.ContentField.zone;
            }
            set {
                this.ContentField.zone = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Double? northingStdError {
            get {
                return this.ContentField.northingStdError;
            }
            set {
                this.ContentField.northingStdError = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Double? eastingStdError {
            get {
                return this.ContentField.eastingStdError;
            }
            set {
                this.ContentField.eastingStdError = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Double? elevationStdError {
            get {
                return this.ContentField.elevationStdError;
            }
            set {
                this.ContentField.elevationStdError = value;
            }
        }
        
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static MapPoint Load(string xmlFile) {
            return XTypedServices.Load<MapPoint, PointType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static MapPoint Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<MapPoint, PointType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static MapPoint Parse(string xml) {
            return XTypedServices.Parse<MapPoint, PointType>(xml, LinqToXsdTypeManager.Instance);
        }
        
        public override XTypedElement Clone() {
            return new MapPoint(((PointType)(this.Content.Clone())));
        }
        
        private void SetInnerType(PointType ContentField) {
            this.ContentField = ((PointType)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// All elements derived from PointType will either contain a coordinate text value ( "north east" or "north east elev"), a "pntRef" attribute value, or both. The "pntRef" attribute contains the value of a PointType derived element "name" attribute that exists elsewhere the instance data. If this element has a "pntRef" value, then it's coordinates will be retrieved from the referenced element. If an element contains both a coordinate value and a pntRef, the coordinate value should be used as the point location and the referenced point is either ignored or is used for point attributes such as number or desc.
    /// </para>
    /// <para>
    /// The featureRef attribute points to a specific named Feature element that contains feature data related to the point.
    ///			The suggested form is to refer to a feature element within the same CgPoints group or parent element of the point element.
    ///			
    /// </para>
    /// </summary>
    public partial class InstrumentPoint : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private PointType ContentField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("InstrumentPoint", "http://www.landxml.org/schema/LandXML-1.2");
        
		public static explicit operator InstrumentPoint(XElement xe) { return XTypedServices.ToXTypedElement<InstrumentPoint, PointType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// All elements derived from PointType will either contain a coordinate text value ( "north east" or "north east elev"), a "pntRef" attribute value, or both. The "pntRef" attribute contains the value of a PointType derived element "name" attribute that exists elsewhere the instance data. If this element has a "pntRef" value, then it's coordinates will be retrieved from the referenced element. If an element contains both a coordinate value and a pntRef, the coordinate value should be used as the point location and the referenced point is either ignored or is used for point attributes such as number or desc.
        /// </para>
        /// <para>
        /// The featureRef attribute points to a specific named Feature element that contains feature data related to the point.
        ///			The suggested form is to refer to a feature element within the same CgPoints group or parent element of the point element.
        ///			
        /// </para>
        /// </summary>
        public InstrumentPoint() {
            SetInnerType(new PointType());
        }
        
        /// <summary>
        /// <para>
        /// All elements derived from PointType will either contain a coordinate text value ( "north east" or "north east elev"), a "pntRef" attribute value, or both. The "pntRef" attribute contains the value of a PointType derived element "name" attribute that exists elsewhere the instance data. If this element has a "pntRef" value, then it's coordinates will be retrieved from the referenced element. If an element contains both a coordinate value and a pntRef, the coordinate value should be used as the point location and the referenced point is either ignored or is used for point attributes such as number or desc.
        /// </para>
        /// <para>
        /// The featureRef attribute points to a specific named Feature element that contains feature data related to the point.
        ///			The suggested form is to refer to a feature element within the same CgPoints group or parent element of the point element.
        ///			
        /// </para>
        /// </summary>
        public InstrumentPoint(PointType content) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public virtual PointType Content {
            get {
                return ContentField;
            }
        }
        
        public virtual IList<double> TypedValue {
            get {
                return this.ContentField.TypedValue;
            }
            set {
                this.ContentField.TypedValue = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string name {
            get {
                return this.ContentField.name;
            }
            set {
                this.ContentField.name = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string desc {
            get {
                return this.ContentField.desc;
            }
            set {
                this.ContentField.desc = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string code {
            get {
                return this.ContentField.code;
            }
            set {
                this.ContentField.code = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual LandXml.v1_2.stateType? state {
            get {
                return this.ContentField.state;
            }
            set {
                this.ContentField.state = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string pntRef {
            get {
                return this.ContentField.pntRef;
            }
            set {
                this.ContentField.pntRef = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string featureRef {
            get {
                return this.ContentField.featureRef;
            }
            set {
                this.ContentField.featureRef = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual LandXml.v1_2.pointGeometryType? pointGeometry {
            get {
                return this.ContentField.pointGeometry;
            }
            set {
                this.ContentField.pointGeometry = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string DTMAttribute {
            get {
                return this.ContentField.DTMAttribute;
            }
            set {
                this.ContentField.DTMAttribute = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.DateTime? timeStamp {
            get {
                return this.ContentField.timeStamp;
            }
            set {
                this.ContentField.timeStamp = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string role {
            get {
                return this.ContentField.role;
            }
            set {
                this.ContentField.role = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.DateTime? determinedTimeStamp {
            get {
                return this.ContentField.determinedTimeStamp;
            }
            set {
                this.ContentField.determinedTimeStamp = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Double? ellipsoidHeight {
            get {
                return this.ContentField.ellipsoidHeight;
            }
            set {
                this.ContentField.ellipsoidHeight = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Double? latitude {
            get {
                return this.ContentField.latitude;
            }
            set {
                this.ContentField.latitude = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Double? longitude {
            get {
                return this.ContentField.longitude;
            }
            set {
                this.ContentField.longitude = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string zone {
            get {
                return this.ContentField.zone;
            }
            set {
                this.ContentField.zone = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Double? northingStdError {
            get {
                return this.ContentField.northingStdError;
            }
            set {
                this.ContentField.northingStdError = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Double? eastingStdError {
            get {
                return this.ContentField.eastingStdError;
            }
            set {
                this.ContentField.eastingStdError = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Double? elevationStdError {
            get {
                return this.ContentField.elevationStdError;
            }
            set {
                this.ContentField.elevationStdError = value;
            }
        }
        
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static InstrumentPoint Load(string xmlFile) {
            return XTypedServices.Load<InstrumentPoint, PointType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static InstrumentPoint Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<InstrumentPoint, PointType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static InstrumentPoint Parse(string xml) {
            return XTypedServices.Parse<InstrumentPoint, PointType>(xml, LinqToXsdTypeManager.Instance);
        }
        
        public override XTypedElement Clone() {
            return new InstrumentPoint(((PointType)(this.Content.Clone())));
        }
        
        private void SetInnerType(PointType ContentField) {
            this.ContentField = ((PointType)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// All elements derived from PointType will either contain a coordinate text value ( "north east" or "north east elev"), a "pntRef" attribute value, or both. The "pntRef" attribute contains the value of a PointType derived element "name" attribute that exists elsewhere the instance data. If this element has a "pntRef" value, then it's coordinates will be retrieved from the referenced element. If an element contains both a coordinate value and a pntRef, the coordinate value should be used as the point location and the referenced point is either ignored or is used for point attributes such as number or desc.
    /// </para>
    /// <para>
    /// The featureRef attribute points to a specific named Feature element that contains feature data related to the point.
    ///			The suggested form is to refer to a feature element within the same CgPoints group or parent element of the point element.
    ///			
    /// </para>
    /// </summary>
    public partial class Location : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private PointType ContentField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("Location", "http://www.landxml.org/schema/LandXML-1.2");
        
		public static explicit operator Location(XElement xe) { return XTypedServices.ToXTypedElement<Location, PointType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// All elements derived from PointType will either contain a coordinate text value ( "north east" or "north east elev"), a "pntRef" attribute value, or both. The "pntRef" attribute contains the value of a PointType derived element "name" attribute that exists elsewhere the instance data. If this element has a "pntRef" value, then it's coordinates will be retrieved from the referenced element. If an element contains both a coordinate value and a pntRef, the coordinate value should be used as the point location and the referenced point is either ignored or is used for point attributes such as number or desc.
        /// </para>
        /// <para>
        /// The featureRef attribute points to a specific named Feature element that contains feature data related to the point.
        ///			The suggested form is to refer to a feature element within the same CgPoints group or parent element of the point element.
        ///			
        /// </para>
        /// </summary>
        public Location() {
            SetInnerType(new PointType());
        }
        
        /// <summary>
        /// <para>
        /// All elements derived from PointType will either contain a coordinate text value ( "north east" or "north east elev"), a "pntRef" attribute value, or both. The "pntRef" attribute contains the value of a PointType derived element "name" attribute that exists elsewhere the instance data. If this element has a "pntRef" value, then it's coordinates will be retrieved from the referenced element. If an element contains both a coordinate value and a pntRef, the coordinate value should be used as the point location and the referenced point is either ignored or is used for point attributes such as number or desc.
        /// </para>
        /// <para>
        /// The featureRef attribute points to a specific named Feature element that contains feature data related to the point.
        ///			The suggested form is to refer to a feature element within the same CgPoints group or parent element of the point element.
        ///			
        /// </para>
        /// </summary>
        public Location(PointType content) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public virtual PointType Content {
            get {
                return ContentField;
            }
        }
        
        public virtual IList<double> TypedValue {
            get {
                return this.ContentField.TypedValue;
            }
            set {
                this.ContentField.TypedValue = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string name {
            get {
                return this.ContentField.name;
            }
            set {
                this.ContentField.name = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string desc {
            get {
                return this.ContentField.desc;
            }
            set {
                this.ContentField.desc = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string code {
            get {
                return this.ContentField.code;
            }
            set {
                this.ContentField.code = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual LandXml.v1_2.stateType? state {
            get {
                return this.ContentField.state;
            }
            set {
                this.ContentField.state = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string pntRef {
            get {
                return this.ContentField.pntRef;
            }
            set {
                this.ContentField.pntRef = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string featureRef {
            get {
                return this.ContentField.featureRef;
            }
            set {
                this.ContentField.featureRef = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual LandXml.v1_2.pointGeometryType? pointGeometry {
            get {
                return this.ContentField.pointGeometry;
            }
            set {
                this.ContentField.pointGeometry = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string DTMAttribute {
            get {
                return this.ContentField.DTMAttribute;
            }
            set {
                this.ContentField.DTMAttribute = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.DateTime? timeStamp {
            get {
                return this.ContentField.timeStamp;
            }
            set {
                this.ContentField.timeStamp = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string role {
            get {
                return this.ContentField.role;
            }
            set {
                this.ContentField.role = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.DateTime? determinedTimeStamp {
            get {
                return this.ContentField.determinedTimeStamp;
            }
            set {
                this.ContentField.determinedTimeStamp = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Double? ellipsoidHeight {
            get {
                return this.ContentField.ellipsoidHeight;
            }
            set {
                this.ContentField.ellipsoidHeight = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Double? latitude {
            get {
                return this.ContentField.latitude;
            }
            set {
                this.ContentField.latitude = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Double? longitude {
            get {
                return this.ContentField.longitude;
            }
            set {
                this.ContentField.longitude = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string zone {
            get {
                return this.ContentField.zone;
            }
            set {
                this.ContentField.zone = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Double? northingStdError {
            get {
                return this.ContentField.northingStdError;
            }
            set {
                this.ContentField.northingStdError = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Double? eastingStdError {
            get {
                return this.ContentField.eastingStdError;
            }
            set {
                this.ContentField.eastingStdError = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Double? elevationStdError {
            get {
                return this.ContentField.elevationStdError;
            }
            set {
                this.ContentField.elevationStdError = value;
            }
        }
        
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static Location Load(string xmlFile) {
            return XTypedServices.Load<Location, PointType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static Location Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<Location, PointType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static Location Parse(string xml) {
            return XTypedServices.Parse<Location, PointType>(xml, LinqToXsdTypeManager.Instance);
        }
        
        public override XTypedElement Clone() {
            return new Location(((PointType)(this.Content.Clone())));
        }
        
        private void SetInnerType(PointType ContentField) {
            this.ContentField = ((PointType)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// All elements derived from PointType will either contain a coordinate text value ( "north east" or "north east elev"), a "pntRef" attribute value, or both. The "pntRef" attribute contains the value of a PointType derived element "name" attribute that exists elsewhere the instance data. If this element has a "pntRef" value, then it's coordinates will be retrieved from the referenced element. If an element contains both a coordinate value and a pntRef, the coordinate value should be used as the point location and the referenced point is either ignored or is used for point attributes such as number or desc.
    /// </para>
    /// <para>
    /// The featureRef attribute points to a specific named Feature element that contains feature data related to the point.
    ///			The suggested form is to refer to a feature element within the same CgPoints group or parent element of the point element.
    ///			
    /// </para>
    /// </summary>
    public partial class TargetPoint : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private PointType ContentField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("TargetPoint", "http://www.landxml.org/schema/LandXML-1.2");
        
		public static explicit operator TargetPoint(XElement xe) { return XTypedServices.ToXTypedElement<TargetPoint, PointType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// All elements derived from PointType will either contain a coordinate text value ( "north east" or "north east elev"), a "pntRef" attribute value, or both. The "pntRef" attribute contains the value of a PointType derived element "name" attribute that exists elsewhere the instance data. If this element has a "pntRef" value, then it's coordinates will be retrieved from the referenced element. If an element contains both a coordinate value and a pntRef, the coordinate value should be used as the point location and the referenced point is either ignored or is used for point attributes such as number or desc.
        /// </para>
        /// <para>
        /// The featureRef attribute points to a specific named Feature element that contains feature data related to the point.
        ///			The suggested form is to refer to a feature element within the same CgPoints group or parent element of the point element.
        ///			
        /// </para>
        /// </summary>
        public TargetPoint() {
            SetInnerType(new PointType());
        }
        
        /// <summary>
        /// <para>
        /// All elements derived from PointType will either contain a coordinate text value ( "north east" or "north east elev"), a "pntRef" attribute value, or both. The "pntRef" attribute contains the value of a PointType derived element "name" attribute that exists elsewhere the instance data. If this element has a "pntRef" value, then it's coordinates will be retrieved from the referenced element. If an element contains both a coordinate value and a pntRef, the coordinate value should be used as the point location and the referenced point is either ignored or is used for point attributes such as number or desc.
        /// </para>
        /// <para>
        /// The featureRef attribute points to a specific named Feature element that contains feature data related to the point.
        ///			The suggested form is to refer to a feature element within the same CgPoints group or parent element of the point element.
        ///			
        /// </para>
        /// </summary>
        public TargetPoint(PointType content) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public virtual PointType Content {
            get {
                return ContentField;
            }
        }
        
        public virtual IList<double> TypedValue {
            get {
                return this.ContentField.TypedValue;
            }
            set {
                this.ContentField.TypedValue = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string name {
            get {
                return this.ContentField.name;
            }
            set {
                this.ContentField.name = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string desc {
            get {
                return this.ContentField.desc;
            }
            set {
                this.ContentField.desc = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string code {
            get {
                return this.ContentField.code;
            }
            set {
                this.ContentField.code = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual LandXml.v1_2.stateType? state {
            get {
                return this.ContentField.state;
            }
            set {
                this.ContentField.state = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string pntRef {
            get {
                return this.ContentField.pntRef;
            }
            set {
                this.ContentField.pntRef = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string featureRef {
            get {
                return this.ContentField.featureRef;
            }
            set {
                this.ContentField.featureRef = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual LandXml.v1_2.pointGeometryType? pointGeometry {
            get {
                return this.ContentField.pointGeometry;
            }
            set {
                this.ContentField.pointGeometry = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string DTMAttribute {
            get {
                return this.ContentField.DTMAttribute;
            }
            set {
                this.ContentField.DTMAttribute = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.DateTime? timeStamp {
            get {
                return this.ContentField.timeStamp;
            }
            set {
                this.ContentField.timeStamp = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string role {
            get {
                return this.ContentField.role;
            }
            set {
                this.ContentField.role = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.DateTime? determinedTimeStamp {
            get {
                return this.ContentField.determinedTimeStamp;
            }
            set {
                this.ContentField.determinedTimeStamp = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Double? ellipsoidHeight {
            get {
                return this.ContentField.ellipsoidHeight;
            }
            set {
                this.ContentField.ellipsoidHeight = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Double? latitude {
            get {
                return this.ContentField.latitude;
            }
            set {
                this.ContentField.latitude = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Double? longitude {
            get {
                return this.ContentField.longitude;
            }
            set {
                this.ContentField.longitude = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string zone {
            get {
                return this.ContentField.zone;
            }
            set {
                this.ContentField.zone = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Double? northingStdError {
            get {
                return this.ContentField.northingStdError;
            }
            set {
                this.ContentField.northingStdError = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Double? eastingStdError {
            get {
                return this.ContentField.eastingStdError;
            }
            set {
                this.ContentField.eastingStdError = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Double? elevationStdError {
            get {
                return this.ContentField.elevationStdError;
            }
            set {
                this.ContentField.elevationStdError = value;
            }
        }
        
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static TargetPoint Load(string xmlFile) {
            return XTypedServices.Load<TargetPoint, PointType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static TargetPoint Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<TargetPoint, PointType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static TargetPoint Parse(string xml) {
            return XTypedServices.Parse<TargetPoint, PointType>(xml, LinqToXsdTypeManager.Instance);
        }
        
        public override XTypedElement Clone() {
            return new TargetPoint(((PointType)(this.Content.Clone())));
        }
        
        private void SetInnerType(PointType ContentField) {
            this.ContentField = ((PointType)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// All elements derived from PointType will either contain a coordinate text value ( "north east" or "north east elev"), a "pntRef" attribute value, or both. The "pntRef" attribute contains the value of a PointType derived element "name" attribute that exists elsewhere the instance data. If this element has a "pntRef" value, then it's coordinates will be retrieved from the referenced element. If an element contains both a coordinate value and a pntRef, the coordinate value should be used as the point location and the referenced point is either ignored or is used for point attributes such as number or desc.
    /// </para>
    /// <para>
    /// The featureRef attribute points to a specific named Feature element that contains feature data related to the point.
    ///			The suggested form is to refer to a feature element within the same CgPoints group or parent element of the point element.
    ///			
    /// </para>
    /// </summary>
    public partial class BacksightPoint : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private PointType ContentField;
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("BacksightPoint", "http://www.landxml.org/schema/LandXML-1.2");
        
		public static explicit operator BacksightPoint(XElement xe) { return XTypedServices.ToXTypedElement<BacksightPoint, PointType>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// All elements derived from PointType will either contain a coordinate text value ( "north east" or "north east elev"), a "pntRef" attribute value, or both. The "pntRef" attribute contains the value of a PointType derived element "name" attribute that exists elsewhere the instance data. If this element has a "pntRef" value, then it's coordinates will be retrieved from the referenced element. If an element contains both a coordinate value and a pntRef, the coordinate value should be used as the point location and the referenced point is either ignored or is used for point attributes such as number or desc.
        /// </para>
        /// <para>
        /// The featureRef attribute points to a specific named Feature element that contains feature data related to the point.
        ///			The suggested form is to refer to a feature element within the same CgPoints group or parent element of the point element.
        ///			
        /// </para>
        /// </summary>
        public BacksightPoint() {
            SetInnerType(new PointType());
        }
        
        /// <summary>
        /// <para>
        /// All elements derived from PointType will either contain a coordinate text value ( "north east" or "north east elev"), a "pntRef" attribute value, or both. The "pntRef" attribute contains the value of a PointType derived element "name" attribute that exists elsewhere the instance data. If this element has a "pntRef" value, then it's coordinates will be retrieved from the referenced element. If an element contains both a coordinate value and a pntRef, the coordinate value should be used as the point location and the referenced point is either ignored or is used for point attributes such as number or desc.
        /// </para>
        /// <para>
        /// The featureRef attribute points to a specific named Feature element that contains feature data related to the point.
        ///			The suggested form is to refer to a feature element within the same CgPoints group or parent element of the point element.
        ///			
        /// </para>
        /// </summary>
        public BacksightPoint(PointType content) {
            SetInnerType(content);
        }
        
        public override XElement Untyped {
            get {
                return base.Untyped;
            }
            set {
                base.Untyped = value;
                this.ContentField.Untyped = value;
            }
        }
        
        public virtual PointType Content {
            get {
                return ContentField;
            }
        }
        
        public virtual IList<double> TypedValue {
            get {
                return this.ContentField.TypedValue;
            }
            set {
                this.ContentField.TypedValue = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string name {
            get {
                return this.ContentField.name;
            }
            set {
                this.ContentField.name = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string desc {
            get {
                return this.ContentField.desc;
            }
            set {
                this.ContentField.desc = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string code {
            get {
                return this.ContentField.code;
            }
            set {
                this.ContentField.code = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual LandXml.v1_2.stateType? state {
            get {
                return this.ContentField.state;
            }
            set {
                this.ContentField.state = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string pntRef {
            get {
                return this.ContentField.pntRef;
            }
            set {
                this.ContentField.pntRef = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string featureRef {
            get {
                return this.ContentField.featureRef;
            }
            set {
                this.ContentField.featureRef = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual LandXml.v1_2.pointGeometryType? pointGeometry {
            get {
                return this.ContentField.pointGeometry;
            }
            set {
                this.ContentField.pointGeometry = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string DTMAttribute {
            get {
                return this.ContentField.DTMAttribute;
            }
            set {
                this.ContentField.DTMAttribute = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.DateTime? timeStamp {
            get {
                return this.ContentField.timeStamp;
            }
            set {
                this.ContentField.timeStamp = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string role {
            get {
                return this.ContentField.role;
            }
            set {
                this.ContentField.role = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.DateTime? determinedTimeStamp {
            get {
                return this.ContentField.determinedTimeStamp;
            }
            set {
                this.ContentField.determinedTimeStamp = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Double? ellipsoidHeight {
            get {
                return this.ContentField.ellipsoidHeight;
            }
            set {
                this.ContentField.ellipsoidHeight = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Double? latitude {
            get {
                return this.ContentField.latitude;
            }
            set {
                this.ContentField.latitude = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Double? longitude {
            get {
                return this.ContentField.longitude;
            }
            set {
                this.ContentField.longitude = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual string zone {
            get {
                return this.ContentField.zone;
            }
            set {
                this.ContentField.zone = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Double? northingStdError {
            get {
                return this.ContentField.northingStdError;
            }
            set {
                this.ContentField.northingStdError = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Double? eastingStdError {
            get {
                return this.ContentField.eastingStdError;
            }
            set {
                this.ContentField.eastingStdError = value;
            }
        }
        
        /// <summary>
        /// <para>
        /// Occurrence: optional
        /// </para>
        /// </summary>
        public virtual System.Double? elevationStdError {
            get {
                return this.ContentField.elevationStdError;
            }
            set {
                this.ContentField.elevationStdError = value;
            }
        }
        
        Dictionary<System.Xml.Linq.XName, System.Type> IXMetaData.LocalElementsDictionary {
            get {
                IXMetaData schemaMetaData = ((IXMetaData)(this.Content));
                return schemaMetaData.LocalElementsDictionary;
            }
        }
        
        XTypedElement IXMetaData.Content {
            get {
                return this.Content;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static BacksightPoint Load(string xmlFile) {
            return XTypedServices.Load<BacksightPoint, PointType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static BacksightPoint Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<BacksightPoint, PointType>(xmlFile, LinqToXsdTypeManager.Instance);
        }
        
        public static BacksightPoint Parse(string xml) {
            return XTypedServices.Parse<BacksightPoint, PointType>(xml, LinqToXsdTypeManager.Instance);
        }
        
        public override XTypedElement Clone() {
            return new BacksightPoint(((PointType)(this.Content.Clone())));
        }
        
        private void SetInnerType(PointType ContentField) {
            this.ContentField = ((PointType)(XTypedServices.GetCloneIfRooted(ContentField)));
            XTypedServices.SetName(this, this.ContentField);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Represents the actual measured distance along the geometry in numeric decimal form expressed in linear units. Also known as the internal station value where no station equations are applied.
    /// </para>
    /// </summary>
    public partial class BeginRunoutSta : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TypedValueXName = System.Xml.Linq.XName.Get("TypedValue", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("BeginRunoutSta", "http://www.landxml.org/schema/LandXML-1.2");
        
		public static explicit operator BeginRunoutSta(XElement xe) { return XTypedServices.ToXTypedElement<BeginRunoutSta>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// Represents the actual measured distance along the geometry in numeric decimal form expressed in linear units. Also known as the internal station value where no station equations are applied.
        /// </para>
        /// </summary>
        public BeginRunoutSta() {
        }
        
        /// <summary>
        /// <para>
        /// Represents the actual measured distance along the geometry in numeric decimal form expressed in linear units. Also known as the internal station value where no station equations are applied.
        /// </para>
        /// </summary>
        public BeginRunoutSta(double content) {
            this.TypedValue = content;
        }
        
        public virtual double TypedValue {
            get {
                XElement x = this.Untyped;
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetValueWithValidation(value, "TypedValue", global::LandXml.v1_2.station.TypeDefinition);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static BeginRunoutSta Load(string xmlFile) {
            return XTypedServices.Load<BeginRunoutSta>(xmlFile);
        }
        
        public static BeginRunoutSta Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<BeginRunoutSta>(xmlFile);
        }
        
        public static BeginRunoutSta Parse(string xml) {
            return XTypedServices.Parse<BeginRunoutSta>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<BeginRunoutSta>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Represents the actual measured distance along the geometry in numeric decimal form expressed in linear units. Also known as the internal station value where no station equations are applied.
    /// </para>
    /// </summary>
    public partial class BeginRunoffSta : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TypedValueXName = System.Xml.Linq.XName.Get("TypedValue", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("BeginRunoffSta", "http://www.landxml.org/schema/LandXML-1.2");
        
		public static explicit operator BeginRunoffSta(XElement xe) { return XTypedServices.ToXTypedElement<BeginRunoffSta>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// Represents the actual measured distance along the geometry in numeric decimal form expressed in linear units. Also known as the internal station value where no station equations are applied.
        /// </para>
        /// </summary>
        public BeginRunoffSta() {
        }
        
        /// <summary>
        /// <para>
        /// Represents the actual measured distance along the geometry in numeric decimal form expressed in linear units. Also known as the internal station value where no station equations are applied.
        /// </para>
        /// </summary>
        public BeginRunoffSta(double content) {
            this.TypedValue = content;
        }
        
        public virtual double TypedValue {
            get {
                XElement x = this.Untyped;
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetValueWithValidation(value, "TypedValue", global::LandXml.v1_2.station.TypeDefinition);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static BeginRunoffSta Load(string xmlFile) {
            return XTypedServices.Load<BeginRunoffSta>(xmlFile);
        }
        
        public static BeginRunoffSta Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<BeginRunoffSta>(xmlFile);
        }
        
        public static BeginRunoffSta Parse(string xml) {
            return XTypedServices.Parse<BeginRunoffSta>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<BeginRunoffSta>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Represents the actual measured distance along the geometry in numeric decimal form expressed in linear units. Also known as the internal station value where no station equations are applied.
    /// </para>
    /// </summary>
    public partial class FullSuperSta : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TypedValueXName = System.Xml.Linq.XName.Get("TypedValue", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("FullSuperSta", "http://www.landxml.org/schema/LandXML-1.2");
        
		public static explicit operator FullSuperSta(XElement xe) { return XTypedServices.ToXTypedElement<FullSuperSta>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// Represents the actual measured distance along the geometry in numeric decimal form expressed in linear units. Also known as the internal station value where no station equations are applied.
        /// </para>
        /// </summary>
        public FullSuperSta() {
        }
        
        /// <summary>
        /// <para>
        /// Represents the actual measured distance along the geometry in numeric decimal form expressed in linear units. Also known as the internal station value where no station equations are applied.
        /// </para>
        /// </summary>
        public FullSuperSta(double content) {
            this.TypedValue = content;
        }
        
        public virtual double TypedValue {
            get {
                XElement x = this.Untyped;
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetValueWithValidation(value, "TypedValue", global::LandXml.v1_2.station.TypeDefinition);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static FullSuperSta Load(string xmlFile) {
            return XTypedServices.Load<FullSuperSta>(xmlFile);
        }
        
        public static FullSuperSta Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<FullSuperSta>(xmlFile);
        }
        
        public static FullSuperSta Parse(string xml) {
            return XTypedServices.Parse<FullSuperSta>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<FullSuperSta>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// This item is the  slope. Unit of measure for this item is PERCENT %.
    /// </para>
    /// </summary>
    public partial class FullSuperelev : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TypedValueXName = System.Xml.Linq.XName.Get("TypedValue", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("FullSuperelev", "http://www.landxml.org/schema/LandXML-1.2");
        
		public static explicit operator FullSuperelev(XElement xe) { return XTypedServices.ToXTypedElement<FullSuperelev>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// This item is the  slope. Unit of measure for this item is PERCENT %.
        /// </para>
        /// </summary>
        public FullSuperelev() {
        }
        
        /// <summary>
        /// <para>
        /// This item is the  slope. Unit of measure for this item is PERCENT %.
        /// </para>
        /// </summary>
        public FullSuperelev(double content) {
            this.TypedValue = content;
        }
        
        public virtual double TypedValue {
            get {
                XElement x = this.Untyped;
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetValueWithValidation(value, "TypedValue", global::LandXml.v1_2.slope.TypeDefinition);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static FullSuperelev Load(string xmlFile) {
            return XTypedServices.Load<FullSuperelev>(xmlFile);
        }
        
        public static FullSuperelev Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<FullSuperelev>(xmlFile);
        }
        
        public static FullSuperelev Parse(string xml) {
            return XTypedServices.Parse<FullSuperelev>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<FullSuperelev>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Represents the actual measured distance along the geometry in numeric decimal form expressed in linear units. Also known as the internal station value where no station equations are applied.
    /// </para>
    /// </summary>
    public partial class RunoffSta : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TypedValueXName = System.Xml.Linq.XName.Get("TypedValue", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("RunoffSta", "http://www.landxml.org/schema/LandXML-1.2");
        
		public static explicit operator RunoffSta(XElement xe) { return XTypedServices.ToXTypedElement<RunoffSta>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// Represents the actual measured distance along the geometry in numeric decimal form expressed in linear units. Also known as the internal station value where no station equations are applied.
        /// </para>
        /// </summary>
        public RunoffSta() {
        }
        
        /// <summary>
        /// <para>
        /// Represents the actual measured distance along the geometry in numeric decimal form expressed in linear units. Also known as the internal station value where no station equations are applied.
        /// </para>
        /// </summary>
        public RunoffSta(double content) {
            this.TypedValue = content;
        }
        
        public virtual double TypedValue {
            get {
                XElement x = this.Untyped;
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetValueWithValidation(value, "TypedValue", global::LandXml.v1_2.station.TypeDefinition);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static RunoffSta Load(string xmlFile) {
            return XTypedServices.Load<RunoffSta>(xmlFile);
        }
        
        public static RunoffSta Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<RunoffSta>(xmlFile);
        }
        
        public static RunoffSta Parse(string xml) {
            return XTypedServices.Parse<RunoffSta>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<RunoffSta>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Represents the actual measured distance along the geometry in numeric decimal form expressed in linear units. Also known as the internal station value where no station equations are applied.
    /// </para>
    /// </summary>
    public partial class StartofRunoutSta : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TypedValueXName = System.Xml.Linq.XName.Get("TypedValue", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("StartofRunoutSta", "http://www.landxml.org/schema/LandXML-1.2");
        
		public static explicit operator StartofRunoutSta(XElement xe) { return XTypedServices.ToXTypedElement<StartofRunoutSta>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// Represents the actual measured distance along the geometry in numeric decimal form expressed in linear units. Also known as the internal station value where no station equations are applied.
        /// </para>
        /// </summary>
        public StartofRunoutSta() {
        }
        
        /// <summary>
        /// <para>
        /// Represents the actual measured distance along the geometry in numeric decimal form expressed in linear units. Also known as the internal station value where no station equations are applied.
        /// </para>
        /// </summary>
        public StartofRunoutSta(double content) {
            this.TypedValue = content;
        }
        
        public virtual double TypedValue {
            get {
                XElement x = this.Untyped;
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetValueWithValidation(value, "TypedValue", global::LandXml.v1_2.station.TypeDefinition);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static StartofRunoutSta Load(string xmlFile) {
            return XTypedServices.Load<StartofRunoutSta>(xmlFile);
        }
        
        public static StartofRunoutSta Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<StartofRunoutSta>(xmlFile);
        }
        
        public static StartofRunoutSta Parse(string xml) {
            return XTypedServices.Parse<StartofRunoutSta>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<StartofRunoutSta>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    /// <summary>
    /// <para>
    /// Represents the actual measured distance along the geometry in numeric decimal form expressed in linear units. Also known as the internal station value where no station equations are applied.
    /// </para>
    /// </summary>
    public partial class EndofRunoutSta : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TypedValueXName = System.Xml.Linq.XName.Get("TypedValue", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("EndofRunoutSta", "http://www.landxml.org/schema/LandXML-1.2");
        
		public static explicit operator EndofRunoutSta(XElement xe) { return XTypedServices.ToXTypedElement<EndofRunoutSta>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        /// <summary>
        /// <para>
        /// Represents the actual measured distance along the geometry in numeric decimal form expressed in linear units. Also known as the internal station value where no station equations are applied.
        /// </para>
        /// </summary>
        public EndofRunoutSta() {
        }
        
        /// <summary>
        /// <para>
        /// Represents the actual measured distance along the geometry in numeric decimal form expressed in linear units. Also known as the internal station value where no station equations are applied.
        /// </para>
        /// </summary>
        public EndofRunoutSta(double content) {
            this.TypedValue = content;
        }
        
        public virtual double TypedValue {
            get {
                XElement x = this.Untyped;
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetValueWithValidation(value, "TypedValue", global::LandXml.v1_2.station.TypeDefinition);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static EndofRunoutSta Load(string xmlFile) {
            return XTypedServices.Load<EndofRunoutSta>(xmlFile);
        }
        
        public static EndofRunoutSta Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<EndofRunoutSta>(xmlFile);
        }
        
        public static EndofRunoutSta Parse(string xml) {
            return XTypedServices.Parse<EndofRunoutSta>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<EndofRunoutSta>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class AdverseSE : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TypedValueXName = System.Xml.Linq.XName.Get("TypedValue", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("AdverseSE", "http://www.landxml.org/schema/LandXML-1.2");
        
		public static explicit operator AdverseSE(XElement xe) { return XTypedServices.ToXTypedElement<AdverseSE>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public AdverseSE() {
        }
        
        public AdverseSE(string content) {
            this.TypedValue = content;
        }
        
        public virtual string TypedValue {
            get {
                XElement x = this.Untyped;
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.String).Datatype);
            }
            set {
                this.SetValueWithValidation(value, "TypedValue", global::LandXml.v1_2.adverseSEType.TypeDefinition);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static AdverseSE Load(string xmlFile) {
            return XTypedServices.Load<AdverseSE>(xmlFile);
        }
        
        public static AdverseSE Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<AdverseSE>(xmlFile);
        }
        
        public static AdverseSE Parse(string xml) {
            return XTypedServices.Parse<AdverseSE>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<AdverseSE>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public partial class Station : XTypedElement, IXMetaData {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        internal static readonly System.Xml.Linq.XName TypedValueXName = System.Xml.Linq.XName.Get("TypedValue", "");
        
        private static readonly System.Xml.Linq.XName xName = System.Xml.Linq.XName.Get("Station", "http://www.landxml.org/schema/LandXML-1.2");
        
		public static explicit operator Station(XElement xe) { return XTypedServices.ToXTypedElement<Station>(xe,LinqToXsdTypeManager.Instance as ILinqToXsdTypeManager); }
        
        public Station() {
        }
        
        public Station(double content) {
            this.TypedValue = content;
        }
        
        public virtual double TypedValue {
            get {
                XElement x = this.Untyped;
                return XTypedServices.ParseValue<double>(x, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
            set {
                this.SetValue(value, XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Double).Datatype);
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        System.Xml.Linq.XName IXMetaData.SchemaName {
            get {
                return xName;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        SchemaOrigin IXMetaData.TypeOrigin {
            get {
                return SchemaOrigin.Element;
            }
        }
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        ILinqToXsdTypeManager IXMetaData.TypeManager {
            get {
                return LinqToXsdTypeManager.Instance;
            }
        }
        
        public void Save(string xmlFile) {
            XTypedServices.Save(xmlFile, Untyped);
        }
        
        public void Save(System.IO.TextWriter tw) {
            XTypedServices.Save(tw, Untyped);
        }
        
        public void Save(System.Xml.XmlWriter xmlWriter) {
            XTypedServices.Save(xmlWriter, Untyped);
        }
        
        public static Station Load(string xmlFile) {
            return XTypedServices.Load<Station>(xmlFile);
        }
        
        public static Station Load(System.IO.TextReader xmlFile) {
            return XTypedServices.Load<Station>(xmlFile);
        }
        
        public static Station Parse(string xml) {
            return XTypedServices.Parse<Station>(xml);
        }
        
        public override XTypedElement Clone() {
            return XTypedServices.CloneXTypedElement<Station>(this);
        }
        
        ContentModelEntity IXMetaData.GetContentModel() {
            return ContentModelEntity.Default;
        }
    }
    
    public class LinqToXsdTypeManager : ILinqToXsdTypeManager {
        
        private static Dictionary<System.Xml.Linq.XName, System.Type> typeDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        private static Dictionary<System.Xml.Linq.XName, System.Type> elementDictionary = new Dictionary<System.Xml.Linq.XName, System.Type>();
        
        private static Dictionary<System.Type, System.Type> wrapperDictionary = new Dictionary<System.Type, System.Type>();
        
        private static XmlSchemaSet schemaSet;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private static LinqToXsdTypeManager typeManagerSingleton = new LinqToXsdTypeManager();
        
        static LinqToXsdTypeManager() {
            BuildTypeDictionary();
            BuildElementDictionary();
            BuildWrapperDictionary();
        }
        
        private LinqToXsdTypeManager() {
        }
        
        XmlSchemaSet ILinqToXsdTypeManager.Schemas {
            get {
                if ((schemaSet == null)) {
                    XmlSchemaSet tempSet = new XmlSchemaSet();
                    System.Threading.Interlocked.CompareExchange(ref schemaSet, tempSet, null);
                }
                return schemaSet;
            }
            set {
                schemaSet = value;
            }
        }
        
        Dictionary<System.Xml.Linq.XName, System.Type> ILinqToXsdTypeManager.GlobalTypeDictionary {
            get {
                return typeDictionary;
            }
        }
        
        Dictionary<System.Xml.Linq.XName, System.Type> ILinqToXsdTypeManager.GlobalElementDictionary {
            get {
                return elementDictionary;
            }
        }
        
        Dictionary<System.Type, System.Type> ILinqToXsdTypeManager.RootContentTypeMapping {
            get {
                return wrapperDictionary;
            }
        }
        
        public static LinqToXsdTypeManager Instance {
            get {
                return typeManagerSingleton;
            }
        }
        
        private static void BuildTypeDictionary() {
            typeDictionary.Add(System.Xml.Linq.XName.Get("PointType", "http://www.landxml.org/schema/LandXML-1.2"), typeof(global::LandXml.v1_2.PointType));
            typeDictionary.Add(System.Xml.Linq.XName.Get("PointType3dReq", "http://www.landxml.org/schema/LandXML-1.2"), typeof(global::LandXml.v1_2.PointType3dReq));
            typeDictionary.Add(System.Xml.Linq.XName.Get("RawObservationType", "http://www.landxml.org/schema/LandXML-1.2"), typeof(global::LandXml.v1_2.RawObservationType));
        }
        
        private static void BuildElementDictionary() {
            elementDictionary.Add(System.Xml.Linq.XName.Get("LandXML", "http://www.landxml.org/schema/LandXML-1.2"), typeof(global::LandXml.v1_2.LandXML));
            elementDictionary.Add(System.Xml.Linq.XName.Get("CgPoints", "http://www.landxml.org/schema/LandXML-1.2"), typeof(global::LandXml.v1_2.CgPoints));
            elementDictionary.Add(System.Xml.Linq.XName.Get("CgPoint", "http://www.landxml.org/schema/LandXML-1.2"), typeof(global::LandXml.v1_2.CgPoint));
            elementDictionary.Add(System.Xml.Linq.XName.Get("DocFileRef", "http://www.landxml.org/schema/LandXML-1.2"), typeof(global::LandXml.v1_2.DocFileRef));
            elementDictionary.Add(System.Xml.Linq.XName.Get("Property", "http://www.landxml.org/schema/LandXML-1.2"), typeof(global::LandXml.v1_2.Property));
            elementDictionary.Add(System.Xml.Linq.XName.Get("Feature", "http://www.landxml.org/schema/LandXML-1.2"), typeof(global::LandXml.v1_2.Feature));
            elementDictionary.Add(System.Xml.Linq.XName.Get("FeatureDictionary", "http://www.landxml.org/schema/LandXML-1.2"), typeof(global::LandXml.v1_2.FeatureDictionary));
            elementDictionary.Add(System.Xml.Linq.XName.Get("PntList2D", "http://www.landxml.org/schema/LandXML-1.2"), typeof(global::LandXml.v1_2.PntList2D));
            elementDictionary.Add(System.Xml.Linq.XName.Get("PntList3D", "http://www.landxml.org/schema/LandXML-1.2"), typeof(global::LandXml.v1_2.PntList3D));
            elementDictionary.Add(System.Xml.Linq.XName.Get("IrregularLine", "http://www.landxml.org/schema/LandXML-1.2"), typeof(global::LandXml.v1_2.IrregularLine));
            elementDictionary.Add(System.Xml.Linq.XName.Get("Chain", "http://www.landxml.org/schema/LandXML-1.2"), typeof(global::LandXml.v1_2.Chain));
            elementDictionary.Add(System.Xml.Linq.XName.Get("Curve", "http://www.landxml.org/schema/LandXML-1.2"), typeof(global::LandXml.v1_2.Curve));
            elementDictionary.Add(System.Xml.Linq.XName.Get("Spiral", "http://www.landxml.org/schema/LandXML-1.2"), typeof(global::LandXml.v1_2.Spiral));
            elementDictionary.Add(System.Xml.Linq.XName.Get("CoordGeom", "http://www.landxml.org/schema/LandXML-1.2"), typeof(global::LandXml.v1_2.CoordGeom));
            elementDictionary.Add(System.Xml.Linq.XName.Get("Line", "http://www.landxml.org/schema/LandXML-1.2"), typeof(global::LandXml.v1_2.Line));
            elementDictionary.Add(System.Xml.Linq.XName.Get("CrossSects", "http://www.landxml.org/schema/LandXML-1.2"), typeof(global::LandXml.v1_2.CrossSects));
            elementDictionary.Add(System.Xml.Linq.XName.Get("CrossSect", "http://www.landxml.org/schema/LandXML-1.2"), typeof(global::LandXml.v1_2.CrossSect));
            elementDictionary.Add(System.Xml.Linq.XName.Get("CrossSectSurf", "http://www.landxml.org/schema/LandXML-1.2"), typeof(global::LandXml.v1_2.CrossSectSurf));
            elementDictionary.Add(System.Xml.Linq.XName.Get("CrossSectPnt", "http://www.landxml.org/schema/LandXML-1.2"), typeof(global::LandXml.v1_2.CrossSectPnt));
            elementDictionary.Add(System.Xml.Linq.XName.Get("DesignCrossSectSurf", "http://www.landxml.org/schema/LandXML-1.2"), typeof(global::LandXml.v1_2.DesignCrossSectSurf));
            elementDictionary.Add(System.Xml.Linq.XName.Get("Project", "http://www.landxml.org/schema/LandXML-1.2"), typeof(global::LandXml.v1_2.Project));
            elementDictionary.Add(System.Xml.Linq.XName.Get("Units", "http://www.landxml.org/schema/LandXML-1.2"), typeof(global::LandXml.v1_2.Units));
            elementDictionary.Add(System.Xml.Linq.XName.Get("Metric", "http://www.landxml.org/schema/LandXML-1.2"), typeof(global::LandXml.v1_2.Metric));
            elementDictionary.Add(System.Xml.Linq.XName.Get("Imperial", "http://www.landxml.org/schema/LandXML-1.2"), typeof(global::LandXml.v1_2.Imperial));
            elementDictionary.Add(System.Xml.Linq.XName.Get("CoordinateSystem", "http://www.landxml.org/schema/LandXML-1.2"), typeof(global::LandXml.v1_2.CoordinateSystem));
            elementDictionary.Add(System.Xml.Linq.XName.Get("Application", "http://www.landxml.org/schema/LandXML-1.2"), typeof(global::LandXml.v1_2.Application));
            elementDictionary.Add(System.Xml.Linq.XName.Get("Author", "http://www.landxml.org/schema/LandXML-1.2"), typeof(global::LandXml.v1_2.Author));
            elementDictionary.Add(System.Xml.Linq.XName.Get("Survey", "http://www.landxml.org/schema/LandXML-1.2"), typeof(global::LandXml.v1_2.Survey));
            elementDictionary.Add(System.Xml.Linq.XName.Get("SurveyHeader", "http://www.landxml.org/schema/LandXML-1.2"), typeof(global::LandXml.v1_2.SurveyHeader));
            elementDictionary.Add(System.Xml.Linq.XName.Get("HeadOfPower", "http://www.landxml.org/schema/LandXML-1.2"), typeof(global::LandXml.v1_2.HeadOfPower));
            elementDictionary.Add(System.Xml.Linq.XName.Get("AdministrativeArea", "http://www.landxml.org/schema/LandXML-1.2"), typeof(global::LandXml.v1_2.AdministrativeArea));
            elementDictionary.Add(System.Xml.Linq.XName.Get("AdministrativeDate", "http://www.landxml.org/schema/LandXML-1.2"), typeof(global::LandXml.v1_2.AdministrativeDate));
            elementDictionary.Add(System.Xml.Linq.XName.Get("Annotation", "http://www.landxml.org/schema/LandXML-1.2"), typeof(global::LandXml.v1_2.Annotation));
            elementDictionary.Add(System.Xml.Linq.XName.Get("SurveyorCertificate", "http://www.landxml.org/schema/LandXML-1.2"), typeof(global::LandXml.v1_2.SurveyorCertificate));
            elementDictionary.Add(System.Xml.Linq.XName.Get("PurposeOfSurvey", "http://www.landxml.org/schema/LandXML-1.2"), typeof(global::LandXml.v1_2.PurposeOfSurvey));
            elementDictionary.Add(System.Xml.Linq.XName.Get("Amendment", "http://www.landxml.org/schema/LandXML-1.2"), typeof(global::LandXml.v1_2.Amendment));
            elementDictionary.Add(System.Xml.Linq.XName.Get("AmendmentItem", "http://www.landxml.org/schema/LandXML-1.2"), typeof(global::LandXml.v1_2.AmendmentItem));
            elementDictionary.Add(System.Xml.Linq.XName.Get("Personnel", "http://www.landxml.org/schema/LandXML-1.2"), typeof(global::LandXml.v1_2.Personnel));
            elementDictionary.Add(System.Xml.Linq.XName.Get("FieldNote", "http://www.landxml.org/schema/LandXML-1.2"), typeof(global::LandXml.v1_2.FieldNote));
            elementDictionary.Add(System.Xml.Linq.XName.Get("Equipment", "http://www.landxml.org/schema/LandXML-1.2"), typeof(global::LandXml.v1_2.Equipment));
            elementDictionary.Add(System.Xml.Linq.XName.Get("InstrumentDetails", "http://www.landxml.org/schema/LandXML-1.2"), typeof(global::LandXml.v1_2.InstrumentDetails));
            elementDictionary.Add(System.Xml.Linq.XName.Get("LaserDetails", "http://www.landxml.org/schema/LandXML-1.2"), typeof(global::LandXml.v1_2.LaserDetails));
            elementDictionary.Add(System.Xml.Linq.XName.Get("GPSAntennaDetails", "http://www.landxml.org/schema/LandXML-1.2"), typeof(global::LandXml.v1_2.GPSAntennaDetails));
            elementDictionary.Add(System.Xml.Linq.XName.Get("GPSReceiverDetails", "http://www.landxml.org/schema/LandXML-1.2"), typeof(global::LandXml.v1_2.GPSReceiverDetails));
            elementDictionary.Add(System.Xml.Linq.XName.Get("Corrections", "http://www.landxml.org/schema/LandXML-1.2"), typeof(global::LandXml.v1_2.Corrections));
            elementDictionary.Add(System.Xml.Linq.XName.Get("SurveyMonument", "http://www.landxml.org/schema/LandXML-1.2"), typeof(global::LandXml.v1_2.SurveyMonument));
            elementDictionary.Add(System.Xml.Linq.XName.Get("InstrumentSetup", "http://www.landxml.org/schema/LandXML-1.2"), typeof(global::LandXml.v1_2.InstrumentSetup));
            elementDictionary.Add(System.Xml.Linq.XName.Get("LaserSetup", "http://www.landxml.org/schema/LandXML-1.2"), typeof(global::LandXml.v1_2.LaserSetup));
            elementDictionary.Add(System.Xml.Linq.XName.Get("GPSSetup", "http://www.landxml.org/schema/LandXML-1.2"), typeof(global::LandXml.v1_2.GPSSetup));
            elementDictionary.Add(System.Xml.Linq.XName.Get("TargetSetup", "http://www.landxml.org/schema/LandXML-1.2"), typeof(global::LandXml.v1_2.TargetSetup));
            elementDictionary.Add(System.Xml.Linq.XName.Get("Backsight", "http://www.landxml.org/schema/LandXML-1.2"), typeof(global::LandXml.v1_2.Backsight));
            elementDictionary.Add(System.Xml.Linq.XName.Get("RawObservation", "http://www.landxml.org/schema/LandXML-1.2"), typeof(global::LandXml.v1_2.RawObservation));
            elementDictionary.Add(System.Xml.Linq.XName.Get("TestObservation", "http://www.landxml.org/schema/LandXML-1.2"), typeof(global::LandXml.v1_2.TestObservation));
            elementDictionary.Add(System.Xml.Linq.XName.Get("OffsetVals", "http://www.landxml.org/schema/LandXML-1.2"), typeof(global::LandXml.v1_2.OffsetVals));
            elementDictionary.Add(System.Xml.Linq.XName.Get("GPSVector", "http://www.landxml.org/schema/LandXML-1.2"), typeof(global::LandXml.v1_2.GPSVector));
            elementDictionary.Add(System.Xml.Linq.XName.Get("GPSPosition", "http://www.landxml.org/schema/LandXML-1.2"), typeof(global::LandXml.v1_2.GPSPosition));
            elementDictionary.Add(System.Xml.Linq.XName.Get("GPSQCInfoLevel1", "http://www.landxml.org/schema/LandXML-1.2"), typeof(global::LandXml.v1_2.GPSQCInfoLevel1));
            elementDictionary.Add(System.Xml.Linq.XName.Get("GPSQCInfoLevel2", "http://www.landxml.org/schema/LandXML-1.2"), typeof(global::LandXml.v1_2.GPSQCInfoLevel2));
            elementDictionary.Add(System.Xml.Linq.XName.Get("ObservationGroup", "http://www.landxml.org/schema/LandXML-1.2"), typeof(global::LandXml.v1_2.ObservationGroup));
            elementDictionary.Add(System.Xml.Linq.XName.Get("ControlChecks", "http://www.landxml.org/schema/LandXML-1.2"), typeof(global::LandXml.v1_2.ControlChecks));
            elementDictionary.Add(System.Xml.Linq.XName.Get("PointResults", "http://www.landxml.org/schema/LandXML-1.2"), typeof(global::LandXml.v1_2.PointResults));
            elementDictionary.Add(System.Xml.Linq.XName.Get("ReducedObservation", "http://www.landxml.org/schema/LandXML-1.2"), typeof(global::LandXml.v1_2.ReducedObservation));
            elementDictionary.Add(System.Xml.Linq.XName.Get("ReducedArcObservation", "http://www.landxml.org/schema/LandXML-1.2"), typeof(global::LandXml.v1_2.ReducedArcObservation));
            elementDictionary.Add(System.Xml.Linq.XName.Get("RedHorizontalPosition", "http://www.landxml.org/schema/LandXML-1.2"), typeof(global::LandXml.v1_2.RedHorizontalPosition));
            elementDictionary.Add(System.Xml.Linq.XName.Get("RedVerticalObservation", "http://www.landxml.org/schema/LandXML-1.2"), typeof(global::LandXml.v1_2.RedVerticalObservation));
            elementDictionary.Add(System.Xml.Linq.XName.Get("Monuments", "http://www.landxml.org/schema/LandXML-1.2"), typeof(global::LandXml.v1_2.Monuments));
            elementDictionary.Add(System.Xml.Linq.XName.Get("Monument", "http://www.landxml.org/schema/LandXML-1.2"), typeof(global::LandXml.v1_2.Monument));
            elementDictionary.Add(System.Xml.Linq.XName.Get("Surfaces", "http://www.landxml.org/schema/LandXML-1.2"), typeof(global::LandXml.v1_2.Surfaces));
            elementDictionary.Add(System.Xml.Linq.XName.Get("Surface", "http://www.landxml.org/schema/LandXML-1.2"), typeof(global::LandXml.v1_2.Surface));
            elementDictionary.Add(System.Xml.Linq.XName.Get("SourceData", "http://www.landxml.org/schema/LandXML-1.2"), typeof(global::LandXml.v1_2.SourceData));
            elementDictionary.Add(System.Xml.Linq.XName.Get("DataPoints", "http://www.landxml.org/schema/LandXML-1.2"), typeof(global::LandXml.v1_2.DataPoints));
            elementDictionary.Add(System.Xml.Linq.XName.Get("PointFiles", "http://www.landxml.org/schema/LandXML-1.2"), typeof(global::LandXml.v1_2.PointFiles));
            elementDictionary.Add(System.Xml.Linq.XName.Get("PointFile", "http://www.landxml.org/schema/LandXML-1.2"), typeof(global::LandXml.v1_2.PointFile));
            elementDictionary.Add(System.Xml.Linq.XName.Get("Boundaries", "http://www.landxml.org/schema/LandXML-1.2"), typeof(global::LandXml.v1_2.Boundaries));
            elementDictionary.Add(System.Xml.Linq.XName.Get("Boundary", "http://www.landxml.org/schema/LandXML-1.2"), typeof(global::LandXml.v1_2.Boundary));
            elementDictionary.Add(System.Xml.Linq.XName.Get("Breaklines", "http://www.landxml.org/schema/LandXML-1.2"), typeof(global::LandXml.v1_2.Breaklines));
            elementDictionary.Add(System.Xml.Linq.XName.Get("Breakline", "http://www.landxml.org/schema/LandXML-1.2"), typeof(global::LandXml.v1_2.Breakline));
            elementDictionary.Add(System.Xml.Linq.XName.Get("RetWall", "http://www.landxml.org/schema/LandXML-1.2"), typeof(global::LandXml.v1_2.RetWall));
            elementDictionary.Add(System.Xml.Linq.XName.Get("RetWallPnt", "http://www.landxml.org/schema/LandXML-1.2"), typeof(global::LandXml.v1_2.RetWallPnt));
            elementDictionary.Add(System.Xml.Linq.XName.Get("Contours", "http://www.landxml.org/schema/LandXML-1.2"), typeof(global::LandXml.v1_2.Contours));
            elementDictionary.Add(System.Xml.Linq.XName.Get("Contour", "http://www.landxml.org/schema/LandXML-1.2"), typeof(global::LandXml.v1_2.Contour));
            elementDictionary.Add(System.Xml.Linq.XName.Get("Definition", "http://www.landxml.org/schema/LandXML-1.2"), typeof(global::LandXml.v1_2.Definition));
            elementDictionary.Add(System.Xml.Linq.XName.Get("Pnts", "http://www.landxml.org/schema/LandXML-1.2"), typeof(global::LandXml.v1_2.Pnts));
            elementDictionary.Add(System.Xml.Linq.XName.Get("P", "http://www.landxml.org/schema/LandXML-1.2"), typeof(global::LandXml.v1_2.P));
            elementDictionary.Add(System.Xml.Linq.XName.Get("Faces", "http://www.landxml.org/schema/LandXML-1.2"), typeof(global::LandXml.v1_2.Faces));
            elementDictionary.Add(System.Xml.Linq.XName.Get("F", "http://www.landxml.org/schema/LandXML-1.2"), typeof(global::LandXml.v1_2.F));
            elementDictionary.Add(System.Xml.Linq.XName.Get("Watersheds", "http://www.landxml.org/schema/LandXML-1.2"), typeof(global::LandXml.v1_2.Watersheds));
            elementDictionary.Add(System.Xml.Linq.XName.Get("Watershed", "http://www.landxml.org/schema/LandXML-1.2"), typeof(global::LandXml.v1_2.Watershed));
            elementDictionary.Add(System.Xml.Linq.XName.Get("Outlet", "http://www.landxml.org/schema/LandXML-1.2"), typeof(global::LandXml.v1_2.Outlet));
            elementDictionary.Add(System.Xml.Linq.XName.Get("SurfVolumes", "http://www.landxml.org/schema/LandXML-1.2"), typeof(global::LandXml.v1_2.SurfVolumes));
            elementDictionary.Add(System.Xml.Linq.XName.Get("SurfVolume", "http://www.landxml.org/schema/LandXML-1.2"), typeof(global::LandXml.v1_2.SurfVolume));
            elementDictionary.Add(System.Xml.Linq.XName.Get("Parcels", "http://www.landxml.org/schema/LandXML-1.2"), typeof(global::LandXml.v1_2.Parcels));
            elementDictionary.Add(System.Xml.Linq.XName.Get("Parcel", "http://www.landxml.org/schema/LandXML-1.2"), typeof(global::LandXml.v1_2.Parcel));
            elementDictionary.Add(System.Xml.Linq.XName.Get("VolumeGeom", "http://www.landxml.org/schema/LandXML-1.2"), typeof(global::LandXml.v1_2.VolumeGeom));
            elementDictionary.Add(System.Xml.Linq.XName.Get("Title", "http://www.landxml.org/schema/LandXML-1.2"), typeof(global::LandXml.v1_2.Title));
            elementDictionary.Add(System.Xml.Linq.XName.Get("Exclusions", "http://www.landxml.org/schema/LandXML-1.2"), typeof(global::LandXml.v1_2.Exclusions));
            elementDictionary.Add(System.Xml.Linq.XName.Get("LocationAddress", "http://www.landxml.org/schema/LandXML-1.2"), typeof(global::LandXml.v1_2.LocationAddress));
            elementDictionary.Add(System.Xml.Linq.XName.Get("ComplexName", "http://www.landxml.org/schema/LandXML-1.2"), typeof(global::LandXml.v1_2.ComplexName));
            elementDictionary.Add(System.Xml.Linq.XName.Get("RoadName", "http://www.landxml.org/schema/LandXML-1.2"), typeof(global::LandXml.v1_2.RoadName));
            elementDictionary.Add(System.Xml.Linq.XName.Get("AddressPoint", "http://www.landxml.org/schema/LandXML-1.2"), typeof(global::LandXml.v1_2.AddressPoint));
            elementDictionary.Add(System.Xml.Linq.XName.Get("Alignments", "http://www.landxml.org/schema/LandXML-1.2"), typeof(global::LandXml.v1_2.Alignments));
            elementDictionary.Add(System.Xml.Linq.XName.Get("Alignment", "http://www.landxml.org/schema/LandXML-1.2"), typeof(global::LandXml.v1_2.Alignment));
            elementDictionary.Add(System.Xml.Linq.XName.Get("StaEquation", "http://www.landxml.org/schema/LandXML-1.2"), typeof(global::LandXml.v1_2.StaEquation));
            elementDictionary.Add(System.Xml.Linq.XName.Get("Profile", "http://www.landxml.org/schema/LandXML-1.2"), typeof(global::LandXml.v1_2.Profile));
            elementDictionary.Add(System.Xml.Linq.XName.Get("ProfSurf", "http://www.landxml.org/schema/LandXML-1.2"), typeof(global::LandXml.v1_2.ProfSurf));
            elementDictionary.Add(System.Xml.Linq.XName.Get("ProfAlign", "http://www.landxml.org/schema/LandXML-1.2"), typeof(global::LandXml.v1_2.ProfAlign));
            elementDictionary.Add(System.Xml.Linq.XName.Get("PVI", "http://www.landxml.org/schema/LandXML-1.2"), typeof(global::LandXml.v1_2.PVI));
            elementDictionary.Add(System.Xml.Linq.XName.Get("ParaCurve", "http://www.landxml.org/schema/LandXML-1.2"), typeof(global::LandXml.v1_2.ParaCurve));
            elementDictionary.Add(System.Xml.Linq.XName.Get("UnsymParaCurve", "http://www.landxml.org/schema/LandXML-1.2"), typeof(global::LandXml.v1_2.UnsymParaCurve));
            elementDictionary.Add(System.Xml.Linq.XName.Get("CircCurve", "http://www.landxml.org/schema/LandXML-1.2"), typeof(global::LandXml.v1_2.CircCurve));
            elementDictionary.Add(System.Xml.Linq.XName.Get("PipeNetworks", "http://www.landxml.org/schema/LandXML-1.2"), typeof(global::LandXml.v1_2.PipeNetworks));
            elementDictionary.Add(System.Xml.Linq.XName.Get("PipeNetwork", "http://www.landxml.org/schema/LandXML-1.2"), typeof(global::LandXml.v1_2.PipeNetwork));
            elementDictionary.Add(System.Xml.Linq.XName.Get("Pipes", "http://www.landxml.org/schema/LandXML-1.2"), typeof(global::LandXml.v1_2.Pipes));
            elementDictionary.Add(System.Xml.Linq.XName.Get("Pipe", "http://www.landxml.org/schema/LandXML-1.2"), typeof(global::LandXml.v1_2.Pipe));
            elementDictionary.Add(System.Xml.Linq.XName.Get("CircPipe", "http://www.landxml.org/schema/LandXML-1.2"), typeof(global::LandXml.v1_2.CircPipe));
            elementDictionary.Add(System.Xml.Linq.XName.Get("ElliPipe", "http://www.landxml.org/schema/LandXML-1.2"), typeof(global::LandXml.v1_2.ElliPipe));
            elementDictionary.Add(System.Xml.Linq.XName.Get("EggPipe", "http://www.landxml.org/schema/LandXML-1.2"), typeof(global::LandXml.v1_2.EggPipe));
            elementDictionary.Add(System.Xml.Linq.XName.Get("RectPipe", "http://www.landxml.org/schema/LandXML-1.2"), typeof(global::LandXml.v1_2.RectPipe));
            elementDictionary.Add(System.Xml.Linq.XName.Get("Channel", "http://www.landxml.org/schema/LandXML-1.2"), typeof(global::LandXml.v1_2.Channel));
            elementDictionary.Add(System.Xml.Linq.XName.Get("PipeFlow", "http://www.landxml.org/schema/LandXML-1.2"), typeof(global::LandXml.v1_2.PipeFlow));
            elementDictionary.Add(System.Xml.Linq.XName.Get("Structs", "http://www.landxml.org/schema/LandXML-1.2"), typeof(global::LandXml.v1_2.Structs));
            elementDictionary.Add(System.Xml.Linq.XName.Get("Struct", "http://www.landxml.org/schema/LandXML-1.2"), typeof(global::LandXml.v1_2.Struct));
            elementDictionary.Add(System.Xml.Linq.XName.Get("CircStruct", "http://www.landxml.org/schema/LandXML-1.2"), typeof(global::LandXml.v1_2.CircStruct));
            elementDictionary.Add(System.Xml.Linq.XName.Get("RectStruct", "http://www.landxml.org/schema/LandXML-1.2"), typeof(global::LandXml.v1_2.RectStruct));
            elementDictionary.Add(System.Xml.Linq.XName.Get("InletStruct", "http://www.landxml.org/schema/LandXML-1.2"), typeof(global::LandXml.v1_2.InletStruct));
            elementDictionary.Add(System.Xml.Linq.XName.Get("OutletStruct", "http://www.landxml.org/schema/LandXML-1.2"), typeof(global::LandXml.v1_2.OutletStruct));
            elementDictionary.Add(System.Xml.Linq.XName.Get("Connection", "http://www.landxml.org/schema/LandXML-1.2"), typeof(global::LandXml.v1_2.Connection));
            elementDictionary.Add(System.Xml.Linq.XName.Get("Invert", "http://www.landxml.org/schema/LandXML-1.2"), typeof(global::LandXml.v1_2.Invert));
            elementDictionary.Add(System.Xml.Linq.XName.Get("StructFlow", "http://www.landxml.org/schema/LandXML-1.2"), typeof(global::LandXml.v1_2.StructFlow));
            elementDictionary.Add(System.Xml.Linq.XName.Get("PlanFeatures", "http://www.landxml.org/schema/LandXML-1.2"), typeof(global::LandXml.v1_2.PlanFeatures));
            elementDictionary.Add(System.Xml.Linq.XName.Get("PlanFeature", "http://www.landxml.org/schema/LandXML-1.2"), typeof(global::LandXml.v1_2.PlanFeature));
            elementDictionary.Add(System.Xml.Linq.XName.Get("GradeModel", "http://www.landxml.org/schema/LandXML-1.2"), typeof(global::LandXml.v1_2.GradeModel));
            elementDictionary.Add(System.Xml.Linq.XName.Get("GradeSurface", "http://www.landxml.org/schema/LandXML-1.2"), typeof(global::LandXml.v1_2.GradeSurface));
            elementDictionary.Add(System.Xml.Linq.XName.Get("Zones", "http://www.landxml.org/schema/LandXML-1.2"), typeof(global::LandXml.v1_2.Zones));
            elementDictionary.Add(System.Xml.Linq.XName.Get("Zone", "http://www.landxml.org/schema/LandXML-1.2"), typeof(global::LandXml.v1_2.Zone));
            elementDictionary.Add(System.Xml.Linq.XName.Get("ZoneWidth", "http://www.landxml.org/schema/LandXML-1.2"), typeof(global::LandXml.v1_2.ZoneWidth));
            elementDictionary.Add(System.Xml.Linq.XName.Get("ZoneSlope", "http://www.landxml.org/schema/LandXML-1.2"), typeof(global::LandXml.v1_2.ZoneSlope));
            elementDictionary.Add(System.Xml.Linq.XName.Get("ZoneHinge", "http://www.landxml.org/schema/LandXML-1.2"), typeof(global::LandXml.v1_2.ZoneHinge));
            elementDictionary.Add(System.Xml.Linq.XName.Get("ZoneCutFill", "http://www.landxml.org/schema/LandXML-1.2"), typeof(global::LandXml.v1_2.ZoneCutFill));
            elementDictionary.Add(System.Xml.Linq.XName.Get("ZoneMaterial", "http://www.landxml.org/schema/LandXML-1.2"), typeof(global::LandXml.v1_2.ZoneMaterial));
            elementDictionary.Add(System.Xml.Linq.XName.Get("ZoneCrossSectStructure", "http://www.landxml.org/schema/LandXML-1.2"), typeof(global::LandXml.v1_2.ZoneCrossSectStructure));
            elementDictionary.Add(System.Xml.Linq.XName.Get("Roadways", "http://www.landxml.org/schema/LandXML-1.2"), typeof(global::LandXml.v1_2.Roadways));
            elementDictionary.Add(System.Xml.Linq.XName.Get("Roadway", "http://www.landxml.org/schema/LandXML-1.2"), typeof(global::LandXml.v1_2.Roadway));
            elementDictionary.Add(System.Xml.Linq.XName.Get("Classification", "http://www.landxml.org/schema/LandXML-1.2"), typeof(global::LandXml.v1_2.Classification));
            elementDictionary.Add(System.Xml.Linq.XName.Get("DesignSpeed", "http://www.landxml.org/schema/LandXML-1.2"), typeof(global::LandXml.v1_2.DesignSpeed));
            elementDictionary.Add(System.Xml.Linq.XName.Get("DesignSpeed85th", "http://www.landxml.org/schema/LandXML-1.2"), typeof(global::LandXml.v1_2.DesignSpeed85th));
            elementDictionary.Add(System.Xml.Linq.XName.Get("Speeds", "http://www.landxml.org/schema/LandXML-1.2"), typeof(global::LandXml.v1_2.Speeds));
            elementDictionary.Add(System.Xml.Linq.XName.Get("DailyTrafficVolume", "http://www.landxml.org/schema/LandXML-1.2"), typeof(global::LandXml.v1_2.DailyTrafficVolume));
            elementDictionary.Add(System.Xml.Linq.XName.Get("DesignHour", "http://www.landxml.org/schema/LandXML-1.2"), typeof(global::LandXml.v1_2.DesignHour));
            elementDictionary.Add(System.Xml.Linq.XName.Get("PeakHour", "http://www.landxml.org/schema/LandXML-1.2"), typeof(global::LandXml.v1_2.PeakHour));
            elementDictionary.Add(System.Xml.Linq.XName.Get("TrafficVolume", "http://www.landxml.org/schema/LandXML-1.2"), typeof(global::LandXml.v1_2.TrafficVolume));
            elementDictionary.Add(System.Xml.Linq.XName.Get("Superelevation", "http://www.landxml.org/schema/LandXML-1.2"), typeof(global::LandXml.v1_2.Superelevation));
            elementDictionary.Add(System.Xml.Linq.XName.Get("Lanes", "http://www.landxml.org/schema/LandXML-1.2"), typeof(global::LandXml.v1_2.Lanes));
            elementDictionary.Add(System.Xml.Linq.XName.Get("ThruLane", "http://www.landxml.org/schema/LandXML-1.2"), typeof(global::LandXml.v1_2.ThruLane));
            elementDictionary.Add(System.Xml.Linq.XName.Get("PassingLane", "http://www.landxml.org/schema/LandXML-1.2"), typeof(global::LandXml.v1_2.PassingLane));
            elementDictionary.Add(System.Xml.Linq.XName.Get("TurnLane", "http://www.landxml.org/schema/LandXML-1.2"), typeof(global::LandXml.v1_2.TurnLane));
            elementDictionary.Add(System.Xml.Linq.XName.Get("TwoWayLeftTurnLane", "http://www.landxml.org/schema/LandXML-1.2"), typeof(global::LandXml.v1_2.TwoWayLeftTurnLane));
            elementDictionary.Add(System.Xml.Linq.XName.Get("ClimbLane", "http://www.landxml.org/schema/LandXML-1.2"), typeof(global::LandXml.v1_2.ClimbLane));
            elementDictionary.Add(System.Xml.Linq.XName.Get("OffsetLane", "http://www.landxml.org/schema/LandXML-1.2"), typeof(global::LandXml.v1_2.OffsetLane));
            elementDictionary.Add(System.Xml.Linq.XName.Get("WideningLane", "http://www.landxml.org/schema/LandXML-1.2"), typeof(global::LandXml.v1_2.WideningLane));
            elementDictionary.Add(System.Xml.Linq.XName.Get("Roadside", "http://www.landxml.org/schema/LandXML-1.2"), typeof(global::LandXml.v1_2.Roadside));
            elementDictionary.Add(System.Xml.Linq.XName.Get("Ditch", "http://www.landxml.org/schema/LandXML-1.2"), typeof(global::LandXml.v1_2.Ditch));
            elementDictionary.Add(System.Xml.Linq.XName.Get("ObstructionOffset", "http://www.landxml.org/schema/LandXML-1.2"), typeof(global::LandXml.v1_2.ObstructionOffset));
            elementDictionary.Add(System.Xml.Linq.XName.Get("BikeFacilities", "http://www.landxml.org/schema/LandXML-1.2"), typeof(global::LandXml.v1_2.BikeFacilities));
            elementDictionary.Add(System.Xml.Linq.XName.Get("RoadSign", "http://www.landxml.org/schema/LandXML-1.2"), typeof(global::LandXml.v1_2.RoadSign));
            elementDictionary.Add(System.Xml.Linq.XName.Get("DrivewayDensity", "http://www.landxml.org/schema/LandXML-1.2"), typeof(global::LandXml.v1_2.DrivewayDensity));
            elementDictionary.Add(System.Xml.Linq.XName.Get("HazardRating", "http://www.landxml.org/schema/LandXML-1.2"), typeof(global::LandXml.v1_2.HazardRating));
            elementDictionary.Add(System.Xml.Linq.XName.Get("Intersections", "http://www.landxml.org/schema/LandXML-1.2"), typeof(global::LandXml.v1_2.Intersections));
            elementDictionary.Add(System.Xml.Linq.XName.Get("Intersection", "http://www.landxml.org/schema/LandXML-1.2"), typeof(global::LandXml.v1_2.Intersection));
            elementDictionary.Add(System.Xml.Linq.XName.Get("TrafficControl", "http://www.landxml.org/schema/LandXML-1.2"), typeof(global::LandXml.v1_2.TrafficControl));
            elementDictionary.Add(System.Xml.Linq.XName.Get("Timing", "http://www.landxml.org/schema/LandXML-1.2"), typeof(global::LandXml.v1_2.Timing));
            elementDictionary.Add(System.Xml.Linq.XName.Get("Volume", "http://www.landxml.org/schema/LandXML-1.2"), typeof(global::LandXml.v1_2.Volume));
            elementDictionary.Add(System.Xml.Linq.XName.Get("TurnSpeed", "http://www.landxml.org/schema/LandXML-1.2"), typeof(global::LandXml.v1_2.TurnSpeed));
            elementDictionary.Add(System.Xml.Linq.XName.Get("TurnRestriction", "http://www.landxml.org/schema/LandXML-1.2"), typeof(global::LandXml.v1_2.TurnRestriction));
            elementDictionary.Add(System.Xml.Linq.XName.Get("Curb", "http://www.landxml.org/schema/LandXML-1.2"), typeof(global::LandXml.v1_2.Curb));
            elementDictionary.Add(System.Xml.Linq.XName.Get("Corner", "http://www.landxml.org/schema/LandXML-1.2"), typeof(global::LandXml.v1_2.Corner));
            elementDictionary.Add(System.Xml.Linq.XName.Get("CrashData", "http://www.landxml.org/schema/LandXML-1.2"), typeof(global::LandXml.v1_2.CrashData));
            elementDictionary.Add(System.Xml.Linq.XName.Get("CrashHistory", "http://www.landxml.org/schema/LandXML-1.2"), typeof(global::LandXml.v1_2.CrashHistory));
            elementDictionary.Add(System.Xml.Linq.XName.Get("PostedSpeed", "http://www.landxml.org/schema/LandXML-1.2"), typeof(global::LandXml.v1_2.PostedSpeed));
            elementDictionary.Add(System.Xml.Linq.XName.Get("NoPassingZone", "http://www.landxml.org/schema/LandXML-1.2"), typeof(global::LandXml.v1_2.NoPassingZone));
            elementDictionary.Add(System.Xml.Linq.XName.Get("DecisionSightDistance", "http://www.landxml.org/schema/LandXML-1.2"), typeof(global::LandXml.v1_2.DecisionSightDistance));
            elementDictionary.Add(System.Xml.Linq.XName.Get("BridgeElement", "http://www.landxml.org/schema/LandXML-1.2"), typeof(global::LandXml.v1_2.BridgeElement));
            elementDictionary.Add(System.Xml.Linq.XName.Get("InSpiral", "http://www.landxml.org/schema/LandXML-1.2"), typeof(global::LandXml.v1_2.InSpiral));
            elementDictionary.Add(System.Xml.Linq.XName.Get("Curve1", "http://www.landxml.org/schema/LandXML-1.2"), typeof(global::LandXml.v1_2.Curve1));
            elementDictionary.Add(System.Xml.Linq.XName.Get("ConnSpiral", "http://www.landxml.org/schema/LandXML-1.2"), typeof(global::LandXml.v1_2.ConnSpiral));
            elementDictionary.Add(System.Xml.Linq.XName.Get("Curve2", "http://www.landxml.org/schema/LandXML-1.2"), typeof(global::LandXml.v1_2.Curve2));
            elementDictionary.Add(System.Xml.Linq.XName.Get("OutSpiral", "http://www.landxml.org/schema/LandXML-1.2"), typeof(global::LandXml.v1_2.OutSpiral));
            elementDictionary.Add(System.Xml.Linq.XName.Get("AlignPI", "http://www.landxml.org/schema/LandXML-1.2"), typeof(global::LandXml.v1_2.AlignPI));
            elementDictionary.Add(System.Xml.Linq.XName.Get("AlignPIs", "http://www.landxml.org/schema/LandXML-1.2"), typeof(global::LandXml.v1_2.AlignPIs));
            elementDictionary.Add(System.Xml.Linq.XName.Get("Cant", "http://www.landxml.org/schema/LandXML-1.2"), typeof(global::LandXml.v1_2.Cant));
            elementDictionary.Add(System.Xml.Linq.XName.Get("CantStation", "http://www.landxml.org/schema/LandXML-1.2"), typeof(global::LandXml.v1_2.CantStation));
            elementDictionary.Add(System.Xml.Linq.XName.Get("SpeedStation", "http://www.landxml.org/schema/LandXML-1.2"), typeof(global::LandXml.v1_2.SpeedStation));
            elementDictionary.Add(System.Xml.Linq.XName.Get("Start", "http://www.landxml.org/schema/LandXML-1.2"), typeof(global::LandXml.v1_2.Start));
            elementDictionary.Add(System.Xml.Linq.XName.Get("End", "http://www.landxml.org/schema/LandXML-1.2"), typeof(global::LandXml.v1_2.End));
            elementDictionary.Add(System.Xml.Linq.XName.Get("Center", "http://www.landxml.org/schema/LandXML-1.2"), typeof(global::LandXml.v1_2.Center));
            elementDictionary.Add(System.Xml.Linq.XName.Get("PI", "http://www.landxml.org/schema/LandXML-1.2"), typeof(global::LandXml.v1_2.PI));
            elementDictionary.Add(System.Xml.Linq.XName.Get("MapPoint", "http://www.landxml.org/schema/LandXML-1.2"), typeof(global::LandXml.v1_2.MapPoint));
            elementDictionary.Add(System.Xml.Linq.XName.Get("InstrumentPoint", "http://www.landxml.org/schema/LandXML-1.2"), typeof(global::LandXml.v1_2.InstrumentPoint));
            elementDictionary.Add(System.Xml.Linq.XName.Get("Location", "http://www.landxml.org/schema/LandXML-1.2"), typeof(global::LandXml.v1_2.Location));
            elementDictionary.Add(System.Xml.Linq.XName.Get("TargetPoint", "http://www.landxml.org/schema/LandXML-1.2"), typeof(global::LandXml.v1_2.TargetPoint));
            elementDictionary.Add(System.Xml.Linq.XName.Get("BacksightPoint", "http://www.landxml.org/schema/LandXML-1.2"), typeof(global::LandXml.v1_2.BacksightPoint));
            elementDictionary.Add(System.Xml.Linq.XName.Get("BeginRunoutSta", "http://www.landxml.org/schema/LandXML-1.2"), typeof(global::LandXml.v1_2.BeginRunoutSta));
            elementDictionary.Add(System.Xml.Linq.XName.Get("BeginRunoffSta", "http://www.landxml.org/schema/LandXML-1.2"), typeof(global::LandXml.v1_2.BeginRunoffSta));
            elementDictionary.Add(System.Xml.Linq.XName.Get("FullSuperSta", "http://www.landxml.org/schema/LandXML-1.2"), typeof(global::LandXml.v1_2.FullSuperSta));
            elementDictionary.Add(System.Xml.Linq.XName.Get("FullSuperelev", "http://www.landxml.org/schema/LandXML-1.2"), typeof(global::LandXml.v1_2.FullSuperelev));
            elementDictionary.Add(System.Xml.Linq.XName.Get("RunoffSta", "http://www.landxml.org/schema/LandXML-1.2"), typeof(global::LandXml.v1_2.RunoffSta));
            elementDictionary.Add(System.Xml.Linq.XName.Get("StartofRunoutSta", "http://www.landxml.org/schema/LandXML-1.2"), typeof(global::LandXml.v1_2.StartofRunoutSta));
            elementDictionary.Add(System.Xml.Linq.XName.Get("EndofRunoutSta", "http://www.landxml.org/schema/LandXML-1.2"), typeof(global::LandXml.v1_2.EndofRunoutSta));
            elementDictionary.Add(System.Xml.Linq.XName.Get("AdverseSE", "http://www.landxml.org/schema/LandXML-1.2"), typeof(global::LandXml.v1_2.AdverseSE));
            elementDictionary.Add(System.Xml.Linq.XName.Get("Station", "http://www.landxml.org/schema/LandXML-1.2"), typeof(global::LandXml.v1_2.Station));
        }
        
        private static void BuildWrapperDictionary() {
            wrapperDictionary.Add(typeof(LandXml.v1_2.Start), typeof(global::LandXml.v1_2.PointType));
            wrapperDictionary.Add(typeof(LandXml.v1_2.End), typeof(global::LandXml.v1_2.PointType));
            wrapperDictionary.Add(typeof(LandXml.v1_2.Center), typeof(global::LandXml.v1_2.PointType));
            wrapperDictionary.Add(typeof(LandXml.v1_2.PI), typeof(global::LandXml.v1_2.PointType));
            wrapperDictionary.Add(typeof(LandXml.v1_2.MapPoint), typeof(global::LandXml.v1_2.PointType));
            wrapperDictionary.Add(typeof(LandXml.v1_2.InstrumentPoint), typeof(global::LandXml.v1_2.PointType));
            wrapperDictionary.Add(typeof(LandXml.v1_2.Location), typeof(global::LandXml.v1_2.PointType));
            wrapperDictionary.Add(typeof(LandXml.v1_2.TargetPoint), typeof(global::LandXml.v1_2.PointType));
            wrapperDictionary.Add(typeof(LandXml.v1_2.BacksightPoint), typeof(global::LandXml.v1_2.PointType));
        }
        
        protected internal static void AddSchemas(XmlSchemaSet schemas) {
            schemas.Add(schemaSet);
        }
        
        public static System.Type GetRootType() {
            return elementDictionary[System.Xml.Linq.XName.Get("LandXML", "http://www.landxml.org/schema/LandXML-1.2")];
        }
    }
    
    public partial class XRootNamespace {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XDocument doc;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedElement rootObject;
        

		public LandXML LandXML {  get {return rootObject as LandXML; } }

		public CgPoints CgPoints {  get {return rootObject as CgPoints; } }

		public CgPoint CgPoint {  get {return rootObject as CgPoint; } }

		public DocFileRef DocFileRef {  get {return rootObject as DocFileRef; } }

		public Property Property {  get {return rootObject as Property; } }

		public Feature Feature {  get {return rootObject as Feature; } }

		public FeatureDictionary FeatureDictionary {  get {return rootObject as FeatureDictionary; } }

		public PntList2D PntList2D {  get {return rootObject as PntList2D; } }

		public PntList3D PntList3D {  get {return rootObject as PntList3D; } }

		public IrregularLine IrregularLine {  get {return rootObject as IrregularLine; } }

		public Chain Chain {  get {return rootObject as Chain; } }

		public Curve Curve {  get {return rootObject as Curve; } }

		public Spiral Spiral {  get {return rootObject as Spiral; } }

		public CoordGeom CoordGeom {  get {return rootObject as CoordGeom; } }

		public Line Line {  get {return rootObject as Line; } }

		public CrossSects CrossSects {  get {return rootObject as CrossSects; } }

		public CrossSect CrossSect {  get {return rootObject as CrossSect; } }

		public CrossSectSurf CrossSectSurf {  get {return rootObject as CrossSectSurf; } }

		public CrossSectPnt CrossSectPnt {  get {return rootObject as CrossSectPnt; } }

		public DesignCrossSectSurf DesignCrossSectSurf {  get {return rootObject as DesignCrossSectSurf; } }

		public Project Project {  get {return rootObject as Project; } }

		public Units Units {  get {return rootObject as Units; } }

		public Metric Metric {  get {return rootObject as Metric; } }

		public Imperial Imperial {  get {return rootObject as Imperial; } }

		public CoordinateSystem CoordinateSystem {  get {return rootObject as CoordinateSystem; } }

		public Application Application {  get {return rootObject as Application; } }

		public Author Author {  get {return rootObject as Author; } }

		public Survey Survey {  get {return rootObject as Survey; } }

		public SurveyHeader SurveyHeader {  get {return rootObject as SurveyHeader; } }

		public HeadOfPower HeadOfPower {  get {return rootObject as HeadOfPower; } }

		public AdministrativeArea AdministrativeArea {  get {return rootObject as AdministrativeArea; } }

		public AdministrativeDate AdministrativeDate {  get {return rootObject as AdministrativeDate; } }

		public Annotation Annotation {  get {return rootObject as Annotation; } }

		public SurveyorCertificate SurveyorCertificate {  get {return rootObject as SurveyorCertificate; } }

		public PurposeOfSurvey PurposeOfSurvey {  get {return rootObject as PurposeOfSurvey; } }

		public Amendment Amendment {  get {return rootObject as Amendment; } }

		public AmendmentItem AmendmentItem {  get {return rootObject as AmendmentItem; } }

		public Personnel Personnel {  get {return rootObject as Personnel; } }

		public FieldNote FieldNote {  get {return rootObject as FieldNote; } }

		public Equipment Equipment {  get {return rootObject as Equipment; } }

		public InstrumentDetails InstrumentDetails {  get {return rootObject as InstrumentDetails; } }

		public LaserDetails LaserDetails {  get {return rootObject as LaserDetails; } }

		public GPSAntennaDetails GPSAntennaDetails {  get {return rootObject as GPSAntennaDetails; } }

		public GPSReceiverDetails GPSReceiverDetails {  get {return rootObject as GPSReceiverDetails; } }

		public Corrections Corrections {  get {return rootObject as Corrections; } }

		public SurveyMonument SurveyMonument {  get {return rootObject as SurveyMonument; } }

		public InstrumentSetup InstrumentSetup {  get {return rootObject as InstrumentSetup; } }

		public LaserSetup LaserSetup {  get {return rootObject as LaserSetup; } }

		public GPSSetup GPSSetup {  get {return rootObject as GPSSetup; } }

		public TargetSetup TargetSetup {  get {return rootObject as TargetSetup; } }

		public Backsight Backsight {  get {return rootObject as Backsight; } }

		public RawObservation RawObservation {  get {return rootObject as RawObservation; } }

		public TestObservation TestObservation {  get {return rootObject as TestObservation; } }

		public OffsetVals OffsetVals {  get {return rootObject as OffsetVals; } }

		public GPSVector GPSVector {  get {return rootObject as GPSVector; } }

		public GPSPosition GPSPosition {  get {return rootObject as GPSPosition; } }

		public GPSQCInfoLevel1 GPSQCInfoLevel1 {  get {return rootObject as GPSQCInfoLevel1; } }

		public GPSQCInfoLevel2 GPSQCInfoLevel2 {  get {return rootObject as GPSQCInfoLevel2; } }

		public ObservationGroup ObservationGroup {  get {return rootObject as ObservationGroup; } }

		public ControlChecks ControlChecks {  get {return rootObject as ControlChecks; } }

		public PointResults PointResults {  get {return rootObject as PointResults; } }

		public ReducedObservation ReducedObservation {  get {return rootObject as ReducedObservation; } }

		public ReducedArcObservation ReducedArcObservation {  get {return rootObject as ReducedArcObservation; } }

		public RedHorizontalPosition RedHorizontalPosition {  get {return rootObject as RedHorizontalPosition; } }

		public RedVerticalObservation RedVerticalObservation {  get {return rootObject as RedVerticalObservation; } }

		public Monuments Monuments {  get {return rootObject as Monuments; } }

		public Monument Monument {  get {return rootObject as Monument; } }

		public Surfaces Surfaces {  get {return rootObject as Surfaces; } }

		public Surface Surface {  get {return rootObject as Surface; } }

		public SourceData SourceData {  get {return rootObject as SourceData; } }

		public DataPoints DataPoints {  get {return rootObject as DataPoints; } }

		public PointFiles PointFiles {  get {return rootObject as PointFiles; } }

		public PointFile PointFile {  get {return rootObject as PointFile; } }

		public Boundaries Boundaries {  get {return rootObject as Boundaries; } }

		public Boundary Boundary {  get {return rootObject as Boundary; } }

		public Breaklines Breaklines {  get {return rootObject as Breaklines; } }

		public Breakline Breakline {  get {return rootObject as Breakline; } }

		public RetWall RetWall {  get {return rootObject as RetWall; } }

		public RetWallPnt RetWallPnt {  get {return rootObject as RetWallPnt; } }

		public Contours Contours {  get {return rootObject as Contours; } }

		public Contour Contour {  get {return rootObject as Contour; } }

		public Definition Definition {  get {return rootObject as Definition; } }

		public Pnts Pnts {  get {return rootObject as Pnts; } }

		public P P {  get {return rootObject as P; } }

		public Faces Faces {  get {return rootObject as Faces; } }

		public F F {  get {return rootObject as F; } }

		public Watersheds Watersheds {  get {return rootObject as Watersheds; } }

		public Watershed Watershed {  get {return rootObject as Watershed; } }

		public Outlet Outlet {  get {return rootObject as Outlet; } }

		public SurfVolumes SurfVolumes {  get {return rootObject as SurfVolumes; } }

		public SurfVolume SurfVolume {  get {return rootObject as SurfVolume; } }

		public Parcels Parcels {  get {return rootObject as Parcels; } }

		public Parcel Parcel {  get {return rootObject as Parcel; } }

		public VolumeGeom VolumeGeom {  get {return rootObject as VolumeGeom; } }

		public Title Title {  get {return rootObject as Title; } }

		public Exclusions Exclusions {  get {return rootObject as Exclusions; } }

		public LocationAddress LocationAddress {  get {return rootObject as LocationAddress; } }

		public ComplexName ComplexName {  get {return rootObject as ComplexName; } }

		public RoadName RoadName {  get {return rootObject as RoadName; } }

		public AddressPoint AddressPoint {  get {return rootObject as AddressPoint; } }

		public Alignments Alignments {  get {return rootObject as Alignments; } }

		public Alignment Alignment {  get {return rootObject as Alignment; } }

		public StaEquation StaEquation {  get {return rootObject as StaEquation; } }

		public Profile Profile {  get {return rootObject as Profile; } }

		public ProfSurf ProfSurf {  get {return rootObject as ProfSurf; } }

		public ProfAlign ProfAlign {  get {return rootObject as ProfAlign; } }

		public PVI PVI {  get {return rootObject as PVI; } }

		public ParaCurve ParaCurve {  get {return rootObject as ParaCurve; } }

		public UnsymParaCurve UnsymParaCurve {  get {return rootObject as UnsymParaCurve; } }

		public CircCurve CircCurve {  get {return rootObject as CircCurve; } }

		public PipeNetworks PipeNetworks {  get {return rootObject as PipeNetworks; } }

		public PipeNetwork PipeNetwork {  get {return rootObject as PipeNetwork; } }

		public Pipes Pipes {  get {return rootObject as Pipes; } }

		public Pipe Pipe {  get {return rootObject as Pipe; } }

		public CircPipe CircPipe {  get {return rootObject as CircPipe; } }

		public ElliPipe ElliPipe {  get {return rootObject as ElliPipe; } }

		public EggPipe EggPipe {  get {return rootObject as EggPipe; } }

		public RectPipe RectPipe {  get {return rootObject as RectPipe; } }

		public Channel Channel {  get {return rootObject as Channel; } }

		public PipeFlow PipeFlow {  get {return rootObject as PipeFlow; } }

		public Structs Structs {  get {return rootObject as Structs; } }

		public Struct Struct {  get {return rootObject as Struct; } }

		public CircStruct CircStruct {  get {return rootObject as CircStruct; } }

		public RectStruct RectStruct {  get {return rootObject as RectStruct; } }

		public InletStruct InletStruct {  get {return rootObject as InletStruct; } }

		public OutletStruct OutletStruct {  get {return rootObject as OutletStruct; } }

		public Connection Connection {  get {return rootObject as Connection; } }

		public Invert Invert {  get {return rootObject as Invert; } }

		public StructFlow StructFlow {  get {return rootObject as StructFlow; } }

		public PlanFeatures PlanFeatures {  get {return rootObject as PlanFeatures; } }

		public PlanFeature PlanFeature {  get {return rootObject as PlanFeature; } }

		public GradeModel GradeModel {  get {return rootObject as GradeModel; } }

		public GradeSurface GradeSurface {  get {return rootObject as GradeSurface; } }

		public Zones Zones {  get {return rootObject as Zones; } }

		public Zone Zone {  get {return rootObject as Zone; } }

		public ZoneWidth ZoneWidth {  get {return rootObject as ZoneWidth; } }

		public ZoneSlope ZoneSlope {  get {return rootObject as ZoneSlope; } }

		public ZoneHinge ZoneHinge {  get {return rootObject as ZoneHinge; } }

		public ZoneCutFill ZoneCutFill {  get {return rootObject as ZoneCutFill; } }

		public ZoneMaterial ZoneMaterial {  get {return rootObject as ZoneMaterial; } }

		public ZoneCrossSectStructure ZoneCrossSectStructure {  get {return rootObject as ZoneCrossSectStructure; } }

		public Roadways Roadways {  get {return rootObject as Roadways; } }

		public Roadway Roadway {  get {return rootObject as Roadway; } }

		public Classification Classification {  get {return rootObject as Classification; } }

		public DesignSpeed DesignSpeed {  get {return rootObject as DesignSpeed; } }

		public DesignSpeed85th DesignSpeed85th {  get {return rootObject as DesignSpeed85th; } }

		public Speeds Speeds {  get {return rootObject as Speeds; } }

		public DailyTrafficVolume DailyTrafficVolume {  get {return rootObject as DailyTrafficVolume; } }

		public DesignHour DesignHour {  get {return rootObject as DesignHour; } }

		public PeakHour PeakHour {  get {return rootObject as PeakHour; } }

		public TrafficVolume TrafficVolume {  get {return rootObject as TrafficVolume; } }

		public Superelevation Superelevation {  get {return rootObject as Superelevation; } }

		public Lanes Lanes {  get {return rootObject as Lanes; } }

		public ThruLane ThruLane {  get {return rootObject as ThruLane; } }

		public PassingLane PassingLane {  get {return rootObject as PassingLane; } }

		public TurnLane TurnLane {  get {return rootObject as TurnLane; } }

		public TwoWayLeftTurnLane TwoWayLeftTurnLane {  get {return rootObject as TwoWayLeftTurnLane; } }

		public ClimbLane ClimbLane {  get {return rootObject as ClimbLane; } }

		public OffsetLane OffsetLane {  get {return rootObject as OffsetLane; } }

		public WideningLane WideningLane {  get {return rootObject as WideningLane; } }

		public Roadside Roadside {  get {return rootObject as Roadside; } }

		public Ditch Ditch {  get {return rootObject as Ditch; } }

		public ObstructionOffset ObstructionOffset {  get {return rootObject as ObstructionOffset; } }

		public BikeFacilities BikeFacilities {  get {return rootObject as BikeFacilities; } }

		public RoadSign RoadSign {  get {return rootObject as RoadSign; } }

		public DrivewayDensity DrivewayDensity {  get {return rootObject as DrivewayDensity; } }

		public HazardRating HazardRating {  get {return rootObject as HazardRating; } }

		public Intersections Intersections {  get {return rootObject as Intersections; } }

		public Intersection Intersection {  get {return rootObject as Intersection; } }

		public TrafficControl TrafficControl {  get {return rootObject as TrafficControl; } }

		public Timing Timing {  get {return rootObject as Timing; } }

		public Volume Volume {  get {return rootObject as Volume; } }

		public TurnSpeed TurnSpeed {  get {return rootObject as TurnSpeed; } }

		public TurnRestriction TurnRestriction {  get {return rootObject as TurnRestriction; } }

		public Curb Curb {  get {return rootObject as Curb; } }

		public Corner Corner {  get {return rootObject as Corner; } }

		public CrashData CrashData {  get {return rootObject as CrashData; } }

		public CrashHistory CrashHistory {  get {return rootObject as CrashHistory; } }

		public PostedSpeed PostedSpeed {  get {return rootObject as PostedSpeed; } }

		public NoPassingZone NoPassingZone {  get {return rootObject as NoPassingZone; } }

		public DecisionSightDistance DecisionSightDistance {  get {return rootObject as DecisionSightDistance; } }

		public BridgeElement BridgeElement {  get {return rootObject as BridgeElement; } }

		public InSpiral InSpiral {  get {return rootObject as InSpiral; } }

		public Curve1 Curve1 {  get {return rootObject as Curve1; } }

		public ConnSpiral ConnSpiral {  get {return rootObject as ConnSpiral; } }

		public Curve2 Curve2 {  get {return rootObject as Curve2; } }

		public OutSpiral OutSpiral {  get {return rootObject as OutSpiral; } }

		public AlignPI AlignPI {  get {return rootObject as AlignPI; } }

		public AlignPIs AlignPIs {  get {return rootObject as AlignPIs; } }

		public Cant Cant {  get {return rootObject as Cant; } }

		public CantStation CantStation {  get {return rootObject as CantStation; } }

		public SpeedStation SpeedStation {  get {return rootObject as SpeedStation; } }

		public Start Start {  get {return rootObject as Start; } }

		public End End {  get {return rootObject as End; } }

		public Center Center {  get {return rootObject as Center; } }

		public PI PI {  get {return rootObject as PI; } }

		public MapPoint MapPoint {  get {return rootObject as MapPoint; } }

		public InstrumentPoint InstrumentPoint {  get {return rootObject as InstrumentPoint; } }

		public Location Location {  get {return rootObject as Location; } }

		public TargetPoint TargetPoint {  get {return rootObject as TargetPoint; } }

		public BacksightPoint BacksightPoint {  get {return rootObject as BacksightPoint; } }

		public BeginRunoutSta BeginRunoutSta {  get {return rootObject as BeginRunoutSta; } }

		public BeginRunoffSta BeginRunoffSta {  get {return rootObject as BeginRunoffSta; } }

		public FullSuperSta FullSuperSta {  get {return rootObject as FullSuperSta; } }

		public FullSuperelev FullSuperelev {  get {return rootObject as FullSuperelev; } }

		public RunoffSta RunoffSta {  get {return rootObject as RunoffSta; } }

		public StartofRunoutSta StartofRunoutSta {  get {return rootObject as StartofRunoutSta; } }

		public EndofRunoutSta EndofRunoutSta {  get {return rootObject as EndofRunoutSta; } }

		public AdverseSE AdverseSE {  get {return rootObject as AdverseSE; } }

		public Station Station {  get {return rootObject as Station; } }
        
        private XRootNamespace() {
        }
        
        public XRootNamespace(LandXML root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(CgPoints root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(CgPoint root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(DocFileRef root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(Property root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(Feature root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(FeatureDictionary root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(PntList2D root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(PntList3D root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(IrregularLine root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(Chain root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(Curve root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(Spiral root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(CoordGeom root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(Line root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(CrossSects root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(CrossSect root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(CrossSectSurf root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(CrossSectPnt root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(DesignCrossSectSurf root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(Project root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(Units root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(Metric root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(Imperial root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(CoordinateSystem root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(Application root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(Author root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(Survey root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(SurveyHeader root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(HeadOfPower root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(AdministrativeArea root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(AdministrativeDate root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(Annotation root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(SurveyorCertificate root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(PurposeOfSurvey root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(Amendment root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(AmendmentItem root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(Personnel root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(FieldNote root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(Equipment root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(InstrumentDetails root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(LaserDetails root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(GPSAntennaDetails root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(GPSReceiverDetails root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(Corrections root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(SurveyMonument root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(InstrumentSetup root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(LaserSetup root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(GPSSetup root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(TargetSetup root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(Backsight root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(RawObservation root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(TestObservation root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(OffsetVals root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(GPSVector root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(GPSPosition root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(GPSQCInfoLevel1 root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(GPSQCInfoLevel2 root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(ObservationGroup root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(ControlChecks root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(PointResults root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(ReducedObservation root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(ReducedArcObservation root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(RedHorizontalPosition root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(RedVerticalObservation root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(Monuments root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(Monument root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(Surfaces root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(Surface root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(SourceData root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(DataPoints root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(PointFiles root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(PointFile root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(Boundaries root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(Boundary root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(Breaklines root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(Breakline root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(RetWall root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(RetWallPnt root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(Contours root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(Contour root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(Definition root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(Pnts root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(P root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(Faces root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(F root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(Watersheds root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(Watershed root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(Outlet root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(SurfVolumes root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(SurfVolume root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(Parcels root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(Parcel root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(VolumeGeom root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(Title root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(Exclusions root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(LocationAddress root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(ComplexName root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(RoadName root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(AddressPoint root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(Alignments root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(Alignment root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(StaEquation root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(Profile root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(ProfSurf root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(ProfAlign root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(PVI root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(ParaCurve root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(UnsymParaCurve root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(CircCurve root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(PipeNetworks root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(PipeNetwork root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(Pipes root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(Pipe root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(CircPipe root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(ElliPipe root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(EggPipe root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(RectPipe root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(Channel root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(PipeFlow root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(Structs root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(Struct root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(CircStruct root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(RectStruct root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(InletStruct root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(OutletStruct root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(Connection root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(Invert root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(StructFlow root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(PlanFeatures root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(PlanFeature root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(GradeModel root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(GradeSurface root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(Zones root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(Zone root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(ZoneWidth root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(ZoneSlope root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(ZoneHinge root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(ZoneCutFill root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(ZoneMaterial root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(ZoneCrossSectStructure root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(Roadways root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(Roadway root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(Classification root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(DesignSpeed root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(DesignSpeed85th root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(Speeds root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(DailyTrafficVolume root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(DesignHour root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(PeakHour root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(TrafficVolume root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(Superelevation root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(Lanes root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(ThruLane root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(PassingLane root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(TurnLane root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(TwoWayLeftTurnLane root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(ClimbLane root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(OffsetLane root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(WideningLane root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(Roadside root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(Ditch root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(ObstructionOffset root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(BikeFacilities root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(RoadSign root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(DrivewayDensity root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(HazardRating root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(Intersections root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(Intersection root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(TrafficControl root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(Timing root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(Volume root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(TurnSpeed root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(TurnRestriction root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(Curb root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(Corner root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(CrashData root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(CrashHistory root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(PostedSpeed root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(NoPassingZone root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(DecisionSightDistance root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(BridgeElement root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(InSpiral root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(Curve1 root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(ConnSpiral root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(Curve2 root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(OutSpiral root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(AlignPI root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(AlignPIs root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(Cant root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(CantStation root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(SpeedStation root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(Start root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(End root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(Center root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(PI root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(MapPoint root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(InstrumentPoint root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(Location root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(TargetPoint root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(BacksightPoint root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(BeginRunoutSta root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(BeginRunoffSta root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(FullSuperSta root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(FullSuperelev root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(RunoffSta root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(StartofRunoutSta root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(EndofRunoutSta root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(AdverseSE root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRootNamespace(Station root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public virtual XDocument XDocument {
            get {
                return doc;
            }
        }
        
        public virtual XTypedElement Root {
            get {
                return rootObject;
            }
        }
        
        public static XRootNamespace Load(string xmlFile) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(xmlFile);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRootNamespace Load(string xmlFile, LoadOptions options) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(xmlFile, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRootNamespace Load(TextReader textReader) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(textReader);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRootNamespace Load(TextReader textReader, LoadOptions options) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(textReader, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRootNamespace Load(XmlReader xmlReader) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Load(xmlReader);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRootNamespace Parse(string text) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Parse(text);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRootNamespace Parse(string text, LoadOptions options) {
            XRootNamespace root = new XRootNamespace();
            root.doc = XDocument.Parse(text, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public virtual void Save(string fileName) {
            doc.Save(fileName);
        }
        
        public virtual void Save(TextWriter textWriter) {
            doc.Save(textWriter);
        }
        
        public virtual void Save(XmlWriter writer) {
            doc.Save(writer);
        }
        
        public virtual void Save(TextWriter textWriter, SaveOptions options) {
            doc.Save(textWriter, options);
        }
        
        public virtual void Save(string fileName, SaveOptions options) {
            doc.Save(fileName, options);
        }
    }
    
    public partial class XRoot {
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XDocument doc;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        private XTypedElement rootObject;
        

		public global::LandXml.v1_2.LandXML LandXML {  get {return rootObject as global::LandXml.v1_2.LandXML; } }

		public global::LandXml.v1_2.CgPoints CgPoints {  get {return rootObject as global::LandXml.v1_2.CgPoints; } }

		public global::LandXml.v1_2.CgPoint CgPoint {  get {return rootObject as global::LandXml.v1_2.CgPoint; } }

		public global::LandXml.v1_2.DocFileRef DocFileRef {  get {return rootObject as global::LandXml.v1_2.DocFileRef; } }

		public global::LandXml.v1_2.Property Property {  get {return rootObject as global::LandXml.v1_2.Property; } }

		public global::LandXml.v1_2.Feature Feature {  get {return rootObject as global::LandXml.v1_2.Feature; } }

		public global::LandXml.v1_2.FeatureDictionary FeatureDictionary {  get {return rootObject as global::LandXml.v1_2.FeatureDictionary; } }

		public global::LandXml.v1_2.PntList2D PntList2D {  get {return rootObject as global::LandXml.v1_2.PntList2D; } }

		public global::LandXml.v1_2.PntList3D PntList3D {  get {return rootObject as global::LandXml.v1_2.PntList3D; } }

		public global::LandXml.v1_2.IrregularLine IrregularLine {  get {return rootObject as global::LandXml.v1_2.IrregularLine; } }

		public global::LandXml.v1_2.Chain Chain {  get {return rootObject as global::LandXml.v1_2.Chain; } }

		public global::LandXml.v1_2.Curve Curve {  get {return rootObject as global::LandXml.v1_2.Curve; } }

		public global::LandXml.v1_2.Spiral Spiral {  get {return rootObject as global::LandXml.v1_2.Spiral; } }

		public global::LandXml.v1_2.CoordGeom CoordGeom {  get {return rootObject as global::LandXml.v1_2.CoordGeom; } }

		public global::LandXml.v1_2.Line Line {  get {return rootObject as global::LandXml.v1_2.Line; } }

		public global::LandXml.v1_2.CrossSects CrossSects {  get {return rootObject as global::LandXml.v1_2.CrossSects; } }

		public global::LandXml.v1_2.CrossSect CrossSect {  get {return rootObject as global::LandXml.v1_2.CrossSect; } }

		public global::LandXml.v1_2.CrossSectSurf CrossSectSurf {  get {return rootObject as global::LandXml.v1_2.CrossSectSurf; } }

		public global::LandXml.v1_2.CrossSectPnt CrossSectPnt {  get {return rootObject as global::LandXml.v1_2.CrossSectPnt; } }

		public global::LandXml.v1_2.DesignCrossSectSurf DesignCrossSectSurf {  get {return rootObject as global::LandXml.v1_2.DesignCrossSectSurf; } }

		public global::LandXml.v1_2.Project Project {  get {return rootObject as global::LandXml.v1_2.Project; } }

		public global::LandXml.v1_2.Units Units {  get {return rootObject as global::LandXml.v1_2.Units; } }

		public global::LandXml.v1_2.Metric Metric {  get {return rootObject as global::LandXml.v1_2.Metric; } }

		public global::LandXml.v1_2.Imperial Imperial {  get {return rootObject as global::LandXml.v1_2.Imperial; } }

		public global::LandXml.v1_2.CoordinateSystem CoordinateSystem {  get {return rootObject as global::LandXml.v1_2.CoordinateSystem; } }

		public global::LandXml.v1_2.Application Application {  get {return rootObject as global::LandXml.v1_2.Application; } }

		public global::LandXml.v1_2.Author Author {  get {return rootObject as global::LandXml.v1_2.Author; } }

		public global::LandXml.v1_2.Survey Survey {  get {return rootObject as global::LandXml.v1_2.Survey; } }

		public global::LandXml.v1_2.SurveyHeader SurveyHeader {  get {return rootObject as global::LandXml.v1_2.SurveyHeader; } }

		public global::LandXml.v1_2.HeadOfPower HeadOfPower {  get {return rootObject as global::LandXml.v1_2.HeadOfPower; } }

		public global::LandXml.v1_2.AdministrativeArea AdministrativeArea {  get {return rootObject as global::LandXml.v1_2.AdministrativeArea; } }

		public global::LandXml.v1_2.AdministrativeDate AdministrativeDate {  get {return rootObject as global::LandXml.v1_2.AdministrativeDate; } }

		public global::LandXml.v1_2.Annotation Annotation {  get {return rootObject as global::LandXml.v1_2.Annotation; } }

		public global::LandXml.v1_2.SurveyorCertificate SurveyorCertificate {  get {return rootObject as global::LandXml.v1_2.SurveyorCertificate; } }

		public global::LandXml.v1_2.PurposeOfSurvey PurposeOfSurvey {  get {return rootObject as global::LandXml.v1_2.PurposeOfSurvey; } }

		public global::LandXml.v1_2.Amendment Amendment {  get {return rootObject as global::LandXml.v1_2.Amendment; } }

		public global::LandXml.v1_2.AmendmentItem AmendmentItem {  get {return rootObject as global::LandXml.v1_2.AmendmentItem; } }

		public global::LandXml.v1_2.Personnel Personnel {  get {return rootObject as global::LandXml.v1_2.Personnel; } }

		public global::LandXml.v1_2.FieldNote FieldNote {  get {return rootObject as global::LandXml.v1_2.FieldNote; } }

		public global::LandXml.v1_2.Equipment Equipment {  get {return rootObject as global::LandXml.v1_2.Equipment; } }

		public global::LandXml.v1_2.InstrumentDetails InstrumentDetails {  get {return rootObject as global::LandXml.v1_2.InstrumentDetails; } }

		public global::LandXml.v1_2.LaserDetails LaserDetails {  get {return rootObject as global::LandXml.v1_2.LaserDetails; } }

		public global::LandXml.v1_2.GPSAntennaDetails GPSAntennaDetails {  get {return rootObject as global::LandXml.v1_2.GPSAntennaDetails; } }

		public global::LandXml.v1_2.GPSReceiverDetails GPSReceiverDetails {  get {return rootObject as global::LandXml.v1_2.GPSReceiverDetails; } }

		public global::LandXml.v1_2.Corrections Corrections {  get {return rootObject as global::LandXml.v1_2.Corrections; } }

		public global::LandXml.v1_2.SurveyMonument SurveyMonument {  get {return rootObject as global::LandXml.v1_2.SurveyMonument; } }

		public global::LandXml.v1_2.InstrumentSetup InstrumentSetup {  get {return rootObject as global::LandXml.v1_2.InstrumentSetup; } }

		public global::LandXml.v1_2.LaserSetup LaserSetup {  get {return rootObject as global::LandXml.v1_2.LaserSetup; } }

		public global::LandXml.v1_2.GPSSetup GPSSetup {  get {return rootObject as global::LandXml.v1_2.GPSSetup; } }

		public global::LandXml.v1_2.TargetSetup TargetSetup {  get {return rootObject as global::LandXml.v1_2.TargetSetup; } }

		public global::LandXml.v1_2.Backsight Backsight {  get {return rootObject as global::LandXml.v1_2.Backsight; } }

		public global::LandXml.v1_2.RawObservation RawObservation {  get {return rootObject as global::LandXml.v1_2.RawObservation; } }

		public global::LandXml.v1_2.TestObservation TestObservation {  get {return rootObject as global::LandXml.v1_2.TestObservation; } }

		public global::LandXml.v1_2.OffsetVals OffsetVals {  get {return rootObject as global::LandXml.v1_2.OffsetVals; } }

		public global::LandXml.v1_2.GPSVector GPSVector {  get {return rootObject as global::LandXml.v1_2.GPSVector; } }

		public global::LandXml.v1_2.GPSPosition GPSPosition {  get {return rootObject as global::LandXml.v1_2.GPSPosition; } }

		public global::LandXml.v1_2.GPSQCInfoLevel1 GPSQCInfoLevel1 {  get {return rootObject as global::LandXml.v1_2.GPSQCInfoLevel1; } }

		public global::LandXml.v1_2.GPSQCInfoLevel2 GPSQCInfoLevel2 {  get {return rootObject as global::LandXml.v1_2.GPSQCInfoLevel2; } }

		public global::LandXml.v1_2.ObservationGroup ObservationGroup {  get {return rootObject as global::LandXml.v1_2.ObservationGroup; } }

		public global::LandXml.v1_2.ControlChecks ControlChecks {  get {return rootObject as global::LandXml.v1_2.ControlChecks; } }

		public global::LandXml.v1_2.PointResults PointResults {  get {return rootObject as global::LandXml.v1_2.PointResults; } }

		public global::LandXml.v1_2.ReducedObservation ReducedObservation {  get {return rootObject as global::LandXml.v1_2.ReducedObservation; } }

		public global::LandXml.v1_2.ReducedArcObservation ReducedArcObservation {  get {return rootObject as global::LandXml.v1_2.ReducedArcObservation; } }

		public global::LandXml.v1_2.RedHorizontalPosition RedHorizontalPosition {  get {return rootObject as global::LandXml.v1_2.RedHorizontalPosition; } }

		public global::LandXml.v1_2.RedVerticalObservation RedVerticalObservation {  get {return rootObject as global::LandXml.v1_2.RedVerticalObservation; } }

		public global::LandXml.v1_2.Monuments Monuments {  get {return rootObject as global::LandXml.v1_2.Monuments; } }

		public global::LandXml.v1_2.Monument Monument {  get {return rootObject as global::LandXml.v1_2.Monument; } }

		public global::LandXml.v1_2.Surfaces Surfaces {  get {return rootObject as global::LandXml.v1_2.Surfaces; } }

		public global::LandXml.v1_2.Surface Surface {  get {return rootObject as global::LandXml.v1_2.Surface; } }

		public global::LandXml.v1_2.SourceData SourceData {  get {return rootObject as global::LandXml.v1_2.SourceData; } }

		public global::LandXml.v1_2.DataPoints DataPoints {  get {return rootObject as global::LandXml.v1_2.DataPoints; } }

		public global::LandXml.v1_2.PointFiles PointFiles {  get {return rootObject as global::LandXml.v1_2.PointFiles; } }

		public global::LandXml.v1_2.PointFile PointFile {  get {return rootObject as global::LandXml.v1_2.PointFile; } }

		public global::LandXml.v1_2.Boundaries Boundaries {  get {return rootObject as global::LandXml.v1_2.Boundaries; } }

		public global::LandXml.v1_2.Boundary Boundary {  get {return rootObject as global::LandXml.v1_2.Boundary; } }

		public global::LandXml.v1_2.Breaklines Breaklines {  get {return rootObject as global::LandXml.v1_2.Breaklines; } }

		public global::LandXml.v1_2.Breakline Breakline {  get {return rootObject as global::LandXml.v1_2.Breakline; } }

		public global::LandXml.v1_2.RetWall RetWall {  get {return rootObject as global::LandXml.v1_2.RetWall; } }

		public global::LandXml.v1_2.RetWallPnt RetWallPnt {  get {return rootObject as global::LandXml.v1_2.RetWallPnt; } }

		public global::LandXml.v1_2.Contours Contours {  get {return rootObject as global::LandXml.v1_2.Contours; } }

		public global::LandXml.v1_2.Contour Contour {  get {return rootObject as global::LandXml.v1_2.Contour; } }

		public global::LandXml.v1_2.Definition Definition {  get {return rootObject as global::LandXml.v1_2.Definition; } }

		public global::LandXml.v1_2.Pnts Pnts {  get {return rootObject as global::LandXml.v1_2.Pnts; } }

		public global::LandXml.v1_2.P P {  get {return rootObject as global::LandXml.v1_2.P; } }

		public global::LandXml.v1_2.Faces Faces {  get {return rootObject as global::LandXml.v1_2.Faces; } }

		public global::LandXml.v1_2.F F {  get {return rootObject as global::LandXml.v1_2.F; } }

		public global::LandXml.v1_2.Watersheds Watersheds {  get {return rootObject as global::LandXml.v1_2.Watersheds; } }

		public global::LandXml.v1_2.Watershed Watershed {  get {return rootObject as global::LandXml.v1_2.Watershed; } }

		public global::LandXml.v1_2.Outlet Outlet {  get {return rootObject as global::LandXml.v1_2.Outlet; } }

		public global::LandXml.v1_2.SurfVolumes SurfVolumes {  get {return rootObject as global::LandXml.v1_2.SurfVolumes; } }

		public global::LandXml.v1_2.SurfVolume SurfVolume {  get {return rootObject as global::LandXml.v1_2.SurfVolume; } }

		public global::LandXml.v1_2.Parcels Parcels {  get {return rootObject as global::LandXml.v1_2.Parcels; } }

		public global::LandXml.v1_2.Parcel Parcel {  get {return rootObject as global::LandXml.v1_2.Parcel; } }

		public global::LandXml.v1_2.VolumeGeom VolumeGeom {  get {return rootObject as global::LandXml.v1_2.VolumeGeom; } }

		public global::LandXml.v1_2.Title Title {  get {return rootObject as global::LandXml.v1_2.Title; } }

		public global::LandXml.v1_2.Exclusions Exclusions {  get {return rootObject as global::LandXml.v1_2.Exclusions; } }

		public global::LandXml.v1_2.LocationAddress LocationAddress {  get {return rootObject as global::LandXml.v1_2.LocationAddress; } }

		public global::LandXml.v1_2.ComplexName ComplexName {  get {return rootObject as global::LandXml.v1_2.ComplexName; } }

		public global::LandXml.v1_2.RoadName RoadName {  get {return rootObject as global::LandXml.v1_2.RoadName; } }

		public global::LandXml.v1_2.AddressPoint AddressPoint {  get {return rootObject as global::LandXml.v1_2.AddressPoint; } }

		public global::LandXml.v1_2.Alignments Alignments {  get {return rootObject as global::LandXml.v1_2.Alignments; } }

		public global::LandXml.v1_2.Alignment Alignment {  get {return rootObject as global::LandXml.v1_2.Alignment; } }

		public global::LandXml.v1_2.StaEquation StaEquation {  get {return rootObject as global::LandXml.v1_2.StaEquation; } }

		public global::LandXml.v1_2.Profile Profile {  get {return rootObject as global::LandXml.v1_2.Profile; } }

		public global::LandXml.v1_2.ProfSurf ProfSurf {  get {return rootObject as global::LandXml.v1_2.ProfSurf; } }

		public global::LandXml.v1_2.ProfAlign ProfAlign {  get {return rootObject as global::LandXml.v1_2.ProfAlign; } }

		public global::LandXml.v1_2.PVI PVI {  get {return rootObject as global::LandXml.v1_2.PVI; } }

		public global::LandXml.v1_2.ParaCurve ParaCurve {  get {return rootObject as global::LandXml.v1_2.ParaCurve; } }

		public global::LandXml.v1_2.UnsymParaCurve UnsymParaCurve {  get {return rootObject as global::LandXml.v1_2.UnsymParaCurve; } }

		public global::LandXml.v1_2.CircCurve CircCurve {  get {return rootObject as global::LandXml.v1_2.CircCurve; } }

		public global::LandXml.v1_2.PipeNetworks PipeNetworks {  get {return rootObject as global::LandXml.v1_2.PipeNetworks; } }

		public global::LandXml.v1_2.PipeNetwork PipeNetwork {  get {return rootObject as global::LandXml.v1_2.PipeNetwork; } }

		public global::LandXml.v1_2.Pipes Pipes {  get {return rootObject as global::LandXml.v1_2.Pipes; } }

		public global::LandXml.v1_2.Pipe Pipe {  get {return rootObject as global::LandXml.v1_2.Pipe; } }

		public global::LandXml.v1_2.CircPipe CircPipe {  get {return rootObject as global::LandXml.v1_2.CircPipe; } }

		public global::LandXml.v1_2.ElliPipe ElliPipe {  get {return rootObject as global::LandXml.v1_2.ElliPipe; } }

		public global::LandXml.v1_2.EggPipe EggPipe {  get {return rootObject as global::LandXml.v1_2.EggPipe; } }

		public global::LandXml.v1_2.RectPipe RectPipe {  get {return rootObject as global::LandXml.v1_2.RectPipe; } }

		public global::LandXml.v1_2.Channel Channel {  get {return rootObject as global::LandXml.v1_2.Channel; } }

		public global::LandXml.v1_2.PipeFlow PipeFlow {  get {return rootObject as global::LandXml.v1_2.PipeFlow; } }

		public global::LandXml.v1_2.Structs Structs {  get {return rootObject as global::LandXml.v1_2.Structs; } }

		public global::LandXml.v1_2.Struct Struct {  get {return rootObject as global::LandXml.v1_2.Struct; } }

		public global::LandXml.v1_2.CircStruct CircStruct {  get {return rootObject as global::LandXml.v1_2.CircStruct; } }

		public global::LandXml.v1_2.RectStruct RectStruct {  get {return rootObject as global::LandXml.v1_2.RectStruct; } }

		public global::LandXml.v1_2.InletStruct InletStruct {  get {return rootObject as global::LandXml.v1_2.InletStruct; } }

		public global::LandXml.v1_2.OutletStruct OutletStruct {  get {return rootObject as global::LandXml.v1_2.OutletStruct; } }

		public global::LandXml.v1_2.Connection Connection {  get {return rootObject as global::LandXml.v1_2.Connection; } }

		public global::LandXml.v1_2.Invert Invert {  get {return rootObject as global::LandXml.v1_2.Invert; } }

		public global::LandXml.v1_2.StructFlow StructFlow {  get {return rootObject as global::LandXml.v1_2.StructFlow; } }

		public global::LandXml.v1_2.PlanFeatures PlanFeatures {  get {return rootObject as global::LandXml.v1_2.PlanFeatures; } }

		public global::LandXml.v1_2.PlanFeature PlanFeature {  get {return rootObject as global::LandXml.v1_2.PlanFeature; } }

		public global::LandXml.v1_2.GradeModel GradeModel {  get {return rootObject as global::LandXml.v1_2.GradeModel; } }

		public global::LandXml.v1_2.GradeSurface GradeSurface {  get {return rootObject as global::LandXml.v1_2.GradeSurface; } }

		public global::LandXml.v1_2.Zones Zones {  get {return rootObject as global::LandXml.v1_2.Zones; } }

		public global::LandXml.v1_2.Zone Zone {  get {return rootObject as global::LandXml.v1_2.Zone; } }

		public global::LandXml.v1_2.ZoneWidth ZoneWidth {  get {return rootObject as global::LandXml.v1_2.ZoneWidth; } }

		public global::LandXml.v1_2.ZoneSlope ZoneSlope {  get {return rootObject as global::LandXml.v1_2.ZoneSlope; } }

		public global::LandXml.v1_2.ZoneHinge ZoneHinge {  get {return rootObject as global::LandXml.v1_2.ZoneHinge; } }

		public global::LandXml.v1_2.ZoneCutFill ZoneCutFill {  get {return rootObject as global::LandXml.v1_2.ZoneCutFill; } }

		public global::LandXml.v1_2.ZoneMaterial ZoneMaterial {  get {return rootObject as global::LandXml.v1_2.ZoneMaterial; } }

		public global::LandXml.v1_2.ZoneCrossSectStructure ZoneCrossSectStructure {  get {return rootObject as global::LandXml.v1_2.ZoneCrossSectStructure; } }

		public global::LandXml.v1_2.Roadways Roadways {  get {return rootObject as global::LandXml.v1_2.Roadways; } }

		public global::LandXml.v1_2.Roadway Roadway {  get {return rootObject as global::LandXml.v1_2.Roadway; } }

		public global::LandXml.v1_2.Classification Classification {  get {return rootObject as global::LandXml.v1_2.Classification; } }

		public global::LandXml.v1_2.DesignSpeed DesignSpeed {  get {return rootObject as global::LandXml.v1_2.DesignSpeed; } }

		public global::LandXml.v1_2.DesignSpeed85th DesignSpeed85th {  get {return rootObject as global::LandXml.v1_2.DesignSpeed85th; } }

		public global::LandXml.v1_2.Speeds Speeds {  get {return rootObject as global::LandXml.v1_2.Speeds; } }

		public global::LandXml.v1_2.DailyTrafficVolume DailyTrafficVolume {  get {return rootObject as global::LandXml.v1_2.DailyTrafficVolume; } }

		public global::LandXml.v1_2.DesignHour DesignHour {  get {return rootObject as global::LandXml.v1_2.DesignHour; } }

		public global::LandXml.v1_2.PeakHour PeakHour {  get {return rootObject as global::LandXml.v1_2.PeakHour; } }

		public global::LandXml.v1_2.TrafficVolume TrafficVolume {  get {return rootObject as global::LandXml.v1_2.TrafficVolume; } }

		public global::LandXml.v1_2.Superelevation Superelevation {  get {return rootObject as global::LandXml.v1_2.Superelevation; } }

		public global::LandXml.v1_2.Lanes Lanes {  get {return rootObject as global::LandXml.v1_2.Lanes; } }

		public global::LandXml.v1_2.ThruLane ThruLane {  get {return rootObject as global::LandXml.v1_2.ThruLane; } }

		public global::LandXml.v1_2.PassingLane PassingLane {  get {return rootObject as global::LandXml.v1_2.PassingLane; } }

		public global::LandXml.v1_2.TurnLane TurnLane {  get {return rootObject as global::LandXml.v1_2.TurnLane; } }

		public global::LandXml.v1_2.TwoWayLeftTurnLane TwoWayLeftTurnLane {  get {return rootObject as global::LandXml.v1_2.TwoWayLeftTurnLane; } }

		public global::LandXml.v1_2.ClimbLane ClimbLane {  get {return rootObject as global::LandXml.v1_2.ClimbLane; } }

		public global::LandXml.v1_2.OffsetLane OffsetLane {  get {return rootObject as global::LandXml.v1_2.OffsetLane; } }

		public global::LandXml.v1_2.WideningLane WideningLane {  get {return rootObject as global::LandXml.v1_2.WideningLane; } }

		public global::LandXml.v1_2.Roadside Roadside {  get {return rootObject as global::LandXml.v1_2.Roadside; } }

		public global::LandXml.v1_2.Ditch Ditch {  get {return rootObject as global::LandXml.v1_2.Ditch; } }

		public global::LandXml.v1_2.ObstructionOffset ObstructionOffset {  get {return rootObject as global::LandXml.v1_2.ObstructionOffset; } }

		public global::LandXml.v1_2.BikeFacilities BikeFacilities {  get {return rootObject as global::LandXml.v1_2.BikeFacilities; } }

		public global::LandXml.v1_2.RoadSign RoadSign {  get {return rootObject as global::LandXml.v1_2.RoadSign; } }

		public global::LandXml.v1_2.DrivewayDensity DrivewayDensity {  get {return rootObject as global::LandXml.v1_2.DrivewayDensity; } }

		public global::LandXml.v1_2.HazardRating HazardRating {  get {return rootObject as global::LandXml.v1_2.HazardRating; } }

		public global::LandXml.v1_2.Intersections Intersections {  get {return rootObject as global::LandXml.v1_2.Intersections; } }

		public global::LandXml.v1_2.Intersection Intersection {  get {return rootObject as global::LandXml.v1_2.Intersection; } }

		public global::LandXml.v1_2.TrafficControl TrafficControl {  get {return rootObject as global::LandXml.v1_2.TrafficControl; } }

		public global::LandXml.v1_2.Timing Timing {  get {return rootObject as global::LandXml.v1_2.Timing; } }

		public global::LandXml.v1_2.Volume Volume {  get {return rootObject as global::LandXml.v1_2.Volume; } }

		public global::LandXml.v1_2.TurnSpeed TurnSpeed {  get {return rootObject as global::LandXml.v1_2.TurnSpeed; } }

		public global::LandXml.v1_2.TurnRestriction TurnRestriction {  get {return rootObject as global::LandXml.v1_2.TurnRestriction; } }

		public global::LandXml.v1_2.Curb Curb {  get {return rootObject as global::LandXml.v1_2.Curb; } }

		public global::LandXml.v1_2.Corner Corner {  get {return rootObject as global::LandXml.v1_2.Corner; } }

		public global::LandXml.v1_2.CrashData CrashData {  get {return rootObject as global::LandXml.v1_2.CrashData; } }

		public global::LandXml.v1_2.CrashHistory CrashHistory {  get {return rootObject as global::LandXml.v1_2.CrashHistory; } }

		public global::LandXml.v1_2.PostedSpeed PostedSpeed {  get {return rootObject as global::LandXml.v1_2.PostedSpeed; } }

		public global::LandXml.v1_2.NoPassingZone NoPassingZone {  get {return rootObject as global::LandXml.v1_2.NoPassingZone; } }

		public global::LandXml.v1_2.DecisionSightDistance DecisionSightDistance {  get {return rootObject as global::LandXml.v1_2.DecisionSightDistance; } }

		public global::LandXml.v1_2.BridgeElement BridgeElement {  get {return rootObject as global::LandXml.v1_2.BridgeElement; } }

		public global::LandXml.v1_2.InSpiral InSpiral {  get {return rootObject as global::LandXml.v1_2.InSpiral; } }

		public global::LandXml.v1_2.Curve1 Curve1 {  get {return rootObject as global::LandXml.v1_2.Curve1; } }

		public global::LandXml.v1_2.ConnSpiral ConnSpiral {  get {return rootObject as global::LandXml.v1_2.ConnSpiral; } }

		public global::LandXml.v1_2.Curve2 Curve2 {  get {return rootObject as global::LandXml.v1_2.Curve2; } }

		public global::LandXml.v1_2.OutSpiral OutSpiral {  get {return rootObject as global::LandXml.v1_2.OutSpiral; } }

		public global::LandXml.v1_2.AlignPI AlignPI {  get {return rootObject as global::LandXml.v1_2.AlignPI; } }

		public global::LandXml.v1_2.AlignPIs AlignPIs {  get {return rootObject as global::LandXml.v1_2.AlignPIs; } }

		public global::LandXml.v1_2.Cant Cant {  get {return rootObject as global::LandXml.v1_2.Cant; } }

		public global::LandXml.v1_2.CantStation CantStation {  get {return rootObject as global::LandXml.v1_2.CantStation; } }

		public global::LandXml.v1_2.SpeedStation SpeedStation {  get {return rootObject as global::LandXml.v1_2.SpeedStation; } }

		public global::LandXml.v1_2.Start Start {  get {return rootObject as global::LandXml.v1_2.Start; } }

		public global::LandXml.v1_2.End End {  get {return rootObject as global::LandXml.v1_2.End; } }

		public global::LandXml.v1_2.Center Center {  get {return rootObject as global::LandXml.v1_2.Center; } }

		public global::LandXml.v1_2.PI PI {  get {return rootObject as global::LandXml.v1_2.PI; } }

		public global::LandXml.v1_2.MapPoint MapPoint {  get {return rootObject as global::LandXml.v1_2.MapPoint; } }

		public global::LandXml.v1_2.InstrumentPoint InstrumentPoint {  get {return rootObject as global::LandXml.v1_2.InstrumentPoint; } }

		public global::LandXml.v1_2.Location Location {  get {return rootObject as global::LandXml.v1_2.Location; } }

		public global::LandXml.v1_2.TargetPoint TargetPoint {  get {return rootObject as global::LandXml.v1_2.TargetPoint; } }

		public global::LandXml.v1_2.BacksightPoint BacksightPoint {  get {return rootObject as global::LandXml.v1_2.BacksightPoint; } }

		public global::LandXml.v1_2.BeginRunoutSta BeginRunoutSta {  get {return rootObject as global::LandXml.v1_2.BeginRunoutSta; } }

		public global::LandXml.v1_2.BeginRunoffSta BeginRunoffSta {  get {return rootObject as global::LandXml.v1_2.BeginRunoffSta; } }

		public global::LandXml.v1_2.FullSuperSta FullSuperSta {  get {return rootObject as global::LandXml.v1_2.FullSuperSta; } }

		public global::LandXml.v1_2.FullSuperelev FullSuperelev {  get {return rootObject as global::LandXml.v1_2.FullSuperelev; } }

		public global::LandXml.v1_2.RunoffSta RunoffSta {  get {return rootObject as global::LandXml.v1_2.RunoffSta; } }

		public global::LandXml.v1_2.StartofRunoutSta StartofRunoutSta {  get {return rootObject as global::LandXml.v1_2.StartofRunoutSta; } }

		public global::LandXml.v1_2.EndofRunoutSta EndofRunoutSta {  get {return rootObject as global::LandXml.v1_2.EndofRunoutSta; } }

		public global::LandXml.v1_2.AdverseSE AdverseSE {  get {return rootObject as global::LandXml.v1_2.AdverseSE; } }

		public global::LandXml.v1_2.Station Station {  get {return rootObject as global::LandXml.v1_2.Station; } }
        
        private XRoot() {
        }
        
        public XRoot(global::LandXml.v1_2.LandXML root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::LandXml.v1_2.CgPoints root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::LandXml.v1_2.CgPoint root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::LandXml.v1_2.DocFileRef root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::LandXml.v1_2.Property root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::LandXml.v1_2.Feature root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::LandXml.v1_2.FeatureDictionary root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::LandXml.v1_2.PntList2D root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::LandXml.v1_2.PntList3D root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::LandXml.v1_2.IrregularLine root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::LandXml.v1_2.Chain root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::LandXml.v1_2.Curve root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::LandXml.v1_2.Spiral root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::LandXml.v1_2.CoordGeom root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::LandXml.v1_2.Line root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::LandXml.v1_2.CrossSects root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::LandXml.v1_2.CrossSect root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::LandXml.v1_2.CrossSectSurf root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::LandXml.v1_2.CrossSectPnt root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::LandXml.v1_2.DesignCrossSectSurf root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::LandXml.v1_2.Project root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::LandXml.v1_2.Units root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::LandXml.v1_2.Metric root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::LandXml.v1_2.Imperial root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::LandXml.v1_2.CoordinateSystem root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::LandXml.v1_2.Application root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::LandXml.v1_2.Author root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::LandXml.v1_2.Survey root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::LandXml.v1_2.SurveyHeader root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::LandXml.v1_2.HeadOfPower root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::LandXml.v1_2.AdministrativeArea root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::LandXml.v1_2.AdministrativeDate root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::LandXml.v1_2.Annotation root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::LandXml.v1_2.SurveyorCertificate root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::LandXml.v1_2.PurposeOfSurvey root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::LandXml.v1_2.Amendment root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::LandXml.v1_2.AmendmentItem root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::LandXml.v1_2.Personnel root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::LandXml.v1_2.FieldNote root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::LandXml.v1_2.Equipment root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::LandXml.v1_2.InstrumentDetails root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::LandXml.v1_2.LaserDetails root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::LandXml.v1_2.GPSAntennaDetails root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::LandXml.v1_2.GPSReceiverDetails root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::LandXml.v1_2.Corrections root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::LandXml.v1_2.SurveyMonument root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::LandXml.v1_2.InstrumentSetup root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::LandXml.v1_2.LaserSetup root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::LandXml.v1_2.GPSSetup root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::LandXml.v1_2.TargetSetup root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::LandXml.v1_2.Backsight root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::LandXml.v1_2.RawObservation root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::LandXml.v1_2.TestObservation root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::LandXml.v1_2.OffsetVals root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::LandXml.v1_2.GPSVector root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::LandXml.v1_2.GPSPosition root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::LandXml.v1_2.GPSQCInfoLevel1 root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::LandXml.v1_2.GPSQCInfoLevel2 root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::LandXml.v1_2.ObservationGroup root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::LandXml.v1_2.ControlChecks root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::LandXml.v1_2.PointResults root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::LandXml.v1_2.ReducedObservation root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::LandXml.v1_2.ReducedArcObservation root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::LandXml.v1_2.RedHorizontalPosition root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::LandXml.v1_2.RedVerticalObservation root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::LandXml.v1_2.Monuments root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::LandXml.v1_2.Monument root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::LandXml.v1_2.Surfaces root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::LandXml.v1_2.Surface root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::LandXml.v1_2.SourceData root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::LandXml.v1_2.DataPoints root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::LandXml.v1_2.PointFiles root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::LandXml.v1_2.PointFile root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::LandXml.v1_2.Boundaries root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::LandXml.v1_2.Boundary root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::LandXml.v1_2.Breaklines root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::LandXml.v1_2.Breakline root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::LandXml.v1_2.RetWall root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::LandXml.v1_2.RetWallPnt root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::LandXml.v1_2.Contours root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::LandXml.v1_2.Contour root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::LandXml.v1_2.Definition root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::LandXml.v1_2.Pnts root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::LandXml.v1_2.P root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::LandXml.v1_2.Faces root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::LandXml.v1_2.F root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::LandXml.v1_2.Watersheds root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::LandXml.v1_2.Watershed root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::LandXml.v1_2.Outlet root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::LandXml.v1_2.SurfVolumes root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::LandXml.v1_2.SurfVolume root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::LandXml.v1_2.Parcels root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::LandXml.v1_2.Parcel root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::LandXml.v1_2.VolumeGeom root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::LandXml.v1_2.Title root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::LandXml.v1_2.Exclusions root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::LandXml.v1_2.LocationAddress root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::LandXml.v1_2.ComplexName root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::LandXml.v1_2.RoadName root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::LandXml.v1_2.AddressPoint root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::LandXml.v1_2.Alignments root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::LandXml.v1_2.Alignment root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::LandXml.v1_2.StaEquation root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::LandXml.v1_2.Profile root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::LandXml.v1_2.ProfSurf root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::LandXml.v1_2.ProfAlign root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::LandXml.v1_2.PVI root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::LandXml.v1_2.ParaCurve root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::LandXml.v1_2.UnsymParaCurve root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::LandXml.v1_2.CircCurve root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::LandXml.v1_2.PipeNetworks root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::LandXml.v1_2.PipeNetwork root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::LandXml.v1_2.Pipes root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::LandXml.v1_2.Pipe root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::LandXml.v1_2.CircPipe root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::LandXml.v1_2.ElliPipe root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::LandXml.v1_2.EggPipe root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::LandXml.v1_2.RectPipe root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::LandXml.v1_2.Channel root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::LandXml.v1_2.PipeFlow root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::LandXml.v1_2.Structs root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::LandXml.v1_2.Struct root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::LandXml.v1_2.CircStruct root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::LandXml.v1_2.RectStruct root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::LandXml.v1_2.InletStruct root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::LandXml.v1_2.OutletStruct root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::LandXml.v1_2.Connection root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::LandXml.v1_2.Invert root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::LandXml.v1_2.StructFlow root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::LandXml.v1_2.PlanFeatures root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::LandXml.v1_2.PlanFeature root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::LandXml.v1_2.GradeModel root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::LandXml.v1_2.GradeSurface root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::LandXml.v1_2.Zones root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::LandXml.v1_2.Zone root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::LandXml.v1_2.ZoneWidth root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::LandXml.v1_2.ZoneSlope root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::LandXml.v1_2.ZoneHinge root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::LandXml.v1_2.ZoneCutFill root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::LandXml.v1_2.ZoneMaterial root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::LandXml.v1_2.ZoneCrossSectStructure root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::LandXml.v1_2.Roadways root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::LandXml.v1_2.Roadway root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::LandXml.v1_2.Classification root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::LandXml.v1_2.DesignSpeed root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::LandXml.v1_2.DesignSpeed85th root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::LandXml.v1_2.Speeds root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::LandXml.v1_2.DailyTrafficVolume root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::LandXml.v1_2.DesignHour root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::LandXml.v1_2.PeakHour root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::LandXml.v1_2.TrafficVolume root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::LandXml.v1_2.Superelevation root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::LandXml.v1_2.Lanes root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::LandXml.v1_2.ThruLane root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::LandXml.v1_2.PassingLane root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::LandXml.v1_2.TurnLane root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::LandXml.v1_2.TwoWayLeftTurnLane root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::LandXml.v1_2.ClimbLane root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::LandXml.v1_2.OffsetLane root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::LandXml.v1_2.WideningLane root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::LandXml.v1_2.Roadside root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::LandXml.v1_2.Ditch root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::LandXml.v1_2.ObstructionOffset root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::LandXml.v1_2.BikeFacilities root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::LandXml.v1_2.RoadSign root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::LandXml.v1_2.DrivewayDensity root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::LandXml.v1_2.HazardRating root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::LandXml.v1_2.Intersections root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::LandXml.v1_2.Intersection root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::LandXml.v1_2.TrafficControl root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::LandXml.v1_2.Timing root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::LandXml.v1_2.Volume root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::LandXml.v1_2.TurnSpeed root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::LandXml.v1_2.TurnRestriction root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::LandXml.v1_2.Curb root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::LandXml.v1_2.Corner root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::LandXml.v1_2.CrashData root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::LandXml.v1_2.CrashHistory root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::LandXml.v1_2.PostedSpeed root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::LandXml.v1_2.NoPassingZone root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::LandXml.v1_2.DecisionSightDistance root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::LandXml.v1_2.BridgeElement root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::LandXml.v1_2.InSpiral root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::LandXml.v1_2.Curve1 root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::LandXml.v1_2.ConnSpiral root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::LandXml.v1_2.Curve2 root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::LandXml.v1_2.OutSpiral root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::LandXml.v1_2.AlignPI root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::LandXml.v1_2.AlignPIs root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::LandXml.v1_2.Cant root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::LandXml.v1_2.CantStation root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::LandXml.v1_2.SpeedStation root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::LandXml.v1_2.Start root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::LandXml.v1_2.End root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::LandXml.v1_2.Center root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::LandXml.v1_2.PI root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::LandXml.v1_2.MapPoint root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::LandXml.v1_2.InstrumentPoint root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::LandXml.v1_2.Location root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::LandXml.v1_2.TargetPoint root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::LandXml.v1_2.BacksightPoint root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::LandXml.v1_2.BeginRunoutSta root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::LandXml.v1_2.BeginRunoffSta root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::LandXml.v1_2.FullSuperSta root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::LandXml.v1_2.FullSuperelev root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::LandXml.v1_2.RunoffSta root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::LandXml.v1_2.StartofRunoutSta root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::LandXml.v1_2.EndofRunoutSta root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::LandXml.v1_2.AdverseSE root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public XRoot(global::LandXml.v1_2.Station root) {
            this.doc = new XDocument(root.Untyped);
            this.rootObject = root;
        }
        
        public virtual XDocument XDocument {
            get {
                return doc;
            }
        }
        
        public virtual XTypedElement Root {
            get {
                return rootObject;
            }
        }
        
        public static XRoot Load(string xmlFile) {
            XRoot root = new XRoot();
            root.doc = XDocument.Load(xmlFile);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRoot Load(string xmlFile, LoadOptions options) {
            XRoot root = new XRoot();
            root.doc = XDocument.Load(xmlFile, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRoot Load(TextReader textReader) {
            XRoot root = new XRoot();
            root.doc = XDocument.Load(textReader);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRoot Load(TextReader textReader, LoadOptions options) {
            XRoot root = new XRoot();
            root.doc = XDocument.Load(textReader, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRoot Load(XmlReader xmlReader) {
            XRoot root = new XRoot();
            root.doc = XDocument.Load(xmlReader);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRoot Parse(string text) {
            XRoot root = new XRoot();
            root.doc = XDocument.Parse(text);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public static XRoot Parse(string text, LoadOptions options) {
            XRoot root = new XRoot();
            root.doc = XDocument.Parse(text, options);
            XTypedElement typedRoot = XTypedServices.ToXTypedElement(root.doc.Root, LinqToXsdTypeManager.Instance);
            if ((typedRoot == null)) {
                throw new LinqToXsdException("Invalid root element in xml document.");
            }
            root.rootObject = typedRoot;
            return root;
        }
        
        public virtual void Save(string fileName) {
            doc.Save(fileName);
        }
        
        public virtual void Save(TextWriter textWriter) {
            doc.Save(textWriter);
        }
        
        public virtual void Save(XmlWriter writer) {
            doc.Save(writer);
        }
        
        public virtual void Save(TextWriter textWriter, SaveOptions options) {
            doc.Save(textWriter, options);
        }
        
        public virtual void Save(string fileName, SaveOptions options) {
            doc.Save(fileName, options);
        }
    }
}
